{
  "version": "https://jsonfeed.org/version/1",
  "title": "Read Rust - Rust 2020",
  "home_page_url": "https://readrust.net/",
  "feed_url": "https://readrust.net/rust-2020/feed.json",
  "description": "Rust 2020 posts on Read Rust",
  "author": {
    "name": "Wesley Moore",
    "url": "http://www.wezm.net/"
  },
  "items": [
    {
      "id": "815de63e-91bf-4440-8a71-c346bbc55e70",
      "title": "Rust 2020 - Embrace and Extend",
      "content_text": "I’ve used Rust a couple times at work for small tools, and written a couple of experiments in Rust. So before saying what I want out of Rust, I’d just like to say thanks to the wonderful community. I liked the Rust 2019 progress, and I can put most of my wants for 2020 under two main labels: Embrace and Extend.",
      "url": "https://samsieber.tech/posts/2019/11/14/rust-2020/",
      "date_published": "2019-11-14T08:46:32-07:00",
      "author": {
        "name": "Sam Sieber",
        "url": "https://samsieber.tech/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "e664c68c-e8f1-4ed9-91a0-96ac9efbdfee",
      "title": "Rust 2020: Scalability",
      "content_text": "In my Rust 2020 blog I tried to shy away from specific feature requests, instead zooming out to look at the Rust ecosystem as a whole. As a community, we've achieved great things but we should take care not to crumble under the weight of a scaling language and ecosystem. We all need to come together to ensure that Rust can sustainably scale - be it in large organisations, communities, or codebases.",
      "url": "https://mun-lang.org/blog/2019/11/14/rust-2020-scalability/",
      "date_published": "2019-11-14T00:00:00+00:00",
      "author": {
        "name": "Remco (Wodann)",
        "url": "https://mun-lang.org/blog"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "85649990-38e0-4194-94ca-efd377aadb68",
      "title": "Rust in 2020, one more thing",
      "content_text": "We need to work on error handling.",
      "url": "https://www.ncameron.org/blog/rust-in-2020-one-more-thing/",
      "date_published": "2019-11-13T22:41:39+00:00",
      "author": {
        "name": "Nick Cameron",
        "url": "http://www.ncameron.org/blog/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "01689f1b-555c-4334-8e11-914fb5036628",
      "title": "Answering the call for #Rust2020",
      "content_text": "Another year already and I’m still knocking myself out using Rust. It is also the year where I can use Rust in a professional environment with people interested in the technology. Let’s review my last year post and try to come up with what I think Rust should focused on for the next year. ",
      "url": "https://haurchefant.fr/posts/answering-the-call-rust-2020/",
      "date_published": "2019-11-13T00:00:00+00:00",
      "author": {
        "name": "Geobert Quach",
        "url": "https://haurchefant.fr/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "11476a1d-33f3-4077-919f-fa64f68d2020",
      "title": "Rust and 2020",
      "content_text": "In general I tend to be conservative about adding things to the language and want to push as much „downstream“ ‒ it’s better to add something to the standard library (or core, if applicable) than directly into the language ‒ a new function is better than new keyword or operator. A new crate is better than a lot of new stuff in the standard library. My view here reflects that.",
      "url": "https://vorner.github.io/2019/11/12/rust-2020.html",
      "date_published": "2019-11-12T00:00:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "1e059bb8-243b-49e7-8367-3e6b4558393f",
      "title": "Rust 2020: Scientific Rust",
      "content_text": "Rust could make the lives of (data-) scientists a lot easier, but as with most new programming languages it's a chicken and egg problem: When the applications and libraries are missing people will not use it and when there are no people with domain knowledge there won't be any applications / libraries. We do have some good projects like ndarray, RustSim, uom, etc. but we definitely need more (some stuff is also mentioned here Not-Yet-Awesome Rust). I'll try to work on more Rust stuff in 2020 and hope that more people will recognize Rust as a good candidate for scientific / numeric / high performance computing.",
      "url": "https://github.com/willi-kappler/rust_2020",
      "date_published": "2019-11-13T00:00:00+00:00",
      "author": {
        "name": "Willi Kappler",
        "url": "https://github.com/willi-kappler"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "73ca1a48-6e45-48f0-a06d-dd09bedd9d9f",
      "title": "2020 Rust: Accessibility",
      "content_text": "For a while I didn’t really feel a need to write a blog post for 2020. As far as I can tell we the Rust Community are doing a great job, and I just want us to keep doing what we’ve been doing. My biggest worry is that the people who contribute the most are dangerously close to burning out and I made a tweet much to that effect.\n\nBut I was talking with someone recently about what makes Rust great, the language and the community, and that ultimately boiled down to how inclusive and accessible we are, and it made me think saying more than just “keep doing what we’re doing and take care of yourselves” is in order.",
      "url": "https://yaah.dev/2020-accessibility",
      "date_published": "2019-09-12T13:40:00+00:00",
      "author": {
        "name": "Jane Lusby",
        "url": "https://yaah.dev/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "2df19538-8f67-4338-9eb8-9536c03a77c9",
      "title": "Rust 2020: the RFC process and distributions",
      "content_text": "I must have missed an e-mail in my inbox, because recently I started seeing people publish Rust 2020 blogposts so I thought, why not. I haven't been incredibly involved in the development of Rust in the last few months, (navigating the delicate balance of being self employed, working on free software and not burning out) but I feel like that might change again. And also, I still have feelings about software.\n\nThis post was also largely inspired by my friend XAMPPRocky's post, as well as attending NixCon a few weeks ago, and generally interacting with the NixOS RFC process.",
      "url": "https://spacekookie.de/blog/rust-2020-the-rfc-process-and-distributions/",
      "date_published": "2019-11-04T00:00:00+00:00",
      "author": {
        "name": "Katharina Fey",
        "url": "https://spacekookie.de/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "f7f1b3da-3847-4653-9410-cadb223b8e06",
      "title": "Rust 2020 - Loose Ends and Small Details",
      "content_text": "This is my answer to call for blogs 2020 and somewhat an update to my post from last year. You don't need to read the old post though, since this post is written in way that it incorporates that content as well.\n\nFor every topic, I will present my personal favorite parts, split into Completed (compared to the post from last year or was not on the list but is nice anyway), Open (existed last year and is still relevant), and New (got relevant or new idea).",
      "url": "https://crepererum.net/rust-2020/",
      "date_published": "2019-11-09T00:00:00+00:00",
      "author": {
        "name": "Marco Neumann",
        "url": "https://crepererum.net/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "dbe27f0a-48ce-492f-9200-688fc471a263",
      "title": "Rust 2020: Finish what we started and a bit about proc macros",
      "content_text": "Its that time of year again and its been exciting watching the language grow over this past year! Looking back through the Rust releases for the entire year, starting with 1.32.0 there’s been some fantastic progress, which is pretty easy to forget! So why not start with a bit of a recap of some of the big things from each release.",
      "url": "https://repnop.dev/posts/rust-2020/",
      "date_published": "2019-11-10T15:00:00-05:00",
      "author": {
        "name": "repnop",
        "url": "https://repnop.dev/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "c8c2efa0-e798-4951-b23d-7df4075c3b51",
      "title": "Rust 2020 Suggestions",
      "content_text": "I like Rust and I'm looking forward to more improvements. My suggestions: RLS should be better and faster, Const genrics, and Accept more correct programs.",
      "url": "https://www.reddit.com/r/rust/comments/ducnqy/rust_2020_suggestions/?utm_source=share&utm_medium=ios_app&utm_name=iossmf",
      "date_published": "2019-11-11T00:00:00+00:00",
      "author": {
        "name": "u/AnyPolicy",
        "url": "https://www.reddit.com/user/AnyPolicy/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "10b9ba68-29df-4218-b086-e17e4d8894cc",
      "title": "Rust in 2020: A User’s Perspective",
      "content_text": "I’m a Rust user rather than a Rust developer. I have been writing Rust code since just before the 1.0 release, and have followed the development of the language since then. I believe the future of systems programming is likely to be in Rust. I am certainly invested in the Rust language. Last month I resigned from my job writing embedded C, so I could start my own company, producing IP Networking software in Rust.",
      "url": "https://flocknetworks.com/rust2020/",
      "date_published": "2019-11-06T15:05:41+00:00",
      "author": {
        "name": "Nick Carter",
        "url": "https://flocknetworks.com/author/user/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "7d25a259-4131-4a03-8d9a-cea51b7790cb",
      "title": "Rust focus for 2020",
      "content_text": "In response to Rust's call for blogs about Rust development in 2020, here's a few of my own thoughts: Improve Error ergonomics, Stabilize existing approved features, Stabilize more ecosystem libraries.",
      "url": "https://gist.github.com/starkat99/32fd5156e5c744c30dde61e82ed7bcd9",
      "date_published": "2019-11-06T19:07:44+00:00",
      "author": {
        "name": "Kathryn Long",
        "url": "https://gist.github.com/starkat99"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "3b951b73-7ad8-448c-8c25-27d745fae481",
      "title": "Rust 2020: Funding",
      "content_text": "Blog posts that praise Rust are many but funding is generally in short supply. If even a small percentage of the money Rust saves companies was put back into the ecosystem it would help secure the future of the platform tremendously.",
      "url": "https://fasterthanli.me/blog/2019/rust-2020-funding/",
      "date_published": "2019-11-06T17:30:02+00:00",
      "author": {
        "name": "Amos",
        "url": "https://fasterthanli.me/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "3cd6a436-b878-4ccd-82d2-75231ed6ed1a",
      "title": "Rust 2021: Confidence",
      "content_text": "It is that time of year again. The Rust Team is soliciting ideas about rusts roadmap for the next years, so here goes mine. Thinking about the tagline I would give the coming editions, it is this: Rust 2015: Stability, Rust 2018: Productivity, Rust 2021: Confidence. I will explain what this means for me, but lets digress a bit first",
      "url": "https://swatinem.de/blog/rust-2020/",
      "date_published": "2019-11-05T00:00:00+00:00",
      "author": {
        "name": "Arpad Borsos",
        "url": "https://swatinem.de/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "53feabca-bda0-4d45-8dff-ee1a898c36c4",
      "title": "2020 : Milestones?",
      "content_text": "When I read the Nick Cameron's 2020 blog post, I thought about something that might be interesting about editions. One of the Nick points was that a 2021 edition would be useful as a rallying point to highlight progress on “async”. I agree that a rallying point is desirable, but I believe the edition system is a terrible way to do that...",
      "url": "https://internals.rust-lang.org/t/2020-milestones/11246",
      "date_published": "2019-11-06T06:12:46+00:00",
      "author": {
        "name": "Uther",
        "url": "https://internals.rust-lang.org/u/uther"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "e13462c4-9629-4a6a-9118-c6f918a4bae3",
      "title": "Rust 2020",
      "content_text": "It’s again the time of year when the Rust Core Team calls for blog posts for input into the next year’s roadmap. This is my contribution. It’s mostly a re-run of my Rust 2018 and Rust 2019 posts. Apart from the LLVM bound check optimization item, the theme here continues to be: Please mark features that have worked since 2015 as done.",
      "url": "https://hsivonen.fi/rust2020/",
      "date_published": "2019-11-06T00:00:00+00:00",
      "author": {
        "name": "Henri Sivonen",
        "url": "https://hsivonen.fi/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "49edb12f-3491-4965-abd5-dd2f936a5ea4",
      "title": "Rust 2020: are we compile yet? are we cache yet? are we doc yet?",
      "content_text": "I'm using Rust actively and it's mostly great. That said, there are some pain points: We are not compile just yet, We aren't cache yet, and We are mostly doc already, but not completely.",
      "url": "https://www.reddit.com/r/rust/comments/dsfi5m/rust_2020_are_we_compile_yet_are_we_cache_yet_are/",
      "date_published": "2019-11-06T00:00:00+00:00",
      "author": {
        "name": "u/unpleasant_truthz",
        "url": "https://www.reddit.com/user/unpleasant_truthz/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "d06968c3-bc41-4dda-966b-e46850d76549",
      "title": "Rust 2020 - Rust needs to be boring",
      "content_text": "I’ve been following Rust for long enough that I remember the early days (pre 1.0) where the language would keep changing from under me and I’d have to regularly rewrite parts of my project using the latest syntax. Fun times!\n\nOf course, things have changed a lot since then. The language has stabilized and we have Rust Editions to rely on for major releases. However, even though changes to the language are backwards compatible, there is still quite a lot of churn due to new features being added.",
      "url": "https://andygrove.io/2019/11/rust-2020-rust-needs-to-be-boring/",
      "date_published": "2019-11-07T00:00:00+00:00",
      "author": {
        "name": "Andy Grove",
        "url": "https://andygrove.io/blog"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "27428e03-39e4-450a-9e5d-2337865349d1",
      "title": "Rust 2020: towards a 1.0 crate ecosystem",
      "content_text": "The Rust language itself went 1.0 in 2015. And yet, almost 5 years later, at least in my anecdotal assessment talking to and reading things written by current or potential users, there is still a sense that the language is still in some way unfinished and a bit rough around the edges. I sympathize with these concerns.",
      "url": "https://tonyarcieri.com/rust-2020-towards-a-1-0-crate-ecosystem",
      "date_published": "2019-11-07T07:30:37-08:00",
      "author": {
        "name": "Tony Arcieri",
        "url": "https://tonyarcieri.com/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "d2c358d7-aae8-4cb8-93ac-edfaa975072b",
      "title": "Rust 2020: Discoverability",
      "content_text": "Here we come with the \"Request for Comment\" about Rust for the next 2020 year. I'm sure 2020 will be a great year, also because it's easy and fast to write :) My wishlist will be short and to the point. Looking back to what I wished for 2019 I'd like first to see what has changed, from my point of view.",
      "url": "https://apiraino.github.io/2019/11/04/call-for-2020-roadmap.html",
      "date_published": "2019-11-04T00:00:00+01:00",
      "author": {
        "name": "apiraino",
        "url": "https://apiraino.github.io/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "4177b33f-0805-4527-b833-259cf518761a",
      "title": "My Rust 2020 wish list: playing nice",
      "content_text": "This year I decided to jot down some thoughts for the Rust 2020 call for blog posts. I think the general theme here will be integration or \"playing well\", on different levels. A lot of these here are not language changes, and most of them already exist in some form. Probably none of them are new ideas.",
      "url": "https://blog.dend.ro/my-rust-2020-wishlist/",
      "date_published": "2019-11-03T00:00:00+00:00",
      "author": {
        "name": "Laurențiu Nicola",
        "url": "https://blog.dend.ro/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "dc4dd0c3-6f8b-4450-b779-7ed4f60024a0",
      "title": "Rust 2020",
      "content_text": "I'll start by arguing in favour of an edition in 2021. Then I will indulge in some rumination on the nature and necessity of roadmaps. Finally I'll make some probably obvious points in a long-winded way. Tl;dr, money is a thing we need to think about, async programming and WASM are important, and the compiler should be faster. For good measure, I will re-open a can of worms concerning the standard library.",
      "url": "https://www.ncameron.org/blog/rust-2020/",
      "date_published": "2019-11-04T20:24:52+00:00",
      "author": {
        "name": "Nick Cameron",
        "url": "http://www.ncameron.org/blog/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "b42bc892-2146-4ac9-b2a1-5e1536abcddc",
      "title": "My share on Rust 2020",
      "content_text": "Some weeks ago the rust-lang team made a blog post asking for opinions on what the priorities for the next year should be. It really amazes me how the team hears everybody and how friendly the community is.\n\nI have been learning rust for more than a year already, but this year was the first where I tried to write something real and production ready with it. I've gotta say I had a lot of ups and downs with it, but I'm still amazed by the language and its ecosystem. ",
      "url": "https://dev.to/augustocdias/my-share-on-rust-2020-27m8",
      "date_published": "2019-11-04T12:14:01+00:00",
      "author": {
        "name": "Augusto",
        "url": "https://dev.to/augustocdias"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "eeeecc4b-3e3d-43f1-b362-1fb59995d8c0",
      "title": "Rust 2020: Write Once, Run Anywhere",
      "content_text": "Thing that is cool: writing the same codebase and having it run on desktop, mobile, and web thing that is lame: JavaScript is the only language where people really do that right now, outside of big commercial game engines things that need to happen for Rust to get there…",
      "url": "https://www.boringcactus.com/2019/11/03/rust-2020.html",
      "date_published": "2019-11-03T00:00:00+00:00",
      "author": {
        "name": "Melody Horn",
        "url": "https://www.boringcactus.com/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "2c81b74e-4e60-42e9-961d-be0ebb810c87",
      "title": "Rust 2020: Generics & cargo features",
      "content_text": "This is my personal wishlist of things I'd like to see in 2020 relating to Rust. It only contains technical items, not because I disagree with the people who say we should prioritize some non-technical things, but because I feel like I don't have much of value to add to that topic.",
      "url": "https://blog.turbo.fish/rust-2020/",
      "date_published": "2019-11-02T00:00:00+00:00",
      "author": {
        "name": "Jonas Platte",
        "url": "https://blog.turbo.fish/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "688e00b5-4286-4181-af3e-31bf8090ae74",
      "title": "Rust 2020",
      "content_text": "We have all been called upon by @rustlang to share our thoughts on what we want from Rust in 2020. My wants are centered around the developer/debug experience more than the language itself. I find the language to be expressive and attractive for many types of development, and I find the community to be very pleasant.",
      "url": "https://bes.github.io/guide/2019/10/31/rust-2020-call-for-blogs.html",
      "date_published": "2019-10-31T17:34:11+00:00",
      "author": {
        "name": "Erik Zivkovic",
        "url": "https://bes.github.io/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "071c6a14-46cc-468f-a9c7-fd456360ffe9",
      "title": "Rust 2020",
      "content_text": "In 2019 the big focus was async/await, or at least as an outsider that is how it has appeared. The end result looks like it will deliver what we’ve all been waiting for - efficient async code that works well with Rust’s borrow checker. As 2019 is coming to a close and async/await is stabilizing, there is the obvious question - what next?",
      "url": "https://insanitybit.github.io/2019/10/30/rust-2020-wishlist-stabilize-the-ecosystem",
      "date_published": "2019-10-30T00:00:00+00:00",
      "author": {
        "name": "InsanityBit",
        "url": "https://insanitybit.github.io/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "2e31e9ad-357b-4a9a-b76b-fe8c5b5e993a",
      "title": "Rust 2020",
      "content_text": "In which I respond to the recent call for blogs put out by the Rust core team and write down my wishes for Rust in 2020. Yup, GATs and const generics are there, but also slice patterns and a request for better documentation around async development.",
      "url": "https://thomashartmann.dev/blog/rust-2020/",
      "date_published": "2019-11-04T00:00:00+00:00",
      "author": {
        "name": "Thomas Hartmann",
        "url": "https://thomashartmann.dev/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "3ece4d28-616e-4ea1-b182-f194738e220f",
      "title": "Rust 2020 reflections",
      "content_text": "This year, I am quite divided due to a bunch of competing desires: I still want all of the things that I wanted last year. In particular, it would be great if OS developement could finally be done on stable rust. Things like inline asm are blocking this. I think there is still a great deal of technical debt left over. I'll talk more about this later. It's not clear what the right balance of new features and working on technical debt is.",
      "url": "https://gist.github.com/mark-i-m/a39320449a1311515ac62e43ddd9dee0",
      "date_published": "2019-10-30T14:27:23+00:00",
      "author": {
        "name": "mark-i-m",
        "url": "https://gist.github.com/mark-i-m"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "a2f9e31b-3a47-48f0-981b-0f00fe03471e",
      "title": "@notriddle's Rust 2020 wishlist, or, Rust 2021: Integration",
      "content_text": "This is just a brain dump. Doing all of this is not going to happen, but all of it is stuff I know of that impacts Rust's integration with the rest of the world and eventually becoming Too Big To Fail like C++ is.",
      "url": "http://txti.es/notriddle-rust-2020",
      "date_published": "2019-11-01T00:00:00+00:00",
      "author": {
        "name": "notriddle",
        "url": "https://notriddle.com/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "a11ab1b4-86e3-4200-8cea-1c5ceb185dd8",
      "title": "Vision for Rust 2020 - Integration",
      "content_text": "With async close the completion everything looks to fall perfectly in place for maintaining the developer momentum that Rust has picked up. The language has surely shown to be approachable, flexible for new concepts and continues to be loved. So are we done? Of course not. I would like to see next years theme be Integration.",
      "url": "https://www.hardmo.de/article/2019-10-29-rust-2020-vision.md",
      "date_published": "2019-10-29T20:58:00+00:00",
      "author": {
        "name": "Andreas Molzer",
        "url": "https://www.hardmo.de/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "2f4398a8-473f-47e8-9c7a-616caba80e6d",
      "title": "Rust 2020",
      "content_text": "Every year there’s a call for blogs reflecting on goals for Rust for the upcoming year. For me, the theme is “Community First”.",
      "url": "https://blog.hwc.io/posts/rust-2020/",
      "date_published": "2019-10-31T10:31:16-04:00",
      "author": {
        "name": "hwc",
        "url": "https://blog.hwc.io/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "3f06b972-507b-441b-a4ce-9fbf0cdfcf96",
      "title": "My Rust 2020 ideas",
      "content_text": "This blog article is a small reply to the public call for blog posts 2020 in the Rust community. I will express what I would like Rust to go to, keeping in mind that it’s solely my ideas and opinions others’ might differ. The points expressed here are written by decreasing priority, starting with the feature I would like the most to see implemented as soon as possible.",
      "url": "https://phaazon.net/blog/rust-2020-ideas",
      "date_published": "2019-10-31T15:15:00+00:00",
      "author": {
        "name": "Dimitri Sabadie",
        "url": "http://phaazon.net/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "5458741c-97c2-4a8f-bb9e-73daf7317c81",
      "title": "Rust 2021: Sustainability",
      "content_text": "For the 2019 roadmap Jonathan Turner wrote a blog post called the The Fallow Year that posited that we should let the new designs \"field\" rest (go fallow) while we focus on other areas. To extend that metaphor, I would say Rust has fallen into monocropping in 2019 by focusing too much on our technical debt, when we needed to be addressing our social debt.",
      "url": "https://xampprocky.github.io/public/blog/rust-2021/",
      "date_published": "2019-11-01T00:00:00+00:00",
      "author": {
        "name": "XAMPPRocky",
        "url": "https://xampprocky.github.io/public/blog/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "e6cb0f49-a174-4d58-9acd-2253bbf3bfbe",
      "title": "Rust 2020: GUI and community",
      "content_text": "In response to the call for blogs about the vision for Rust for 2020, I’m going to write about GUI. I believe the time is right for a native GUI toolkit written in Rust, and that such a thing would fill a very important niche. There is a demand for performance (which, to me, includes startup time, RAM footprint, and binary size), and Rust is in the best position to deliver on that.",
      "url": "https://raphlinus.github.io/rust/druid/2019/10/31/rust-2020.html",
      "date_published": "2019-10-31T19:27:42+00:00",
      "author": {
        "name": "Raph Levien",
        "url": "https://raphlinus.github.io/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "05982a72-c4dd-49ff-8384-3af1783e7211",
      "title": "Rust 2020: Let’s embrace the Eternal September",
      "content_text": "User growth means accepting people that haven’t been exposed to Rust’s norms yet. Let’s not fracture because of an argument over top-posting vs bottom-quoting or something equally trivial. We need to make sure that Rust is prepared to welcome people who are just learning about Rust today. We don’t want anyone to feel like they’re late to the party.",
      "url": "https://tim.mcnamara.nz/post/188733729327/rust-2020-lets-embrace-the-eternal-september",
      "date_published": "2019-11-01T00:00:00+00:00",
      "author": {
        "name": "Tim McNamara",
        "url": "https://tim.mcnamara.nz/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "702fd8df-1263-4a2b-ae50-ea9b5e27e35a",
      "title": "Rust 2020 - Libraries, Libraries, Libraries!",
      "content_text": "The call for blogs was just issues a few days ago - and here I am writing about my biggest pains this year… because that’s what the call for blogs basically is for me… I write down my pains with Rust and hope things get better slowly next year.\n\nDon’t misunderstand what I want to say here though: Rust is awesome, has an awesome community, awesome tooling, awesome everything… well not completely (because otherwise I wouldn’t have to write this article, right?",
      "url": "https://beyermatthias.de/blog/2019/11/01/rust-2020-libraries-libraries-libraries/",
      "date_published": "2019-11-01T20:45:00+00:00",
      "author": {
        "name": "Matthias Beyer",
        "url": "https://beyermatthias.de/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "b2e770a7-f957-470a-8d0b-e5ba86c9872e",
      "title": "Rust 2020: A better ecosystem",
      "content_text": "I’m fairly new to Rust, and thus my perspective is that of someone who is not quite sophisticated with the language. I think Rust is hard to learn but should be manageable for your average software developer given enough persistence. Once you are over that barrier, you start thinking of building something in Rust. Probably, for the web, or a desktop application, or a mobile application; because that’s largely what many developers are building today.",
      "url": "https://omarabid.com/rust-2020",
      "date_published": "2019-11-01T13:37:48-07:00",
      "author": {
        "name": "Abid Omar",
        "url": "https://omarabid.com/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "15458bd0-19bb-4bf6-8460-5857ec6aecdc",
      "title": "Rust 2020: what about feedbacks?",
      "content_text": "I've been working on the Rust compiler for years. It got stabilized, then matured through the years. From my point of view, it now has most of the features I wanted. So what would I want for Rust 2020 and what's coming after? To sum it up: feedbacks.",
      "url": "https://blog.guillaume-gomez.fr/articles/2019-11-01+Rust+2020%3A+what+about+feedbacks%3F",
      "date_published": "2019-11-01T21:30:00+00:00",
      "author": {
        "name": "Guillaume Gomez",
        "url": "https://www.guillaume-gomez.fr/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "96de766f-57ab-48b5-a1ad-97c4fe3d67eb",
      "title": "My Wishes for Rust 2020",
      "content_text": "2019 was another huge year for rust, but instead of implementing the shiny new thing, it's been a focus on refining existing ideas. Having being using rust professionally for over 3 years, I feel I will very soon be regailing new rust developers of the times before NLL & async, where we had to play lexicon-fu to get things like caches to work in a reasonable fashion, or using super dooper combinator chains and wrestling with futures types (Either::A/B anyone?). So I'd like to make clear my acknowledgement that I am happy with the direction that the rust language is heading in, and these requests are really nice to haves.",
      "url": "https://cetra3.github.io/blog/rust-2020/",
      "date_published": "2019-10-30T00:00:00+00:00",
      "author": {
        "name": "Cetra",
        "url": "https://cetra3.github.io/blog/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "a9a47fee-f918-46f1-bd89-5ddbcbd69f32",
      "title": "Rust 2020: exploit dominance in web assembly and no_std",
      "content_text": "I'm a no name who's just grateful to play around with Rust. The most exciting aspects of Rust is seeing a expressive language go where other languages can barely tread (wasm,linux kernels, microcontrollers). I hope Rust continues to be the bleeding edge tech in web assembly land. I would dream for a world where Rust team works closely with browsers and what new wasm features will drop, and Rust is first to get it. no_std, async, and alloc have added a lot of fascinating new capabilities to the wasm ecosystem, i'd love to see some aspects get stabilized in this realm.",
      "url": "https://www.reddit.com/r/rust/comments/dp1omc/rust_2020_exploit_dominance_in_web_assembly_and/",
      "date_published": "2019-10-30T00:00:00+00:00",
      "author": {
        "name": "u/richardanaya",
        "url": "https://www.reddit.com/user/richardanaya/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "71a819be-cc9f-43fc-bc00-a9c182229efc",
      "title": "Rust 2020 – More Or Less",
      "content_text": "The Rust team asked for 2020 roadmap blog posts, so here goes: Let’s do more of what we’ve been doing so far.",
      "url": "https://llogiq.github.io/2019/10/30/rust-2020.html",
      "date_published": "2019-10-30T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "1b2c0d1d-3b43-444e-8755-e8e4a60cb2b7",
      "title": "Rust 2020: Private enum variants",
      "content_text": "For the 2021 edition of Rust, I'd like to see private enum variants.",
      "url": "https://www.reddit.com/r/rust/comments/dov6ox/rust_2020_private_enum_variants/",
      "date_published": "2019-10-30T00:00:00+00:00",
      "author": {
        "name": "u/joshlf_",
        "url": "https://www.reddit.com/user/joshlf_/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "86590c31-b27d-4d59-b6d8-23eaae5c3dac",
      "title": "My Rust 2020 blog post",
      "content_text": "The 2019 goals for the Rust project were to finish some old language and library features that have had a lot of design but have not been pushed through the finish line.",
      "url": "https://www.reddit.com/r/rust/comments/dot5pk/my_rust_2020_blog_post/",
      "date_published": "2019-10-30T00:00:00+00:00",
      "author": {
        "name": "u/0b_0101_001_1010",
        "url": "https://www.reddit.com/user/0b_0101_001_1010/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "a32d1a1c-6453-4222-b0a6-9a7f996f6864",
      "title": "A call for blogs 2020",
      "content_text": "Comments on the call for blog posts in 2020 on Reddit, some of which include 2020 wishes.",
      "url": "https://www.reddit.com/r/rust/comments/dorinl/a_call_for_blogs_2020/",
      "date_published": "2019-10-30T00:00:00+00:00",
      "author": {
        "name": "Commenters on Reddit",
        "url": "https://www.reddit.com/r/rust/"
      },
      "tags": [
        "Rust 2020"
      ]
    },
    {
      "id": "9dd9b6b4-1ab5-4421-b806-61594b0f5f98",
      "title": "A call for blogs 2020",
      "content_text": "We are accepting ideas about almost anything having to do with Rust: language features, tooling needs, community programs, ecosystem needs... if it's related to Rust, we want to hear about it.\n\nOne big question for this year: will there be a Rust 2021 edition? If so, 2020 would be the year to do a lot of associated work and plan the details. What would the edition's theme be?",
      "url": "https://blog.rust-lang.org/2019/10/29/A-call-for-blogs-2020.html",
      "date_published": "2019-10-29T00:00:00+00:00",
      "author": {
        "name": "The Rust Core Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Rust 2020"
      ]
    }
  ]
}