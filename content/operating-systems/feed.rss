<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - Operating Systems</title><link>https://readrust.net/</link><description>Operating Systems posts on Read Rust</description><item><title>Writing CloudABI applications in Rust</title><link>https://cloudabi.org/write/rust/</link><description>Installing a toolchain for Rust is very easy, as support for CloudABI has been upstreamed into the Rust codebase. Automated builds are performed by the Rust developers. As there hasn’t been a stable release of Rust to include CloudABI support yet, you must for now make use of Rust’s nightly track.</description><guid isPermaLink="false">7f54a4c5-d312-4b64-9d90-4945dd6d1b72</guid><pubDate>Fri, 13 Apr 2018 05:18:57 +0000</pubDate><dc:creator>CloudABI</dc:creator></item><item><title>New Pop!_OS Testing Release with Rust based Linux installer &quot;distinst&quot;</title><link>https://system76.com/pop/testing</link><description>Our second iteration of the 18.04 ISO is ready for testing. Testing the new installer and Optimus switching is our priority for this test release. Please test installing on a variety of hardware and provide feedback on any issues you encounter. If you run into any bugs, you can file them at https://github.com/pop-os/pop/issues.</description><guid isPermaLink="false">63444a58-4cbd-4441-b5c3-5f216560e276</guid><pubDate>Fri, 13 Apr 2018 21:05:51 +0000</pubDate><dc:creator>System76</dc:creator></item><item><title>Writing an OS in Pure Rust</title><link>https://os.phil-opp.com/news/2018-03-09-pure-rust/</link><description>Over the past six months we&apos;ve been working on a second edition of this blog. Our goals for this new version are numerous and we are still not done yet, but today we reached a major milestone: It is now possible to build the OS natively on Windows, macOS, and Linux without any non-Rust dependendencies.</description><guid isPermaLink="false">f6bf64c8-3a31-4614-ba91-f5c16a0986b5</guid><pubDate>Fri,  9 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Philipp Oppermann</dc:creator></item><item><title>Writing eBPF tracing tools in Rust</title><link>https://jvns.ca/blog/2018/02/05/rust-bcc/</link><description>Writing eBPF tracing tools in Rust</description><guid isPermaLink="false">92664a59-08e0-4185-aab2-cd0a29f303f8</guid><pubDate>Mon,  5 Feb 2018 10:23:44 +0000</pubDate><dc:creator>Julia Evans</dc:creator></item><item><title>PoC: compiling to eBPF from Rust</title><link>https://unhandledexpression.com/2018/02/02/poc-compiling-to-ebpf-from-rust/</link><description>I have been playing with eBPF (extended Berkeley Packet Filters), a neat feature present in recent Linux versions (it evolved from the much older BPF filters). It is a virtual machine running in th…</description><guid isPermaLink="false">444386e2-51fc-488e-ac19-0aa71a4d89a3</guid><pubDate>Fri,  2 Feb 2018 20:33:08 +0000</pubDate><dc:creator>Geoffroy Couprie</dc:creator></item></channel></rss>