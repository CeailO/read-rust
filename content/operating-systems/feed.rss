<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - Operating Systems</title><link>https://readrust.net/</link><description>Operating Systems posts on Read Rust</description><item><title>Writing an OS in Rust: Integration Tests</title><link>https://os.phil-opp.com/integration-tests/</link><description><![CDATA[In this post we complete the testing picture by implementing a basic integration test framework, which allows us to run tests on the target system. The idea is to run tests inside QEMU and report the results back to the host through the serial port.]]></description><guid isPermaLink="false">d8b1216b-bc74-43c1-9ce3-958e0e2b4154</guid><pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Philipp Oppermann</dc:creator></item><item><title>RSoC: Porting tokio to redox - week 3</title><link>https://www.redox-os.org/news/rsoc-porting-tokio-3/</link><description><![CDATA[Last week I ended off stating that the redox netstack might soon switch to an edge-triggered model. Well, I ended up feeling bad about the idea of letting others do my work and decided to stop being lazy and just do it myself.]]></description><guid isPermaLink="false">54270fa0-69d3-4ec1-8aca-c77191e164e5</guid><pubDate>Wed,  6 Jun 2018 00:00:00 +0000</pubDate><dc:creator>jD91mZM2</dc:creator></item><item><title>A Rust-based Unikernel</title><link>https://hermitcore.org/2018/06/06/A-Rust-based-Unikernel/</link><description><![CDATA[Rust is an extremely interesting language for the development of system software. This was the motivation to evaluate Rust for HermitCore and to develop an experimental version of our libOS in Rust. Components like the IP stack and uhyve (our unikernel hypervisor) are still written in C. In addition, the user applications are still compiled by our cross-compiler, which is based on gcc and supports C, C++, Fortran, and Go. The core of the kernel, however, is now written in Rust and published at GitHub. Our experiences so far are really good and we are looking into possibly new Rust activities, e.g., the support for Rust’s userland.]]></description><guid isPermaLink="false">d70a58d9-d528-41e3-a91c-605c58465d45</guid><pubDate>Wed,  6 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Stefan Lankes</dc:creator></item><item><title>RSoC: Porting Redox to AArch64 - 0x01</title><link>https://www.redox-os.org/news/rsoc-arm64-0x01/</link><description><![CDATA[A first calendar entry to describe my attempt on ARM64 support in Redox OS. Specifically, looking into the Raspberry Pi2/3(B)/3+ (all of them having a Cortex-A53 ARMv8 64-bit microprocessor, although for all my experiments I am going to use the Raspberry Pi 3(B)).]]></description><guid isPermaLink="false">49d19c19-5c1c-4a2e-9b5f-fa17c81e2ed3</guid><pubDate>Wed, 30 May 2018 00:00:00 +0000</pubDate><dc:creator>wizofe</dc:creator></item><item><title>RSoC: Implementing a FAT32 Filesystem in Redox</title><link>https://www.redox-os.org/news/rsoc-fat32-1/</link><description><![CDATA[This is a blog post about the work which I have done so far in implementing a FAT32 filesystem in Redox. Currently the Redox bootloader as well as the userspace filesystem daemon supports only RedoxFS.]]></description><guid isPermaLink="false">b9a686f1-3136-4307-a6ac-0f596babc6b5</guid><pubDate>Tue, 29 May 2018 00:00:00 +0000</pubDate><dc:creator>Deepak Sirone</dc:creator></item><item><title>RSoC: Porting tokio to Redox</title><link>https://www.redox-os.org/news/rsoc-porting-tokio-to-redox/</link><description><![CDATA[This is the weekly summary for my Redox Summer of Code project: Porting tokio to redox. Most of the time was spent on one bug, and after that one was figured out and fixed it ended up being relatively easy! As of now, 11⁄13 tokio examples seem to work on redox. The remaining examples are UDP and seem to fail because of something either with the rust standard library or my setup.]]></description><guid isPermaLink="false">4c951443-54b3-4187-8791-b27502ff193b</guid><pubDate>Mon, 21 May 2018 00:00:00 +0000</pubDate><dc:creator>jD91mZM2</dc:creator></item><item><title>Writing an OS in Rust: Unit Testing</title><link>https://os.phil-opp.com/unit-testing/</link><description><![CDATA[This post explores unit testing in no_std executables using Rust's built-in test framework. We will adjust our code so that cargo test works and add some basic unit tests to our VGA buffer module.]]></description><guid isPermaLink="false">18f0f723-af8c-4415-9ea4-6578a641729a</guid><pubDate>Sun, 29 Apr 2018 00:00:00 +0000</pubDate><dc:creator>Philipp Oppermann</dc:creator></item><item><title>Redox Summer of Code</title><link>https://www.redox-os.org/rsoc/</link><description><![CDATA[Redox OS is running its own Summer of Code this year, after the Microkernel devroom did not get accepted into GSoC 2018. We are looking for both Students and Sponsors who want to help Redox OS grow. At the moment, Redox OS has $10,800 in donations from various platforms to use to fund students. This will give us three students working for three months, if each student requests $1200 per month on average as described in Payment.

In order to fund more students, we are looking for sponsors who are willing to fund RSoC. Donations can be made on the Donate page. All donations will be used to fund Redox OS activities, with about 90% of those over the past year currently allocated to RSoC.]]></description><guid isPermaLink="false">a4be83a4-b126-479a-bfca-81e7d612d2b3</guid><pubDate>Sat, 14 Apr 2018 21:10:05 +0000</pubDate><dc:creator>Jeremy Soller</dc:creator></item><item><title>New Pop!_OS Testing Release with Rust based Linux installer &quot;distinst&quot;</title><link>https://system76.com/pop/testing</link><description><![CDATA[Our second iteration of the 18.04 ISO is ready for testing. Testing the new installer and Optimus switching is our priority for this test release. Please test installing on a variety of hardware and provide feedback on any issues you encounter. If you run into any bugs, you can file them at https://github.com/pop-os/pop/issues.]]></description><guid isPermaLink="false">63444a58-4cbd-4441-b5c3-5f216560e276</guid><pubDate>Fri, 13 Apr 2018 21:05:51 +0000</pubDate><dc:creator>System76</dc:creator></item><item><title>Writing CloudABI applications in Rust</title><link>https://cloudabi.org/write/rust/</link><description><![CDATA[Installing a toolchain for Rust is very easy, as support for CloudABI has been upstreamed into the Rust codebase. Automated builds are performed by the Rust developers. As there hasn’t been a stable release of Rust to include CloudABI support yet, you must for now make use of Rust’s nightly track.]]></description><guid isPermaLink="false">7f54a4c5-d312-4b64-9d90-4945dd6d1b72</guid><pubDate>Fri, 13 Apr 2018 05:18:57 +0000</pubDate><dc:creator>CloudABI</dc:creator></item><item><title>Writing an OS in Pure Rust</title><link>https://os.phil-opp.com/news/2018-03-09-pure-rust/</link><description><![CDATA[Over the past six months we've been working on a second edition of this blog. Our goals for this new version are numerous and we are still not done yet, but today we reached a major milestone: It is now possible to build the OS natively on Windows, macOS, and Linux without any non-Rust dependendencies.]]></description><guid isPermaLink="false">f6bf64c8-3a31-4614-ba91-f5c16a0986b5</guid><pubDate>Fri,  9 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Philipp Oppermann</dc:creator></item><item><title>Writing eBPF tracing tools in Rust</title><link>https://jvns.ca/blog/2018/02/05/rust-bcc/</link><description><![CDATA[Writing eBPF tracing tools in Rust]]></description><guid isPermaLink="false">92664a59-08e0-4185-aab2-cd0a29f303f8</guid><pubDate>Mon,  5 Feb 2018 10:23:44 +0000</pubDate><dc:creator>Julia Evans</dc:creator></item><item><title>PoC: compiling to eBPF from Rust</title><link>https://unhandledexpression.com/2018/02/02/poc-compiling-to-ebpf-from-rust/</link><description><![CDATA[I have been playing with eBPF (extended Berkeley Packet Filters), a neat feature present in recent Linux versions (it evolved from the much older BPF filters). It is a virtual machine running in th…]]></description><guid isPermaLink="false">444386e2-51fc-488e-ac19-0aa71a4d89a3</guid><pubDate>Fri,  2 Feb 2018 20:33:08 +0000</pubDate><dc:creator>Geoffroy Couprie</dc:creator></item></channel></rss>