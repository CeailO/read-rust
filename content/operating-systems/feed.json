{
  "version": "https://jsonfeed.org/version/1",
  "title": "Read Rust - Operating Systems",
  "home_page_url": "https://readrust.net/",
  "feed_url": "https://readrust.net/operating-systems/feed.json",
  "description": "Operating Systems posts on Read Rust",
  "author": {
    "name": "Wesley Moore",
    "url": "http://www.wezm.net/"
  },
  "items": [
    {
      "id": "4c951443-54b3-4187-8791-b27502ff193b",
      "title": "RSoC: Porting tokio to Redox",
      "content_text": "This is the weekly summary for my Redox Summer of Code project: Porting tokio to redox. Most of the time was spent on one bug, and after that one was figured out and fixed it ended up being relatively easy! As of now, 11⁄13 tokio examples seem to work on redox. The remaining examples are UDP and seem to fail because of something either with the rust standard library or my setup.",
      "url": "https://www.redox-os.org/news/rsoc-porting-tokio-to-redox/",
      "date_published": "2018-05-21T00:00:00+00:00",
      "author": {
        "name": "jD91mZM2",
        "url": "https://www.redox-os.org/news/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "18f0f723-af8c-4415-9ea4-6578a641729a",
      "title": "Writing an OS in Rust: Unit Testing",
      "content_text": "This post explores unit testing in no_std executables using Rust's built-in test framework. We will adjust our code so that cargo test works and add some basic unit tests to our VGA buffer module.",
      "url": "https://os.phil-opp.com/unit-testing/",
      "date_published": "2018-04-29T00:00:00+00:00",
      "author": {
        "name": "Philipp Oppermann",
        "url": "https://os.phil-opp.com/second-edition/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "a4be83a4-b126-479a-bfca-81e7d612d2b3",
      "title": "Redox Summer of Code",
      "content_text": "Redox OS is running its own Summer of Code this year, after the Microkernel devroom did not get accepted into GSoC 2018. We are looking for both Students and Sponsors who want to help Redox OS grow. At the moment, Redox OS has $10,800 in donations from various platforms to use to fund students. This will give us three students working for three months, if each student requests $1200 per month on average as described in Payment.\n\nIn order to fund more students, we are looking for sponsors who are willing to fund RSoC. Donations can be made on the Donate page. All donations will be used to fund Redox OS activities, with about 90% of those over the past year currently allocated to RSoC.",
      "url": "https://www.redox-os.org/rsoc/",
      "date_published": "2018-04-14T21:10:05+00:00",
      "author": {
        "name": "Jeremy Soller",
        "url": "https://www.redox-os.org/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "7f54a4c5-d312-4b64-9d90-4945dd6d1b72",
      "title": "Writing CloudABI applications in Rust",
      "content_text": "Installing a toolchain for Rust is very easy, as support for CloudABI has been upstreamed into the Rust codebase. Automated builds are performed by the Rust developers. As there hasn’t been a stable release of Rust to include CloudABI support yet, you must for now make use of Rust’s nightly track.",
      "url": "https://cloudabi.org/write/rust/",
      "date_published": "2018-04-13T05:18:57+00:00",
      "author": {
        "name": "CloudABI",
        "url": "https://cloudabi.org/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "63444a58-4cbd-4441-b5c3-5f216560e276",
      "title": "New Pop!_OS Testing Release with Rust based Linux installer \"distinst\"",
      "content_text": "Our second iteration of the 18.04 ISO is ready for testing. Testing the new installer and Optimus switching is our priority for this test release. Please test installing on a variety of hardware and provide feedback on any issues you encounter. If you run into any bugs, you can file them at https://github.com/pop-os/pop/issues.",
      "url": "https://system76.com/pop/testing",
      "date_published": "2018-04-13T21:05:51+00:00",
      "author": {
        "name": "System76",
        "url": "https://system76.com/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "f6bf64c8-3a31-4614-ba91-f5c16a0986b5",
      "title": "Writing an OS in Pure Rust",
      "content_text": "Over the past six months we've been working on a second edition of this blog. Our goals for this new version are numerous and we are still not done yet, but today we reached a major milestone: It is now possible to build the OS natively on Windows, macOS, and Linux without any non-Rust dependendencies.",
      "url": "https://os.phil-opp.com/news/2018-03-09-pure-rust/",
      "date_published": "2018-03-09T00:00:00+00:00",
      "author": {
        "name": "Philipp Oppermann",
        "url": "https://os.phil-opp.com/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "92664a59-08e0-4185-aab2-cd0a29f303f8",
      "title": "Writing eBPF tracing tools in Rust",
      "content_text": "Writing eBPF tracing tools in Rust",
      "url": "https://jvns.ca/blog/2018/02/05/rust-bcc/",
      "date_published": "2018-02-05T10:23:44+00:00",
      "author": {
        "name": "Julia Evans",
        "url": "https://jvns.ca/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "444386e2-51fc-488e-ac19-0aa71a4d89a3",
      "title": "PoC: compiling to eBPF from Rust",
      "content_text": "I have been playing with eBPF (extended Berkeley Packet Filters), a neat feature present in recent Linux versions (it evolved from the much older BPF filters). It is a virtual machine running in th…",
      "url": "https://unhandledexpression.com/2018/02/02/poc-compiling-to-ebpf-from-rust/",
      "date_published": "2018-02-02T20:33:08+00:00",
      "author": {
        "name": "Geoffroy Couprie",
        "url": "https://unhandledexpression.com/"
      },
      "tags": [
        "Operating Systems"
      ]
    }
  ]
}