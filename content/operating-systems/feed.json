{
  "version": "https://jsonfeed.org/version/1",
  "title": "Read Rust - Operating Systems",
  "home_page_url": "https://readrust.net/",
  "feed_url": "https://readrust.net/operating-systems/feed.json",
  "description": "Operating Systems posts on Read Rust",
  "author": {
    "name": "Wesley Moore",
    "url": "http://www.wezm.net/"
  },
  "items": [
    {
      "id": "2c73855c-6079-427a-b075-4c07ed3cec23",
      "title": "Cross-compiling Rust code to Minix",
      "content_text": "I’ve decided to take a look at Minix, which is an interesting microkernel OS. Naturally after building Minix from git, the first thing I decided to try was porting Rust’s std to Minix so I could cross-compile Rust programs from Linux to run under Minix. Okay, I suppose I could have started with something else, but porting Rust software and modifying the platform-depending part of std is something I have experience with from working on Redox OS. And Rust really isn’t that hard to port.",
      "url": "https://iandouglasscott.com/2019/02/18/cross-compiling-rust-code-to-minix/",
      "date_published": "2019-02-18T13:00:00-08:00",
      "author": {
        "name": "Ian Douglas Scott",
        "url": "https://iandouglasscott.com/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "2b4a2862-e8ba-427b-aa27-c206356f5700",
      "title": "Creating 🌊 web-server .deb binary with Rust",
      "content_text": "We are going to make a demo linux web-server with systemd, config file and installable .deb binary in Rust.",
      "url": "https://gill.net.in/posts/creating-web-server-deb-binary-with-rust/",
      "date_published": "2019-01-29T00:00:00+00:00",
      "author": {
        "name": "Harry Gill",
        "url": "https://gill.net.in/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "b88f26ba-23c6-4d9b-9559-7ccc6477c7af",
      "title": "Writing an OS in Rust - Introduction to Paging",
      "content_text": "This post introduces paging, a very common memory management scheme that we will also use for our operating system. It explains why memory isolation is needed, how segmentation works, what virtual memory is, and how paging solves memory fragmentation issues. It also explores the layout of multilevel page tables on the x86_64 architecture.",
      "url": "https://os.phil-opp.com/paging-introduction/",
      "date_published": "2019-01-14T00:00:00+00:00",
      "author": {
        "name": "Philipp Oppermann",
        "url": "https://os.phil-opp.com/second-edition/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "6bf8dccd-51b6-4dcb-a9eb-e38923d28a2c",
      "title": "Bootstrapping Rust",
      "content_text": "It has been a long-standing tradition to develop a language far enough to be able to write the language's compiler in the same language, and Rust does the same. Rust is nowadays written in Rust. We've tracked down the earlier Rust versions, which were written in OCaml, and were planning to use these to bootstrap Rust. But in parallel, John Hudge (Mutabah) developed a Rust compiler, called \"mrustc\", written in C++. mrustc is now good enough to compile Rust 1.19.0. Using mrustc, we were able to build Rust entirely from source with a bootstrap chain",
      "url": "https://www.gnu.org/software/guix/blog/2018/bootstrapping-rust/",
      "date_published": "2018-12-11T00:00:00+00:00",
      "author": {
        "name": "Danny Milosavljevic",
        "url": "https://www.gnu.org/software/guix/blog/"
      },
      "tags": [
        "Language",
        "Operating Systems"
      ]
    },
    {
      "id": "97757259-e11d-4a4f-88cb-2653ca3cb977",
      "title": "Hardware Interrupts | Writing an OS in Rust",
      "content_text": "In this post we set up the programmable interrupt controller to correctly forward hardware interrupts to the CPU. To handle these interrupts we add new entries to our interrupt descriptor table, just like we did for our exception handlers. We will learn how to get periodic timer interrupts and how to get input from the keyboard.",
      "url": "https://os.phil-opp.com/hardware-interrupts/",
      "date_published": "2018-10-23T00:00:00+00:00",
      "author": {
        "name": "Philipp Oppermann",
        "url": "https://os.phil-opp.com/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "4ae0bbf7-720b-48d3-8c5d-d5b3c8e061dd",
      "title": "Red Hat's Stratis Storage Project Reaches Its 1.0 Stable Milestone",
      "content_text": "Stratis 1.0 was quietly released last week with the 1.0 version marking its initial stable release and where also the on-disk meta-data format has been stabilized. Red Hat engineers believe Stratis is now ready for more widespread testing.",
      "url": "https://www.phoronix.com/scan.php?page=news_item&px=Stratis-1.0-Released",
      "date_published": "2018-10-02T04:48:34-04:00",
      "author": {
        "name": "Michael Larabel",
        "url": "https://www.phoronix.com/scan.php?page=home"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "ab387870-cbed-4f6d-b1e2-22d2c2686de4",
      "title": "RSoC: Relibc - Wrap up",
      "content_text": "Time for me to pack up and never ever contribute to Redox ever again… Just kidding. This isn’t goodbye, you can’t get rid of me that easily I’m afraid. I’ll definitely want to contribute more, can’t however say with certainty how much time I’ll get, for school is approaching, quickly",
      "url": "https://www.redox-os.org/news/rsoc-relibc-final/",
      "date_published": "2018-08-11T00:00:00+00:00",
      "author": {
        "name": "jD91mZM2",
        "url": "https://www.redox-os.org/news/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "6f2abec2-1096-4a82-90db-b1962a2876f7",
      "title": "RSoC: FAT32 Filesystem in Redox - 3",
      "content_text": "The previous blog post discusses how raw disk reads were implemented in the loader stub. The next step was to implement a clean read API which can be used by different filesystem libraries in order to read their respective filesystems. Since the raw reads from the BIOS interrupt had a granularity in terms of sectors(each sector being 512 bytes), the reads had to be translated in order to provide byte level granularity. The clone_from_slice function ensures that a direct call to memcopy is not required. The refined read function is here.",
      "url": "https://www.redox-os.org/news/rsoc-fat32-3/",
      "date_published": "2018-08-09T00:00:00+00:00",
      "author": {
        "name": "Deepak Sirone",
        "url": "https://www.redox-os.org/news/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "415e9361-8fad-4317-ae02-7abeb1faad3d",
      "title": "The State of Rust on Haiku",
      "content_text": "With the recent addition of Rust 1.27.0 in the HaikuPorts repository, I thought it would be good to do a short, public write-up of the current state of Rust on Haiku, and some insight into the future.",
      "url": "https://www.haiku-os.org/blog/nielx/2018-07-05_the_state_of_rust_on_haiku/",
      "date_published": "2018-07-05T07:31:51+02:00",
      "author": {
        "name": "nielx",
        "url": "https://www.haiku-os.org/blog/"
      },
      "tags": [
        "Operating Systems",
        "Language"
      ]
    },
    {
      "id": "382f988d-9fe3-4525-9b21-0c6cb4373303",
      "title": "RSoC: Porting Redox to ARM (AArch64) — 0x02",
      "content_text": "At the time of writing the previous blog the plan was to target the Raspberry Pi 3 (Cortex A53) as a development platform because of its availability, popularity and community. Sadly, it seems that Broadcom went through a lot of shortcuts while implementing this specific design, which means features like GIC are half-there or completely missing, like in this case.\n\nAfter a discussion with @microcolonel, he proposed and kindly sent me a HiKey960 reference SoC from the awesome Linaro 96Boards initiative. The quality of this board is definitely a lot better than the Raspberry Pi and the documentation is detailed and open. Great stuff.",
      "url": "https://medium.com/@wizofe/rsoc-porting-redox-to-arm-aarch64-0x02-c566ee22f377",
      "date_published": "2018-08-05T22:39:42.784+00:00",
      "author": {
        "name": "ioannis valasakis",
        "url": "https://medium.com/@wizofe"
      },
      "tags": [
        "Operating Systems",
        "Embedded"
      ]
    },
    {
      "id": "a721af0b-e469-40ba-8ddc-f5f2a305483f",
      "title": "Signal Hook: Unix signal hanadling in Rust",
      "content_text": "As promised in the previous article (thanks for all the valuable feedback ‒ I didn’t have the time to act on it yet, but I will), this talks about Unix signal handling.\n\nLong story short, I wasn’t happy about the signal handling story in Rust and this is my attempt at improving it.",
      "url": "https://vorner.github.io/2018/06/28/signal-hook.html",
      "date_published": "2018-06-28T00:00:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Language",
        "Operating Systems"
      ]
    },
    {
      "id": "87ea8aa4-a134-4f8a-8ff2-fc33f4832020",
      "title": "RSoC: FAT32 Filesystem in Redox - 2",
      "content_text": "This is the second blog post about implementing a FAT32 filesystem in Redox.",
      "url": "https://www.redox-os.org/news/rsoc-fat32-2/",
      "date_published": "2018-07-03T00:00:00+00:00",
      "author": {
        "name": "Deepak Sirone",
        "url": "https://www.redox-os.org/news/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "3b9229a6-90a7-48f7-983f-c2eb1117115e",
      "title": "Nebulet: More answers",
      "content_text": "Over the last couple of weeks, Nebulet has progressed signifigantly. Because of that, I think it’s time to talk about why I made certain decisions when designing and writing Nebulet.",
      "url": "https://lsneff.me/more-answers.html",
      "date_published": "2018-06-28T00:00:00+00:00",
      "author": {
        "name": "Lachlan Sneff",
        "url": "https://twitter.com/lachlansneff"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "44759beb-04e0-4524-898b-5ba007a80e10",
      "title": "RSoC: Porting Redox to AArch64–0x01",
      "content_text": "All excited. A first calendar entry to describe my attempt on arm64 support in Redox OS. Specifically, looking into the Raspberry Pi2/3b/3+(all of them having a Cortex-A53 ARMv8 64-bit microprocessor, although for all my experiments I am going to use the Raspberry Pi 3b.",
      "url": "https://medium.com/@wizofe/rsoc-porting-redox-to-aarch64-0x01-3dee87644c97",
      "date_published": "2018-06-26T17:26:31.958+00:00",
      "author": {
        "name": "ioannis valasakis",
        "url": "https://medium.com/@wizofe"
      },
      "tags": [
        "Operating Systems",
        "Embedded"
      ]
    },
    {
      "id": "e11a6e53-3315-44c0-a23f-7f0217019c55",
      "title": "Writing an OS in Rust: Double Faults",
      "content_text": "In this post we explore double faults in detail. We also set up an Interrupt Stack Table to catch double faults on a separate kernel stack. This way, we can completely prevent triple faults, even on kernel stack overflow.",
      "url": "https://os.phil-opp.com/double-fault-exceptions/",
      "date_published": "2018-06-18T00:00:00+00:00",
      "author": {
        "name": "Philipp Oppermann",
        "url": "https://os.phil-opp.com/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "e75667af-3d07-40cb-a610-4c7a6786064b",
      "title": "Writing an OS in Rust: CPU Exceptions",
      "content_text": "In this post, we start exploring CPU exceptions. Exceptions occur in various erroneous situations, for example when accessing an invalid memory address or when dividing by zero. To catch them, we have to set up an interrupt descriptor table that provides handler functions. At the end of this post, our kernel will be able to catch breakpoint exceptions and to resume normal execution afterwards.",
      "url": "https://os.phil-opp.com/cpu-exceptions/",
      "date_published": "2018-06-17T00:00:00+00:00",
      "author": {
        "name": "Philipp Oppermann",
        "url": "https://os.phil-opp.com/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "d8b1216b-bc74-43c1-9ce3-958e0e2b4154",
      "title": "Writing an OS in Rust: Integration Tests",
      "content_text": "In this post we complete the testing picture by implementing a basic integration test framework, which allows us to run tests on the target system. The idea is to run tests inside QEMU and report the results back to the host through the serial port.",
      "url": "https://os.phil-opp.com/integration-tests/",
      "date_published": "2018-06-15T00:00:00+00:00",
      "author": {
        "name": "Philipp Oppermann",
        "url": "https://os.phil-opp.com/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "49d19c19-5c1c-4a2e-9b5f-fa17c81e2ed3",
      "title": "RSoC: Porting Redox to AArch64 - 0x01",
      "content_text": "A first calendar entry to describe my attempt on ARM64 support in Redox OS. Specifically, looking into the Raspberry Pi2/3(B)/3+ (all of them having a Cortex-A53 ARMv8 64-bit microprocessor, although for all my experiments I am going to use the Raspberry Pi 3(B)).",
      "url": "https://www.redox-os.org/news/rsoc-arm64-0x01/",
      "date_published": "2018-05-30T00:00:00+00:00",
      "author": {
        "name": "wizofe",
        "url": "https://www.redox-os.org/news/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "54270fa0-69d3-4ec1-8aca-c77191e164e5",
      "title": "RSoC: Porting tokio to redox - week 3",
      "content_text": "Last week I ended off stating that the redox netstack might soon switch to an edge-triggered model. Well, I ended up feeling bad about the idea of letting others do my work and decided to stop being lazy and just do it myself.",
      "url": "https://www.redox-os.org/news/rsoc-porting-tokio-3/",
      "date_published": "2018-06-06T00:00:00+00:00",
      "author": {
        "name": "jD91mZM2",
        "url": "https://www.redox-os.org/news/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "d70a58d9-d528-41e3-a91c-605c58465d45",
      "title": "A Rust-based Unikernel",
      "content_text": "Rust is an extremely interesting language for the development of system software. This was the motivation to evaluate Rust for HermitCore and to develop an experimental version of our libOS in Rust. Components like the IP stack and uhyve (our unikernel hypervisor) are still written in C. In addition, the user applications are still compiled by our cross-compiler, which is based on gcc and supports C, C++, Fortran, and Go. The core of the kernel, however, is now written in Rust and published at GitHub. Our experiences so far are really good and we are looking into possibly new Rust activities, e.g., the support for Rust’s userland.",
      "url": "https://hermitcore.org/2018/06/06/A-Rust-based-Unikernel/",
      "date_published": "2018-06-06T00:00:00+00:00",
      "author": {
        "name": "Stefan Lankes",
        "url": "https://hermitcore.org/blog/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "b9a686f1-3136-4307-a6ac-0f596babc6b5",
      "title": "RSoC: Implementing a FAT32 Filesystem in Redox",
      "content_text": "This is a blog post about the work which I have done so far in implementing a FAT32 filesystem in Redox. Currently the Redox bootloader as well as the userspace filesystem daemon supports only RedoxFS.",
      "url": "https://www.redox-os.org/news/rsoc-fat32-1/",
      "date_published": "2018-05-29T00:00:00+00:00",
      "author": {
        "name": "Deepak Sirone",
        "url": "https://www.redox-os.org/news/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "4c951443-54b3-4187-8791-b27502ff193b",
      "title": "RSoC: Porting tokio to Redox",
      "content_text": "This is the weekly summary for my Redox Summer of Code project: Porting tokio to redox. Most of the time was spent on one bug, and after that one was figured out and fixed it ended up being relatively easy! As of now, 11⁄13 tokio examples seem to work on redox. The remaining examples are UDP and seem to fail because of something either with the rust standard library or my setup.",
      "url": "https://www.redox-os.org/news/rsoc-porting-tokio-to-redox/",
      "date_published": "2018-05-21T00:00:00+00:00",
      "author": {
        "name": "jD91mZM2",
        "url": "https://www.redox-os.org/news/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "18f0f723-af8c-4415-9ea4-6578a641729a",
      "title": "Writing an OS in Rust: Unit Testing",
      "content_text": "This post explores unit testing in no_std executables using Rust's built-in test framework. We will adjust our code so that cargo test works and add some basic unit tests to our VGA buffer module.",
      "url": "https://os.phil-opp.com/unit-testing/",
      "date_published": "2018-04-29T00:00:00+00:00",
      "author": {
        "name": "Philipp Oppermann",
        "url": "https://os.phil-opp.com/second-edition/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "a4be83a4-b126-479a-bfca-81e7d612d2b3",
      "title": "Redox Summer of Code",
      "content_text": "Redox OS is running its own Summer of Code this year, after the Microkernel devroom did not get accepted into GSoC 2018. We are looking for both Students and Sponsors who want to help Redox OS grow. At the moment, Redox OS has $10,800 in donations from various platforms to use to fund students. This will give us three students working for three months, if each student requests $1200 per month on average as described in Payment.\n\nIn order to fund more students, we are looking for sponsors who are willing to fund RSoC. Donations can be made on the Donate page. All donations will be used to fund Redox OS activities, with about 90% of those over the past year currently allocated to RSoC.",
      "url": "https://www.redox-os.org/rsoc/",
      "date_published": "2018-04-14T21:10:05+00:00",
      "author": {
        "name": "Jeremy Soller",
        "url": "https://www.redox-os.org/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "7f54a4c5-d312-4b64-9d90-4945dd6d1b72",
      "title": "Writing CloudABI applications in Rust",
      "content_text": "Installing a toolchain for Rust is very easy, as support for CloudABI has been upstreamed into the Rust codebase. Automated builds are performed by the Rust developers. As there hasn’t been a stable release of Rust to include CloudABI support yet, you must for now make use of Rust’s nightly track.",
      "url": "https://cloudabi.org/write/rust/",
      "date_published": "2018-04-13T05:18:57+00:00",
      "author": {
        "name": "CloudABI",
        "url": "https://cloudabi.org/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "63444a58-4cbd-4441-b5c3-5f216560e276",
      "title": "New Pop!_OS Testing Release with Rust based Linux installer \"distinst\"",
      "content_text": "Our second iteration of the 18.04 ISO is ready for testing. Testing the new installer and Optimus switching is our priority for this test release. Please test installing on a variety of hardware and provide feedback on any issues you encounter. If you run into any bugs, you can file them at https://github.com/pop-os/pop/issues.",
      "url": "https://system76.com/pop/testing",
      "date_published": "2018-04-13T21:05:51+00:00",
      "author": {
        "name": "System76",
        "url": "https://system76.com/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "f6bf64c8-3a31-4614-ba91-f5c16a0986b5",
      "title": "Writing an OS in Pure Rust",
      "content_text": "Over the past six months we've been working on a second edition of this blog. Our goals for this new version are numerous and we are still not done yet, but today we reached a major milestone: It is now possible to build the OS natively on Windows, macOS, and Linux without any non-Rust dependendencies.",
      "url": "https://os.phil-opp.com/news/2018-03-09-pure-rust/",
      "date_published": "2018-03-09T00:00:00+00:00",
      "author": {
        "name": "Philipp Oppermann",
        "url": "https://os.phil-opp.com/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "92664a59-08e0-4185-aab2-cd0a29f303f8",
      "title": "Writing eBPF tracing tools in Rust",
      "content_text": "Writing eBPF tracing tools in Rust",
      "url": "https://jvns.ca/blog/2018/02/05/rust-bcc/",
      "date_published": "2018-02-05T10:23:44+00:00",
      "author": {
        "name": "Julia Evans",
        "url": "https://jvns.ca/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "444386e2-51fc-488e-ac19-0aa71a4d89a3",
      "title": "PoC: compiling to eBPF from Rust",
      "content_text": "I have been playing with eBPF (extended Berkeley Packet Filters), a neat feature present in recent Linux versions (it evolved from the much older BPF filters). It is a virtual machine running in th…",
      "url": "https://unhandledexpression.com/2018/02/02/poc-compiling-to-ebpf-from-rust/",
      "date_published": "2018-02-02T20:33:08+00:00",
      "author": {
        "name": "Geoffroy Couprie",
        "url": "https://unhandledexpression.com/"
      },
      "tags": [
        "Operating Systems"
      ]
    }
  ]
}