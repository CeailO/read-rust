<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - DevOps and Deployment</title><link>https://readrust.net/</link><description>DevOps and Deployment posts on Read Rust</description><item><title>How to run Rust in OpenFaaS</title><link>https://booyaa.wtf/2018/run-rust-in-openfaas/</link><description><![CDATA[OpenFaaS is an open source implementation of Function as a Service (Serverless Functions, microservices) that you can self host. Rather than list all the various offerings in this space, I'll refer you to the Cloud Native Computing Foundation, in particular the interactive Landscape.

You can either deploy existing functions or create new ones. If you create new ones, there's a big list of officially supported languages. Alternative you could turn a CLI into function.

Once I'd given Python and Ruby a go as an introduction, I wanted to see how easy it would be to create a Rust template.]]></description><guid isPermaLink="false">924567bd-54c7-429d-84a6-db7b8b9221f1</guid><pubDate>Sat,  4 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Mark Sta Ana</dc:creator></item><item><title>Announcing Vagga 0.8.1 â€“ PaulColomiets</title><link>https://medium.com/@paulcolomiets/announcing-vagga-0-8-1-5e1fd44ee6fa</link><description><![CDATA[We are excited to announce the next version of vagga, the containerization tool that makes setting up development environments easy and fun. This release brings local overrides for vagga commands, support of ubuntu bionic, better CI support, space reuse between multiple projects, and more.]]></description><guid isPermaLink="false">14507477-073a-4055-a2de-b0e4c4fd2ad5</guid><pubDate>Tue, 31 Jul 2018 19:39:25 +0000</pubDate><dc:creator>PaulColomiets</dc:creator></item><item><title>Deploying Rust with Docker and Kubernetes</title><link>https://www.fpcomplete.com/blog/2018/07/deploying-rust-with-docker-and-kubernetes</link><description><![CDATA[Using a tiny Rust app to demonstrate deploying Rust with Docker and Kubernetes.]]></description><guid isPermaLink="false">f53d06d7-6b22-4cb8-95f1-66f8ae0bdb8f</guid><pubDate>Tue, 17 Jul 2018 21:36:08 +0000</pubDate><dc:creator>Chris Allen</dc:creator></item><item><title>Multi target Rust builds with auto deployment in Travis-CI</title><link>https://medium.com/@tyrf/multi-target-rust-builds-with-auto-deployment-in-travis-ci-ab5214fb73ba</link><description><![CDATA[This is just a small build script to automatically compile and create Rust binaries for your i86 32 and 64 bit machine and your Raspberry Pi(ARM) with Travis-CI. On the right side I added a little explanation of the following script.]]></description><guid isPermaLink="false">fbdcd657-aab5-4d28-aa3a-ab04294f49eb</guid><pubDate>Fri, 13 Jul 2018 18:44:17 +0000</pubDate><dc:creator>Hendrik Teuber</dc:creator></item><item><title>Linux Container Internals (Part II)</title><link>https://rabbitstack.github.io/operating%20systems/containers/linux-container-internals-part-ii/</link><description><![CDATA[Containers are moving the world. Each passing day more and more organizations are embracing containers as first-class citizens for distribution and deployment of software components. Containers represent the core of the cloud native paradigm.]]></description><guid isPermaLink="false">5f84b8db-7379-4c08-9cae-d2a901caaab1</guid><pubDate>Fri, 13 Jul 2018 18:10:04 +0200</pubDate><dc:creator>Nedim Å abiÄ‡</dc:creator></item><item><title>Conduit 0.5.0 and the future of Conduit</title><link>https://blog.conduit.io/2018/07/06/conduit-0-5-and-the-future/</link><description><![CDATA[Today weâ€™re very happy to announce Conduit 0.5.0, which introduces zero-config automatic TLS between meshâ€™d pods (including certificate creation and distribution). This means that most Kubernetes users can now encrypt internal HTTP communication between their service in just two simple commands.

Weâ€™re also happy to announce that 0.5.0 will be the last major release of Conduit. Conduit is graduating into the Linkerd project to become the basis of Linkerd 2.0. Read on for what this means!]]></description><guid isPermaLink="false">0c4246e6-b2cb-42fa-930f-b32ed84c8880</guid><pubDate>Fri,  6 Jul 2018 16:41:57 +0000</pubDate><dc:creator>Oliver Gould</dc:creator></item><item><title>Rust with Rocket + Elm running on Heroku</title><link>http://ethanfrei.com/posts/rust-with-rocket-elm-running-on-heroku.html</link><description><![CDATA[I had this goal of making a web app that was very fast, stable and easy to deploy. This is what I was hoping to accomplish: strongly typed server-side and client-side languages (Rust & Elm respectively), push-button deployments to the cloud with free hosting initially, and sub-second response times for API calls and page loads. With this setup, I think I'm well on my way to accomplishing each of these.]]></description><guid isPermaLink="false">f8a137b7-ce7d-4553-bcec-6170350dc1f2</guid><pubDate>Sun, 24 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Ethan Frei</dc:creator></item><item><title>Even faster rust builds in Gitlab CI</title><link>https://vadosware.io/post/even-faster-rust-builds-in-gitlab-ci/</link><description><![CDATA[tl;dr - I applied a few patterns Iâ€™ve used on other projects to a Gitlab CI-powered rust project to achieve <2min builds. Basically just caching at different layers â€“ caching via the docker image builder pattern at the docker level, aggressive caching with Gitlab CI at the CI runner level, also one more step of combining some build steps (probably unnecessarily).]]></description><guid isPermaLink="false">451beac2-903e-4bff-ada5-dc478a19e2c1</guid><pubDate>Wed, 30 May 2018 17:09:59 +0900</pubDate><dc:creator>Vados</dc:creator></item><item><title>Setting up gitlab-ci for Rust</title><link>https://not.plhk.ru/gitlab-ci-rust/</link><description><![CDATA[We're going to create a multi-stage pipeline based on the one I'm using at work, featuring: a build image, linting, test & release builds, and docker containers]]></description><guid isPermaLink="false">5b534e6e-4e12-4860-95d6-1317b8903d4e</guid><pubDate>Mon, 14 May 2018 00:00:00 +0000</pubDate><dc:creator>Alexander Polakov</dc:creator></item><item><title>Building and Deploying Rust with VSTS</title><link>https://blog.x5ff.xyz/blog/rust-ci-cd-vsts/</link><description><![CDATA[Since I started at Microsoft about 6 months ago, I had to catch up on their (our) tech: Azure, .NET, Visual Studio. Yet as an avid GitHub user I overlooked one thing completely: Visual Studio Team Services! Turns out itâ€™s quite the hidden gem and after a colleague showed me some of its power, I had to look into it more deeply. Turns out itâ€™s an easy and free resource for any project. Can it help your project? Yes! How? Find out below ðŸ˜Š]]></description><guid isPermaLink="false">c35de4ff-df45-4774-998f-f56ddb57b5d2</guid><pubDate>Fri,  2 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Claus</dc:creator></item><item><title>Docker Multi-Stage Build</title><link>https://blog.jawg.io/docker-multi-stage-build/</link><description><![CDATA[On June 13, 2017 took place the Paris Container Day. They unveiled a new docker feature: multi-stage build. That's the subject of this article.]]></description><guid isPermaLink="false">ab076ead-649f-47ff-8fa2-a7c243ba3dca</guid><pubDate>Thu,  1 Mar 2018 14:00:00 +0000</pubDate><dc:creator>Jones Magloire</dc:creator></item><item><title>My Rust Dockerfile</title><link>https://blog.sedrik.se/posts/my-docker-setup-for-rust/</link><description><![CDATA[Lets deploy small docker images for Rust]]></description><guid isPermaLink="false">d001ce02-fbfb-4a08-8389-0f713b09bf72</guid><pubDate>Mon, 26 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Fredrik Park</dc:creator></item><item><title>Deploying A Rust Server to Google App Engine with Travis CI &amp; Docker</title><link>https://medium.com/@gallantmrgn/deploying-rust-server-to-google-app-engine-with-travis-ci-docker-b80acfce2ce5</link><description><![CDATA[I woke up this morning with one goal: to convert my website (morgangallant.com) into a Rust web server. I have been a long time fan ofâ€¦]]></description><guid isPermaLink="false">2b698c99-99e0-4fad-8716-b58dbd9c255c</guid><pubDate>Sun, 11 Feb 2018 00:07:43 +0000</pubDate><dc:creator>Morgan A. Gallant</dc:creator></item></channel></rss>