{
  "version": "https://jsonfeed.org/version/1",
  "title": "Read Rust - Web and Network Services",
  "home_page_url": "https://readrust.net/",
  "feed_url": "https://readrust.net/web-and-network-services/feed.json",
  "description": "Web and Network Services posts on Read Rust",
  "author": {
    "name": "Wesley Moore",
    "url": "http://www.wezm.net/"
  },
  "items": [
    {
      "id": "bb944334-6ce6-4bbd-9014-d5b4909db91b",
      "title": "A Tiny, Static, Full-Text Search Engine using Rust and WebAssembly",
      "content_text": "I wrote a basic search module that you can add to your static website. It's very lightweight (around 50kB-100kB gzipped), should work with Hugo, Zola, and Jekyll. Only searching entire words is supported. Try the search box on the left side for a demo. The code is on Github.",
      "url": "https://endler.dev/2019/tinysearch/",
      "date_published": "2019-10-17T00:00:00+00:00",
      "author": {
        "name": "Matthias Endler",
        "url": "https://endler.dev/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "dcbe1901-b9b1-4eec-a44e-d6be0dcdd958",
      "title": "Sample REST API in Rust and Go",
      "content_text": "Over the summer, I prototyped a bunch of web apps whose ideas had been floating in my mind for a long time. I spent quite a bit of time learning about REST APIs and, as part of these exercises, implemented skeletons of REST servers in both Go and Rust. The app prototypes have gone nowhere but I thought of sharing the skeletons I built if only to serve as templates for myself in future work. Thus, in this post, I will cover these skeleton demos and I will compare them.",
      "url": "https://jmmv.dev/2019/09/rest-api-rust-go.html",
      "date_published": "2019-09-27T06:45:40+05:00",
      "author": {
        "name": "Julio Merino",
        "url": "https://jmmv.dev/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "5d8d151f-18fd-4aa2-8a3d-eb5620394f36",
      "title": "Picking Rust for web",
      "content_text": "I’ve been staring at this energy efficiency across programming languages table for days. It can’t be right (why is typescript so much worse than javascript?) but a lot of it tracks with things I’ve observed from using these languages IRL. Also this web framework benchmarks project. Bottom line: I’m thinking about using rust as the backend for a small one-person web project. Here’s everything I said to myself while researching reasons not to.",
      "url": "https://abe-winter.github.io/wisdom/2019/08/26/rust-for-web.html",
      "date_published": "2019-08-26T00:00:00+00:00",
      "author": {
        "name": "Abe Winter",
        "url": "https://abe-winter.github.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "e21ad158-7d23-47c3-82a4-0f76f651c6d9",
      "title": "Rustacean Terminal Chat App in Rust",
      "content_text": "Build a basic chat app with the Rust Programming Language.",
      "url": "https://www.pubnub.com/blog/build-realtime-rust-chat-app-cursive-tui/",
      "date_published": "2019-08-09T17:31:52+00:00",
      "author": {
        "name": "Samba Diallo",
        "url": "https://www.pubnub.com/blog/author/samba_diallo/"
      },
      "tags": [
        "Web and Network Services",
        "Getting Started"
      ]
    },
    {
      "id": "4da678ba-45e7-444f-b5da-20e2893bb4d6",
      "title": "How to use routers in Rust Frontend",
      "content_text": "In the previous post How to use a modal in Rust, we learnt how to write a simple image modal with Rust frontend. We could find that we can build components visible only in specific conditions. In this post, we will learn how to use routers in Rust frontend with Yew. You will find that it is easy with an example.",
      "url": "https://www.steadylearner.com/blog/read/How-to-use-routers-in-Rust-Frontend",
      "date_published": "2019-08-27T23:46:31+00:00",
      "author": {
        "name": "Steadylearner",
        "url": "https://www.steadylearner.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "b577a6bb-429a-454b-8d2b-77175dba68c8",
      "title": "Building with async/await in Rust",
      "content_text": "As you might have heard, async/await is coming to Rust soon. This is a big deal. Rust has already has popular crates (tokio, actix) that provide asynchronous concurrency, but the async syntax coming to stable in 1.39 is much, much more approachable. My experience has been that you can produce and reason about application flow much more easily, which has made me significantly more productive when dealing with highly concurrent systems. To kick the tires of this new syntax I dug into the nightly branch, and built a high-performance TCP client called clobber. In this post I'll talk about why I think async/await in Rust is a big deal, and walk you some of the code in clobber.",
      "url": "https://ragona.com/posts/clobber_async_await",
      "date_published": "2019-08-21T00:00:00+00:00",
      "author": {
        "name": "Ryan Ragona",
        "url": "https://ragona.com/"
      },
      "tags": [
        "Web and Network Services",
        "Performance"
      ]
    },
    {
      "id": "09df4bbd-96fe-49af-8811-407f98c3108e",
      "title": "Practical Networked Applications in Rust, Part 2: Networked Key-Value Store",
      "content_text": "Welcome to the second installation in my series on taking the Practical Networked Applications in Rust course, kindly provided by the PingCAP company, where you develop a networked and multithreaded/asynchronous key-value store in the amazing Rust language. In the previous, and initial, post I implemented the course module of making the fundamental key-value store functionality, based around the Bitcask algorithm, which would only allow for local usage on your own computer. In the second module of my course work, I add networking functionality, dividing the application into a client/server architecture so that clients can connect to servers across the network.",
      "url": "https://arveknudsen.com/posts/practical-networked-applications-in-rust/module-2/",
      "date_published": "2019-08-04T01:00:00+02:00",
      "author": {
        "name": "Arve Knudsen",
        "url": "https://arveknudsen.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "94dd1a96-2b38-4556-bb32-5064f803e5b6",
      "title": "Low-level TCP server in Rust with MIO",
      "content_text": "It is time to get acquainted with Metal IO, low-level cross-platform abstraction over epoll/kqueue written in Rust. In this article I will show and explain how to write simple single-threaded asynchronous TCP server, then teach it to mock HTTP protocol, and then benchmark it with ab/wrk. The results are about to be impressive.",
      "url": "https://sergey-melnychuk.github.io/2019/08/01/rust-mio-tcp-server/",
      "date_published": "2019-08-01T22:25:42+00:00",
      "author": {
        "name": "Sergey Melnychuk",
        "url": "https://sergey-melnychuk.github.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "faca5f20-8895-4d5b-850c-d2a8b4149876",
      "title": "Practical Networked Applications in Rust, Part 1: Non-Networked Key-Value Store",
      "content_text": "The PingCAP company, makers of the TiDB NewSQL database and the TiKV key-value store, have kindly made publicly available, as well as open-sourced, a set of training courses that they call the \"PingCAP Talent Plan\". These courses train programmers in writing distributed systems in the Go and Rust languages. They are originally intended by PingCAP to train students, new employees and new contributors to TiDB and TiKV and focus as such on subjects relevant to those projects, but are still appropriate to anyone with an interest in learning to make distributed systems in Go and/or Rust.",
      "url": "https://arveknudsen.com/posts/practical-networked-applications-in-rust/module-1/",
      "date_published": "2019-07-23T13:00:00+02:00",
      "author": {
        "name": "Arve Knudsen",
        "url": "https://arveknudsen.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "ca7ab50b-0ea0-4d8f-9f38-74945bc33900",
      "title": "How to write Full Stack Rust code",
      "content_text": "In the previous post How to modulize your Rust Frontend, we learnt how to use impl, functions and Yew components. They help you to find errors and organize your Rust frontend project. In this post, we will include server side code with ws-rs. It will help us to build complete Rust Full Stack chat app similar to what we made at How to start Rust Chat App.",
      "url": "https://www.steadylearner.com/blog/read/How-to-write-Full-Stack-Rust-code",
      "date_published": "2019-07-22T00:00:00+00:00",
      "author": {
        "name": "Steadylearner",
        "url": "https://www.steadylearner.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "5784cd2f-f28c-4746-8c85-c39ee718c4a0",
      "title": "How to modulize your Rust Frontend",
      "content_text": "In the previous post How to use markdown with Rust Frontend, we learnt how to render markdown in Rust frontend and include CSS files from your previous frontend project. You can use a text, image, video, markdown or any HTML elements you want for your Rust frontend. In this post, we will learn how to modulize your Rust Yew frontend app. It will be easy after you learn how to use impl, function, and components for that.",
      "url": "https://www.steadylearner.com/blog/read/How-to-modulize-your-Rust-Frontend",
      "date_published": "2019-07-19T00:00:00+00:00",
      "author": {
        "name": "Steadylearner",
        "url": "https://www.steadylearner.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "f47a9bfe-394d-44b0-a4b1-683976a2cee2",
      "title": "Announcing Ballista - Distributed Compute with Rust, Apache Arrow, and Kubernetes",
      "content_text": "After taking a break from working on Arrow and DataFusion for a couple of months to focus on some deliverables at work, I have now started a new PoC project to have a second attempt at building a distributed platform with Rust, and this time around I have the advantage of already having some foundational pieces in place, namely Arrow and DataFusion. I have also been gaining experience with Kubernetes recently and I could clearly see how this would simplify the creation of a distributed platform. The pieces really are starting to fall into place.\n\nThe new project is called Ballista and is a fast moving PoC taking a top down approach to building a distributed platform.",
      "url": "https://andygrove.io/2019/07/announcing-ballista/",
      "date_published": "2019-07-16T00:00:00+00:00",
      "author": {
        "name": "Andy Grove",
        "url": "https://andygrove.io/blog"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "4136ae31-0128-4937-9c8b-91f064c0d8d6",
      "title": "Gotham - From Start to Heroku",
      "content_text": "In this article, we’ll implement and deploy a Gotham full-stack web framework using the Tera template system, Webpack for a complete front-end asset management, a minimal VueJS and CoffeeScript web app and deploy to Heroku. Gotham is a Rust framework which is focused on safety, speed, concurrency and async everything. Webpack is a NodeJS website asset preprocessor and bundler which can let you use any of your favorite front end technologies. Combining these technologies allow for a small footprint on the server, which means saving money on infrastructure, very fast performance in page load for higher visitor retention and the full flexibility of client side code available to you for web design without limitations.",
      "url": "https://blog.codeship.com/gotham-from-start-to-heroku/",
      "date_published": "2019-04-30T15:15:20+00:00",
      "author": {
        "name": "Daniel P. Clark",
        "url": "https://blog.codeship.com/author/danielclark/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "342aba54-6554-4ec9-9d92-cd93edfbc8a2",
      "title": "Rust as the new C. Part 1: building and combining native libs into C API",
      "content_text": "In this blog series, I will experiment with Rust as a safer and simpler C/C++ replacement. The idea is to combine a couple of C dependencies in Rust, to do some work using the dependencies in Rust and to expose a final API from a Rust library via C ABI. Then I will consume the same exported Rust methods from a number of modern languages/platforms such as C#, Python, Java, Nodejs, R, Go and even back from C/C++.",
      "url": "http://hotforknowledge.com/2019/07/14/6-rust-the-new-c/",
      "date_published": "2019-07-14T16:12:00+03:00",
      "author": {
        "name": "Victor Baybekov",
        "url": "http://hotforknowledge.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "0026c42e-9e3b-4a14-96dc-1fe3609e8957",
      "title": "Rust in one of the biggest music festival Atlas Weekend 2019",
      "content_text": "I'm happy to announce, that we've just finished one of the biggest European music festival Atlas Weekend which took place in Kyiv, Ukraine. As a year ago, backend for technical purposes of festival is written with Rust: Tickets exchange, entrance control, powerful user management with distributed configurable permissions, backstage pass, control of security workers, their work time, cars entrance, warehouse system for rfid bracelets with full history and control of each rfid. This year we registered more than 6000 workers, each of them has full info tied to bracelet: name, phone, photo, available permissions, time to access festival.",
      "url": "https://www.reddit.com/r/rust/comments/cdg5b4/rust_in_the_on_of_the_biggest_music_festival/",
      "date_published": "2019-07-15T00:00:00+00:00",
      "author": {
        "name": "/u/maxfrai",
        "url": "https://www.reddit.com/user/maxfrai"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "4979dc89-2295-48da-ae2b-cb84dc37fd8c",
      "title": "How to use NPM packages with Rust Frontend",
      "content_text": "In the previous post full-stack Rust with Yew, we learnt how to prepare minimal files to build a full stack Rust web app. You can do whatever Rust allows with it.",
      "url": "https://www.steadylearner.com/blog/read/How-to-use-NPM-packages-with-Rust-Frontend",
      "date_published": "2019-07-14T00:00:00+00:00",
      "author": {
        "name": "Steadylearner",
        "url": "https://www.steadylearner.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "28d2b0b9-8bfb-4541-b2f5-f84ed2670d56",
      "title": "Fullstack Rust with Yew",
      "content_text": "In the previous post How to use Rust Yew, we learnt how to prepare minimal files to build webassembly files with Yew for Rust frontend. We will advance it with some Rust server side code and write a bash file to automate the process.",
      "url": "https://www.steadylearner.com/blog/read/Fullstack-Rust-with-Yew",
      "date_published": "2019-07-11T00:00:00+00:00",
      "author": {
        "name": "Steadylearner",
        "url": "https://www.steadylearner.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "66342269-5693-4c70-a15c-917b7818dc07",
      "title": "Collecting broadcast UDP packets using async networking in Rust",
      "content_text": "Creating a simple console application in Rust for fun and profit, including some nice tricks to push async programming to the limits.",
      "url": "https://medium.com/tresorit-engineering/collecting-broadcast-udp-packets-using-async-networking-in-rust-7fd93a631eac",
      "date_published": "2019-07-08T10:39:21.932+00:00",
      "author": {
        "name": "Péter Budai",
        "url": "https://medium.com/@peterbudai"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "b5b706cb-863b-4856-843d-6a894a7fc280",
      "title": "Create Dev's offline page with Rust and WebAssembly 🦄💡✨",
      "content_text": "Dev's offline page is fun. Can we do that with Rust and WebAssembly? The answer is yes. Let us do it.",
      "url": "https://dev.to/sendilkumarn/create-dev-s-offline-page-with-rust-and-webassembly-21gn",
      "date_published": "2019-07-03T23:14:51+00:00",
      "author": {
        "name": "Sendil Kumar N",
        "url": "https://dev.to/sendilkumarn"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "db9d60ca-f153-4abf-9654-ac53ec91472e",
      "title": "How to use Rust Yew",
      "content_text": "In this post, we will prepare development environment for Rust Yew. Then, we will write minimal code with it and learn how to deploy it in your website also.",
      "url": "https://www.steadylearner.com/blog/read/How-to-use-Rust-Yew",
      "date_published": "2019-06-30T00:00:00+00:00",
      "author": {
        "name": "Steadylearner",
        "url": "https://www.steadylearner.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "faa1d1ec-2bcd-4363-832a-2e03e35d8124",
      "title": "Increase Rust and WebAssembly performance",
      "content_text": "What are we gonna do? Create a WebAssembly application that takes a string in markdown format and converts that into HTML.",
      "url": "https://dev.to/sendilkumarn/increase-rust-and-webassembly-performance-382h",
      "date_published": "2019-07-02T00:40:25+00:00",
      "author": {
        "name": "Sendil Kumar N",
        "url": "https://dev.to/sendilkumarn"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "247efda7-549d-4c38-8af1-733755fc4aa7",
      "title": "Rust WebAssembly Hello World - Deep Dive with wasm-bindgen and wasm2wat",
      "content_text": "In this article we are going to create a WebAssembly Hello World program with Rust. You might be thinking that a WebAssembly Hello World tutorial could be found almost everywhere, including one on Mozilla website and rustwasm.github.io.",
      "url": "https://www.webassemblyman.com/rust_webassembly_hello_world.html",
      "date_published": "2019-07-02T00:00:00+00:00",
      "author": {
        "name": "nicole",
        "url": "https://www.webassemblyman.com/index.html"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "ae8feddf-191a-444f-9423-e7a3e0b4b356",
      "title": "Writing a proxy in Rust and why it is the language of the future",
      "content_text": "It’s been a year since I wrote a little proxy with Rust, it is one of my first projects with this language and I learned a lot writing it. To sum up a bit, the main goal of this proxy is to be really simple to use and easy to extend with middlewares. It targets HTTP APIs and can be used in front of a lot of services. This proxy has been used in multiple projects, with microservices architecture and so on…",
      "url": "https://medium.com/swlh/writing-a-proxy-in-rust-and-why-it-is-the-language-of-the-future-265d8bf7c6d2",
      "date_published": "2019-06-25T14:43:21.855+00:00",
      "author": {
        "name": "Terry Raimondo",
        "url": "https://medium.com/@terry.raimondo"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "2c73c05a-7fb3-494d-8fb3-896cf3a343b3",
      "title": "Wasm By Example",
      "content_text": "A hands-on introduction into WebAssembly ( Wasm ). Containing simple examples and tutorials on how to implement concepts and various tasks using Wasm.",
      "url": "https://wasmbyexample.dev/",
      "date_published": "2019-06-26T03:28:00+00:00",
      "author": {
        "name": "Aaron Turner",
        "url": "https://twitter.com/torch2424"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "0770f016-861d-4bc1-9ce0-cad6b6e374f2",
      "title": "Implementing HTSP in Rust",
      "content_text": "As with most hobby projects, my htsp-rs implementation became a side-side-side project, and it will probably stay that way. Another property of those hobby projects is that I now-and-then pick them up again, and htsp-rs has come to that point now. The reason for picking it up again is different from the reason of its existence though, and that’s a good thing: it means I have multiple reasons for the crate’s existence. Initially, I wanted it as a back-end for a livestreaming app on SailfishOS. Today, I want it as back-end for mpd’s TVHeadend support.",
      "url": "https://www.rubdos.be/rust/async/programming/2019/06/22/implementing-htsp-in-rust.html",
      "date_published": "2019-06-22T00:00:00+00:00",
      "author": {
        "name": "Ruben De Smet",
        "url": "https://www.rubdos.be/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "5150f924-ef3f-4327-a3ba-c5f16076a22b",
      "title": "Auth Web Microservice with rust using Actix-Web 1.0 - Complete Tutorial",
      "content_text": "We are going to create a web-server in rust that only deals with user registration and authentication. I will be explaining the steps in each file as we go. The complete project code is here repo. Please take all this with a pinch of salt as I’m a still a noob to rust 😉.",
      "url": "https://gill.net.in/posts/auth-microservice-rust-actix-web1.0-diesel-complete-tutorial/",
      "date_published": "2019-06-09T00:00:00+00:00",
      "author": {
        "name": "Harry Gill",
        "url": "https://gill.net.in/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "a5730863-ff70-4122-8595-81c11ee59697",
      "title": "Asyncifying an Actix Web App and Upgrading it to 1.0 - zupzup",
      "content_text": "In a previous post, we created an Actix 0.7 Web App, which was not fully non-blocking. In this post, we'll become fully non-blocking and upgrade the app to Actix 1.0",
      "url": "https://zupzup.org/asyncify-rust-webapp/",
      "date_published": "2019-06-20T00:00:00+00:00",
      "author": {
        "name": "Mario Zupan",
        "url": "https://zupzup.org/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "54d40e7f-c5c5-4c69-86e2-9913c6a88200",
      "title": "Collaborative Editor in Rust",
      "content_text": "I've been experimenting with techniques for collaborative editing in Rust recently and I'd like to share my first functional prototype with you. The demo uses Rust and WebAssembly, and I implemented it using a conflict-free replicated data type (CRDT) based on LOGOOT, which I modified to work with variable-sized strings rather than individual characters or lines.",
      "url": "https://caolan.org/posts/collaborative_editor_in_rust.html",
      "date_published": "2019-06-21T00:00:00+00:00",
      "author": {
        "name": "Caolan McMahon",
        "url": "https://caolan.org/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "87146592-5c10-431e-8655-5272eec53ed9",
      "title": "Makepad, a live Rust authoring tool for 2D vector design, shaders and animation",
      "content_text": "The vision is to build a livecoding / design hybrid program, where procedural design and code are fused in one environment. If you have missed 'learnable programming' please check this out: http://worrydream.com/LearnableProgramming/ Makepad aims to fulfill (some) of these ideas using a completely from-scratch renderstack built on the GPU and Rust. It will be like an IDE meets a vector designtool, and had offspring. Direct manipulation of the vectors modifies the code, the code modifies the vectors.\n\nHowever before we can make this awesome application, we need to build a UI stack. The aim of this toolkit is to be our stepping stone into building a livecoding IDE and designtools that don't suck or fall to pieces along the way.",
      "url": "https://github.com/makepad/makepad",
      "date_published": "2019-06-17T00:00:00+00:00",
      "author": {
        "name": "makepad",
        "url": "https://github.com/makepad"
      },
      "tags": [
        "Web and Network Services",
        "Tools and Applications"
      ]
    },
    {
      "id": "f6902c1c-3975-454f-891e-d39b071d66d4",
      "title": "Introducing Lightbeam: An Optimising Streaming WebAssembly Compiler",
      "content_text": "Lightbeam is a new streaming compiler for WebAssembly, designed to produce the best possible assembly while still being fast enough to produce assembly faster than the WebAssembly is received over the wire.",
      "url": "http://troubles.md/posts/lightbeam/",
      "date_published": "2019-05-04T10:10:34+01:00",
      "author": {
        "name": "troubles.md",
        "url": "http://troubles.md/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "ae6027ab-b71f-4bce-9ab8-e1853aa24030",
      "title": "Actix - Actor System and Web Framework for Rust",
      "content_text": "Actix web 1.0.0 is released - a small, pragmatic, and extremely fast web framework.",
      "url": "https://actix.rs/",
      "date_published": "2019-06-05T15:38:00+00:00",
      "author": {
        "name": "Nikolay Kim",
        "url": "https://twitter.com/fafhrd91"
      },
      "tags": [
        "Web and Network Services",
        "Crates"
      ]
    },
    {
      "id": "91ae37e0-3d4f-4c78-879d-47e635f8fbda",
      "title": "Gopher Server in Rust",
      "content_text": "I find Gopher really cool. I think it’s a really nice way to organize information into trees and hierarchies, and as we all know programmers can’t resist trees. So recently I took an interest in Gopher and started writing my own server.\n\nBut recently it’s been gaining traction; so we should provide a decent landscape for new gophers, full of oxidised servers. Since I started using Gopher more often, it’s beneficial for me if there’s more content out there. So I’m writing this blog post to walk you through how to write your own server. We’ll be doing this in Rust.",
      "url": "https://gkbrk.com/2019/06/gopher-server/",
      "date_published": "2019-06-02T01:00:00+01:00",
      "author": {
        "name": "Gokberk Yaltirakli",
        "url": "https://gkbrk.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "4e723122-0527-43dc-b95b-ff4fd5cd5d28",
      "title": "Creating a Static HTTP Server with Rust – Part 2",
      "content_text": "In this series, we are creating a basic static HTTP 1.0 server with Rust. If you haven’t seen Part 1 yet, go do that first. At the end of Part 2, our server will do the following: Read and serve files from a predefined directory on the host server, Generate appropriate HTTP responses to incoming requests, Log information about the response to standard output.",
      "url": "http://concisecoder.io/2019/05/27/creating-a-static-http-server-with-rust-part-2/",
      "date_published": "2019-05-27T13:25:29+00:00",
      "author": {
        "name": "Levi Payne",
        "url": "http://concisecoder.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "0cc7297b-a14f-443d-a02a-073685c663a3",
      "title": "Programming Servo: Zen and the art of removing blocks from your system",
      "content_text": "It all started with a simple issue, a “quick fix”, or so I thought.",
      "url": "https://medium.com/@polyglot_factotum/programming-servo-zen-and-the-art-of-removing-blocks-from-your-system-51c1b7d404e3",
      "date_published": "2019-05-26T09:41:02.544+00:00",
      "author": {
        "name": "Gregory Terzian",
        "url": "https://medium.com/@polyglot_factotum"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "fe48ce77-ad77-4983-a08d-1fb9cf951bb1",
      "title": "Blockchain-Flavored WASI",
      "content_text": "General purpose computation on the blockchain using Web Assembly System Interface (WASI).",
      "url": "https://medium.com/oasislabs/blockchain-flavored-wasi-50e3612b8eba",
      "date_published": "2019-05-23T04:07:55.019+00:00",
      "author": {
        "name": "Nick Hynes",
        "url": "https://medium.com/@nhynes_"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "ef3c5cdb-f130-4211-83a1-1550ea15d73f",
      "title": "Running WebAssembly on the Kernel",
      "content_text": "This is the story of our journey running Wasmer on the Linux kernel.",
      "url": "https://medium.com/wasmer/running-webassembly-on-the-kernel-8e04761f1d8e",
      "date_published": "2019-05-16T22:37:36.924+00:00",
      "author": {
        "name": "Heyang Zhou",
        "url": "https://medium.com/@losfair"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "e25cac18-f4ca-4872-babe-c4614327e076",
      "title": "How to start a Rust Chat App",
      "content_text": "In this post, we will learn how to build simple chat app in your local machine with Rust and simple JavaScript.",
      "url": "https://www.steadylearner.com/blog/read/How-to-start-Rust-Chat-App",
      "date_published": "2019-05-16T00:00:00+00:00",
      "author": {
        "name": "Steadylearner",
        "url": "https://www.steadylearner.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "3eb814d5-d467-4e34-ba31-e0a55da4da36",
      "title": "Introducing Packem: a super fast experimental bundler written in Rust",
      "content_text": "Packem is an experimental precompiled JavaScript module bundler primarily implemented in Rust. It can also handle a variety of other file types like YAML/TOML, fragment shader files and a lot more.",
      "url": "https://medium.freecodecamp.org/introducing-packem-a-super-fast-experimental-bundler-written-in-rust-e981af875517",
      "date_published": "2019-05-15T16:36:27.451+00:00",
      "author": {
        "name": "Bukhari Muhammad",
        "url": "https://medium.freecodecamp.org/@bukharim96"
      },
      "tags": [
        "Web and Network Services",
        "Tools and Applications"
      ]
    },
    {
      "id": "25d9490f-05e3-4f5c-a407-19d78b0fb6d4",
      "title": "Creating a Static HTTP Server with Rust - Part 1",
      "content_text": "In this series, we will create a basic static HTTP 1.0 server with Rust. At the end of Part 1 of this tutorial, our server will do the following: Listen for and handle TCP connections on a specific port, Accept HTTP 1.0 GET requests, Parse and validate requests for further use, Log incoming requests. We will avoid using libraries that make this trivial (i.e. the http crate) and focus on the fundamentals of how a server works.",
      "url": "http://concisecoder.io/2019/05/11/creating-a-static-http-server-with-rust-part-1/",
      "date_published": "2019-05-11T17:17:46+00:00",
      "author": {
        "name": "Levi Payne",
        "url": "http://concisecoder.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "ffeaa8e5-849b-4924-9c9f-1ac6adc15a8e",
      "title": "Unit testing Rust using Chrome",
      "content_text": "Stretch is a cross-platform Flexbox engine written in Rust. At Visly we are building a design tool for front-end engineers and we needed to ensure components looked the same across web, iOS, and Android without making use of WebViews. This meant replicating the web layout system on mobile.\n\nIn this post, I’ll cover the test setup we use in Stretch, how and why we need to generate unit dynamically. I’ll also cover an example of contributing another test to Stretch, and finally I’ll walk through how we also make use of this system for benchmarking.",
      "url": "https://medium.com/visly/unit-testing-rust-using-chrome-b8b93572a91d",
      "date_published": "2019-05-06T16:25:41.951+00:00",
      "author": {
        "name": "Emil Sjölander",
        "url": "https://medium.com/@emilsj"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "728cc414-7e29-41ce-86af-0181095c3ec6",
      "title": "Building Simple APIs with Hyper and Usher",
      "content_text": "When writing a web service, I often lean towards using tools that are as minimal as possible. One pretty obvious reason for this is the avoidance of dependencies you either don't want or don't need in your project. Whilst I'm not someone who goes out of their way to avoid dependencies, this is a pain point particularly in Rust because of the cost of building them repeatedly rather than shipping extra interpreted files around (especially if you use \"pure\" build environments).",
      "url": "https://whitfin.io/building-simple-apis-with-hyper-and-usher/",
      "date_published": "2019-05-03T16:56:26+00:00",
      "author": {
        "name": "Isaac Whitfield",
        "url": "https://whitfin.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "e3fadb7b-df84-47a1-b6ca-47186b2b9418",
      "title": "WebAssembly -Part II.A | Wasm with Rust",
      "content_text": "This article is more of a how-to on getting up and running with a production-grade web project which incorporates Rust (or any other language for that matter) and WebAssembly into your web pages.",
      "url": "https://medium.com/tech-lah/webassembly-part-ii-a-wasm-with-rust-2356dbc6526e",
      "date_published": "2019-05-05T13:27:01.003+00:00",
      "author": {
        "name": "Francisco Vilches",
        "url": "https://medium.com/@franciscov"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "9152c867-9b24-49d0-ac2c-d85775162eb4",
      "title": "Explained: Futures in Rust for Web Development",
      "content_text": "If you are coming from NodeJS, Futures in Rust don't make much sense. In NodeJS, everything happens asynchronously. Therefore for you to be able to say \"Hey, I really need to wait for the answer for this GET HTTP call\", you are putting.then() on a Promise, so you can make sure you just execute the code inside the .then() when the HTTP call is finished.\n\nIn Rust, everything is blocking and synchronous by default, so you might ask yourself: \"Why bothering with the complexity, that's exactly what I wanted in the first place!\"",
      "url": "https://dev.to/gruberb/explained-rust-futures-for-web-development-a10",
      "date_published": "2019-05-02T00:00:00+00:00",
      "author": {
        "name": "Bastian Gruber",
        "url": "https://dev.to/gruberb"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "4cc7ac88-4ef9-40fd-b235-bee8151e059d",
      "title": "Rolling your own Router with Smithy v0.0.3",
      "content_text": "Build a WebAssembly application with a hash router using Smithy.",
      "url": "https://medium.com/@robert.balicki_2494/rolling-your-own-router-with-smithy-v0-0-3-2de17cdbb49",
      "date_published": "2019-04-29T15:25:25.504+00:00",
      "author": {
        "name": "Robert Balicki",
        "url": "https://medium.com/@robert.balicki_2494"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "16c5eef8-5844-4408-8ab5-42319757ecef",
      "title": "Using Wasmer for Plugins Part 4",
      "content_text": "In the last three posts of this series we covered all of the things we would need to use Wasmer as the base for a plugin system. In part one we went over the basics of passing simple data in and out of a web assembly module, in part two we dug deeper into how you might do the same with more complicated data. In the last part we eased the experience of plugin developers by encapsulating all of our work into a library that exports a procedural macro. In this post we are going to explore what it would take to extend an existing plugin system to allow for wasm plugins.",
      "url": "https://wiredforge.com/blog/wasmer-plugin-pt-4/index.html",
      "date_published": "2019-05-01T00:00:00+00:00",
      "author": {
        "name": "Robert Masen",
        "url": "https://wiredforge.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "dd64813c-9380-4cd5-b689-ae31cd1c0405",
      "title": "Hawk: Image Recognition Application using Rust and AWS Services",
      "content_text": "Rust is one of the newest kid on the block in the modern programming languages. We tried to take advantage of its great features by using it in an Image Recognition blueprint project. This project can be traded with any existing security system deployed at any organization. Hawk uses AWS services integrated with Rust.",
      "url": "https://blog.knoldus.com/hawk-image-recognition-project-using-rust-and-aws-services/",
      "date_published": "2019-05-01T11:14:44+00:00",
      "author": {
        "name": "muditchhabra6125",
        "url": "https://blog.knoldus.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "c9e2beae-20d5-4c7a-b8de-01f52b18aec1",
      "title": "Simple Chat using Sonr-extras",
      "content_text": "Using sonr-extras to build a very basic chat using the provided connection handling objects.",
      "url": "https://hagsteel.com/posts/simple-chat/",
      "date_published": "2019-04-24T00:00:00+02:00",
      "author": {
        "name": "Jonas",
        "url": "https://hagsteel.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "ad39fd8f-6ca7-499e-bebb-f8a35d3d0a66",
      "title": "Introducing @now/rust",
      "content_text": "ZEIT is proud to announce official support for Rust on Now through `@now/rust`. Our mission at ZEIT is to make cloud computing accessible for all. Rust has seen rapid growth in its adoption, and we're proud to be able to support the community.",
      "url": "https://zeit.co/blog/introducing-now-rust",
      "date_published": "2019-03-12T00:00:00+00:00",
      "author": {
        "name": "ZEIT",
        "url": "https://zeit.co/blog"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "bd3e3e37-90f2-4941-ba7c-00fdae65bdac",
      "title": "Using Wasmer for Plugins Part 3",
      "content_text": "In the last two posts of this series we covered all of the things we would need to use Wasmer as the base for a plugin system. In part one we went over the basics of passing simple data in and out of a web assembly module, in part two we dug deeper into how you might do the same with more complicated data. In this part we are going to explore how we might ease the experience for people developing plugins for our application.",
      "url": "https://wiredforge.com/blog/wasmer-plugin-pt-3/index.html",
      "date_published": "2019-04-22T00:00:00+00:00",
      "author": {
        "name": "Robert Masen",
        "url": "https://wiredforge.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "899be7d9-392f-4467-aa75-85b2d3e913f7",
      "title": "Using Wasmer for Plugins Part 2",
      "content_text": "In this post we are going to cover how we could pass more complicated data from the wasm module back to the runner.",
      "url": "https://wiredforge.com/blog/wasmer-plugin-pt-2",
      "date_published": "2019-04-20T00:00:00+00:00",
      "author": {
        "name": "Robert Masen",
        "url": "https://wiredforge.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "3d938fcd-0108-499a-9929-841d1999db4b",
      "title": "Plume: Federated blogging application",
      "content_text": "Plume is a federated blogging engine, based on ActivityPub. It uses the Rocket framework, and Diesel to interact with the database.",
      "url": "https://github.com/Plume-org/Plume",
      "date_published": "2019-04-22T00:00:00+00:00",
      "author": {
        "name": "Plume Developers",
        "url": "https://joinplu.me/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "d11c58e5-419a-4c3e-923d-b2bac810d445",
      "title": "Using Wasmer for Plugins Part 1",
      "content_text": "A few months ago, the Wasmer team announced a Web Assembly (aka wasm) interpreter that could be embedded into rust programs. This is particularly exciting for anyone looking to add plugins to their project and since Rust provides a way to directly compile programs to wasm, it seems like a perfect option. In this series of blog posts we are going to investigate what building a plugin system using wasmer and rust would take.",
      "url": "https://wiredforge.com/blog/wasmer-plugin-pt-1",
      "date_published": "2019-04-19T00:00:00+00:00",
      "author": {
        "name": "Robert Masen",
        "url": "https://wiredforge.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "f2b4f953-be42-4454-b073-1804aa4a8bb6",
      "title": "Web Development with Rust — 03/x: Create a REST API",
      "content_text": "The most common pattern for creating APIs is REST. We will discover how we can build an API in Rust which conforms with the REST pattern.",
      "url": "https://dev.to/gruberb/web-development-with-rust-03-x-create-a-rest-api-3i82",
      "date_published": "2019-04-15T00:00:00+00:00",
      "author": {
        "name": "Bastian Gruber",
        "url": "https://dev.to/gruberb"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "ea434653-4ba2-47c0-bc91-ba9c521dc419",
      "title": "Face Detection with Actix Web",
      "content_text": "Last article I wrote about how to use tensorflow with rust. This time we're going to take what we've built on, and serve it as an HTTP API call. As Actix Web is nearing its inevitable 1.0 release, I thought it would be a great time to build something with it.",
      "url": "https://cetra3.github.io/blog/face-detection-with-actix-web/",
      "date_published": "2019-04-11T00:00:00+00:00",
      "author": {
        "name": "cetra3",
        "url": "https://github.com/cetra3/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "5643e56a-6a6f-435e-8625-b58ebb5dca22",
      "title": "The Wrangler CLI: Deploying Rust with WASM on Cloudflare Workers",
      "content_text": "Today, we're open sourcing and announcing wrangler, a CLI tool for building, previewing, and publishing Rust and WebAssembly Cloudflare Workers. If that sounds like some word salad to you, that's a reasonable reaction.",
      "url": "https://blog.cloudflare.com/introducing-wrangler-cli/",
      "date_published": "2019-03-28T16:08:45+00:00",
      "author": {
        "name": "Ashley Williams",
        "url": "https://blog.cloudflare.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "dcd70897-0b31-4930-b57d-3fc567e64c98",
      "title": "A Basic Web Application with Rust and Actix-web",
      "content_text": "As a first little project in Rust I thought I'd do something familiar, so I created a small web application, which we'll check out in this post.",
      "url": "https://zupzup.org/rust-webapp/",
      "date_published": "2019-04-07T00:00:00+00:00",
      "author": {
        "name": "Mario Zupan",
        "url": "https://zupzup.org/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "98a6bda4-dcb1-419a-bf9a-6be8f4b88b8b",
      "title": "Rust Actix Web + Magic link authentication",
      "content_text": "In this tutorial, we'll create web app using the Rust actix-web framework and implement magic link authentication powered by ApproveAPI's Rust library.",
      "url": "https://blog.approveapi.com/tutorials/rust-actix-web-approveapi-magic-login-link/",
      "date_published": "2019-04-09T00:00:00+00:00",
      "author": {
        "name": "Alex Grinman",
        "url": "https://blog.approveapi.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "cbaf5407-81db-4367-9b58-ff9cc668b1a3",
      "title": "Linkerd v2: How Lessons from Production Adoption Resulted in a Rewrite of the Service Mesh",
      "content_text": "Linkerd 2.0 introduced a substantial rewrite of the widely adopted service mesh, using a split between Go and Rust. In this article, we discuss the lessons learned in the \"cauldron of production adoption\", and how those lessons became the basis of Linkerd 2.x’s philosophy, design, and implementation.",
      "url": "https://www.infoq.com/articles/linkerd-v2-production-adoption",
      "date_published": "2019-04-05T00:00:00+00:00",
      "author": {
        "name": "William Morgan",
        "url": "https://www.infoq.com/profile/William-Morgan"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "a1396ee1-4c3f-47c5-b99c-d7af8ea455a0",
      "title": "Introducing Smithy — WebAssembly framework for Rust",
      "content_text": "I’m extremely excited to announce the 0.0.2 release of Smithy, a web development framework for Rust! While it is a very pre-alpha version, it should be functional enough for others to start playing around with. Please, get your feet wet and provide feedback.",
      "url": "https://medium.com/@robert.balicki_2494/introducing-smithy-webassembly-framework-for-rust-679d8fe9c16",
      "date_published": "2019-03-28T22:28:07.745+00:00",
      "author": {
        "name": "Robert Balicki",
        "url": "https://medium.com/@robert.balicki_2494"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "900ee12b-4a68-4987-a635-980b9105da76",
      "title": "Announcing Lucet: Fastly’s native WebAssembly compiler and runtime",
      "content_text": "Today, we are thrilled to announce the open sourcing of Lucet, Fastly’s native WebAssembly compiler and runtime. WebAssembly is a technology created to enable web browsers to safely execute programs at near-native speeds. It has been shipping in the four major browsers since early 2017.",
      "url": "https://www.fastly.com/blog/announcing-lucet-fastly-native-webassembly-compiler-runtime",
      "date_published": "2019-03-28T16:00:00+00:00",
      "author": {
        "name": "Pat Hickey",
        "url": "https://www.fastly.com/blog"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "6d648c86-cd0a-4f11-ac22-af2fe977f6d6",
      "title": "WASI example using Rust and Lucet",
      "content_text": "Lucet is Fastly’s native WebAssembly compiler and runtime. Using the Lucet runtime and Rust’s wasm32-unknown-wasi target, we can create a WASM program that runs on the server.",
      "url": "https://hermanradtke.com/2019/04/01/wasi-example-using-rust-and-lucet.html",
      "date_published": "2019-04-01T00:00:00+00:00",
      "author": {
        "name": "Herman J. Radtke III",
        "url": "https://hermanradtke.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "9ea71842-a6ca-41c6-8384-89c6a05d17cb",
      "title": "Gloo Update: Onion Layers, Timers, and Events",
      "content_text": "About two weeks ago, we kicked off our effort to collectively build Gloo, a modular toolkit for building fast and reliable Web apps and libraries with Rust and Wasm. We knew we wanted to explicitly cultivate the Rust and Wasm library ecosystem by spinning out reusable, standalone libraries: things that would help you out whether you were writing a green-field Web app in pure-Rust, building your own framework, or surgically inserting some Rust-generated Wasm into an existing JavaScript project. What was still fuzzy, and which we didn’t know yet, was how we were going design and expose these reusable bits.",
      "url": "https://rustwasm.github.io/2019/03/26/gloo-onion-layers.html",
      "date_published": "2019-03-26T00:00:00+00:00",
      "author": {
        "name": "Nick Fitzgerald",
        "url": "https://rustwasm.github.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "4fb7d3bc-05c5-4c23-abaa-70294fa23715",
      "title": "Ocypod: Redis-backed job queue server with an easy to use HTTP interface",
      "content_text": "Ocypod is a language-agnostic, Redis-backed job queue server with an easy to use HTTP interface. Its focus is on handling and monitoring long running jobs.",
      "url": "https://ocypod.readthedocs.io/",
      "date_published": "2019-04-03T00:00:00+00:00",
      "author": {
        "name": "Dave Challis",
        "url": "https://ocypod.readthedocs.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "9a041284-284c-472d-97c0-0e0cd407bb44",
      "title": "tarssh: An async Rust SSH tarpit",
      "content_text": "tarssh is an SSH tarpit — a server that trickles an endlessly repeating introductory banner to clients for as long as it remains connected, in order to expend the resources of attackers. It's based on the same concept as Chris Wellons' Endlessh, a similar service written in C.",
      "url": "https://hur.st/projects/tarssh/",
      "date_published": "2019-03-25T00:00:00+00:00",
      "author": {
        "name": "Thomas Hurst",
        "url": "https://hur.st/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "2da4fac1-5cb0-463b-9654-427f70d25255",
      "title": "Seed: A frontend framework for Rust, via WebAssembly",
      "content_text": "I'm distinguishing Seed through clear examples and documentation, and using wasm-bindgen/web-sys internally. I started this project after being unable to get existing frameworks working due to lack of documented examples, and inconsistency between documentation and published versions. My intent is for anyone who's proficient in a frontend framework to get a standalone app working in the browser within a few minutes, using just the quickstart guide.\n\nSeed's different approach to view syntax also distinguishes it: rather than use an HTML-like markup similar to JSX, it uses Rust builtin types, thinly-wrapped by macros that allow flexible composition. This decision will not appeal to everyone, but I think it integrates more naturally with the language.",
      "url": "https://seed-rs.org/",
      "date_published": "2019-03-26T00:00:00+00:00",
      "author": {
        "name": "David O'Connor",
        "url": "https://seed-rs.org/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "3ad2e4d8-ffb5-4dcc-870e-e5c8dae3ca2a",
      "title": "Resize images from S3 with AWS Lambda and Rust",
      "content_text": "Using Rust and AWS Lambda to thumbnail images, cheaply, relablity, and quickly.",
      "url": "https://matsimitsu.com/blog/2019-03-09-resize-images-from-s3-with-aws-lambda-and-rust/",
      "date_published": "2019-03-09T00:00:00+00:00",
      "author": {
        "name": "Robert Beekman",
        "url": "https://matsimitsu.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "6d82f826-46bb-4cb3-ba49-3a18c736f5ab",
      "title": "Web Development with Rust: Deploy your first App",
      "content_text": "If you learn something new, always have an updated version of your project in production. It keeps you motivated. We cover the most common options of how to do this in and with Rust.",
      "url": "https://dev.to/gruberb/web-programming-in-rust-02x-deploy-your-first-app-1k05",
      "date_published": "2019-03-19T20:13:00+00:00",
      "author": {
        "name": "Bastian Gruber",
        "url": "https://dev.to/gruberb"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "208250d2-7529-4548-b658-0b76353e05de",
      "title": "Building and augmenting libraries by calling Rust from JavaScript",
      "content_text": "Explore how to use WebAssembly (Wasm) to embed Rust inside JavaScript.",
      "url": "https://opensource.com/article/19/3/calling-rust-javascript",
      "date_published": "2019-03-18T03:02:00-04:00",
      "author": {
        "name": "Ryan Levick",
        "url": "https://opensource.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "23efff3a-8be9-443e-bc32-9de200d2e173",
      "title": "Fast, Bump-Allocated Virtual DOMs with Rust and Wasm",
      "content_text": "Dodrio is a virtual DOM library written in Rust and WebAssembly. It takes advantage of both Wasm’s linear memory and Rust’s low-level control by designing virtual DOM rendering around bump allocation. Preliminary benchmark results suggest it has best-in-class performance.",
      "url": "https://hacks.mozilla.org/2019/03/fast-bump-allocated-virtual-doms-with-rust-and-wasm/",
      "date_published": "2019-03-14T16:54:44+00:00",
      "author": {
        "name": "Nick Fitzgerald",
        "url": "https://hacks.mozilla.org/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "356cc6f0-1e2a-4060-8b81-df1d1d6cd911",
      "title": "WASP, a Lisp dialect for performant, concise Web Assembly modules",
      "content_text": "WASP is ‘a LISP programming language for extremely performant and concise web assembly modules.’ That means that you can use WASP to generate WASM modules.",
      "url": "https://medium.com/@nbaltunian/wasp-a-lisp-dialect-for-performant-concise-web-assembly-modules-29f5f7282b6a",
      "date_published": "2019-03-09T04:24:29.408+00:00",
      "author": {
        "name": "Noah",
        "url": "https://medium.com/@nbaltunian"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "756d2f52-51dd-4408-ae79-3b17c02849e3",
      "title": "Comparing C and Rust network protocol exercises - Ayende @ Rahien",
      "content_text": "Almost by accident, it turned out that I implemented a pretty simple, but non trivial task in both C and Rust and blogged about them. Now that I’m done with both of them, I thought it would be interesting to talk about the differences in the experiences. The Rust version clocks at exactly 400 lines of code and uses 12 external crates. The C version has 911 lines of C code and another 140 lines in headers and depends on libuv and openssl.",
      "url": "https://ayende.com/blog/185859-A/comparing-c-and-rust-network-protocol-exercises?Key=bd1ba87d-6e7e-4739-824d-0ca6fc232b05",
      "date_published": "2019-02-05T00:00:00+00:00",
      "author": {
        "name": "Ayende Rahien",
        "url": "https://ayende.com/blog/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "94fdb740-ae30-402f-9dc5-3f98b6a2753a",
      "title": "Embedding WebAssembly in your Rust application",
      "content_text": "Wasmer is a WebAssembly runtime designed to run both standalone and embedded. The crate wasmer-runtime exposes an easy to use and safe api for compiling, creating imports, and calling WebAssembly from your own library. This tutorial goes over how to make a simple wasm application and run it using the wasmer-runtime!",
      "url": "https://medium.com/wasmer/executing-webassembly-in-your-rust-application-d5cd32e8ce46",
      "date_published": "2019-01-24T17:20:46.602+00:00",
      "author": {
        "name": "Brandon Fish and Lachlan Sneff",
        "url": "https://medium.com/@fish0398"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "a3541593-fc72-40c3-a4b8-7fdad4cab8fe",
      "title": "Introducing swc (speedy web compiler) 1.0",
      "content_text": "swc(speedy web compiler) is a super-fast javascript to javascript compiler. It can transpile typescript / jsx / ecmascript 2019 to browser-compatible javascript. It's 16x - 20x faster than babel even on single-core synchronous benchmark. Note that actual performance gap is larger because swc works on worker thread while babel works on event loop thread.",
      "url": "https://swc-project.github.io/blog/2019/02/08/Introducing-swc-1.0",
      "date_published": "2019-02-08T00:00:00+00:00",
      "author": {
        "name": "DongYoon Kang",
        "url": "https://swc-project.github.io/"
      },
      "tags": [
        "Web and Network Services",
        "Tools and Applications"
      ]
    },
    {
      "id": "2810bb3d-7b68-42f0-ba5f-5c7a5956caf7",
      "title": "Enjoy a slice of QUIC, and Rust!",
      "content_text": "During last year’s Birthday Week we announced early support for QUIC, the next generation encrypted-by-default network transport protocol designed to secure and accelerate web traffic on the Internet.\n\nWe are not quite ready to make this feature available to every Cloudflare customer yet, but while you wait we thought you might enjoy a slice of quiche, our own open-source implementation of the QUIC protocol written in Rust.",
      "url": "https://blog.cloudflare.com/enjoy-a-slice-of-quic-and-rust/",
      "date_published": "2019-01-22T16:26:07+00:00",
      "author": {
        "name": "Alessandro Ghedini",
        "url": "https://blog.cloudflare.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "d430867d-388e-4cfb-9e42-698d80876f1c",
      "title": "Announcing OOProxy, a reverse OpenID and OAuth2 proxy",
      "content_text": "At HAL24K, we benefit a lot from open source software. That is why, to contribute back, we’ve started an internal program to open source some of the internal tools and libraries we’ve used to build our platform and machine learning solutions, starting with OOProxy. OOProxy is a reverse OpenID and OAuth2 proxy that we use to protect our HTTP-based machine learning APIs.",
      "url": "https://medium.com/hal24k-techblog/announcing-ooproxy-b041bab2bc85",
      "date_published": "2019-01-30T14:10:08.484+00:00",
      "author": {
        "name": "Tim Stokman",
        "url": "https://medium.com/@timstokman"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "09067d7b-54fc-4555-9e1f-a6622ea5e390",
      "title": "Replacing a hot path in your app's JavaScript with WebAssembly",
      "content_text": "In my previous articles I talked about how WebAssembly allows you to bring the library ecosystem of C/C++ to the web. One app that makes extensive use of C/C++ libraries is squoosh, our web app that allows you compress images with a variety of codecs that have been compiled from C++ to WebAssembly.\n\nIn my experience, most performance problems on the web are caused by forced layout and excessive paint but every now and then an app needs to do a computationally expensive task that takes a lot of time. WebAssembly can help here.",
      "url": "https://developers.google.com/web/updates/2019/02/hotpath-with-wasm",
      "date_published": "2019-02-15T07:38:00+00:00",
      "author": {
        "name": "Surma",
        "url": "https://developers.google.com/web/resources/contributors/surma"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "9496d523-3ad4-42ac-a6eb-183ed3d55713",
      "title": "Why should you use Rust in WebAssembly?",
      "content_text": "WebAssembly (Wasm) is a technology that has the chance to reshape how we build apps for the browser. Not only will it allow us to build whole new classes of web applications, but it will also allow us to make existing apps written in JavaScript even more performant.\n\nIn this article about the state of the Rust and Wasm ecosystem, I'll try to explain why Rust is the language that can unlock the true potential of WebAssembly.",
      "url": "https://opensource.com/article/19/2/why-use-rust-webassembly",
      "date_published": "2019-02-15T03:01:00-05:00",
      "author": {
        "name": "Ryan Levick",
        "url": "https://opensource.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "76ad8f41-d0b9-4789-b45a-5cfa550aa7c3",
      "title": "Exporting Serde types to TypeScript",
      "content_text": "I built my first web application with Rust and WebAssembly back in 2017. At the time, support for compiling Rust with the wasm32-unknown-unknown target had just landed, letting you run Rust code in the browser with few modifications. The downside was that loading and interacting with WebAssembly might require you to explicitly allocate and track memory. You might even need to manually decode UTF-8 strings in JavaScript:",
      "url": "http://timryan.org/2019/01/22/exporting-serde-types-to-typescript.html",
      "date_published": "2019-01-22T16:00:00+00:00",
      "author": {
        "name": "Tim Ryan",
        "url": "http://timryan.org/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "0cba574e-769b-491e-83de-cfa070b1b942",
      "title": "WebGL + Rust: Basic Water Tutorial",
      "content_text": "In this tutorial we’ll discuss the ideas and concepts behind rendering water and then talk through some demo code.",
      "url": "http://www.chinedufn.com/3d-webgl-basic-water-tutorial/",
      "date_published": "2019-01-06T13:00:00-05:00",
      "author": {
        "name": "Chinedu Francis Nwafili",
        "url": "http://www.chinedufn.com/"
      },
      "tags": [
        "Web and Network Services",
        "Games and Graphics"
      ]
    },
    {
      "id": "f12043be-3b2d-4ab3-8ce1-51463ffad905",
      "title": "Rust and WebAssembly in 2019",
      "content_text": "Compiling Rust to WebAssembly should be the best choice for fast, reliable code for the Web. Additionally, the same way that Rust integrates with C calling conventions and libraries on native targets, Rust should also integrate with JavaScript and HTML5 on the Web. These are the Rust and WebAssembly domain working group’s core values. In 2018, we made it possible to surgically replace performance-sensitive JavaScript with Rust-generated WebAssembly. I propose that we make larger-scale adoption of Rust and WebAssembly practical in 2019.",
      "url": "http://fitzgeraldnick.com/2018/12/14/rust-and-webassembly-in-2019.html",
      "date_published": "2018-12-14T00:00:00-08:00",
      "author": {
        "name": "Nick Fitzgerald",
        "url": "http://fitzgeraldnick.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "53c9e07b-f4d5-423f-8a84-05e119814fda",
      "title": "Async in Rust, circa 2018",
      "content_text": "Rust 2018 has shipped, and we’re closing in on the end of the year. While we didn’t manage to ship async/await as part of the edition itself, the community has made quite a lot of progress toward that goal. This post summarizes the state of play, and announces the publication of several crates intended to facilitate use of async/await on the nightly ecosystem.",
      "url": "https://rust-lang-nursery.github.io/wg-net/2018/12/13/async-update.html",
      "date_published": "2018-12-13T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "https://rust-lang-nursery.github.io/wg-net/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "108e3952-7d7b-4fcc-9c76-073646f2ddee",
      "title": "Generating Sudoku Boards pt. 3: Rust for WebAssembly",
      "content_text": "Adjusting an existing Rust project to build a native binary and library for WASM, load in JS. Details on working through build issues.",
      "url": "https://medium.com/@rossharrison/generating-sudoku-boards-pt-3-rust-for-webassembly-85bd7294c34a",
      "date_published": "2018-11-26T00:18:40.579+00:00",
      "author": {
        "name": "Ross Harrison",
        "url": "https://medium.com/@rossharrison"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "c1576100-8199-418d-bd9a-03c71f1b5559",
      "title": "Serverless HTTP in Rust",
      "content_text": "Throw down your main! Rustlang Serverless HTTP applications won’t need them where they’re going",
      "url": "https://medium.com/@softprops/serverless-http-9a58f9b2df60",
      "date_published": "2018-11-28T11:11:52.987+00:00",
      "author": {
        "name": "Doug Tangren",
        "url": "https://medium.com/@softprops"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "78791a3b-395e-4d3b-b091-66aa2fa2c577",
      "title": "Edge programming with Rust and WebAssembly",
      "content_text": "Take a developer deep dive into Terrarium, our multi-language, browser-based editor and deployment platform at the edge. Learn how to compile Rust programs to WebAssembly right on your local machine, interact with the Terrarium system, and explore some applications we’ve built with it.",
      "url": "https://www.fastly.com/blog/edge-programming-rust-web-assembly",
      "date_published": "2018-12-12T16:00:00+00:00",
      "author": {
        "name": "Pat Hickey",
        "url": "https://www.fastly.com/blog"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "9e21d91f-ef59-43f5-98c9-ba96d003fcb3",
      "title": "Rocket v0.4: Typed URIs, Database Support, Revamped Queries, & More!",
      "content_text": "I am elated to announce that the next major release of Rocket is now available! Rocket 0.4 is a step forward in every direction: it is packed with features and improvements that increase developer productivity, improve application security and robustness, provide new opportunities for extensibility, and deliver a renewed degree of toolchain stability.",
      "url": "https://rocket.rs/v0.4/news/2018-12-08-version-0.4/",
      "date_published": "2018-12-08T00:00:00+00:00",
      "author": {
        "name": "Sergio Benitez",
        "url": "https://rocket.rs/news"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "5493161b-6e7d-4b81-887f-af80a0d2c410",
      "title": "CFG Game: Put your CS skills to good use and craft burgers",
      "content_text": "This past weekend I made a game for Ludum Dare 43. Tools used: Aseprite, quicksilver. Inspired by Zachtronics. It is written in Rust and compiled to WebAssembly.",
      "url": "http://rickyhan.com/jekyll/update/2018/12/03/make-burgers-context-free-grammar.html",
      "date_published": "2018-12-03T04:37:02+00:00",
      "author": {
        "name": "Ricky Han",
        "url": "http://rickyhan.com/"
      },
      "tags": [
        "Games and Graphics",
        "Web and Network Services"
      ]
    },
    {
      "id": "27a7e602-da8a-4c0b-9ec1-81cc22c00df9",
      "title": "Using Web Assembly in the Browser",
      "content_text": "WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. This essentially means that is is fast, because the program is compiled to a much more compact format, making it faster to parse. Wasm can be written by hand if you're looking for a challenge, but is primarily meant to be written in another language, and then compiled to Wasm. You may know a little about Assembly language and how it works - here's a quick refresher in-case you're rusty.",
      "url": "https://ljcode.org/blog/wasm-part1/",
      "date_published": "2018-12-10T00:00:00+00:00",
      "author": {
        "name": "Luke Jones",
        "url": "https://ljcode.org/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "7df2b166-e70e-4b15-bf6e-9475a81096e9",
      "title": "Creating my first AWS Lambda using Rust",
      "content_text": "Taking advantage of AWS Lambda Runtime support for Rust",
      "url": "https://medium.com/@kkostov/rust-aws-lambda-30a1b92d4009",
      "date_published": "2018-12-02T12:40:16.527+00:00",
      "author": {
        "name": "Konstantin",
        "url": "https://medium.com/@kkostov"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "c52eda57-1761-4ec3-9e59-c4c45d665574",
      "title": "Dice.rs: Rust on Lambda",
      "content_text": "Rust support on AWS Lambda was recently released, which seems like as good an opportunity as any to share some code and the solutions to challenges I encountered along the way ☺. I’ve decided to create a little diceware service, and the lambda-runtime crate provides a great API to make this a breeze.",
      "url": "https://kellenfujimoto.com/posts/dicers-rust-on-lambda/",
      "date_published": "2018-12-02T14:18:59+01:00",
      "author": {
        "name": "Kellen Frodelius-Fujimoto",
        "url": "https://kellenfujimoto.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "deadc4e1-1e13-49ca-b62b-cd8af455a164",
      "title": "Wherefore art thou Romio?",
      "content_text": "This blog post is about a project called Romio that I’ve been working on over the past two or three weeks. Romio is a port of a small part of the Tokio project to the newer futures APIs.\n\nI started the project to get some experience porting code from the old futures API to the new API. However, we realized that this code could also be useful to other people who want to experiment with networking code using the new async/await syntax, so with the help of others we polished it up during the RustFest Rome “impl days” and now its being released for people to experiment with.",
      "url": "http://boats.gitlab.io/blog/post/romio/",
      "date_published": "2018-12-05T00:00:00+00:00",
      "author": {
        "name": "withoutboats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "05ee17e8-44f9-41c4-9f29-b4a5be430158",
      "title": "Safe Web Services with Actix and Sentry",
      "content_text": "Enjoy this quick introduction to creating a web server with Actix and monitoring it with Sentry.",
      "url": "https://blog.sentry.io/2018/12/04/safe-web-services-actix-sentry",
      "date_published": "2018-12-04T00:00:00+00:00",
      "author": {
        "name": "Jan Michael Auer",
        "url": "https://blog.sentry.io/index.html"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "c0eb769f-4785-436d-b0b9-4bff16b30ef8",
      "title": "Reflecting on Rust and WebAssembly in 2018",
      "content_text": "🎉 The 2018 edition of Rust has officially shipped, and the initial Rust and WebAssembly development story along with it! 🎉 To see how far we’ve come, let’s reflect on the Rust and WebAssembly story a year ago: rustc could emit WebAssembly binaries for you, but that was about it. As far as communication with JavaScript went, you had to work with raw wasm imports and exports yourself. That meant you could only pass 32- and 64-bit integers and floats back and forth. No Rust structs, JavaScript objects, strings, or slices could be passed back forth. And distributing your library’s .wasm so that other downstream projects could depend on it? Good luck.",
      "url": "https://rustwasm.github.io/2018/12/06/reflecting-on-rust-and-wasm-in-2018.html",
      "date_published": "2018-12-06T00:00:00+00:00",
      "author": {
        "name": "Rust and WebAssembly",
        "url": "https://rustwasm.github.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "881d8c07-ccf4-48be-ab22-bd76cc7c848d",
      "title": "Rust Web Survey Results 2018",
      "content_text": "We recently sent out a survey regarding the state of the current Rust web ecosystem and we got over a 1000 responses! We really appreciate the feedback from the community. This will help us continue to improve upon the state of the Rust web ecosystem. Today, we would like to go over the responses and understand the results.",
      "url": "https://rust-lang-nursery.github.io/wg-net/2018/11/28/wg-net-survey.html",
      "date_published": "2018-11-28T00:00:00+00:00",
      "author": {
        "name": "Bhargav Voleti",
        "url": "https://rust-lang-nursery.github.io/wg-net/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "48218be5-130b-4274-b41a-7bfa20086f0d",
      "title": "Rust Runtime for AWS Lambda",
      "content_text": "AWS Lambda, which makes it easy for developers to run code for virtually any type of application or backend service with zero administration, has just announced the Runtime APIs. The Runtime APIs define an HTTP-based specification of the Lambda programming model which can be implemented in any programming language. To accompany the API launch, we have open sourced a runtime for the Rust language.",
      "url": "https://aws.amazon.com/blogs/opensource/rust-runtime-for-aws-lambda/",
      "date_published": "2018-11-29T18:02:27+00:00",
      "author": {
        "name": "Stefano Buliani",
        "url": "https://aws.amazon.com/blogs/opensource/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "abba07ed-5ffb-4b29-ba29-f1e6dbdce718",
      "title": "Tide’s evolving middleware approach",
      "content_text": "Since the last post on Tide, there have been a number of excellent contributions from a bunch of new contributors! In this post, I want to talk about the work that @tirr-c has done to substantially improve the middleware story.",
      "url": "https://rust-lang-nursery.github.io/wg-net/2018/11/27/tide-middleware-evolution.html",
      "date_published": "2018-11-27T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "https://rust-lang-nursery.github.io/wg-net/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "c5b56719-bdcd-4d91-8b61-85a27cd5315c",
      "title": "Generic Methods in Rust: How Exonum Shifted from Iron to Actix-web",
      "content_text": "In this article, we describe how we ported the Exonum framework to actix-web using generic programming.",
      "url": "https://medium.com/meetbitfury/generic-methods-in-rust-how-exonum-shifted-from-iron-to-actix-web-7a2752171388",
      "date_published": "2018-11-21T10:51:32.586+00:00",
      "author": {
        "name": "Exonum",
        "url": "https://medium.com/@ExonumPlatform"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "97715a00-432f-4cfa-9c11-92f0d74ff60e",
      "title": "Running Rust natively in AWS Lambda and testing it locally",
      "content_text": "Abusing Go runtime in AWS to run Rust binaries",
      "url": "https://medium.com/@bernardo.belchior1/running-rust-natively-in-aws-lambda-and-testing-it-locally-57080421426d",
      "date_published": "2018-11-12T14:23:33.534+00:00",
      "author": {
        "name": "Bernardo Belchior",
        "url": "https://medium.com/@bernardo.belchior1"
      },
      "tags": [
        "DevOps and Deployment",
        "Web and Network Services"
      ]
    },
    {
      "id": "ad136bed-3540-4ced-8a77-448b94426ba3",
      "title": "Bringing Elm’s architecture to Rust and Webassembly",
      "content_text": "I really like Elm. It is a delightful language with an amazing ecosystem. It has an interesting architecture called TEA, The Elm Architecture. Another language I like is Rust. On paper, Rust is completely different from Elm, but in using them both, I have seen some resemblance. Having used both Elm and Rust I had something I wanted to try. Would it be possible to create The Elm Architecture in Rust?",
      "url": "https://sindrejohansen.no/blog/willow/rust/elm/2018/11/16/willow-elm-in-rust.html",
      "date_published": "2018-11-16T16:35:22+00:00",
      "author": {
        "name": "Sindre",
        "url": "https://sindrejohansen.no/blog/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "b2687a6e-55b3-4d3b-a025-fc9e7c592e8e",
      "title": "Serve archived static files over HTTP",
      "content_text": "Say you want to store a huge number of very small filesthat you will only access over HTTP.For example:You are using rustdoc to render the documentation of a library.Without much work you’ll end up with about 100k HTML filesthat are about 10kB each.As it turns out,this number of small files is very annoying for any kind of file system performance.Best case: making copies/backups is slow.Worst case: You’re using an anti virus software and it takes ages.",
      "url": "https://deterministic.space/serve-archived-static-files-over-http.html",
      "date_published": "2018-11-11T00:00:00+01:00",
      "author": {
        "name": "Pascal Hertleif",
        "url": "https://deterministic.space/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "b8931a7e-08d1-406b-b751-6bd27a9d4d67",
      "title": "Middleware in Tide",
      "content_text": "After the positive response to the routing and extraction proposal in Tide, I’m pleased to say that an initial implementation is available on GitHub! As a testament to the strong foundation that Rust’s ecosystem provides, the basic framework implementation took only about 1,000 lines of code.",
      "url": "https://rust-lang-nursery.github.io/wg-net/2018/11/07/tide-middleware.html",
      "date_published": "2018-11-07T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "https://rust-lang-nursery.github.io/wg-net/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "4b5e36d0-0775-48da-a6f9-ab19ce9a5aae",
      "title": "Serverless Rust",
      "content_text": "This is going to be the first post ( and hopefully not last ) in a series of posts about writing (and thinking about) serverless applications in Rust. Stay tuned…",
      "url": "https://medium.com/@softprops/serverless-rust-318732a3596",
      "date_published": "2018-10-30T02:08:22.553+00:00",
      "author": {
        "name": "Doug Tangren",
        "url": "https://medium.com/@softprops"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "77d7a663-c11c-476c-a180-a84d0edf2975",
      "title": "Announcing Gotham 0.3",
      "content_text": "First of all, hello there! This is the first announcement after the call for maintainers back in summer, and includes the efforts of several new faces: @whitfin, @nyarly, @colinbankier. Together, as well as input from the original authors @bradleybeddoes and @smangelsdorf, we are the new maintainers of the Gotham project. Today we’re excited to announce the release of Gotham 0.3, which follows the evolution of the broader Rust ecosystem.",
      "url": "https://gotham.rs/blog/release/2018/10/29/gotham-0.3.html",
      "date_published": "2018-10-29T15:31:00+00:00",
      "author": {
        "name": "@whitfin, @nyarly, @colinbankier",
        "url": "https://gotham.rs/blog"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "268e1717-7988-4cb0-83e4-f4c902a969a8",
      "title": "Auth Web Microservice with rust using Actix-Web - Part 2",
      "content_text": "Picking up from part one, we now have as server that takes an email address from a request and spits out a JSON response with an invitation object. In part one I said that we will send an email to the user, after some thought and feedback, we will be skipping this part now (look out for part 3). For now we will use the http response from the server to verify the email so to speak.",
      "url": "https://hgill.io/posts/auth-microservice-rust-actix-web-diesel-complete-tutorial-part-2/",
      "date_published": "2018-10-28T13:02:37+01:00",
      "author": {
        "name": "Harry Gill",
        "url": "https://hgill.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "8c9a2022-1124-47da-94c4-a85e808a257c",
      "title": "10x Your JavaScript With WASM And Rust",
      "content_text": "This is part four in a series of Rust on Azure Functions. The other parts are about performance comparisons (part 1 and part 2), and explaining the PMX algorithm (part 3). If you want to learn more about Genetic Algorithms be sure to read part 3 first).",
      "url": "https://blog.x5ff.xyz/blog/azure-functions-wasm-rust-ai/",
      "date_published": "2018-10-25T00:00:00+00:00",
      "author": {
        "name": "Claus",
        "url": "https://blog.x5ff.xyz/blog"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "1025ea91-d834-4f58-97cc-dabcee3b86df",
      "title": "Multithreading Rust and Wasm",
      "content_text": "When WebAssembly was first shipped it was an MVP which, while minimal, has spawned a huge number of exciting projects which work today across all major browsers. Rust has capitalized on the wasm MVP’s success as well with tools like wasm-bindgen and wasm-pack by making the MVP feel less minimal. WebAssembly is yet more ambitious, though! Since inception it’s always been intended to extend the WebAssembly specification with new features and functionality.",
      "url": "https://rustwasm.github.io/2018/10/24/multithreading-rust-and-wasm.html",
      "date_published": "2018-10-24T00:00:00+00:00",
      "author": {
        "name": "Alex Crichton",
        "url": "https://rustwasm.github.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "d418a0ea-dbef-4bfa-bc74-827185aef57c",
      "title": "Auth Web Microservice with rust using Actix-Web",
      "content_text": "We are going to create a web-server in rust that only deals with user registration and authentication. I will be explaining the steps in each file as we go. The complete project code is here repo. Please take all this with a pinch of salt as I’m a still a noob to Rust.",
      "url": "https://hgill.io/posts/auth-microservice-rust-actix-web-diesel-complete-tutorial-part-1/",
      "date_published": "2018-10-08T13:02:37+01:00",
      "author": {
        "name": "Harry Gill",
        "url": "https://hgill.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "c1a9ce3b-fd19-4285-b465-ab7607792297",
      "title": "Serverless Rust with AWS Lambda and WebAssembly",
      "content_text": "In this post, I look at how WebAssembly can be used to create serverless functions and demonstrate an AWS Lambda function written entirely in Rust.",
      "url": "https://blog.scottlogic.com/2018/10/18/serverless-rust.html",
      "date_published": "2018-10-18T00:00:00+00:00",
      "author": {
        "name": "Colin Eberhardt",
        "url": "https://www.scottlogic.com/blog"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "7141f981-74d7-4df6-9ce2-b857fff58557",
      "title": "Routing and extraction in Tide: a first sketch",
      "content_text": "This post continues the series on Tide, sketching a possible design for routing and extraction that combines some of the best ideas from frameworks like Rocket, Actix, and Gotham.",
      "url": "https://rust-lang-nursery.github.io/wg-net/2018/10/16/tide-routing.html",
      "date_published": "2018-10-16T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "https://rust-lang-nursery.github.io/wg-net/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "0c92d9d7-26ba-4152-9820-08ef1011689d",
      "title": "Serverless Rust with Cloudflare Workers",
      "content_text": "It's exciting times for Rust developers. Cloudflare's Serverless Platform, Cloudflare Workers, allows you to compile your code to WASM, upload to 150+ data centers and invoke those functions just as easily as if they were JavaScript functions. Today I'm going to convert my lipsum generator to use Rust and explore the developer experience (hint: it's already pretty nice).",
      "url": "https://blog.cloudflare.com/cloudflare-workers-as-a-serverless-rust-platform/",
      "date_published": "2018-10-16T12:00:00+00:00",
      "author": {
        "name": "Steven Pack",
        "url": "https://blog.cloudflare.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "0c44f78b-c47a-4be2-9e30-4fa129304a9c",
      "title": "Pi-hole: Announcing Our RESTful API",
      "content_text": "The API is written in Rust, a language new to the Pi-hole project. Rust is a safe and fast language which matches well with our goals for the API. It is statically typed and prevents whole categories of errors while being productive and extendable.",
      "url": "https://pi-hole.net/2018/10/15/announcing-our-restful-api-contributions-welcome/",
      "date_published": "2018-10-15T13:00:33+00:00",
      "author": {
        "name": "Pi-hole",
        "url": "https://pi-hole.net/blog/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "bb052dfe-fdb1-4848-9fdf-28c7c5023d93",
      "title": "Using WebAssembly to Accelerate Markdown Rendering",
      "content_text": "Markdown rendering is very important to the performance of Semaphor - every message you send and read is a Markdown document - so we're always looking for ways to improve the performance of rendering Markdown. A couple months ago Jonathan Moore and I wondered how easy it would be to integrate WebAssembly into a React component, replacing the render() function, and we thought that moving Markdown parsing into Rust would be a great way to test this idea out.",
      "url": "https://engineering.spideroak.com/2018/08/29/using-webassembly-to-speed-up-message-rendering/",
      "date_published": "2018-08-29T10:10:00+00:00",
      "author": {
        "name": "Chip Black and Jonathan Moore",
        "url": "https://engineering.spideroak.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "cba35bca-a821-4ba9-81d8-3cee56f5e199",
      "title": "WebAssembly and Dynamic Memory",
      "content_text": "WebAssembly is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable target for compilation of high-level languages like C/C++/Rust, enabling deployment on the web for client and server applications.\n\nThese high-level languages like C/C++/Rust (+Javascript) deal with different allocations of memory, such as static memory, stack memory and dynamic memory.",
      "url": "https://frehberg.wordpress.com/webassembly-and-dynamic-memory/",
      "date_published": "2018-10-04T03:19:18+00:00",
      "author": {
        "name": "Frank Rehberger",
        "url": "https://frehberg.wordpress.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "217f309f-bfff-4997-8ff7-faddf10b670f",
      "title": "Introducing Ruukh Framework",
      "content_text": "Rust has its goals set on to be a primary WASM language and it would be awesome to use it both in backend and frontend web. Ruukh is one of such efforts to realise that dream. Ruukh, a frontend web framework, is inspired by both VueJS and ReactJS.",
      "url": "https://sharadchand.com/2018/10/03/ruukh-framework.html",
      "date_published": "2018-10-03T12:38:00+00:00",
      "author": {
        "name": "Sharad Chand",
        "url": "https://sharadchand.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "7de9ba6b-a3ae-4db5-a911-15126a264b26",
      "title": "Lessons learned on writing web applications completely in Rust",
      "content_text": "This blog post is an update to the preceeding article “A web application completely written in Rust” and summarizes the projects’ progress over the last months.",
      "url": "https://medium.com/@saschagrunert/lessons-learned-on-writing-web-applications-completely-in-rust-2080d0990287",
      "date_published": "2018-10-03T11:59:12.827+00:00",
      "author": {
        "name": "Sascha Grunert",
        "url": "https://medium.com/@saschagrunert"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "38d1a807-a596-4423-a458-beab7d9df074",
      "title": "Programming WebAssembly with Rust — The Book!",
      "content_text": "I am proud to announce that I’m working on a book for the Pragmatic Programmers. The title hasn’t been set in stone yet, but the book will be about programming WebAssembly with Rust.",
      "url": "https://medium.com/@KevinHoffman/programming-webassembly-with-rust-the-book-7c4a890fcf97",
      "date_published": "2018-09-28T13:25:42.837+00:00",
      "author": {
        "name": "Kevin Hoffman",
        "url": "https://medium.com/@KevinHoffman"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "27dd6f1a-6659-43d5-aa7b-2e0ee21c7173",
      "title": "Announcing the web-sys crate!",
      "content_text": "We are pleased to announce the first release of the web-sys crate! It provides raw bindings to all the Web’s APIs: everything from DOM manipulation to WebGL to Web Audio to timers to fetch and more!",
      "url": "https://rustwasm.github.io/2018/09/26/announcing-web-sys.html",
      "date_published": "2018-09-26T00:00:00+00:00",
      "author": {
        "name": "rustwasm",
        "url": "https://rustwasm.github.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "ba0468b9-b0dd-40d1-b253-9fa70cb05ddf",
      "title": "eBPF, ingrained in Rust",
      "content_text": "Today we are releasing RedBPF and ingraind, our eBPF toolkit that integrates with StatsD and S3, to gather feedback, and see where others in the Rust community might take this framework. If you are looking to up your company’s monitoring game, gather more data about your Raspberry Pi cluster at home, or just have a strong academic interest in Rust and low-level bit shepherding, you might want to read on.",
      "url": "https://blog.redsift.com/labs/ebpf-ingrained-in-rust/",
      "date_published": "2018-09-25T14:45:44+00:00",
      "author": {
        "name": "Peter Parkanyi",
        "url": "https://blog.redsift.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "fa23119f-23c8-404c-9aaa-5a75da99d131",
      "title": "Tower Web 0.3 — async/await and template support",
      "content_text": "Today, Tower Web 0.3 has been released and it comes with two major new features: Experimental support for async/await. Support for using templates to render responses.",
      "url": "https://medium.com/@carllerche/tower-web-0-3-async-await-and-template-support-e0bb8ed47941",
      "date_published": "2018-09-28T17:32:13.187+00:00",
      "author": {
        "name": "Carl Lerche",
        "url": "https://medium.com/@carllerche"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "21440a24-a7da-4c72-8232-df22c7438b09",
      "title": "Smithy progress update: How I decreased WebAssembly bundle size by 90%",
      "content_text": "Smithy, a web development framework written in Rust that compiles to WebAssembly. In the mean time, there has been substantial progress, and Smithy is on the verge of being ready for alpha use! In this post, I want to describe the improvements that have been made, and what’s on the Smithy roadmap!",
      "url": "https://medium.com/@robert.balicki_2494/smithy-progress-update-how-i-decreased-webassembly-bundle-size-by-90-e7fe194b2f58",
      "date_published": "2018-09-24T03:36:53.708+00:00",
      "author": {
        "name": "Robert Balicki",
        "url": "https://medium.com/@robert.balicki_2494"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "cf201dba-76a2-49e1-a4d9-b28093189901",
      "title": "Announcing Linkerd 2.0: from service mesh to service sidecar",
      "content_text": "The 2.0 release of Linkerd brings two very significant changes. First, we’ve completely rewritten Linkerd to be orders of magnitude faster and smaller than Linkerd 1.x. Linkerd 2.0’s data plane is comprised of ultralight Rust proxies which consume around 10mb of RSS and have a p99 latency of <1ms. Linkerd’s minimalist control plane (written in Go) is similarly designed for speed and low resource footprint.",
      "url": "https://blog.linkerd.io/2018/09/18/announcing-linkerd-2-0/",
      "date_published": "2018-09-18T17:00:00+00:00",
      "author": {
        "name": "William Morgan",
        "url": "https://blog.linkerd.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "d72f5483-1247-46d8-8764-7ac5ec0fb2d3",
      "title": "Rust and JavaScript Interop ↔️",
      "content_text": "In recent projects of mine, I’ve been using WebAssembly quite a bit. WebAssembly (Wasm) is “a new binary instruction format for a stack based virtual machine” that lets you use languages besides JavaScript to run code on a web page - usually either for performance reasons or to run code you’d like to share across different platforms. In my opinion, the most promising of these languages, due to its lack of a need for a runtime and great tooling is Rust.",
      "url": "https://blog.ryanlevick.com/posts/wasm-bindgen-interop/",
      "date_published": "2018-09-12T00:00:00+00:00",
      "author": {
        "name": "Ryan Levick",
        "url": "https://blog.ryanlevick.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "1461a8b4-863b-40c1-bb2d-0ff077d738e1",
      "title": "Rising Tide: building a modular web framework in the open",
      "content_text": "The Network Services Working Group aims to improve the story for web development this year in several respects: by bolstering foundations like async/await, by improving the ecosystem of web-related crates, and by pulling these pieces together into a framework and book called Tide. The name “Tide” refers to “a rising tide lifts all boats”; the intent is to improve sharing, compatibility, and improvements across all web development and frameworks in Rust.",
      "url": "https://rust-lang-nursery.github.io/wg-net/2018/09/11/tide.html",
      "date_published": "2018-09-11T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "https://rust-lang-nursery.github.io/wg-net/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "850319b3-4515-4f9c-b833-67a391d5ab26",
      "title": "Programming Servo: A generic “worker event-loop”",
      "content_text": "Let’s take a look at how in Rust you can have an algorithm generic over T, where T is further bound by a trait, which itself is generic over one of several parameters.",
      "url": "https://medium.com/programming-servo/programming-servo-a-generic-worker-event-loop-400a6f113a60",
      "date_published": "2018-09-02T07:03:47.310+00:00",
      "author": {
        "name": "Gregory Terzian",
        "url": "https://medium.com/@polyglot_factotum"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "e7fbc029-a108-4209-bbf4-9e152701d9a6",
      "title": "Tower Web — Expanding the middleware stack",
      "content_text": "tower-web version 0.2.2 has been released. It comes with a number of new features, which I will talk about in this post. Primarily, the middleware story is starting to come together. I will be expanding some on how middleware fits into Tower and web in general.",
      "url": "https://medium.com/@carllerche/tower-web-expanding-the-middleware-stack-f9bf55bfa109",
      "date_published": "2018-09-07T14:21:28.473+00:00",
      "author": {
        "name": "Carl Lerche",
        "url": "https://medium.com/@carllerche"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "715ee4bf-9164-4c58-aa4f-93f088859281",
      "title": "Benchmarking a Rust web application",
      "content_text": "I set out out my goal 9 for Rustnish: Write benchmark code that compares runtime performance of Rustnish against Varnish. Use cargo bench to execute the benchmarks.\n\nThe basic idea of a performance test here is to send many HTTP requests to the web service (the reverse proxy in this case) and measure how fast the responses arrive back. Comparing the results from Rustnish and Varnish should give us an idea if our performance expectations are holding up.",
      "url": "https://klausi.github.io/rustnish/2018/08/31/benchmarking-a-rust-web-application.html",
      "date_published": "2018-08-31T00:00:00+00:00",
      "author": {
        "name": "klausi",
        "url": "https://klausi.github.io/rustnish/"
      },
      "tags": [
        "Web and Network Services",
        "Performance"
      ]
    },
    {
      "id": "ed925df2-a1c7-4125-a27c-7cbda8dbac71",
      "title": "Programming Servo: the makings of a task-queue",
      "content_text": "In Servo, task-sources are implemented via a channel, whose sender is cloned for each specific task-source, and where tasks are messages sent on the channel and containing a closure representing the actual task.",
      "url": "https://medium.com/programming-servo/programming-servo-the-makings-of-a-task-queue-b4138cd246ca",
      "date_published": "2018-08-28T10:11:58.984+00:00",
      "author": {
        "name": "Gregory Terzian",
        "url": "https://medium.com/@polyglot_factotum"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "10c577b9-fdf3-4aa3-80dd-78c6e4abb8c7",
      "title": "From Rust to beyond: The ASM.js galaxy",
      "content_text": "The second galaxy that our Rust parser will explore is the ASM.js galaxy. This post will explain what ASM.js is, how to compile the parser into ASM.js, and how to use the ASM.js module with Javascript in a browser. The goal is to use ASM.js as a fallback to WebAssembly when it is not available. I highly recommend to read the previous episode about WebAssembly since they have a lot in common.",
      "url": "https://mnt.io/2018/08/28/from-rust-to-beyond-the-asm-js-galaxy/",
      "date_published": "2018-08-28T07:39:03+00:00",
      "author": {
        "name": "Ivan Enderlin",
        "url": "https://mnt.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "a7804e3a-d98b-4135-9d38-e75aeb294961",
      "title": "Oxidizing sourmash: WebAssembly",
      "content_text": "In \"Oxidizing sourmash: Python and FFI\" I described my road to learn Rust, but something that I omitted was that around the same time the WebAssembly support in Rust started to look better and better and was a huge influence in my decision to learn Rust. Reimplementing the sourmash C++ extension in Rust and use the same codebase in the browser sounded very attractive, and now that it was working I started looking into how to use the WebAssembly target in Rust.",
      "url": "https://blog.luizirber.org/2018/08/27/sourmash-wasm/",
      "date_published": "2018-08-27T15:30:00-03:00",
      "author": {
        "name": "Luiz Irber",
        "url": "https://blog.luizirber.org/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "b1b8abb7-362a-4004-8b6c-913ca1c85773",
      "title": "From Rust to beyond: The WebAssembly galaxy",
      "content_text": "The first galaxy that our Rust parser will explore is the WebAssembly (WASM) galaxy. This post will explain what WebAssembly is, how to compile the parser into WebAssembly, and how to use the WebAssembly binary with Javascript in a browser and with NodeJS.",
      "url": "https://mnt.io/2018/08/22/from-rust-to-beyond-the-webassembly-galaxy/",
      "date_published": "2018-08-22T07:46:27+00:00",
      "author": {
        "name": "Ivan Enderlin",
        "url": "https://mnt.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "8b803f70-9098-40d0-97af-5cdff0cde756",
      "title": "Programming Servo: Anatomy of a Fetch",
      "content_text": "Today, let’s go through an entire fetch in Servo, starting with an example in JS.",
      "url": "https://medium.com/programming-servo/anatomy-of-a-fetch-8872a5c843cd",
      "date_published": "2018-08-17T22:29:36.264+00:00",
      "author": {
        "name": "Gregory Terzian",
        "url": "https://medium.com/@polyglot_factotum"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "1921a96e-ad32-410f-b0a7-c72dc16d3cde",
      "title": "Rust GraphQL webserver with Warp, Juniper and MongoDB",
      "content_text": "Rust's web frameworks ecosystem is in constant change, but recently a new framework called warp came out implementing a new, original way to solve the old problem of transforming a request into a response, and I wanted to give it a try.\n\nAnd, as I use GraphQL massively at work, I also wanted to check how well Juniper implements it. To add some spice, I used MongoDB as a storage engine instead of the ubiquitous and well-supported SQL databases.",
      "url": "http://alex.amiran.it/post/2018-08-16-rust-graphql-webserver-with-warp-juniper-and-mongodb.html",
      "date_published": "2018-08-16T00:00:00+00:00",
      "author": {
        "name": "/dev/random",
        "url": "http://alex.amiran.it/index.html"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "0a12242d-a074-40cd-afa5-ec83c41c3865",
      "title": "paste a full featured pastebin written in Rust",
      "content_text": "A sensible, modern pastebin written in Rust",
      "url": "https://paste.gg/",
      "date_published": "2018-07-16T14:42:15+10:00",
      "author": {
        "name": "Kyle Clemens",
        "url": "https://paste.gg/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "e9ddc1eb-5ab9-4f23-8b9a-a41cea991044",
      "title": "Tower Web 0.2 — Now 100% comment attribute free",
      "content_text": "The short version is, Tower Web 0.2 was just released and regular Rust attributes are now used instead of magic comments. The doc comment is replaced with #[get(\"/\")]. This is thanks to Rust macro wizard David Tolnay. I also thought that it would be best to immediately push out 0.2 and then we can all pretend 0.1 didn’t happen.",
      "url": "https://medium.com/@carllerche/tower-web-0-2-now-100-comment-attribute-free-3ed0633e47e5",
      "date_published": "2018-08-14T16:22:13.075+00:00",
      "author": {
        "name": "Carl Lerche",
        "url": "https://medium.com/@carllerche"
      },
      "tags": [
        "Web and Network Services",
        "Crates"
      ]
    },
    {
      "id": "3bdf428b-c38a-4964-a8f2-a4e0106bd5d1",
      "title": "Ray Tracing: WebAssembly vs JavaScript",
      "content_text": "For the past few months I've been toying about with WebAssembly. The examples I've built using WebAssembly were very simple and could easily have been written in JavaScript with perfectly adequate performance. This got me thinking it's about time I make something to really shows where WebAssembly shines. This led me down the path of thinking about very compute-demanding applications. An obvious example is 3d graphics rendering. Even a small scene like the ones I've been creating involve computing millions of vector dot product calculations per second. This kind of CPU-intensive application seemed right up the street of WebAssembly.",
      "url": "http://matt-harrison.com/raytracing-webassembly-vs-javascript/",
      "date_published": "2018-08-12T14:09:42+00:00",
      "author": {
        "name": "Matt Harrison",
        "url": "http://matt-harrison.com/"
      },
      "tags": [
        "Web and Network Services",
        "Games and Graphics"
      ]
    },
    {
      "id": "47f615b2-5fe1-45a1-b760-9bff19237836",
      "title": "Syntax diagram generator",
      "content_text": "This is a demonstration of a pure-rust library to generate syntax diagrams for macro_rules!().Diagrams are generated fully automatically from rust-source as Scalable Vector Graphics, using customizable CSS for layout.",
      "url": "https://lukaslueg.github.io/macro_railroad_wasm_demo/",
      "date_published": "2018-08-12T15:04:11+00:00",
      "author": {
        "name": "lukaslueg",
        "url": "https://github.com/lukaslueg"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "ea6c2f82-fb04-49be-be31-307284eedba4",
      "title": "Tower Web — A new web framework for Rust",
      "content_text": "I previously announced Tower and mentioned that a web framework was in the works. It took longer than I had hoped (as it sometimes does with software), but today, I am opening up Tower Web.\n\nTower Web is an asynchronous HTTP web framework that focuses on removing boilerplate. It is built on top of Tokio, Hyper, and of course Tower. It works today on stable Rust.",
      "url": "https://medium.com/@carllerche/tower-web-a-new-web-framework-for-rust-e2912856851b",
      "date_published": "2018-08-09T17:46:17.217+00:00",
      "author": {
        "name": "Carl Lerche",
        "url": "https://medium.com/@carllerche"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "85ab7e93-7bbc-43ef-be5f-5decca1b4651",
      "title": "Introducing PrrrStack, Pt. 2",
      "content_text": "In the first article of this series, we created a RestAPI for our application using Postgres, Rust, and Rocket. For the second half, we’ll be using React to create the front end.",
      "url": "https://medium.com/@ccrsh/introducing-prrrstack-pt-2-24704b5763b2",
      "date_published": "2018-07-09T12:35:32.505+00:00",
      "author": {
        "name": "Crash Springfield",
        "url": "https://medium.com/@ccrsh"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "55adde79-edfa-433f-8c4f-40f2baee7cd9",
      "title": "warp",
      "content_text": "Over the past several months, I’ve been working a web framework in Rust. I wanted to make use of the new hyper 0.12 changes, so the framework is just as fast, is asynchronous, and benefits from all the improvements found powering Linkerd. More importantly, I wanted there to be a reason for making a new framework; it couldn’t just be yet another framework with the only difference being I’ve written it. Instead, the way this framework is used is quite different than many that exist. In doing so, it expresses a strong opinion, which might not match your previous experiences, but I believe it manages to do something really special.\n\nI’m super excited to reveal warp, a joint project with @carllerche.",
      "url": "http://seanmonstar.com/post/176530511587/warp",
      "date_published": "2018-08-01T00:00:00+00:00",
      "author": {
        "name": "Sean McArthur",
        "url": "http://seanmonstar.com/"
      },
      "tags": [
        "Web and Network Services",
        "Crates"
      ]
    },
    {
      "id": "6204efce-b9b3-4225-ae6b-5fc74f441d5f",
      "title": "Is WebAssembly the return of Java Applets & Flash?",
      "content_text": "For this post, I’m going to make three comparisons: to Flash, to Java Applets, and occasionally to PNaCL. Secondly, this post is going to focus on the web use-case for WebAssembly, even though the previous post was about non-web uses. We’ll make that comparison in the next post. Finally, this post is kind of like eating tapas, there’s a bunch of little sections.",
      "url": "https://words.steveklabnik.com/is-webassembly-the-return-of-java-applets-flash",
      "date_published": "2018-07-26T00:03:00+00:00",
      "author": {
        "name": "Steve Klabnik",
        "url": "https://words.steveklabnik.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "b3d696eb-a5d0-4118-a7b0-328623d35555",
      "title": "A static web app in Rust",
      "content_text": "A three day tour of Yew and WASM with Rust",
      "url": "https://bluejekyll.github.io/blog/rust/2018/07/22/static-web-app-rust.html",
      "date_published": "2018-07-22T07:00:00+00:00",
      "author": {
        "name": "Benjamin Fry",
        "url": "https://bluejekyll.github.io/blog/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "7f8cf89b-0cca-43c6-a660-3780bd2cdf72",
      "title": "Writing a front-end WebAssembly framework in Rust: lessons learned",
      "content_text": "Over the past few months, I’ve been writing Smithy, a very work-in-progress front-end WebAssembly framework written in Rust.\n\nMy goal for Smithy is to enable you to use idiomatic Rust to write front-end code. This has costs: for example worrying about lifetimes and using Rc<RefCell<State>> to share state. But this also has the potential to give you the safety guarantees that the Rust compiler provides when writing browser code!",
      "url": "https://medium.com/@robert.balicki_2494/writing-a-front-end-webassembly-framework-in-rust-lessons-learned-7cc48ed27d96",
      "date_published": "2018-07-30T12:46:05.428+00:00",
      "author": {
        "name": "Robert Balicki",
        "url": "https://medium.com/@robert.balicki_2494"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "a928dd6a-2db7-4366-bd96-74134b4094b8",
      "title": "How much of npm can you break?",
      "content_text": "The idea was simple, choose a package and recursively traverse npm to find all of the packages that depend upon it, after all the npm website offers a ‘Dependents’ tab on a package’s page. I had not anticipated the issues that made this an interesting technical problem.",
      "url": "https://mrandri19.github.io/2018/06/24/how-much-of-npm-will-you-break.html",
      "date_published": "2018-06-24T00:00:00+00:00",
      "author": {
        "name": "Andrea Cognolato",
        "url": "https://mrandri19.github.io/blog"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "95c003ee-6a87-45cb-abd3-491bd965d65c",
      "title": "Announcing the js-sys crate!",
      "content_text": "The js-sys crate contains raw #[wasm_bindgen] bindings to all the global APIs guaranteed to exist in every JavaScript environment by the ECMAScript standard. It does not contain bindings to any Web- or Node-specific APIs. With the js-sys crate, we can work with Objects, Arrays, Functions, Maps, Sets, etc… without writing the #[wasm_bindgen] imports by hand.",
      "url": "https://rustwasm.github.io/2018/07/26/announcing-the-js-sys-crate.html",
      "date_published": "2018-07-26T00:00:00+00:00",
      "author": {
        "name": "rustwasm",
        "url": "https://rustwasm.github.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "a95c25cb-0553-42ee-a81a-4a9cedce53e8",
      "title": "Rust + actix-web power Atlas Weekend music festival",
      "content_text": "We've just finished music festival Atlas Weekend which took place in Kyiv, Ukraine. This year there were for about 450,000 visitors during 6 days. I'm glad to announce that Rust and actix-web are used as a backend for main technical purposes of festival.",
      "url": "https://www.reddit.com/r/rust/comments/8xdsx5/rust_actixweb_in_the_on_of_the_biggest_music/",
      "date_published": "2018-07-10T03:16:52+10:00",
      "author": {
        "name": "/u/maxfrai",
        "url": "https://www.reddit.com/user/maxfrai"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "861a1228-9bbd-4d34-b08d-40b191f19abd",
      "title": "The Return of: Can Rust speed up your Azure Functions?",
      "content_text": "A couple of weeks back I started using WASM on Azure’s FaaS (serverless/Functions as a Services) and unexpectedly the Rust version of my simple Monte Carlo estimation was considerably slower than its JavaScript counterpart. Clearly this needs more exploring! This time around the challenges will be harder and more practical. Let’s see how WASM and JavaScript perform.",
      "url": "https://blog.x5ff.xyz/blog/azure-functions-wasm-rust-2/",
      "date_published": "2018-06-25T00:00:00+00:00",
      "author": {
        "name": "Claus",
        "url": "https://blog.x5ff.xyz/blog"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "863992ef-fc2b-4235-a8bd-206d55fd416f",
      "title": "actix – a basic TCP client",
      "content_text": "In our last post about actix we introduced you to the Rust programming language and the actix actor framework. This week we will build a basic TCP client with actix.",
      "url": "https://simplabs.com/blog/2018/06/27/actix-tcp-client.html",
      "date_published": "2018-06-27T00:00:00+00:00",
      "author": {
        "name": "Tobias Bieniek",
        "url": "https://simplabs.com/blog/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "a16772c9-e5d4-4e73-8bec-934d8ae183c5",
      "title": "A web application completely in Rust",
      "content_text": "My latest software architectural experiment is to write a complete real-world web application in Rust with as less as boilerplate as possible. Within this post I want to share my findings with you to answer the question on how much web Rust actually is.",
      "url": "https://medium.com/@saschagrunert/a-web-application-completely-in-rust-6f6bdb6c4471",
      "date_published": "2018-07-07T19:58:43.445+00:00",
      "author": {
        "name": "Sascha Grunert",
        "url": "https://medium.com/@saschagrunert"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "7d6ed3b9-1295-4331-879f-514cbff7e5ba",
      "title": "Our Vision for wasm-bindgen",
      "content_text": "The last blog post laid out the Rust and WebAssembly domain working group’s overall vision for Rust and WebAssembly. In this blog post, we will dive into the details of wasm-bindgen, the future we envision for it, and how you can help us build that future.",
      "url": "https://rustwasm.github.io/2018/07/02/vision-for-wasm-bindgen.html",
      "date_published": "2018-07-02T00:00:00+00:00",
      "author": {
        "name": "rustwasm",
        "url": "https://rustwasm.github.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "c700cc05-51d7-4599-b545-37f4db96f347",
      "title": "Fullstack React: Rust, React and WebAssembly",
      "content_text": "A tutorial on how to compile Rust to WebAssembly and integrate it into a React application",
      "url": "https://www.fullstackreact.com/articles/rust-react-and-web-assembly/",
      "date_published": "2018-07-03T00:00:00+00:00",
      "author": {
        "name": "Anders Pitman",
        "url": "http://anderspitman.net/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "fc0e0a2b-6cec-420d-803c-2ac8770fc9e8",
      "title": "Introducing PrrrStack",
      "content_text": "This is the first part in a two-part introductory series to PRRR Stack (Postgres, Rust, Rocket, React) application.",
      "url": "https://medium.com/@ccrsh/introducing-prrrstack-d617ff518ba6",
      "date_published": "2018-07-02T13:09:58.154+00:00",
      "author": {
        "name": "Crash Springfield",
        "url": "https://medium.com/@ccrsh"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "9497ed78-6b59-4dd0-b1f8-725ca3c628d2",
      "title": "Programming Servo: an HTTP cache",
      "content_text": "In our previous post, we saw how combining channels with an event-loop could be a useful technique to ‘drive’ the concurrent logic of your system, and it was hinted at that shared mutable state might be more complicated. A good example of such ‘shared mutable state’ in Servo is the HTTP cache.",
      "url": "https://medium.com/programming-servo/programming-servo-an-http-cache-edb52a7f267f",
      "date_published": "2018-06-29T04:33:13.453+00:00",
      "author": {
        "name": "Gregory Terzian",
        "url": "https://medium.com/@polyglot_factotum"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "f8a137b7-ce7d-4553-bcec-6170350dc1f2",
      "title": "Rust with Rocket + Elm running on Heroku",
      "content_text": "I had this goal of making a web app that was very fast, stable and easy to deploy. This is what I was hoping to accomplish: strongly typed server-side and client-side languages (Rust & Elm respectively), push-button deployments to the cloud with free hosting initially, and sub-second response times for API calls and page loads. With this setup, I think I'm well on my way to accomplishing each of these.",
      "url": "http://ethanfrei.com/posts/rust-with-rocket-elm-running-on-heroku.html",
      "date_published": "2018-06-24T00:00:00+00:00",
      "author": {
        "name": "Ethan Frei",
        "url": "http://ethanfrei.com/"
      },
      "tags": [
        "Web and Network Services",
        "DevOps and Deployment"
      ]
    },
    {
      "id": "faf1a345-9eaf-4d00-a7f7-9fa3afaa51ac",
      "title": "Better HTTP Upgrades with hyper",
      "content_text": "Better HTTP Upgrades with hyper It’s been possible to handle HTTP Upgrades (like Websockets) in hyper if you made use of the low-level APIs in the server and client, but it wasn’t especially nice to...",
      "url": "http://seanmonstar.com/post/175280388657/better-http-upgrades-with-hyper",
      "date_published": "2018-06-26T00:00:00+00:00",
      "author": {
        "name": "Sean McArthur",
        "url": "http://seanmonstar.com/"
      },
      "tags": [
        "Web and Network Services",
        "Crates"
      ]
    },
    {
      "id": "645c96b0-5f66-4c4d-a8ee-d145298bc63d",
      "title": "Project Ice Puzzle",
      "content_text": "This game was coded in Rust and is playable in web browsers by means of WebAssembly, WebGL and Howler.js. The software I developed is partly open source in the form of Gate, which is the Rust library that powers this game and can power other similar games. Special thanks to the tools I used to create assets: Gimp, FL Studio and BFXR.",
      "url": "http://www.matthewmichelotti.com/games/project_ice_puzzle/",
      "date_published": "2018-06-25T00:00:00+00:00",
      "author": {
        "name": "Matthew Michelotti",
        "url": "http://www.matthewmichelotti.com/"
      },
      "tags": [
        "Web and Network Services",
        "Games and Graphics"
      ]
    },
    {
      "id": "33738eab-7a95-4e28-b819-f22f8362100e",
      "title": "Our Vision for Rust and WebAssembly",
      "content_text": "Rust and WebAssembly can combine in many delightful ways. To consolidate our efforts and have the largest, most-positive impact we can, the Rust and WebAssembly domain working group is focusing on one vision:\n\nSurgically inserting Rust compiled to WebAssembly should be the best choice for speeding up the most performance-sensitive JavaScript code paths. Do not throw away your existing code base, because Rust plays well with others. Regardless of whether you are a Rust or Web developer, your natural workflow shouldn’t change because Rust compiled to wasm integrates seamlessly into your preferred tools.\n\nThis blog post will expand on these aspirations and describe where we stand in relation to them right now. In a series of follow up posts, we will talk about the next steps for each major component of the Rust and WebAssembly ecosystem.",
      "url": "https://rustwasm.github.io/2018/06/25/vision-for-rust-and-wasm.html",
      "date_published": "2018-06-25T00:00:00+00:00",
      "author": {
        "name": "rustwasm",
        "url": "https://rustwasm.github.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "87c1e68b-e1e6-44d5-be4b-212eb2bdc88f",
      "title": "Streaming gRPC with Rust",
      "content_text": "Lately I’ve been working on a side project that involves aggregating the indexes of media libraries and allowing one library to “lend” a file to another. For example, I might use this system if I want my home tower to “lend” a file to my laptop before I get on a plane. I’ll be committing my work-in-progress on this project to github shortly (just want to get an MVP working first and do some refactoring), but I thought I would take a step back for a moment and share my thoughts on one aspect of this project: gRPC. In particular: gRPC streaming.",
      "url": "https://medium.com/@KevinHoffman/streaming-grpc-with-rust-d978fece5ef6",
      "date_published": "2018-06-20T17:43:39.699+00:00",
      "author": {
        "name": "Kevin Hoffman",
        "url": "https://medium.com/@KevinHoffman"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "4ebce195-067c-45fa-be45-7c589426953b",
      "title": "Writing a Web API Client in Rust (Part 3)",
      "content_text": "The 3rd of a multi-part series where we build a small REST client for the Marvel Comics Web API using Rust. This time we focus on how to use the hyper and futures crates to make HTTP requests to a Web API, then use serde to parse JSON data from the response.",
      "url": "https://theomn.com/rust-web-api-client-part-03/",
      "date_published": "2018-06-17T00:00:00+00:00",
      "author": {
        "name": "Owen Nelson",
        "url": "https://theomn.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "36eccf86-2b85-4ffc-b7e7-7af422cb10ac",
      "title": "Conspiracies, Dissemination, and REST APIs",
      "content_text": "Welcome to the third post in a series where I share my experience learning Rust. I’m building out a conspiracy theories API to help me get more familiar with Rust and have a little fun. Since I am new to Rust, I welcome all feedback, especially from developers who have been using Rust for quite some time. Leave a comment below or send your feedback via Twitter. Now it’s time to draw the blackout curtains, put on your foil-lined hat on and start serving up conspiracies from a REST API.",
      "url": "https://medium.com/@rippinrobr_66849/3-conspiracies-dissemination-and-rest-apis-41858f8d9850",
      "date_published": "2018-06-14T12:28:03.863+00:00",
      "author": {
        "name": "Rob Rowe",
        "url": "https://medium.com/@rippinrobr_66849"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "a9263a5d-5853-4f5b-8556-28d18dda0f7d",
      "title": "actix – an actor framework for the Rust programming language",
      "content_text": "The “actor model” is the main primitive that powers the Erlang programming language and its descendant, Elixir. It describes a programming model that simplifies the development of concurrent and multi-threaded applications or even applications that run distributed on multiple machines.\n\nThe complexity of actors is relatively low, and that is because the complexity is usually hidden in the actor frameworks that are used to run these types of primitives in the end. One example of such an actor framework is actix, which we will have a closer look at now.",
      "url": "https://simplabs.com/blog/2018/06/11/actix.html",
      "date_published": "2018-06-11T00:00:00+00:00",
      "author": {
        "name": "Tobias Bieniek",
        "url": "https://simplabs.com/blog/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "70c7595e-f384-40d3-a8c9-9f00466fe5d5",
      "title": "Actix::From(Rocket)",
      "content_text": "I was inspired by Nick’s post to migrate my code from Rocket to Actix. I have also been nagged by recent struggles with the nightly compiler and its compatibility with all the other crates that I use and other the platforms that I use; my code runs on 32⁄64 bit arm and 32⁄64 bit x86. When I started using Rocket around a year ago, the nightly compiler was just as stable as the stable compiler, but things have changed as rust is a growing eco system.\n\nFor me, once the differences below were addressed, porting the code was relatively straightforward. The vast majority of my code remained the same.",
      "url": "https://noyez.gitlab.io/post/2018-06-11-rocket-to-actix/",
      "date_published": "2018-06-11T00:00:00+00:00",
      "author": {
        "name": "noyez",
        "url": "https://noyez.gitlab.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "86c89dda-a4f0-45bd-a0d0-616b8d687957",
      "title": "Writing a Simple Github Webhook Responder With actix-web",
      "content_text": "Creating a simple web service for automating Travis builds across repositories using actix-web and Github webhooks.",
      "url": "http://danielwelch.github.io/rust-web-service.html",
      "date_published": "2018-05-31T11:05:00-04:00",
      "author": {
        "name": "Daniel Welch",
        "url": "http://danielwelch.github.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "9bf3f488-ace2-43b6-9f6b-3071241f7ed2",
      "title": "hyper v0.12",
      "content_text": "Today sees the release of hyper v0.12.0, a fast and correct HTTP library for the Rust language.\n\nThis release adds support for several new features, while taking the opportunity to fix some annoyances, and improve the extreme speeds!",
      "url": "http://seanmonstar.com/post/174480374517/hyper-v012",
      "date_published": "2018-06-01T00:00:00+00:00",
      "author": {
        "name": "Sean McArthur",
        "url": "http://seanmonstar.com/"
      },
      "tags": [
        "Web and Network Services",
        "Crates"
      ]
    },
    {
      "id": "d7340b81-5e94-4123-b830-c5cbbfa154d2",
      "title": "HTTP Crate with URL Support & a Simple HTTP Client",
      "content_text": "While the http crate generally has a great API I have been unsatisfied how it handles URLs. To create a HTTP request a full URL is needed with a scheme (http/https), authority (example.org) and a path (/search?q=rust) but http does enforce this and allows you to only state the path. This means both clients and servers are either unable to determine protocol and and authority information or have to do this manually.",
      "url": "https://pyfisch.org/blog/http-with-url/",
      "date_published": "2018-06-01T00:00:00+00:00",
      "author": {
        "name": "Pyfisch",
        "url": "https://pyfisch.org/blog/"
      },
      "tags": [
        "Web and Network Services",
        "Crates"
      ]
    },
    {
      "id": "342c3a2c-88a7-4e26-a6ea-97c3257daf2d",
      "title": "Mix Rust Code (WebAssembly) with Vue Component",
      "content_text": "In this tutorials, we will try mixing Rust code with Javascript by compiling Rust code as .wasm then use it in Vue Component.",
      "url": "https://busy.org/@drsensor/mix-rust-code-webassembly-with-vue-component-basic",
      "date_published": "2018-05-24T19:01:00+00:00",
      "author": {
        "name": "drsensor",
        "url": "https://busy.org/@drsensor"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "e67229c7-9d09-49e8-9558-ca8e89a53d4f",
      "title": "Snowhash in Rust with WASM",
      "content_text": "A little while ago I came across this Snowflake generator. It’s a project by Raph Levein that takes a hash string and uses it to procedurally generate a unique snowflake. He explains that the original motivation was as a cryptographically secure visual hash, so that people would reliably be able to tell by visual inspection whether two hashes were identical. I thought that was a pretty cool idea.",
      "url": "https://joshleeb.com/posts/rust-wasm-snowhash/",
      "date_published": "2018-05-22T00:00:00+00:00",
      "author": {
        "name": "Josh Leeb-du Toit",
        "url": "https://joshleeb.com/posts"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "4b44fb81-4b16-4681-a09a-a93cb82ccbc0",
      "title": "Wicked Fast Web Servers in Rust",
      "content_text": "I write code for the web every day, and as such, I naturally wanted to find a web server that I could write some beautiful code in Rust with. There are a few options out there, Actix, Rocket, but none of them are quite as simple and succinct as KoaJS for node. As such, I wanted to write something as simple as Koa and as performant as a Rust framework, and I did. With that, I give you Thruster, an elegant, performant, web server written in Rust.",
      "url": "https://medium.com/@MertzAlertz/wicked-fast-web-servers-in-rust-4947688426bc",
      "date_published": "2018-05-22T23:26:19.855+00:00",
      "author": {
        "name": "Pete Mertz",
        "url": "https://medium.com/@MertzAlertz"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "502f20f5-50e1-4741-a852-2c65ef867bba",
      "title": "Writing a Web API Client in Rust (Part 2)",
      "content_text": "The 2nd of a multi-part series where we build a small REST client for the Marvel Comics Web API using Rust. This time we focus on how to use the hyper and futures crates to make HTTP requests to a Web API, then use serde to parse JSON data from the response.",
      "url": "https://theomn.com/rust-web-api-client-part-02/",
      "date_published": "2018-05-19T00:00:00+00:00",
      "author": {
        "name": "Owen Nelson",
        "url": "https://theomn.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "35d0dec8-e4fb-4be0-b87c-ed5dd39056b8",
      "title": "Migrating to Actix Web from Rocket for Stability",
      "content_text": "I previously wrote an article back in November 2017: Replacing Elasticsearch with Rust and SQLite. In it, I needed to create a few HTTP endpoints that ingested JSON, perform a database lookup, and return JSON. Very simple. No query / path parameters, authentication, authorization, H2, or TLS. I didn’t understand how stability was such an important feature. I was familiar with needing new versions of the nightly compiler to stay current with clippy and rustfmt, but it was a blindspot when it came to dependencies.",
      "url": "https://nbsoftsolutions.com/blog/migrating-to-actix-web-from-rocket-for-stability",
      "date_published": "2018-05-21T00:00:00+00:00",
      "author": {
        "name": "Nick Babcock",
        "url": "https://nbsoftsolutions.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "f993c9a2-3b8e-455b-ad6e-354051f38863",
      "title": "Creating a Rusty Rocket fuelled with Diesel",
      "content_text": "Here I go with my first post that fully focuses on Rust. After spending a few months doing a bit here and there I decided to just dive right in as I was going through the Rust book at too slow a pace to keep myself interested. So, in this post I decided to write about setting up a simple REST API which is something that I have done in Java plenty of times but with Rust it is a different story.",
      "url": "https://lankydanblog.com/2018/05/20/creating-a-rusty-rocket-fuelled-with-diesel/",
      "date_published": "2018-05-20T17:53:11+00:00",
      "author": {
        "name": "Dan Newton",
        "url": "https://lankydanblog.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "58fff202-4974-4db4-93ef-ad074e609a70",
      "title": "A Small Rust API with Actix",
      "content_text": "I had the need for a very small API for this website. So small, in fact, that only one endpoint was required. I've been doing a lot of development in Rust lately, so naturally Rust seemed like a good candidate to build this API in. I also wanted to try out a newer Rust web framework called Actix web. It claims to be a \"small, pragmatic, and extremely fast rust web framework\", which sounded perfect for what I needed.",
      "url": "https://stevezeidner.com/blog/rust-actix-api/",
      "date_published": "2018-05-10T00:00:00+00:00",
      "author": {
        "name": "Steve Zeidner",
        "url": "https://stevezeidner.com/blog"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "7f406b9a-226a-4498-b708-59b14401a9af",
      "title": "Making microservices in Rust",
      "content_text": "This is a small idea that I have been wanting to put together for quite some time now and finally have managed to get the time and most importantly experience in Rust to finally try something a little more than just small projects. One area that I think Rust is really making a decent headway in in the web domain, which I am assuming is likely due to its origin from Firefox. So I wanted to see if I could put together a really basic CRUD micro-service doing the ever so original TODO functionality.",
      "url": "https://maccoda.github.io/rust-web-frameworks/",
      "date_published": "2018-05-01T00:00:00+00:00",
      "author": {
        "name": "Dylan Maccora",
        "url": "https://maccoda.github.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "2cf6bb87-842b-4d53-906d-6036d7e3eaf5",
      "title": "Can Rust speed up your Azure Functions?",
      "content_text": "Using Rust on Microsoft Azure Functions with web assembly",
      "url": "https://blog.x5ff.xyz/blog/azure-functions-wasm-rust/",
      "date_published": "2018-04-30T00:00:00+00:00",
      "author": {
        "name": "Claus",
        "url": "https://blog.x5ff.xyz/blog"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "91fb984c-4084-4b2c-84e5-ebda94169657",
      "title": "WASM+Rust Tutorial",
      "content_text": "A project used for a meetup talk about getting started with rust & wasm",
      "url": "https://freemasen.github.io/wasm_tutorial/",
      "date_published": "2018-05-03T07:30:00+10:00",
      "author": {
        "name": "Robert Masen",
        "url": "https://github.com/FreeMasen"
      },
      "tags": [
        "Getting Started",
        "Web and Network Services"
      ]
    },
    {
      "id": "64356c91-6a6c-40d2-acd9-cbde11eaace4",
      "title": "Using LLVM from Rust, to generate WebAssembly",
      "content_text": "Hopefully this post helps jumpstart those who want to use LLVM from Rust. I also include how one could use this to generate WebAssembly, but the first part of this post is target platform agnostic.",
      "url": "https://medium.com/@jayphelps/using-llvm-from-rust-to-generate-webassembly-93e8c193fdb4",
      "date_published": "2018-04-29T00:49:36.802+00:00",
      "author": {
        "name": "Jay Phelps",
        "url": "https://medium.com/@jayphelps"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "2925c583-7c70-400d-8f50-f8c06b3dc0fb",
      "title": "How does dynamic dispatch work in WebAssembly?",
      "content_text": "C, C++, and Rust all have some capability for dynamic dispatch: function pointers, virtual methods, and trait objects. On native targets like x86, all these forms compile down into a jump to a dynamic address. What do these forms compile down into when targeting WebAssembly?",
      "url": "http://fitzgeraldnick.com/2018/04/26/how-does-dynamic-dispatch-work-in-wasm.html",
      "date_published": "2018-04-26T00:00:00-07:00",
      "author": {
        "name": "Nick Fitzgerald",
        "url": "http://fitzgeraldnick.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "6e75a3dc-d157-4f13-878c-5111cd6b03a2",
      "title": "Small WebAssembly Binaries with Rust + Emscripten",
      "content_text": "The Rust language is one of the earliest adopters of WebAssembly, and it has more than one way to compile to it:",
      "url": "https://kripken.github.io/blog/binaryen/2018/04/18/rust-emscripten.html",
      "date_published": "2018-04-18T17:52:56+00:00",
      "author": {
        "name": "Alon Zakai",
        "url": "https://kripken.github.io/blog/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "43c290f5-4178-431d-9874-5e24cde01299",
      "title": "Hello wasm-pack!",
      "content_text": "wasm-pack is a tool for assembling and packaging Rust crates that target WebAssembly. These packages can be published to the npm Registry and used alongside other packages. This means you can use them side-by-side with JS and other packages, and in many kind of applications, be it a Node.js server side app, a client-side application bundled by Webpack, or any other sort of application that uses npm dependencies. You can find wasm-pack on crates.io and GitHub.",
      "url": "https://hacks.mozilla.org/2018/04/hello-wasm-pack/",
      "date_published": "2018-04-18T14:54:13+00:00",
      "author": {
        "name": "Ashley Williams",
        "url": "https://hacks.mozilla.org/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "69dd67c0-ef9b-4a6c-9a60-2de96c36113a",
      "title": "How To Optimize JavaScript Code with Rust Part 1",
      "content_text": "In the first part of this Rust series, we’re going to walk through setting up Rust, writing Rust code, exporting the code, and using the code in our Node environment. By the end of this article, you’ll see how painless marrying Rust with JavaScript is.",
      "url": "https://codeburst.io/how-to-optimize-javascript-code-with-rust-part-1-20f00885608f",
      "date_published": "2018-04-16T12:04:37.323+00:00",
      "author": {
        "name": "Raji Ayinla",
        "url": "https://codeburst.io/@rajiayinla858"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "d65aaebc-e17b-421b-86e8-1cc9c63a0408",
      "title": "Writing An NES Emulator with Rust and WebAssembly",
      "content_text": "I wrote the NES emulator with Rust and WebAssembly to learn Rust. It’s not perfect and have some audio bugs, but it’s good enough to play Super Mario bros.",
      "url": "https://medium.com/@bokuweb17/writing-an-nes-emulator-with-rust-and-webassembly-d64de101c49d",
      "date_published": "2018-04-11T14:30:56.719+00:00",
      "author": {
        "name": "bokuweb",
        "url": "https://medium.com/@bokuweb17"
      },
      "tags": [
        "Games and Graphics",
        "Web and Network Services"
      ]
    },
    {
      "id": "fc25e5f3-66d9-429d-8ca8-c1882a5083d6",
      "title": "JavaScript Interop with WebAssembly",
      "content_text": "In my last post I provided an introduction to WebAssembly — what is it, why do we care, and what does it look like? In this post, I’d like to explore a little bit of the inner workings of how we can communicate between Rust (wasm) and JavaScript. As I mentioned in the last post, WebAssembly is neither JavaScript nor some strongly-typed dialect. It is a standalone, compiled, portable binary. How you send data into and get data out of that binary involves some subtle nuances about how WebAssembly works.",
      "url": "https://medium.com/@KevinHoffman/javascript-interop-with-webassembly-2c69a3db19e9",
      "date_published": "2018-04-12T14:14:05.684+00:00",
      "author": {
        "name": "Kevin Hoffman",
        "url": "https://medium.com/@KevinHoffman"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "a89cb196-c162-4c49-b1d5-642547265f39",
      "title": "The case for deadlines",
      "content_text": "Rust aims to be the foundation of fast and robust software. A thorn in that side is the choice of timeout-centric APIs for I/O and multithreading. I posit this was a bad choice and it needs to be remedied as soon as possible before more APIs proliferate this (possibly accidental) design decision.",
      "url": "https://gist.github.com/alkis/9510a840f1965185ab0a02cb59761dd8",
      "date_published": "2018-04-10T06:28:29+00:00",
      "author": {
        "name": "Alkis Evlogimenos",
        "url": "https://gist.github.com/alkis"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "61846190-2e41-4590-95c0-172d767aacc1",
      "title": "Getting Yew to work with Rust on ‘Bash on Ubuntu on Windows’",
      "content_text": "Yew is a new web framework written in Rust that takes concepts from React JS and Elm. It takes the two web libraries I love and combines them with the new language I love — Rust. I wrote this article because I haven’t found a lot of documentation online on how to get the Yew examples running, and I’m sure there will be people that will run into the same problems I did. I wrote this in hopes that it helps someone out there.",
      "url": "https://medium.com/@raymondsiu/getting-yew-to-work-with-rust-on-bash-on-ubuntu-on-windows-in-windows-10-790a006e6805",
      "date_published": "2018-04-08T23:14:01.202+00:00",
      "author": {
        "name": "Raymond Siu",
        "url": "https://medium.com/@raymondsiu"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "9c6d2c06-5031-414d-b743-850c4ddebdc3",
      "title": "Cloudflare Argo Tunnel with Rust+Raspberry Pi",
      "content_text": "Serving content from a Rust web server running on a Raspberry Pi from your home to the world, with a Cloudflare Argo Tunnels.",
      "url": "https://blog.cloudflare.com/cloudflare-argo-tunnel-with-rust-and-raspberry-pi/",
      "date_published": "2018-04-06T14:00:00+00:00",
      "author": {
        "name": "Steven Pack",
        "url": "https://blog.cloudflare.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "8c1bc2c9-1eeb-4a19-ac6b-d11e2a7c6f63",
      "title": "Welcome to this week in Rust and WebAssembly!",
      "content_text": "Hello and welcome to the first issue of This Week in Rust and WebAssembly! Rust is a systems language pursuing the trifecta: safety, concurrency, and speed. WebAssembly is designed as a portable target for compilation of high-level languages like C, C++, and Rust, enabling deployment on the web for client and server applications. This is a weekly summary of its progress and community.",
      "url": "https://rustwasm.github.io/2018/04/05/welcome-to-this-week-in-rust.html",
      "date_published": "2018-04-05T00:00:00+00:00",
      "author": {
        "name": "Sendil Kumar N",
        "url": "https://rustwasm.github.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "0ea6b48d-d3a3-4969-a053-37d6e697de85",
      "title": "Announcing Tower — A library for writing robust network services with Rust",
      "content_text": "Tower is a library for writing robust network services with Rust. It is being built in service of the Conduit proxy, which is using the Tokio ecosystem to build the world’s smallest, fastest, most secure network proxy. Tower will also provide a batteries included experience for implementing HTTP and gRPC services.",
      "url": "https://medium.com/@carllerche/announcing-tower-a-library-for-writing-robust-network-services-with-rust-67273f052c40",
      "date_published": "2018-04-06T19:40:38.816+00:00",
      "author": {
        "name": "Carl Lerche",
        "url": "https://medium.com/@carllerche"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "fc550900-512d-4f82-b40a-25a8ef86d513",
      "title": "Using Rust Modules in JavaScript/Web Development (Part 3/ 3) [NodeJS]",
      "content_text": "Please read the Part 1 of the series here :",
      "url": "https://medium.com/@atulanand94/using-rust-modules-for-javascript-web-development-part-3-3-nodejs-7c71e4ae23fe",
      "date_published": "2018-04-03T14:29:28.389+00:00",
      "author": {
        "name": "Atul",
        "url": "https://medium.com/@atulanand94"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "14922be0-52bc-4711-9fc1-aeec98e39c1d",
      "title": "Making a 100% Statically-Linked, Single-File Web App with React and Rust",
      "content_text": "This tutorial will cover the basics of creating a minimal React app which can be deployed as a statically-linked Rust binary. What this accomplishes is having all of your code, including HTML, JavaScript, CSS, and Rust, packaged into a single file that will run on pretty much any 64-bit Linux system, regardless of the kernel version or installed libraries.",
      "url": "https://anderspitman.net/2018/04/04/static-react-rust-webapp/",
      "date_published": "2018-04-04T21:21:00+00:00",
      "author": {
        "name": "Anders Pitman",
        "url": "https://anderspitman.net/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "37aa0f60-d86c-446d-848c-52b45777ae2c",
      "title": "Using Rust Modules in JavaScript/Web Development (Part 2 / 3) [Webpack]",
      "content_text": "Part 1 of the post was primarily concerned with integrating rust modules with JavaScript with the help of wasm. But that involved a lot of manual procedures. Another more streamlined way is using webpack.",
      "url": "https://medium.com/@atulanand94/using-rust-modules-for-javascript-web-development-part-2-7a86eaec5ee9",
      "date_published": "2018-04-03T10:15:39.331+00:00",
      "author": {
        "name": "Atul",
        "url": "https://medium.com/@atulanand94"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "98f65a4a-8501-45e4-bda8-48d5d01306ba",
      "title": "Improving GStreamer performance with tokio",
      "content_text": "For one of our customers at Centricular we were working on a quite interesting project. Their use-case was basically to receive an as-high-as-possible number of audio RTP streams over UDP, transcode them, and then send them out via UDP again. Due to how GStreamer usually works, they were running into some performance issues.\n\nThis blog post will describe the first set of improvements that were implemented for this use-case, together with a minimal benchmark and the results. My colleague Mathieu will follow up with one or two other blog posts with the other improvements and a more full-featured benchmark.\n\nThe short version is that CPU usage decreased by about 65-75%, i.e. allowing 3-4x more streams with the same CPU usage. Also parallelization works better and usage of different CPU cores is more controllable, allowing for better scalability. And a fixed, but configurable number of threads is used, which is independent of the number of streams.",
      "url": "https://coaxion.net/blog/2018/04/improving-gstreamer-performance-on-a-high-number-of-network-streams-by-sharing-threads-between-elements-with-rusts-tokio-crate/",
      "date_published": "2018-04-05T15:21:06+00:00",
      "author": {
        "name": "Sebastian Dröge",
        "url": "https://coaxion.net/blog/"
      },
      "tags": [
        "Web and Network Services",
        "Performance"
      ]
    },
    {
      "id": "0cb16bc7-daff-4747-81e5-d4455d33fc43",
      "title": "HTTP upgrades with hyper",
      "content_text": "The newest release of hyper includes some lower-level connection APIs for both the server and client. Notably, this allows using hyper send and receive HTTP upgrade requests. The most popular of these is Websockets.",
      "url": "http://seanmonstar.com/post/172531530657/http-upgrades-with-hyper",
      "date_published": "2018-04-02T14:34:53-07:00",
      "author": {
        "name": "Sean McArthur",
        "url": "http://seanmonstar.com/"
      },
      "tags": [
        "Web and Network Services",
        "Crates"
      ]
    },
    {
      "id": "229aab36-08f5-4288-a9df-c804ad6c2b56",
      "title": "Using Rust Modules in JavaScript/Web Development (Part 1 / 3) [Plain JS]",
      "content_text": "One of the promising reasons I started learning rust is that it can be used to build modules for web using web-assembly. This blog post will cover how you can build a rust module and use it as regular package in the JavaScript environment. Remember rust is not meant to replace JS. I see it as complementary add-on to the places where JS is comparatively slower (heavy computations).",
      "url": "https://medium.com/@atulanand94/using-rust-modules-for-javascript-web-development-part-i-e6dec27df7b2",
      "date_published": "2018-04-03T06:22:23.753+00:00",
      "author": {
        "name": "Atul",
        "url": "https://medium.com/@atulanand94"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "d110dc0e-7a78-42c3-8326-5b5ec58f8875",
      "title": "JavaScript to Rust and Back Again: A wasm-bindgen Tale",
      "content_text": "Recently we’ve seen how WebAssembly is incredibly fast to compile, speeding up JS libraries, and generating even smaller binaries. We’ve even got a high-level plan for better interoperability between the Rust and JavaScript communities, as well as other web programming languages. As alluded to in that previous post, I’d like to dive into more detail about a specific component, wasm-bindgen.",
      "url": "https://hacks.mozilla.org/2018/04/javascript-to-rust-and-back-again-a-wasm-bindgen-tale/",
      "date_published": "2018-04-04T14:58:40+00:00",
      "author": {
        "name": " Alex Crichton",
        "url": "https://hacks.mozilla.org/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "d14f3e75-4047-441e-a67b-fc0de042845a",
      "title": "Removing Connection State In mob",
      "content_text": "I started writing mob, an multi-echo server using mio, in 2015. I coded mob into a mostly working state and then left it mostly alone, only updating it to work with the latest stable mio. Recently, I started looking at the code again and had the urge to improve it. In a previous post, I talked about managing the state of connections in mob. In this post, I will walk through what I did to remove the need to track connection state. I wanted to remove the state because the implementation required an O(n) operation every tick of the mio event loop. It also added a fair amount of complexity to the code.",
      "url": "http://hermanradtke.com/2018/03/29/removing-connection-state-from-mob.html",
      "date_published": "2018-03-29T00:00:00+00:00",
      "author": {
        "name": "Herman J. Radtke III",
        "url": "http://hermanradtke.com/"
      },
      "tags": [
        "Language",
        "Web and Network Services"
      ]
    },
    {
      "id": "07825eb3-aaab-46c5-b7e4-680857d73750",
      "title": "Rust + Node.js are awesome!",
      "content_text": "Blazing fast, low requirements, computationally intensive operations on Node.js using Rust",
      "url": "https://itnext.io/rust-node-js-are-awesome-a50d63411773",
      "date_published": "2018-03-27T21:50:20.148+00:00",
      "author": {
        "name": "Benjamín Calderón",
        "url": "https://itnext.io/@benjcal"
      },
      "tags": [
        "Web and Network Services",
        "Performance"
      ]
    },
    {
      "id": "9f012379-d71a-4c45-b9db-12c4871070e7",
      "title": "Touring a Fast, Safe, and Complete(ish) Web Service in Rust",
      "content_text": "For years now, I’ve been having a crisis of faith in interpreted languages. They’re fast and fun to work in at small scale, but when you have a project that gets big, their attractive veneer quickly washes away. A big Ruby or JavaScript (just to name a few) program in production is a never ending game of whack-a-mock – you fix one problem only to find a new one somewhere else. No matter how many tests you write, or how well-disciplined your team, any new development is sure to introduce a stream of bugs that will need to be shored up over the course of months or years.\n\nCentral to the problem are the edges. People will reliably do a good job of building and testing the happy paths, but as humans we’re terrible at considering the edge conditions, and it’s those edges and corners that cause trouble over the years that a program is in service.",
      "url": "https://brandur.org/rust-web",
      "date_published": "2018-03-27T14:45:57+00:00",
      "author": {
        "name": "Brandur Leach",
        "url": "https://brandur.org"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "e32bb679-4afa-48d9-ab51-d589a590348e",
      "title": "Building a Restful CRUD API with Rust",
      "content_text": "Since my initial Node/Rust REST comparison, I’ve wanted to follow up with a comprehensive guide for getting simple CRUD operations up and running in Rust.",
      "url": "https://medium.com/sean3z/building-a-restful-crud-api-with-rust-1867308352d8",
      "date_published": "2018-03-19T04:29:33.114+00:00",
      "author": {
        "name": "Sean Wragg",
        "url": "https://medium.com/@sean3z"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "dae19f32-236c-4329-b26d-e6c47b2631d3",
      "title": "Multicasting in Rust",
      "content_text": "A brief post to help others multicast in Rust",
      "url": "https://bluejekyll.github.io/blog/rust/2018/03/18/multicasting-in-rust.html",
      "date_published": "2018-03-18T07:00:00+00:00",
      "author": {
        "name": "Benjamin Fry",
        "url": "https://bluejekyll.github.io/blog/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "44e96573-f8b3-4577-8a76-1cbc8a65ec8b",
      "title": "Building a DNS server in Rust",
      "content_text": "With the combined goal of gaining a deep understanding of DNS, of doing something interesting with Rust, and of scratching some of my own itches, I originally set out to implement my own DNS server. This document is not a truthful chronicle of that journey, but rather an idealized version of it, without all the detours I ended up taking. We'll gradually implement a full DNS server, starting from first principles.",
      "url": "https://github.com/EmilHernvall/dnsguide",
      "date_published": "2018-03-16T00:00:00+00:00",
      "author": {
        "name": "Emil Hernvall",
        "url": "https://github.com/EmilHernvall"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "39f186f6-b177-43e6-9b4c-7ffe689926e7",
      "title": "Parc3l: Combining Three.js, Rust, and WebAssembly!",
      "content_text": "WebAssembly has been interesting me lately, specifically the prospect of doing arithmetically-intensive operations with it, not unlike the fantastic physics engine Emscripten port Ammo.js. Compiling something like that is out of the scope of this little post (but should be getting easier!), and I’ve left some links at the bottom so you can clear more about WebAssembly if you’re interested.",
      "url": "https://medium.com/@cwervo/parc3l-combining-three-js-rust-and-webassembly-c1e643ef7681",
      "date_published": "2018-03-12T14:34:23.064+00:00",
      "author": {
        "name": "Andres Cuervo",
        "url": "https://medium.com/@cwervo"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "bf12d6fd-0aea-4d74-b3a7-02a538d210d3",
      "title": "Making WebAssembly better for Rust & for all languages",
      "content_text": "To be a useful as a web language, Rust needs to work well with the JavaScript ecosystem. We have some work to do to get there, and fortunately that work ...",
      "url": "https://hacks.mozilla.org/2018/03/making-webassembly-better-for-rust-for-all-languages/",
      "date_published": "2018-03-14T15:02:52+00:00",
      "author": {
        "name": "Lin Clark",
        "url": "http://code-cartoons.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "4d94c5ba-199d-44c2-9148-7a6bbff699d0",
      "title": "Crashing a Rust Hyper server with a Denial of Service attack",
      "content_text": "I’m writing a reverse proxy in Rust using Hyper and I want to measure performance a bit to know if I’m doing something terribly wrong. By doing that I discovered a Denial of Service vulnerability in Hyper when IO errors are not properly handled. Note that a workaround has been released in the meantime in Hyper 0.11.20, more background info can be found in this Hyper issue.",
      "url": "https://klausi.github.io/rustnish/2018/03/11/crashing-a-rust-hyper-server-with-a-denial-of-service-attack.html",
      "date_published": "2018-03-11T00:00:00+00:00",
      "author": {
        "name": "Klaus Purer",
        "url": "https://klausi.github.io/rustnish/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "e03aa0e5-bb05-48f0-a4a4-0796d14d1115",
      "title": "Writing a Simple IPFS Crawler",
      "content_text": "IPFS is a peer-to-peer protocol that allows you to access and publish content in a decentralized fashion. It uses hashes to refer to files. Short of someone posting hashes on a website, discoverability of content is pretty low. In this article, we’re going to write a very simple crawler for IPFS.\nIt’s challenging to have a traditional search engine in IPFS because content rarely links to each other. But there is another way than just blindly following links like a traditional crawler.",
      "url": "https://gkbrk.com/2018/03/writing-a-simple-ipfs-crawler/",
      "date_published": "2018-03-12T00:00:00+00:00",
      "author": {
        "name": "Gökberk Yaltıraklı",
        "url": "https://gkbrk.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "dd5790e1-ff4e-4f61-9a8b-05ea774a2e89",
      "title": "Writing servers with Tokio",
      "content_text": "I’ve been writing a small toy project with Tokio in my spare time’s spare time. I’ll write more about it at a later date. What I’ve found writing it, though, is that there is a specific pattern to writing servers, both UDP and TCP (and presumably others) in Tokio, and it’s not super obvious at first glance. So here it is.",
      "url": "https://blog.passcod.name/2018/mar/07/writing-servers-with-tokio",
      "date_published": "2018-03-07T09:35:30+00:00",
      "author": {
        "name": "Félix Saparelli",
        "url": "https://blog.passcod.name/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "776dd5f1-c6d0-48da-8e0a-6fcae00fb923",
      "title": "Writing a Microservice in Rust",
      "content_text": "Let me begin this article on Writing a Microservice in Rust by talking about C++. I’ve been a reasonably active member of the C++ community for quite a while now, attending and contributing talks to conferences, following the development and evangelism of the language’s more modern features and of course writing lots of it. C++ is a language that gives its users very fine-grained control over all aspects of the program they are writing, at the cost of a steep learning curve and a large body of knowledge required to write effective C++. However, C++ is also a very old language, conceived by Bjarne Stroustrup in 1985, and thus caries a lot of technical debt even into modern standards.",
      "url": "http://www.goldsborough.me/rust/web/tutorial/2018/01/20/17-01-11-writing_a_microservice_in_rust/",
      "date_published": "2018-01-20T00:00:00+00:00",
      "author": {
        "name": "Peter Goldsborough",
        "url": "http://www.goldsborough.me/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "26bc7432-d561-4e1f-8cf2-2c30b8ac63ab",
      "title": "Speed Without Wizardry",
      "content_text": "Vyacheslav Egorov, who goes by mraleph on the Web, wrote a response to my article “Oxidizing Source Maps with Rust and WebAssembly” titled “Maybe you don’t need Rust and WASM to speed up your JS”.\n\nThe “Oxidizing” article recounts my experience integrating Rust (compiled to WebAssembly) into the source-map JavaScript library. Although the JavaScript implementation was originally authored in idiomatic JavaScript style, as we profiled and implemented speed improvements, the code became hard to read and maintain. With Rust and its zero-cost abstractions, we found that there was no trade-off between performance and clean code.",
      "url": "http://fitzgeraldnick.com/2018/02/26/speed-without-wizardry.html",
      "date_published": "2018-02-26T00:00:00-08:00",
      "author": {
        "name": "Nick Fitzgerald",
        "url": "http://fitzgeraldnick.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "22d134e6-ddc6-4571-965c-4b6e72a544eb",
      "title": "Recently, for a Rusty Web",
      "content_text": "It’s been a few months since I shifted my focus full time to Rust, and in that time, we’ve gotten a lot of work done! I wanted to update you here what all that is, since it’s spread around on multiple repositories.",
      "url": "http://seanmonstar.com/post/171170905822/recently-for-a-rusty-web",
      "date_published": "2018-02-22T00:00:00+00:00",
      "author": {
        "name": "Sean McArthur",
        "url": "http://seanmonstar.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "9b97498f-3ffb-4c89-8973-c2beb5e0140e",
      "title": "Porting Rust to WebAssembly",
      "content_text": "I recently spent some effort trying to make reproto run in a browser. Here I want to outline the problems I encountered and how I worked around them. I will also provide a number of suggestions for how things might be improved for future porters.",
      "url": "https://udoprog.github.io/rust/2018-02-19/porting-rust-to-wasm.html",
      "date_published": "2018-02-19T00:00:00+00:00",
      "author": {
        "name": "John-John Tedro",
        "url": "https://udoprog.github.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "0af4c90e-74b2-438d-aaed-798c9f6e900a",
      "title": "Fanta: An opinionated framework for web development in rust",
      "content_text": "Fanta is a web framework that aims for developers to be productive and consistent across projects and teams. Its goals are to be: Opinionated, Fast, and Intuitive. Based heavily off of the work here: https://github.com/tokio-rs/tokio-minihttp",
      "url": "https://github.com/trezm/Fanta",
      "date_published": "2018-02-14T18:44:00+11:00",
      "author": {
        "name": "Peter Mertz",
        "url": "https://github.com/trezm"
      },
      "tags": [
        "Tools and Applications",
        "Web and Network Services"
      ]
    },
    {
      "id": "86b2dfcd-a01d-47e1-acb8-2ddbca20db62",
      "title": "Gameland intro, reimplemented in Rust for WebAssembly",
      "content_text": "My nice brother Johannes Ridderstedt sent me some old files a few weeks ago (in late 2017), stuff that he had preserved from an age-old computer of ours. One of these was the file named gameland.zip (not published yet, but I might put it up here some day.) I managed to get this running, and liked what I saw (you'll find the YouTube link to it further down on this page.) Around this time I was reading a bit about WebAssembly which I think will redefine and help reshape the web as we see it today. I was also looking at the Hello, Rust web page, and the \"FizzleFade effect using a Feistel network\" page in particular.",
      "url": "http://perlun.eu.org/en/programming/gameland/",
      "date_published": "2018-02-13T07:44:00+11:00",
      "author": {
        "name": "Per Lundberg",
        "url": "http://perlun.eu.org/en/"
      },
      "tags": [
        "Games and Graphics",
        "Web and Network Services"
      ]
    },
    {
      "id": "bbc46982-1321-4e4e-8d9f-344963341c21",
      "title": "Event Sourcing with Aggregates in Rust",
      "content_text": "Everyone loves event sourcing, right up until the moment they have to implement it. At that moment all the wonderful whiteboard drawings…",
      "url": "https://medium.com/@KevinHoffman/event-sourcing-with-aggregates-in-rust-4022af41cf67",
      "date_published": "2018-02-12T15:11:08.708+00:00",
      "author": {
        "name": "Kevin Hoffman",
        "url": "https://medium.com/@KevinHoffman"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "6b542e90-1f02-4368-90e4-a1931ccf1935",
      "title": "A Wee Allocator for WebAssembly",
      "content_text": "Introducing wee_alloc. wee_alloc is a work-in-progress memory allocator designed for WebAssembly. It has a tiny code size footprint, compiling down to only a kilobyte of .wasm code.",
      "url": "http://fitzgeraldnick.com/2018/02/09/wee-alloc.html",
      "date_published": "2018-02-09T00:00:00-08:00",
      "author": {
        "name": "Nick Fitzgerald",
        "url": "http://fitzgeraldnick.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "e6347974-c84a-438a-924a-52ef37f6c99a",
      "title": "I rewrote a Nintendo emulator with Rust / WebAssembly (Japanese)",
      "content_text": "概要 以前、JSで書いた(ファミコンのエミュレータを書いた - undefined)ファミコンのエミュレータをRustで書き直してみた。 また、技術的な内容はQiitaの方にも書いているので興味のある方は参照してみてください。(まだ Hello, World!までしか書けてませんが。) qiita.com もともとファミコンのエミュレータって新しい言語を習得するのにちょうどいい題材だったりするのでは、って話しからスタートしてて、よくわからないのでJSで書いてみて、ようやくRustで一通りは実装できた感じ。まだバグや未実装（音声周りやマッパー）も多いんですが、ひとまずはお腹いっぱいな感じ。 成果…",
      "url": "http://blog.bokuweb.me/entry/2018/02/08/101522",
      "date_published": "2018-02-08T10:15:22+09:00",
      "author": {
        "name": "bokuweb",
        "url": "http://blog.bokuweb.me/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "434c400b-b4ac-49c9-87fa-db2a8b5f1ba7",
      "title": "DataFusion: Big Data Platform for Rust",
      "content_text": "DataFusion is an open-source Big Data platform implemented in the Rust programming language with a similar programming style to Apache Spark.",
      "url": "https://www.datafusion.rs/",
      "date_published": "2018-02-04T16:51:47+00:00",
      "author": {
        "name": "Andy Grove",
        "url": "https://www.datafusion.rs/"
      },
      "tags": [
        "Tools and Applications",
        "Web and Network Services"
      ]
    },
    {
      "id": "5c8f0581-5b1d-485b-852c-83c0deef73d5",
      "title": "Rust and WebAssembly with Turtle",
      "content_text": "In this post, I'll walk through a few of the highlights of getting Turtle, a Rust library for creating animated drawings, to run in the browser with WebAssembly.",
      "url": "https://varblog.org/blog/2018/01/08/rust-and-webassembly-with-turtle/",
      "date_published": "2018-01-08T09:54:00-06:00",
      "author": {
        "name": "Marshall Pierce",
        "url": "https://varblog.org/"
      },
      "tags": [
        "Web and Network Services"
      ]
    }
  ]
}