{
  "version": "https://jsonfeed.org/version/1",
  "title": "Read Rust - Web and Network Services",
  "home_page_url": "https://readrust.net/",
  "feed_url": "https://readrust.net/web-and-network-services/feed.json",
  "description": "Web and Network Services posts on Read Rust",
  "author": {
    "name": "Wesley Moore",
    "url": "http://www.wezm.net/"
  },
  "items": [
    {
      "id": "14922be0-52bc-4711-9fc1-aeec98e39c1d",
      "title": "Making a 100% Statically-Linked, Single-File Web App with React and Rust",
      "content_text": "This tutorial will cover the basics of creating a minimal React app which can be deployed as a statically-linked Rust binary. What this accomplishes is having all of your code, including HTML, JavaScript, CSS, and Rust, packaged into a single file that will run on pretty much any 64-bit Linux system, regardless of the kernel version or installed libraries.",
      "url": "https://anderspitman.net/2018/04/04/static-react-rust-webapp/",
      "date_published": "2018-04-04T21:21:00+00:00",
      "author": {
        "name": "Anders Pitman",
        "url": "https://anderspitman.net/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "37aa0f60-d86c-446d-848c-52b45777ae2c",
      "title": "Using Rust Modules in JavaScript/Web Development (Part 2 / 3) [Webpack]",
      "content_text": "Part 1 of the post was primarily concerned with integrating rust modules with JavaScript with the help of wasm. But that involved a lot of manual procedures. Another more streamlined way is using webpack.",
      "url": "https://medium.com/@atulanand94/using-rust-modules-for-javascript-web-development-part-2-7a86eaec5ee9",
      "date_published": "2018-04-03T10:15:39.331+00:00",
      "author": {
        "name": "Atul",
        "url": "https://medium.com/@atulanand94"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "98f65a4a-8501-45e4-bda8-48d5d01306ba",
      "title": "Improving GStreamer performance with tokio",
      "content_text": "For one of our customers at Centricular we were working on a quite interesting project. Their use-case was basically to receive an as-high-as-possible number of audio RTP streams over UDP, transcode them, and then send them out via UDP again. Due to how GStreamer usually works, they were running into some performance issues.\n\nThis blog post will describe the first set of improvements that were implemented for this use-case, together with a minimal benchmark and the results. My colleague Mathieu will follow up with one or two other blog posts with the other improvements and a more full-featured benchmark.\n\nThe short version is that CPU usage decreased by about 65-75%, i.e. allowing 3-4x more streams with the same CPU usage. Also parallelization works better and usage of different CPU cores is more controllable, allowing for better scalability. And a fixed, but configurable number of threads is used, which is independent of the number of streams.",
      "url": "https://coaxion.net/blog/2018/04/improving-gstreamer-performance-on-a-high-number-of-network-streams-by-sharing-threads-between-elements-with-rusts-tokio-crate/",
      "date_published": "2018-04-05T15:21:06+00:00",
      "author": {
        "name": "Sebastian Dröge",
        "url": "https://coaxion.net/blog/"
      },
      "tags": [
        "Web and Network Services",
        "Performance"
      ]
    },
    {
      "id": "0cb16bc7-daff-4747-81e5-d4455d33fc43",
      "title": "HTTP upgrades with hyper",
      "content_text": "The newest release of hyper includes some lower-level connection APIs for both the server and client. Notably, this allows using hyper send and receive HTTP upgrade requests. The most popular of these is Websockets.",
      "url": "http://seanmonstar.com/post/172531530657/http-upgrades-with-hyper",
      "date_published": "2018-04-02T14:34:53-07:00",
      "author": {
        "name": "Sean McArthur",
        "url": "http://seanmonstar.com/"
      },
      "tags": [
        "Web and Network Services",
        "Crates"
      ]
    },
    {
      "id": "229aab36-08f5-4288-a9df-c804ad6c2b56",
      "title": "Using Rust Modules in JavaScript/Web Development (Part 1 / 3) [Plain JS]",
      "content_text": "One of the promising reasons I started learning rust is that it can be used to build modules for web using web-assembly. This blog post will cover how you can build a rust module and use it as regular package in the JavaScript environment. Remember rust is not meant to replace JS. I see it as complementary add-on to the places where JS is comparatively slower (heavy computations).",
      "url": "https://medium.com/@atulanand94/using-rust-modules-for-javascript-web-development-part-i-e6dec27df7b2",
      "date_published": "2018-04-03T06:22:23.753+00:00",
      "author": {
        "name": "Atul",
        "url": "https://medium.com/@atulanand94"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "d110dc0e-7a78-42c3-8326-5b5ec58f8875",
      "title": "JavaScript to Rust and Back Again: A wasm-bindgen Tale",
      "content_text": "Recently we’ve seen how WebAssembly is incredibly fast to compile, speeding up JS libraries, and generating even smaller binaries. We’ve even got a high-level plan for better interoperability between the Rust and JavaScript communities, as well as other web programming languages. As alluded to in that previous post, I’d like to dive into more detail about a specific component, wasm-bindgen.",
      "url": "https://hacks.mozilla.org/2018/04/javascript-to-rust-and-back-again-a-wasm-bindgen-tale/",
      "date_published": "2018-04-04T14:58:40+00:00",
      "author": {
        "name": " Alex Crichton",
        "url": "https://hacks.mozilla.org/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "d14f3e75-4047-441e-a67b-fc0de042845a",
      "title": "Removing Connection State In mob",
      "content_text": "I started writing mob, an multi-echo server using mio, in 2015. I coded mob into a mostly working state and then left it mostly alone, only updating it to work with the latest stable mio. Recently, I started looking at the code again and had the urge to improve it. In a previous post, I talked about managing the state of connections in mob. In this post, I will walk through what I did to remove the need to track connection state. I wanted to remove the state because the implementation required an O(n) operation every tick of the mio event loop. It also added a fair amount of complexity to the code.",
      "url": "http://hermanradtke.com/2018/03/29/removing-connection-state-from-mob.html",
      "date_published": "2018-03-29T00:00:00+00:00",
      "author": {
        "name": "Herman J. Radtke III",
        "url": "http://hermanradtke.com/"
      },
      "tags": [
        "Language",
        "Web and Network Services"
      ]
    },
    {
      "id": "07825eb3-aaab-46c5-b7e4-680857d73750",
      "title": "Rust + Node.js are awesome!",
      "content_text": "Blazing fast, low requirements, computationally intensive operations on Node.js using Rust",
      "url": "https://itnext.io/rust-node-js-are-awesome-a50d63411773",
      "date_published": "2018-03-27T21:50:20.148+00:00",
      "author": {
        "name": "Benjamín Calderón",
        "url": "https://itnext.io/@benjcal"
      },
      "tags": [
        "Web and Network Services",
        "Performance"
      ]
    },
    {
      "id": "9f012379-d71a-4c45-b9db-12c4871070e7",
      "title": "Touring a Fast, Safe, and Complete(ish) Web Service in Rust",
      "content_text": "For years now, I’ve been having a crisis of faith in interpreted languages. They’re fast and fun to work in at small scale, but when you have a project that gets big, their attractive veneer quickly washes away. A big Ruby or JavaScript (just to name a few) program in production is a never ending game of whack-a-mock – you fix one problem only to find a new one somewhere else. No matter how many tests you write, or how well-disciplined your team, any new development is sure to introduce a stream of bugs that will need to be shored up over the course of months or years.\n\nCentral to the problem are the edges. People will reliably do a good job of building and testing the happy paths, but as humans we’re terrible at considering the edge conditions, and it’s those edges and corners that cause trouble over the years that a program is in service.",
      "url": "https://brandur.org/rust-web",
      "date_published": "2018-03-27T14:45:57+00:00",
      "author": {
        "name": "Brandur Leach",
        "url": "https://brandur.org"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "e32bb679-4afa-48d9-ab51-d589a590348e",
      "title": "Building a Restful CRUD API with Rust",
      "content_text": "Since my initial Node/Rust REST comparison, I’ve wanted to follow up with a comprehensive guide for getting simple CRUD operations up and running in Rust.",
      "url": "https://medium.com/sean3z/building-a-restful-crud-api-with-rust-1867308352d8",
      "date_published": "2018-03-19T04:29:33.114+00:00",
      "author": {
        "name": "Sean Wragg",
        "url": "https://medium.com/@sean3z"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "dae19f32-236c-4329-b26d-e6c47b2631d3",
      "title": "Multicasting in Rust",
      "content_text": "A brief post to help others multicast in Rust",
      "url": "https://bluejekyll.github.io/blog/rust/2018/03/18/multicasting-in-rust.html",
      "date_published": "2018-03-18T07:00:00+00:00",
      "author": {
        "name": "Benjamin Fry",
        "url": "https://bluejekyll.github.io/blog/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "44e96573-f8b3-4577-8a76-1cbc8a65ec8b",
      "title": "Building a DNS server in Rust",
      "content_text": "With the combined goal of gaining a deep understanding of DNS, of doing something interesting with Rust, and of scratching some of my own itches, I originally set out to implement my own DNS server. This document is not a truthful chronicle of that journey, but rather an idealized version of it, without all the detours I ended up taking. We'll gradually implement a full DNS server, starting from first principles.",
      "url": "https://github.com/EmilHernvall/dnsguide",
      "date_published": "2018-03-16T00:00:00+00:00",
      "author": {
        "name": "Emil Hernvall",
        "url": "https://github.com/EmilHernvall"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "39f186f6-b177-43e6-9b4c-7ffe689926e7",
      "title": "Parc3l: Combining Three.js, Rust, and WebAssembly!",
      "content_text": "WebAssembly has been interesting me lately, specifically the prospect of doing arithmetically-intensive operations with it, not unlike the fantastic physics engine Emscripten port Ammo.js. Compiling something like that is out of the scope of this little post (but should be getting easier!), and I’ve left some links at the bottom so you can clear more about WebAssembly if you’re interested.",
      "url": "https://medium.com/@cwervo/parc3l-combining-three-js-rust-and-webassembly-c1e643ef7681",
      "date_published": "2018-03-12T14:34:23.064+00:00",
      "author": {
        "name": "Andres Cuervo",
        "url": "https://medium.com/@cwervo"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "bf12d6fd-0aea-4d74-b3a7-02a538d210d3",
      "title": "Making WebAssembly better for Rust & for all languages",
      "content_text": "To be a useful as a web language, Rust needs to work well with the JavaScript ecosystem. We have some work to do to get there, and fortunately that work ...",
      "url": "https://hacks.mozilla.org/2018/03/making-webassembly-better-for-rust-for-all-languages/",
      "date_published": "2018-03-14T15:02:52+00:00",
      "author": {
        "name": "Lin Clark",
        "url": "http://code-cartoons.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "4d94c5ba-199d-44c2-9148-7a6bbff699d0",
      "title": "Crashing a Rust Hyper server with a Denial of Service attack",
      "content_text": "I’m writing a reverse proxy in Rust using Hyper and I want to measure performance a bit to know if I’m doing something terribly wrong. By doing that I discovered a Denial of Service vulnerability in Hyper when IO errors are not properly handled. Note that a workaround has been released in the meantime in Hyper 0.11.20, more background info can be found in this Hyper issue.",
      "url": "https://klausi.github.io/rustnish/2018/03/11/crashing-a-rust-hyper-server-with-a-denial-of-service-attack.html",
      "date_published": "2018-03-11T00:00:00+00:00",
      "author": {
        "name": "Klaus Purer",
        "url": "https://klausi.github.io/rustnish/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "e03aa0e5-bb05-48f0-a4a4-0796d14d1115",
      "title": "Writing a Simple IPFS Crawler",
      "content_text": "IPFS is a peer-to-peer protocol that allows you to access and publish content in a decentralized fashion. It uses hashes to refer to files. Short of someone posting hashes on a website, discoverability of content is pretty low. In this article, we&rsquo;re going to write a very simple crawler for IPFS.\nIt&rsquo;s challenging to have a traditional search engine in IPFS because content rarely links to each other. But there is another way than just blindly following links like a traditional crawler.",
      "url": "https://gkbrk.com/2018/03/writing-a-simple-ipfs-crawler/",
      "date_published": "2018-03-12T00:00:00+00:00",
      "author": {
        "name": "Gökberk Yaltıraklı",
        "url": "https://gkbrk.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "dd5790e1-ff4e-4f61-9a8b-05ea774a2e89",
      "title": "Writing servers with Tokio",
      "content_text": "I’ve been writing a small toy project with Tokio in my spare time’s spare time. I’ll write more about it at a later date. What I’ve found writing it, though, is that there is a specific pattern to writing servers, both UDP and TCP (and presumably others) in Tokio, and it’s not super obvious at first glance. So here it is.",
      "url": "https://blog.passcod.name/2018/mar/07/writing-servers-with-tokio",
      "date_published": "2018-03-07T09:35:30+00:00",
      "author": {
        "name": "Félix Saparelli",
        "url": "https://blog.passcod.name/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "776dd5f1-c6d0-48da-8e0a-6fcae00fb923",
      "title": "Writing a Microservice in Rust",
      "content_text": "Let me begin this article on Writing a Microservice in Rust by talking about C++. I’ve been a reasonably active member of the C++ community for quite a while now, attending and contributing talks to conferences, following the development and evangelism of the language’s more modern features and of course writing lots of it. C++ is a language that gives its users very fine-grained control over all aspects of the program they are writing, at the cost of a steep learning curve and a large body of knowledge required to write effective C++. However, C++ is also a very old language, conceived by Bjarne Stroustrup in 1985, and thus caries a lot of technical debt even into modern standards.",
      "url": "http://www.goldsborough.me/rust/web/tutorial/2018/01/20/17-01-11-writing_a_microservice_in_rust/",
      "date_published": "2018-01-20T00:00:00+00:00",
      "author": {
        "name": "Peter Goldsborough",
        "url": "http://www.goldsborough.me/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "26bc7432-d561-4e1f-8cf2-2c30b8ac63ab",
      "title": "Speed Without Wizardry",
      "content_text": "Vyacheslav Egorov, who goes by mraleph on the Web, wrote a response to my article “Oxidizing Source Maps with Rust and WebAssembly” titled “Maybe you don’t need Rust and WASM to speed up your JS”.\n\nThe “Oxidizing” article recounts my experience integrating Rust (compiled to WebAssembly) into the source-map JavaScript library. Although the JavaScript implementation was originally authored in idiomatic JavaScript style, as we profiled and implemented speed improvements, the code became hard to read and maintain. With Rust and its zero-cost abstractions, we found that there was no trade-off between performance and clean code.",
      "url": "http://fitzgeraldnick.com/2018/02/26/speed-without-wizardry.html",
      "date_published": "2018-02-26T00:00:00-08:00",
      "author": {
        "name": "Nick Fitzgerald",
        "url": "http://fitzgeraldnick.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "22d134e6-ddc6-4571-965c-4b6e72a544eb",
      "title": "Recently, for a Rusty Web",
      "content_text": "It’s been a few months since I shifted my focus full time to Rust, and in that time, we’ve gotten a lot of work done! I wanted to update you here what all that is, since it’s spread around on multiple repositories.",
      "url": "http://seanmonstar.com/post/171170905822/recently-for-a-rusty-web",
      "date_published": "2018-02-22T00:00:00+00:00",
      "author": {
        "name": "Sean McArthur",
        "url": "http://seanmonstar.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "9b97498f-3ffb-4c89-8973-c2beb5e0140e",
      "title": "Porting Rust to WebAssembly",
      "content_text": "I recently spent some effort trying to make reproto run in a browser. Here I want to outline the problems I encountered and how I worked around them. I will also provide a number of suggestions for how things might be improved for future porters.",
      "url": "https://udoprog.github.io/rust/2018-02-19/porting-rust-to-wasm.html",
      "date_published": "2018-02-19T00:00:00+00:00",
      "author": {
        "name": "John-John Tedro",
        "url": "https://udoprog.github.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "0af4c90e-74b2-438d-aaed-798c9f6e900a",
      "title": "Fanta: An opinionated framework for web development in rust",
      "content_text": "Fanta is a web framework that aims for developers to be productive and consistent across projects and teams. Its goals are to be: Opinionated, Fast, and Intuitive. Based heavily off of the work here: https://github.com/tokio-rs/tokio-minihttp",
      "url": "https://github.com/trezm/Fanta",
      "date_published": "2018-02-14T18:44:00+11:00",
      "author": {
        "name": "Peter Mertz",
        "url": "https://github.com/trezm"
      },
      "tags": [
        "Tools and Applications",
        "Web and Network Services"
      ]
    },
    {
      "id": "86b2dfcd-a01d-47e1-acb8-2ddbca20db62",
      "title": "Gameland intro, reimplemented in Rust for WebAssembly",
      "content_text": "My nice brother Johannes Ridderstedt sent me some old files a few weeks ago (in late 2017), stuff that he had preserved from an age-old computer of ours. One of these was the file named gameland.zip (not published yet, but I might put it up here some day.) I managed to get this running, and liked what I saw (you'll find the YouTube link to it further down on this page.) Around this time I was reading a bit about WebAssembly which I think will redefine and help reshape the web as we see it today. I was also looking at the Hello, Rust web page, and the \"FizzleFade effect using a Feistel network\" page in particular.",
      "url": "http://perlun.eu.org/en/programming/gameland/",
      "date_published": "2018-02-13T07:44:00+11:00",
      "author": {
        "name": "Per Lundberg",
        "url": "http://perlun.eu.org/en/"
      },
      "tags": [
        "Games and Graphics",
        "Web and Network Services"
      ]
    },
    {
      "id": "bbc46982-1321-4e4e-8d9f-344963341c21",
      "title": "Event Sourcing with Aggregates in Rust",
      "content_text": "Everyone loves event sourcing, right up until the moment they have to implement it. At that moment all the wonderful whiteboard drawings…",
      "url": "https://medium.com/@KevinHoffman/event-sourcing-with-aggregates-in-rust-4022af41cf67",
      "date_published": "2018-02-12T15:11:08.708+00:00",
      "author": {
        "name": "Kevin Hoffman",
        "url": "https://medium.com/@KevinHoffman"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "2b698c99-99e0-4fad-8716-b58dbd9c255c",
      "title": "Deploying A Rust Server to Google App Engine with Travis CI & Docker",
      "content_text": "I woke up this morning with one goal: to convert my website (morgangallant.com) into a Rust web server. I have been a long time fan of…",
      "url": "https://medium.com/@gallantmrgn/deploying-rust-server-to-google-app-engine-with-travis-ci-docker-b80acfce2ce5",
      "date_published": "2018-02-11T00:07:43.579+00:00",
      "author": {
        "name": "Morgan A. Gallant",
        "url": "https://medium.com/@gallantmrgn"
      },
      "tags": [
        "Web and Network Services",
        "DevOps and Deployment"
      ]
    },
    {
      "id": "6b542e90-1f02-4368-90e4-a1931ccf1935",
      "title": "A Wee Allocator for WebAssembly",
      "content_text": "Introducing wee_alloc. wee_alloc is a work-in-progress memory allocator designed for WebAssembly. It has a tiny code size footprint, compiling down to only a kilobyte of .wasm code.",
      "url": "http://fitzgeraldnick.com/2018/02/09/wee-alloc.html",
      "date_published": "2018-02-09T00:00:00-08:00",
      "author": {
        "name": "Nick Fitzgerald",
        "url": "http://fitzgeraldnick.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "e6347974-c84a-438a-924a-52ef37f6c99a",
      "title": "I rewrote a Nintendo emulator with Rust / WebAssembly (Japanese)",
      "content_text": "概要 以前、JSで書いた(ファミコンのエミュレータを書いた - undefined)ファミコンのエミュレータをRustで書き直してみた。 また、技術的な内容はQiitaの方にも書いているので興味のある方は参照してみてください。(まだ Hello, World!までしか書けてませんが。) qiita.com もともとファミコンのエミュレータって新しい言語を習得するのにちょうどいい題材だったりするのでは、って話しからスタートしてて、よくわからないのでJSで書いてみて、ようやくRustで一通りは実装できた感じ。まだバグや未実装（音声周りやマッパー）も多いんですが、ひとまずはお腹いっぱいな感じ。 成果…",
      "url": "http://blog.bokuweb.me/entry/2018/02/08/101522",
      "date_published": "2018-02-08T10:15:22+09:00",
      "author": {
        "name": "bokuweb",
        "url": "http://blog.bokuweb.me/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "434c400b-b4ac-49c9-87fa-db2a8b5f1ba7",
      "title": "DataFusion: Big Data Platform for Rust",
      "content_text": "DataFusion is an open-source Big Data platform implemented in the Rust programming language with a similar programming style to Apache Spark.",
      "url": "https://www.datafusion.rs/",
      "date_published": "2018-02-04T16:51:47+00:00",
      "author": {
        "name": "Andy Grove",
        "url": "https://www.datafusion.rs/"
      },
      "tags": [
        "Tools and Applications",
        "Web and Network Services"
      ]
    },
    {
      "id": "5c8f0581-5b1d-485b-852c-83c0deef73d5",
      "title": "Rust and WebAssembly with Turtle - /var/blog",
      "content_text": "In this post, I'll walk through a few of the highlights of getting Turtle, a Rust library for creating animated drawings, to run in the browser with WebAssembly.",
      "url": "https://varblog.org/blog/2018/01/08/rust-and-webassembly-with-turtle/",
      "date_published": "2018-01-08T09:54:00-06:00",
      "author": {
        "name": "Marshall Pierce",
        "url": "https://varblog.org/"
      },
      "tags": [
        "Web and Network Services"
      ]
    }
  ]
}