<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - Web and Network Services</title><link>https://readrust.net/</link><description>Web and Network Services posts on Read Rust</description><item><title>Announcing Gotham 0.3</title><link>https://gotham.rs/blog/release/2018/10/29/gotham-0.3.html</link><description><![CDATA[First of all, hello there! This is the first announcement after the call for maintainers back in summer, and includes the efforts of several new faces: @whitfin, @nyarly, @colinbankier. Together, as well as input from the original authors @bradleybeddoes and @smangelsdorf, we are the new maintainers of the Gotham project. Today we’re excited to announce the release of Gotham 0.3, which follows the evolution of the broader Rust ecosystem.]]></description><guid isPermaLink="false">77d7a663-c11c-476c-a180-a84d0edf2975</guid><pubDate>Mon, 29 Oct 2018 15:31:00 +0000</pubDate><dc:creator>@whitfin, @nyarly, @colinbankier</dc:creator></item><item><title>Auth Web Microservice with rust using Actix-Web - Part 2</title><link>https://hgill.io/posts/auth-microservice-rust-actix-web-diesel-complete-tutorial-part-2/</link><description><![CDATA[Picking up from part one, we now have as server that takes an email address from a request and spits out a JSON response with an invitation object. In part one I said that we will send an email to the user, after some thought and feedback, we will be skipping this part now (look out for part 3). For now we will use the http response from the server to verify the email so to speak.]]></description><guid isPermaLink="false">268e1717-7988-4cb0-83e4-f4c902a969a8</guid><pubDate>Sun, 28 Oct 2018 13:02:37 +0100</pubDate><dc:creator>Harry Gill</dc:creator></item><item><title>10x Your JavaScript With WASM And Rust</title><link>https://blog.x5ff.xyz/blog/azure-functions-wasm-rust-ai/</link><description><![CDATA[This is part four in a series of Rust on Azure Functions. The other parts are about performance comparisons (part 1 and part 2), and explaining the PMX algorithm (part 3). If you want to learn more about Genetic Algorithms be sure to read part 3 first).]]></description><guid isPermaLink="false">8c9a2022-1124-47da-94c4-a85e808a257c</guid><pubDate>Thu, 25 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Claus</dc:creator></item><item><title>Multithreading Rust and Wasm</title><link>https://rustwasm.github.io/2018/10/24/multithreading-rust-and-wasm.html</link><description><![CDATA[When WebAssembly was first shipped it was an MVP which, while minimal, has spawned a huge number of exciting projects which work today across all major browsers. Rust has capitalized on the wasm MVP’s success as well with tools like wasm-bindgen and wasm-pack by making the MVP feel less minimal. WebAssembly is yet more ambitious, though! Since inception it’s always been intended to extend the WebAssembly specification with new features and functionality.]]></description><guid isPermaLink="false">1025ea91-d834-4f58-97cc-dabcee3b86df</guid><pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Alex Crichton</dc:creator></item><item><title>Serverless Rust with AWS Lambda and WebAssembly</title><link>https://blog.scottlogic.com/2018/10/18/serverless-rust.html</link><description><![CDATA[In this post, I look at how WebAssembly can be used to create serverless functions and demonstrate an AWS Lambda function written entirely in Rust.]]></description><guid isPermaLink="false">c1a9ce3b-fd19-4285-b465-ab7607792297</guid><pubDate>Thu, 18 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Colin Eberhardt</dc:creator></item><item><title>Serverless Rust with Cloudflare Workers</title><link>https://blog.cloudflare.com/cloudflare-workers-as-a-serverless-rust-platform/</link><description><![CDATA[It's exciting times for Rust developers. Cloudflare's Serverless Platform, Cloudflare Workers, allows you to compile your code to WASM, upload to 150+ data centers and invoke those functions just as easily as if they were JavaScript functions. Today I'm going to convert my lipsum generator to use Rust and explore the developer experience (hint: it's already pretty nice).]]></description><guid isPermaLink="false">0c92d9d7-26ba-4152-9820-08ef1011689d</guid><pubDate>Tue, 16 Oct 2018 12:00:00 +0000</pubDate><dc:creator>Steven Pack</dc:creator></item><item><title>Routing and extraction in Tide: a first sketch</title><link>https://rust-lang-nursery.github.io/wg-net/2018/10/16/tide-routing.html</link><description><![CDATA[This post continues the series on Tide, sketching a possible design for routing and extraction that combines some of the best ideas from frameworks like Rocket, Actix, and Gotham.]]></description><guid isPermaLink="false">7141f981-74d7-4df6-9ce2-b857fff58557</guid><pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Aaron Turon</dc:creator></item><item><title>Pi-hole: Announcing Our RESTful API</title><link>https://pi-hole.net/2018/10/15/announcing-our-restful-api-contributions-welcome/</link><description><![CDATA[The API is written in Rust, a language new to the Pi-hole project. Rust is a safe and fast language which matches well with our goals for the API. It is statically typed and prevents whole categories of errors while being productive and extendable.]]></description><guid isPermaLink="false">0c44f78b-c47a-4be2-9e30-4fa129304a9c</guid><pubDate>Mon, 15 Oct 2018 13:00:33 +0000</pubDate><dc:creator>Pi-hole</dc:creator></item><item><title>Auth Web Microservice with rust using Actix-Web</title><link>https://hgill.io/posts/auth-microservice-rust-actix-web-diesel-complete-tutorial-part-1/</link><description><![CDATA[We are going to create a web-server in rust that only deals with user registration and authentication. I will be explaining the steps in each file as we go. The complete project code is here repo. Please take all this with a pinch of salt as I’m a still a noob to Rust.]]></description><guid isPermaLink="false">d418a0ea-dbef-4bfa-bc74-827185aef57c</guid><pubDate>Mon,  8 Oct 2018 13:02:37 +0100</pubDate><dc:creator>Harry Gill</dc:creator></item><item><title>WebAssembly and Dynamic Memory</title><link>https://frehberg.wordpress.com/webassembly-and-dynamic-memory/</link><description><![CDATA[WebAssembly is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable target for compilation of high-level languages like C/C++/Rust, enabling deployment on the web for client and server applications.

These high-level languages like C/C++/Rust (+Javascript) deal with different allocations of memory, such as static memory, stack memory and dynamic memory.]]></description><guid isPermaLink="false">cba35bca-a821-4ba9-81d8-3cee56f5e199</guid><pubDate>Thu,  4 Oct 2018 03:19:18 +0000</pubDate><dc:creator>Frank Rehberger</dc:creator></item><item><title>Introducing Ruukh Framework</title><link>https://sharadchand.com/2018/10/03/ruukh-framework.html</link><description><![CDATA[Rust has its goals set on to be a primary WASM language and it would be awesome to use it both in backend and frontend web. Ruukh is one of such efforts to realise that dream. Ruukh, a frontend web framework, is inspired by both VueJS and ReactJS.]]></description><guid isPermaLink="false">217f309f-bfff-4997-8ff7-faddf10b670f</guid><pubDate>Wed,  3 Oct 2018 12:38:00 +0000</pubDate><dc:creator>Sharad Chand</dc:creator></item><item><title>Lessons learned on writing web applications completely in Rust</title><link>https://medium.com/@saschagrunert/lessons-learned-on-writing-web-applications-completely-in-rust-2080d0990287</link><description><![CDATA[This blog post is an update to the preceeding article “A web application completely written in Rust” and summarizes the projects’ progress over the last months.]]></description><guid isPermaLink="false">7de9ba6b-a3ae-4db5-a911-15126a264b26</guid><pubDate>Wed,  3 Oct 2018 11:59:12 +0000</pubDate><dc:creator>Sascha Grunert</dc:creator></item><item><title>Tower Web 0.3 — async/await and template support</title><link>https://medium.com/@carllerche/tower-web-0-3-async-await-and-template-support-e0bb8ed47941</link><description><![CDATA[Today, Tower Web 0.3 has been released and it comes with two major new features: Experimental support for async/await. Support for using templates to render responses.]]></description><guid isPermaLink="false">fa23119f-23c8-404c-9aaa-5a75da99d131</guid><pubDate>Fri, 28 Sep 2018 17:32:13 +0000</pubDate><dc:creator>Carl Lerche</dc:creator></item><item><title>Programming WebAssembly with Rust — The Book!</title><link>https://medium.com/@KevinHoffman/programming-webassembly-with-rust-the-book-7c4a890fcf97</link><description><![CDATA[I am proud to announce that I’m working on a book for the Pragmatic Programmers. The title hasn’t been set in stone yet, but the book will be about programming WebAssembly with Rust.]]></description><guid isPermaLink="false">38d1a807-a596-4423-a458-beab7d9df074</guid><pubDate>Fri, 28 Sep 2018 13:25:42 +0000</pubDate><dc:creator>Kevin Hoffman</dc:creator></item><item><title>Announcing the web-sys crate!</title><link>https://rustwasm.github.io/2018/09/26/announcing-web-sys.html</link><description><![CDATA[We are pleased to announce the first release of the web-sys crate! It provides raw bindings to all the Web’s APIs: everything from DOM manipulation to WebGL to Web Audio to timers to fetch and more!]]></description><guid isPermaLink="false">27dd6f1a-6659-43d5-aa7b-2e0ee21c7173</guid><pubDate>Wed, 26 Sep 2018 00:00:00 +0000</pubDate><dc:creator>rustwasm</dc:creator></item><item><title>eBPF, ingrained in Rust</title><link>https://blog.redsift.com/labs/ebpf-ingrained-in-rust/</link><description><![CDATA[Today we are releasing RedBPF and ingraind, our eBPF toolkit that integrates with StatsD and S3, to gather feedback, and see where others in the Rust community might take this framework. If you are looking to up your company’s monitoring game, gather more data about your Raspberry Pi cluster at home, or just have a strong academic interest in Rust and low-level bit shepherding, you might want to read on.]]></description><guid isPermaLink="false">ba0468b9-b0dd-40d1-b253-9fa70cb05ddf</guid><pubDate>Tue, 25 Sep 2018 14:45:44 +0000</pubDate><dc:creator>Peter Parkanyi</dc:creator></item><item><title>Smithy progress update: How I decreased WebAssembly bundle size by 90%</title><link>https://medium.com/@robert.balicki_2494/smithy-progress-update-how-i-decreased-webassembly-bundle-size-by-90-e7fe194b2f58</link><description><![CDATA[Smithy, a web development framework written in Rust that compiles to WebAssembly. In the mean time, there has been substantial progress, and Smithy is on the verge of being ready for alpha use! In this post, I want to describe the improvements that have been made, and what’s on the Smithy roadmap!]]></description><guid isPermaLink="false">21440a24-a7da-4c72-8232-df22c7438b09</guid><pubDate>Mon, 24 Sep 2018 03:36:53 +0000</pubDate><dc:creator>Robert Balicki</dc:creator></item><item><title>Announcing Linkerd 2.0: from service mesh to service sidecar</title><link>https://blog.linkerd.io/2018/09/18/announcing-linkerd-2-0/</link><description><![CDATA[The 2.0 release of Linkerd brings two very significant changes. First, we’ve completely rewritten Linkerd to be orders of magnitude faster and smaller than Linkerd 1.x. Linkerd 2.0’s data plane is comprised of ultralight Rust proxies which consume around 10mb of RSS and have a p99 latency of <1ms. Linkerd’s minimalist control plane (written in Go) is similarly designed for speed and low resource footprint.]]></description><guid isPermaLink="false">cf201dba-76a2-49e1-a4d9-b28093189901</guid><pubDate>Tue, 18 Sep 2018 17:00:00 +0000</pubDate><dc:creator>William Morgan</dc:creator></item><item><title>Rust and JavaScript Interop ↔️</title><link>https://blog.ryanlevick.com/posts/wasm-bindgen-interop/</link><description><![CDATA[In recent projects of mine, I’ve been using WebAssembly quite a bit. WebAssembly (Wasm) is “a new binary instruction format for a stack based virtual machine” that lets you use languages besides JavaScript to run code on a web page - usually either for performance reasons or to run code you’d like to share across different platforms. In my opinion, the most promising of these languages, due to its lack of a need for a runtime and great tooling is Rust.]]></description><guid isPermaLink="false">d72f5483-1247-46d8-8764-7ac5ec0fb2d3</guid><pubDate>Wed, 12 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Ryan Levick</dc:creator></item><item><title>Rising Tide: building a modular web framework in the open</title><link>https://rust-lang-nursery.github.io/wg-net/2018/09/11/tide.html</link><description><![CDATA[The Network Services Working Group aims to improve the story for web development this year in several respects: by bolstering foundations like async/await, by improving the ecosystem of web-related crates, and by pulling these pieces together into a framework and book called Tide. The name “Tide” refers to “a rising tide lifts all boats”; the intent is to improve sharing, compatibility, and improvements across all web development and frameworks in Rust.]]></description><guid isPermaLink="false">1461a8b4-863b-40c1-bb2d-0ff077d738e1</guid><pubDate>Tue, 11 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Aaron Turon</dc:creator></item><item><title>Tower Web — Expanding the middleware stack</title><link>https://medium.com/@carllerche/tower-web-expanding-the-middleware-stack-f9bf55bfa109</link><description><![CDATA[tower-web version 0.2.2 has been released. It comes with a number of new features, which I will talk about in this post. Primarily, the middleware story is starting to come together. I will be expanding some on how middleware fits into Tower and web in general.]]></description><guid isPermaLink="false">e7fbc029-a108-4209-bbf4-9e152701d9a6</guid><pubDate>Fri,  7 Sep 2018 14:21:28 +0000</pubDate><dc:creator>Carl Lerche</dc:creator></item><item><title>Programming Servo: A generic “worker event-loop”</title><link>https://medium.com/programming-servo/programming-servo-a-generic-worker-event-loop-400a6f113a60</link><description><![CDATA[Let’s take a look at how in Rust you can have an algorithm generic over T, where T is further bound by a trait, which itself is generic over one of several parameters.]]></description><guid isPermaLink="false">850319b3-4515-4f9c-b833-67a391d5ab26</guid><pubDate>Sun,  2 Sep 2018 07:03:47 +0000</pubDate><dc:creator>Gregory Terzian</dc:creator></item><item><title>Benchmarking a Rust web application</title><link>https://klausi.github.io/rustnish/2018/08/31/benchmarking-a-rust-web-application.html</link><description><![CDATA[I set out out my goal 9 for Rustnish: Write benchmark code that compares runtime performance of Rustnish against Varnish. Use cargo bench to execute the benchmarks.

The basic idea of a performance test here is to send many HTTP requests to the web service (the reverse proxy in this case) and measure how fast the responses arrive back. Comparing the results from Rustnish and Varnish should give us an idea if our performance expectations are holding up.]]></description><guid isPermaLink="false">715ee4bf-9164-4c58-aa4f-93f088859281</guid><pubDate>Fri, 31 Aug 2018 00:00:00 +0000</pubDate><dc:creator>klausi</dc:creator></item><item><title>Using WebAssembly to Accelerate Markdown Rendering</title><link>https://engineering.spideroak.com/2018/08/29/using-webassembly-to-speed-up-message-rendering/</link><description><![CDATA[Markdown rendering is very important to the performance of Semaphor - every message you send and read is a Markdown document - so we're always looking for ways to improve the performance of rendering Markdown. A couple months ago Jonathan Moore and I wondered how easy it would be to integrate WebAssembly into a React component, replacing the render() function, and we thought that moving Markdown parsing into Rust would be a great way to test this idea out.]]></description><guid isPermaLink="false">bb052dfe-fdb1-4848-9fdf-28c7c5023d93</guid><pubDate>Wed, 29 Aug 2018 10:10:00 +0000</pubDate><dc:creator>Chip Black and Jonathan Moore</dc:creator></item><item><title>Programming Servo: the makings of a task-queue</title><link>https://medium.com/programming-servo/programming-servo-the-makings-of-a-task-queue-b4138cd246ca</link><description><![CDATA[In Servo, task-sources are implemented via a channel, whose sender is cloned for each specific task-source, and where tasks are messages sent on the channel and containing a closure representing the actual task.]]></description><guid isPermaLink="false">ed925df2-a1c7-4125-a27c-7cbda8dbac71</guid><pubDate>Tue, 28 Aug 2018 10:11:58 +0000</pubDate><dc:creator>Gregory Terzian</dc:creator></item><item><title>From Rust to beyond: The ASM.js galaxy</title><link>https://mnt.io/2018/08/28/from-rust-to-beyond-the-asm-js-galaxy/</link><description><![CDATA[The second galaxy that our Rust parser will explore is the ASM.js galaxy. This post will explain what ASM.js is, how to compile the parser into ASM.js, and how to use the ASM.js module with Javascript in a browser. The goal is to use ASM.js as a fallback to WebAssembly when it is not available. I highly recommend to read the previous episode about WebAssembly since they have a lot in common.]]></description><guid isPermaLink="false">10c577b9-fdf3-4aa3-80dd-78c6e4abb8c7</guid><pubDate>Tue, 28 Aug 2018 07:39:03 +0000</pubDate><dc:creator>Ivan Enderlin</dc:creator></item><item><title>Oxidizing sourmash: WebAssembly</title><link>https://blog.luizirber.org/2018/08/27/sourmash-wasm/</link><description><![CDATA[In "Oxidizing sourmash: Python and FFI" I described my road to learn Rust, but something that I omitted was that around the same time the WebAssembly support in Rust started to look better and better and was a huge influence in my decision to learn Rust. Reimplementing the sourmash C++ extension in Rust and use the same codebase in the browser sounded very attractive, and now that it was working I started looking into how to use the WebAssembly target in Rust.]]></description><guid isPermaLink="false">a7804e3a-d98b-4135-9d38-e75aeb294961</guid><pubDate>Mon, 27 Aug 2018 15:30:00 -0300</pubDate><dc:creator>Luiz Irber</dc:creator></item><item><title>From Rust to beyond: The WebAssembly galaxy</title><link>https://mnt.io/2018/08/22/from-rust-to-beyond-the-webassembly-galaxy/</link><description><![CDATA[The first galaxy that our Rust parser will explore is the WebAssembly (WASM) galaxy. This post will explain what WebAssembly is, how to compile the parser into WebAssembly, and how to use the WebAssembly binary with Javascript in a browser and with NodeJS.]]></description><guid isPermaLink="false">b1b8abb7-362a-4004-8b6c-913ca1c85773</guid><pubDate>Wed, 22 Aug 2018 07:46:27 +0000</pubDate><dc:creator>Ivan Enderlin</dc:creator></item><item><title>Programming Servo: Anatomy of a Fetch</title><link>https://medium.com/programming-servo/anatomy-of-a-fetch-8872a5c843cd</link><description><![CDATA[Today, let’s go through an entire fetch in Servo, starting with an example in JS.]]></description><guid isPermaLink="false">8b803f70-9098-40d0-97af-5cdff0cde756</guid><pubDate>Fri, 17 Aug 2018 22:29:36 +0000</pubDate><dc:creator>Gregory Terzian</dc:creator></item><item><title>Rust GraphQL webserver with Warp, Juniper and MongoDB</title><link>http://alex.amiran.it/post/2018-08-16-rust-graphql-webserver-with-warp-juniper-and-mongodb.html</link><description><![CDATA[Rust's web frameworks ecosystem is in constant change, but recently a new framework called warp came out implementing a new, original way to solve the old problem of transforming a request into a response, and I wanted to give it a try.

And, as I use GraphQL massively at work, I also wanted to check how well Juniper implements it. To add some spice, I used MongoDB as a storage engine instead of the ubiquitous and well-supported SQL databases.]]></description><guid isPermaLink="false">1921a96e-ad32-410f-b0a7-c72dc16d3cde</guid><pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate><dc:creator>/dev/random</dc:creator></item><item><title>Tower Web 0.2 — Now 100% comment attribute free</title><link>https://medium.com/@carllerche/tower-web-0-2-now-100-comment-attribute-free-3ed0633e47e5</link><description><![CDATA[The short version is, Tower Web 0.2 was just released and regular Rust attributes are now used instead of magic comments. The doc comment is replaced with #[get("/")]. This is thanks to Rust macro wizard David Tolnay. I also thought that it would be best to immediately push out 0.2 and then we can all pretend 0.1 didn’t happen.]]></description><guid isPermaLink="false">e9ddc1eb-5ab9-4f23-8b9a-a41cea991044</guid><pubDate>Tue, 14 Aug 2018 16:22:13 +0000</pubDate><dc:creator>Carl Lerche</dc:creator></item><item><title>Syntax diagram generator</title><link>https://lukaslueg.github.io/macro_railroad_wasm_demo/</link><description><![CDATA[This is a demonstration of a pure-rust library to generate syntax diagrams for macro_rules!().Diagrams are generated fully automatically from rust-source as Scalable Vector Graphics, using customizable CSS for layout.]]></description><guid isPermaLink="false">47f615b2-5fe1-45a1-b760-9bff19237836</guid><pubDate>Sun, 12 Aug 2018 15:04:11 +0000</pubDate><dc:creator>lukaslueg</dc:creator></item><item><title>Ray Tracing: WebAssembly vs JavaScript</title><link>http://matt-harrison.com/raytracing-webassembly-vs-javascript/</link><description><![CDATA[For the past few months I've been toying about with WebAssembly. The examples I've built using WebAssembly were very simple and could easily have been written in JavaScript with perfectly adequate performance. This got me thinking it's about time I make something to really shows where WebAssembly shines. This led me down the path of thinking about very compute-demanding applications. An obvious example is 3d graphics rendering. Even a small scene like the ones I've been creating involve computing millions of vector dot product calculations per second. This kind of CPU-intensive application seemed right up the street of WebAssembly.]]></description><guid isPermaLink="false">3bdf428b-c38a-4964-a8f2-a4e0106bd5d1</guid><pubDate>Sun, 12 Aug 2018 14:09:42 +0000</pubDate><dc:creator>Matt Harrison</dc:creator></item><item><title>Tower Web — A new web framework for Rust</title><link>https://medium.com/@carllerche/tower-web-a-new-web-framework-for-rust-e2912856851b</link><description><![CDATA[I previously announced Tower and mentioned that a web framework was in the works. It took longer than I had hoped (as it sometimes does with software), but today, I am opening up Tower Web.

Tower Web is an asynchronous HTTP web framework that focuses on removing boilerplate. It is built on top of Tokio, Hyper, and of course Tower. It works today on stable Rust.]]></description><guid isPermaLink="false">ea6c2f82-fb04-49be-be31-307284eedba4</guid><pubDate>Thu,  9 Aug 2018 17:46:17 +0000</pubDate><dc:creator>Carl Lerche</dc:creator></item><item><title>warp</title><link>http://seanmonstar.com/post/176530511587/warp</link><description><![CDATA[Over the past several months, I’ve been working a web framework in Rust. I wanted to make use of the new hyper 0.12 changes, so the framework is just as fast, is asynchronous, and benefits from all the improvements found powering Linkerd. More importantly, I wanted there to be a reason for making a new framework; it couldn’t just be yet another framework with the only difference being I’ve written it. Instead, the way this framework is used is quite different than many that exist. In doing so, it expresses a strong opinion, which might not match your previous experiences, but I believe it manages to do something really special.

I’m super excited to reveal warp, a joint project with @carllerche.]]></description><guid isPermaLink="false">55adde79-edfa-433f-8c4f-40f2baee7cd9</guid><pubDate>Wed,  1 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Sean McArthur</dc:creator></item><item><title>Writing a front-end WebAssembly framework in Rust: lessons learned</title><link>https://medium.com/@robert.balicki_2494/writing-a-front-end-webassembly-framework-in-rust-lessons-learned-7cc48ed27d96</link><description><![CDATA[Over the past few months, I’ve been writing Smithy, a very work-in-progress front-end WebAssembly framework written in Rust.

My goal for Smithy is to enable you to use idiomatic Rust to write front-end code. This has costs: for example worrying about lifetimes and using Rc<RefCell<State>> to share state. But this also has the potential to give you the safety guarantees that the Rust compiler provides when writing browser code!]]></description><guid isPermaLink="false">7f8cf89b-0cca-43c6-a660-3780bd2cdf72</guid><pubDate>Mon, 30 Jul 2018 12:46:05 +0000</pubDate><dc:creator>Robert Balicki</dc:creator></item><item><title>Is WebAssembly the return of Java Applets &amp; Flash?</title><link>https://words.steveklabnik.com/is-webassembly-the-return-of-java-applets-flash</link><description><![CDATA[For this post, I’m going to make three comparisons: to Flash, to Java Applets, and occasionally to PNaCL. Secondly, this post is going to focus on the web use-case for WebAssembly, even though the previous post was about non-web uses. We’ll make that comparison in the next post. Finally, this post is kind of like eating tapas, there’s a bunch of little sections.]]></description><guid isPermaLink="false">6204efce-b9b3-4225-ae6b-5fc74f441d5f</guid><pubDate>Thu, 26 Jul 2018 00:03:00 +0000</pubDate><dc:creator>Steve Klabnik</dc:creator></item><item><title>Announcing the js-sys crate!</title><link>https://rustwasm.github.io/2018/07/26/announcing-the-js-sys-crate.html</link><description><![CDATA[The js-sys crate contains raw #[wasm_bindgen] bindings to all the global APIs guaranteed to exist in every JavaScript environment by the ECMAScript standard. It does not contain bindings to any Web- or Node-specific APIs. With the js-sys crate, we can work with Objects, Arrays, Functions, Maps, Sets, etc… without writing the #[wasm_bindgen] imports by hand.]]></description><guid isPermaLink="false">95c003ee-6a87-45cb-abd3-491bd965d65c</guid><pubDate>Thu, 26 Jul 2018 00:00:00 +0000</pubDate><dc:creator>rustwasm</dc:creator></item><item><title>A static web app in Rust</title><link>https://bluejekyll.github.io/blog/rust/2018/07/22/static-web-app-rust.html</link><description><![CDATA[A three day tour of Yew and WASM with Rust]]></description><guid isPermaLink="false">b3d696eb-a5d0-4118-a7b0-328623d35555</guid><pubDate>Sun, 22 Jul 2018 07:00:00 +0000</pubDate><dc:creator>Benjamin Fry</dc:creator></item><item><title>paste a full featured pastebin written in Rust</title><link>https://paste.gg/</link><description><![CDATA[A sensible, modern pastebin written in Rust]]></description><guid isPermaLink="false">0a12242d-a074-40cd-afa5-ec83c41c3865</guid><pubDate>Mon, 16 Jul 2018 14:42:15 +1000</pubDate><dc:creator>Kyle Clemens</dc:creator></item><item><title>Rust + actix-web power Atlas Weekend music festival</title><link>https://www.reddit.com/r/rust/comments/8xdsx5/rust_actixweb_in_the_on_of_the_biggest_music/</link><description><![CDATA[We've just finished music festival Atlas Weekend which took place in Kyiv, Ukraine. This year there were for about 450,000 visitors during 6 days. I'm glad to announce that Rust and actix-web are used as a backend for main technical purposes of festival.]]></description><guid isPermaLink="false">a95c25cb-0553-42ee-a81a-4a9cedce53e8</guid><pubDate>Tue, 10 Jul 2018 03:16:52 +1000</pubDate><dc:creator>/u/maxfrai</dc:creator></item><item><title>Introducing PrrrStack, Pt. 2</title><link>https://medium.com/@ccrsh/introducing-prrrstack-pt-2-24704b5763b2</link><description><![CDATA[In the first article of this series, we created a RestAPI for our application using Postgres, Rust, and Rocket. For the second half, we’ll be using React to create the front end.]]></description><guid isPermaLink="false">85ab7e93-7bbc-43ef-be5f-5decca1b4651</guid><pubDate>Mon,  9 Jul 2018 12:35:32 +0000</pubDate><dc:creator>Crash Springfield</dc:creator></item><item><title>A web application completely in Rust</title><link>https://medium.com/@saschagrunert/a-web-application-completely-in-rust-6f6bdb6c4471</link><description><![CDATA[My latest software architectural experiment is to write a complete real-world web application in Rust with as less as boilerplate as possible. Within this post I want to share my findings with you to answer the question on how much web Rust actually is.]]></description><guid isPermaLink="false">a16772c9-e5d4-4e73-8bec-934d8ae183c5</guid><pubDate>Sat,  7 Jul 2018 19:58:43 +0000</pubDate><dc:creator>Sascha Grunert</dc:creator></item><item><title>Fullstack React: Rust, React and WebAssembly</title><link>https://www.fullstackreact.com/articles/rust-react-and-web-assembly/</link><description><![CDATA[A tutorial on how to compile Rust to WebAssembly and integrate it into a React application]]></description><guid isPermaLink="false">c700cc05-51d7-4599-b545-37f4db96f347</guid><pubDate>Tue,  3 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Anders Pitman</dc:creator></item><item><title>Introducing PrrrStack</title><link>https://medium.com/@ccrsh/introducing-prrrstack-d617ff518ba6</link><description><![CDATA[This is the first part in a two-part introductory series to PRRR Stack (Postgres, Rust, Rocket, React) application.]]></description><guid isPermaLink="false">fc0e0a2b-6cec-420d-803c-2ac8770fc9e8</guid><pubDate>Mon,  2 Jul 2018 13:09:58 +0000</pubDate><dc:creator>Crash Springfield</dc:creator></item><item><title>Our Vision for wasm-bindgen</title><link>https://rustwasm.github.io/2018/07/02/vision-for-wasm-bindgen.html</link><description><![CDATA[The last blog post laid out the Rust and WebAssembly domain working group’s overall vision for Rust and WebAssembly. In this blog post, we will dive into the details of wasm-bindgen, the future we envision for it, and how you can help us build that future.]]></description><guid isPermaLink="false">7d6ed3b9-1295-4331-879f-514cbff7e5ba</guid><pubDate>Mon,  2 Jul 2018 00:00:00 +0000</pubDate><dc:creator>rustwasm</dc:creator></item><item><title>Programming Servo: an HTTP cache</title><link>https://medium.com/programming-servo/programming-servo-an-http-cache-edb52a7f267f</link><description><![CDATA[In our previous post, we saw how combining channels with an event-loop could be a useful technique to ‘drive’ the concurrent logic of your system, and it was hinted at that shared mutable state might be more complicated. A good example of such ‘shared mutable state’ in Servo is the HTTP cache.]]></description><guid isPermaLink="false">9497ed78-6b59-4dd0-b1f8-725ca3c628d2</guid><pubDate>Fri, 29 Jun 2018 04:33:13 +0000</pubDate><dc:creator>Gregory Terzian</dc:creator></item><item><title>actix – a basic TCP client</title><link>https://simplabs.com/blog/2018/06/27/actix-tcp-client.html</link><description><![CDATA[In our last post about actix we introduced you to the Rust programming language and the actix actor framework. This week we will build a basic TCP client with actix.]]></description><guid isPermaLink="false">863992ef-fc2b-4235-a8bd-206d55fd416f</guid><pubDate>Wed, 27 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Tobias Bieniek</dc:creator></item><item><title>Better HTTP Upgrades with hyper</title><link>http://seanmonstar.com/post/175280388657/better-http-upgrades-with-hyper</link><description><![CDATA[Better HTTP Upgrades with hyper It’s been possible to handle HTTP Upgrades (like Websockets) in hyper if you made use of the low-level APIs in the server and client, but it wasn’t especially nice to...]]></description><guid isPermaLink="false">faf1a345-9eaf-4d00-a7f7-9fa3afaa51ac</guid><pubDate>Tue, 26 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Sean McArthur</dc:creator></item><item><title>The Return of: Can Rust speed up your Azure Functions?</title><link>https://blog.x5ff.xyz/blog/azure-functions-wasm-rust-2/</link><description><![CDATA[A couple of weeks back I started using WASM on Azure’s FaaS (serverless/Functions as a Services) and unexpectedly the Rust version of my simple Monte Carlo estimation was considerably slower than its JavaScript counterpart. Clearly this needs more exploring! This time around the challenges will be harder and more practical. Let’s see how WASM and JavaScript perform.]]></description><guid isPermaLink="false">861a1228-9bbd-4d34-b08d-40b191f19abd</guid><pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Claus</dc:creator></item><item><title>Project Ice Puzzle</title><link>http://www.matthewmichelotti.com/games/project_ice_puzzle/</link><description><![CDATA[This game was coded in Rust and is playable in web browsers by means of WebAssembly, WebGL and Howler.js. The software I developed is partly open source in the form of Gate, which is the Rust library that powers this game and can power other similar games. Special thanks to the tools I used to create assets: Gimp, FL Studio and BFXR.]]></description><guid isPermaLink="false">645c96b0-5f66-4c4d-a8ee-d145298bc63d</guid><pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Matthew Michelotti</dc:creator></item><item><title>Our Vision for Rust and WebAssembly</title><link>https://rustwasm.github.io/2018/06/25/vision-for-rust-and-wasm.html</link><description><![CDATA[Rust and WebAssembly can combine in many delightful ways. To consolidate our efforts and have the largest, most-positive impact we can, the Rust and WebAssembly domain working group is focusing on one vision:

Surgically inserting Rust compiled to WebAssembly should be the best choice for speeding up the most performance-sensitive JavaScript code paths. Do not throw away your existing code base, because Rust plays well with others. Regardless of whether you are a Rust or Web developer, your natural workflow shouldn’t change because Rust compiled to wasm integrates seamlessly into your preferred tools.

This blog post will expand on these aspirations and describe where we stand in relation to them right now. In a series of follow up posts, we will talk about the next steps for each major component of the Rust and WebAssembly ecosystem.]]></description><guid isPermaLink="false">33738eab-7a95-4e28-b819-f22f8362100e</guid><pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate><dc:creator>rustwasm</dc:creator></item><item><title>How much of npm can you break?</title><link>https://mrandri19.github.io/2018/06/24/how-much-of-npm-will-you-break.html</link><description><![CDATA[The idea was simple, choose a package and recursively traverse npm to find all of the packages that depend upon it, after all the npm website offers a ‘Dependents’ tab on a package’s page. I had not anticipated the issues that made this an interesting technical problem.]]></description><guid isPermaLink="false">a928dd6a-2db7-4366-bd96-74134b4094b8</guid><pubDate>Sun, 24 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Andrea Cognolato</dc:creator></item><item><title>Rust with Rocket + Elm running on Heroku</title><link>http://ethanfrei.com/posts/rust-with-rocket-elm-running-on-heroku.html</link><description><![CDATA[I had this goal of making a web app that was very fast, stable and easy to deploy. This is what I was hoping to accomplish: strongly typed server-side and client-side languages (Rust & Elm respectively), push-button deployments to the cloud with free hosting initially, and sub-second response times for API calls and page loads. With this setup, I think I'm well on my way to accomplishing each of these.]]></description><guid isPermaLink="false">f8a137b7-ce7d-4553-bcec-6170350dc1f2</guid><pubDate>Sun, 24 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Ethan Frei</dc:creator></item><item><title>Streaming gRPC with Rust</title><link>https://medium.com/@KevinHoffman/streaming-grpc-with-rust-d978fece5ef6</link><description><![CDATA[Lately I’ve been working on a side project that involves aggregating the indexes of media libraries and allowing one library to “lend” a file to another. For example, I might use this system if I want my home tower to “lend” a file to my laptop before I get on a plane. I’ll be committing my work-in-progress on this project to github shortly (just want to get an MVP working first and do some refactoring), but I thought I would take a step back for a moment and share my thoughts on one aspect of this project: gRPC. In particular: gRPC streaming.]]></description><guid isPermaLink="false">87c1e68b-e1e6-44d5-be4b-212eb2bdc88f</guid><pubDate>Wed, 20 Jun 2018 17:43:39 +0000</pubDate><dc:creator>Kevin Hoffman</dc:creator></item><item><title>Writing a Web API Client in Rust (Part 3)</title><link>https://theomn.com/rust-web-api-client-part-03/</link><description><![CDATA[The 3rd of a multi-part series where we build a small REST client for the Marvel Comics Web API using Rust. This time we focus on how to use the hyper and futures crates to make HTTP requests to a Web API, then use serde to parse JSON data from the response.]]></description><guid isPermaLink="false">4ebce195-067c-45fa-be45-7c589426953b</guid><pubDate>Sun, 17 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Owen Nelson</dc:creator></item><item><title>Conspiracies, Dissemination, and REST APIs</title><link>https://medium.com/@rippinrobr_66849/3-conspiracies-dissemination-and-rest-apis-41858f8d9850</link><description><![CDATA[Welcome to the third post in a series where I share my experience learning Rust. I’m building out a conspiracy theories API to help me get more familiar with Rust and have a little fun. Since I am new to Rust, I welcome all feedback, especially from developers who have been using Rust for quite some time. Leave a comment below or send your feedback via Twitter. Now it’s time to draw the blackout curtains, put on your foil-lined hat on and start serving up conspiracies from a REST API.]]></description><guid isPermaLink="false">36eccf86-2b85-4ffc-b7e7-7af422cb10ac</guid><pubDate>Thu, 14 Jun 2018 12:28:03 +0000</pubDate><dc:creator>Rob Rowe</dc:creator></item><item><title>actix – an actor framework for the Rust programming language</title><link>https://simplabs.com/blog/2018/06/11/actix.html</link><description><![CDATA[The “actor model” is the main primitive that powers the Erlang programming language and its descendant, Elixir. It describes a programming model that simplifies the development of concurrent and multi-threaded applications or even applications that run distributed on multiple machines.

The complexity of actors is relatively low, and that is because the complexity is usually hidden in the actor frameworks that are used to run these types of primitives in the end. One example of such an actor framework is actix, which we will have a closer look at now.]]></description><guid isPermaLink="false">a9263a5d-5853-4f5b-8556-28d18dda0f7d</guid><pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Tobias Bieniek</dc:creator></item><item><title>Actix::From(Rocket)</title><link>https://noyez.gitlab.io/post/2018-06-11-rocket-to-actix/</link><description><![CDATA[I was inspired by Nick’s post to migrate my code from Rocket to Actix. I have also been nagged by recent struggles with the nightly compiler and its compatibility with all the other crates that I use and other the platforms that I use; my code runs on 32⁄64 bit arm and 32⁄64 bit x86. When I started using Rocket around a year ago, the nightly compiler was just as stable as the stable compiler, but things have changed as rust is a growing eco system.

For me, once the differences below were addressed, porting the code was relatively straightforward. The vast majority of my code remained the same.]]></description><guid isPermaLink="false">70c7595e-f384-40d3-a8c9-9f00466fe5d5</guid><pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate><dc:creator>noyez</dc:creator></item><item><title>hyper v0.12</title><link>http://seanmonstar.com/post/174480374517/hyper-v012</link><description><![CDATA[Today sees the release of hyper v0.12.0, a fast and correct HTTP library for the Rust language.

This release adds support for several new features, while taking the opportunity to fix some annoyances, and improve the extreme speeds!]]></description><guid isPermaLink="false">9bf3f488-ace2-43b6-9f6b-3071241f7ed2</guid><pubDate>Fri,  1 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Sean McArthur</dc:creator></item><item><title>HTTP Crate with URL Support &amp; a Simple HTTP Client</title><link>https://pyfisch.org/blog/http-with-url/</link><description><![CDATA[While the http crate generally has a great API I have been unsatisfied how it handles URLs. To create a HTTP request a full URL is needed with a scheme (http/https), authority (example.org) and a path (/search?q=rust) but http does enforce this and allows you to only state the path. This means both clients and servers are either unable to determine protocol and and authority information or have to do this manually.]]></description><guid isPermaLink="false">d7340b81-5e94-4123-b830-c5cbbfa154d2</guid><pubDate>Fri,  1 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Pyfisch</dc:creator></item><item><title>Writing a Simple Github Webhook Responder With actix-web</title><link>http://danielwelch.github.io/rust-web-service.html</link><description><![CDATA[Creating a simple web service for automating Travis builds across repositories using actix-web and Github webhooks.]]></description><guid isPermaLink="false">86c89dda-a4f0-45bd-a0d0-616b8d687957</guid><pubDate>Thu, 31 May 2018 11:05:00 -0400</pubDate><dc:creator>Daniel Welch</dc:creator></item><item><title>Mix Rust Code (WebAssembly) with Vue Component</title><link>https://busy.org/@drsensor/mix-rust-code-webassembly-with-vue-component-basic</link><description><![CDATA[In this tutorials, we will try mixing Rust code with Javascript by compiling Rust code as .wasm then use it in Vue Component.]]></description><guid isPermaLink="false">342c3a2c-88a7-4e26-a6ea-97c3257daf2d</guid><pubDate>Thu, 24 May 2018 19:01:00 +0000</pubDate><dc:creator>drsensor</dc:creator></item><item><title>Wicked Fast Web Servers in Rust</title><link>https://medium.com/@MertzAlertz/wicked-fast-web-servers-in-rust-4947688426bc</link><description><![CDATA[I write code for the web every day, and as such, I naturally wanted to find a web server that I could write some beautiful code in Rust with. There are a few options out there, Actix, Rocket, but none of them are quite as simple and succinct as KoaJS for node. As such, I wanted to write something as simple as Koa and as performant as a Rust framework, and I did. With that, I give you Thruster, an elegant, performant, web server written in Rust.]]></description><guid isPermaLink="false">4b44fb81-4b16-4681-a09a-a93cb82ccbc0</guid><pubDate>Tue, 22 May 2018 23:26:19 +0000</pubDate><dc:creator>Pete Mertz</dc:creator></item><item><title>Snowhash in Rust with WASM</title><link>https://joshleeb.com/posts/rust-wasm-snowhash/</link><description><![CDATA[A little while ago I came across this Snowflake generator. It’s a project by Raph Levein that takes a hash string and uses it to procedurally generate a unique snowflake. He explains that the original motivation was as a cryptographically secure visual hash, so that people would reliably be able to tell by visual inspection whether two hashes were identical. I thought that was a pretty cool idea.]]></description><guid isPermaLink="false">e67229c7-9d09-49e8-9558-ca8e89a53d4f</guid><pubDate>Tue, 22 May 2018 00:00:00 +0000</pubDate><dc:creator>Josh Leeb-du Toit</dc:creator></item><item><title>Migrating to Actix Web from Rocket for Stability</title><link>https://nbsoftsolutions.com/blog/migrating-to-actix-web-from-rocket-for-stability</link><description><![CDATA[I previously wrote an article back in November 2017: Replacing Elasticsearch with Rust and SQLite. In it, I needed to create a few HTTP endpoints that ingested JSON, perform a database lookup, and return JSON. Very simple. No query / path parameters, authentication, authorization, H2, or TLS. I didn’t understand how stability was such an important feature. I was familiar with needing new versions of the nightly compiler to stay current with clippy and rustfmt, but it was a blindspot when it came to dependencies.]]></description><guid isPermaLink="false">35d0dec8-e4fb-4be0-b87c-ed5dd39056b8</guid><pubDate>Mon, 21 May 2018 00:00:00 +0000</pubDate><dc:creator>Nick Babcock</dc:creator></item><item><title>Creating a Rusty Rocket fuelled with Diesel</title><link>https://lankydanblog.com/2018/05/20/creating-a-rusty-rocket-fuelled-with-diesel/</link><description><![CDATA[Here I go with my first post that fully focuses on Rust. After spending a few months doing a bit here and there I decided to just dive right in as I was going through the Rust book at too slow a pace to keep myself interested. So, in this post I decided to write about setting up a simple REST API which is something that I have done in Java plenty of times but with Rust it is a different story.]]></description><guid isPermaLink="false">f993c9a2-3b8e-455b-ad6e-354051f38863</guid><pubDate>Sun, 20 May 2018 17:53:11 +0000</pubDate><dc:creator>Dan Newton</dc:creator></item><item><title>Writing a Web API Client in Rust (Part 2)</title><link>https://theomn.com/rust-web-api-client-part-02/</link><description><![CDATA[The 2nd of a multi-part series where we build a small REST client for the Marvel Comics Web API using Rust. This time we focus on how to use the hyper and futures crates to make HTTP requests to a Web API, then use serde to parse JSON data from the response.]]></description><guid isPermaLink="false">502f20f5-50e1-4741-a852-2c65ef867bba</guid><pubDate>Sat, 19 May 2018 00:00:00 +0000</pubDate><dc:creator>Owen Nelson</dc:creator></item><item><title>A Small Rust API with Actix</title><link>https://stevezeidner.com/blog/rust-actix-api/</link><description><![CDATA[I had the need for a very small API for this website. So small, in fact, that only one endpoint was required. I've been doing a lot of development in Rust lately, so naturally Rust seemed like a good candidate to build this API in. I also wanted to try out a newer Rust web framework called Actix web. It claims to be a "small, pragmatic, and extremely fast rust web framework", which sounded perfect for what I needed.]]></description><guid isPermaLink="false">58fff202-4974-4db4-93ef-ad074e609a70</guid><pubDate>Thu, 10 May 2018 00:00:00 +0000</pubDate><dc:creator>Steve Zeidner</dc:creator></item><item><title>WASM+Rust Tutorial</title><link>https://freemasen.github.io/wasm_tutorial/</link><description><![CDATA[A project used for a meetup talk about getting started with rust & wasm]]></description><guid isPermaLink="false">91fb984c-4084-4b2c-84e5-ebda94169657</guid><pubDate>Thu,  3 May 2018 07:30:00 +1000</pubDate><dc:creator>Robert Masen</dc:creator></item><item><title>Making microservices in Rust</title><link>https://maccoda.github.io/rust-web-frameworks/</link><description><![CDATA[This is a small idea that I have been wanting to put together for quite some time now and finally have managed to get the time and most importantly experience in Rust to finally try something a little more than just small projects. One area that I think Rust is really making a decent headway in in the web domain, which I am assuming is likely due to its origin from Firefox. So I wanted to see if I could put together a really basic CRUD micro-service doing the ever so original TODO functionality.]]></description><guid isPermaLink="false">7f406b9a-226a-4498-b708-59b14401a9af</guid><pubDate>Tue,  1 May 2018 00:00:00 +0000</pubDate><dc:creator>Dylan Maccora</dc:creator></item><item><title>Can Rust speed up your Azure Functions?</title><link>https://blog.x5ff.xyz/blog/azure-functions-wasm-rust/</link><description><![CDATA[Using Rust on Microsoft Azure Functions with web assembly]]></description><guid isPermaLink="false">2cf6bb87-842b-4d53-906d-6036d7e3eaf5</guid><pubDate>Mon, 30 Apr 2018 00:00:00 +0000</pubDate><dc:creator>Claus</dc:creator></item><item><title>Using LLVM from Rust, to generate WebAssembly</title><link>https://medium.com/@jayphelps/using-llvm-from-rust-to-generate-webassembly-93e8c193fdb4</link><description><![CDATA[Hopefully this post helps jumpstart those who want to use LLVM from Rust. I also include how one could use this to generate WebAssembly, but the first part of this post is target platform agnostic.]]></description><guid isPermaLink="false">64356c91-6a6c-40d2-acd9-cbde11eaace4</guid><pubDate>Sun, 29 Apr 2018 00:49:36 +0000</pubDate><dc:creator>Jay Phelps</dc:creator></item><item><title>How does dynamic dispatch work in WebAssembly?</title><link>http://fitzgeraldnick.com/2018/04/26/how-does-dynamic-dispatch-work-in-wasm.html</link><description><![CDATA[C, C++, and Rust all have some capability for dynamic dispatch: function pointers, virtual methods, and trait objects. On native targets like x86, all these forms compile down into a jump to a dynamic address. What do these forms compile down into when targeting WebAssembly?]]></description><guid isPermaLink="false">2925c583-7c70-400d-8f50-f8c06b3dc0fb</guid><pubDate>Thu, 26 Apr 2018 00:00:00 -0700</pubDate><dc:creator>Nick Fitzgerald</dc:creator></item><item><title>Hello wasm-pack!</title><link>https://hacks.mozilla.org/2018/04/hello-wasm-pack/</link><description><![CDATA[wasm-pack is a tool for assembling and packaging Rust crates that target WebAssembly. These packages can be published to the npm Registry and used alongside other packages. This means you can use them side-by-side with JS and other packages, and in many kind of applications, be it a Node.js server side app, a client-side application bundled by Webpack, or any other sort of application that uses npm dependencies. You can find wasm-pack on crates.io and GitHub.]]></description><guid isPermaLink="false">43c290f5-4178-431d-9874-5e24cde01299</guid><pubDate>Wed, 18 Apr 2018 14:54:13 +0000</pubDate><dc:creator>Ashley Williams</dc:creator></item><item><title>How To Optimize JavaScript Code with Rust Part 1</title><link>https://codeburst.io/how-to-optimize-javascript-code-with-rust-part-1-20f00885608f</link><description><![CDATA[In the first part of this Rust series, we’re going to walk through setting up Rust, writing Rust code, exporting the code, and using the code in our Node environment. By the end of this article, you’ll see how painless marrying Rust with JavaScript is.]]></description><guid isPermaLink="false">69dd67c0-ef9b-4a6c-9a60-2de96c36113a</guid><pubDate>Mon, 16 Apr 2018 12:04:37 +0000</pubDate><dc:creator>Raji Ayinla</dc:creator></item><item><title>JavaScript Interop with WebAssembly</title><link>https://medium.com/@KevinHoffman/javascript-interop-with-webassembly-2c69a3db19e9</link><description><![CDATA[In my last post I provided an introduction to WebAssembly — what is it, why do we care, and what does it look like? In this post, I’d like to explore a little bit of the inner workings of how we can communicate between Rust (wasm) and JavaScript. As I mentioned in the last post, WebAssembly is neither JavaScript nor some strongly-typed dialect. It is a standalone, compiled, portable binary. How you send data into and get data out of that binary involves some subtle nuances about how WebAssembly works.]]></description><guid isPermaLink="false">fc25e5f3-66d9-429d-8ca8-c1882a5083d6</guid><pubDate>Thu, 12 Apr 2018 14:14:05 +0000</pubDate><dc:creator>Kevin Hoffman</dc:creator></item><item><title>Writing An NES Emulator with Rust and WebAssembly</title><link>https://medium.com/@bokuweb17/writing-an-nes-emulator-with-rust-and-webassembly-d64de101c49d</link><description><![CDATA[I wrote the NES emulator with Rust and WebAssembly to learn Rust. It’s not perfect and have some audio bugs, but it’s good enough to play Super Mario bros.]]></description><guid isPermaLink="false">d65aaebc-e17b-421b-86e8-1cc9c63a0408</guid><pubDate>Wed, 11 Apr 2018 14:30:56 +0000</pubDate><dc:creator>bokuweb</dc:creator></item><item><title>The case for deadlines</title><link>https://gist.github.com/alkis/9510a840f1965185ab0a02cb59761dd8</link><description><![CDATA[Rust aims to be the foundation of fast and robust software. A thorn in that side is the choice of timeout-centric APIs for I/O and multithreading. I posit this was a bad choice and it needs to be remedied as soon as possible before more APIs proliferate this (possibly accidental) design decision.]]></description><guid isPermaLink="false">a89cb196-c162-4c49-b1d5-642547265f39</guid><pubDate>Tue, 10 Apr 2018 06:28:29 +0000</pubDate><dc:creator>Alkis Evlogimenos</dc:creator></item><item><title>Getting Yew to work with Rust on ‘Bash on Ubuntu on Windows’</title><link>https://medium.com/@raymondsiu/getting-yew-to-work-with-rust-on-bash-on-ubuntu-on-windows-in-windows-10-790a006e6805</link><description><![CDATA[Yew is a new web framework written in Rust that takes concepts from React JS and Elm. It takes the two web libraries I love and combines them with the new language I love — Rust. I wrote this article because I haven’t found a lot of documentation online on how to get the Yew examples running, and I’m sure there will be people that will run into the same problems I did. I wrote this in hopes that it helps someone out there.]]></description><guid isPermaLink="false">61846190-2e41-4590-95c0-172d767aacc1</guid><pubDate>Sun,  8 Apr 2018 23:14:01 +0000</pubDate><dc:creator>Raymond Siu</dc:creator></item><item><title>Announcing Tower — A library for writing robust network services with Rust</title><link>https://medium.com/@carllerche/announcing-tower-a-library-for-writing-robust-network-services-with-rust-67273f052c40</link><description><![CDATA[Tower is a library for writing robust network services with Rust. It is being built in service of the Conduit proxy, which is using the Tokio ecosystem to build the world’s smallest, fastest, most secure network proxy. Tower will also provide a batteries included experience for implementing HTTP and gRPC services.]]></description><guid isPermaLink="false">0ea6b48d-d3a3-4969-a053-37d6e697de85</guid><pubDate>Fri,  6 Apr 2018 19:40:38 +0000</pubDate><dc:creator>Carl Lerche</dc:creator></item><item><title>Cloudflare Argo Tunnel with Rust+Raspberry Pi</title><link>https://blog.cloudflare.com/cloudflare-argo-tunnel-with-rust-and-raspberry-pi/</link><description><![CDATA[Serving content from a Rust web server running on a Raspberry Pi from your home to the world, with a Cloudflare Argo Tunnels.]]></description><guid isPermaLink="false">9c6d2c06-5031-414d-b743-850c4ddebdc3</guid><pubDate>Fri,  6 Apr 2018 14:00:00 +0000</pubDate><dc:creator>Steven Pack</dc:creator></item><item><title>Improving GStreamer performance with tokio</title><link>https://coaxion.net/blog/2018/04/improving-gstreamer-performance-on-a-high-number-of-network-streams-by-sharing-threads-between-elements-with-rusts-tokio-crate/</link><description><![CDATA[For one of our customers at Centricular we were working on a quite interesting project. Their use-case was basically to receive an as-high-as-possible number of audio RTP streams over UDP, transcode them, and then send them out via UDP again. Due to how GStreamer usually works, they were running into some performance issues.

This blog post will describe the first set of improvements that were implemented for this use-case, together with a minimal benchmark and the results. My colleague Mathieu will follow up with one or two other blog posts with the other improvements and a more full-featured benchmark.

The short version is that CPU usage decreased by about 65-75%, i.e. allowing 3-4x more streams with the same CPU usage. Also parallelization works better and usage of different CPU cores is more controllable, allowing for better scalability. And a fixed, but configurable number of threads is used, which is independent of the number of streams.]]></description><guid isPermaLink="false">98f65a4a-8501-45e4-bda8-48d5d01306ba</guid><pubDate>Thu,  5 Apr 2018 15:21:06 +0000</pubDate><dc:creator>Sebastian Dröge</dc:creator></item><item><title>Welcome to this week in Rust and WebAssembly!</title><link>https://rustwasm.github.io/2018/04/05/welcome-to-this-week-in-rust.html</link><description><![CDATA[Hello and welcome to the first issue of This Week in Rust and WebAssembly! Rust is a systems language pursuing the trifecta: safety, concurrency, and speed. WebAssembly is designed as a portable target for compilation of high-level languages like C, C++, and Rust, enabling deployment on the web for client and server applications. This is a weekly summary of its progress and community.]]></description><guid isPermaLink="false">8c1bc2c9-1eeb-4a19-ac6b-d11e2a7c6f63</guid><pubDate>Thu,  5 Apr 2018 00:00:00 +0000</pubDate><dc:creator>Sendil Kumar N</dc:creator></item><item><title>Making a 100% Statically-Linked, Single-File Web App with React and Rust</title><link>https://anderspitman.net/2018/04/04/static-react-rust-webapp/</link><description><![CDATA[This tutorial will cover the basics of creating a minimal React app which can be deployed as a statically-linked Rust binary. What this accomplishes is having all of your code, including HTML, JavaScript, CSS, and Rust, packaged into a single file that will run on pretty much any 64-bit Linux system, regardless of the kernel version or installed libraries.]]></description><guid isPermaLink="false">14922be0-52bc-4711-9fc1-aeec98e39c1d</guid><pubDate>Wed,  4 Apr 2018 21:21:00 +0000</pubDate><dc:creator>Anders Pitman</dc:creator></item><item><title>JavaScript to Rust and Back Again: A wasm-bindgen Tale</title><link>https://hacks.mozilla.org/2018/04/javascript-to-rust-and-back-again-a-wasm-bindgen-tale/</link><description><![CDATA[Recently we’ve seen how WebAssembly is incredibly fast to compile, speeding up JS libraries, and generating even smaller binaries. We’ve even got a high-level plan for better interoperability between the Rust and JavaScript communities, as well as other web programming languages. As alluded to in that previous post, I’d like to dive into more detail about a specific component, wasm-bindgen.]]></description><guid isPermaLink="false">d110dc0e-7a78-42c3-8326-5b5ec58f8875</guid><pubDate>Wed,  4 Apr 2018 14:58:40 +0000</pubDate><dc:creator> Alex Crichton</dc:creator></item><item><title>Using Rust Modules in JavaScript/Web Development (Part 3/ 3) [NodeJS]</title><link>https://medium.com/@atulanand94/using-rust-modules-for-javascript-web-development-part-3-3-nodejs-7c71e4ae23fe</link><description><![CDATA[Please read the Part 1 of the series here :]]></description><guid isPermaLink="false">fc550900-512d-4f82-b40a-25a8ef86d513</guid><pubDate>Tue,  3 Apr 2018 14:29:28 +0000</pubDate><dc:creator>Atul</dc:creator></item><item><title>Using Rust Modules in JavaScript/Web Development (Part 2 / 3) [Webpack]</title><link>https://medium.com/@atulanand94/using-rust-modules-for-javascript-web-development-part-2-7a86eaec5ee9</link><description><![CDATA[Part 1 of the post was primarily concerned with integrating rust modules with JavaScript with the help of wasm. But that involved a lot of manual procedures. Another more streamlined way is using webpack.]]></description><guid isPermaLink="false">37aa0f60-d86c-446d-848c-52b45777ae2c</guid><pubDate>Tue,  3 Apr 2018 10:15:39 +0000</pubDate><dc:creator>Atul</dc:creator></item><item><title>Using Rust Modules in JavaScript/Web Development (Part 1 / 3) [Plain JS]</title><link>https://medium.com/@atulanand94/using-rust-modules-for-javascript-web-development-part-i-e6dec27df7b2</link><description><![CDATA[One of the promising reasons I started learning rust is that it can be used to build modules for web using web-assembly. This blog post will cover how you can build a rust module and use it as regular package in the JavaScript environment. Remember rust is not meant to replace JS. I see it as complementary add-on to the places where JS is comparatively slower (heavy computations).]]></description><guid isPermaLink="false">229aab36-08f5-4288-a9df-c804ad6c2b56</guid><pubDate>Tue,  3 Apr 2018 06:22:23 +0000</pubDate><dc:creator>Atul</dc:creator></item><item><title>HTTP upgrades with hyper</title><link>http://seanmonstar.com/post/172531530657/http-upgrades-with-hyper</link><description><![CDATA[The newest release of hyper includes some lower-level connection APIs for both the server and client. Notably, this allows using hyper send and receive HTTP upgrade requests. The most popular of these is Websockets.]]></description><guid isPermaLink="false">0cb16bc7-daff-4747-81e5-d4455d33fc43</guid><pubDate>Mon,  2 Apr 2018 14:34:53 -0700</pubDate><dc:creator>Sean McArthur</dc:creator></item><item><title>Removing Connection State In mob</title><link>http://hermanradtke.com/2018/03/29/removing-connection-state-from-mob.html</link><description><![CDATA[I started writing mob, an multi-echo server using mio, in 2015. I coded mob into a mostly working state and then left it mostly alone, only updating it to work with the latest stable mio. Recently, I started looking at the code again and had the urge to improve it. In a previous post, I talked about managing the state of connections in mob. In this post, I will walk through what I did to remove the need to track connection state. I wanted to remove the state because the implementation required an O(n) operation every tick of the mio event loop. It also added a fair amount of complexity to the code.]]></description><guid isPermaLink="false">d14f3e75-4047-441e-a67b-fc0de042845a</guid><pubDate>Thu, 29 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Herman J. Radtke III</dc:creator></item><item><title>Rust + Node.js are awesome!</title><link>https://itnext.io/rust-node-js-are-awesome-a50d63411773</link><description><![CDATA[Blazing fast, low requirements, computationally intensive operations on Node.js using Rust]]></description><guid isPermaLink="false">07825eb3-aaab-46c5-b7e4-680857d73750</guid><pubDate>Tue, 27 Mar 2018 21:50:20 +0000</pubDate><dc:creator>Benjamín Calderón</dc:creator></item><item><title>Touring a Fast, Safe, and Complete(ish) Web Service in Rust</title><link>https://brandur.org/rust-web</link><description><![CDATA[For years now, I’ve been having a crisis of faith in interpreted languages. They’re fast and fun to work in at small scale, but when you have a project that gets big, their attractive veneer quickly washes away. A big Ruby or JavaScript (just to name a few) program in production is a never ending game of whack-a-mock – you fix one problem only to find a new one somewhere else. No matter how many tests you write, or how well-disciplined your team, any new development is sure to introduce a stream of bugs that will need to be shored up over the course of months or years.

Central to the problem are the edges. People will reliably do a good job of building and testing the happy paths, but as humans we’re terrible at considering the edge conditions, and it’s those edges and corners that cause trouble over the years that a program is in service.]]></description><guid isPermaLink="false">9f012379-d71a-4c45-b9db-12c4871070e7</guid><pubDate>Tue, 27 Mar 2018 14:45:57 +0000</pubDate><dc:creator>Brandur Leach</dc:creator></item><item><title>Building a Restful CRUD API with Rust</title><link>https://medium.com/sean3z/building-a-restful-crud-api-with-rust-1867308352d8</link><description><![CDATA[Since my initial Node/Rust REST comparison, I’ve wanted to follow up with a comprehensive guide for getting simple CRUD operations up and running in Rust.]]></description><guid isPermaLink="false">e32bb679-4afa-48d9-ab51-d589a590348e</guid><pubDate>Mon, 19 Mar 2018 04:29:33 +0000</pubDate><dc:creator>Sean Wragg</dc:creator></item><item><title>Multicasting in Rust</title><link>https://bluejekyll.github.io/blog/rust/2018/03/18/multicasting-in-rust.html</link><description><![CDATA[A brief post to help others multicast in Rust]]></description><guid isPermaLink="false">dae19f32-236c-4329-b26d-e6c47b2631d3</guid><pubDate>Sun, 18 Mar 2018 07:00:00 +0000</pubDate><dc:creator>Benjamin Fry</dc:creator></item><item><title>Building a DNS server in Rust</title><link>https://github.com/EmilHernvall/dnsguide</link><description><![CDATA[With the combined goal of gaining a deep understanding of DNS, of doing something interesting with Rust, and of scratching some of my own itches, I originally set out to implement my own DNS server. This document is not a truthful chronicle of that journey, but rather an idealized version of it, without all the detours I ended up taking. We'll gradually implement a full DNS server, starting from first principles.]]></description><guid isPermaLink="false">44e96573-f8b3-4577-8a76-1cbc8a65ec8b</guid><pubDate>Fri, 16 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Emil Hernvall</dc:creator></item><item><title>Making WebAssembly better for Rust &amp; for all languages</title><link>https://hacks.mozilla.org/2018/03/making-webassembly-better-for-rust-for-all-languages/</link><description><![CDATA[To be a useful as a web language, Rust needs to work well with the JavaScript ecosystem. We have some work to do to get there, and fortunately that work ...]]></description><guid isPermaLink="false">bf12d6fd-0aea-4d74-b3a7-02a538d210d3</guid><pubDate>Wed, 14 Mar 2018 15:02:52 +0000</pubDate><dc:creator>Lin Clark</dc:creator></item><item><title>Parc3l: Combining Three.js, Rust, and WebAssembly!</title><link>https://medium.com/@cwervo/parc3l-combining-three-js-rust-and-webassembly-c1e643ef7681</link><description><![CDATA[WebAssembly has been interesting me lately, specifically the prospect of doing arithmetically-intensive operations with it, not unlike the fantastic physics engine Emscripten port Ammo.js. Compiling something like that is out of the scope of this little post (but should be getting easier!), and I’ve left some links at the bottom so you can clear more about WebAssembly if you’re interested.]]></description><guid isPermaLink="false">39f186f6-b177-43e6-9b4c-7ffe689926e7</guid><pubDate>Mon, 12 Mar 2018 14:34:23 +0000</pubDate><dc:creator>Andres Cuervo</dc:creator></item><item><title>Writing a Simple IPFS Crawler</title><link>https://gkbrk.com/2018/03/writing-a-simple-ipfs-crawler/</link><description><![CDATA[IPFS is a peer-to-peer protocol that allows you to access and publish content in a decentralized fashion. It uses hashes to refer to files. Short of someone posting hashes on a website, discoverability of content is pretty low. In this article, we’re going to write a very simple crawler for IPFS.
It’s challenging to have a traditional search engine in IPFS because content rarely links to each other. But there is another way than just blindly following links like a traditional crawler.]]></description><guid isPermaLink="false">e03aa0e5-bb05-48f0-a4a4-0796d14d1115</guid><pubDate>Mon, 12 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Gökberk Yaltıraklı</dc:creator></item><item><title>Crashing a Rust Hyper server with a Denial of Service attack</title><link>https://klausi.github.io/rustnish/2018/03/11/crashing-a-rust-hyper-server-with-a-denial-of-service-attack.html</link><description><![CDATA[I’m writing a reverse proxy in Rust using Hyper and I want to measure performance a bit to know if I’m doing something terribly wrong. By doing that I discovered a Denial of Service vulnerability in Hyper when IO errors are not properly handled. Note that a workaround has been released in the meantime in Hyper 0.11.20, more background info can be found in this Hyper issue.]]></description><guid isPermaLink="false">4d94c5ba-199d-44c2-9148-7a6bbff699d0</guid><pubDate>Sun, 11 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Klaus Purer</dc:creator></item></channel></rss>