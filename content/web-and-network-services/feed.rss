<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - Web and Network Services</title><link>https://readrust.net/</link><description>Web and Network Services posts on Read Rust</description><item><title>Project Ice Puzzle</title><link>http://www.matthewmichelotti.com/games/project_ice_puzzle/</link><description><![CDATA[This game was coded in Rust and is playable in web browsers by means of WebAssembly, WebGL and Howler.js. The software I developed is partly open source in the form of Gate, which is the Rust library that powers this game and can power other similar games. Special thanks to the tools I used to create assets: Gimp, FL Studio and BFXR.]]></description><guid isPermaLink="false">645c96b0-5f66-4c4d-a8ee-d145298bc63d</guid><pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Matthew Michelotti</dc:creator></item><item><title>Our Vision for Rust and WebAssembly</title><link>https://rustwasm.github.io/2018/06/25/vision-for-rust-and-wasm.html</link><description><![CDATA[Rust and WebAssembly can combine in many delightful ways. To consolidate our efforts and have the largest, most-positive impact we can, the Rust and WebAssembly domain working group is focusing on one vision:

Surgically inserting Rust compiled to WebAssembly should be the best choice for speeding up the most performance-sensitive JavaScript code paths. Do not throw away your existing code base, because Rust plays well with others. Regardless of whether you are a Rust or Web developer, your natural workflow shouldn’t change because Rust compiled to wasm integrates seamlessly into your preferred tools.

This blog post will expand on these aspirations and describe where we stand in relation to them right now. In a series of follow up posts, we will talk about the next steps for each major component of the Rust and WebAssembly ecosystem.]]></description><guid isPermaLink="false">33738eab-7a95-4e28-b819-f22f8362100e</guid><pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate><dc:creator>rustwasm</dc:creator></item><item><title>Streaming gRPC with Rust</title><link>https://medium.com/@KevinHoffman/streaming-grpc-with-rust-d978fece5ef6</link><description><![CDATA[Lately I’ve been working on a side project that involves aggregating the indexes of media libraries and allowing one library to “lend” a file to another. For example, I might use this system if I want my home tower to “lend” a file to my laptop before I get on a plane. I’ll be committing my work-in-progress on this project to github shortly (just want to get an MVP working first and do some refactoring), but I thought I would take a step back for a moment and share my thoughts on one aspect of this project: gRPC. In particular: gRPC streaming.]]></description><guid isPermaLink="false">87c1e68b-e1e6-44d5-be4b-212eb2bdc88f</guid><pubDate>Wed, 20 Jun 2018 17:43:39 +0000</pubDate><dc:creator>Kevin Hoffman</dc:creator></item><item><title>Writing a Web API Client in Rust (Part 3)</title><link>https://theomn.com/rust-web-api-client-part-03/</link><description><![CDATA[The 3rd of a multi-part series where we build a small REST client for the Marvel Comics Web API using Rust. This time we focus on how to use the hyper and futures crates to make HTTP requests to a Web API, then use serde to parse JSON data from the response.]]></description><guid isPermaLink="false">4ebce195-067c-45fa-be45-7c589426953b</guid><pubDate>Sun, 17 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Owen Nelson</dc:creator></item><item><title>Conspiracies, Dissemination, and REST APIs</title><link>https://medium.com/@rippinrobr_66849/3-conspiracies-dissemination-and-rest-apis-41858f8d9850</link><description><![CDATA[Welcome to the third post in a series where I share my experience learning Rust. I’m building out a conspiracy theories API to help me get more familiar with Rust and have a little fun. Since I am new to Rust, I welcome all feedback, especially from developers who have been using Rust for quite some time. Leave a comment below or send your feedback via Twitter. Now it’s time to draw the blackout curtains, put on your foil-lined hat on and start serving up conspiracies from a REST API.]]></description><guid isPermaLink="false">36eccf86-2b85-4ffc-b7e7-7af422cb10ac</guid><pubDate>Thu, 14 Jun 2018 12:28:03 +0000</pubDate><dc:creator>Rob Rowe</dc:creator></item><item><title>actix – an actor framework for the Rust programming language</title><link>https://simplabs.com/blog/2018/06/11/actix.html</link><description><![CDATA[The “actor model” is the main primitive that powers the Erlang programming language and its descendant, Elixir. It describes a programming model that simplifies the development of concurrent and multi-threaded applications or even applications that run distributed on multiple machines.

The complexity of actors is relatively low, and that is because the complexity is usually hidden in the actor frameworks that are used to run these types of primitives in the end. One example of such an actor framework is actix, which we will have a closer look at now.]]></description><guid isPermaLink="false">a9263a5d-5853-4f5b-8556-28d18dda0f7d</guid><pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Tobias Bieniek</dc:creator></item><item><title>Actix::From(Rocket)</title><link>https://noyez.gitlab.io/post/2018-06-11-rocket-to-actix/</link><description><![CDATA[I was inspired by Nick’s post to migrate my code from Rocket to Actix. I have also been nagged by recent struggles with the nightly compiler and its compatibility with all the other crates that I use and other the platforms that I use; my code runs on 32⁄64 bit arm and 32⁄64 bit x86. When I started using Rocket around a year ago, the nightly compiler was just as stable as the stable compiler, but things have changed as rust is a growing eco system.

For me, once the differences below were addressed, porting the code was relatively straightforward. The vast majority of my code remained the same.]]></description><guid isPermaLink="false">70c7595e-f384-40d3-a8c9-9f00466fe5d5</guid><pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate><dc:creator>noyez</dc:creator></item><item><title>hyper v0.12</title><link>http://seanmonstar.com/post/174480374517/hyper-v012</link><description><![CDATA[Today sees the release of hyper v0.12.0, a fast and correct HTTP library for the Rust language.

This release adds support for several new features, while taking the opportunity to fix some annoyances, and improve the extreme speeds!]]></description><guid isPermaLink="false">9bf3f488-ace2-43b6-9f6b-3071241f7ed2</guid><pubDate>Fri,  1 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Sean McArthur</dc:creator></item><item><title>HTTP Crate with URL Support &amp; a Simple HTTP Client</title><link>https://pyfisch.org/blog/http-with-url/</link><description><![CDATA[While the http crate generally has a great API I have been unsatisfied how it handles URLs. To create a HTTP request a full URL is needed with a scheme (http/https), authority (example.org) and a path (/search?q=rust) but http does enforce this and allows you to only state the path. This means both clients and servers are either unable to determine protocol and and authority information or have to do this manually.]]></description><guid isPermaLink="false">d7340b81-5e94-4123-b830-c5cbbfa154d2</guid><pubDate>Fri,  1 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Pyfisch</dc:creator></item><item><title>Writing a Simple Github Webhook Responder With actix-web</title><link>http://danielwelch.github.io/rust-web-service.html</link><description><![CDATA[Creating a simple web service for automating Travis builds across repositories using actix-web and Github webhooks.]]></description><guid isPermaLink="false">86c89dda-a4f0-45bd-a0d0-616b8d687957</guid><pubDate>Thu, 31 May 2018 11:05:00 -0400</pubDate><dc:creator>Daniel Welch</dc:creator></item><item><title>Mix Rust Code (WebAssembly) with Vue Component</title><link>https://busy.org/@drsensor/mix-rust-code-webassembly-with-vue-component-basic</link><description><![CDATA[In this tutorials, we will try mixing Rust code with Javascript by compiling Rust code as .wasm then use it in Vue Component.]]></description><guid isPermaLink="false">342c3a2c-88a7-4e26-a6ea-97c3257daf2d</guid><pubDate>Thu, 24 May 2018 19:01:00 +0000</pubDate><dc:creator>drsensor</dc:creator></item><item><title>Wicked Fast Web Servers in Rust</title><link>https://medium.com/@MertzAlertz/wicked-fast-web-servers-in-rust-4947688426bc</link><description><![CDATA[I write code for the web every day, and as such, I naturally wanted to find a web server that I could write some beautiful code in Rust with. There are a few options out there, Actix, Rocket, but none of them are quite as simple and succinct as KoaJS for node. As such, I wanted to write something as simple as Koa and as performant as a Rust framework, and I did. With that, I give you Thruster, an elegant, performant, web server written in Rust.]]></description><guid isPermaLink="false">4b44fb81-4b16-4681-a09a-a93cb82ccbc0</guid><pubDate>Tue, 22 May 2018 23:26:19 +0000</pubDate><dc:creator>Pete Mertz</dc:creator></item><item><title>Snowhash in Rust with WASM</title><link>https://joshleeb.com/posts/rust-wasm-snowhash/</link><description><![CDATA[A little while ago I came across this Snowflake generator. It’s a project by Raph Levein that takes a hash string and uses it to procedurally generate a unique snowflake. He explains that the original motivation was as a cryptographically secure visual hash, so that people would reliably be able to tell by visual inspection whether two hashes were identical. I thought that was a pretty cool idea.]]></description><guid isPermaLink="false">e67229c7-9d09-49e8-9558-ca8e89a53d4f</guid><pubDate>Tue, 22 May 2018 00:00:00 +0000</pubDate><dc:creator>Josh Leeb-du Toit</dc:creator></item><item><title>Migrating to Actix Web from Rocket for Stability</title><link>https://nbsoftsolutions.com/blog/migrating-to-actix-web-from-rocket-for-stability</link><description><![CDATA[I previously wrote an article back in November 2017: Replacing Elasticsearch with Rust and SQLite. In it, I needed to create a few HTTP endpoints that ingested JSON, perform a database lookup, and return JSON. Very simple. No query / path parameters, authentication, authorization, H2, or TLS. I didn’t understand how stability was such an important feature. I was familiar with needing new versions of the nightly compiler to stay current with clippy and rustfmt, but it was a blindspot when it came to dependencies.]]></description><guid isPermaLink="false">35d0dec8-e4fb-4be0-b87c-ed5dd39056b8</guid><pubDate>Mon, 21 May 2018 00:00:00 +0000</pubDate><dc:creator>Nick Babcock</dc:creator></item><item><title>Creating a Rusty Rocket fuelled with Diesel</title><link>https://lankydanblog.com/2018/05/20/creating-a-rusty-rocket-fuelled-with-diesel/</link><description><![CDATA[Here I go with my first post that fully focuses on Rust. After spending a few months doing a bit here and there I decided to just dive right in as I was going through the Rust book at too slow a pace to keep myself interested. So, in this post I decided to write about setting up a simple REST API which is something that I have done in Java plenty of times but with Rust it is a different story.]]></description><guid isPermaLink="false">f993c9a2-3b8e-455b-ad6e-354051f38863</guid><pubDate>Sun, 20 May 2018 17:53:11 +0000</pubDate><dc:creator>Dan Newton</dc:creator></item><item><title>Writing a Web API Client in Rust (Part 2)</title><link>https://theomn.com/rust-web-api-client-part-02/</link><description><![CDATA[The 2nd of a multi-part series where we build a small REST client for the Marvel Comics Web API using Rust. This time we focus on how to use the hyper and futures crates to make HTTP requests to a Web API, then use serde to parse JSON data from the response.]]></description><guid isPermaLink="false">502f20f5-50e1-4741-a852-2c65ef867bba</guid><pubDate>Sat, 19 May 2018 00:00:00 +0000</pubDate><dc:creator>Owen Nelson</dc:creator></item><item><title>A Small Rust API with Actix</title><link>https://stevezeidner.com/blog/rust-actix-api/</link><description><![CDATA[I had the need for a very small API for this website. So small, in fact, that only one endpoint was required. I've been doing a lot of development in Rust lately, so naturally Rust seemed like a good candidate to build this API in. I also wanted to try out a newer Rust web framework called Actix web. It claims to be a "small, pragmatic, and extremely fast rust web framework", which sounded perfect for what I needed.]]></description><guid isPermaLink="false">58fff202-4974-4db4-93ef-ad074e609a70</guid><pubDate>Thu, 10 May 2018 00:00:00 +0000</pubDate><dc:creator>Steve Zeidner</dc:creator></item><item><title>WASM+Rust Tutorial</title><link>https://freemasen.github.io/wasm_tutorial/</link><description><![CDATA[A project used for a meetup talk about getting started with rust & wasm]]></description><guid isPermaLink="false">91fb984c-4084-4b2c-84e5-ebda94169657</guid><pubDate>Thu,  3 May 2018 07:30:00 +1000</pubDate><dc:creator>Robert Masen</dc:creator></item><item><title>Making microservices in Rust</title><link>https://maccoda.github.io/rust-web-frameworks/</link><description><![CDATA[This is a small idea that I have been wanting to put together for quite some time now and finally have managed to get the time and most importantly experience in Rust to finally try something a little more than just small projects. One area that I think Rust is really making a decent headway in in the web domain, which I am assuming is likely due to its origin from Firefox. So I wanted to see if I could put together a really basic CRUD micro-service doing the ever so original TODO functionality.]]></description><guid isPermaLink="false">7f406b9a-226a-4498-b708-59b14401a9af</guid><pubDate>Tue,  1 May 2018 00:00:00 +0000</pubDate><dc:creator>Dylan Maccora</dc:creator></item><item><title>Can Rust speed up your Azure Functions?</title><link>https://blog.x5ff.xyz/blog/azure-functions-wasm-rust/</link><description><![CDATA[Using Rust on Microsoft Azure Functions with web assembly]]></description><guid isPermaLink="false">2cf6bb87-842b-4d53-906d-6036d7e3eaf5</guid><pubDate>Mon, 30 Apr 2018 00:00:00 +0000</pubDate><dc:creator>Claus</dc:creator></item><item><title>Using LLVM from Rust, to generate WebAssembly</title><link>https://medium.com/@jayphelps/using-llvm-from-rust-to-generate-webassembly-93e8c193fdb4</link><description><![CDATA[Hopefully this post helps jumpstart those who want to use LLVM from Rust. I also include how one could use this to generate WebAssembly, but the first part of this post is target platform agnostic.]]></description><guid isPermaLink="false">64356c91-6a6c-40d2-acd9-cbde11eaace4</guid><pubDate>Sun, 29 Apr 2018 00:49:36 +0000</pubDate><dc:creator>Jay Phelps</dc:creator></item><item><title>How does dynamic dispatch work in WebAssembly?</title><link>http://fitzgeraldnick.com/2018/04/26/how-does-dynamic-dispatch-work-in-wasm.html</link><description><![CDATA[C, C++, and Rust all have some capability for dynamic dispatch: function pointers, virtual methods, and trait objects. On native targets like x86, all these forms compile down into a jump to a dynamic address. What do these forms compile down into when targeting WebAssembly?]]></description><guid isPermaLink="false">2925c583-7c70-400d-8f50-f8c06b3dc0fb</guid><pubDate>Thu, 26 Apr 2018 00:00:00 -0700</pubDate><dc:creator>Nick Fitzgerald</dc:creator></item><item><title>Hello wasm-pack!</title><link>https://hacks.mozilla.org/2018/04/hello-wasm-pack/</link><description><![CDATA[wasm-pack is a tool for assembling and packaging Rust crates that target WebAssembly. These packages can be published to the npm Registry and used alongside other packages. This means you can use them side-by-side with JS and other packages, and in many kind of applications, be it a Node.js server side app, a client-side application bundled by Webpack, or any other sort of application that uses npm dependencies. You can find wasm-pack on crates.io and GitHub.]]></description><guid isPermaLink="false">43c290f5-4178-431d-9874-5e24cde01299</guid><pubDate>Wed, 18 Apr 2018 14:54:13 +0000</pubDate><dc:creator>Ashley Williams</dc:creator></item><item><title>How To Optimize JavaScript Code with Rust Part 1</title><link>https://codeburst.io/how-to-optimize-javascript-code-with-rust-part-1-20f00885608f</link><description><![CDATA[In the first part of this Rust series, we’re going to walk through setting up Rust, writing Rust code, exporting the code, and using the code in our Node environment. By the end of this article, you’ll see how painless marrying Rust with JavaScript is.]]></description><guid isPermaLink="false">69dd67c0-ef9b-4a6c-9a60-2de96c36113a</guid><pubDate>Mon, 16 Apr 2018 12:04:37 +0000</pubDate><dc:creator>Raji Ayinla</dc:creator></item><item><title>JavaScript Interop with WebAssembly</title><link>https://medium.com/@KevinHoffman/javascript-interop-with-webassembly-2c69a3db19e9</link><description><![CDATA[In my last post I provided an introduction to WebAssembly — what is it, why do we care, and what does it look like? In this post, I’d like to explore a little bit of the inner workings of how we can communicate between Rust (wasm) and JavaScript. As I mentioned in the last post, WebAssembly is neither JavaScript nor some strongly-typed dialect. It is a standalone, compiled, portable binary. How you send data into and get data out of that binary involves some subtle nuances about how WebAssembly works.]]></description><guid isPermaLink="false">fc25e5f3-66d9-429d-8ca8-c1882a5083d6</guid><pubDate>Thu, 12 Apr 2018 14:14:05 +0000</pubDate><dc:creator>Kevin Hoffman</dc:creator></item><item><title>Writing An NES Emulator with Rust and WebAssembly</title><link>https://medium.com/@bokuweb17/writing-an-nes-emulator-with-rust-and-webassembly-d64de101c49d</link><description><![CDATA[I wrote the NES emulator with Rust and WebAssembly to learn Rust. It’s not perfect and have some audio bugs, but it’s good enough to play Super Mario bros.]]></description><guid isPermaLink="false">d65aaebc-e17b-421b-86e8-1cc9c63a0408</guid><pubDate>Wed, 11 Apr 2018 14:30:56 +0000</pubDate><dc:creator>bokuweb</dc:creator></item><item><title>The case for deadlines</title><link>https://gist.github.com/alkis/9510a840f1965185ab0a02cb59761dd8</link><description><![CDATA[Rust aims to be the foundation of fast and robust software. A thorn in that side is the choice of timeout-centric APIs for I/O and multithreading. I posit this was a bad choice and it needs to be remedied as soon as possible before more APIs proliferate this (possibly accidental) design decision.]]></description><guid isPermaLink="false">a89cb196-c162-4c49-b1d5-642547265f39</guid><pubDate>Tue, 10 Apr 2018 06:28:29 +0000</pubDate><dc:creator>Alkis Evlogimenos</dc:creator></item><item><title>Getting Yew to work with Rust on ‘Bash on Ubuntu on Windows’</title><link>https://medium.com/@raymondsiu/getting-yew-to-work-with-rust-on-bash-on-ubuntu-on-windows-in-windows-10-790a006e6805</link><description><![CDATA[Yew is a new web framework written in Rust that takes concepts from React JS and Elm. It takes the two web libraries I love and combines them with the new language I love — Rust. I wrote this article because I haven’t found a lot of documentation online on how to get the Yew examples running, and I’m sure there will be people that will run into the same problems I did. I wrote this in hopes that it helps someone out there.]]></description><guid isPermaLink="false">61846190-2e41-4590-95c0-172d767aacc1</guid><pubDate>Sun,  8 Apr 2018 23:14:01 +0000</pubDate><dc:creator>Raymond Siu</dc:creator></item><item><title>Announcing Tower — A library for writing robust network services with Rust</title><link>https://medium.com/@carllerche/announcing-tower-a-library-for-writing-robust-network-services-with-rust-67273f052c40</link><description><![CDATA[Tower is a library for writing robust network services with Rust. It is being built in service of the Conduit proxy, which is using the Tokio ecosystem to build the world’s smallest, fastest, most secure network proxy. Tower will also provide a batteries included experience for implementing HTTP and gRPC services.]]></description><guid isPermaLink="false">0ea6b48d-d3a3-4969-a053-37d6e697de85</guid><pubDate>Fri,  6 Apr 2018 19:40:38 +0000</pubDate><dc:creator>Carl Lerche</dc:creator></item><item><title>Cloudflare Argo Tunnel with Rust+Raspberry Pi</title><link>https://blog.cloudflare.com/cloudflare-argo-tunnel-with-rust-and-raspberry-pi/</link><description><![CDATA[Serving content from a Rust web server running on a Raspberry Pi from your home to the world, with a Cloudflare Argo Tunnels.]]></description><guid isPermaLink="false">9c6d2c06-5031-414d-b743-850c4ddebdc3</guid><pubDate>Fri,  6 Apr 2018 14:00:00 +0000</pubDate><dc:creator>Steven Pack</dc:creator></item><item><title>Improving GStreamer performance with tokio</title><link>https://coaxion.net/blog/2018/04/improving-gstreamer-performance-on-a-high-number-of-network-streams-by-sharing-threads-between-elements-with-rusts-tokio-crate/</link><description><![CDATA[For one of our customers at Centricular we were working on a quite interesting project. Their use-case was basically to receive an as-high-as-possible number of audio RTP streams over UDP, transcode them, and then send them out via UDP again. Due to how GStreamer usually works, they were running into some performance issues.

This blog post will describe the first set of improvements that were implemented for this use-case, together with a minimal benchmark and the results. My colleague Mathieu will follow up with one or two other blog posts with the other improvements and a more full-featured benchmark.

The short version is that CPU usage decreased by about 65-75%, i.e. allowing 3-4x more streams with the same CPU usage. Also parallelization works better and usage of different CPU cores is more controllable, allowing for better scalability. And a fixed, but configurable number of threads is used, which is independent of the number of streams.]]></description><guid isPermaLink="false">98f65a4a-8501-45e4-bda8-48d5d01306ba</guid><pubDate>Thu,  5 Apr 2018 15:21:06 +0000</pubDate><dc:creator>Sebastian Dröge</dc:creator></item><item><title>Welcome to this week in Rust and WebAssembly!</title><link>https://rustwasm.github.io/2018/04/05/welcome-to-this-week-in-rust.html</link><description><![CDATA[Hello and welcome to the first issue of This Week in Rust and WebAssembly! Rust is a systems language pursuing the trifecta: safety, concurrency, and speed. WebAssembly is designed as a portable target for compilation of high-level languages like C, C++, and Rust, enabling deployment on the web for client and server applications. This is a weekly summary of its progress and community.]]></description><guid isPermaLink="false">8c1bc2c9-1eeb-4a19-ac6b-d11e2a7c6f63</guid><pubDate>Thu,  5 Apr 2018 00:00:00 +0000</pubDate><dc:creator>Sendil Kumar N</dc:creator></item><item><title>Making a 100% Statically-Linked, Single-File Web App with React and Rust</title><link>https://anderspitman.net/2018/04/04/static-react-rust-webapp/</link><description><![CDATA[This tutorial will cover the basics of creating a minimal React app which can be deployed as a statically-linked Rust binary. What this accomplishes is having all of your code, including HTML, JavaScript, CSS, and Rust, packaged into a single file that will run on pretty much any 64-bit Linux system, regardless of the kernel version or installed libraries.]]></description><guid isPermaLink="false">14922be0-52bc-4711-9fc1-aeec98e39c1d</guid><pubDate>Wed,  4 Apr 2018 21:21:00 +0000</pubDate><dc:creator>Anders Pitman</dc:creator></item><item><title>JavaScript to Rust and Back Again: A wasm-bindgen Tale</title><link>https://hacks.mozilla.org/2018/04/javascript-to-rust-and-back-again-a-wasm-bindgen-tale/</link><description><![CDATA[Recently we’ve seen how WebAssembly is incredibly fast to compile, speeding up JS libraries, and generating even smaller binaries. We’ve even got a high-level plan for better interoperability between the Rust and JavaScript communities, as well as other web programming languages. As alluded to in that previous post, I’d like to dive into more detail about a specific component, wasm-bindgen.]]></description><guid isPermaLink="false">d110dc0e-7a78-42c3-8326-5b5ec58f8875</guid><pubDate>Wed,  4 Apr 2018 14:58:40 +0000</pubDate><dc:creator> Alex Crichton</dc:creator></item><item><title>Using Rust Modules in JavaScript/Web Development (Part 3/ 3) [NodeJS]</title><link>https://medium.com/@atulanand94/using-rust-modules-for-javascript-web-development-part-3-3-nodejs-7c71e4ae23fe</link><description><![CDATA[Please read the Part 1 of the series here :]]></description><guid isPermaLink="false">fc550900-512d-4f82-b40a-25a8ef86d513</guid><pubDate>Tue,  3 Apr 2018 14:29:28 +0000</pubDate><dc:creator>Atul</dc:creator></item><item><title>Using Rust Modules in JavaScript/Web Development (Part 2 / 3) [Webpack]</title><link>https://medium.com/@atulanand94/using-rust-modules-for-javascript-web-development-part-2-7a86eaec5ee9</link><description><![CDATA[Part 1 of the post was primarily concerned with integrating rust modules with JavaScript with the help of wasm. But that involved a lot of manual procedures. Another more streamlined way is using webpack.]]></description><guid isPermaLink="false">37aa0f60-d86c-446d-848c-52b45777ae2c</guid><pubDate>Tue,  3 Apr 2018 10:15:39 +0000</pubDate><dc:creator>Atul</dc:creator></item><item><title>Using Rust Modules in JavaScript/Web Development (Part 1 / 3) [Plain JS]</title><link>https://medium.com/@atulanand94/using-rust-modules-for-javascript-web-development-part-i-e6dec27df7b2</link><description><![CDATA[One of the promising reasons I started learning rust is that it can be used to build modules for web using web-assembly. This blog post will cover how you can build a rust module and use it as regular package in the JavaScript environment. Remember rust is not meant to replace JS. I see it as complementary add-on to the places where JS is comparatively slower (heavy computations).]]></description><guid isPermaLink="false">229aab36-08f5-4288-a9df-c804ad6c2b56</guid><pubDate>Tue,  3 Apr 2018 06:22:23 +0000</pubDate><dc:creator>Atul</dc:creator></item><item><title>HTTP upgrades with hyper</title><link>http://seanmonstar.com/post/172531530657/http-upgrades-with-hyper</link><description><![CDATA[The newest release of hyper includes some lower-level connection APIs for both the server and client. Notably, this allows using hyper send and receive HTTP upgrade requests. The most popular of these is Websockets.]]></description><guid isPermaLink="false">0cb16bc7-daff-4747-81e5-d4455d33fc43</guid><pubDate>Mon,  2 Apr 2018 14:34:53 -0700</pubDate><dc:creator>Sean McArthur</dc:creator></item><item><title>Removing Connection State In mob</title><link>http://hermanradtke.com/2018/03/29/removing-connection-state-from-mob.html</link><description><![CDATA[I started writing mob, an multi-echo server using mio, in 2015. I coded mob into a mostly working state and then left it mostly alone, only updating it to work with the latest stable mio. Recently, I started looking at the code again and had the urge to improve it. In a previous post, I talked about managing the state of connections in mob. In this post, I will walk through what I did to remove the need to track connection state. I wanted to remove the state because the implementation required an O(n) operation every tick of the mio event loop. It also added a fair amount of complexity to the code.]]></description><guid isPermaLink="false">d14f3e75-4047-441e-a67b-fc0de042845a</guid><pubDate>Thu, 29 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Herman J. Radtke III</dc:creator></item><item><title>Rust + Node.js are awesome!</title><link>https://itnext.io/rust-node-js-are-awesome-a50d63411773</link><description><![CDATA[Blazing fast, low requirements, computationally intensive operations on Node.js using Rust]]></description><guid isPermaLink="false">07825eb3-aaab-46c5-b7e4-680857d73750</guid><pubDate>Tue, 27 Mar 2018 21:50:20 +0000</pubDate><dc:creator>Benjamín Calderón</dc:creator></item><item><title>Touring a Fast, Safe, and Complete(ish) Web Service in Rust</title><link>https://brandur.org/rust-web</link><description><![CDATA[For years now, I’ve been having a crisis of faith in interpreted languages. They’re fast and fun to work in at small scale, but when you have a project that gets big, their attractive veneer quickly washes away. A big Ruby or JavaScript (just to name a few) program in production is a never ending game of whack-a-mock – you fix one problem only to find a new one somewhere else. No matter how many tests you write, or how well-disciplined your team, any new development is sure to introduce a stream of bugs that will need to be shored up over the course of months or years.

Central to the problem are the edges. People will reliably do a good job of building and testing the happy paths, but as humans we’re terrible at considering the edge conditions, and it’s those edges and corners that cause trouble over the years that a program is in service.]]></description><guid isPermaLink="false">9f012379-d71a-4c45-b9db-12c4871070e7</guid><pubDate>Tue, 27 Mar 2018 14:45:57 +0000</pubDate><dc:creator>Brandur Leach</dc:creator></item><item><title>Building a Restful CRUD API with Rust</title><link>https://medium.com/sean3z/building-a-restful-crud-api-with-rust-1867308352d8</link><description><![CDATA[Since my initial Node/Rust REST comparison, I’ve wanted to follow up with a comprehensive guide for getting simple CRUD operations up and running in Rust.]]></description><guid isPermaLink="false">e32bb679-4afa-48d9-ab51-d589a590348e</guid><pubDate>Mon, 19 Mar 2018 04:29:33 +0000</pubDate><dc:creator>Sean Wragg</dc:creator></item><item><title>Multicasting in Rust</title><link>https://bluejekyll.github.io/blog/rust/2018/03/18/multicasting-in-rust.html</link><description><![CDATA[A brief post to help others multicast in Rust]]></description><guid isPermaLink="false">dae19f32-236c-4329-b26d-e6c47b2631d3</guid><pubDate>Sun, 18 Mar 2018 07:00:00 +0000</pubDate><dc:creator>Benjamin Fry</dc:creator></item><item><title>Building a DNS server in Rust</title><link>https://github.com/EmilHernvall/dnsguide</link><description><![CDATA[With the combined goal of gaining a deep understanding of DNS, of doing something interesting with Rust, and of scratching some of my own itches, I originally set out to implement my own DNS server. This document is not a truthful chronicle of that journey, but rather an idealized version of it, without all the detours I ended up taking. We'll gradually implement a full DNS server, starting from first principles.]]></description><guid isPermaLink="false">44e96573-f8b3-4577-8a76-1cbc8a65ec8b</guid><pubDate>Fri, 16 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Emil Hernvall</dc:creator></item><item><title>Making WebAssembly better for Rust &amp; for all languages</title><link>https://hacks.mozilla.org/2018/03/making-webassembly-better-for-rust-for-all-languages/</link><description><![CDATA[To be a useful as a web language, Rust needs to work well with the JavaScript ecosystem. We have some work to do to get there, and fortunately that work ...]]></description><guid isPermaLink="false">bf12d6fd-0aea-4d74-b3a7-02a538d210d3</guid><pubDate>Wed, 14 Mar 2018 15:02:52 +0000</pubDate><dc:creator>Lin Clark</dc:creator></item><item><title>Parc3l: Combining Three.js, Rust, and WebAssembly!</title><link>https://medium.com/@cwervo/parc3l-combining-three-js-rust-and-webassembly-c1e643ef7681</link><description><![CDATA[WebAssembly has been interesting me lately, specifically the prospect of doing arithmetically-intensive operations with it, not unlike the fantastic physics engine Emscripten port Ammo.js. Compiling something like that is out of the scope of this little post (but should be getting easier!), and I’ve left some links at the bottom so you can clear more about WebAssembly if you’re interested.]]></description><guid isPermaLink="false">39f186f6-b177-43e6-9b4c-7ffe689926e7</guid><pubDate>Mon, 12 Mar 2018 14:34:23 +0000</pubDate><dc:creator>Andres Cuervo</dc:creator></item><item><title>Writing a Simple IPFS Crawler</title><link>https://gkbrk.com/2018/03/writing-a-simple-ipfs-crawler/</link><description><![CDATA[IPFS is a peer-to-peer protocol that allows you to access and publish content in a decentralized fashion. It uses hashes to refer to files. Short of someone posting hashes on a website, discoverability of content is pretty low. In this article, we’re going to write a very simple crawler for IPFS.
It’s challenging to have a traditional search engine in IPFS because content rarely links to each other. But there is another way than just blindly following links like a traditional crawler.]]></description><guid isPermaLink="false">e03aa0e5-bb05-48f0-a4a4-0796d14d1115</guid><pubDate>Mon, 12 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Gökberk Yaltıraklı</dc:creator></item><item><title>Crashing a Rust Hyper server with a Denial of Service attack</title><link>https://klausi.github.io/rustnish/2018/03/11/crashing-a-rust-hyper-server-with-a-denial-of-service-attack.html</link><description><![CDATA[I’m writing a reverse proxy in Rust using Hyper and I want to measure performance a bit to know if I’m doing something terribly wrong. By doing that I discovered a Denial of Service vulnerability in Hyper when IO errors are not properly handled. Note that a workaround has been released in the meantime in Hyper 0.11.20, more background info can be found in this Hyper issue.]]></description><guid isPermaLink="false">4d94c5ba-199d-44c2-9148-7a6bbff699d0</guid><pubDate>Sun, 11 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Klaus Purer</dc:creator></item><item><title>Writing servers with Tokio</title><link>https://blog.passcod.name/2018/mar/07/writing-servers-with-tokio</link><description><![CDATA[I’ve been writing a small toy project with Tokio in my spare time’s spare time. I’ll write more about it at a later date. What I’ve found writing it, though, is that there is a specific pattern to writing servers, both UDP and TCP (and presumably others) in Tokio, and it’s not super obvious at first glance. So here it is.]]></description><guid isPermaLink="false">dd5790e1-ff4e-4f61-9a8b-05ea774a2e89</guid><pubDate>Wed,  7 Mar 2018 09:35:30 +0000</pubDate><dc:creator>Félix Saparelli</dc:creator></item><item><title>Speed Without Wizardry</title><link>http://fitzgeraldnick.com/2018/02/26/speed-without-wizardry.html</link><description><![CDATA[Vyacheslav Egorov, who goes by mraleph on the Web, wrote a response to my article “Oxidizing Source Maps with Rust and WebAssembly” titled “Maybe you don’t need Rust and WASM to speed up your JS”.

The “Oxidizing” article recounts my experience integrating Rust (compiled to WebAssembly) into the source-map JavaScript library. Although the JavaScript implementation was originally authored in idiomatic JavaScript style, as we profiled and implemented speed improvements, the code became hard to read and maintain. With Rust and its zero-cost abstractions, we found that there was no trade-off between performance and clean code.]]></description><guid isPermaLink="false">26bc7432-d561-4e1f-8cf2-2c30b8ac63ab</guid><pubDate>Mon, 26 Feb 2018 00:00:00 -0800</pubDate><dc:creator>Nick Fitzgerald</dc:creator></item><item><title>Recently, for a Rusty Web</title><link>http://seanmonstar.com/post/171170905822/recently-for-a-rusty-web</link><description><![CDATA[It’s been a few months since I shifted my focus full time to Rust, and in that time, we’ve gotten a lot of work done! I wanted to update you here what all that is, since it’s spread around on multiple repositories.]]></description><guid isPermaLink="false">22d134e6-ddc6-4571-965c-4b6e72a544eb</guid><pubDate>Thu, 22 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Sean McArthur</dc:creator></item><item><title>Porting Rust to WebAssembly</title><link>https://udoprog.github.io/rust/2018-02-19/porting-rust-to-wasm.html</link><description><![CDATA[I recently spent some effort trying to make reproto run in a browser. Here I want to outline the problems I encountered and how I worked around them. I will also provide a number of suggestions for how things might be improved for future porters.]]></description><guid isPermaLink="false">9b97498f-3ffb-4c89-8973-c2beb5e0140e</guid><pubDate>Mon, 19 Feb 2018 00:00:00 +0000</pubDate><dc:creator>John-John Tedro</dc:creator></item><item><title>Fanta: An opinionated framework for web development in rust</title><link>https://github.com/trezm/Fanta</link><description><![CDATA[Fanta is a web framework that aims for developers to be productive and consistent across projects and teams. Its goals are to be: Opinionated, Fast, and Intuitive. Based heavily off of the work here: https://github.com/tokio-rs/tokio-minihttp]]></description><guid isPermaLink="false">0af4c90e-74b2-438d-aaed-798c9f6e900a</guid><pubDate>Wed, 14 Feb 2018 18:44:00 +1100</pubDate><dc:creator>Peter Mertz</dc:creator></item><item><title>Gameland intro, reimplemented in Rust for WebAssembly</title><link>http://perlun.eu.org/en/programming/gameland/</link><description><![CDATA[My nice brother Johannes Ridderstedt sent me some old files a few weeks ago (in late 2017), stuff that he had preserved from an age-old computer of ours. One of these was the file named gameland.zip (not published yet, but I might put it up here some day.) I managed to get this running, and liked what I saw (you'll find the YouTube link to it further down on this page.) Around this time I was reading a bit about WebAssembly which I think will redefine and help reshape the web as we see it today. I was also looking at the Hello, Rust web page, and the "FizzleFade effect using a Feistel network" page in particular.]]></description><guid isPermaLink="false">86b2dfcd-a01d-47e1-acb8-2ddbca20db62</guid><pubDate>Tue, 13 Feb 2018 07:44:00 +1100</pubDate><dc:creator>Per Lundberg</dc:creator></item><item><title>Event Sourcing with Aggregates in Rust</title><link>https://medium.com/@KevinHoffman/event-sourcing-with-aggregates-in-rust-4022af41cf67</link><description><![CDATA[Everyone loves event sourcing, right up until the moment they have to implement it. At that moment all the wonderful whiteboard drawings…]]></description><guid isPermaLink="false">bbc46982-1321-4e4e-8d9f-344963341c21</guid><pubDate>Mon, 12 Feb 2018 15:11:08 +0000</pubDate><dc:creator>Kevin Hoffman</dc:creator></item><item><title>Deploying A Rust Server to Google App Engine with Travis CI &amp; Docker</title><link>https://medium.com/@gallantmrgn/deploying-rust-server-to-google-app-engine-with-travis-ci-docker-b80acfce2ce5</link><description><![CDATA[I woke up this morning with one goal: to convert my website (morgangallant.com) into a Rust web server. I have been a long time fan of…]]></description><guid isPermaLink="false">2b698c99-99e0-4fad-8716-b58dbd9c255c</guid><pubDate>Sun, 11 Feb 2018 00:07:43 +0000</pubDate><dc:creator>Morgan A. Gallant</dc:creator></item><item><title>A Wee Allocator for WebAssembly</title><link>http://fitzgeraldnick.com/2018/02/09/wee-alloc.html</link><description><![CDATA[Introducing wee_alloc. wee_alloc is a work-in-progress memory allocator designed for WebAssembly. It has a tiny code size footprint, compiling down to only a kilobyte of .wasm code.]]></description><guid isPermaLink="false">6b542e90-1f02-4368-90e4-a1931ccf1935</guid><pubDate>Fri,  9 Feb 2018 00:00:00 -0800</pubDate><dc:creator>Nick Fitzgerald</dc:creator></item><item><title>I rewrote a Nintendo emulator with Rust / WebAssembly (Japanese)</title><link>http://blog.bokuweb.me/entry/2018/02/08/101522</link><description><![CDATA[概要 以前、JSで書いた(ファミコンのエミュレータを書いた - undefined)ファミコンのエミュレータをRustで書き直してみた。 また、技術的な内容はQiitaの方にも書いているので興味のある方は参照してみてください。(まだ Hello, World!までしか書けてませんが。) qiita.com もともとファミコンのエミュレータって新しい言語を習得するのにちょうどいい題材だったりするのでは、って話しからスタートしてて、よくわからないのでJSで書いてみて、ようやくRustで一通りは実装できた感じ。まだバグや未実装（音声周りやマッパー）も多いんですが、ひとまずはお腹いっぱいな感じ。 成果…]]></description><guid isPermaLink="false">e6347974-c84a-438a-924a-52ef37f6c99a</guid><pubDate>Thu,  8 Feb 2018 10:15:22 +0900</pubDate><dc:creator>bokuweb</dc:creator></item><item><title>DataFusion: Big Data Platform for Rust</title><link>https://www.datafusion.rs/</link><description><![CDATA[DataFusion is an open-source Big Data platform implemented in the Rust programming language with a similar programming style to Apache Spark.]]></description><guid isPermaLink="false">434c400b-b4ac-49c9-87fa-db2a8b5f1ba7</guid><pubDate>Sun,  4 Feb 2018 16:51:47 +0000</pubDate><dc:creator>Andy Grove</dc:creator></item><item><title>Writing a Microservice in Rust</title><link>http://www.goldsborough.me/rust/web/tutorial/2018/01/20/17-01-11-writing_a_microservice_in_rust/</link><description><![CDATA[Let me begin this article on Writing a Microservice in Rust by talking about C++. I’ve been a reasonably active member of the C++ community for quite a while now, attending and contributing talks to conferences, following the development and evangelism of the language’s more modern features and of course writing lots of it. C++ is a language that gives its users very fine-grained control over all aspects of the program they are writing, at the cost of a steep learning curve and a large body of knowledge required to write effective C++. However, C++ is also a very old language, conceived by Bjarne Stroustrup in 1985, and thus caries a lot of technical debt even into modern standards.]]></description><guid isPermaLink="false">776dd5f1-c6d0-48da-8e0a-6fcae00fb923</guid><pubDate>Sat, 20 Jan 2018 00:00:00 +0000</pubDate><dc:creator>Peter Goldsborough</dc:creator></item><item><title>Rust and WebAssembly with Turtle - /var/blog</title><link>https://varblog.org/blog/2018/01/08/rust-and-webassembly-with-turtle/</link><description><![CDATA[In this post, I'll walk through a few of the highlights of getting Turtle, a Rust library for creating animated drawings, to run in the browser with WebAssembly.]]></description><guid isPermaLink="false">5c8f0581-5b1d-485b-852c-83c0deef73d5</guid><pubDate>Mon,  8 Jan 2018 09:54:00 -0600</pubDate><dc:creator>Marshall Pierce</dc:creator></item></channel></rss>