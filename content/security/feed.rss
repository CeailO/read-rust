<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - Security</title><link>https://readrust.net/</link><description>Security posts on Read Rust</description><item><title>Hagrid: A New Verifying Key Server Built on Sequoia</title><link>https://sequoia-pgp.org/blog/2019/06/14/20190614-hagrid/</link><description><![CDATA[On Wednesday, Vincent launched a new key server at keys.openpgp.org! What makes this launch special is that keys.openpgp.org is running Hagrid —“The Keeper of Keys”—a new verifying key server, which is written in Rust and based on Sequoia. Even though the launch didn’t receive much media attention, 700 people have already verified their keys in the 48 hours since the announcement.]]></description><guid isPermaLink="false">81657ee0-b628-449d-b5c3-3258a0219756</guid><pubDate>Fri, 14 Jun 2019 14:21:35 +0200</pubDate><dc:creator>Neal</dc:creator></item><item><title>Security advisory for the standard library</title><link>https://blog.rust-lang.org/2019/05/13/Security-advisory.html</link><description><![CDATA[The Rust team was recently notified of a security vulnerability affecting manual implementations of Error::type_id and their interaction with the Error::downcast family of functions in the standard library. If your code does not manually implement Error::type_id your code is not affected.]]></description><guid isPermaLink="false">593aaa73-c49a-4b38-99c7-ce2a1070723d</guid><pubDate>Mon, 13 May 2019 00:00:00 +0000</pubDate><dc:creator>The Rust Core Team</dc:creator></item><item><title>Rust, dudect and constant-time crypto in debug mode</title><link>https://brycx.github.io/2019/04/21/rust-dudect-constant-time-crypto.html</link><description><![CDATA[The following are observations from when I started testing my own pure-Rust crypto library, including its dependencies, for constant-time execution. Starting with a short introduction to dudect and how it can be used to test code for timing-based side-channel vulnerabilities. Then discussing the process of discovering a short-circuit that resulted in variable-time execution, in dalek-cryptography’s subtle library and how this seems to relate to Rust codegen option opt-level.]]></description><guid isPermaLink="false">4450a6c3-3baa-4485-853b-910969aa0119</guid><pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate><dc:creator>brycx</dc:creator></item><item><title>Noise Explorer</title><link>https://noiseexplorer.com/</link><description><![CDATA[Noise Explorer is an online engine for reasoning about Noise Protocol Framework Handshake Patterns. Noise Explorer allows you to design and validate Noise Handshake Patterns, to generate cryptographic models for formal verification and to explore a compendium of formal verification results for the most popular and relevant Noise Handshake Patterns in use today.]]></description><guid isPermaLink="false">f1c4efc6-6cb3-4b03-a445-6ee32bd804b7</guid><pubDate>Fri, 29 Mar 2019 00:50:00 +0000</pubDate><dc:creator>georgio</dc:creator></item><item><title>BoringTun, a userspace WireGuard implementation in Rust</title><link>https://blog.cloudflare.com/boringtun-userspace-wireguard-rust/</link><description><![CDATA[Today we are happy to release the source code of a project we’ve been working on for the past few months. It is called BoringTun, and is a userspace implementation of the WireGuard® protocol written in Rust.]]></description><guid isPermaLink="false">de32ac99-9bcf-4744-ab65-3f22398433d7</guid><pubDate>Wed, 27 Mar 2019 13:43:27 +0000</pubDate><dc:creator>Vlad Krasnov</dc:creator></item><item><title>Using the IOMMU for Safe and Secure User Space Network Drivers</title><link>https://www.net.in.tum.de/members/emmericp/</link><description><![CDATA[Commonly used user space network drivers such as DPDK or Snabb currently have effectivelyfull access to the main memory via the unrestricted Direct Memory Access (DMA) capabilities of the PCI Express (PCIe) device they are controlling. This can be a security issue, as the driver can use the PCIe devices DMA access to read and / or write to main memory. In this thesis, support for using the IOMMU via the vfio-pci driver from the Linux kernel for the user space network driver ixy was implemented in C and Rust and the IOMMU and its impact on the drivers were investigated.]]></description><guid isPermaLink="false">6af41799-4171-46ca-ab1f-572b8669da6e</guid><pubDate>Tue, 26 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Stefan Huber</dc:creator></item><item><title>rust-audit: Know exact library versions used to build your Rust executable</title><link>https://github.com/Shnatsel/rust-audit</link><description><![CDATA[Know exact library versions used to build your Rust executable. Audit binaries for known bugs or security vulnerabilities in production, at scale, with zero bookkeeping.]]></description><guid isPermaLink="false">e2a2559d-5bf2-45b6-ba62-a3af84913c3a</guid><pubDate>Sat,  2 Mar 2019 20:02:25 +0000</pubDate><dc:creator>Sergey &quot;Shnatsel&quot; Davidoff</dc:creator></item><item><title>Implications of Rewriting a Browser Component in Rust</title><link>https://hacks.mozilla.org/2019/02/rewriting-a-browser-component-in-rust/</link><description><![CDATA[Since our first release in 2002, there have been 69 security bugs in Firefox’s style component. If we'd had a time machine and could have written this component in Rust from the start, 51% wouldn't have happened. That said, Rust is not foolproof. Developers still need to be aware of correctness bugs and data leakage attacks.]]></description><guid isPermaLink="false">1ffc5388-6476-4542-90c1-398c561a2c43</guid><pubDate>Thu, 28 Feb 2019 14:10:27 +0000</pubDate><dc:creator>Diane Hosfelt</dc:creator></item><item><title>Zero knowledge proofs using Bulletproofs</title><link>https://medium.com/coinmonks/zero-knowledge-proofs-using-bulletproofs-4a8e2579fc82</link><description><![CDATA[I will show how to create various zero knowledge proofs using the Bulletproofs implementation from dalek-cryptography. The examples will be i) proving knowledge of factors of a given number without revealing the factors, ii) a range proof, i.e. prove that you know a value x such that a ≤ x ≤ b without revealing x, iii) prove that the value you have is non-zero without revealing it (without using above range proof), iv) Set membership, i.e given a set S, prove that you know an element contained in the set without revealing the element, v) Similarly, set non-membership without revealing the value of the absent element. The examples can be adapted with little effort such that they can be used in ZK-SNARK implementations like libsnark or bellman.]]></description><guid isPermaLink="false">fae48adb-0406-4124-b06d-6b9d7a667d85</guid><pubDate>Sat, 23 Feb 2019 20:38:04 +0000</pubDate><dc:creator>Lovesh Harchandani</dc:creator></item><item><title>Be part of ANSSI’s new « Guide to develop secure applications with Rust »</title><link>https://www.ssi.gouv.fr/en/actualite/be-part-of-anssis-new-guide-to-develop-secure-applications-with-rust/</link><description><![CDATA[Rust is an open source programming language which combines security, modernity and performance. As well, it is gradually being adopted in a large number of projects. To support developers, ANSSI offers a new "Guide to develop secure applications with Rust". This guide is intended to be a living document and it’s open to all contributions from the community. The object of this document is to provide hints and recommendations for secure applications development using the Rust programming language, that allow users to benefits of the good level of trust the Rust language already provides.]]></description><guid isPermaLink="false">a552df74-7e67-4b0a-9e12-a75afc9235b8</guid><pubDate>Sat,  9 Feb 2019 03:29:00 +0000</pubDate><dc:creator>ANSSI</dc:creator></item><item><title>Auditing Rust Crypto: The First Hours</title><link>https://research.kudelskisecurity.com/2019/02/07/auditing-rust-crypto-the-first-hours/</link><description><![CDATA[Checklists are a simple yet effective component of security and safety procedures in various fields, from flight safety and surgery to network security, and of course cryptography. So here’s a couple of things you want to check when starting the audit of a crypto software written in Rust.]]></description><guid isPermaLink="false">b6ca1619-6bdb-4efc-a043-ea73ed0e8336</guid><pubDate>Thu,  7 Feb 2019 14:00:15 +0000</pubDate><dc:creator>https://research.kudelskisecurity.com/</dc:creator></item><item><title>Medic: A Rust CLI that checks the passwords of a KeePass database</title><link>https://sts10.github.io/2019/02/01/medic.html</link><description><![CDATA[After the recent breach, I was curious to check my passwords against the list, but I’m a bit paranoid, so, rather than paste my passwords into the Have I Been Pwned website, I wanted to download the big text file and check my passwords against it offline, nice and safely.

I use a password manager called KeePassXC, so all of my passwords are stored in an encrypted file – a KeePass database – and I use a program called KeePassXC, a free and open-source password manager, to manage them (I wrote a beginner’s user guide to KeePassXC a while back if you’re interested!). So ideally, to check my passwords against the big list, I’d have a tool that checks all the passwords in a given KeePass database against the entire HaveIBeenPwned list of passwords, preferably against the downloaded file (i.e. “offline”), rather than the API. In other words something similar to 1Password’s Watchtower feature, but preferably offline.

After poking around a bit I decided to write it myself in Rust, with this script and this crate as useful references. Medic is a Rust CLI that can perform a variety of “health” checks on a KeePass database.]]></description><guid isPermaLink="false">ba72d3fb-8f1e-4802-a55b-15dd8584046f</guid><pubDate>Fri,  1 Feb 2019 01:15:00 +0000</pubDate><dc:creator>Sam Schlinkert</dc:creator></item><item><title>Rust EDP: Build SGX enclaves in Rust</title><link>https://edp.fortanix.com/</link><description><![CDATA[Secure enclaves provide an operating environment for code which is secure from interference by outside parties, including root users, malware, and the OS. This environment is built on three key pillars: Fully isolated execution, Sealing, Remote attestation. The Fortanix Enclave Development platform lets you write complete applications inside an enclave. The Fortanix EDP is fully integrated with the Rust compiler. Rust code that doesn't link to native libraries and that doesn't use processes or files should compile out of the box.]]></description><guid isPermaLink="false">f333987d-a697-4e1c-8667-7d6bd4e765de</guid><pubDate>Wed, 30 Jan 2019 06:45:00 +0000</pubDate><dc:creator>Jethro Beekman</dc:creator></item><item><title>Fearless Security: Memory Safety</title><link>https://hacks.mozilla.org/2019/01/fearless-security-memory-safety/</link><description><![CDATA[Memory safety violations can cause programs to crash unexpectedly and can be exploited to alter intended behavior--languages can manage this multiple ways.]]></description><guid isPermaLink="false">e89d9e3f-1400-40ca-9e1c-d90817daf41e</guid><pubDate>Wed, 23 Jan 2019 15:00:57 +0000</pubDate><dc:creator>Diane Hosfelt</dc:creator></item><item><title>Manage security vulnerabilities in embedded IoT devices with Rust</title><link>https://medium.com/@flundstrom2/manage-security-vulnerabilities-in-embedded-iot-devices-with-rust-14aeabada68b</link><description><![CDATA[The Rust programming language’s rich type system and ownership model guarantee memory-safety and thread-safety — and eliminate many classes of bugs and security vulnerabilities at compile-time.]]></description><guid isPermaLink="false">84b2eb06-712b-4d63-b899-c91e16e1b0ee</guid><pubDate>Wed, 23 Jan 2019 12:18:11 +0000</pubDate><dc:creator>Fredrik Lundström</dc:creator></item><item><title>Security as Rust 2019 goal</title><link>https://medium.com/@shnatsel/security-as-rust-2019-goal-6a060116ba39</link><description><![CDATA[The goals and 2019 roadmap of Rust Secure Code Working Group]]></description><guid isPermaLink="false">2785bcea-bff1-46c3-913b-87888f79133c</guid><pubDate>Fri, 18 Jan 2019 18:20:42 +0000</pubDate><dc:creator>Sergey Davidoff et al.</dc:creator></item><item><title>Using TLS with Rust: Part II - Client authentication</title><link>https://ayende.com/blog/185730-A/using-tls-with-rust-part-ii-client-authentication</link><description><![CDATA[The task that I have for now is to add client authentication via X509 client certificate. That is both obvious and non obvious, unfortunately. I’ll admit that I’m enjoying exploring Rust features, so I don’t know how idiomatic this code is, but it is certainly dense.]]></description><guid isPermaLink="false">01a84c85-f79f-42fa-9632-e3ee5f0f5b6e</guid><pubDate>Mon,  7 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Ayende Rahien</dc:creator></item><item><title>Using TLS with Rust: Part I</title><link>https://ayende.com/blog/185698-A/using-tls-with-rust-part-i</link><description><![CDATA[The next interesting step in my Rust network protocol exercise is to implement TLS. I haven’t looked at that yet, so it is going to be interesting.]]></description><guid isPermaLink="false">234e0c08-173d-431d-861b-3f4bbb214a6b</guid><pubDate>Wed,  2 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Ayende Rahien</dc:creator></item><item><title>gbl: A typestate-powered zero-copy crate for GBL firmware update files</title><link>https://blog.1aim.com/post/gbl-release/</link><description><![CDATA[After a few weeks of reverse-engineering, internal dogfooding, and API design discussion, we're finally publishing our gbl crate for good.

The library implements a parser and writer for GBL firmware update containers, which are used to perform secure OTA updates for certain microcontrollers.]]></description><guid isPermaLink="false">aa59c999-cba6-4f20-80cc-888e8e257a73</guid><pubDate>Wed, 19 Dec 2018 00:00:00 +0000</pubDate><dc:creator>Jonas Schievink</dc:creator></item><item><title>Sequoia-PGP: State of the Seedling</title><link>https://sequoia-pgp.org/blog/2018/12/10/state-of-the-seedling-in-december/</link><description><![CDATA[I’d like to inform you about the recent progress on your favorite OpenPGP implementation. The Sequoia project made their first release at RustConf Rome during Neal’s talk (video, slides) about our experiences with Rust. The release includes only the low-level openpgp crate, which we renamed to sequoia-openpgp to avoid a namespace collision. In the weeks prior to the release, we moved a lot of code around, and refined our API. For example, we introduced a crypto module and moved all low-level crypto primitives there.]]></description><guid isPermaLink="false">3f8f60fc-a917-4f77-98fb-f3d263cda7b3</guid><pubDate>Mon, 10 Dec 2018 13:50:35 +0100</pubDate><dc:creator>Justus Winter</dc:creator></item><item><title>The Seedling Sees the Light of Day: Sequoia-PGP Initial Release</title><link>https://sequoia-pgp.org/blog/2018/11/26/initial-release/</link><description><![CDATA[On October 16, 2017, we made the first commit to the Sequoia repository. Just over a year and a thousand commits later, Sequoia’s low-level API is nearly feature complete, and is already usable. For instance, a port of the p≡p engine to Sequoia is almost finished, and the code is significantly simpler than the version using the current OpenPGP library. We’ve also made experimental ports of other software that use OpenPGP, and written some new software to further validate the completeness and ergonomics of the API.]]></description><guid isPermaLink="false">5d14453d-3a6f-4f26-8aa1-20edec9e9347</guid><pubDate>Mon, 26 Nov 2018 10:08:17 +0100</pubDate><dc:creator>Neal H. Walfield, Justus Winter, and Kai Michaelis</dc:creator></item><item><title>Introducing Mundane, a new cryptography library for Rust</title><link>https://joshlf.com/post/2018/11/06/introducing-mundane/</link><description><![CDATA[Mundane is a cryptography library written in Rust and backed by BoringSSL. It aims to be difficult to misuse, ergonomic, and performant (in that order). It was originally created to serve the cryptography needs of Fuchsia, but we’ve decided to split it off as a general-purpose crate.]]></description><guid isPermaLink="false">b612b468-7306-4f7b-a09a-2b4f0bac5b55</guid><pubDate>Tue,  6 Nov 2018 00:00:00 +0000</pubDate><dc:creator>Joshua Liebow-Feeser</dc:creator></item><item><title>Merlin: flexible, composable transcripts for zero-knowledge proofs</title><link>https://medium.com/@hdevalence/merlin-flexible-composable-transcripts-for-zero-knowledge-proofs-28d9fda22d9a</link><description><![CDATA[Merlin is a small Rust library that performs the Fiat-Shamir transformation in software, maintaining a STROBE-based transcript of the proof protocol and allowing the prover to commit messages to the transcript and compute challenges bound to all previous messages. It also provides a transcript-based RNG for use by the prover, generalizing “deterministic” and “synthetic” nonces to arbitrarily complex zero-knowledge protocols.]]></description><guid isPermaLink="false">2e26b090-21b9-42e2-9ac5-9664e79af88e</guid><pubDate>Fri, 28 Sep 2018 21:07:20 +0000</pubDate><dc:creator>Henry de Valence</dc:creator></item><item><title>How I’ve found vulnerability in a popular Rust crate (and you can too)</title><link>https://medium.com/@shnatsel/how-ive-found-vulnerability-in-a-popular-rust-crate-and-you-can-too-3db081a67fb</link><description><![CDATA[I have recently discovered a zero-day vulnerability in a fairly popular and well-designed Rust crate. In this article I’m going to discuss how I did it and why it wasn’t discovered earlier, and introduce a new tool, libdiffuzz, that I’ve created for the job. A recently discovered vulnerability in Rust standard library makes a cameo appearance.]]></description><guid isPermaLink="false">385cdc5a-e6e0-4562-b9f3-156b296d6a03</guid><pubDate>Fri, 28 Sep 2018 03:51:45 +0000</pubDate><dc:creator>Sergey &quot;Shnatsel&quot; Davidoff</dc:creator></item><item><title>‘orion’ - yet another attempt at pure-Rust cryptography</title><link>https://brycx.github.io/2018/09/25/orion-pure-rust-crypto-lib.html</link><description><![CDATA[orion is another attempt at cryptography implemented in pure Rust. Its main focus is usability. This is in part achieved by providing a thorough documentation of the library. High-level abstractions are also provided, which are an attempt at guiding the users towards safe usage of the lower-level functionality of the library.]]></description><guid isPermaLink="false">96405556-ac98-433a-a0f8-c3de068e47d3</guid><pubDate>Tue, 25 Sep 2018 00:00:00 +0000</pubDate><dc:creator>brycx</dc:creator></item><item><title>Security advisory for the standard library (str::repeat)</title><link>https://blog.rust-lang.org/2018/09/21/Security-advisory-for-std.html</link><description><![CDATA[The Rust team was recently notified of a security vulnerability affecting the standard library’s str::repeat function. When passed a large number this function has an integer overflow which can lead to an out of bounds write. If you are not using str::repeat, you are not affected.]]></description><guid isPermaLink="false">e36be553-3461-4742-8127-2a41c9f54d93</guid><pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate><dc:creator>The Rust Core Team</dc:creator></item><item><title>Postgres over TLS with postgres and r2d2_postgres</title><link>https://matthewkmayer.github.io/blag/public/post/postgres-tls/</link><description><![CDATA[In this post we’ll go over how to get the postgres crate and r2d2_postgres working with openssl for connection pooling with TLS.]]></description><guid isPermaLink="false">2fec1872-4519-4b08-8012-147db9dff5e0</guid><pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Matthew Mayer&apos;s</dc:creator></item><item><title>Transparent encryption and decryption in rust with cryptostreams</title><link>https://neosmart.net/blog/2018/transparent-encryption-and-decryption-in-rust-with-cryptostreams/</link><description><![CDATA[The rust community has fortunately adopted the OpenSSL bindings as the approach of choice, and the rust-openssl crate makes it easy to both bundle and consume the openssl bindings from rust in a cross-platform manner. What it doesn’t do is make encryption and decryption any easier than OpenSSL itself does.

Enter the cryptostream crate. Released on github and on crates.io under the MIT public license, cryptostream finally provides an easy and transparent way to add encryption and decryption to pipelines involving objects implementing Read or Write, making encryption (or decryption) as easy as creating a new cryptostream object, passing in an existing Read/Write impl, and then reading/writing from/to the cryptostream instead.]]></description><guid isPermaLink="false">2e015136-8213-4fa3-afe0-78bf520d1da6</guid><pubDate>Wed, 12 Sep 2018 23:35:55 +0000</pubDate><dc:creator>Mahmoud Al-Qudsi</dc:creator></item><item><title>How Rust’s standard library was vulnerable for years and nobody noticed</title><link>https://medium.com/@shnatsel/how-rusts-standard-library-was-vulnerable-for-years-and-nobody-noticed-aebf0503c3d6</link><description><![CDATA[Rust is a new systems programming language that prides itself on memory safety and speed. The gist of it is that if you write code in Rust, it goes as fast as C or C++, but you will not get mysterious intermittent crashes in production or horrific security vulnerabilities, unlike in the latter two.

That is, until you explicitly opt in to that kind of thing. Uh oh.]]></description><guid isPermaLink="false">7f4b6826-72f6-4842-882d-2a2e5378bdcd</guid><pubDate>Sat, 18 Aug 2018 02:47:33 +0000</pubDate><dc:creator>Sergey &quot;Shnatsel&quot; Davidoff</dc:creator></item><item><title>Software Security is a Programming Languages Issue</title><link>http://www.pl-enthusiast.net/2018/08/13/security-programming-languages-issue/</link><description><![CDATA[This is the the last of three posts on the course I regularly teach, CS 330, Organization of Programming Languages. The first two posts covered programming language styles and mathematical concepts. This post covers the last 1/4 of the course, which focuses on software security, and related to that, the programming language Rust.]]></description><guid isPermaLink="false">be4fb7bc-7b10-41ce-af58-e877d70fd73d</guid><pubDate>Mon, 13 Aug 2018 18:00:43 +0000</pubDate><dc:creator>Michael Hicks</dc:creator></item><item><title>Xori - Custom disassembly framework</title><link>https://sites.google.com/secured.org/malwareunicorn/xori</link><description><![CDATA[Xori is an automation-ready disassembly and static analysis library that consumes shellcode or PE binaries and provides triage analysis data.]]></description><guid isPermaLink="false">31c9d3c0-192b-45f2-922e-5b8d188683bc</guid><pubDate>Thu,  9 Aug 2018 08:23:00 +0000</pubDate><dc:creator>Amanda Rousseau and Rich Seymour</dc:creator></item><item><title>Accelerating Edwards Curve Arithmetic with Parallel Formulas</title><link>https://medium.com/@hdevalence/accelerating-edwards-curve-arithmetic-with-parallel-formulas-ac12cf5015be</link><description><![CDATA[The fastest formulas for elliptic curve operations were published by Hisil, Wong, Carter, and Dawson in their 2008 paper Twisted Edwards Curves Revisited. Their paper also describes a parallel version of their formulas, designed to execute four streams of instructions on four independent processors. Until now, these parallel formulas don’t seem to have been implemented in software. But a closer look reveals that slightly modifying the formulas allows the expensive instructions to be executed in uniform, making a vectorized SIMD implementation possible.

I implemented this strategy in Rust, targeting 256-bit wide AVX2 operations. The resulting implementation performs double-base scalar multiplication faster than other Ed25519 implementations I tested, and is even faster than FourQ without endomorphisms]]></description><guid isPermaLink="false">8a924e9f-d803-4e85-b2e8-92b5909c7695</guid><pubDate>Wed,  1 Aug 2018 17:41:42 +0000</pubDate><dc:creator>Henry de Valence</dc:creator></item><item><title>RustSec Advisory Database</title><link>https://rustsec.org/</link><description><![CDATA[Security advisory database for Rust crates published through https://crates.io.]]></description><guid isPermaLink="false">db3cdc15-004b-4a41-9649-6ade4a8407eb</guid><pubDate>Thu, 19 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Rust Project Developers</dc:creator></item></channel></rss>