{
  "version": "https://jsonfeed.org/version/1",
  "title": "Read Rust - Security",
  "home_page_url": "https://readrust.net/",
  "feed_url": "https://readrust.net/security/feed.json",
  "description": "Security posts on Read Rust",
  "author": {
    "name": "Wesley Moore",
    "url": "http://www.wezm.net/"
  },
  "items": [
    {
      "id": "2fec1872-4519-4b08-8012-147db9dff5e0",
      "title": "Postgres over TLS with postgres and r2d2_postgres",
      "content_text": "In this post we’ll go over how to get the postgres crate and r2d2_postgres working with openssl for connection pooling with TLS.",
      "url": "https://matthewkmayer.github.io/blag/public/post/postgres-tls/",
      "date_published": "2018-09-13T00:00:00+00:00",
      "author": {
        "name": "Matthew Mayer's",
        "url": "https://matthewkmayer.github.io/blag/public"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "2e015136-8213-4fa3-afe0-78bf520d1da6",
      "title": "Transparent encryption and decryption in rust with cryptostreams",
      "content_text": "The rust community has fortunately adopted the OpenSSL bindings as the approach of choice, and the rust-openssl crate makes it easy to both bundle and consume the openssl bindings from rust in a cross-platform manner. What it doesn’t do is make encryption and decryption any easier than OpenSSL itself does.\n\nEnter the cryptostream crate. Released on github and on crates.io under the MIT public license, cryptostream finally provides an easy and transparent way to add encryption and decryption to pipelines involving objects implementing Read or Write, making encryption (or decryption) as easy as creating a new cryptostream object, passing in an existing Read/Write impl, and then reading/writing from/to the cryptostream instead.",
      "url": "https://neosmart.net/blog/2018/transparent-encryption-and-decryption-in-rust-with-cryptostreams/",
      "date_published": "2018-09-12T23:35:55+00:00",
      "author": {
        "name": "Mahmoud Al-Qudsi",
        "url": "https://neosmart.net/blog/"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "7f4b6826-72f6-4842-882d-2a2e5378bdcd",
      "title": "How Rust’s standard library was vulnerable for years and nobody noticed",
      "content_text": "Rust is a new systems programming language that prides itself on memory safety and speed. The gist of it is that if you write code in Rust, it goes as fast as C or C++, but you will not get mysterious intermittent crashes in production or horrific security vulnerabilities, unlike in the latter two.\n\nThat is, until you explicitly opt in to that kind of thing. Uh oh.",
      "url": "https://medium.com/@shnatsel/how-rusts-standard-library-was-vulnerable-for-years-and-nobody-noticed-aebf0503c3d6",
      "date_published": "2018-08-18T02:47:33.708+00:00",
      "author": {
        "name": "Sergey \"Shnatsel\" Davidoff",
        "url": "https://medium.com/@shnatsel"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "be4fb7bc-7b10-41ce-af58-e877d70fd73d",
      "title": "Software Security is a Programming Languages Issue",
      "content_text": "This is the the last of three posts on the course I regularly teach, CS 330, Organization of Programming Languages. The first two posts covered programming language styles and mathematical concepts. This post covers the last 1/4 of the course, which focuses on software security, and related to that, the programming language Rust.",
      "url": "http://www.pl-enthusiast.net/2018/08/13/security-programming-languages-issue/",
      "date_published": "2018-08-13T18:00:43+00:00",
      "author": {
        "name": "Michael Hicks",
        "url": "http://www.pl-enthusiast.net/"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "31c9d3c0-192b-45f2-922e-5b8d188683bc",
      "title": "Xori - Custom disassembly framework",
      "content_text": "Xori is an automation-ready disassembly and static analysis library that consumes shellcode or PE binaries and provides triage analysis data.",
      "url": "https://sites.google.com/secured.org/malwareunicorn/xori",
      "date_published": "2018-08-09T08:23:00+00:00",
      "author": {
        "name": "Amanda Rousseau and Rich Seymour",
        "url": "https://sites.google.com/secured.org/malwareunicorn/xori"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "8a924e9f-d803-4e85-b2e8-92b5909c7695",
      "title": "Accelerating Edwards Curve Arithmetic with Parallel Formulas",
      "content_text": "The fastest formulas for elliptic curve operations were published by Hisil, Wong, Carter, and Dawson in their 2008 paper Twisted Edwards Curves Revisited. Their paper also describes a parallel version of their formulas, designed to execute four streams of instructions on four independent processors. Until now, these parallel formulas don’t seem to have been implemented in software. But a closer look reveals that slightly modifying the formulas allows the expensive instructions to be executed in uniform, making a vectorized SIMD implementation possible.\n\nI implemented this strategy in Rust, targeting 256-bit wide AVX2 operations. The resulting implementation performs double-base scalar multiplication faster than other Ed25519 implementations I tested, and is even faster than FourQ without endomorphisms",
      "url": "https://medium.com/@hdevalence/accelerating-edwards-curve-arithmetic-with-parallel-formulas-ac12cf5015be",
      "date_published": "2018-08-01T17:41:42.002+00:00",
      "author": {
        "name": "Henry de Valence",
        "url": "https://medium.com/@hdevalence"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "db3cdc15-004b-4a41-9649-6ade4a8407eb",
      "title": "RustSec Advisory Database",
      "content_text": "Security advisory database for Rust crates published through https://crates.io.",
      "url": "https://rustsec.org/",
      "date_published": "2018-07-19T00:00:00+00:00",
      "author": {
        "name": "Rust Project Developers",
        "url": "https://rustsec.org/"
      },
      "tags": [
        "Security"
      ]
    }
  ]
}