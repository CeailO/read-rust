{
  "version": "https://jsonfeed.org/version/1",
  "title": "Read Rust - Rust 2019",
  "home_page_url": "https://readrust.net/",
  "feed_url": "https://readrust.net/rust-2019/feed.json",
  "description": "Rust 2019 posts on Read Rust",
  "author": {
    "name": "Wesley Moore",
    "url": "http://www.wezm.net/"
  },
  "items": [
    {
      "id": "5b89867c-1a66-4b88-ab28-5b04e6cda3f5",
      "title": "Rust 2019: Towards Richer Language Extensions",
      "content_text": "As of Rust 1.30, the Rust language now has support for a very expressive feature called procedural macros 3. Procedural macros are great because they enable Rust to do more, without baking a lot of potentially domain-specific information into the language. For example, automatic serialization of data types 5 and expressive, type-safe abstractions for web servers 6 can both be implemented using procedural macros.\n\nHowever, while expressive, procedural macros can’t do everything.",
      "url": "https://internals.rust-lang.org/t/rust-2019-towards-richer-language-extensions/9151",
      "date_published": "2019-01-06T01:17:43+00:00",
      "author": {
        "name": "Elliott Slaughter",
        "url": "https://internals.rust-lang.org/u/elliottslaughter"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "23462803-be17-4a96-b8f1-64af9c0e79d8",
      "title": "Scientific Rust #rust2019",
      "content_text": "The Rust community requested feedback last year for where the language should go in 2018, and now they are running it again for 2019. Last year I was too new in Rust to organize a blog post, but after an year using it I feel more comfortable writing this!\n\nIn this post I will be focusing more in two areas: array computing (what most people consider 'scientific programming' to be) and \"data structures\".",
      "url": "https://blog.luizirber.org/2019/01/05/rust-2019/",
      "date_published": "2019-01-05T17:00:00-02:00",
      "author": {
        "name": "Luiz Irber",
        "url": "https://blog.luizirber.org/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "275f95ad-70be-4870-bb50-0c5df78ed9be",
      "title": "Rust 2019",
      "content_text": "Thinking about Rust’s evolution like a video game (heh), we have just reached level 2018. Our programming language is in a good state but there are a lot of progress bars for features where we need to get a few more experience points to unlock a new ability.",
      "url": "https://deterministic.space/rust-2019.html",
      "date_published": "2019-01-04T00:00:00+01:00",
      "author": {
        "name": "Pascal Hertleif",
        "url": "https://deterministic.space/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "e11a846b-3426-49af-b3b4-bc444adfe11b",
      "title": "Rust 2019 posts",
      "content_text": "When starting collecting ideas about this years Rust 2019 post, I had far to many to fit into one document. For that reasons, I’ll start writing multiple small pieces. I might come back to them at a later point this year. Most of my wishes are around the project structure, but I also have some technical ones. Most of them deal with the current growth and maturity of the project. All of these are living documents and even just drafts, so they might change at any time and might be released in draft form.",
      "url": "https://yakshav.es/rust-2019/",
      "date_published": "2019-01-03T23:57:00+00:00",
      "author": {
        "name": "Florian Gilcher",
        "url": "http://yakshav.es/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "51795148-94c2-4912-9e84-eb9502a80d4c",
      "title": "Rust 2019: Beat C++",
      "content_text": "I'm not a contributor outside a few issues here and there, but I have some thoughts about how Rust could be improved in 2019. There's been a lot of talk of the Fallow Year and limiting new features, and I think these are great ideas. With that in mind, a goal that follows along those lines is to \"Beat C++.\" Rust doesn't have to beat C++ by performing better in benchmarks. Rather, Rust can beat C++ by making it easier to write optimized code, benchmark it, and profile it.",
      "url": "https://www.reddit.com/r/rust/comments/acjcbp/rust_2019_beat_c/?st=JQIGPCJV&sh=0e8b6ffc",
      "date_published": "2019-01-05T00:00:00+00:00",
      "author": {
        "name": "u/Holy_City",
        "url": "https://www.reddit.com/user/Holy_City"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "f96e4dca-7eb6-4855-849f-97007457148d",
      "title": "Making and using C-compatible libraries in Rust: present and future",
      "content_text": "Since there are plenty of blogposts about what people would like to have or will implement in rust in 2019 here is mine.\n\nI spent the last few weeks of my spare time making a C-api for rav1e called crav1e, overall the experience had been a mixed bag and there is large space for improvement.",
      "url": "https://blogs.gentoo.org/lu_zero/2018/12/30/making-and-using-c-compatible-libraries-in-rust-present-and-future/",
      "date_published": "2018-12-30T09:25:47+00:00",
      "author": {
        "name": "Luca Barbato",
        "url": "https://blogs.gentoo.org/lu_zero/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "da6b6f38-a2c9-43df-a97b-6084e3a8ee7d",
      "title": "Rust in 2019",
      "content_text": "These are some rough notes on things in the Rust project that are important to me, that I’d like to work on in 2019. I haven’t got a grand vision this time around (I tried that last year, but ran out of bandwidth to properly drive it).",
      "url": "https://kodraus.github.io/rust/2019/01/01/rust-2019.html",
      "date_published": "2019-01-01T02:44:00+00:00",
      "author": {
        "name": "Ashley Mannix",
        "url": "https://kodraus.github.io/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "5ef7bb7d-ef60-4758-90e5-04c6cb63a544",
      "title": "My wishlist for Rust in 2019",
      "content_text": "It's starting to become a tradition to see a bunch of posts around the new year on what the community wants to see from Rust. For the second year in a row, the Rust core team asked for feedback for the 2019 roadmap and this is what I'd like: \"rustfix all the things\" and a better infrastructure.",
      "url": "https://www.pietroalbini.org/blog/rust-2019-wishlist/",
      "date_published": "2019-01-02T00:00:00+00:00",
      "author": {
        "name": "Pietro Albini",
        "url": "https://www.pietroalbini.org/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "02aaa21e-53a6-4e80-9ad2-73fdfcab3569",
      "title": "Rust 2019: Compiler, Community, and Const Generics",
      "content_text": "This article is a repsponse to the call for 2019 wishlist blog posts for the Rust programming language.",
      "url": "https://nicoburns.com/blog/rust-2019/",
      "date_published": "2019-01-03T00:00:00+00:00",
      "author": {
        "name": "Nico Burns",
        "url": "https://nicoburns.com/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "24596458-21bc-4c81-af9c-957f439796b3",
      "title": "My Personal Rust 2019",
      "content_text": "Many people have already posted their thoughts on the future of Rust. There are some excellent ideas in there that are probably more important than what I have to say. On the other hand my blog post covers my personal experiences I’ve had in the few years I’ve been writing Rust.",
      "url": "https://casualhacks.net/blog/2019-01-01/my-personal-rust-2019/",
      "date_published": "2019-01-01T00:00:00+00:00",
      "author": {
        "name": "Casper",
        "url": "http://casualhacks.net/blog/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "df592561-9217-416a-bb32-5d610d948fad",
      "title": "Rust in 2019: Working through the growing pains",
      "content_text": "TLDR: this post is not as eloquent as I’d like it to be, but the main takeaway\nis that Rust is still a fast growing language, and has experienced expected growing pains,\nboth social and technological. This is okay, and we as the community need to\nwork through these pains, with the teams, not despite them.",
      "url": "https://isaacwoods.tk/rust_2019/",
      "date_published": "2018-12-19T00:00:00+00:00",
      "author": {
        "name": "Isaac Woods",
        "url": "https://isaacwoods.tk/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "fb92d7a2-b953-45d4-89b0-83cd1648cc47",
      "title": "Rust 2019: Address the \"Big\" Problem",
      "content_text": "Tame Complexity through Community Involvement Tools",
      "url": "https://internals.rust-lang.org/t/rust-2019-address-the-big-problem/9109",
      "date_published": "2018-12-27T19:10:18+00:00",
      "author": {
        "name": "Sam Sieber",
        "url": "https://internals.rust-lang.org/u/samsieber"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "eb6cda74-6556-4a37-bd1e-0a6471b700e4",
      "title": "Rust in 2019: The next year and edition",
      "content_text": "This post is gonna be as much personal as it is both technical and people oriented. Buckle up, we’re gonna cover a lot of things, and a lot of it is not fun. This is definitely one of those, “We really need to look at ourselves in the mirror” hard truths posts. As I type this though, I’ve reflecting on the past few years with the Rust community I’m just in awe of the amount of work, dedication, and passion that’s gone into it. I started Rust when I was still starting my career and finishing up my CS degree and now we have a brand spanking new edition! So much has changed that it’s honestly mind boggling thinking about it. Even at work I gave a history of Rust presentation and it was wild being able to go “back in the day” for something that was just a regular day a few years ago.\n\nNow I find myself thinking about the problems we face as we become an even bigger community. We have a lot of problems. They’re good problems to have, but problems that must be solved eventually. I’m gonna go through all of them, what I see as major pain points/issues we’ve solved up to now, the present problems, and ones on the horizon. I’ll cover what I think we should focus on in the upcoming year and where we can go towards for Rust’s 2nd Edition. Let’s get started!",
      "url": "https://mgattozzi.com/rust-in-2019-the-next-year-and-edition/",
      "date_published": "2018-12-31T19:20:32+00:00",
      "author": {
        "name": "Michael Gattozzi",
        "url": "https://mgattozzi.com/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "536bfa8b-ba21-44b5-b570-3e5850de6320",
      "title": "Rust 2019 wish-list",
      "content_text": "I'm writing in Rust a lot less than what I'd like, in part because of the lack of time, in part because the language and developer experience are already good. What I found missing is...",
      "url": "https://www.reddit.com/r/rust/comments/a6y6my/rust_2019_wishlist/",
      "date_published": "2018-12-17T20:06:00+00:00",
      "author": {
        "name": "Matteo Bertini",
        "url": "https://mastodon.technology/@naufraghi"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "055bf639-2649-43e8-8604-91388b069c98",
      "title": "Rust 2019 -- Finish Core Stuff!",
      "content_text": "I am a relatively new in Rust, but I believe I have gathered enough experience the last few months to enjoy its strengths and discover some of its current shortcomings. Being relatively new at Rust, I am also of this generation that started immediately with Edition 2018. I switched to nightly very early on, and recently have been porting some code back to stable (1.31.x). I am overall very satisfied with Rust, but sometimes I come across something that doesn't work as I hoped. Every time that happens, I discover there is work-in-progress solving these issues, including, most of the time, a merged RFC, a nightly implementation behind feature gates or at least some blogs from core developers. Many time, the work I come across is from many years back.\n\nI have read several #Rust2019 and I want to use this opportunity to agree with those that suggest to finish current core stuff.",
      "url": "https://gist.github.com/magnet/fab817fd64411f65d8d5f5109eadd5f9",
      "date_published": "2018-12-25T19:03:55+00:00",
      "author": {
        "name": "Simon Chemouil",
        "url": "https://gist.github.com/magnet"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "ee55b2d9-0365-406f-aaef-b4247d8fdf78",
      "title": "All I Want for Rust 2019 is You (To Give a Talk)",
      "content_text": "A call to action for local Rust meetups.",
      "url": "https://optimistictypes.com/rust-2019/",
      "date_published": "2018-12-30T00:00:00+00:00",
      "author": {
        "name": "J Haigh",
        "url": "https://debugsteven.github.io/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "b6c3cfcb-a670-4295-8a94-a76931e60985",
      "title": "Rust 2019 - Usability and Tools",
      "content_text": "This is my personal answer to the call for Rust 2019 Roadmap blog posts. To make it easier to read I've separated the post into sections by topic: Cargo & Crates.io, Rustdoc, Language & Stdlib, Compiler & Analyzer.",
      "url": "https://crepererum.net/rust-2019-stabilization-and-ecosystem/",
      "date_published": "2018-12-28T19:07:59+00:00",
      "author": {
        "name": "Marco Neumann",
        "url": "https://crepererum.net/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "ae506c52-88d5-4803-ade0-610f083298ae",
      "title": "cargo-crev and Rust 2019 fearless code reuse",
      "content_text": "In my opinion, one of the biggest reasons why Rust is so productive is that it's a superb language for code reuse. Despite all these strengths, there's one problem that sticks out like a sore thumb: trust. Every additional dependency is another piece of code that could be buggy, or even malicious. And in my opinion, it's problem so serious, that is entirely blocking the untapped potential of code reuse in Rust.",
      "url": "https://dpc.pw/cargo-crev-and-rust-2019-fearless-code-reuse",
      "date_published": "2018-12-29T04:43:26+00:00",
      "author": {
        "name": "Dawid Ciężarkiewicz aka `dpc`",
        "url": "http://dpc.pw/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "94213785-3a82-4f06-99ee-8477c184903c",
      "title": "Thoughts on Rust in 2019",
      "content_text": "This year is also a bit special; in 2018, we introduced “editions” to Rust, on a roughly three-year schedule. So now is not just a good time to think about 2019, but about 2020 and 2021 as well. Rust 2015 was about “stability”. Rust 2018 was about “productivity.” I’d like Rust 2021 to be about “maturity.” In order to get there, here’s what we need in 2019.",
      "url": "https://words.steveklabnik.com/thoughts-on-rust-in-2019",
      "date_published": "2018-12-27T00:00:00+00:00",
      "author": {
        "name": "Steve Klabnik",
        "url": "https://words.steveklabnik.com/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "4f647aa7-226f-4b30-b814-399284d59111",
      "title": "My Wish List For Rust 2019",
      "content_text": "For the first time, I’m writing for the Rust Roadmap blog posts call. Why this year? Maybe because after being part of the community for 3-ish years, I feel I’ve reached a level of knowledge of the language that allows me to talk about it. I’m far from being an expert, but I wrote an application of my own and I am contributing to Cobalt. Enough experience to give me some material to think about.",
      "url": "https://haurchefant.fr/posts/2018/12/my-wishlist-for-rust-2019/",
      "date_published": "2018-12-28T15:48:15+00:00",
      "author": {
        "name": "Geobert Quach",
        "url": "https://haurchefant.fr/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "53e4c3d4-a70a-4caa-a4c8-17be048c93df",
      "title": "Thoughts on Rust in 2019",
      "content_text": "2018 was a success with the stated goals of releasing “editions” and working on usability/ergonomics. My first encounter with Rust was pre-1.0 (early 2015) and I immediately saw that Rust would be my future, wherein I joked to colleagues that I’d use it to “make toasters talk”. Followed by a sizeable hiatus (lack of personal time), I came back mid-year 2018. I can say for certain that the focus on usability and ergonomics was successful. Rust is much easier to use now than it was then. Rust format (rustfmt), Rust language server (RLS), text editor support, cargo tooling, compiler messages, and ecosystem crates’ quality and diversity are all amazing. The community is crazy diverse (first language learners, experienced systems people, web-dev people, programming language theory people, etc…). The chaos is well-managed with self-organizing working groups.",
      "url": "https://medium.com/@bowlescompling/thoughts-on-rust-in-2019-6c0af39a6b76",
      "date_published": "2018-12-28T16:49:44.954+00:00",
      "author": {
        "name": "Josh Bowles",
        "url": "https://medium.com/@bowlescompling"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "89df3ecf-8eeb-4da6-9945-3d69b6095f5e",
      "title": "My Rust 2019 Dream: Dominate the Web",
      "content_text": "A lot of people already know Rust is a great systems language. It can be put on embedded, feels better than C/C++ in many ways, and concurrency is way better than it was before. It's almost no doubt that Rust will continue to grow in these realms. The opportunity I see Rust has to lose though, is being the defacto language of the future of serious web programming. The dream I see is Rust as the language every one uses to create backend, front end, and perhaps even the distributed web ( wasm distributed apps on blockchain implementations).",
      "url": "https://www.reddit.com/r/rust/comments/aac8zk/my_rust_2019_dream_dominate_the_web/?st=JQ8PQ5Z8&sh=3ad6032f",
      "date_published": "2018-12-29T00:04:23+00:00",
      "author": {
        "name": "u/richardanaya",
        "url": "https://www.reddit.com/user/richardanaya/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "3e7aead6-1e45-4897-8029-993214b6eb99",
      "title": "Rust 2019: The shift in Rust",
      "content_text": "This is my answer to the call for blogposts about what I’d like the year 2019 to mean for Rust.",
      "url": "https://vorner.github.io/2018/12/27/rust-2019.html",
      "date_published": "2018-12-27T00:00:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "1b761099-8ee4-4e1c-86b1-2aeac151507c",
      "title": "Rust 2019: Stabilization",
      "content_text": "If you’re familiar with the history of Rust you might be confused with a call to stabilization. After all, Rust 2015 (a.k.a 1.0) was all about stabilization and the team has actually done a pretty good job with achieving this goal. So what gives?\n\nWhile Rust 2015 defined stabilization around language backward compatibility, it’s time for the language, the tooling, the ecosystem and the governance to stabilize. Each of these characterize stability in a different way. Let me explain a bit more what I mean.",
      "url": "https://blog.ryanlevick.com/posts/rust-2019/",
      "date_published": "2018-12-19T00:00:00+00:00",
      "author": {
        "name": "Ryan Levick",
        "url": "https://blog.ryanlevick.com/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "5a894193-9c56-4f80-8e38-546cadf5da44",
      "title": "Rust 2019: Ignorant Thoughts",
      "content_text": "I’ve written a single library in Rust, called Horned-OWL for manipulating OWL. The experience has been positive. There is already a good and complete library for manipulating OWL called the OWL API, so I needed a strong motivation for writing another. That motivation is simple: the OWL API is in Java and it is slow. Rust has fulfilled it’s promise for me; Horned-OWL is an order of magnitude faster thatn the OWL API. What have I learned from the experience though, and what could be improved?",
      "url": "http://www.russet.org.uk/blog/3207",
      "date_published": "2018-12-24T09:05:36+00:00",
      "author": {
        "name": "Phillip Lord",
        "url": "http://www.russet.org.uk/blog"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "f90bfac4-bbae-4d28-baec-d46eadb5e2cb",
      "title": "Rust in 2019",
      "content_text": "Rust made good progress in 2018: const fn in particular was a welcome and sorely needed feature. With #[panic_handler] now stable, we can finally write no_std binary crates on stable and not worry the next release will break it. We got some other useful features, including the following: u128, NonNull, fixed-length slice patterns, LTO, #[repr(transparent)], #[repr(align(_))] In 2019, I have one major wish for Rust: Const Generics.",
      "url": "https://blog.strake.me.uk/archives/93",
      "date_published": "2018-12-24T02:52:50+00:00",
      "author": {
        "name": "Strake",
        "url": "https://blog.strake.me.uk/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "1a96907b-61a3-4b4f-aba9-640a5b6ac00e",
      "title": "My wishlist for Rust ‘19",
      "content_text": "This isn’t exactly a blog so this won’t be exactly a “post”, but I’d like to write down my thoughts on this notepad answering the call for a wishlist for Rust 2019. Opinions expressed are from the point of view of an enthusiast, Rust apprentice, that happened to be knee-deep involved in organizing the RustFest in Rome. It’s fun to pin today some thoughts and see in 12 months how things will have evolved!",
      "url": "https://apiraino.github.io/2018/12/19/call-for-2019-roadmap.html",
      "date_published": "2018-12-19T00:00:00+01:00",
      "author": {
        "name": "apiraino",
        "url": "https://apiraino.github.io/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "1155adc5-9d95-4185-97bb-742e3c0bd446",
      "title": "Rust 2019 and beyond: limits to (some) growth",
      "content_text": "This is a blog post (as solicited) about my suggestions for the Rust project in 2019 and beyond. I should note that I am speaking only for myself, not anyone else, and not even as a very active participant in Rust anymore. Moreover these suggestions, to a large extent, apply to many projects. Rust is just one case, but one that is currently doing some conscious year-end reflection. I should also note overall that I'm quite pleased by the trajectory of the Rust project and this suggestion is being made only in the spirit of keeping it healthy and on-track, avoiding some problems I observe developing in it, as a mostly-outsider these days.",
      "url": "https://graydon2.dreamwidth.org/263429.html",
      "date_published": "2018-12-26T11:29:00+00:00",
      "author": {
        "name": "Graydon Hoare",
        "url": "https://graydon2.dreamwidth.org/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "1c724779-9e18-4c1a-94db-7799f444f6b3",
      "title": "Rust2019",
      "content_text": "It’s the time year to reflect on the past and to make wishful prospects for the future.",
      "url": "https://medium.com/@softprops/rust2019-83ebfe46602e",
      "date_published": "2018-12-21T05:47:42.351+00:00",
      "author": {
        "name": "Doug Tangren",
        "url": "https://medium.com/@softprops"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "db72fed1-63a5-41eb-868f-716f694cd52e",
      "title": "Rust 2019 -- Correctness and stabilizations",
      "content_text": "Last year for Rust 2018 I didn’t write a post like this, hoping to see other people write it. But even with a hundred plus posts that didn’t happen, so this year it’s the moment to speak up. I have used many different languages in past and when I started studying Rust at version 1.0 I was quickly impressed by its very good design, I was mostly in agreement with most of its design decisions, despite every useful language has a messy implementation. Even small things were designed with care. And I loved how much Rust cares for code correctness. I prefer to avoid long debug sessions and to use more time in the design and coding phases. So I’ve kept learning and using it ever since. For 2019 and beyond I’d like Rust to keep working on finishing its many unfinished parts.",
      "url": "https://internals.rust-lang.org/t/rust-2019-correctness-and-stabilizations/8991",
      "date_published": "2018-12-09T11:38:40+00:00",
      "author": {
        "name": "leonardo",
        "url": "http://www.fantascienza.net/leonardo/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "3edd04cc-9a58-4b57-ab93-d948575875d9",
      "title": "Rust 2019: Bootstrapping Minorities",
      "content_text": "As a response of https://blog.rust-lang.org/2018/12/06/call-for-rust-2019-roadmap-blogposts.html 3 for tooling improvement. Nice to see rust improved so much these few years on productivity but I think there is room for improvement. This would be my first post about Rust after hanging around for quite some time.",
      "url": "https://internals.rust-lang.org/t/rust-2019-bootstrapping-minorities/9053",
      "date_published": "2018-12-18T14:08:45+00:00",
      "author": {
        "name": "Ivan Tham",
        "url": "https://pickfire.tk/posts"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "2bc063a6-80f5-4f7b-aea3-329ceef00a8e",
      "title": "Rust 2019",
      "content_text": "The Rust team encouraged people to write blog posts reflecting on Rust in 2018 and proposing goals and directions for 2019. Here’s mine. This is knowingly blatantly focused on the niche that is immediately relevant to my work. I don’t even pretend this to represent any kind of overall big picture.",
      "url": "https://hsivonen.fi/rust2019/",
      "date_published": "2018-12-14T00:00:00+00:00",
      "author": {
        "name": "Henri Sivonen",
        "url": "https://hsivonen.fi/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "7ebb05f4-2bc2-4637-b38d-fd29d4a1cc3c",
      "title": "Rust 2019: Technical Debt, Continued Productivity, and Stability",
      "content_text": "I hope this post doesn't come across as a laundry list of stuff to do. Mainly, I consider a lot of this to be technical debt, and I would like to see it paid down a bit. Most of them also happen to be pain points that I have come across in my own usage of Rust, so perhaps I'm biased! Feel free to let me know...",
      "url": "https://gist.github.com/mark-i-m/2c3508ab7a9f2c48f634f0b5da3bb000",
      "date_published": "2018-12-11T23:47:53+00:00",
      "author": {
        "name": "@mark-i-m",
        "url": "https://gist.github.com/mark-i-m"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "f0adf24b-6589-4306-a580-6cef894ad3b7",
      "title": "Organizational Debt",
      "content_text": "We all know that classic aphorism: Year comes to an end, Rust blog post press send. This is mine.\n\nThere are lots of cool technical improvements to Rust that I want the project to achieve this year, and a few in particular that I’m definitely going to be putting a lot of time into. But this blog post is going to talk about none of them. Instead, I want to talk about organizational debt, and how badly the Rust project needs to deal with it in 2019.",
      "url": "https://boats.gitlab.io/blog/post/rust-2019/",
      "date_published": "2019-12-16T00:00:00+00:00",
      "author": {
        "name": "withoutboats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "94ad8d78-4b62-41ff-86c3-44690a1dbf66",
      "title": "My thoughts on Rust 2019",
      "content_text": "Recently, the Rust Core Team solicited blog posts on where Rust should be headed in 2019. Here’s mine.",
      "url": "https://raphlinus.github.io/rust/2018/12/16/rust-2019.html",
      "date_published": "2018-12-16T14:55:42+00:00",
      "author": {
        "name": "Raph Levien",
        "url": "https://raphlinus.github.io/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "8d54d930-66a9-438f-8dad-de13e2fe8c3c",
      "title": "Rust 2019: Go Slow",
      "content_text": "I have many technical wishes for Rust, the language, in 2019. However, I’m not going to mention any in particular in this post. In fact, I can almost say that I’d prefer for there to not be a focus on achieving technical milestones in the next year.",
      "url": "https://blog.hwc.io/posts/rust-2019/",
      "date_published": "2018-12-16T15:39:32-05:00",
      "author": {
        "name": "hwc",
        "url": "https://blog.hwc.io/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "34b69da0-cd61-4a16-8bfe-21d8d98dd4bd",
      "title": "Rust 2019",
      "content_text": "This is a bit of a brain dump of my thoughts about Rust 2019. Mainly I work on my own code coverage tool tarpaulin, embedded rust and random little tools. So my perspective will be coloured by this.",
      "url": "https://gist.github.com/xd009642/083a689c1fe460459d6bc792a626604e",
      "date_published": "2018-12-16T15:22:21+00:00",
      "author": {
        "name": "xd009642",
        "url": "https://gist.github.com/xd009642"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "f11f3bca-353a-4c96-b50d-7a28acb0d7ec",
      "title": "Intermission",
      "content_text": "Things I would like prioritized in the 2019 roadmap: Reduced Compilation Times, Refined Tools.",
      "url": "https://azriel.im/will/2018/12/18/intermission/",
      "date_published": "2018-12-18T11:31:13+13:00",
      "author": {
        "name": "Azriel Hoh",
        "url": "https://azriel.im/will"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "9e8f8e34-8fe9-4b4b-b40a-970e0a85a993",
      "title": "Sinistersnare's Rust 2019 Wishlist",
      "content_text": "Rust needs to focus on less glamorous features in 2019. We have added a lot of great features since 1.0, but we need to address the warts that we have had for a long time. I mostly echo sentiments from Jonathan Turner, Nathan Vegdahl, and many others in my ‘fallow-year’ sentiments. Overall, Compilation speed and generic constants are my two most wished-for features. On top of that, I would like to see more ecosystem work to make embedded applications more feasible and easy to use. Finally, Rust needs a moratorium on adding syntactic sugar for 2019.",
      "url": "https://drs.is/post/rust-wishlist-2019/",
      "date_published": "2018-12-12T08:10:44-05:00",
      "author": {
        "name": "Davis Ross Silverman",
        "url": "https://drs.is/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "fde9a5b7-9e92-41aa-994a-15bdb87d2909",
      "title": "My Wishes for Rust 2019",
      "content_text": "2018 was a massive year for rust, and it's great to reflect back on how far we've all come. My main wish for the new year is to put on the breaks a little bit, and finish off what has been started without taking on anything majorly new.",
      "url": "https://cetra3.github.io/blog/rust-2019/",
      "date_published": "2018-12-14T00:00:00+00:00",
      "author": {
        "name": "cetra3",
        "url": "https://github.com/cetra3/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "dcaa5235-2614-4f61-b0b4-8b1f2e0d136e",
      "title": "Lokathor's Rust 2019 wishpost",
      "content_text": "Recently I've been using Rust for GBA development (repo link), and before that I spent most of my Rust time with Handmade Hero work (the actual repo is private to handmade hero backers, so that link is just the main website). As you might expect, this has given me a quite different view of what I want to see from Rust. Basically, I don't want more crates. I want language, and tools, and most importantly education.",
      "url": "https://www.reddit.com/r/rust/comments/a4ygji/lokathors_rust_2019_wishpost",
      "date_published": "2018-12-11T05:47:42+11:00",
      "author": {
        "name": "u/Lokathor",
        "url": "https://www.reddit.com/user/Lokathor/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "a884801e-f80b-4ea4-8441-a86c2c736086",
      "title": "Rust 2019 - It's the Little Things",
      "content_text": "This might be an uncommon opinion—especially among those motivated enough to write a Rust 2019 post—but I actually think Rust is pretty much at a good place now. For the kinds of things that I want to do (e.g. my path tracer), there isn't much that Rust is lacking as a language. There are some fiddly things like \"placement new\" that could be useful, but nothing really major. And of course, well-designed new features are always welcome, they just don't seem particularly critical to me at this point. In other words, I'm pretty much satisfied. Mission accomplished, as far as I'm concerned. I think the rest is just polish. Just the little things.",
      "url": "https://blog.cessen.com/post/2018_12_12_rust_2019_its_the_little_things",
      "date_published": "2018-12-12T00:00:00+00:00",
      "author": {
        "name": "Nathan Vegdahl",
        "url": "https://blog.cessen.com/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "c0d67320-edd6-4eef-b345-bbf3288acaae",
      "title": "Rust 2019: Think Bigger",
      "content_text": "Rust shines when we find ways to have our cake and eat it too: memory safety without runtime garbage collection, abstraction without overhead, threading without data races. We must find new ways to continue this tradition for Rust 2019 and beyond.",
      "url": "http://fitzgeraldnick.com/2018/12/11/rust-2019-think-bigger.html",
      "date_published": "2018-12-11T00:00:00-08:00",
      "author": {
        "name": "Nick Fitzgerald",
        "url": "http://fitzgeraldnick.com/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "4259e940-d508-4de3-8971-3c3df7b30f98",
      "title": "Rust in 2022",
      "content_text": "A response to the call for 2019 roadmap blog posts. In case you missed it, we released our second edition of Rust this year! An edition is an opportunity to make backwards incompatible changes, but more than that it's an opportunity to bring attention to how programming in Rust has changed. With the 2018 edition out of the door, now is the time to think about the next edition: how do we want programming in Rust in 2022 to be different to programming in Rust today? Once we've worked that out, lets work backwards to what should be done in 2019.",
      "url": "https://www.ncameron.org/blog/rust-in-2022/",
      "date_published": "2018-12-11T04:34:31+00:00",
      "author": {
        "name": "Nick Cameron",
        "url": "http://www.ncameron.org/blog/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "57aae12d-0d27-4eec-b3f3-4ff99f294435",
      "title": "Rust 2019 – The Road Ahead",
      "content_text": "The Rust community team is soliciting blog posts to help plan the 2019 efforts. So here’s my take. I’ll start by looking back at the last year. We’ve seen great and impactful changes in the Rust landscape, such as non-lexical lifetimes, the stabilization of procedural macros and const fn, stable clippy and rustfmt, the further development of powerful IDE integration such as IntelliJ, Atom and VSCode.",
      "url": "https://llogiq.github.io/2018/12/08/rust.html",
      "date_published": "2018-12-08T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "0e733a02-5972-4106-98a7-d0613485cac1",
      "title": "Rust 2019 — let us pursue composability",
      "content_text": "We should drive home the goals set in spirit of productivity in 2019. We should also consider composibility as the next overarching theme.",
      "url": "https://medium.com/@GolDDranks/rust-2019-let-us-pursue-composability-70f1eb2238c3",
      "date_published": "2018-12-09T02:50:51.197+00:00",
      "author": {
        "name": "Pyry Kontio",
        "url": "https://medium.com/@GolDDranks"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "e20c3d81-ce4b-491d-98e1-632aeb5e40a4",
      "title": "Plans for 2019",
      "content_text": "Many people have asked me what I’m working on lately, and I thought I’d give a quick rundown of my status and plans for 2019. I intend to keep this post updated with the status of projects as they progress.",
      "url": "https://pcwalton.github.io/2018/12/07/plans-for-2019.html",
      "date_published": "2018-12-07T12:49:00+00:00",
      "author": {
        "name": "Patrick Walton",
        "url": "https://pcwalton.github.io/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "97627c69-e162-420e-8d30-22c0755d0b76",
      "title": "Rust in the new age",
      "content_text": "A wishlist of what I would like to accomplish with Rust in 2019.",
      "url": "https://quietmisdreavus.net/code/2018/12/07/rust-in-the-new-age/",
      "date_published": "2018-12-07T17:00:00-06:00",
      "author": {
        "name": "QuietMisdreavus",
        "url": "https://quietmisdreavus.net/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "e7334cc0-fe8a-4b16-b96f-c25b2073dc52",
      "title": "A simple agenda for the Rust Game Development WG",
      "content_text": "Proposing Amethyst as our flagship project.",
      "url": "https://medium.com/rustgamedev/a-simple-agenda-for-the-rust-game-development-wg-485cfc72b088",
      "date_published": "2018-12-07T23:51:48.344+00:00",
      "author": {
        "name": "Erlend S. Heggen",
        "url": "https://medium.com/@erlend_sh"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "8f026251-f6df-4816-a89f-855741aacbf6",
      "title": "The Fallow Year, my Rust2019 post",
      "content_text": "Rust is an amazing project. It’s unlike anything I’ve ever seen. Not only are we seeing an ever-growing number of big name users of Rust, we also continue to see leaps in productivity and functionality. Yesterday, the Rust 2018 edition shipped. The culmination of three years of work, it shows off what the community is capable of: new features, backwards compatibility, new ergonomics without sacrificing performance, and the list goes on and on.\n\nWhich is why it might comes as a little bit of a surprise that I suggest we let the field rest for the year. More specifically, that we should let one field rest while we plant another. Rather than focusing on new designs, I suggest we turn our attention outside of RFCs to other areas of Rust.",
      "url": "https://www.jonathanturner.org/2018/12/the-fallow-year.html",
      "date_published": "2018-12-08T00:00:00+00:00",
      "author": {
        "name": "Jonathan Turner",
        "url": "http://www.jonathanturner.org/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "efb83d26-14fa-4649-b4f2-e792f0e8a658",
      "title": "2019 Roadmap? More like a wishlist",
      "content_text": "I think there is too much unfinished and unpolished stuff in Rust. My wish for 2019 would be to ship most of this. If I had to choose a theme for Rust 2021 that would be \"Reliability\", to convey that what is shipped has actually been polished to the point that it does not fail.",
      "url": "https://www.reddit.com/r/rust/comments/a3sav1/2019_roadmap_more_like_a_wishlist_finish_and_ship/",
      "date_published": "2018-12-07T08:06:04+11:00",
      "author": {
        "name": "u/0b_0101_001_1010",
        "url": "https://www.reddit.com/user/0b_0101_001_1010/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "a3f673ea-49c8-4942-96a3-8565d6191ec5",
      "title": "Making Rust a perfect fit for high-performance computations",
      "content_text": "I think Rust could help at the task of writing performant computational software, because its expressiveness, flexibility and degree of low-level control rivals that of C++, which is the de facto dominant programming language of this community where sophisticated abstractions and high performance are both desired. All the while being vastly easier to learn, and to use correctly and efficiently at the same time.",
      "url": "https://gist.github.com/HadrienG2/e9a875bdf98b528594f4e20f8176bb68",
      "date_published": "2018-12-06T21:06:21+00:00",
      "author": {
        "name": "Hadrien G.",
        "url": "https://gist.github.com/HadrienG2"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "3234baba-f03d-467c-b032-d7d0dec7a12d",
      "title": " A call for Rust 2019 Roadmap blog posts",
      "content_text": "Starting today and running until of January 15, we’d like to ask the community to write blogposts reflecting on Rust in 2018 and proposing goals and directions for Rust in 2019.",
      "url": "https://blog.rust-lang.org/2018/12/06/call-for-rust-2019-roadmap-blogposts.html",
      "date_published": "2018-12-06T00:00:00+00:00",
      "author": {
        "name": "The Rust Community Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language",
        "Rust 2019"
      ]
    }
  ]
}