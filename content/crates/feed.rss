<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - Crates</title><link>https://readrust.net/</link><description>Crates posts on Read Rust</description><item><title>Futures 0.3.0-alpha.3</title><link>https://rust-lang-nursery.github.io/futures-rs/blog/2018/08/15/futures-0.3.0-alpha.3.html</link><description><![CDATA[A compatibility layer between 0.3 an 0.1 was developed. It is now possible to convert an 0.3 future into an 0.1 future and vice versa. Similar conversions for streams and sinks are also supported. Additionally, it is now possible to run 0.3 futures and async functions on Tokio’s executor. We have a dedicated blog post coming up that explains this in more detail.]]></description><guid isPermaLink="false">2105e8ca-6037-4dfa-86f7-644bdbec71bd</guid><pubDate>Wed, 15 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Josef Brandl</dc:creator></item><item><title>Tower Web 0.2 — Now 100% comment attribute free</title><link>https://medium.com/@carllerche/tower-web-0-2-now-100-comment-attribute-free-3ed0633e47e5</link><description><![CDATA[The short version is, Tower Web 0.2 was just released and regular Rust attributes are now used instead of magic comments. The doc comment is replaced with #[get("/")]. This is thanks to Rust macro wizard David Tolnay. I also thought that it would be best to immediately push out 0.2 and then we can all pretend 0.1 didn’t happen.]]></description><guid isPermaLink="false">e9ddc1eb-5ab9-4f23-8b9a-a41cea991044</guid><pubDate>Tue, 14 Aug 2018 16:22:13 +0000</pubDate><dc:creator>Carl Lerche</dc:creator></item><item><title>PrettySize for rust</title><link>https://neosmart.net/blog/2018/prettysize-for-rust/</link><description><![CDATA[We’ve just published a rust port of our PrettySize.NET library, now available via cargo and github. Like its .NET predecessor, PrettySize-rs aims to provide a comprehensive API for dealing with file sizes, covering both manipulation and human-readable formatting.]]></description><guid isPermaLink="false">02a5f7b7-0114-440d-9be0-d5aaf77bfa65</guid><pubDate>Sat, 11 Aug 2018 20:56:39 +0000</pubDate><dc:creator>Mahmoud Al-Qudsi</dc:creator></item><item><title>A small custom Bool Type in Diesel</title><link>https://noyez.gitlab.io/post/2018-08-05-a-small-custom-bool-type-in-diesel/</link><description><![CDATA[I’ve been working with diesel and serde. I use diesel for my postgres datastore, and serde for serializing/deserializing data to the web. Recently I came across a situation where I needed to define my type in diesel as well as implement deserialize in serde. The example below is a fairly simple so it makes for a good example to share so others can learn (and so I can remember how all this works next time I need it).]]></description><guid isPermaLink="false">2182c554-41eb-4ee7-a1de-11eb90a8223d</guid><pubDate>Sun,  5 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Noyez</dc:creator></item><item><title>Amethyst 0.8 has been released!</title><link>https://www.amethyst.rs/blog/release-0-8/</link><description><![CDATA[With a brand new tutorial and a ton of new features, including prefabs, controller support, MP3 audio, localisation and an even better ergonomics!]]></description><guid isPermaLink="false">b5717efe-ad7b-4b02-8554-aba801aff909</guid><pubDate>Sun,  5 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Moxinilian (Théo Degioanni)</dc:creator></item><item><title>Gutenberg 0.4.0: custom taxonomies, image processing and more</title><link>https://www.vincentprouillet.com/blog/releasing-gutenberg-0-4-0/</link><description><![CDATA[Gutenberg 0.4.0 is out with custom taxonomies, image processing, improved shortcodes and more.]]></description><guid isPermaLink="false">c1718910-2677-4da4-a45f-a8bd055fe075</guid><pubDate>Sat,  4 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Vincent Prouillet</dc:creator></item><item><title>intl_pluralrules: A Rust Crate for Handling Plural Forms with CLDR Plural Rules</title><link>https://blog.mozilla.org/l10n/2018/08/03/intl_pluralrules-a-rust-crate-for-handling-plural-forms-with-cldr-plural-rules/</link><description><![CDATA[intl_pluralrules is a Rust crate, built to handle pluralization. Pluralization is the foundation for all localization and many internationalization APIs. With the addition of intl_pluralrules, any locale-aware date-, time- or unit-formatting (“1 second” vs “2 seconds”) and many other pluralization-dependent APIs can be added to Rust.]]></description><guid isPermaLink="false">577e9c57-0455-41c6-9711-be71bf55e550</guid><pubDate>Fri,  3 Aug 2018 23:30:19 +0000</pubDate><dc:creator>Kekoa Riggin</dc:creator></item><item><title>Sequoia, a new OpenPGP implementation</title><link>https://www.reddit.com/r/rust/comments/93mng5/ann_sequoia_a_new_openpgp_implementation/</link><description><![CDATA[This past fall, three former GnuPG developers began working on a new OpenPGP implementation in Rust called Sequoia. As it’s starting to shape up and become useful, I feel now is a good time to announce the project to the larger Rust community, and hopefully get some feedback before our first release.]]></description><guid isPermaLink="false">81096070-a563-47a0-8f09-2e5fb3c1b984</guid><pubDate>Wed,  1 Aug 2018 16:50:12 +1000</pubDate><dc:creator>/u/nwalfield</dc:creator></item><item><title>warp</title><link>http://seanmonstar.com/post/176530511587/warp</link><description><![CDATA[Over the past several months, I’ve been working a web framework in Rust. I wanted to make use of the new hyper 0.12 changes, so the framework is just as fast, is asynchronous, and benefits from all the improvements found powering Linkerd. More importantly, I wanted there to be a reason for making a new framework; it couldn’t just be yet another framework with the only difference being I’ve written it. Instead, the way this framework is used is quite different than many that exist. In doing so, it expresses a strong opinion, which might not match your previous experiences, but I believe it manages to do something really special.

I’m super excited to reveal warp, a joint project with @carllerche.]]></description><guid isPermaLink="false">55adde79-edfa-433f-8c4f-40f2baee7cd9</guid><pubDate>Wed,  1 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Sean McArthur</dc:creator></item><item><title>#[derive(Debug)] on serde steroids</title><link>https://rreverser.com/derive-serdebug/</link><description><![CDATA[In this post I'd like to introduce a serdebug helper which is a drop-in replacement for #[derive(Debug)] with some of the advanced features that serde can provide.]]></description><guid isPermaLink="false">0a171d26-74e1-491c-befd-e02ac528c1ff</guid><pubDate>Tue, 31 Jul 2018 16:00:45 +0000</pubDate><dc:creator>Ingvar Stepanyan</dc:creator></item><item><title>Futures 0.3.0-alpha.2</title><link>https://rust-lang-nursery.github.io/futures-rs/blog/2018/07/30/futures-0.3.0-alpha.2.html</link><description><![CDATA[Several new changes while working towards 0.3.]]></description><guid isPermaLink="false">e29e550b-7c05-4625-9a81-513b316b5675</guid><pubDate>Mon, 30 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Josef Brandl</dc:creator></item><item><title>Using C libraries in Rust: make a sys crate</title><link>https://kornel.ski/rust-sys-crate</link><description><![CDATA[Using C libraries in a portable way involves a bit of work: finding the library on the system or building it if it's not available, checking if it is compatible, finding C headers and converting them to Rust modules, and giving Cargo correct linking instructions. Often every step of this is tricky, because operating systems, package managers and libraries have their unique quirks that need special handling.

Fortunately, all this work can be done once in a build script, and published as a <insert library name>-sys Rust crate. This way other Rust programmers will be able to use the C library without having to re-invent the build script themselves.]]></description><guid isPermaLink="false">e0622344-66a9-4b93-a59f-1b5250ba8c98</guid><pubDate>Mon, 30 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Kornel</dc:creator></item><item><title>nphysics: 2D and 3D real-time physics engine</title><link>http://nphysics.org/</link><description><![CDATA[I’m excited to announce the brand new website/user-guide for the nphysics2d and nphysics3d crates: pure-rust 2D and 3D real-time physics engines with rigid bodies and joints! Online wasm-based demos are also provided (see for example the Multibody joints 34 demo).]]></description><guid isPermaLink="false">a3f0bd42-0a42-4156-9fd6-74aebe5f0465</guid><pubDate>Sun, 29 Jul 2018 03:46:07 +1000</pubDate><dc:creator>Sébastien Crozet</dc:creator></item><item><title>Futures 0.3.0-alpha.1</title><link>https://rust-lang-nursery.github.io/futures-rs/blog/2018/07/19/futures-0.3.0-alpha.1.html</link><description><![CDATA[Welcome to the inaugural post of the new futures-rs blog!

After several months of work, we’re happy to announce an alpha release of the new edition of future-rs, version 0.3. The immediate goal of this work is to support async/await notation (with borrowing) in Rust itself, which has entailed significant changes to the futures crate.]]></description><guid isPermaLink="false">2a8864ba-0872-45d2-89f4-87e9f368374b</guid><pubDate>Thu, 19 Jul 2018 17:00:00 +0000</pubDate><dc:creator>Aaron Turon</dc:creator></item><item><title>Wayland-rs 0.21: Pure Rust implementation</title><link>https://smithay.github.io/wayland-rs-v-0-21.html</link><description><![CDATA[wayland-rs is a set of crates providing generic APIs to manipulate the Wayland protocol, successor of X11 for linux windowing.

Here I am finally, after having hinted at the possibility and finally taken the time to write and merge quite an epic pull request, I can finally say it: wayland-rs is now a pure rust implementation of the protocol, rather than a crate of bindings to the wayland system C libraries.]]></description><guid isPermaLink="false">e5caa9df-4d3f-46be-a8ce-79369f0cad32</guid><pubDate>Wed, 18 Jul 2018 22:00:00 +0200</pubDate><dc:creator>Victor Berger</dc:creator></item><item><title>Zapper: A Very Fast Templating Engine</title><link>https://ceres1.space/posts/zapper/</link><description><![CDATA[Thirty times faster than Handlebars, half the features! I am introducing a new templating engine for Rust that is designed to be robust and very fast! Why Zapper? Runtime templating is amazing, since you can reload templates on the fly or even allow users to provide their own templates, yet runtime templating engines are rarely fast. Templates that are statically compiled into your application can be super fast, but are completely inflexible. Recompiling and restarting your application just to change a template is especially boring. Zapper combines the flexibility of runtime templating with great performance!]]></description><guid isPermaLink="false">989d2bb2-c78b-4844-92ab-45509164c182</guid><pubDate>Mon, 25 Jun 2018 19:28:22 -0700</pubDate><dc:creator>Josh Leverette</dc:creator></item><item><title>Better HTTP Upgrades with hyper</title><link>http://seanmonstar.com/post/175280388657/better-http-upgrades-with-hyper</link><description><![CDATA[Better HTTP Upgrades with hyper It’s been possible to handle HTTP Upgrades (like Websockets) in hyper if you made use of the low-level APIs in the server and client, but it wasn’t especially nice to...]]></description><guid isPermaLink="false">faf1a345-9eaf-4d00-a7f7-9fa3afaa51ac</guid><pubDate>Tue, 26 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Sean McArthur</dc:creator></item><item><title>Building an Event Sourcing Crate for Rust</title><link>https://medium.com/@KevinHoffman/building-an-event-sourcing-crate-for-rust-2c4294eea165</link><description><![CDATA[In one of my recent blog posts, I talked about Event Sourcing with Aggregates in Rust. In that post, I was just beginning to explore how the Rust language and its strongly typed native data structures would allow me to express event sourcing concepts and primitives. I have now created an initial version of an Event Sourcing crate that you can explore on crates.io]]></description><guid isPermaLink="false">ced93c25-32fb-4e74-a5e4-5fb7cd60e8ee</guid><pubDate>Mon, 25 Jun 2018 13:30:42 +0000</pubDate><dc:creator>Kevin Hoffman</dc:creator></item><item><title>What I Learned: Porting Dateutil Parser to Rust</title><link>https://speice.io/2018/06/dateutil-parser-to-rust.html</link><description><![CDATA[Hi. I’m Bradlee. I’ve mostly been a lurker in Rust for a while, making a couple small contributions here and there. So launching dtparse feels like nice step towards becoming a functioning member of society. But not too much, because then you know people start asking you to pay bills, and ain’t nobody got time for that.

But I built dtparse, and you can read about my thoughts on the process. Or don’t. I won’t tell you what to do with your life (but you should totally keep reading).]]></description><guid isPermaLink="false">9c9c6dda-6538-4088-8123-e1ad213082e5</guid><pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Bradlee Speice</dc:creator></item><item><title>Writing Python Extensions In Rust Using PyO3</title><link>https://www.benfrederickson.com/writing-python-extensions-in-rust-using-pyo3/</link><description><![CDATA[I've been writing some code in Rust recently, and I thought it would be cool if I could take some of this Rust code and provide it as a native extension that I can call from Python. It turns out there are some amazing tools like PyO3 that make it easy to write fully featured Python extensions in Rust, with considerably less effort than writing a CPython extension manually.

To test out PyO3 I wrote a small Python extension in Rust, and I thought I would share some of the tips and tricks I encountered in getting this going. This post aims to serve as a quick tutorial showing how to write extensions in Rust, talking about why you might want to use something more powerful than just exposing a C library called using CFFI, and how PyO3 lets you write Python aware extensions in Rust. ]]></description><guid isPermaLink="false">afc3d2f1-e848-4c25-af60-89cf7209b3ba</guid><pubDate>Thu, 21 Jun 2018 00:00:00 -0700</pubDate><dc:creator>Ben Frederickson</dc:creator></item><item><title>Building better compression together with DivANS</title><link>https://blogs.dropbox.com/tech/2018/06/building-better-compression-together-with-divans/</link><description><![CDATA[Compressing your files is a good way to save space on your hard drive. At Dropbox’s scale, it’s not just a good idea; it is essential. Even a 1% improvement in compression efficiency can make a huge difference. That’s why we conduct research into lossless compression algorithms that are highly tuned for certain classes of files and storage, like Lepton for jpeg images, and Pied-Piper-esque lossless video encoding. For other file types, Dropbox currently uses the zlib compression format, which saves almost 8% of disk storage.

We introduce DivANS, our latest open-source contribution to compression, in this blog post.]]></description><guid isPermaLink="false">ff081914-cb16-4004-bc20-53e494477b8c</guid><pubDate>Tue, 19 Jun 2018 16:00:24 +0000</pubDate><dc:creator>Daniel Reiter Horn and Jongmin Baek</dc:creator></item><item><title>Fast and Simple Rendering in Rust using Proc Macros</title><link>https://medium.com/@MertzAlertz/fast-and-simple-rendering-in-rust-using-proc-macros-f0d919eb6475</link><description><![CDATA[I’ve been working on a project called Thruster recently, and needed a way that a developer could reasonably use templates. Thruster is a middleware based web server written in Rust (get it, th-rust-er? I’m working on my tight 5 for amateur night at The Apollo,) and as such, I needed a way to load HTML templates and insert variables into them in a performant way. Rather than poking around the numerous existing libraries and choosing one made by someone I don’t know — stranger danger! — I decided to make it myself. This article is about that journey, the unbelievably thrilling adventures of writing my first proc_macro_derive in Rust.]]></description><guid isPermaLink="false">31acdf03-3f59-4102-81ba-edafd6f2cfad</guid><pubDate>Tue, 19 Jun 2018 13:22:54 +0000</pubDate><dc:creator>Pete Mertz</dc:creator></item><item><title>A Trick For Test Maintenance</title><link>https://matklad.github.io/2018/06/18/a-trick-for-test-maintenance.html</link><description><![CDATA[This is a post about an interesting testing technique which feels like it should be well known. However, I haven’t seen it mentioned anywhere. I don’t even have a good name for it, I’ve semi-discovered it in the wild. If you know how this thing is called, please leave a comment!]]></description><guid isPermaLink="false">4548e0ef-697b-414c-8bf5-9a63a707bafb</guid><pubDate>Mon, 18 Jun 2018 15:00:16 +0000</pubDate><dc:creator>Aleksey Kladov</dc:creator></item><item><title>Let&apos;s Talk About Vector Graphics (In Rust)</title><link>https://nical.github.io/posts/rustfest-paris-01.html</link><description><![CDATA[I gave a talk about lyon at RustFest Paris. This post is the introduction of the talk, wherein I introduce vector graphics and try to get the audience somewhat excited about it. Things will get technical in the follow-up posts.]]></description><guid isPermaLink="false">edd88db5-3f05-4171-9159-de17a3a4db8a</guid><pubDate>Mon, 18 Jun 2018 00:00:00 +0200</pubDate><dc:creator>Nical</dc:creator></item><item><title>Tarpaulin Past Present Future</title><link>https://xd009642.github.io/2018/06/11/Tarpaulin-past-present-future.html</link><description><![CDATA[Tarpaulin (or cargo-tarpaulin) is a code coverage tool for Rust. Last year was pretty busy with the launch of the project and the rush of issues as people started to use it so this is just a chance to look at what’s new with version 0.6.0 and what’s planned for the rest of this year.]]></description><guid isPermaLink="false">27c8b7ed-32ab-4390-8be8-58678541dfb8</guid><pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate><dc:creator>xd009642</dc:creator></item><item><title>Integrating QML and Rust: Creating a QMetaObject at Compile Time</title><link>https://woboq.com/blog/qmetaobject-from-rust.html</link><description><![CDATA[In this blog post, I would like to present a research project I have been working on: Trying to use QML from Rust, and in general, using a C++ library from Rust. The project is a Rust crate which allows to create QMetaObject at compile time from pure Rust code. It is available here: https://github.com/woboq/qmetaobject-rs]]></description><guid isPermaLink="false">f98c539d-bf5c-4329-a4b2-bba3c4816350</guid><pubDate>Thu,  7 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Olivier Goffart</dc:creator></item><item><title>Crates.rs — a new, faster crate index website</title><link>https://crates.rs/index</link><description><![CDATA[Crates.rs, an alternative opinionated front-end to crates.io:

It’s fast.

All readmes are displayed whenever possible, and if there’s no or poor readme, doc comments are shown too.

It combines information from multiple sources, e.g. byline is a compact amalgamation of Cargo.toml, crates.io, and GitHub contributors, so you get an idea who wrote the code even if authors forgot to keep Cargo.toml up to date.

Crate popularity is displayed as top-N position in its most relevant category, e.g. “#5 in Cryptography”, which is more meaningful than absolute download numbers.

Optional dependencies display which feature or platform they’re for.

Version history is summarized to help see at a glance whether a crate gets regular updates and how often it has breaking changes.

Recognizes sys crates even if they’re not called -sys and shows when build.rs is used.

Category pages fit more crates on screen despite looking less cluttered and having easier to read descriptions.

All categories and their representative crates are right there on the homepage.

Syntax highlighting everywhere, including code blocks.

Everything works without JS and gets indexed by search engines, so I’m hoping the site will help find crates.]]></description><guid isPermaLink="false">01dd6aee-aa4b-46b9-a4dc-5d2550a96356</guid><pubDate>Mon,  4 Jun 2018 23:27:00 +0000</pubDate><dc:creator>Kornel</dc:creator></item><item><title>hyper v0.12</title><link>http://seanmonstar.com/post/174480374517/hyper-v012</link><description><![CDATA[Today sees the release of hyper v0.12.0, a fast and correct HTTP library for the Rust language.

This release adds support for several new features, while taking the opportunity to fix some annoyances, and improve the extreme speeds!]]></description><guid isPermaLink="false">9bf3f488-ace2-43b6-9f6b-3071241f7ed2</guid><pubDate>Fri,  1 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Sean McArthur</dc:creator></item><item><title>HTTP Crate with URL Support &amp; a Simple HTTP Client</title><link>https://pyfisch.org/blog/http-with-url/</link><description><![CDATA[While the http crate generally has a great API I have been unsatisfied how it handles URLs. To create a HTTP request a full URL is needed with a scheme (http/https), authority (example.org) and a path (/search?q=rust) but http does enforce this and allows you to only state the path. This means both clients and servers are either unable to determine protocol and and authority information or have to do this manually.]]></description><guid isPermaLink="false">d7340b81-5e94-4123-b830-c5cbbfa154d2</guid><pubDate>Fri,  1 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Pyfisch</dc:creator></item><item><title>nom 4.0: faster, safer, simpler parsers</title><link>http://unhandledexpression.com/general/2018/05/14/nom-4-0-faster-safer-simpler-parsers.html</link><description><![CDATA[It took nearly 6 months of development and the library went through nearly 5 entire rewrites. Compare that to previous major releases, which took a month at most to do. But it was worth it! This new release cleans up a lot of old bugs and unintuitive behaviours, simplifies some common patterns, is faster, uses less memory, gives better errors, but the way parsers are written stay the same. It’s like an entirely new engine under the same body work!]]></description><guid isPermaLink="false">600945e6-9cca-43fc-abe3-8b39f5eb1766</guid><pubDate>Mon, 14 May 2018 13:00:00 +0200</pubDate><dc:creator>Geoffroy Couprie</dc:creator></item><item><title>gtk-test - A crate for testing GTK UIs</title><link>http://gtk-rs.org/blog/2018/05/02/who-talked-about-testing.html</link><description><![CDATA[Currently, testing UIs is difficult, but with gtk-test you can test basically everything UI-related way more simply.]]></description><guid isPermaLink="false">df6d6cbf-58fc-49e6-a582-446c255a3d39</guid><pubDate>Wed,  2 May 2018 00:00:00 +0000</pubDate><dc:creator>Gtk-rs</dc:creator></item><item><title>New Tokio release, now with filesystem support</title><link>https://tokio.rs/blog/2018-05-tokio-fs/</link><description><![CDATA[It took a bit longer than I had initially hoped (as it always does), but a new Tokio version has been released. This release includes, among other features, a new set of APIs that allow performing filesystem operations from an asynchronous context.]]></description><guid isPermaLink="false">bcdee764-328b-440f-b1de-d4f4d4c14604</guid><pubDate>Wed,  2 May 2018 00:00:00 +0000</pubDate><dc:creator>Carl Lerche</dc:creator></item><item><title>Introducing Sentry for Rust</title><link>https://blog.sentry.io/2018/05/01/sentry-for-rust</link><description><![CDATA[As happy Rust users ourselves, it makes us even happier to be able to say that we now have a Sentry Rust SDK. This means you and your Fungiculture can now report panics, failures, and other types of incidents to Sentry.

Not only is the SDK new and fancy, it is also one of the first ones that follows our new API guidelines for Sentry SDKs, which makes it even newer and fancier than you might normally expect.]]></description><guid isPermaLink="false">83c972be-a658-4858-9277-474eebee81a1</guid><pubDate>Tue,  1 May 2018 00:00:00 +0000</pubDate><dc:creator>Armin Ronacher</dc:creator></item><item><title>Learn Rust by project</title><link>http://blog.jeffsmits.net/compsci/2018/04/30/learn-rust-by-project/</link><description><![CDATA[More than a year ago a friend of mine wanted to learn a bit more about Rust by trying out a project. He had a nice project in mind which suits Rust quite well I think. For fun I joined his effort and created an implementation at the same time as he did, discussing and comparing along the way. In this post I’ll tell you about the project specifics, but the point of the post is more an encouragement. If you’ve read about Rust before but haven’t tried it yet, find a small project like the one below, and learn Rust in a fun and hands-on way yourself. It’s a great programming language, I highly recommend it.]]></description><guid isPermaLink="false">d517cda7-1102-49bb-ab34-d14f5f0d09c0</guid><pubDate>Mon, 30 Apr 2018 00:00:00 +0000</pubDate><dc:creator>Jeff Smits</dc:creator></item><item><title>Rust+GNOME Hackfest #3</title><link>http://antoyo.ml/rust-gnome-hackfest-madrid</link><description><![CDATA[Last week, I was working on improving the integration of Rust with GNOME libraries at the third Hackfest, which happened this time in Madrid.]]></description><guid isPermaLink="false">8576f0a6-2866-4ac7-af07-dffd8e4ea019</guid><pubDate>Tue, 24 Apr 2018 00:00:00 +0000</pubDate><dc:creator>Antoni Boucher</dc:creator></item><item><title>im - Immutable Data Structures for Rust</title><link>https://docs.rs/im/10.0.0/im/</link><description><![CDATA[This library implements several of the more commonly useful immutable data structures for Rust. They rely on structural sharing to keep most operations fast without needing to mutate the underlying data store, leading to more predictable code without necessarily sacrificing performance.]]></description><guid isPermaLink="false">318f9d08-d86a-4799-ac08-75014d089475</guid><pubDate>Fri,  6 Apr 2018 21:06:00 +0000</pubDate><dc:creator>Bodil Stokke</dc:creator></item><item><title>MesaLink memory-safe and OpenSSL-compatible TLS library</title><link>https://github.com/mesalock-linux/mesalink</link><description><![CDATA[MesaLink is a memory-safe and OpenSSL-compatible TLS library. Since 2014, the industry has seen a huge loss due to memory vulnerabilities in TLS stacks, such as the infamous "Heartbleed" bug. MesaLink is created with the goal of eliminating memory vulnerabilities in TLS stacks. MesaLink is written in Rust, a programming language that guarantees memory safety. This significantly reduces the attack surfaces, which facilitates auditing and restricting the remaining attack surfaces. MesaLink is cross-platform and provides OpenSSL-compatible APIs. It works seamlessly in desktop, mobile, and IoT devices. With the growth of the ecosystem, MesaLink would also be adopted in the server environment in the future.]]></description><guid isPermaLink="false">afc97289-36f8-4acb-ab80-28e7770ea126</guid><pubDate>Fri,  6 Apr 2018 07:00:00 +1000</pubDate><dc:creator>MesaLock Linux</dc:creator></item><item><title>HTTP upgrades with hyper</title><link>http://seanmonstar.com/post/172531530657/http-upgrades-with-hyper</link><description><![CDATA[The newest release of hyper includes some lower-level connection APIs for both the server and client. Notably, this allows using hyper send and receive HTTP upgrade requests. The most popular of these is Websockets.]]></description><guid isPermaLink="false">0cb16bc7-daff-4747-81e5-d4455d33fc43</guid><pubDate>Mon,  2 Apr 2018 14:34:53 -0700</pubDate><dc:creator>Sean McArthur</dc:creator></item><item><title>Analysing crates.io data</title><link>https://tirkarthi.github.io/rust/2018/03/30/analyzing-crates-data.html</link><description><![CDATA[I am learning Clojure for the past one year and I thought making open source contributions is a great way to interact with the community. I made a post previously on using Clojars metadata to analyse JDK 9 and Clojure 1.9 issues that helped me file issues to ensure compatibility. I used the same method here to find the modules that were broken on a nightly version of a rustc due to a recent stabilisation.]]></description><guid isPermaLink="false">effc3ea9-0e61-4b47-ad1b-20782addb1bd</guid><pubDate>Fri, 30 Mar 2018 18:30:29 +0000</pubDate><dc:creator>Karthikeyan</dc:creator></item><item><title>New Timer implementation in Tokio</title><link>https://tokio.rs/blog/2018-03-timers/</link><description><![CDATA[To close out a great week, there is a new release of Tokio. This release includes a brand new timer implementation.]]></description><guid isPermaLink="false">cca40bed-4eaf-46c6-ae72-1e49ed3ef2ad</guid><pubDate>Fri, 30 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Carl Lerche</dc:creator></item><item><title>Announcing the Tokio runtime</title><link>https://tokio.rs/blog/2018-03-tokio-runtime/</link><description><![CDATA[I’m happy to announce a new release of Tokio. This release includes the first iteration of the Tokio Runtime.]]></description><guid isPermaLink="false">fd8646cf-2689-4bd8-b065-4708388250d2</guid><pubDate>Thu,  8 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Carl Lerche</dc:creator></item><item><title>Futures 0.2 is nearing release</title><link>http://aturon.github.io/2018/02/27/futures-0-2-RC/</link><description><![CDATA[On behalf of the futures-rs team, I’m very happy to announce that the master branch is now at 0.2: we have a release candidate! Barring any surprises, we expect to publish to crates.io in the next week or two.

You can peruse the 0.2 API via the hosted crate docs, or dive right in to the master branch. Note that Tokio is not currently compatible with Futures 0.2; see below for more detail.]]></description><guid isPermaLink="false">067e3ce9-6e69-499c-93f8-a9c4e0f99ce9</guid><pubDate>Tue, 27 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Aaron Turon</dc:creator></item><item><title>Failure 1.0.0 on March 15</title><link>https://boats.gitlab.io/blog/post/2018-02-22-failure-1.0/</link><description><![CDATA[I’m planning to release a 1.0.0 version of failure on March 15. Once this happens, I don’t plan to release any further breaking changes to the failure crate (though maybe someday in the distant future).
Breaking changes in 1.0 failure is in a somewhat unique position as being a significant part of the public API of other libraries that depend on it. Whether they use the Error struct or derive Fail for a custom error type, this becomes a part of the API they expose to other users.]]></description><guid isPermaLink="false">b079d66f-d08e-4593-80cc-e0060133d12e</guid><pubDate>Thu, 22 Feb 2018 00:00:00 +0000</pubDate><dc:creator>boats</dc:creator></item><item><title>Improved User Interface 0.2.0 Released!</title><link>https://www.patreon.com/posts/17016887</link><description><![CDATA[iui, the Improved User Interface crate, has just gotten its 0.2 release. Improved User Interface is a set of safe, idiomatic Rust bindings to platform native GUI libraries (Win32API, Cocoa, and GTK+) via libui and ui-sys. Highlights of this release include: Correct, semantic use of mutability, GTK+ theme application per window, and menu bars and file open/create modal support.]]></description><guid isPermaLink="false">c780f270-e190-4987-aff1-ff20ebe108bf</guid><pubDate>Fri, 16 Feb 2018 04:16:00 +0000</pubDate><dc:creator>Leo Tindall</dc:creator></item><item><title>Bincode 1.0.0, fast binary serialization with Serde</title><link>http://tyoverby.com/posts/bincode_release.html</link><description><![CDATA[Bincode is a serializer implementation for Serde. If you stick a #[derive(Deserialize, Serialize)] on your struct, Bincode can efficiently serialize and deserialize those structs to and from bytes. Bincode is unique in that it’s a format that was built specifically for the Rust serialization ecosystem. Tight coupling with Serde allows Bincode to be very fast and serialize to very small payloads.]]></description><guid isPermaLink="false">6a1644f0-2b9e-4c82-9ccd-ef69815f560f</guid><pubDate>Thu, 15 Feb 2018 18:49:27 +0000</pubDate><dc:creator>Ty Overby</dc:creator></item><item><title>Mutation Testing Rust in Earnest</title><link>http://llogiq.github.io/2018/02/14/mutagen.html</link><description><![CDATA[It’s been a while since I last suggested Mutation Testing in Rust, almost two years ago. Since then I got sidetracked a lot, and later lost interest. Just one more cool project I couldn’t afford to take on. But as things go, my interest in mutation testing was rekindled, and I decided to give it a shot and do more than blogging about it.]]></description><guid isPermaLink="false">a2946d73-a2c7-4d2a-899c-080258552b07</guid><pubDate>Wed, 14 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>Corona: If you want to get async out out of your way</title><link>https://vorner.github.io/corona-04.html</link><description><![CDATA[For some time now I develop a Rust library for asynchronous programming with coroutines, called Corona (note there’s a version 0.4.0-pre.1, but Crates prefer the „stable“ 0.3.1). I believe it is starting to be useful, so I wrote this description to show what it is good for and how it fits into the big picture of Rust. There’ll be some more changes, though, at least because Tokio just released a new version (and Futures plan to do so soon), so Corona will have to adapt.]]></description><guid isPermaLink="false">019b1da3-b979-478b-89ed-7824c75df122</guid><pubDate>Sun, 11 Feb 2018 19:51:00 +1100</pubDate><dc:creator>Michal &apos;vorner&apos; Vaner</dc:creator></item><item><title>First release of TQL: the easy-to-use ORM for Rust</title><link>http://tql-rs.ml/first-release/</link><description><![CDATA[After a couple of weeks of work, I'm now happy to release the first version of tql, the easy-to-use ORM for Rust. While the focus was to make tql work on the stable version of the compiler, I also added some new features. The most notable new feature is the support for SQLite: now tql supports SQLite as well as PostgreSQL. The support for SQLite is almost as complete as the one for PostgreSQL: the only missing function is not implemented because the backend (SQLite) does not support it.]]></description><guid isPermaLink="false">35c70f95-6097-47df-a470-bb92e99b27e5</guid><pubDate>Sat, 10 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Antoni</dc:creator></item><item><title>Combine 3 - Partial parsing in Rust</title><link>https://marwes.github.io/2018/02/08/combine-3.html</link><description><![CDATA[Combine is a parser combinator library for the Rust programming language. I first announced version 3 of Combine back in August and back then I definitely expected to have a stable version by now. However other projects (cough gluon cough) got in the way and Combine fell to the wayside. It didn’t help that I didn’t have a killer feature for 3.0 either, user-defined error types make it possible to define parsers usable in #[no_std] crates which is great when you need it but it is still a fairly niche use-case.]]></description><guid isPermaLink="false">29eb1ede-d551-4b8d-aeec-c673aafb7e8f</guid><pubDate>Thu,  8 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Markus Westerlind</dc:creator></item><item><title>Tokio Reform is Shipped and the Road to 0.2</title><link>https://tokio.rs/blog/2018-02-tokio-reform-shipped/</link><description><![CDATA[I'm happy to announce that today, the changes proposed in the reform RFC have been released to crates.io as tokio 0.1. The primary changes are: Add a default global event loop, eliminating the need for setting up and managing your own event loop in the vast majority of cases, and decouple all task execution functionality from Tokio.]]></description><guid isPermaLink="false">b0a2bc9c-effa-4859-b804-cbe839060855</guid><pubDate>Wed,  7 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Carl Lerche</dc:creator></item><item><title>Criterion.rs v0.2 - a statistics-driven benchmarking library for Rust</title><link>https://bheisler.github.io/post/criterion-rs-0-2/</link><description><![CDATA[Criterion.rs is a statistics-driven benchmarking library for Rust. It provides precise measurements of changes in the performance of benchmarked code, and gives strong statistical confidence that apparent performance changes are real and not simply noise. Clear output, a simple API and reasonable defaults make it easy to use even for developers without a background in statistics. Unlike the benchmarking harness provided by Rust, Criterion.rs can be used with stable versions of the compiler.]]></description><guid isPermaLink="false">5e5df82f-aba3-4832-bbe6-e995b2e544ef</guid><pubDate>Mon,  5 Feb 2018 07:00:00 -0600</pubDate><dc:creator>Brook Heisler</dc:creator></item><item><title>Faster Progress Report 2</title><link>https://adamniederer.com/blog/faster-pr-2.html</link><description><![CDATA[faster began as a yak shave, created to aid base💯 in its quest to become the fastest meme on Github. Writing an explicit AVX2-accelerated version of base💯's encoder and decoder, then realizing I'd have to do the same thing again to see the speedups on my Ivy Bridge desktop, pushed me to make this library. Months later, it has blossomed into its own project, and has eclipsed base💯 in both popularity and promise.]]></description><guid isPermaLink="false">e1a29851-ab4c-4739-a41f-56e9c783f5e4</guid><pubDate>Sun, 28 Jan 2018 22:14:41 +0000</pubDate><dc:creator>Adam Niederer</dc:creator></item><item><title>dalek cryptography</title><link>https://dalek.rs/</link><description><![CDATA[A suite of cryptographic libraries and protocol implementations, written in the systems programming language Rust, for creating blazingly-fast, production-quality cryptographic applications.]]></description><guid isPermaLink="false">ef7fa499-a585-491d-9700-38962a125092</guid><pubDate>Wed, 24 Jan 2018 00:07:02 +0000</pubDate><dc:creator>isis agora lovecruft</dc:creator></item></channel></rss>