<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - Crates</title><link>https://readrust.net/</link><description>Crates posts on Read Rust</description><item><title>HTTP upgrades with hyper</title><link>http://seanmonstar.com/post/172531530657/http-upgrades-with-hyper</link><description>The newest release of hyper includes some lower-level connection APIs for both the server and client. Notably, this allows using hyper send and receive HTTP upgrade requests. The most popular of these is Websockets.</description><guid isPermaLink="false">0cb16bc7-daff-4747-81e5-d4455d33fc43</guid><pubDate>Mon,  2 Apr 2018 14:34:53 -0700</pubDate><dc:creator>Sean McArthur</dc:creator></item><item><title>Analysing crates.io data</title><link>https://tirkarthi.github.io/rust/2018/03/30/analyzing-crates-data.html</link><description>I am learning Clojure for the past one year and I thought making open source contributions is a great way to interact with the community. I made a post previously on using Clojars metadata to analyse JDK 9 and Clojure 1.9 issues that helped me file issues to ensure compatibility. I used the same method here to find the modules that were broken on a nightly version of a rustc due to a recent stabilisation.</description><guid isPermaLink="false">effc3ea9-0e61-4b47-ad1b-20782addb1bd</guid><pubDate>Fri, 30 Mar 2018 18:30:29 +0000</pubDate><dc:creator>Karthikeyan</dc:creator></item><item><title>New Timer implementation in Tokio</title><link>https://tokio.rs/blog/2018-03-timers/</link><description>To close out a great week, there is a new release of Tokio. This release includes a brand new timer implementation.</description><guid isPermaLink="false">cca40bed-4eaf-46c6-ae72-1e49ed3ef2ad</guid><pubDate>Fri, 30 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Carl Lerche</dc:creator></item><item><title>Announcing the Tokio runtime</title><link>https://tokio.rs/blog/2018-03-tokio-runtime/</link><description>Iâ€™m happy to announce a new release of Tokio. This release includes the first iteration of the Tokio Runtime.</description><guid isPermaLink="false">fd8646cf-2689-4bd8-b065-4708388250d2</guid><pubDate>Thu,  8 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Carl Lerche</dc:creator></item><item><title>Futures 0.2 is nearing release</title><link>http://aturon.github.io/2018/02/27/futures-0-2-RC/</link><description>On behalf of the futures-rs team, Iâ€™m very happy to announce that the master branch is now at 0.2: we have a release candidate! Barring any surprises, we expect to publish to crates.io in the next week or two.

You can peruse the 0.2 API via the hosted crate docs, or dive right in to the master branch. Note that Tokio is not currently compatible with Futures 0.2; see below for more detail.</description><guid isPermaLink="false">067e3ce9-6e69-499c-93f8-a9c4e0f99ce9</guid><pubDate>Tue, 27 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Aaron Turon</dc:creator></item><item><title>Failure 1.0.0 on March 15</title><link>https://boats.gitlab.io/blog/post/2018-02-22-failure-1.0/</link><description>Iâ€™m planning to release a 1.0.0 version of failure on March 15. Once this happens, I donâ€™t plan to release any further breaking changes to the failure crate (though maybe someday in the distant future).
Breaking changes in 1.0 failure is in a somewhat unique position as being a significant part of the public API of other libraries that depend on it. Whether they use the Error struct or derive Fail for a custom error type, this becomes a part of the API they expose to other users.</description><guid isPermaLink="false">b079d66f-d08e-4593-80cc-e0060133d12e</guid><pubDate>Thu, 22 Feb 2018 00:00:00 +0000</pubDate><dc:creator>boats</dc:creator></item><item><title>Mutation Testing Rust in Earnest</title><link>http://llogiq.github.io/2018/02/14/mutagen.html</link><description>Itâ€™s been a while since I last suggested Mutation Testing in Rust, almost two years ago. Since then I got sidetracked a lot, and later lost interest. Just one more cool project I couldnâ€™t afford to take on. But as things go, my interest in mutation testing was rekindled, and I decided to give it a shot and do more than blogging about it.</description><guid isPermaLink="false">a2946d73-a2c7-4d2a-899c-080258552b07</guid><pubDate>Wed, 14 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>Improved User Interface 0.2.0 Released!</title><link>https://www.patreon.com/posts/17016887</link><description>iui, the Improved User Interface crate, has just gotten its 0.2 release. Improved User Interface is a set of safe, idiomatic Rust bindings to platform native GUI libraries (Win32API, Cocoa, and GTK+) via libui and ui-sys. Highlights of this release include: Correct, semantic use of mutability, GTK+ theme application per window, and menu bars and file open/create modal support.</description><guid isPermaLink="false">c780f270-e190-4987-aff1-ff20ebe108bf</guid><pubDate>Fri, 16 Feb 2018 04:16:00 +0000</pubDate><dc:creator>Leo Tindall</dc:creator></item><item><title>Bincode 1.0.0, fast binary serialization with Serde</title><link>http://tyoverby.com/posts/bincode_release.html</link><description>Bincode is a serializer implementation for Serde. If you stick a #[derive(Deserialize, Serialize)] on your struct, Bincode can efficiently serialize and deserialize those structs to and from bytes. Bincode is unique in that itâ€™s a format that was built specifically for the Rust serialization ecosystem. Tight coupling with Serde allows Bincode to be very fast and serialize to very small payloads.</description><guid isPermaLink="false">6a1644f0-2b9e-4c82-9ccd-ef69815f560f</guid><pubDate>Thu, 15 Feb 2018 18:49:27 +0000</pubDate><dc:creator>Ty Overby</dc:creator></item><item><title>First release of TQL: the easy-to-use ORM for Rust</title><link>http://tql-rs.ml/first-release/</link><description>After a couple of weeks of work, I&apos;m now happy to release the first version of tql, the easy-to-use ORM for Rust. While the focus was to make tql work on the stable version of the compiler, I also added some new features. The most notable new feature is the support for SQLite: now tql supports SQLite as well as PostgreSQL. The support for SQLite is almost as complete as the one for PostgreSQL: the only missing function is not implemented because the backend (SQLite) does not support it.</description><guid isPermaLink="false">35c70f95-6097-47df-a470-bb92e99b27e5</guid><pubDate>Sat, 10 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Antoni</dc:creator></item><item><title>Corona: If you want to get async out out of your way</title><link>https://vorner.github.io/corona-04.html</link><description>For some time now I develop a Rust library for asynchronous programming with coroutines, called Corona (note thereâ€™s a version 0.4.0-pre.1, but Crates prefer the â€žstableâ€œ 0.3.1). I believe it is starting to be useful, so I wrote this description to show what it is good for and how it fits into the big picture of Rust. Thereâ€™ll be some more changes, though, at least because Tokio just released a new version (and Futures plan to do so soon), so Corona will have to adapt.</description><guid isPermaLink="false">019b1da3-b979-478b-89ed-7824c75df122</guid><pubDate>Sun, 11 Feb 2018 19:51:00 +1100</pubDate><dc:creator>Michal &apos;vorner&apos; Vaner</dc:creator></item><item><title>Combine 3 - Partial parsing in Rust</title><link>https://marwes.github.io/2018/02/08/combine-3.html</link><description>Combine is a parser combinator library for the Rust programming language. I first announced version 3 of Combine back in August and back then I definitely expected to have a stable version by now. However other projects (cough gluon cough) got in the way and Combine fell to the wayside. It didnâ€™t help that I didnâ€™t have a killer feature for 3.0 either, user-defined error types make it possible to define parsers usable in #[no_std] crates which is great when you need it but it is still a fairly niche use-case.</description><guid isPermaLink="false">29eb1ede-d551-4b8d-aeec-c673aafb7e8f</guid><pubDate>Thu,  8 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Markus Westerlind</dc:creator></item><item><title>Tokio Reform is Shipped and the Road to 0.2</title><link>https://tokio.rs/blog/2018-02-tokio-reform-shipped/</link><description>I&apos;m happy to announce that today, the changes proposed in the reform RFC have been released to crates.io as tokio 0.1. The primary changes are: Add a default global event loop, eliminating the need for setting up and managing your own event loop in the vast majority of cases, and decouple all task execution functionality from Tokio.</description><guid isPermaLink="false">b0a2bc9c-effa-4859-b804-cbe839060855</guid><pubDate>Wed,  7 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Carl Lerche</dc:creator></item><item><title>Criterion.rs v0.2 - a statistics-driven benchmarking library for Rust</title><link>https://bheisler.github.io/post/criterion-rs-0-2/</link><description>Criterion.rs is a statistics-driven benchmarking library for Rust. It provides precise measurements of changes in the performance of benchmarked code, and gives strong statistical confidence that apparent performance changes are real and not simply noise. Clear output, a simple API and reasonable defaults make it easy to use even for developers without a background in statistics. Unlike the benchmarking harness provided by Rust, Criterion.rs can be used with stable versions of the compiler.</description><guid isPermaLink="false">5e5df82f-aba3-4832-bbe6-e995b2e544ef</guid><pubDate>Mon,  5 Feb 2018 07:00:00 -0600</pubDate><dc:creator>Brook Heisler</dc:creator></item><item><title>Faster Progress Report 2</title><link>https://adamniederer.com/blog/faster-pr-2.html</link><description>faster began as a yak shave, created to aid baseðŸ’¯ in its quest to become the fastest meme on Github. Writing an explicit AVX2-accelerated version of baseðŸ’¯&apos;s encoder and decoder, then realizing I&apos;d have to do the same thing again to see the speedups on my Ivy Bridge desktop, pushed me to make this library. Months later, it has blossomed into its own project, and has eclipsed baseðŸ’¯ in both popularity and promise.</description><guid isPermaLink="false">e1a29851-ab4c-4739-a41f-56e9c783f5e4</guid><pubDate>Sun, 28 Jan 2018 22:14:41 +0000</pubDate><dc:creator>Adam Niederer</dc:creator></item></channel></rss>