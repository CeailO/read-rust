<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - Crates</title><link>https://readrust.net/</link><description>Crates posts on Read Rust</description><item><title>Palette 0.5.0</title><link>https://ogeon.github.io/2019/11/17/palette-0-5-0.html</link><description><![CDATA[Well, here it is. The (by some, at least) long awaited Palette 0.5.0 release. This one has been brewing for quite some time while waiting for the ecosystem to really support one of its main additions1. That addition is #[no_std] support.

First, what is Palette? It’s a Rust library for working with colors and color spaces. It uses the type system to prevent mistakes, like mixing incompatible colors or working with non-linear RGB. It encodes the color spaces and their meta data (such as RGB primaries and white point) into the types to help making color processing less error prone and hopefully more accessible to those who don’t want to dive into the rabbit hole that is colors in computing.]]></description><guid isPermaLink="false">f9d49eda-fad3-4ac9-9c8b-5aecf24d6f5e</guid><pubDate>Sun, 17 Nov 2019 00:00:00 +0000</pubDate><dc:creator>Ogeon</dc:creator></item><item><title>Understanding Serde</title><link>https://www.joshmcguigan.com/blog/understanding-serde/</link><description><![CDATA[Serde is one of the most popular Rust crates, and deservedly so. If you aren’t familiar, Serde describes itself as “a framework for serializing and deserializing Rust data structures efficiently and generically.” What is most impressive to me is how robust the Serde data model has proven to be, allowing it to support human readable protocols like JSON and YAML, but also binary formats like Bincode. Its really a bonus that Serde does this while remaining exceptionally performant.

This blog posts dives into how Serde (along with the ecosystem of Serde data formats) is able to pull this off. To limit the scope of this post I am going to focus on Serde serialization to JSON, and skip any discussion of deserialization. If you are interested in deserialization (or a different data format) I believe you will be able to perform a similar analysis yourself after reading this post.]]></description><guid isPermaLink="false">ce12c4d6-aa8d-4278-9772-4ab55dc2925b</guid><pubDate>Sun, 17 Nov 2019 00:00:00 +0000</pubDate><dc:creator>Josh Mcguigan</dc:creator></item><item><title>Bastion v0.3.0 is here with a new API and faster execution!</title><link>https://bastion.rs/</link><description><![CDATA[Bastion is a highly-available, fault-tolerant runtime system with dynamic dispatch oriented lightweight process model.]]></description><guid isPermaLink="false">113d436f-484b-4779-9428-6bde87acd07b</guid><pubDate>Fri, 15 Nov 2019 03:52:14 +0000</pubDate><dc:creator>Mahmut Bulut</dc:creator></item><item><title>The GTK Rust bindings are not ready yet? Yes they are!</title><link>https://coaxion.net/blog/2019/11/the-gtk-rust-bindings-are-not-ready-yet-yes-they-are/</link><description><![CDATA[When talking to various people at conferences in the last year or at conferences, a recurring topic was that they believed that the GTK Rust bindings are not ready for use yet.

I don’t know where that perception comes from but if it was true, there wouldn’t have been applications like Fractal, Podcasts or Shortwave using GTK from Rust, or I wouldn’t be able to do a workshop about desktop application development in Rust with GTK and GStreamer at the Linux Application Summit in Barcelona this Friday (code can be found here already) or earlier this year at GUADEC.]]></description><guid isPermaLink="false">09c52285-f854-44ec-a925-43ad22b06d84</guid><pubDate>Wed, 13 Nov 2019 15:02:57 +0000</pubDate><dc:creator>Sebastian Dröge</dc:creator></item><item><title>CSS in librsvg is now in Rust, courtesy of Mozilla Servo</title><link>https://people.gnome.org/~federico/blog/css-in-librsvg-is-now-in-rust.html</link><description><![CDATA[After an epic amount of refactoring, librsvg now does all CSS parsing and matching in Rust, without using libcroco. In addition, the CSS engine comes from Mozilla Servo, so it should be able to handle much more complex CSS than librsvg ever could before. This is the story of CSS support in librsvg.]]></description><guid isPermaLink="false">2f92e5a1-d218-459f-a417-c5e4f58be832</guid><pubDate>Mon, 11 Nov 2019 19:36:04 -0600</pubDate><dc:creator>Federico Mena Quintero</dc:creator></item><item><title>Announcing async-std 1.0</title><link>https://async.rs/blog/announcing-async-std-1-0/</link><description><![CDATA[async-std is a port of Rust’s standard library to the async world. It comes with a fast runtime and is a pleasure to use. We’re happy to finally announce async-std 1.0. As promised in our first announcement blog post, the stable release coincides with the release of Rust 1.39, the release adding async/.await. We would like to thank the active community around async-std for helping get the release through the door.]]></description><guid isPermaLink="false">7e260d4f-38ce-456b-be84-83ad8c13f4df</guid><pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate><dc:creator>Florian Gilcher</dc:creator></item><item><title>iou: Rust bindings for liburing</title><link>https://boats.gitlab.io/blog/post/iou/</link><description><![CDATA[Today I’m releasing a library called iou. This library provides idiomatic Rust bindings to the C library called liburing, which itself is a higher interface for interacting with the io_uring Linux kernel interface. Here are the answers to some questions I expect that may provoke.

What is io_uring? io_uring is an interface added to the Linux kernel in version 5.1. Concurrent with that, the primary maintainer of that interface has also been publishing a library for interacting with it called liburing.]]></description><guid isPermaLink="false">eab14a89-9177-44ce-8259-07c6ae33bdfa</guid><pubDate>Fri,  8 Nov 2019 00:00:00 +0000</pubDate><dc:creator>boats</dc:creator></item><item><title>This month in rustsim #8 (August − September - October 2019)</title><link>https://www.rustsim.org/blog/2019/11/01/this-month-in-rustsim/</link><description><![CDATA[Welcome to the eighth edition of This month in rustsim! This monthly newsletter will provide you with a summary of important update that occurred within the rustsim community. This includes in particular updates about the nphysics (physics engine), salva (fluid simulation), ncollide (for collision-detection), nalgebra (for linear algebra), and alga (for abstract algebra) crates. This eighth edition will actually contain updates for the past three months (I got sick between the second and third month so I did not get the time to write a new post then. Sorry!)]]></description><guid isPermaLink="false">6b61d3a8-a487-4399-a347-43e16c50abc1</guid><pubDate>Fri,  1 Nov 2019 00:00:00 +0000</pubDate><dc:creator>Sébastien Crozet</dc:creator></item><item><title>Making Good On Momo’s Compile-Time Promise</title><link>https://llogiq.github.io/2019/10/28/momo-fast.html</link><description><![CDATA[When I announced momo, I wanted its users to save both binary size and compile time while keeping their code simple. I succeeded in the first goal, but failed regarding the second. The reason was that momo requires syn and quote which (unless you have other proc macros in your dependencies) add their own compile time to yours.]]></description><guid isPermaLink="false">61d6deeb-4ef7-4ad7-b6d8-3d9c650501c8</guid><pubDate>Mon, 28 Oct 2019 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>sorted-vec: A sorted array with O(lg n) access and O(√n) inserts and deletes</title><link>https://github.com/senderista/sorted-vec</link><description><![CDATA[This repository contains implementations, unit tests, and benchmark code for the "2-level rotated array" structure, first published in Munro and Suwanda's 1979 paper "Implicit Data Structures for Fast Search and Update" (which also introduced the much better-known beap data structure). This structure is further developed and discussed in "Implicit Data Structures for the Dictionary Problem" (1983) and "Succinct Dynamic Data Structures" (2001). (The latter generalizes the idea to the dynamic array abstract data type, rather than a sorted array.)

The theoretical advantage of a 2-level rotated array over an ordinary sorted array is that it provides the same search performance (O(log n)), with much better insert and delete performance (O(√n), compared to O(n) for a sorted array), in exactly the same amount of space (i.e., no more than the data itself).]]></description><guid isPermaLink="false">30aad534-3914-4d3a-90f3-bc092652d92b</guid><pubDate>Sun, 27 Oct 2019 00:00:00 +0000</pubDate><dc:creator>Tobin Baker</dc:creator></item><item><title>Towards Overflower 1.0</title><link>https://llogiq.github.io/2019/10/23/overflower.html</link><description><![CDATA[The overflower crate contains a helper library and procedural attribute macro to allow specifying how overflow should be handled. Since its inception, it has relied on specialization to change just the integer arithmetics while leaving the other operations basically unchanged.]]></description><guid isPermaLink="false">44aef346-22de-444d-9258-0fe74a38d50d</guid><pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>fancy-regex: crate for regular expressions using &quot;fancy&quot; features like look-around and backreferences</title><link>https://github.com/fancy-regex/fancy-regex</link><description><![CDATA[A Rust library for compiling and matching regular expressions. It uses a hybrid regex implementation designed to support a relatively rich set of features. In particular, it uses backtracking to implement "fancy" features such as look-around and backtracking, which are not supported in purely NFA-based implementations (exemplified by RE2, and implemented in Rust in the regex crate).]]></description><guid isPermaLink="false">a128d6c7-98e7-4c7d-85df-1d23003ac824</guid><pubDate>Sat, 19 Oct 2019 00:00:00 +0000</pubDate><dc:creator>Raph Levien and Robin Stocker</dc:creator></item><item><title>Migrate spirit to version 0.4</title><link>https://vorner.github.io/2019/10/19/migrate-spirit-to-0-4.html</link><description><![CDATA[This post can serve as a step by step migration guide from spirit 0.3 to spirit 0.4. If you already have an application using the crate, read on.

If you haven’t heard about the spirit library yet, it is a library to help you manage your configuration in an application and have it reloaded at runtime. It allows you to have the changes applied automatically and also to manage lifetime of the application. You can read more about it here. In that case, a migration guide won’t help you much, but I’m planning on having a tutorial how to start with the library soon.]]></description><guid isPermaLink="false">8de2bce6-9245-4f95-b12c-ca3e38efb3bb</guid><pubDate>Sat, 19 Oct 2019 00:00:00 +0000</pubDate><dc:creator>Michal &apos;vorner&apos; Vaner</dc:creator></item><item><title>Rookeries static site generator v0.16.0 – Cross-Platform Support</title><link>https://dorianpula.ca/2019/10/18/rookeries-v0-16-0-cross-platform-support/</link><description><![CDATA[On Wednesday night, I released version 0.16.0 of Rookeries, my developer/designer friendly static site generator! What makes this release exciting is that I added cross-platform support for macOS and FreeBSD! Also I setup an cross-platform installer, that works on all 64-bit x86 Linux distros including Windows Subsystem for Linux (WSL) 2.0. And I plan on supporting Linux, macOS (OS X) and FreeBSD as first-class systems going forward.]]></description><guid isPermaLink="false">7ad13799-38d0-42de-8fec-855803550eab</guid><pubDate>Fri, 18 Oct 2019 12:58:14 +0000</pubDate><dc:creator>Dorian Pula</dc:creator></item><item><title>Watt: A runtime for executing Rust procedural macros compiled as WebAssembly</title><link>https://github.com/dtolnay/watt</link><description><![CDATA[ By compiling macros ahead-of-time to Wasm, we save all downstream users of the macro from having to compile the macro logic or its dependencies themselves. Instead, what they compile is a small self-contained Wasm runtime (~3 seconds, shared by all macros) and a tiny proc macro shim for each macro crate to hand off Wasm bytecode into the Watt runtime (~0.3 seconds per proc-macro crate you depend on). This is much less than the 20+ seconds it can take to compile complex procedural macros and their dependencies.]]></description><guid isPermaLink="false">f33cd82d-46fa-4e3e-97e9-0bef43ba9b00</guid><pubDate>Tue, 15 Oct 2019 00:00:00 +0000</pubDate><dc:creator>David Tolnay</dc:creator></item><item><title>Making the Tokio scheduler 10x faster</title><link>https://tokio.rs/blog/2019-10-scheduler/</link><description><![CDATA[We’ve been hard at work on the next major revision of Tokio, Rust’s asynchronous runtime. Today, a complete rewrite of the scheduler has been submitted as a pull request. The result is huge performance and latency improvements. Some benchmarks saw a 10x speed up! It is always unclear how much these kinds of improvements impact “full stack” use cases, so we’ve also tested how these scheduler improvements impacted use cases like Hyper and Tonic (spoiler: it’s really good).]]></description><guid isPermaLink="false">97ca4165-4f8c-4c57-872d-e5986df0c7ee</guid><pubDate>Sun, 13 Oct 2019 00:00:00 +0000</pubDate><dc:creator>Carl Lerche</dc:creator></item><item><title>Persy transactional storage engine version 0.7</title><link>https://persy.rs/posts/persy-0.7.html</link><description><![CDATA[In the last couple of months just right after the release of Persy 0.6 the development speeded up a bit, a few people started to play with persy and some downstream projects as well, first reporting few critical issue that produced the 3 hotfix 0.6.1,0.6.2,0.6.3 and then starting contributing back.]]></description><guid isPermaLink="false">22724643-a42b-447d-98e2-6d7d3ad56aed</guid><pubDate>Fri, 11 Oct 2019 07:23:00 +0000</pubDate><dc:creator>tglman</dc:creator></item><item><title>reqwest alpha.await</title><link>https://seanmonstar.com/post/188220739932/reqwest-alphaawait</link><description><![CDATA[reqwest alpha.await reqwest is a higher-level HTTP client for Rust. I’m delighted to announce the first alpha release that brings async/await support!]]></description><guid isPermaLink="false">33fc22f5-6021-4395-b8ab-7f5f25ec2384</guid><pubDate>Tue,  8 Oct 2019 00:00:00 +0000</pubDate><dc:creator>Sean McArthur</dc:creator></item><item><title>Riker - a framework for building modern, concurrent and resilient systems using the Rust language using the actor model</title><link>https://riker.rs/</link><description><![CDATA[Riker is a framework for building modern, concurrent and resilient systems using the Rust language. Riker aims to make working with state and behavior in concurrent systems as easy and scalable as possible. The Actor Model has been chosen to realize this because of the familiar and inherent simplicity it provides while also providing strong guarantees that are easy to reason about. The Actor Model also provides a firm foundation for resilient systems through the use of the actor hierarchy and actor supervision.]]></description><guid isPermaLink="false">3fc0a35d-5eab-4143-98d5-7325738364e4</guid><pubDate>Tue,  8 Oct 2019 00:00:00 +0000</pubDate><dc:creator>Riker</dc:creator></item><item><title>mda-rs: Custom Mail Delivery Agents in Rust</title><link>https://afrantzis.com/posts/mda-rs/</link><description><![CDATA[With mda-rs I wanted to create an experience as close as possible to using an interpreted domain specific language, the approach follow by typical MDAs, while still having the performance and power of a full, compiled language at the fingertips. One aspect of this experience was providing an API that feels like natural fit for the intended purpose. The other aspect was providing a straightforward way to build a custom MDA. For this second aspect, the simplicity of Rust's cargo was one of the reasons I decided to use Rust for this project.]]></description><guid isPermaLink="false">10dac43f-1aba-416e-bfbb-190a33ad2c5d</guid><pubDate>Mon,  7 Oct 2019 00:00:00 +0000</pubDate><dc:creator>Alexandros Frantzis</dc:creator></item><item><title>Announcing Bastion 0.2.0!</title><link>https://www.reddit.com/r/rust/comments/day85g/announcing_bastion_020/</link><description><![CDATA[Bastion is a fault-tolerant runtime for Rust applications. After receiving plenty of good feedback from the community and a long-running development stage, now Bastion is 0.2.0!]]></description><guid isPermaLink="false">b2b15138-1280-44d7-95a0-9e5954a14b9a</guid><pubDate>Sun,  6 Oct 2019 04:16:30 +0000</pubDate><dc:creator>Mahmut Bulut</dc:creator></item><item><title>Announcing Asuran, a new de-duplicating archiver with encryption</title><link>https://www.reddit.com/r/rust/comments/ddu1dq/announcing_asuran_a_new_deduplicating_archiver/</link><description><![CDATA[This archiver does deduplication, encryption, compression, data verification, and (ideally) supports backing up to untrusted storage, including cloud storage (though currently it only supports a local storage backend).]]></description><guid isPermaLink="false">76b70816-eaa3-4343-b4b8-8f4d675575a1</guid><pubDate>Sun,  6 Oct 2019 00:00:00 +0000</pubDate><dc:creator>Nathan McCarty</dc:creator></item><item><title>Static Assertions 1.0</title><link>https://nikolaivazquez.com/posts/programming/rust-static-assertions-1_0/</link><description><![CDATA[static_assertions is a library designed to enable users to perform various checks at compile-time. It allows for finding errors quickly and early when it comes to ensuring certain features or aspects of a codebase. The macros it provides are especially important when exposing a public API that requires types to be the same size or implement certain traits.]]></description><guid isPermaLink="false">e2d3a9d7-cc8b-4cd5-8d5b-3bb986487601</guid><pubDate>Wed,  2 Oct 2019 00:00:00 +0000</pubDate><dc:creator>Nikolai Vazquez</dc:creator></item><item><title>We want smaller, faster, more secure native apps</title><link>https://medium.com/tauri-apps/we-want-smaller-faster-more-secure-native-apps-77222f590c64</link><description><![CDATA[Introducing Tauri-Apps, an open-source project to help you make native apps with any framework with the power of Rust.]]></description><guid isPermaLink="false">e2f780ad-41db-499a-999c-321f0e8f556e</guid><pubDate>Thu,  5 Sep 2019 20:57:20 +0000</pubDate><dc:creator>nothingismagick</dc:creator></item><item><title>Semantic validation in Rust</title><link>https://slowtec.de/posts/2019-09-03-semantic-validation-with-rust.html</link><description><![CDATA[If you need to validate complex data structures at runtime in the programming language Rust then our semval library may empower you to enrich your domain model with semantic validation.]]></description><guid isPermaLink="false">d871ed8d-ed33-4814-8953-725eb83ba1e9</guid><pubDate>Tue,  3 Sep 2019 00:00:00 +0000</pubDate><dc:creator>slowtec</dc:creator></item><item><title>This month in heim, the system information crate</title><link>https://svartalf.info/posts/2019-09-02-this-month-in-heim-august-2019/</link><description><![CDATA[It’s been a month and a half since the heim public announcement, so it’s about time to sum up the work done and make a roadmap for next development iteration. As a quick reminder: heim is the Rust cross-platform async library for system information fetching — CPU, memory, disks, networks, you name it.]]></description><guid isPermaLink="false">8ae54c44-f631-4d1e-bcfc-66edd7805468</guid><pubDate>Mon,  2 Sep 2019 00:00:00 +0000</pubDate><dc:creator>Nikita Kuznetsov</dc:creator></item><item><title>Announcing actix-raft: Raft distributed consensus implemented using Actix</title><link>https://railgun-rs.github.io/actix-raft/overview.html</link><description><![CDATA[An implementation of the Raft distributed consensus protocol using the Actix actor framework. Blazing fast Rust, a modern consensus protocol, an outstanding actor framework. This project intends to provide a backbone for the next generation of distributed data storage systems (SQL, NoSQL, KV, Streaming &c) built with Rust.]]></description><guid isPermaLink="false">8e664490-3dfb-419b-8281-61ea737dd762</guid><pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate><dc:creator>Anthony Dodd</dc:creator></item><item><title>Criterion.rs v0.3 - Custom Measurements, Profiling Hooks, Custom Test Framework, API Changes</title><link>https://bheisler.github.io/post/criterion-rs-0-3/</link><description><![CDATA[I’m pleased to announce the release of Criterion.rs v0.3, available today. Version 0.3 provides a number of new features including preliminary support for plugging in custom measurements (eg. hardware timers or POSIX CPU time), hooks to start/stop profilers, a new BenchmarkGroup struct that provides more flexibility than the older Benchmark and ParameterizedBenchmark structs, and an implementation of a #[criterion] custom-test-framework macro for those on Nightly.]]></description><guid isPermaLink="false">3a399e6a-a660-464b-90c0-9cee92eade7c</guid><pubDate>Sun, 25 Aug 2019 10:30:00 -0600</pubDate><dc:creator>Brook Heisler</dc:creator></item><item><title>Artichoke is a Ruby made with Rust</title><link>https://github.com/artichoke/artichoke</link><description><![CDATA[Artichoke is a platform for building MRI-compatible Ruby implementations. Artichoke provides a Ruby runtime implemented in Rust that can be loaded into many VM backends.]]></description><guid isPermaLink="false">1e20c763-7a28-429e-9d68-e3628dcc2edd</guid><pubDate>Fri, 23 Aug 2019 00:00:00 +0000</pubDate><dc:creator>Ryan Lopopolo</dc:creator></item><item><title>Announcing async-std</title><link>https://async.rs/blog/announcing-async-std/</link><description><![CDATA[We are excited to announce a beta release of async-std with the intent to publish version 1.0 by September 26th, 2019. async-std is a library that looks and feels like the Rust standard library, except everything in it is made to work with async/await exactly as you would expect it to. The library comes with a book and polished API documentation, and will soon provide a stable interface to base your async libraries and applications on. While we don't promise API stability before our 1.0 release, we also don't expect to make any breaking changes.]]></description><guid isPermaLink="false">5b6c323e-57a0-4281-86ee-67c3a4bf6173</guid><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><dc:creator>Stjepan Glavin</dc:creator></item><item><title>Diagnostics with Tracing</title><link>https://tokio.rs/blog/2019-08-tracing/</link><description><![CDATA[Effectively developing systems and operating them in production requires visibility into their behavior at runtime. While conventional logging can provide some of this visibility, asynchronous software &mdash; like applications using the Tokio runtime &mdash; introduces new challenges.

tracing is a collection of libraries that provide a framework for instrumenting Rust programs to collect structured, context-aware, event driven diagnostics. Note that tracing was originally released under the name tokio-trace; the name was changed to reflect that, although it is part of the Tokio project, the tokio runtime is not required to use tracing.]]></description><guid isPermaLink="false">c7b37ead-766f-4ca9-b816-eb99a0c01b33</guid><pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate><dc:creator>Eliza Weisman</dc:creator></item><item><title>surf</title><link>https://blog.yoshuawuyts.com/surf/</link><description><![CDATA[Today we're happy to announce Surf, an asynchronous cross-platform streaming HTTP client for Rust. This project was a collaboration between Kat Marchán (Entropic / Microsoft), Stjepan Glavina (Ferrous Systems), and myself (Yoshua Wuyts). Surf is a friendly HTTP client built for casual Rustaceans and veterans alike. ]]></description><guid isPermaLink="false">2d8f15c2-34f2-4bc2-a1b2-aef6744a9691</guid><pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate><dc:creator>Yoshua Wuyts</dc:creator></item><item><title>Tokio alpha release with async &amp; await</title><link>https://tokio.rs/blog/2019-08-alphas/</link><description><![CDATA[We’re pleased to announce the release of the first Tokio alpha with async & await support. This includes updating all of the Tokio crates to use std::future instead of futures 0.1. It also includes adding async fn versions of the APIs.]]></description><guid isPermaLink="false">b958f8b9-38f2-42e9-8cb9-9b7c59f7b875</guid><pubDate>Thu,  8 Aug 2019 00:00:00 +0000</pubDate><dc:creator>Tokio</dc:creator></item><item><title>Using Tree-sitter Parsers in Rust</title><link>https://rfdonnelly.github.io/posts/using-tree-sitter-parsers-in-rust/</link><description><![CDATA[Tree-sitter is a parser generator tool and parsing library. It generates portable parsers that can be used in several languages including Rust. Tree-sitter grammars are available for several languages. This is a game changer because it lowers the barrier to entry for writing language tooling. You no longer need to write your own parser. With Tree-sitter, you can now simply use an existing parser.]]></description><guid isPermaLink="false">a998ed84-202b-48ad-b8ca-829ae5f387ef</guid><pubDate>Wed,  7 Aug 2019 11:20:33 -0700</pubDate><dc:creator>Rob Donnelly</dc:creator></item><item><title>Implementing Lempel-Ziv Jaccard Distance (LZJD) in Rust</title><link>https://tweedegolf.nl/blog/33/implementing-lempel-ziv-jaccard-distance-lzjd-in-rust</link><description><![CDATA[One of our clients helps companies in becoming GDPR-compliant. A goal is to recognize sensitive pieces of user data in a big pile of registrations, receipts, emails, and transcripts, and mark them to be checked out later. As more and more data is collected by companies, finding and eliminating sensitive data becomes harder and harder, to the point where it is no longer possible for mere human employees to keep up without assistance.]]></description><guid isPermaLink="false">f0cc3e18-ac97-474b-b8f1-416a9e11aadc</guid><pubDate>Tue,  6 Aug 2019 00:00:00 +0000</pubDate><dc:creator>Henk Dieter</dc:creator></item><item><title>This month in rustsim #7 (June − July 2019)</title><link>https://www.rustsim.org/blog/2019/08/01/this-month-in-rustsim/</link><description><![CDATA[Welcome to the seventh edition of _This month in rustsim_! This monthly newsletter will provide you with a]]></description><guid isPermaLink="false">9ce993e1-4fda-4f75-9d26-9b15c084d07c</guid><pubDate>Thu,  1 Aug 2019 00:00:00 +0000</pubDate><dc:creator>Sébastien Crozet</dc:creator></item><item><title>Animate code with awoo!</title><link>https://phaazon.net/blog/introducing-awoo</link><description><![CDATA[Lately, I’ve been wanting to re-write demoscene-like applications. Not in the same mood and way as I usually did, though. Instead, I want to build small things for people to play with. A bit like small and easy to use audiovisual experiences (it can be seen as small video games for instance, but focused on the artistic expression as some games do).

The thing is, the kind of program we want generates its own inputs based on, mostly, the speed at which the hardware it’s running on is able to render a complete frame. The faster the more accurate we sample from that continuous function. That is actually quite logical: more FPS means, literally, more images to sample. The difference between two images will get less and less noticeable as the number of FPS rises. That gives you smooth images.

The “challenge” here is to write code to schedule those images. Instead of taking a parameter like the time on the command-line and rendering the corresponding image, we will generate a stream of images and will do different things at different times. Especially in demoscene productions, we want to synchronize what’s on the screen with what’s playing on the audio device.]]></description><guid isPermaLink="false">f40bd89a-d036-4bfd-819a-9f7c128707d9</guid><pubDate>Sun, 28 Jul 2019 11:00:00 +0000</pubDate><dc:creator>Dimitri Sabadie</dc:creator></item><item><title>cHTTP 0.5 and the Journey Ahead</title><link>https://stephencoakley.com/2019/07/22/chttp-0.5-and-the-journey-ahead</link><description><![CDATA[One of my more recent projects that I have been putting a lot of effort into is a Rust HTTP client called cHTTP, which I introduced on this blog over 18 months ago. Here I want to share an update on the direction of the project, and also give some detail on what months of late evenings and weekends produced in version 0.5 just published today.]]></description><guid isPermaLink="false">14ef4b09-79cc-424c-88bd-97a5d40ec957</guid><pubDate>Mon, 22 Jul 2019 05:00:00 +0000</pubDate><dc:creator>Stephen Coakley</dc:creator></item><item><title>How to use Torch in Rust with tch-rs</title><link>http://vegapit.com/article/how-to-use-torch-in-rust-with-tch-rs</link><description><![CDATA[Thanks to the diligent work of Laurent Mazare on his tch-rs crate, the Rust community can now enjoy an easy access to the powerful Torch neural net framework. Being personally an avid user of both Rust and Torch, stumbling on this repo has been nothing but a belated birthday present. In this post, I would like to dive into two examples to present its most fundamental functionalities.]]></description><guid isPermaLink="false">4f959a60-5f69-4997-b6d8-6cf6e8311e1f</guid><pubDate>Fri, 19 Jul 2019 13:18:00 +0100</pubDate><dc:creator>Vegapit</dc:creator></item><item><title>Introducing Abscissa: iqlusion&apos;s security-oriented Rust application framework</title><link>https://iqlusion.blog/introducing-abscissa-rust-application-framework</link><description><![CDATA[Earlier this month we released Abscissa: our security-oriented Rust application framework. After releasing v0.1, we’ve spent the past few weeks further polishing it up in tandem with this blog post, and just released a follow-up v0.2.]]></description><guid isPermaLink="false">9ec74f93-14a2-47ec-8572-24b9efe51a62</guid><pubDate>Thu, 18 Jul 2019 07:00:51 -0700</pubDate><dc:creator>Tony Arcieri</dc:creator></item><item><title>Codenano, a tool for designing DNA nanostructures</title><link>https://dna.hamilton.ie/2019-07-18-codenano.html</link><description><![CDATA[We are proud to announce the release of our software codenano, available at https://dna.hamilton.ie/codenano/. Here, we give an introduction to what codenano can and can not do. The source code for codenano is hosted on a github repository: https://github.com/thenlevy/codenano, along with a short tutorial.

Codenano allows one to design and visualise DNA nanostructures specified using code, all in your browser. Codenano also has the ability to compute some simple interactions between DNA bases in order to help the user design DNA nanostructures that are feasible according to some simple criteria. ]]></description><guid isPermaLink="false">2439dd44-0bd5-437e-bb60-f7b24b4f02f2</guid><pubDate>Thu, 18 Jul 2019 00:00:00 +0000</pubDate><dc:creator>Nicolas Levy, Pierre-Étienne Meunier and Damien Woods</dc:creator></item><item><title>Announcing heim: async library for system information fetching</title><link>https://svartalf.info/posts/2019-07-17-announcing-heim-project/</link><description><![CDATA[If you are familiar with Python ecosystem, probably you had heard about psutil package — a cross-platform library for retrieving information about system processes and system utilization (CPU, memory, disks, network and so on). It is very popular and actively used package, which has analogs in other languages: gopsutil for Golang, oshi for Java, you name it. Rust, of course, is not an exception here: we do have psutil, sysinfo, sys-info and systemstat crates.

Now, despite the tremendous work that had been done already by the authors of these crates, I’m excited to announce what I’ve been working on for the past three months: “heim” project — library for system information fetching.]]></description><guid isPermaLink="false">c91d6ec8-c734-495e-89ad-e63da5825eb0</guid><pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate><dc:creator>Nikita Kuznetsov</dc:creator></item><item><title>Cactus Harvesting: Cycle-Aware Reference Counting in Rust</title><link>https://hyperbo.la/w/cactus-harvesting/</link><description><![CDATA[🌵 CactusRef is a single-threaded, cycle-aware, reference counting smart pointer [docs] [code]. CactusRef is nearly a drop-in replacement for std::rc1 from the Rust standard library.]]></description><guid isPermaLink="false">f1fef443-d169-4ff1-a74e-262d273c9b9d</guid><pubDate>Mon, 15 Jul 2019 00:00:00 +0000</pubDate><dc:creator>Ryan Lopopolo</dc:creator></item><item><title>Stream combinators implemented using for await syntax</title><link>https://www.reddit.com/r/rust/comments/cbvhq9/stream_combinators_implemented_using_for_await/</link><description><![CDATA[ I am a big fan of simplifying the existent code in futures-rs using async/await syntax. My goal was to rewrite the combinators in such a way that even a newbie can understand what was going on. However I met several issues with Stream combinators because it was a little bit hard to construct an impl Stream without defining a struct with a ::poll_next method. So I used Stream::unfold that can create streams from a closure.]]></description><guid isPermaLink="false">907a2ee8-f215-4259-8179-bc4d542a7647</guid><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><dc:creator>Roman Proskuryakov</dc:creator></item><item><title>Introducing glam and mathbench</title><link>http://bitshifter.github.io/2019/07/10/introducing-glam-and-mathbench/</link><description><![CDATA[glam is a simple and fast Rust linear algebra library for games and graphics. mathbench is a set of unit tests and benchmarks comparing the performance of glam with the popular Rust linear algebra libraries cgmath and nalgebra. The following is a table of benchmarks produced by mathbench comparing glam performance to cgmath and nalgebra on f32 data.]]></description><guid isPermaLink="false">5f582def-af9d-44cb-9a18-648bff14bd67</guid><pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate><dc:creator>Cameron Hart</dc:creator></item><item><title>Migrating a crate from futures 0.1 to 0.3</title><link>https://www.ncameron.org/blog/migrating-a-crate-from-futures-0-1-to-0-3/</link><description><![CDATA[I recently migrated a small/medium-sized crate from Futures 0.1 to 0.3. It was fairly easy, but there were some tricky bits and some things that were not well documented, so I think it is worth me writing up my experience.]]></description><guid isPermaLink="false">84e8a302-326a-4c95-a6ae-78d4e8fa1029</guid><pubDate>Mon,  8 Jul 2019 21:24:28 +0000</pubDate><dc:creator>Nick Cameron</dc:creator></item><item><title>Building crates so they look like C(ABI) Libraries</title><link>https://dev.to/luzero/building-crates-so-they-look-like-c-abi-libraries-1ibn</link><description><![CDATA[How to write a well behaved C-API library in Rust.]]></description><guid isPermaLink="false">fdaab910-4937-451e-9fe4-3cfd693069b8</guid><pubDate>Mon,  1 Jul 2019 19:40:21 +0000</pubDate><dc:creator>Luca Barbato</dc:creator></item><item><title>async log</title><link>https://blog.yoshuawuyts.com/async-log/</link><description><![CDATA[Today we'd like to introduce async-log, a general-purpose crate that extends the standard log crate with asynchronous metadata. This is a first step in introducing full-fledged asynchronous tracing capabilities to Rust.]]></description><guid isPermaLink="false">f85b4664-304e-4eeb-a93b-2377b74263cd</guid><pubDate>Sat, 29 Jun 2019 00:00:00 +0000</pubDate><dc:creator>Yoshua Wuyts</dc:creator></item><item><title>termimad: A library to display rich (Markdown) snippets and texts in a Rust terminal application</title><link>https://github.com/Canop/termimad</link><description><![CDATA[A simple tool to display static or dynamic Markdown snippets in the terminal, with skin isolation. Based on crossterm so works on most terminals (even on windows).]]></description><guid isPermaLink="false">9f8dfcb3-e67c-456d-94d5-76ea84f8caa8</guid><pubDate>Thu, 27 Jun 2019 00:00:00 +0000</pubDate><dc:creator>Canop</dc:creator></item><item><title>RESS (Rusty EcmaScript Scanner) 0.7.0 bring large performance improvements</title><link>https://wiredforge.com/blog/ress-7/</link><description><![CDATA[A blog about learning computer science concepts with practical projects]]></description><guid isPermaLink="false">876033ef-0f64-4108-89c6-8ce8d6536ac7</guid><pubDate>Wed, 26 Jun 2019 00:00:00 +0000</pubDate><dc:creator>Robert Masen</dc:creator></item><item><title>swym: Are we lock-free yet?</title><link>https://mtak-blog.github.io/are-we-lock-free-yet</link><description><![CDATA[swym is a transactional memory library that prioritizes performance. It’s not lock-free, but it does have progress guarantees. This post will explore some of the recent work on swym’s progress promises, as well as some comparisons with non-blocking algorithms. I’m not an expert on schedulers or OS’s, so please correct me if anything is wrong. It might benefit swym!]]></description><guid isPermaLink="false">c274055b-d2a2-43f1-9ef3-a9fc15521878</guid><pubDate>Mon, 24 Jun 2019 00:00:00 +0000</pubDate><dc:creator>mtak-</dc:creator></item><item><title>nom, the Rust parser combinators library, is now available at version 5</title><link>http://unhandledexpression.com/general/2019/06/17/nom-5-is-here.html</link><description><![CDATA[nom, the Rust parser combinators library, is now available at version 5. This is the most mature version of nom. This is the one that feels “done”. This is the parser library that I wanted when I started nom 5 years ago. It’s here at last. nom 5 is a complete rewrite of the internal architecture, to use functions instead of macros, while keeping backward compatibility with existing macros based parsers, and making the error type completely generic.]]></description><guid isPermaLink="false">f6a2f624-a597-4ae7-b89a-e621ebb50c55</guid><pubDate>Mon, 24 Jun 2019 00:00:00 +0000</pubDate><dc:creator>Geoffroy Couprie</dc:creator></item><item><title>Gtk-rs: New release - more complete, safer</title><link>https://gtk-rs.org/blog/2019/06/22/new-release.html</link><description><![CDATA[Welcome everyone to this whole new gtk-rs release! Time to check what was added/updated in this new version.]]></description><guid isPermaLink="false">0f224e61-b4f3-40f2-b99a-431cf41ec5d8</guid><pubDate>Sat, 22 Jun 2019 00:00:00 +0000</pubDate><dc:creator>Gtk-rs Developers</dc:creator></item><item><title>Winit 0.20, the state of windowing in Rust, and a request for help</title><link>https://users.rust-lang.org/t/winit-0-20-the-state-of-windowing-in-rust-and-a-request-for-help/29485</link><description><![CDATA[I’m one of the maintainers of Winit, the main pure-Rust window creation library. Even if you haven’t used it directly, you’ve probably heard of projects that depend on it - Servo and Alacritty being the best-known applications that depend on our codebase. If you’ve done any graphics programming in Rust using Glutin (or dependent projects including gfx-rs, Glium, and Amethyst) we’ve been the ones making the windows actually show up on your desktop.

This announcement details the major changes since Winit 0.19. Also, we are looking for new contributors! If you are interested in working on the foundations of Rust’s GUI story, now is a great time to join the project.]]></description><guid isPermaLink="false">1ea200e9-2dda-4cad-9190-7aec92439026</guid><pubDate>Fri, 21 Jun 2019 16:16:03 +0000</pubDate><dc:creator>Osspial</dc:creator></item><item><title>Rust crates – frehberg’s annotated catalogue</title><link>https://frehberg.com/2019/06/rust-crates-frehbergs-annotated-catalogue/</link><description><![CDATA[The base of Rust users and contributors is growing steadily. The amount of libraries (aka crates) at http://crates.io is growing quickly; the overall “noise” is increasing. Some libraries might not be maintained any longer 🙁

This annotated catalogue shall help the Rust-users to find specific, popular, mature Rust crates. This list is WIP (Work In Progress), reflecting my personal shortlist. The ordering in the table top-down doesn’t express any preference.]]></description><guid isPermaLink="false">f1697ece-4d5e-46b8-88b5-d5a2e729ae96</guid><pubDate>Wed, 19 Jun 2019 19:13:23 +0000</pubDate><dc:creator>Frank Rehberger</dc:creator></item><item><title>The Rust Module System and Useful Crates for CLI Apps</title><link>https://ngoldbaum.github.io/posts/helpful-rust-cli-crates/</link><description><![CDATA[Today I’ll be continuing my series of posts on the rust implementation of the Mercurial version control system I’ve been working on. In this post I’ll be focusing on what I learned this week about the rust module system as well as a few helpful crates I discovered to aid in command-line argument parsing and error handling.]]></description><guid isPermaLink="false">24f33796-8ad9-4162-b8a1-1048ab285062</guid><pubDate>Wed, 12 Jun 2019 10:06:24 -0400</pubDate><dc:creator>Nathan Goldbaum</dc:creator></item><item><title>Announcing Contrie: concurrent maps and sets</title><link>https://vorner.github.io/2019/06/09/announcing-contrie.html</link><description><![CDATA[This is partly an announcement of a new crate folks might find useful, partly a call for participation and help and partly a journal like story how the crate came to being. Read on (or not) or skip to the parts that seem interesting to you.]]></description><guid isPermaLink="false">aaa397b7-d0b2-43d0-af75-0934ac4bfe73</guid><pubDate>Sun,  9 Jun 2019 00:00:00 +0000</pubDate><dc:creator>Michal &apos;vorner&apos; Vaner</dc:creator></item><item><title>Actix - Actor System and Web Framework for Rust</title><link>https://actix.rs/</link><description><![CDATA[Actix web 1.0.0 is released - a small, pragmatic, and extremely fast web framework.]]></description><guid isPermaLink="false">ae6027ab-b71f-4bce-9ab8-e1853aa24030</guid><pubDate>Wed,  5 Jun 2019 15:38:00 +0000</pubDate><dc:creator>Nikolay Kim</dc:creator></item><item><title>Announcing our Verifiable Random Function (VRF) Rust library</title><link>https://medium.com/witnet/announcing-our-verifiable-random-function-vrf-rust-library-2e042c29a4f7</link><description><![CDATA[Recently Gorka Irazoqui Apecechea and me proudly published a VRF crate as an open source project under the MIT license. The library is a fast, flexible and general-purpose Verifiable Random Function (VRF) library written in Rust, which follows the IETF standard draft written by Sharon Goldberg, Moni Naor, Dimitris Papadopoulos, Leonid Reyzin, and Jan Včelák.]]></description><guid isPermaLink="false">aea12212-4a3a-4c00-baa5-313f5c998977</guid><pubDate>Mon,  3 Jun 2019 15:03:50 +0000</pubDate><dc:creator>Mario Cao</dc:creator></item><item><title>Orkhon: ML Inference Framework and Server Runtime</title><link>https://docs.rs/orkhon/0.1.0/orkhon/</link><description><![CDATA[Orkhon is Rust framework for Machine Learning to run/use inference/prediction code written in Python, frozen models and process unseen data. It is mainly focused on serving models and processing unseen data in a performant manner. Instead of using Python directly and having scalability problems for servers this framework tries to solve them with built-in async API.]]></description><guid isPermaLink="false">0904d040-f6c1-4b6a-a9ee-328a5ed55d2d</guid><pubDate>Wed, 29 May 2019 21:32:00 +0000</pubDate><dc:creator>Mahmut Bulut</dc:creator></item><item><title>Announcing j4rs</title><link>https://astonbitecode.github.io/blog/post/j4rs_0.6.0/</link><description><![CDATA[j4rs stands for “Java for Rust” and allows effortless calls to Java code, from Rust. Some time ago, on a need to call Java code from Rust, I started the j4rs project. The main idea was to implement a crate that would give the ability to its users to make calls to Java easily, so that they can benefit from the huge Java ecosystem.]]></description><guid isPermaLink="false">f94980b0-dfbb-421b-b861-16e158c7c0c2</guid><pubDate>Fri, 24 May 2019 00:10:10 +0000</pubDate><dc:creator>Aston</dc:creator></item><item><title>Announcing Mockiato - A strict, yet friendly mocking library for Rust 2018</title><link>https://blog.myelin.ch/2019/05/24/mockiato-announcement.html</link><description><![CDATA[We’re proud to announce mockiato! For the last few months, we tackled the issue of creating a usable mocking library. Our primary goals were: Ease of use: The mocks are written in idiomatic Rust and don’t rely on custom macro syntax. Maintainability: The entire code base strives to follow the rules of Clean Code and Clean Architecture as specified by Robert C. Martin.  Strict expectation enforcement: Mockiato catches unexpected behavior as soon as it happens instead of returning default values.]]></description><guid isPermaLink="false">635d3c1f-b71e-4883-b72e-52efe1ab01d0</guid><pubDate>Fri, 24 May 2019 00:00:00 +0000</pubDate><dc:creator>Jeremy, Ruben, Jan, Mathias</dc:creator></item><item><title>mini-aio: the new async IO library for Rust</title><link>http://antoyo.ml/mini-aio-new-async-io-library</link><description><![CDATA[During my work at Adgear, I’ve been working for a while on an async IO library for Rust. This post will present this new library. This library takes a very different approach than most other async IO libraries in Rust: it is actually inspired by the Pony programming language. So, it does not use futures, it does not use async/await: it just provides simple trait]]></description><guid isPermaLink="false">db12537e-42d3-4bba-9c68-7adc1afec917</guid><pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate><dc:creator>Antoni Boucher</dc:creator></item><item><title>powerset-enum - anonymous enum and a PoC for how that feature can be used to improve Rust&apos;s error handling</title><link>https://www.reddit.com/r/rust/comments/bqn9e6/announcing_the_powersetenum_crate_a_poor_mans/</link><description><![CDATA[My crate offers a powerset enum - an enum that can be parametrized to any subset of it's variants. I also included a macro for doing this parametrization by providing the types of the variants - so for example Error![std::io::Error, serde_json::Error] would generate a subset of the enum that can only have IO and JSON parsing errors.]]></description><guid isPermaLink="false">feed408e-361c-4a9c-9432-5729aed1e789</guid><pubDate>Mon, 20 May 2019 08:50:00 +1000</pubDate><dc:creator>someboddy</dc:creator></item><item><title>Papers on Rust</title><link>http://magnusmanske.de/wordpress/?p=617</link><description><![CDATA[With these crates in a basic but usable state, I went to write papers, Rust code to gather data from the above sources, and inject them into Wikidata. I wrote a Rust trait to represent a generic source, and then wrote adapter structs for each of the sources. Finally, I added some wrapper code to take a list of adapters, query them about a paper, and update Wikidata accordingly.]]></description><guid isPermaLink="false">93fbaebd-c627-46f3-89ea-1469e58ecd22</guid><pubDate>Thu, 16 May 2019 10:06:00 +0000</pubDate><dc:creator>Magnus Manske</dc:creator></item><item><title>Rust+GNOME Hackfest #5</title><link>http://antoyo.ml/rust-gnome-hackfest-berlin</link><description><![CDATA[Last week, I went to the fifth Rust+GNOME hackfest which was in Berlin again. My goal for this hackfest was to fix this issue I opened nearly three years ago. The problem is that sometimes you want to create a widget or an object and set some properties at construction time. This might be needed when you want to set construct-only properties. For instance, you might want to create a webkit2gtk::WebView with a WebContext and a UserContentManager at the same time. That’s why a constructor was manually written for this use case.]]></description><guid isPermaLink="false">ad13d235-c5b0-454f-b35c-891006484207</guid><pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate><dc:creator>Antoni Boucher</dc:creator></item><item><title>Shell Completions in Pure Rust</title><link>https://www.joshmcguigan.com/blog/shell-completions-pure-rust/</link><description><![CDATA[Custom completion behavior is configured using a special bash built-in called complete. complete can be used to designate either a bash function or any other command as the completion script for a particular command. When the user requests completions for a command, complete will run specified code, passing in as args information about what the user has already typed, and expecting as output the completion suggestions. Typically these completion scripts are written in bash, but we’ll look at how it is possible to write them in Rust.]]></description><guid isPermaLink="false">fdf7f732-0af5-4031-9135-4b1db1ebfc28</guid><pubDate>Sun, 12 May 2019 00:00:00 +0000</pubDate><dc:creator>Josh Mcguigan</dc:creator></item><item><title>Generating a GNOME library using gir crate</title><link>https://gtk-rs.org/docs-src/tutorial/gir_tutorial</link><description><![CDATA[In this tutorial, we’ll see how to generate a GNOME library using the gir crate. A few things to note first: It only works on GObject-based libraries.  You need .gir files.

A little explanation about those requirements: the gir crate needs .gir files to generate the library API. You can generally find them alongside the library header files (as you can see here for example, look for “.gir”).

The .gir files “describes” the library API (objects, arguments, even ownership!). This is where the gir crate comes in: it reads those .gir files and generates the Rust crates from them. You can learn more about the GIR format here.]]></description><guid isPermaLink="false">a0a1c63f-18d2-440f-8568-0cdd5899afe3</guid><pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate><dc:creator>Gtk-rs</dc:creator></item><item><title>Learn Rust: Parsing command line arguments with StructOpt</title><link>https://www.tenderisthebyte.com/blog/2019/05/08/parsing-cli-args-with-structopt/</link><description><![CDATA[A beginners guide to using StructOpt for parsing command line arguments.]]></description><guid isPermaLink="false">b5691501-490d-4eef-a8cc-2728e42774d2</guid><pubDate>Wed,  8 May 2019 00:00:00 +0000</pubDate><dc:creator>Ryan Moore</dc:creator></item><item><title>Paw</title><link>https://blog.yoshuawuyts.com/paw/</link><description><![CDATA[Today we're announcing paw, a first step by the CLI Working Group to make command line applications more first class in Rust.

We introduce a procedural macro paw::main that allows passing arguments to fn main, and a new trait ParseArgs that must be implemented by the arguments to main. This allows passing not only the classic std::env::Args to main but also, for example, structopt instances.]]></description><guid isPermaLink="false">09931418-a93c-4b3f-ab7a-de486a0373fd</guid><pubDate>Mon,  6 May 2019 00:00:00 +0000</pubDate><dc:creator>Yoshua Wuyts</dc:creator></item><item><title>phrase: A tool for learning significant phrase/term models, and efficiently labeling with them</title><link>https://github.com/soaxelbrooke/phrase</link><description><![CDATA[In general, using phrase falls into 3 steps: Counting n-grams, Exporting scored models, Significant term/phrase extraction/transform N-gram counting is done continuously, providing batches of documents as they come in. Model export reads all n-gram counts so far and calculates mutual information-based collocations - you can then deploy the models by shipping the binary and data/scores_* files to a server. Labeling (identifying all significant terms and phrases in text) or transforming (eager replace of longest found phrases in text) can be done either via the CLI or the web server. Providing labels for documents is not necessary for learning phrases, but does help, and allows for significant term labeling also.]]></description><guid isPermaLink="false">db1287e6-d66c-486a-812b-87ba2b37d423</guid><pubDate>Mon,  6 May 2019 00:00:00 +0000</pubDate><dc:creator>Stuart Axelbrooke</dc:creator></item><item><title>Pre luminance-1.0.0 and random thoughts</title><link>https://phaazon.net/blog/pre-luminance-n-random-thoughts</link><description><![CDATA[Hello people. It’s been weeks I have started to work on luminance-1.0.0. For a brief recap, luminance is a graphics crate that I originally created in Haskell, when I ripped it off from a demoscene engine called quaazar in order to make and maintain tiner packages. The Rust port was my first Rust project and it became quickly the default language I would develop graphics applications in.]]></description><guid isPermaLink="false">8ff4000f-f8c6-41b9-a91b-c0bd9d23ca69</guid><pubDate>Fri, 26 Apr 2019 22:30:00 +0000</pubDate><dc:creator>Dimitri Sabadie</dc:creator></item><item><title>Monitoring AWS Batch Jobs with Rust</title><link>https://medium.com/rusted/monitoring-aws-batch-jobs-with-rust-8f1ef6115871</link><description><![CDATA[At Pixability my team and I recently created a pretty neat AWS Batch driven system. AWS Batch can can handle almost any task seamlessly and it’s pretty easy to manage with the console. This is great already, but I was curious to see what it would look like to monitor Batch with Rust. Watchrs was inspired by this question and currently provides basic functionality to do so. In this post we will be briefly going over how the main components of watchrs were built and how to use them all together.]]></description><guid isPermaLink="false">5af81963-5163-49f3-bd47-27b91d6dbd34</guid><pubDate>Wed, 24 Apr 2019 01:05:46 +0000</pubDate><dc:creator>Michael Habib</dc:creator></item><item><title>6 useful Rust macros that you might not have seen before</title><link>https://medium.com/@benmcdonald_11671/6-useful-rust-macros-that-you-might-not-have-seen-before-59d1386f7bc5</link><description><![CDATA[Below are 6 Rust macros that are worth taking a look at to improve your project. Rust macros are a great feature that can reduce code boilerplate and be a time saver for programmers. They also offer flexibility for developers to use metaprogramming to add new features to the language and package them in a way that is easy to integrate into code. They are one of the more powerful features of the language and this led me to search github and cargo to see what was out there. Below are some interest macros that are not as well known.]]></description><guid isPermaLink="false">b2657146-974b-41b9-ba31-8aae62c25f7d</guid><pubDate>Mon, 22 Apr 2019 02:00:39 +0000</pubDate><dc:creator>Ben McDonald</dc:creator></item><item><title>splines-1.0.0 and first release candidate</title><link>https://phaazon.net/blog/splines-1.0.0-rc.1</link><description><![CDATA[today, I’m going to talk about the splines crate. And more specifically, the splines-1.0.0-rc.1 release candidate I uploaded today on crates.io. Maybe you’re wondering what a spline is, in the first place. A spline is a mathematic curve that is defined by several polynomials. You can picture them mentally by several small and simple curves combined to each others, giving the curve an interesting shape and properties. Now why we want splines is easy to understand: imagine a curve, something smooth and a bit complex (maybe even with loops). Now, imagine you want to make an object move along that curve. How do you represent that curve and how to you “make something advance along it?”]]></description><guid isPermaLink="false">50725324-0ca7-4137-8e95-9d5e023881f8</guid><pubDate>Mon, 22 Apr 2019 01:10:00 +0000</pubDate><dc:creator>Dimitri Sabadie</dc:creator></item><item><title>emacs-module-rs provides high-level Rust binding and tools to write Emacs&apos;s dynamic modules.</title><link>https://ubolonton.github.io/emacs-module-rs/0.8.0/</link><description><![CDATA[This provides a high-level binding to emacs-module, Emacs's support for dynamic modules.]]></description><guid isPermaLink="false">675a435e-aadf-4ded-b3d1-50d6a8afaced</guid><pubDate>Sat, 20 Apr 2019 11:11:45 +0000</pubDate><dc:creator>Tuấn-Anh Nguyễn</dc:creator></item><item><title>12 Killer Rust Libraries You Should Try</title><link>https://medium.com/@jondot/12-killer-rust-libraries-you-should-know-c60bab07624f</link><description><![CDATA[I’ve just crossed a 20K LOC in one of my bigger Rust projects, and thought about pausing for a moment and sharing some great Rust libraries that I’ve used.]]></description><guid isPermaLink="false">b8b79bb1-c176-43e8-bad9-943285e361c6</guid><pubDate>Fri, 19 Apr 2019 15:21:32 +0000</pubDate><dc:creator>Dotan Nahum</dc:creator></item><item><title>Futures 0.1 Compatibility Layer</title><link>https://rust-lang-nursery.github.io/futures-rs/blog/2019/04/18/compatibility-layer.html</link><description><![CDATA[Rust’s futures ecosystem is currently split in two: On the one hand we have the vibrant ecosystem built around futures@0.1 with its many libraries working on stable Rust and on the other hand there’s the unstable std::future ecosystem with support for the ergonomic and powerful async/await language feature. To bridge the gap between these two worlds we have introduced a compatibility layer as part of the futures@0.3 extension to std::future. This blog post aims to give an overview over how to use it.]]></description><guid isPermaLink="false">adc39c05-2876-4ef4-b071-b4133c96c8ca</guid><pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Josef Brandl</dc:creator></item><item><title>Runtime</title><link>https://blog.yoshuawuyts.com/runtime/</link><description><![CDATA[The vision of the Async Ecosystem WG is to refine the async Rust experience until it matches the quality and ease of working with today's std. There are a lot of components in that vision, including async/await syntax and borrow checker integration. Today, though, we'd like to introduce another component: Runtime, a crate that makes working with async code feel closer to working with std, and a stepping stone toward ecosystem standardization.]]></description><guid isPermaLink="false">53c58e52-158a-40e1-b59d-3a9ad1a92edb</guid><pubDate>Tue, 16 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Yoshua Wuyts</dc:creator></item><item><title>Using rav1e - from your own code</title><link>https://dev.to/luzero/using-rav1e-from-your-own-code-2ie0</link><description><![CDATA[AV1 is a modern video codec brought to you by an alliance of many different bigger and smaller players in the multimedia field. rav1e: The safest and fastest AV1 encoder, built by many volunteers and Mozilla/Xiph developers. crav1e: A companion crate, written by yours truly, that provides a C-API, so the encoder can be used by C libraries and programs. This article will just give a quick overview of the API available right now and it is mainly to help people start using it and hopefully report issues and problem.]]></description><guid isPermaLink="false">914d12c5-ea4a-49f4-8466-1f15a9c3340a</guid><pubDate>Tue,  9 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Luca Barbato</dc:creator></item><item><title>Protocols in Tokio (i3 IPC)</title><link>https://leshow.github.io/post/impl_proto_tokio/</link><description><![CDATA[There’s a dearth of blog posts online that cover the details of implementing a custom protocol in tokio, at least that I’ve found. I’m going to cover some of the steps I went through in implementing an async version i3wm’s IPC.]]></description><guid isPermaLink="false">ebf00798-d92a-4f61-8b2b-8ffceb2c09a9</guid><pubDate>Mon,  8 Apr 2019 18:53:18 -0400</pubDate><dc:creator>Evan Cameron</dc:creator></item><item><title>MeiliES - Event sourcing in Rust</title><link>https://blog.meilisearch.com/meilies-release/</link><description><![CDATA[MeiliES is an Event Sourcing database that uses the RESP (REdis Serialization Protocol) to communicate. We use the Redis protocol to simplify clients implementation. The portability problematics are resolved by using a full Rust implementation (we are using Sled as internal storage).]]></description><guid isPermaLink="false">ed083e12-489d-4720-8e59-eea15c03c3f8</guid><pubDate>Mon, 25 Mar 2019 14:16:32 +0000</pubDate><dc:creator>Thomas Payet</dc:creator></item><item><title>Zola 0.6.0: start of multi-lingual sites</title><link>https://www.vincentprouillet.com/blog/releasing-zola-0-6-0/</link><description><![CDATA[Zola gets the beginning of multi-lingual support and perf improvements.]]></description><guid isPermaLink="false">410c0a3f-026f-4e8c-9910-40745122a369</guid><pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Vincent Prouillet</dc:creator></item><item><title>Sonic: Fast, lightweight &amp; schema-less search backend</title><link>https://github.com/valeriansaliou/sonic</link><description><![CDATA[Sonic is a fast, lightweight and schema-less search backend. It ingests search texts and identifier tuples that can then be queried against in a microsecond's time.]]></description><guid isPermaLink="false">0dbd06f7-147e-404c-81ce-360e61e087e5</guid><pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Valerian Saliou</dc:creator></item><item><title>barrel.rs: a powerful schema migration builder&apos;s 0.5.0 release</title><link>https://rust-db.github.io/barrel/blog/releasing-050/</link><description><![CDATA[barrel makes writing migrations for different databases as easy as possible. It provides you with a common API over SQL, with certain features only provided for database specific implementations. This way you can focus on your Rust code, and stop worrying about SQL.]]></description><guid isPermaLink="false">554b2733-697f-41c7-b91b-0261acc1aa24</guid><pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Squirrel People</dc:creator></item><item><title>Implementing a Hidden Markov Model in Rust</title><link>https://paulkernfeld.com/2019/03/17/hmmm.html</link><description><![CDATA[Over the past few months, I’ve implemented hmmm, a Rust library for Hidden Markov Models (HMMs). HMMs are a well-established statistical machine learning technique for modeling sequences of data. They have been applied to problems like speech recognition and bioinformatics. They are called “hidden” because each discrete time step is associated with a hidden state. Below, I’ll briefly discuss some challenges that I ran into while implementing this library.]]></description><guid isPermaLink="false">187cf7df-3448-4699-86f6-28e90a1a025f</guid><pubDate>Sun, 17 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Paul Kernfeld</dc:creator></item><item><title>A Rust API for librsvg</title><link>https://people.gnome.org/~federico/blog/a-rust-api-for-librsvg.html</link><description><![CDATA[After the librsvg team finished the rustification of librsvg's main library, I wanted to start porting the high-level test suite to Rust. This is mainly to be able to run tests in parallel, which cargo test does automatically in order to reduce test times. However, this meant that librsvg needed a Rust API that would exercise the same code paths as the C entry points. At the same time, I wanted the Rust API to make it impossible to misuse the library.]]></description><guid isPermaLink="false">04f2e112-c86d-4468-9b75-d74f84429d69</guid><pubDate>Fri, 15 Mar 2019 13:36:47 -0600</pubDate><dc:creator>Federico Mena Quintero</dc:creator></item><item><title>Pulldown_cmark 0.3 release announcement</title><link>https://fullyfaithful.eu/pulldown-cmark/</link><description><![CDATA[pulldown_cmark, a fast pull parser for the CommonMark markdown standard written in Rust, has just seen its 0.3 release. It marks a milestone for renewed CommonMark test compliance and performance. In this blog post, we'll have a quick look at the goals of the rewrite, how they were achieved and what's next for the crate.]]></description><guid isPermaLink="false">ad1ab029-a374-4fde-8f62-6100bf699da2</guid><pubDate>Fri, 15 Mar 2019 08:19:00 +0000</pubDate><dc:creator>Marcus Klaas de Vries</dc:creator></item><item><title>Persy: an attempt to write a transactional storage engine in Rust</title><link>http://persy.rs/posts/persy-0.4.html</link><description><![CDATA[Persy is a single file storage engine, all the data, referencing structures and logs are kept in a single file. Persy support read-committed transactions, using copy on write to guarantee high concurrency and isolation, the data consistency is guaranteed by a transaction log that recover the operations in case of crash. Persy provide segments to organize records of different kinds and allow the scan on a single segment. Persy provide index implementation that can be used to associate any simple value to another value or a record reference. In Persy a record is a simple Vec<u8>, the content of the record is ignored by Persy, is just stored and retrieved on request.]]></description><guid isPermaLink="false">c3575790-8873-4860-bc2a-15ba5f636a42</guid><pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate><dc:creator>tglman</dc:creator></item><item><title>Arraigning a Statement, vol. 2</title><link>https://llogiq.github.io/2019/03/14/stmt2.html</link><description><![CDATA[Last time we defined a minimum viable implementation for mutagen statement removal: Remove only function call statements whose results are not returned from the surrounding block and whose AST do not contain any Assign expressions.]]></description><guid isPermaLink="false">5826453d-6731-41d9-a4f5-f5dbce6ef1df</guid><pubDate>Thu, 14 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>Arraigning a Statement, vol. 1</title><link>https://llogiq.github.io/2019/03/11/stmt.html</link><description><![CDATA[This time in our “Mutating Rust” series, we want to tackle the most complex mutation so far: Statement removal. Now why do I think this is complex? It’s just removing the statement (or, as we bake our mutations into the code, activating at runtime, putting it behind an if), right?]]></description><guid isPermaLink="false">e216ede8-5599-48f4-a458-770944ef44f2</guid><pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>clap v3 Update: No More Strings</title><link>https://kbknapp.dev/clap-v3-update-no-more-strings/</link><description><![CDATA[This is the second post in a series detailing the issues, progress, and design decisions used in clap v3. This post details removing the "stringly typed" nature of clap.]]></description><guid isPermaLink="false">710b4e1e-9882-413b-bf2d-9fc746502ede</guid><pubDate>Fri,  8 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Kevin K.</dc:creator></item><item><title>Starling, the Binary Indexed Merkle Tree (Or Merkle-BIT)</title><link>https://www.reddit.com/r/rust/comments/aww097/starling_the_binary_indexed_merkle_tree_or/</link><description><![CDATA[Hey rustaceans! With a little help from your feedback just a few hours ago, I'm proud to present to you all Starling, a Binary Indexed Merkle tree! I've been working on this data structure for the last few months, and I think it is ready now for the community to have a look. Let me explain what it is and why it might be useful for your project.]]></description><guid isPermaLink="false">ce110dd7-46c1-4f12-880f-1c0bbf3a6726</guid><pubDate>Mon,  4 Mar 2019 04:12:50 +1100</pubDate><dc:creator>ChosunOne</dc:creator></item><item><title>Pedal to the metal: dynamic templates with Ramhorns</title><link>https://maciej.codes/2019-03-03-ramhorns.html</link><description><![CDATA[I have a problem. I don't know what to call it, but there is this itch I have when I find something that can obviously be made more efficient. The way I get about scratching that itch these days is by writing some Rust. I just got such an itch when looking at static site generators for this blog, Hugo (written in Go) is pretty much state-of-the art. In Rust land we have Zola, which is feature-rich, mature (for v0.5), and definitely fast enough for most users, and yet it is not as fast as it could be. Being written in Rust is, by itself, not a guarantee of top performance. The implementation matters. After some looking around I've narrowed down a problem I want to tackle (for now) to one area: template engines.]]></description><guid isPermaLink="false">a540ae81-ddbb-4279-a507-b7faf43e5b19</guid><pubDate>Sun,  3 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Maciej Hirsz</dc:creator></item><item><title>The last two months in rustsim #4 (January - February 2019)</title><link>https://www.rustsim.org/blog/2019/03/01/this-month-in-rustsim/</link><description><![CDATA[Welcome to the fourth edition of This month in rustsim. This monthly newsletter will provide you with a summary of important update that occurred within the rustsim community. This includes in particular updates about the nphysics, ncollide, nalgebra, and alga crate.]]></description><guid isPermaLink="false">677c24c1-719c-4744-acb3-46eb5e21f991</guid><pubDate>Fri,  1 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Sébastien Crozet</dc:creator></item><item><title>Writing Mails from Rust (3/3): Example usage with explanations</title><link>https://blog.1aim.com/post/004-mail-3-example/</link><description><![CDATA[After the previous two posts this post will go step by step through how the mail crate can be used to create mails based on a handlebars template and send them to a Mail Submission Agent (MSA).]]></description><guid isPermaLink="false">9f8e4402-c90a-4e59-90c2-ca34bf6c2689</guid><pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Philipp Korber</dc:creator></item><item><title>Low level text layout kickoff</title><link>https://raphlinus.github.io/rust/skribo/text/2019/02/27/text-layout-kickoff.html</link><description><![CDATA[This post is to announce a new Rust library for low-level text layout, called “skribo” (the Esperanto word for “writing”). This has been a major gap in the Rust ecosystem, and I hope the new crate can improve text handling across the board.]]></description><guid isPermaLink="false">70a94e2b-dbd2-4f66-ada8-5886b5c51fab</guid><pubDate>Wed, 27 Feb 2019 18:16:42 +0000</pubDate><dc:creator>Raph Levien</dc:creator></item><item><title>Releasing rust_gpiozero v0.2.0</title><link>https://rahul-thakoor.github.io/releasing-rust_gpiozero-v0.2.0/</link><description><![CDATA[A new version packed with new features and improvements: Blink leds without blocking main thread and adjust brightness. ⚙️ Work with servo motors and adjust motor speed. 〜 Work with software PWM.]]></description><guid isPermaLink="false">e0caaf97-6980-4421-afbe-3fca31872c73</guid><pubDate>Wed, 27 Feb 2019 17:43:48 +0400</pubDate><dc:creator>Rahul Thakoor</dc:creator></item><item><title>100x improvement on startup time in Wasmer 0.2.0</title><link>https://medium.com/wasmer/running-webassembly-100x-faster-%EF%B8%8F-a8237e9a372d</link><description><![CDATA[We’ve been working steadily to get Wasmer to execute WebAssembly modules on the server-side as fast as possible. TL;DR — We got 100x improvement on startup time on Wasmer 0.2.0.]]></description><guid isPermaLink="false">fe2180a3-53fb-4b12-b6b2-722c19587b39</guid><pubDate>Mon, 25 Feb 2019 22:04:55 +0000</pubDate><dc:creator>Syrus Akbary</dc:creator></item><item><title>Up and Running with React + Rust + Wasm</title><link>https://prestonrichey.com/blog/react-rust-wasm/</link><description><![CDATA[I’m super excited about WebAssembly! It’s fast, (can be) small, and extremely portable. In fact, I wouldn’t be surprised if in the near future most web developers write code that eventually gets compiled to Wasm.

But currently there’s not a huge selection of resources showing how to get started with WebAssembly, and I couldn’t find any tutorials that worked with create-react-app. Most focus on writing and compiling a module, but rush over the details of actually using Wasm code. What follows is a basic setup for a React app using WebAssembly that should serve as a good foundation for more complex applications.]]></description><guid isPermaLink="false">7da6de6b-bbf8-4587-ab48-615ee988d899</guid><pubDate>Mon, 25 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Preston Richey</dc:creator></item></channel></rss>