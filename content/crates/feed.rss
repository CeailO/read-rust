<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - Crates</title><link>https://readrust.net/</link><description>Crates posts on Read Rust</description><item><title>Announcing async-std</title><link>https://async.rs/blog/announcing-async-std/</link><description><![CDATA[We are excited to announce a beta release of async-std with the intent to publish version 1.0 by September 26th, 2019. async-std is a library that looks and feels like the Rust standard library, except everything in it is made to work with async/await exactly as you would expect it to. The library comes with a book and polished API documentation, and will soon provide a stable interface to base your async libraries and applications on. While we don't promise API stability before our 1.0 release, we also don't expect to make any breaking changes.]]></description><guid isPermaLink="false">5b6c323e-57a0-4281-86ee-67c3a4bf6173</guid><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><dc:creator>Stjepan Glavin</dc:creator></item><item><title>surf</title><link>https://blog.yoshuawuyts.com/surf/</link><description><![CDATA[Today we're happy to announce Surf, an asynchronous cross-platform streaming HTTP client for Rust. This project was a collaboration between Kat Marchán (Entropic / Microsoft), Stjepan Glavina (Ferrous Systems), and myself (Yoshua Wuyts). Surf is a friendly HTTP client built for casual Rustaceans and veterans alike. ]]></description><guid isPermaLink="false">2d8f15c2-34f2-4bc2-a1b2-aef6744a9691</guid><pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate><dc:creator>Yoshua Wuyts</dc:creator></item><item><title>Tokio alpha release with async &amp; await</title><link>https://tokio.rs/blog/2019-08-alphas/</link><description><![CDATA[We’re pleased to announce the release of the first Tokio alpha with async & await support. This includes updating all of the Tokio crates to use std::future instead of futures 0.1. It also includes adding async fn versions of the APIs.]]></description><guid isPermaLink="false">b958f8b9-38f2-42e9-8cb9-9b7c59f7b875</guid><pubDate>Thu,  8 Aug 2019 00:00:00 +0000</pubDate><dc:creator>Tokio</dc:creator></item><item><title>cHTTP 0.5 and the Journey Ahead</title><link>https://stephencoakley.com/2019/07/22/chttp-0.5-and-the-journey-ahead</link><description><![CDATA[One of my more recent projects that I have been putting a lot of effort into is a Rust HTTP client called cHTTP, which I introduced on this blog over 18 months ago. Here I want to share an update on the direction of the project, and also give some detail on what months of late evenings and weekends produced in version 0.5 just published today.]]></description><guid isPermaLink="false">14ef4b09-79cc-424c-88bd-97a5d40ec957</guid><pubDate>Mon, 22 Jul 2019 05:00:00 +0000</pubDate><dc:creator>Stephen Coakley</dc:creator></item><item><title>How to use Torch in Rust with tch-rs</title><link>http://vegapit.com/article/how-to-use-torch-in-rust-with-tch-rs</link><description><![CDATA[Thanks to the diligent work of Laurent Mazare on his tch-rs crate, the Rust community can now enjoy an easy access to the powerful Torch neural net framework. Being personally an avid user of both Rust and Torch, stumbling on this repo has been nothing but a belated birthday present. In this post, I would like to dive into two examples to present its most fundamental functionalities.]]></description><guid isPermaLink="false">4f959a60-5f69-4997-b6d8-6cf6e8311e1f</guid><pubDate>Fri, 19 Jul 2019 13:18:00 +0100</pubDate><dc:creator>Vegapit</dc:creator></item><item><title>Introducing Abscissa: iqlusion&apos;s security-oriented Rust application framework</title><link>https://iqlusion.blog/introducing-abscissa-rust-application-framework</link><description><![CDATA[Earlier this month we released Abscissa: our security-oriented Rust application framework. After releasing v0.1, we’ve spent the past few weeks further polishing it up in tandem with this blog post, and just released a follow-up v0.2.]]></description><guid isPermaLink="false">9ec74f93-14a2-47ec-8572-24b9efe51a62</guid><pubDate>Thu, 18 Jul 2019 07:00:51 -0700</pubDate><dc:creator>Tony Arcieri</dc:creator></item><item><title>Announcing heim: async library for system information fetching</title><link>https://svartalf.info/posts/2019-07-17-announcing-heim-project/</link><description><![CDATA[If you are familiar with Python ecosystem, probably you had heard about psutil package — a cross-platform library for retrieving information about system processes and system utilization (CPU, memory, disks, network and so on). It is very popular and actively used package, which has analogs in other languages: gopsutil for Golang, oshi for Java, you name it. Rust, of course, is not an exception here: we do have psutil, sysinfo, sys-info and systemstat crates.

Now, despite the tremendous work that had been done already by the authors of these crates, I’m excited to announce what I’ve been working on for the past three months: “heim” project — library for system information fetching.]]></description><guid isPermaLink="false">c91d6ec8-c734-495e-89ad-e63da5825eb0</guid><pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate><dc:creator>Nikita Kuznetsov</dc:creator></item><item><title>Cactus Harvesting: Cycle-Aware Reference Counting in Rust</title><link>https://hyperbo.la/w/cactus-harvesting/</link><description><![CDATA[🌵 CactusRef is a single-threaded, cycle-aware, reference counting smart pointer [docs] [code]. CactusRef is nearly a drop-in replacement for std::rc1 from the Rust standard library.]]></description><guid isPermaLink="false">f1fef443-d169-4ff1-a74e-262d273c9b9d</guid><pubDate>Mon, 15 Jul 2019 00:00:00 +0000</pubDate><dc:creator>Ryan Lopopolo</dc:creator></item><item><title>Stream combinators implemented using for await syntax</title><link>https://www.reddit.com/r/rust/comments/cbvhq9/stream_combinators_implemented_using_for_await/</link><description><![CDATA[ I am a big fan of simplifying the existent code in futures-rs using async/await syntax. My goal was to rewrite the combinators in such a way that even a newbie can understand what was going on. However I met several issues with Stream combinators because it was a little bit hard to construct an impl Stream without defining a struct with a ::poll_next method. So I used Stream::unfold that can create streams from a closure.]]></description><guid isPermaLink="false">907a2ee8-f215-4259-8179-bc4d542a7647</guid><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><dc:creator>Roman Proskuryakov</dc:creator></item><item><title>Introducing glam and mathbench</title><link>http://bitshifter.github.io/2019/07/10/introducing-glam-and-mathbench/</link><description><![CDATA[glam is a simple and fast Rust linear algebra library for games and graphics. mathbench is a set of unit tests and benchmarks comparing the performance of glam with the popular Rust linear algebra libraries cgmath and nalgebra. The following is a table of benchmarks produced by mathbench comparing glam performance to cgmath and nalgebra on f32 data.]]></description><guid isPermaLink="false">5f582def-af9d-44cb-9a18-648bff14bd67</guid><pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate><dc:creator>Cameron Hart</dc:creator></item><item><title>Migrating a crate from futures 0.1 to 0.3</title><link>https://www.ncameron.org/blog/migrating-a-crate-from-futures-0-1-to-0-3/</link><description><![CDATA[I recently migrated a small/medium-sized crate from Futures 0.1 to 0.3. It was fairly easy, but there were some tricky bits and some things that were not well documented, so I think it is worth me writing up my experience.]]></description><guid isPermaLink="false">84e8a302-326a-4c95-a6ae-78d4e8fa1029</guid><pubDate>Mon,  8 Jul 2019 21:24:28 +0000</pubDate><dc:creator>Nick Cameron</dc:creator></item><item><title>Building crates so they look like C(ABI) Libraries</title><link>https://dev.to/luzero/building-crates-so-they-look-like-c-abi-libraries-1ibn</link><description><![CDATA[How to write a well behaved C-API library in Rust.]]></description><guid isPermaLink="false">fdaab910-4937-451e-9fe4-3cfd693069b8</guid><pubDate>Mon,  1 Jul 2019 19:40:21 +0000</pubDate><dc:creator>Luca Barbato</dc:creator></item><item><title>async log</title><link>https://blog.yoshuawuyts.com/async-log/</link><description><![CDATA[Today we'd like to introduce async-log, a general-purpose crate that extends the standard log crate with asynchronous metadata. This is a first step in introducing full-fledged asynchronous tracing capabilities to Rust.]]></description><guid isPermaLink="false">f85b4664-304e-4eeb-a93b-2377b74263cd</guid><pubDate>Sat, 29 Jun 2019 00:00:00 +0000</pubDate><dc:creator>Yoshua Wuyts</dc:creator></item><item><title>termimad: A library to display rich (Markdown) snippets and texts in a Rust terminal application</title><link>https://github.com/Canop/termimad</link><description><![CDATA[A simple tool to display static or dynamic Markdown snippets in the terminal, with skin isolation. Based on crossterm so works on most terminals (even on windows).]]></description><guid isPermaLink="false">9f8dfcb3-e67c-456d-94d5-76ea84f8caa8</guid><pubDate>Thu, 27 Jun 2019 00:00:00 +0000</pubDate><dc:creator>Canop</dc:creator></item><item><title>RESS (Rusty EcmaScript Scanner) 0.7.0 bring large performance improvements</title><link>https://wiredforge.com/blog/ress-7/</link><description><![CDATA[A blog about learning computer science concepts with practical projects]]></description><guid isPermaLink="false">876033ef-0f64-4108-89c6-8ce8d6536ac7</guid><pubDate>Wed, 26 Jun 2019 00:00:00 +0000</pubDate><dc:creator>Robert Masen</dc:creator></item><item><title>swym: Are we lock-free yet?</title><link>https://mtak-blog.github.io/are-we-lock-free-yet</link><description><![CDATA[swym is a transactional memory library that prioritizes performance. It’s not lock-free, but it does have progress guarantees. This post will explore some of the recent work on swym’s progress promises, as well as some comparisons with non-blocking algorithms. I’m not an expert on schedulers or OS’s, so please correct me if anything is wrong. It might benefit swym!]]></description><guid isPermaLink="false">c274055b-d2a2-43f1-9ef3-a9fc15521878</guid><pubDate>Mon, 24 Jun 2019 00:00:00 +0000</pubDate><dc:creator>mtak-</dc:creator></item><item><title>nom, the Rust parser combinators library, is now available at version 5</title><link>http://unhandledexpression.com/general/2019/06/17/nom-5-is-here.html</link><description><![CDATA[nom, the Rust parser combinators library, is now available at version 5. This is the most mature version of nom. This is the one that feels “done”. This is the parser library that I wanted when I started nom 5 years ago. It’s here at last. nom 5 is a complete rewrite of the internal architecture, to use functions instead of macros, while keeping backward compatibility with existing macros based parsers, and making the error type completely generic.]]></description><guid isPermaLink="false">f6a2f624-a597-4ae7-b89a-e621ebb50c55</guid><pubDate>Mon, 24 Jun 2019 00:00:00 +0000</pubDate><dc:creator>Geoffroy Couprie</dc:creator></item><item><title>Gtk-rs: New release - more complete, safer</title><link>https://gtk-rs.org/blog/2019/06/22/new-release.html</link><description><![CDATA[Welcome everyone to this whole new gtk-rs release! Time to check what was added/updated in this new version.]]></description><guid isPermaLink="false">0f224e61-b4f3-40f2-b99a-431cf41ec5d8</guid><pubDate>Sat, 22 Jun 2019 00:00:00 +0000</pubDate><dc:creator>Gtk-rs Developers</dc:creator></item><item><title>Winit 0.20, the state of windowing in Rust, and a request for help</title><link>https://users.rust-lang.org/t/winit-0-20-the-state-of-windowing-in-rust-and-a-request-for-help/29485</link><description><![CDATA[I’m one of the maintainers of Winit, the main pure-Rust window creation library. Even if you haven’t used it directly, you’ve probably heard of projects that depend on it - Servo and Alacritty being the best-known applications that depend on our codebase. If you’ve done any graphics programming in Rust using Glutin (or dependent projects including gfx-rs, Glium, and Amethyst) we’ve been the ones making the windows actually show up on your desktop.

This announcement details the major changes since Winit 0.19. Also, we are looking for new contributors! If you are interested in working on the foundations of Rust’s GUI story, now is a great time to join the project.]]></description><guid isPermaLink="false">1ea200e9-2dda-4cad-9190-7aec92439026</guid><pubDate>Fri, 21 Jun 2019 16:16:03 +0000</pubDate><dc:creator>Osspial</dc:creator></item><item><title>Rust crates – frehberg’s annotated catalogue</title><link>https://frehberg.com/2019/06/rust-crates-frehbergs-annotated-catalogue/</link><description><![CDATA[The base of Rust users and contributors is growing steadily. The amount of libraries (aka crates) at http://crates.io is growing quickly; the overall “noise” is increasing. Some libraries might not be maintained any longer 🙁

This annotated catalogue shall help the Rust-users to find specific, popular, mature Rust crates. This list is WIP (Work In Progress), reflecting my personal shortlist. The ordering in the table top-down doesn’t express any preference.]]></description><guid isPermaLink="false">f1697ece-4d5e-46b8-88b5-d5a2e729ae96</guid><pubDate>Wed, 19 Jun 2019 19:13:23 +0000</pubDate><dc:creator>Frank Rehberger</dc:creator></item><item><title>The Rust Module System and Useful Crates for CLI Apps</title><link>https://ngoldbaum.github.io/posts/helpful-rust-cli-crates/</link><description><![CDATA[Today I’ll be continuing my series of posts on the rust implementation of the Mercurial version control system I’ve been working on. In this post I’ll be focusing on what I learned this week about the rust module system as well as a few helpful crates I discovered to aid in command-line argument parsing and error handling.]]></description><guid isPermaLink="false">24f33796-8ad9-4162-b8a1-1048ab285062</guid><pubDate>Wed, 12 Jun 2019 10:06:24 -0400</pubDate><dc:creator>Nathan Goldbaum</dc:creator></item><item><title>Announcing Contrie: concurrent maps and sets</title><link>https://vorner.github.io/2019/06/09/announcing-contrie.html</link><description><![CDATA[This is partly an announcement of a new crate folks might find useful, partly a call for participation and help and partly a journal like story how the crate came to being. Read on (or not) or skip to the parts that seem interesting to you.]]></description><guid isPermaLink="false">aaa397b7-d0b2-43d0-af75-0934ac4bfe73</guid><pubDate>Sun,  9 Jun 2019 00:00:00 +0000</pubDate><dc:creator>Michal &apos;vorner&apos; Vaner</dc:creator></item><item><title>Actix - Actor System and Web Framework for Rust</title><link>https://actix.rs/</link><description><![CDATA[Actix web 1.0.0 is released - a small, pragmatic, and extremely fast web framework.]]></description><guid isPermaLink="false">ae6027ab-b71f-4bce-9ab8-e1853aa24030</guid><pubDate>Wed,  5 Jun 2019 15:38:00 +0000</pubDate><dc:creator>Nikolay Kim</dc:creator></item><item><title>Announcing our Verifiable Random Function (VRF) Rust library</title><link>https://medium.com/witnet/announcing-our-verifiable-random-function-vrf-rust-library-2e042c29a4f7</link><description><![CDATA[Recently Gorka Irazoqui Apecechea and me proudly published a VRF crate as an open source project under the MIT license. The library is a fast, flexible and general-purpose Verifiable Random Function (VRF) library written in Rust, which follows the IETF standard draft written by Sharon Goldberg, Moni Naor, Dimitris Papadopoulos, Leonid Reyzin, and Jan Včelák.]]></description><guid isPermaLink="false">aea12212-4a3a-4c00-baa5-313f5c998977</guid><pubDate>Mon,  3 Jun 2019 15:03:50 +0000</pubDate><dc:creator>Mario Cao</dc:creator></item><item><title>Orkhon: ML Inference Framework and Server Runtime</title><link>https://docs.rs/orkhon/0.1.0/orkhon/</link><description><![CDATA[Orkhon is Rust framework for Machine Learning to run/use inference/prediction code written in Python, frozen models and process unseen data. It is mainly focused on serving models and processing unseen data in a performant manner. Instead of using Python directly and having scalability problems for servers this framework tries to solve them with built-in async API.]]></description><guid isPermaLink="false">0904d040-f6c1-4b6a-a9ee-328a5ed55d2d</guid><pubDate>Wed, 29 May 2019 21:32:00 +0000</pubDate><dc:creator>Mahmut Bulut</dc:creator></item><item><title>Announcing j4rs</title><link>https://astonbitecode.github.io/blog/post/j4rs_0.6.0/</link><description><![CDATA[j4rs stands for “Java for Rust” and allows effortless calls to Java code, from Rust. Some time ago, on a need to call Java code from Rust, I started the j4rs project. The main idea was to implement a crate that would give the ability to its users to make calls to Java easily, so that they can benefit from the huge Java ecosystem.]]></description><guid isPermaLink="false">f94980b0-dfbb-421b-b861-16e158c7c0c2</guid><pubDate>Fri, 24 May 2019 00:10:10 +0000</pubDate><dc:creator>Aston</dc:creator></item><item><title>Announcing Mockiato - A strict, yet friendly mocking library for Rust 2018</title><link>https://blog.myelin.ch/2019/05/24/mockiato-announcement.html</link><description><![CDATA[We’re proud to announce mockiato! For the last few months, we tackled the issue of creating a usable mocking library. Our primary goals were: Ease of use: The mocks are written in idiomatic Rust and don’t rely on custom macro syntax. Maintainability: The entire code base strives to follow the rules of Clean Code and Clean Architecture as specified by Robert C. Martin.  Strict expectation enforcement: Mockiato catches unexpected behavior as soon as it happens instead of returning default values.]]></description><guid isPermaLink="false">635d3c1f-b71e-4883-b72e-52efe1ab01d0</guid><pubDate>Fri, 24 May 2019 00:00:00 +0000</pubDate><dc:creator>Jeremy, Ruben, Jan, Mathias</dc:creator></item><item><title>mini-aio: the new async IO library for Rust</title><link>http://antoyo.ml/mini-aio-new-async-io-library</link><description><![CDATA[During my work at Adgear, I’ve been working for a while on an async IO library for Rust. This post will present this new library. This library takes a very different approach than most other async IO libraries in Rust: it is actually inspired by the Pony programming language. So, it does not use futures, it does not use async/await: it just provides simple trait]]></description><guid isPermaLink="false">db12537e-42d3-4bba-9c68-7adc1afec917</guid><pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate><dc:creator>Antoni Boucher</dc:creator></item><item><title>powerset-enum - anonymous enum and a PoC for how that feature can be used to improve Rust&apos;s error handling</title><link>https://www.reddit.com/r/rust/comments/bqn9e6/announcing_the_powersetenum_crate_a_poor_mans/</link><description><![CDATA[My crate offers a powerset enum - an enum that can be parametrized to any subset of it's variants. I also included a macro for doing this parametrization by providing the types of the variants - so for example Error![std::io::Error, serde_json::Error] would generate a subset of the enum that can only have IO and JSON parsing errors.]]></description><guid isPermaLink="false">feed408e-361c-4a9c-9432-5729aed1e789</guid><pubDate>Mon, 20 May 2019 08:50:00 +1000</pubDate><dc:creator>someboddy</dc:creator></item><item><title>Papers on Rust</title><link>http://magnusmanske.de/wordpress/?p=617</link><description><![CDATA[With these crates in a basic but usable state, I went to write papers, Rust code to gather data from the above sources, and inject them into Wikidata. I wrote a Rust trait to represent a generic source, and then wrote adapter structs for each of the sources. Finally, I added some wrapper code to take a list of adapters, query them about a paper, and update Wikidata accordingly.]]></description><guid isPermaLink="false">93fbaebd-c627-46f3-89ea-1469e58ecd22</guid><pubDate>Thu, 16 May 2019 10:06:00 +0000</pubDate><dc:creator>Magnus Manske</dc:creator></item><item><title>Rust+GNOME Hackfest #5</title><link>http://antoyo.ml/rust-gnome-hackfest-berlin</link><description><![CDATA[Last week, I went to the fifth Rust+GNOME hackfest which was in Berlin again. My goal for this hackfest was to fix this issue I opened nearly three years ago. The problem is that sometimes you want to create a widget or an object and set some properties at construction time. This might be needed when you want to set construct-only properties. For instance, you might want to create a webkit2gtk::WebView with a WebContext and a UserContentManager at the same time. That’s why a constructor was manually written for this use case.]]></description><guid isPermaLink="false">ad13d235-c5b0-454f-b35c-891006484207</guid><pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate><dc:creator>Antoni Boucher</dc:creator></item><item><title>Shell Completions in Pure Rust</title><link>https://www.joshmcguigan.com/blog/shell-completions-pure-rust/</link><description><![CDATA[Custom completion behavior is configured using a special bash built-in called complete. complete can be used to designate either a bash function or any other command as the completion script for a particular command. When the user requests completions for a command, complete will run specified code, passing in as args information about what the user has already typed, and expecting as output the completion suggestions. Typically these completion scripts are written in bash, but we’ll look at how it is possible to write them in Rust.]]></description><guid isPermaLink="false">fdf7f732-0af5-4031-9135-4b1db1ebfc28</guid><pubDate>Sun, 12 May 2019 00:00:00 +0000</pubDate><dc:creator>Josh Mcguigan</dc:creator></item><item><title>Generating a GNOME library using gir crate</title><link>https://gtk-rs.org/docs-src/tutorial/gir_tutorial</link><description><![CDATA[In this tutorial, we’ll see how to generate a GNOME library using the gir crate. A few things to note first: It only works on GObject-based libraries.  You need .gir files.

A little explanation about those requirements: the gir crate needs .gir files to generate the library API. You can generally find them alongside the library header files (as you can see here for example, look for “.gir”).

The .gir files “describes” the library API (objects, arguments, even ownership!). This is where the gir crate comes in: it reads those .gir files and generates the Rust crates from them. You can learn more about the GIR format here.]]></description><guid isPermaLink="false">a0a1c63f-18d2-440f-8568-0cdd5899afe3</guid><pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate><dc:creator>Gtk-rs</dc:creator></item><item><title>Learn Rust: Parsing command line arguments with StructOpt</title><link>https://www.tenderisthebyte.com/blog/2019/05/08/parsing-cli-args-with-structopt/</link><description><![CDATA[A beginners guide to using StructOpt for parsing command line arguments.]]></description><guid isPermaLink="false">b5691501-490d-4eef-a8cc-2728e42774d2</guid><pubDate>Wed,  8 May 2019 00:00:00 +0000</pubDate><dc:creator>Ryan Moore</dc:creator></item><item><title>Paw</title><link>https://blog.yoshuawuyts.com/paw/</link><description><![CDATA[Today we're announcing paw, a first step by the CLI Working Group to make command line applications more first class in Rust.

We introduce a procedural macro paw::main that allows passing arguments to fn main, and a new trait ParseArgs that must be implemented by the arguments to main. This allows passing not only the classic std::env::Args to main but also, for example, structopt instances.]]></description><guid isPermaLink="false">09931418-a93c-4b3f-ab7a-de486a0373fd</guid><pubDate>Mon,  6 May 2019 00:00:00 +0000</pubDate><dc:creator>Yoshua Wuyts</dc:creator></item><item><title>phrase: A tool for learning significant phrase/term models, and efficiently labeling with them</title><link>https://github.com/soaxelbrooke/phrase</link><description><![CDATA[In general, using phrase falls into 3 steps: Counting n-grams, Exporting scored models, Significant term/phrase extraction/transform N-gram counting is done continuously, providing batches of documents as they come in. Model export reads all n-gram counts so far and calculates mutual information-based collocations - you can then deploy the models by shipping the binary and data/scores_* files to a server. Labeling (identifying all significant terms and phrases in text) or transforming (eager replace of longest found phrases in text) can be done either via the CLI or the web server. Providing labels for documents is not necessary for learning phrases, but does help, and allows for significant term labeling also.]]></description><guid isPermaLink="false">db1287e6-d66c-486a-812b-87ba2b37d423</guid><pubDate>Mon,  6 May 2019 00:00:00 +0000</pubDate><dc:creator>Stuart Axelbrooke</dc:creator></item><item><title>Pre luminance-1.0.0 and random thoughts</title><link>https://phaazon.net/blog/pre-luminance-n-random-thoughts</link><description><![CDATA[Hello people. It’s been weeks I have started to work on luminance-1.0.0. For a brief recap, luminance is a graphics crate that I originally created in Haskell, when I ripped it off from a demoscene engine called quaazar in order to make and maintain tiner packages. The Rust port was my first Rust project and it became quickly the default language I would develop graphics applications in.]]></description><guid isPermaLink="false">8ff4000f-f8c6-41b9-a91b-c0bd9d23ca69</guid><pubDate>Fri, 26 Apr 2019 22:30:00 +0000</pubDate><dc:creator>Dimitri Sabadie</dc:creator></item><item><title>Monitoring AWS Batch Jobs with Rust</title><link>https://medium.com/rusted/monitoring-aws-batch-jobs-with-rust-8f1ef6115871</link><description><![CDATA[At Pixability my team and I recently created a pretty neat AWS Batch driven system. AWS Batch can can handle almost any task seamlessly and it’s pretty easy to manage with the console. This is great already, but I was curious to see what it would look like to monitor Batch with Rust. Watchrs was inspired by this question and currently provides basic functionality to do so. In this post we will be briefly going over how the main components of watchrs were built and how to use them all together.]]></description><guid isPermaLink="false">5af81963-5163-49f3-bd47-27b91d6dbd34</guid><pubDate>Wed, 24 Apr 2019 01:05:46 +0000</pubDate><dc:creator>Michael Habib</dc:creator></item><item><title>6 useful Rust macros that you might not have seen before</title><link>https://medium.com/@benmcdonald_11671/6-useful-rust-macros-that-you-might-not-have-seen-before-59d1386f7bc5</link><description><![CDATA[Below are 6 Rust macros that are worth taking a look at to improve your project. Rust macros are a great feature that can reduce code boilerplate and be a time saver for programmers. They also offer flexibility for developers to use metaprogramming to add new features to the language and package them in a way that is easy to integrate into code. They are one of the more powerful features of the language and this led me to search github and cargo to see what was out there. Below are some interest macros that are not as well known.]]></description><guid isPermaLink="false">b2657146-974b-41b9-ba31-8aae62c25f7d</guid><pubDate>Mon, 22 Apr 2019 02:00:39 +0000</pubDate><dc:creator>Ben McDonald</dc:creator></item><item><title>splines-1.0.0 and first release candidate</title><link>https://phaazon.net/blog/splines-1.0.0-rc.1</link><description><![CDATA[today, I’m going to talk about the splines crate. And more specifically, the splines-1.0.0-rc.1 release candidate I uploaded today on crates.io. Maybe you’re wondering what a spline is, in the first place. A spline is a mathematic curve that is defined by several polynomials. You can picture them mentally by several small and simple curves combined to each others, giving the curve an interesting shape and properties. Now why we want splines is easy to understand: imagine a curve, something smooth and a bit complex (maybe even with loops). Now, imagine you want to make an object move along that curve. How do you represent that curve and how to you “make something advance along it?”]]></description><guid isPermaLink="false">50725324-0ca7-4137-8e95-9d5e023881f8</guid><pubDate>Mon, 22 Apr 2019 01:10:00 +0000</pubDate><dc:creator>Dimitri Sabadie</dc:creator></item><item><title>emacs-module-rs provides high-level Rust binding and tools to write Emacs&apos;s dynamic modules.</title><link>https://ubolonton.github.io/emacs-module-rs/0.8.0/</link><description><![CDATA[This provides a high-level binding to emacs-module, Emacs's support for dynamic modules.]]></description><guid isPermaLink="false">675a435e-aadf-4ded-b3d1-50d6a8afaced</guid><pubDate>Sat, 20 Apr 2019 11:11:45 +0000</pubDate><dc:creator>Tuấn-Anh Nguyễn</dc:creator></item><item><title>12 Killer Rust Libraries You Should Try</title><link>https://medium.com/@jondot/12-killer-rust-libraries-you-should-know-c60bab07624f</link><description><![CDATA[I’ve just crossed a 20K LOC in one of my bigger Rust projects, and thought about pausing for a moment and sharing some great Rust libraries that I’ve used.]]></description><guid isPermaLink="false">b8b79bb1-c176-43e8-bad9-943285e361c6</guid><pubDate>Fri, 19 Apr 2019 15:21:32 +0000</pubDate><dc:creator>Dotan Nahum</dc:creator></item><item><title>Futures 0.1 Compatibility Layer</title><link>https://rust-lang-nursery.github.io/futures-rs/blog/2019/04/18/compatibility-layer.html</link><description><![CDATA[Rust’s futures ecosystem is currently split in two: On the one hand we have the vibrant ecosystem built around futures@0.1 with its many libraries working on stable Rust and on the other hand there’s the unstable std::future ecosystem with support for the ergonomic and powerful async/await language feature. To bridge the gap between these two worlds we have introduced a compatibility layer as part of the futures@0.3 extension to std::future. This blog post aims to give an overview over how to use it.]]></description><guid isPermaLink="false">adc39c05-2876-4ef4-b071-b4133c96c8ca</guid><pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Josef Brandl</dc:creator></item><item><title>Runtime</title><link>https://blog.yoshuawuyts.com/runtime/</link><description><![CDATA[The vision of the Async Ecosystem WG is to refine the async Rust experience until it matches the quality and ease of working with today's std. There are a lot of components in that vision, including async/await syntax and borrow checker integration. Today, though, we'd like to introduce another component: Runtime, a crate that makes working with async code feel closer to working with std, and a stepping stone toward ecosystem standardization.]]></description><guid isPermaLink="false">53c58e52-158a-40e1-b59d-3a9ad1a92edb</guid><pubDate>Tue, 16 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Yoshua Wuyts</dc:creator></item><item><title>Using rav1e - from your own code</title><link>https://dev.to/luzero/using-rav1e-from-your-own-code-2ie0</link><description><![CDATA[AV1 is a modern video codec brought to you by an alliance of many different bigger and smaller players in the multimedia field. rav1e: The safest and fastest AV1 encoder, built by many volunteers and Mozilla/Xiph developers. crav1e: A companion crate, written by yours truly, that provides a C-API, so the encoder can be used by C libraries and programs. This article will just give a quick overview of the API available right now and it is mainly to help people start using it and hopefully report issues and problem.]]></description><guid isPermaLink="false">914d12c5-ea4a-49f4-8466-1f15a9c3340a</guid><pubDate>Tue,  9 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Luca Barbato</dc:creator></item><item><title>Protocols in Tokio (i3 IPC)</title><link>https://leshow.github.io/post/impl_proto_tokio/</link><description><![CDATA[There’s a dearth of blog posts online that cover the details of implementing a custom protocol in tokio, at least that I’ve found. I’m going to cover some of the steps I went through in implementing an async version i3wm’s IPC.]]></description><guid isPermaLink="false">ebf00798-d92a-4f61-8b2b-8ffceb2c09a9</guid><pubDate>Mon,  8 Apr 2019 18:53:18 -0400</pubDate><dc:creator>Evan Cameron</dc:creator></item><item><title>MeiliES - Event sourcing in Rust</title><link>https://blog.meilisearch.com/meilies-release/</link><description><![CDATA[MeiliES is an Event Sourcing database that uses the RESP (REdis Serialization Protocol) to communicate. We use the Redis protocol to simplify clients implementation. The portability problematics are resolved by using a full Rust implementation (we are using Sled as internal storage).]]></description><guid isPermaLink="false">ed083e12-489d-4720-8e59-eea15c03c3f8</guid><pubDate>Mon, 25 Mar 2019 14:16:32 +0000</pubDate><dc:creator>Thomas Payet</dc:creator></item><item><title>Zola 0.6.0: start of multi-lingual sites</title><link>https://www.vincentprouillet.com/blog/releasing-zola-0-6-0/</link><description><![CDATA[Zola gets the beginning of multi-lingual support and perf improvements.]]></description><guid isPermaLink="false">410c0a3f-026f-4e8c-9910-40745122a369</guid><pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Vincent Prouillet</dc:creator></item><item><title>Sonic: Fast, lightweight &amp; schema-less search backend</title><link>https://github.com/valeriansaliou/sonic</link><description><![CDATA[Sonic is a fast, lightweight and schema-less search backend. It ingests search texts and identifier tuples that can then be queried against in a microsecond's time.]]></description><guid isPermaLink="false">0dbd06f7-147e-404c-81ce-360e61e087e5</guid><pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Valerian Saliou</dc:creator></item><item><title>barrel.rs: a powerful schema migration builder&apos;s 0.5.0 release</title><link>https://rust-db.github.io/barrel/blog/releasing-050/</link><description><![CDATA[barrel makes writing migrations for different databases as easy as possible. It provides you with a common API over SQL, with certain features only provided for database specific implementations. This way you can focus on your Rust code, and stop worrying about SQL.]]></description><guid isPermaLink="false">554b2733-697f-41c7-b91b-0261acc1aa24</guid><pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Squirrel People</dc:creator></item><item><title>Implementing a Hidden Markov Model in Rust</title><link>https://paulkernfeld.com/2019/03/17/hmmm.html</link><description><![CDATA[Over the past few months, I’ve implemented hmmm, a Rust library for Hidden Markov Models (HMMs). HMMs are a well-established statistical machine learning technique for modeling sequences of data. They have been applied to problems like speech recognition and bioinformatics. They are called “hidden” because each discrete time step is associated with a hidden state. Below, I’ll briefly discuss some challenges that I ran into while implementing this library.]]></description><guid isPermaLink="false">187cf7df-3448-4699-86f6-28e90a1a025f</guid><pubDate>Sun, 17 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Paul Kernfeld</dc:creator></item><item><title>A Rust API for librsvg</title><link>https://people.gnome.org/~federico/blog/a-rust-api-for-librsvg.html</link><description><![CDATA[After the librsvg team finished the rustification of librsvg's main library, I wanted to start porting the high-level test suite to Rust. This is mainly to be able to run tests in parallel, which cargo test does automatically in order to reduce test times. However, this meant that librsvg needed a Rust API that would exercise the same code paths as the C entry points. At the same time, I wanted the Rust API to make it impossible to misuse the library.]]></description><guid isPermaLink="false">04f2e112-c86d-4468-9b75-d74f84429d69</guid><pubDate>Fri, 15 Mar 2019 13:36:47 -0600</pubDate><dc:creator>Federico Mena Quintero</dc:creator></item><item><title>Pulldown_cmark 0.3 release announcement</title><link>https://fullyfaithful.eu/pulldown-cmark/</link><description><![CDATA[pulldown_cmark, a fast pull parser for the CommonMark markdown standard written in Rust, has just seen its 0.3 release. It marks a milestone for renewed CommonMark test compliance and performance. In this blog post, we'll have a quick look at the goals of the rewrite, how they were achieved and what's next for the crate.]]></description><guid isPermaLink="false">ad1ab029-a374-4fde-8f62-6100bf699da2</guid><pubDate>Fri, 15 Mar 2019 08:19:00 +0000</pubDate><dc:creator>Marcus Klaas de Vries</dc:creator></item><item><title>Persy: an attempt to write a transactional storage engine in Rust</title><link>http://persy.rs/posts/persy-0.4.html</link><description><![CDATA[Persy is a single file storage engine, all the data, referencing structures and logs are kept in a single file. Persy support read-committed transactions, using copy on write to guarantee high concurrency and isolation, the data consistency is guaranteed by a transaction log that recover the operations in case of crash. Persy provide segments to organize records of different kinds and allow the scan on a single segment. Persy provide index implementation that can be used to associate any simple value to another value or a record reference. In Persy a record is a simple Vec<u8>, the content of the record is ignored by Persy, is just stored and retrieved on request.]]></description><guid isPermaLink="false">c3575790-8873-4860-bc2a-15ba5f636a42</guid><pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate><dc:creator>tglman</dc:creator></item><item><title>Arraigning a Statement, vol. 2</title><link>https://llogiq.github.io/2019/03/14/stmt2.html</link><description><![CDATA[Last time we defined a minimum viable implementation for mutagen statement removal: Remove only function call statements whose results are not returned from the surrounding block and whose AST do not contain any Assign expressions.]]></description><guid isPermaLink="false">5826453d-6731-41d9-a4f5-f5dbce6ef1df</guid><pubDate>Thu, 14 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>Arraigning a Statement, vol. 1</title><link>https://llogiq.github.io/2019/03/11/stmt.html</link><description><![CDATA[This time in our “Mutating Rust” series, we want to tackle the most complex mutation so far: Statement removal. Now why do I think this is complex? It’s just removing the statement (or, as we bake our mutations into the code, activating at runtime, putting it behind an if), right?]]></description><guid isPermaLink="false">e216ede8-5599-48f4-a458-770944ef44f2</guid><pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>clap v3 Update: No More Strings</title><link>https://kbknapp.dev/clap-v3-update-no-more-strings/</link><description><![CDATA[This is the second post in a series detailing the issues, progress, and design decisions used in clap v3. This post details removing the "stringly typed" nature of clap.]]></description><guid isPermaLink="false">710b4e1e-9882-413b-bf2d-9fc746502ede</guid><pubDate>Fri,  8 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Kevin K.</dc:creator></item><item><title>Starling, the Binary Indexed Merkle Tree (Or Merkle-BIT)</title><link>https://www.reddit.com/r/rust/comments/aww097/starling_the_binary_indexed_merkle_tree_or/</link><description><![CDATA[Hey rustaceans! With a little help from your feedback just a few hours ago, I'm proud to present to you all Starling, a Binary Indexed Merkle tree! I've been working on this data structure for the last few months, and I think it is ready now for the community to have a look. Let me explain what it is and why it might be useful for your project.]]></description><guid isPermaLink="false">ce110dd7-46c1-4f12-880f-1c0bbf3a6726</guid><pubDate>Mon,  4 Mar 2019 04:12:50 +1100</pubDate><dc:creator>ChosunOne</dc:creator></item><item><title>Pedal to the metal: dynamic templates with Ramhorns</title><link>https://maciej.codes/2019-03-03-ramhorns.html</link><description><![CDATA[I have a problem. I don't know what to call it, but there is this itch I have when I find something that can obviously be made more efficient. The way I get about scratching that itch these days is by writing some Rust. I just got such an itch when looking at static site generators for this blog, Hugo (written in Go) is pretty much state-of-the art. In Rust land we have Zola, which is feature-rich, mature (for v0.5), and definitely fast enough for most users, and yet it is not as fast as it could be. Being written in Rust is, by itself, not a guarantee of top performance. The implementation matters. After some looking around I've narrowed down a problem I want to tackle (for now) to one area: template engines.]]></description><guid isPermaLink="false">a540ae81-ddbb-4279-a507-b7faf43e5b19</guid><pubDate>Sun,  3 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Maciej Hirsz</dc:creator></item><item><title>The last two months in rustsim #4 (January - February 2019)</title><link>https://www.rustsim.org/blog/2019/03/01/this-month-in-rustsim/</link><description><![CDATA[Welcome to the fourth edition of This month in rustsim. This monthly newsletter will provide you with a summary of important update that occurred within the rustsim community. This includes in particular updates about the nphysics, ncollide, nalgebra, and alga crate.]]></description><guid isPermaLink="false">677c24c1-719c-4744-acb3-46eb5e21f991</guid><pubDate>Fri,  1 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Sébastien Crozet</dc:creator></item><item><title>Writing Mails from Rust (3/3): Example usage with explanations</title><link>https://blog.1aim.com/post/004-mail-3-example/</link><description><![CDATA[After the previous two posts this post will go step by step through how the mail crate can be used to create mails based on a handlebars template and send them to a Mail Submission Agent (MSA).]]></description><guid isPermaLink="false">9f8e4402-c90a-4e59-90c2-ca34bf6c2689</guid><pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Philipp Korber</dc:creator></item><item><title>Low level text layout kickoff</title><link>https://raphlinus.github.io/rust/skribo/text/2019/02/27/text-layout-kickoff.html</link><description><![CDATA[This post is to announce a new Rust library for low-level text layout, called “skribo” (the Esperanto word for “writing”). This has been a major gap in the Rust ecosystem, and I hope the new crate can improve text handling across the board.]]></description><guid isPermaLink="false">70a94e2b-dbd2-4f66-ada8-5886b5c51fab</guid><pubDate>Wed, 27 Feb 2019 18:16:42 +0000</pubDate><dc:creator>Raph Levien</dc:creator></item><item><title>Releasing rust_gpiozero v0.2.0</title><link>https://rahul-thakoor.github.io/releasing-rust_gpiozero-v0.2.0/</link><description><![CDATA[A new version packed with new features and improvements: Blink leds without blocking main thread and adjust brightness. ⚙️ Work with servo motors and adjust motor speed. 〜 Work with software PWM.]]></description><guid isPermaLink="false">e0caaf97-6980-4421-afbe-3fca31872c73</guid><pubDate>Wed, 27 Feb 2019 17:43:48 +0400</pubDate><dc:creator>Rahul Thakoor</dc:creator></item><item><title>100x improvement on startup time in Wasmer 0.2.0</title><link>https://medium.com/wasmer/running-webassembly-100x-faster-%EF%B8%8F-a8237e9a372d</link><description><![CDATA[We’ve been working steadily to get Wasmer to execute WebAssembly modules on the server-side as fast as possible. TL;DR — We got 100x improvement on startup time on Wasmer 0.2.0.]]></description><guid isPermaLink="false">fe2180a3-53fb-4b12-b6b2-722c19587b39</guid><pubDate>Mon, 25 Feb 2019 22:04:55 +0000</pubDate><dc:creator>Syrus Akbary</dc:creator></item><item><title>Up and Running with React + Rust + Wasm</title><link>https://prestonrichey.com/blog/react-rust-wasm/</link><description><![CDATA[I’m super excited about WebAssembly! It’s fast, (can be) small, and extremely portable. In fact, I wouldn’t be surprised if in the near future most web developers write code that eventually gets compiled to Wasm.

But currently there’s not a huge selection of resources showing how to get started with WebAssembly, and I couldn’t find any tutorials that worked with create-react-app. Most focus on writing and compiling a module, but rush over the details of actually using Wasm code. What follows is a basic setup for a React app using WebAssembly that should serve as a good foundation for more complex applications.]]></description><guid isPermaLink="false">7da6de6b-bbf8-4587-ab48-615ee988d899</guid><pubDate>Mon, 25 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Preston Richey</dc:creator></item><item><title>Introducing battery crate</title><link>https://svartalf.info/posts/2019-02-25-introducing-battery-crate/</link><description><![CDATA[My new pet project for reading batteries information in Rust.]]></description><guid isPermaLink="false">e513ef63-5727-4db5-8830-08606838d1e3</guid><pubDate>Mon, 25 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Nikita Kuznetsov</dc:creator></item><item><title>Combine Results for Improved Rust Validation Logic</title><link>https://www.joshmcguigan.com/blog/multi-try-improved-validation-logic-rust/</link><description><![CDATA[The error handling features within Rust are some of my favorite things about the language. This system works great when you are in a function which returns a Result and you want to exit at the first error you come to. However, it can be challenging if your goal is to try a few failure-prone things and return each of the errors, rather than just the first error. This is the problem multi_try attempts to solve. ]]></description><guid isPermaLink="false">03e057c7-1da0-4468-b0f8-3aaedde6b241</guid><pubDate>Sat, 23 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Josh Mcguigan</dc:creator></item><item><title>Our first Rust crate: decrypting ansible vaults</title><link>https://medium.com/@woutergeraedts/our-first-rust-crate-decrypting-ansible-vaults-25f2f3a9a674</link><description><![CDATA[We encrypt these secrets in so-called ansible vaults. Kuberwave also has the need to access these secrets. Because our staff is already comfortable with using these vaults, we’ve decided to also employ them for our Kubernetes setup. For this I created ansible-vault-rs, a library that can decrypt ansible vaults. Note that it can not create or edit vaults, because I have no need (yet) for this functionality.]]></description><guid isPermaLink="false">2c0b32cc-51a7-4e6f-a729-92c6cedcd7b1</guid><pubDate>Fri, 22 Feb 2019 08:12:26 +0000</pubDate><dc:creator>Wouter Geraedts</dc:creator></item><item><title>New Gtk-rs release finally happened!</title><link>https://gtk-rs.org/blog/2019/02/21/new-release.html</link><description><![CDATA[It’s time for a new release! Main adds/changes this time are: We added the generation of the Atk crate. We now generate functions taking callback as parameters. We improved the channels handling in GLib. The whole new GString type! The minimum Rust version supported is now the 1.31. The minimum version of all libraries has been changed to GNOME 3.14. The maximum version of all libraries has been upgraded to GNOME 3.30. Added subclassing support in GLib. Even more bindings generated. Let’s see those in details.]]></description><guid isPermaLink="false">7a149bc9-7e87-40cb-b3ef-da277059f897</guid><pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Gtk-rs</dc:creator></item><item><title>Introducing embedded-sdmmc - a pure-Rust #[no_std] SD card and FAT16/FAT32 library</title><link>https://www.reddit.com/r/rust/comments/ascvls/introducing_embeddedsdmmc_a_purerust_no_std_sd/</link><description><![CDATA[161 votes and 6 comments so far on Reddit]]></description><guid isPermaLink="false">fe990782-d611-46a2-a6c1-4048707e61df</guid><pubDate>Wed, 20 Feb 2019 04:32:00 +0000</pubDate><dc:creator>Jonathan Pallant</dc:creator></item><item><title>Lyon in 2018</title><link>https://nical.github.io/posts/lyon-2018.html</link><description><![CDATA[In 2018 my activity on the project has varied depending on the time and energy I have had left after work and other activities. As it turns out, working on getting WebRender shipped in Firefox is at the same time amazing and very demanding, and what's left of my brain after a good day of work isn't always up to some of the ambitions I have planned for lyon. Fortunately I am not the only one who contributed to the project, and while progress was slow on the most ambitious plans, I did spend some time on smaller features and polish.

I'll get to these big plans towards the end of this post. In the mean time let's look at some of the highlights of what changed in lyon in 2018.]]></description><guid isPermaLink="false">0a429d63-c63c-4161-8960-c83915c01b26</guid><pubDate>Sun, 17 Feb 2019 00:00:00 +0100</pubDate><dc:creator>Nical</dc:creator></item><item><title>First release of ieee802154 crate - Partial implementation of the IEEE 802.15.4 standard</title><link>https://users.rust-lang.org/t/first-release-of-ieee802154-0-1-partial-implementation-of-the-ieee-802-15-4-standard/25094</link><description><![CDATA[I’ve released the ieee802154 crate, a partial implementation of the IEEE 802.15.4 standard, earlier this week.  IEEE 802.15.4 is a standard for low-rate wireless personal area networks. It is used as the basis for higher-level protocols like 6LoWPAN, Zigbee, or Thread. The ieee802154 crate is only a partial implementation of this standard, but I hope it can be used as a basis for future work by extending it as required.]]></description><guid isPermaLink="false">5e8e4feb-2bb8-4337-bfba-a71003c797ed</guid><pubDate>Fri,  8 Feb 2019 14:24:56 +0000</pubDate><dc:creator>Hanno Braun</dc:creator></item><item><title>Metered-rs: fast, ergonomic metrics for Rust</title><link>https://users.rust-lang.org/t/metered-rs-fast-ergonomic-metrics-for-rust/25061</link><description><![CDATA[I’m pleased to announce the release of metered-rs, a crate that helps live measurements of code, inspired by Coda Hale’s Java metrics, with the philosophy that measuring program performance at runtime is valuable, and independent from benchmarking.]]></description><guid isPermaLink="false">6b4003d7-f0ce-4105-8ed5-f4bea94f77b9</guid><pubDate>Thu,  7 Feb 2019 18:14:21 +0000</pubDate><dc:creator>Simon Chemouil</dc:creator></item><item><title>Writing Mails from Rust (2/3): The mail crate</title><link>https://blog.1aim.com/post/003-mail-2-crate/</link><description><![CDATA[The mail crate is a modular Rust library for creating, modifying and then encoding mails. It also has bindings to our new crate new-tokio-smtp to allow sending mails asynchronously, as well as bindings to handlebars for creating mails from templates. It currently does not support parsing mails, but is designed in a way that decoding capabilities could be easily added in the future (contact me if that is something you'd be interested in working on!). At 1aim, we are already using mail in production.]]></description><guid isPermaLink="false">3ac75258-fb50-4341-9a2a-e5a90def4a55</guid><pubDate>Tue, 29 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Philipp Korber</dc:creator></item><item><title>Lock-free Rust: Crossbeam in 2019</title><link>https://stjepang.github.io/2019/01/29/lock-free-rust-crossbeam-in-2019.html</link><description><![CDATA[This is a follow-up post to Lock-freedom without garbage collection from 2015, which introduced Crossbeam, a Rust library that implements efficient lock-free data structures without relying on a tracing garbage collector.]]></description><guid isPermaLink="false">7d5bbb25-d599-43d5-82cb-1a4dcdf47286</guid><pubDate>Tue, 29 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Stjepan Glavina</dc:creator></item><item><title>Writing Mails from Rust (1/3): Mail in general</title><link>https://blog.1aim.com/post/002-mail-1-intro/</link><description><![CDATA[This is the first part in a three part blog post about (e-)mails and how to create, encode and send them using the mail crate (a library).]]></description><guid isPermaLink="false">5b4334f5-08f9-450c-88cf-20fe91993cdc</guid><pubDate>Mon, 28 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Philipp Korber</dc:creator></item><item><title>Typetag: Serde serializable and deserializable trait objects</title><link>https://github.com/dtolnay/typetag/blob/master/README.md</link><description><![CDATA[Serde serializable and deserializable trait objects. This crate provides a macro for painless serialization of &dyn Trait trait objects and serialization + deserialization of Box<dyn Trait> trait objects.]]></description><guid isPermaLink="false">c4806dc1-431a-46e2-a950-8f29194a87b1</guid><pubDate>Thu, 24 Jan 2019 01:13:57 +0000</pubDate><dc:creator>David Tolnay</dc:creator></item><item><title>paw at Rust GUIs</title><link>https://medium.com/@m.siglreith/paw-at-rust-guis-d4d848e14b94</link><description><![CDATA[The recent release of Flutter 1.0 was quite exciting for me. I’m not much of anGUI person nor do I make a lot of mobile apps but after looking through some examples, I started to like their take on UI frameworks. In particular, the three aspects mentioned above seemed to be handled very well!

Back to Rust. I wondered how to adopt a similar API under the strict eyes 👀 of the borrow- and typechecker — which resulted in the experimental UI framework paw (in progress..)]]></description><guid isPermaLink="false">04445dcf-4cd1-47ee-b40e-58d17bdf0a9c</guid><pubDate>Thu, 17 Jan 2019 18:12:55 +0000</pubDate><dc:creator>msiglreith</dc:creator></item><item><title>Rust bindings for GStreamerGL: Memoirs</title><link>https://blogs.igalia.com/vjaquez/2019/01/16/rust-bindings-for-gstreamergl-memoirs/</link><description><![CDATA[Thanks to Mozilla and Igalia I have the opportunity to work on Servo, adding it HTML5 multimedia features. First, with the help of Fernando Jiménez, we finished what my colleague Philippe Normand and Sebastian Dröge (one of my programming heroes) started: a media player in Rust designed to be integrated in Servo. This media player lives in its own crate: servo/media along with the WebAudio engine. A crate, in Rust jargon, is like a library. This crate is (very ad-hocly) designed to be multimedia framework agnostic, but the only backend right now is for GStreamer. Later we integrated it into Servo adding an initial support for audio and video tags.]]></description><guid isPermaLink="false">3697f091-2478-437f-bdbb-3e464fe1ab8a</guid><pubDate>Wed, 16 Jan 2019 19:42:55 +0000</pubDate><dc:creator>vjaquez</dc:creator></item><item><title>proc-macro-rules - macro_rules-like pattern matching inside a procedural macro</title><link>https://www.ncameron.org/blog/proc-macro-rules/</link><description><![CDATA[I'm announcing a new library for procedural macro authors: proc-macro-rules (and on crates.io). It allows you to do macro_rules-like pattern matching inside a procedural macro. The goal is to smooth the transition from declarative to procedural macros (this works pretty well when used with the quote crate).]]></description><guid isPermaLink="false">6e54473a-fefd-4447-8888-98137bd74692</guid><pubDate>Wed, 16 Jan 2019 19:27:54 +0000</pubDate><dc:creator>Nick Cameron</dc:creator></item><item><title>Stretch — A flexbox implementation in Rust</title><link>https://medium.com/visly/stretch-a-flexbox-implementation-in-rust-60762b5a3331</link><description><![CDATA[Let’s talk about Layout. Layout is fundamental to any UI application. The layout engine is what takes a set of rules and figures out where to place elements on the screen. This sounds simple enough but as UIs become increasingly complex we rely more on the layout engine to be able to create these UIs as easily as possible. Not only should it be easy to build these UIs but the engine performing this work is also required to do so at minimum cost as it runs possibly on every frame (for example when performing layout animations).]]></description><guid isPermaLink="false">cdb3ed72-c1a4-4ff2-8350-cb5768fd96d4</guid><pubDate>Tue, 15 Jan 2019 20:04:57 +0000</pubDate><dc:creator>Emil Sjölander</dc:creator></item><item><title>Rutie: “The Tie Between Ruby and Rust.”</title><link>https://github.com/danielpclark/rutie/blob/master/README.md</link><description><![CDATA[Integrate Ruby with your Rust application. Or integrate Rust with your Ruby application. This project allows you to do either with relative ease.]]></description><guid isPermaLink="false">7405fc44-d31f-49f8-a260-b837ff0e3f12</guid><pubDate>Thu, 10 Jan 2019 15:23:58 +0000</pubDate><dc:creator>Daniel P. Clark</dc:creator></item><item><title>Parsing, Validating, and Assembling URLs in Rust</title><link>https://www.secretfader.com/blog/2019/01/parsing-validating-assembling-urls-rust/</link><description><![CDATA[These days, we hardly think about URLs. Popular content management tools default to so-called “pretty” slugs, and even here, on secretfader.com, I remove stop-words to ensure the tidiest, most SEO-friendly URLs possible.
It would be easy to forget the struggles that led to best practices of today’s web. However, to my generation of internet hackers, URLs riddled with ampersands and question marks were entirely normal. In those days, assuming URLs would be comprised of hyphenated alphanumeric characters was obviously unsafe; instead, we learned the official standard for parsing and constructing URLs.]]></description><guid isPermaLink="false">2a37239a-12d8-4647-bef0-90312992b2b7</guid><pubDate>Tue,  8 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Nicholas (Fader) Young</dc:creator></item><item><title>generic-array Design and Usage Notes</title><link>https://github.com/fizyk20/generic-array/blob/master/DESIGN.md</link><description><![CDATA[generic-array is a method of achieving fixed-length fixed-size stack-allocated generic arrays without needing const generics in stable Rust.]]></description><guid isPermaLink="false">1dd7a631-a2a9-42e8-ba0c-87b56bc6af38</guid><pubDate>Tue,  8 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Aaron Trent</dc:creator></item><item><title>Scannerless parsing of boolean grammars with derivatives in Rust</title><link>https://github.com/jameysharp/weighted-regexp-rs/blob/master/README.md</link><description><![CDATA[This is yet another library for writing parsers in Rust. What makes this one different is that I've combined some existing academic work in a way that I think is novel. The result is an unusually flexible parsing library while still offering competitive performance and memory usage.]]></description><guid isPermaLink="false">ad9d038f-52e6-4860-a264-61a795428b87</guid><pubDate>Sun,  6 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Jamey Sharp</dc:creator></item><item><title>Version 0.2 of Smithay, a library for making wayland compositors</title><link>https://smithay.github.io/smithay-v-0-2.html</link><description><![CDATA[Announcement of version 0.2 of smithay, now providing the fundamentals of a wayland compositor.]]></description><guid isPermaLink="false">bc334e2e-7ac8-4019-a197-da3d1d19edbf</guid><pubDate>Fri, 28 Dec 2018 17:00:00 +0100</pubDate><dc:creator>Victor Berger</dc:creator></item><item><title>Announcing &apos;err-derive&apos; - yet another error handling library</title><link>https://users.rust-lang.org/t/announcing-err-derive-yet-another-error-handling-library/23594</link><description><![CDATA[err-derive A failure-like derive macro for the std Error. The source code is mostly copied from failure-derive.]]></description><guid isPermaLink="false">0461ffc8-05b3-413d-a015-c0859ed9665f</guid><pubDate>Thu, 27 Dec 2018 13:09:02 +0000</pubDate><dc:creator>Thomas Schaller</dc:creator></item><item><title>Easy Postgres extensions in Rust with pg-extend-rs</title><link>https://bluejekyll.github.io/blog/rust/2018/12/27/announcing-pg-extend.html</link><description><![CDATA[A project to make Postgres extensions in Rust easy, you might learn how to use macro_rules, attribute macros, allocators and some FFI in this post.]]></description><guid isPermaLink="false">043f0bae-caa0-4d77-8336-9ec0813a0ca0</guid><pubDate>Thu, 27 Dec 2018 07:00:00 +0000</pubDate><dc:creator>Benjamin Fry</dc:creator></item><item><title>Jix&apos; Site: Introducing partial_ref</title><link>https://jix.one/introducing-partial_ref/</link><description><![CDATA[Recently there has been some discussion about interprocedural borrowing conflicts in rust. This is something I’ve been fighting with a lot, especially while working on my SAT solver varisat. Around the time Niko Matsakis published his blog post about this, I realized that the existing workarounds I’ve been using in varisat have become a maintenance nightmare. Making simple changes to the code required lots of changes in the boilerplate needed to thread various references to the places where they’re needed.

While I didn’t think that a new language feature to solve this would be something I’d be willing to wait for, I decided to sit down and figure out how such a language feature would have to look like. I knew that I wanted something that allows for partial borrows across function calls. I also prefer this to work with annotations instead of global inference. While trying to come up with a coherent design that fits neatly into the existing type and trait system, I realized that most of what I wanted can be realized in stable rust today.]]></description><guid isPermaLink="false">2508ab68-2b48-4066-a6b4-a15a4f061025</guid><pubDate>Mon, 24 Dec 2018 14:07:10 +0100</pubDate><dc:creator>Jannis Harder</dc:creator></item><item><title>A great 2018, an even better 2019</title><link>https://tokio.rs/blog/2018-12-recap-2018/</link><description><![CDATA[A year ago, Tokio was a very different library. It includes the (now deprecated) tokio-core which provided a future executor, I/O selector, and basic TCP/UDP types in a single library. It also included tokio-proto, but we won't talk about that. Over the past year, Tokio has grown to become Rust's asynchronous I/O platform. It has been adopted by a number of large companies to build apps.]]></description><guid isPermaLink="false">8abe1072-74b2-4cc8-b349-ba38a3bfae1b</guid><pubDate>Wed, 19 Dec 2018 00:00:00 +0000</pubDate><dc:creator>Carl Lerche</dc:creator></item><item><title>QADAPT - debug_assert! for your memory usage</title><link>https://speice.io/2018/12/allocation-safety.html</link><description><![CDATA[I think it’s part of the human condition to ignore perfectly good advice when it comes our way. A bit over a month ago, I was dispensing sage wisdom for the ages: I had a really great idea: build a custom allocator that allows you to track your own allocations. I gave it a shot, but learned very quickly: never write your own allocator. I proceeded to ignore it, because we never really learn from our mistakes. There’s another part of the human condition that derives joy from seeing things explode. And that’s the part I’m going to focus on.]]></description><guid isPermaLink="false">e72d0a8e-198f-4bd2-bf1e-7e0e94fac9d5</guid><pubDate>Sat, 15 Dec 2018 00:00:00 -0500</pubDate><dc:creator>Bradlee Speice</dc:creator></item><item><title>Building Alexa Skills in Rust</title><link>https://medium.com/@amalec/building-alexa-skills-in-rust-4cf54a497ea4</link><description><![CDATA[My favorite way to explore Lambdas is to build Alexa skills because of the immediate feedback: you write a little code, and a home device talks to you. It’s a peek into the long promised of world of easy service composition.

Unfortunately, Rust didn’t have complete Alexa skill request/response handling (there is a crate from 2 years ago that handled only the basics), so I wrote one called alexa_sdk. (It’s basically a struct plus serde wrapper around the Alexa JSON spec, with some helpers.]]></description><guid isPermaLink="false">36dce8e1-2508-4e34-8aaf-1eb43a8b17e1</guid><pubDate>Sun,  9 Dec 2018 21:30:38 +0000</pubDate><dc:creator>Arien Malec</dc:creator></item><item><title>Spirit Tutorial</title><link>https://vorner.github.io/2018/12/09/Spirit-Tutorial.html</link><description><![CDATA[In short, when writing a daemon or a service, we have the „muscle“ of the application ‒ whatever we write the daemon for. And we have a whole lot of infrastructure around that: logging, command line parsing, configuration. And while there are Rust libraries for all that, one needs nontrivial amount of boilerplate code to bridge all this together. Spirit aims to be this bridge.]]></description><guid isPermaLink="false">8f8ef893-ae80-4991-9d17-93049ee0adc6</guid><pubDate>Sun,  9 Dec 2018 00:00:00 +0000</pubDate><dc:creator>Michal &apos;vorner&apos; Vaner</dc:creator></item><item><title>encoding_rs: a Web-Compatible Character Encoding Library in Rust</title><link>https://hsivonen.fi/encoding_rs/</link><description><![CDATA[encoding_rs is a high-decode-performance, low-legacy-encode-footprint and high-correctness implementation of the WHATWG Encoding Standard written in Rust. In Firefox 56, encoding_rs replaced uconv as the character encoding library used in Firefox. This wasn’t an addition of a component but an actual replacement: uconv was removed when encoding_rs landed. This writeup covers the motivation and design of encoding_rs, as well as some benchmark results.]]></description><guid isPermaLink="false">62aed63f-688e-45cd-9d1e-5247b3cbeae3</guid><pubDate>Mon,  3 Dec 2018 00:00:00 +0000</pubDate><dc:creator>Henri Sivonen</dc:creator></item><item><title>Writing MapReduce Jobs Using Rust and Efflux</title><link>https://whitfin.io/writing-mapreduce-jobs-using-rust/</link><description><![CDATA[During my work life, I spend a lot of time working with MapReduce-style workflows, particularly with Hadoop infrastructure. A lot of this work is spent with larger amounts of data in order to implement the batch layer of the Lambda architecture. Due to this, the largest concern is that the behaviour is consistent across both the batch layer and the realtime layer - naturally you wouldn't want sporadic behaviour across the two. The easiest way to do this is to share code across the layers, to avoid having to keep implementations in sync. We have recently been working with Rust, which has been a little difficult to integrate with Hadoop MapReduce flows due to the fact it's mainly written in Java. It's because of this that I began to work on a small library named Efflux. It's designed as a very small interface to the MapReduce pattern, and implemented in Rust to allow us to share code across the batch layer easily.]]></description><guid isPermaLink="false">00a3f85a-45c7-42b3-8fac-605dcb945229</guid><pubDate>Wed, 28 Nov 2018 07:00:49 +0000</pubDate><dc:creator>Isaac Whitfield</dc:creator></item><item><title>Thessaloniki GNOME+Rust Hackfest 2018</title><link>https://people.gnome.org/~federico/blog/thessaloniki-gnome-rust-2018.html</link><description><![CDATA[A couple of weeks ago we had the fourth GNOME+Rust hackfest, this time in Thessaloniki, Greece.  We held the hackfest at the CoHo coworking space, a small, cozy office between the University and the sea. Every such hackfest I am overwhelmed by the kind hackers who work on [gnome-class], the code generator for GObject implementations in Rust.]]></description><guid isPermaLink="false">7828aada-388f-4b7b-bac1-24de2e65cf6a</guid><pubDate>Tue, 27 Nov 2018 17:37:31 -0600</pubDate><dc:creator>Federico Mena Quintero</dc:creator></item><item><title>Rust+GNOME Hackfest #4</title><link>http://antoyo.ml/rust-gnome-hackfest-thessaloniki</link><description><![CDATA[Less than 2 weeks ago, I was working on improving the integration of Rust with GNOME libraries at the fourth Hackfest, which happened this time in Thessaloniki.]]></description><guid isPermaLink="false">c9feb6f2-ba42-42ca-a0a3-dc37f4ce69ff</guid><pubDate>Sun, 25 Nov 2018 00:00:00 +0000</pubDate><dc:creator>Antoni Boucher</dc:creator></item><item><title>Implementing an EBNF grammar in pest</title><link>https://compenguy.github.io/hobbies/rust/ebnf-to-pest.html</link><description><![CDATA[A recent project has led me to have a go at writing an XML parser. I thought I’d document my experiences using pest to implement a lexer using the EBNF-esque formal grammar.]]></description><guid isPermaLink="false">fd9c743c-fb89-4e75-8a46-a837c02174a1</guid><pubDate>Thu, 22 Nov 2018 05:46:00 +1100</pubDate><dc:creator>Will Page</dc:creator></item><item><title>Wait-Free Per-Object Thread-Local Storage</title><link>https://bzim.gitlab.io/blog/posts/wait-free-per-object-thread-local-storage.html</link><description><![CDATA[In this post, I present a wait-free thread-local storage using the Rust language.]]></description><guid isPermaLink="false">3c9dc7f2-978e-4663-900e-8a49c10bf57f</guid><pubDate>Sun, 18 Nov 2018 00:00:00 +0000</pubDate><dc:creator>Bruno Corrêa Zimmermann</dc:creator></item><item><title>Introducing pest into glsl and hindsight about nom vs. pest (part 2)</title><link>https://phaazon.net/blog/glsl-pest-part-2</link><description><![CDATA[This is the second article about my experience at supporting pest in my glsl crate – without, for now, removing the nom parser.]]></description><guid isPermaLink="false">84353bd7-6977-4894-883f-b917ccef0b45</guid><pubDate>Sat, 17 Nov 2018 20:40:00 +0000</pubDate><dc:creator>Dimitri Sabadie</dc:creator></item></channel></rss>