{
  "version": "https://jsonfeed.org/version/1",
  "title": "Read Rust - Crates",
  "home_page_url": "https://readrust.net/",
  "feed_url": "https://readrust.net/crates/feed.json",
  "description": "Crates posts on Read Rust",
  "author": {
    "name": "Wesley Moore",
    "url": "http://www.wezm.net/"
  },
  "items": [
    {
      "id": "2e4df02b-88e0-4510-851a-d1dce6014568",
      "title": "Configuration envy",
      "content_text": "For many of my use cases for running Rust applications, storing configuration in file format is less attractive as I‚Äôm typically running Rust inside docker containers and container orchestrators typically encourage the use of standard interfaces like the env for configuration. So I pondered ü§î, ‚ÄúWhat if I could treat my program‚Äôs env parameterization with the same level of typing I treat my functions and enclosing types with while getting everything one get‚Äôs from using serde for free?‚Äù That would be the bee‚Äôs knees üêù . Enter: envy.",
      "url": "https://medium.com/@softprops/configuration-envy-a09584386705",
      "date_published": "2018-10-16T04:17:18.209+00:00",
      "author": {
        "name": "Doug Tangren",
        "url": "https://medium.com/@softprops"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "11700b19-9b9f-44c3-9708-2c4cd7f0d721",
      "title": "Reflections on Implementing the ndarray-csv Crate",
      "content_text": "Recently, I wrote ndarray-csv, a Rust crate for converting between CSV files and 2D arrays. There are already crates for CSV and arrays, so how exciting could this possibly be? Actually, there was a lot more to it than I had thought: although it started out as a two-hour project, I ended up rewriting the entire thing three times!",
      "url": "https://paulkernfeld.com/2018/10/13/ndarray-csv-reflections.html",
      "date_published": "2018-10-13T00:00:00+00:00",
      "author": {
        "name": "Paul Kernfeld",
        "url": "https://paulkernfeld.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "a708e2c2-f0bd-4691-88c0-d004bedd667a",
      "title": "pest Parser 2.0 Released",
      "content_text": "pest is a general purpose parser written in Rust with a focus on accessibility, correctness, and performance. It uses parsing expression grammars (or PEG) as input, which are similar in spirit to regular expressions, but which offer the enhanced expressivity needed to parse complex languages. ",
      "url": "https://pest.rs/",
      "date_published": "2018-10-04T00:00:00+00:00",
      "author": {
        "name": "Drago»ô Tiselice",
        "url": "https://github.com/dragostis"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "2e26b090-21b9-42e2-9ac5-9664e79af88e",
      "title": "Merlin: flexible, composable transcripts for zero-knowledge proofs",
      "content_text": "Merlin is a small Rust library that performs the Fiat-Shamir transformation in software, maintaining a STROBE-based transcript of the proof protocol and allowing the prover to commit messages to the transcript and compute challenges bound to all previous messages. It also provides a transcript-based RNG for use by the prover, generalizing ‚Äúdeterministic‚Äù and ‚Äúsynthetic‚Äù nonces to arbitrarily complex zero-knowledge protocols.",
      "url": "https://medium.com/@hdevalence/merlin-flexible-composable-transcripts-for-zero-knowledge-proofs-28d9fda22d9a",
      "date_published": "2018-09-28T21:07:20.750+00:00",
      "author": {
        "name": "Henry de Valence",
        "url": "https://medium.com/@hdevalence"
      },
      "tags": [
        "Crates",
        "Security"
      ]
    },
    {
      "id": "96405556-ac98-433a-a0f8-c3de068e47d3",
      "title": "‚Äòorion‚Äô - yet another attempt at pure-Rust cryptography",
      "content_text": "orion is another attempt at cryptography implemented in pure Rust. Its main focus is usability. This is in part achieved by providing a thorough documentation of the library. High-level abstractions are also provided, which are an attempt at guiding the users towards safe usage of the lower-level functionality of the library.",
      "url": "https://brycx.github.io/2018/09/25/orion-pure-rust-crypto-lib.html",
      "date_published": "2018-09-25T00:00:00+00:00",
      "author": {
        "name": "brycx",
        "url": "https://brycx.github.io/"
      },
      "tags": [
        "Crates",
        "Security"
      ]
    },
    {
      "id": "956dab4d-a04e-4278-bb20-906f4eac7a82",
      "title": "GStreamer Rust bindings 0.12 and GStreamer Plugin 0.3 release",
      "content_text": "After almost 6 months, a new release of the GStreamer Rust bindings and the GStreamer plugin writing infrastructure for Rust is out. As usual this was coinciding with the release of all the gtk-rs crates to make use of all the new features they contain.",
      "url": "https://coaxion.net/blog/2018/09/gstreamer-rust-bindings-0-12-and-gstreamer-plugin-0-3-release/",
      "date_published": "2018-09-10T11:41:59+00:00",
      "author": {
        "name": "Sebastian Dr√∂ge",
        "url": "https://coaxion.net/blog/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "d1f041f8-f77b-404b-a776-5615afef85f4",
      "title": "GIR support in gnome-class",
      "content_text": "Recently I've been working again in the rust port of libgepub, libgepub is C code, but in the rust-migration branch almost all the real functionality is done with rust and the GepubDoc class is a GObject wrapper around that code. For this reason I was thinking about to use gnome-class to implement GepubDoc. Gnome-class is a rust lib to write GObject code in rust that's compatible with the C binary API so then you can call this new GObject code written with gnome-class from C. So, libgepub is the excuse to start to implement GIR in gnome-class.",
      "url": "http://danigm.net/gnome-class-gir.html",
      "date_published": "2018-09-01T00:00:00+02:00",
      "author": {
        "name": "danigm",
        "url": "http://danigm.net/category/blog.html"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "9572581f-4d30-4abb-9aa8-8f7842b37117",
      "title": "Sonnerie: A simple timeseries database",
      "content_text": "Sonnerie is a time-series database. Map a timestamp to a floating-point value. Store multiple of these series in a single database. Insert tens of millions of samples in minutes, on rotational media.",
      "url": "https://github.com/njaard/sonnerie",
      "date_published": "2018-09-08T00:00:00+00:00",
      "author": {
        "name": "Kalle Samuels",
        "url": "https://github.com/njaard"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "919b55ea-6ff7-4893-8c6f-1bd17b6cbab2",
      "title": "Announcing Spirit",
      "content_text": "Spirit is a crate that cuts down on boilerplate when creating unix daemons, with support for live configuration reloading.",
      "url": "https://vorner.github.io/2018/09/03/Announcing-Spirit.html",
      "date_published": "2018-09-03T00:00:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "99ecbdf0-983f-42d8-850a-5e0532770f17",
      "title": "Introducing windows-acl: working with ACLs in Rust",
      "content_text": "Access Control Lists (ACLs) are an integral part of the Microsoft Windows security model. In addition to controlling access to secured resources, they are also used in sandboxing, event auditing, and specifying mandatory integrity levels. They are also exceedingly painful to programmatically manipulate, especially in Rust. Today, help has arrived ‚Äî we released windows-acl, a Rust crate that simplifies the manipulation of access control lists on Windows.",
      "url": "https://blog.trailofbits.com/2018/08/23/introducing-windows-acl-working-with-acls-in-rust/",
      "date_published": "2018-08-23T11:50:39+00:00",
      "author": {
        "name": "Trail of Bits",
        "url": "https://blog.trailofbits.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "d6f7c587-36f5-4276-8b5b-60cd8d857606",
      "title": "History of the Rand crate",
      "content_text": "I wrote this bit to give a some background about why Rand looks the way it does, and why it is time to make some changes. The new release, Rand 0.5, is getting almost ready fro release. Also I hope it is a bit entertaining to read about the history in combination with early Rust.",
      "url": "https://www.reddit.com/r/rust/comments/87qy40/history_of_the_rand_crate/",
      "date_published": "2018-03-28T21:52:43+11:00",
      "author": {
        "name": "u/pitdicker",
        "url": "https://www.reddit.com/user/pitdicker"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "e53853b1-a7ca-4ffc-bf71-510ed37ea402",
      "title": "Toykio, a toy event loop",
      "content_text": "In this blog post I‚Äôd like to present toykio, a simple futures executor intended for learning about how executors with an event loop work. Toykio only provides a very minimal feature set: An event loop and TCP streams and listeners. However, it turns out that due to the fact that futures are composable, this is enough to build complex clients and servers.",
      "url": "https://rust-lang-nursery.github.io/futures-rs/blog/2018/08/17/toykio.html",
      "date_published": "2018-08-17T00:00:00+00:00",
      "author": {
        "name": "Alexander Polakov",
        "url": "https://rust-lang-nursery.github.io/futures-rs/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "2105e8ca-6037-4dfa-86f7-644bdbec71bd",
      "title": "Futures 0.3.0-alpha.3",
      "content_text": "A compatibility layer between 0.3 an 0.1 was developed. It is now possible to convert an 0.3 future into an 0.1 future and vice versa. Similar conversions for streams and sinks are also supported. Additionally, it is now possible to run 0.3 futures and async functions on Tokio‚Äôs executor. We have a dedicated blog post coming up that explains this in more detail.",
      "url": "https://rust-lang-nursery.github.io/futures-rs/blog/2018/08/15/futures-0.3.0-alpha.3.html",
      "date_published": "2018-08-15T00:00:00+00:00",
      "author": {
        "name": "Josef Brandl",
        "url": "https://rust-lang-nursery.github.io/futures-rs/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "e9ddc1eb-5ab9-4f23-8b9a-a41cea991044",
      "title": "Tower Web 0.2 ‚Äî Now 100% comment attribute free",
      "content_text": "The short version is, Tower Web 0.2 was just released and regular Rust attributes are now used instead of magic comments. The doc comment is replaced with #[get(\"/\")]. This is thanks to Rust macro wizard David Tolnay. I also thought that it would be best to immediately push out 0.2 and then we can all pretend 0.1 didn‚Äôt happen.",
      "url": "https://medium.com/@carllerche/tower-web-0-2-now-100-comment-attribute-free-3ed0633e47e5",
      "date_published": "2018-08-14T16:22:13.075+00:00",
      "author": {
        "name": "Carl Lerche",
        "url": "https://medium.com/@carllerche"
      },
      "tags": [
        "Web and Network Services",
        "Crates"
      ]
    },
    {
      "id": "02a5f7b7-0114-440d-9be0-d5aaf77bfa65",
      "title": "PrettySize for rust",
      "content_text": "We‚Äôve just published a rust port of our PrettySize.NET library, now available via cargo and github. Like its .NET predecessor, PrettySize-rs aims to provide a comprehensive API for dealing with file sizes, covering both manipulation and human-readable formatting.",
      "url": "https://neosmart.net/blog/2018/prettysize-for-rust/",
      "date_published": "2018-08-11T20:56:39+00:00",
      "author": {
        "name": "Mahmoud Al-Qudsi",
        "url": "https://neosmart.net/blog/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "577e9c57-0455-41c6-9711-be71bf55e550",
      "title": "intl_pluralrules: A Rust Crate for Handling Plural Forms with CLDR Plural Rules",
      "content_text": "intl_pluralrules is a Rust crate, built to handle pluralization. Pluralization is the foundation for all localization and many internationalization APIs. With the addition of intl_pluralrules, any locale-aware date-, time- or unit-formatting (‚Äú1 second‚Äù vs ‚Äú2 seconds‚Äù) and many other pluralization-dependent APIs can be added to Rust.",
      "url": "https://blog.mozilla.org/l10n/2018/08/03/intl_pluralrules-a-rust-crate-for-handling-plural-forms-with-cldr-plural-rules/",
      "date_published": "2018-08-03T23:30:19+00:00",
      "author": {
        "name": "Kekoa Riggin",
        "url": "https://blog.mozilla.org/l10n/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "2182c554-41eb-4ee7-a1de-11eb90a8223d",
      "title": "A small custom Bool Type in Diesel",
      "content_text": "I‚Äôve been working with diesel and serde. I use diesel for my postgres datastore, and serde for serializing/deserializing data to the web. Recently I came across a situation where I needed to define my type in diesel as well as implement deserialize in serde. The example below is a fairly simple so it makes for a good example to share so others can learn (and so I can remember how all this works next time I need it).",
      "url": "https://noyez.gitlab.io/post/2018-08-05-a-small-custom-bool-type-in-diesel/",
      "date_published": "2018-08-05T00:00:00+00:00",
      "author": {
        "name": "Noyez",
        "url": "https://noyez.gitlab.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "a3f0bd42-0a42-4156-9fd6-74aebe5f0465",
      "title": "nphysics: 2D and 3D real-time physics engine",
      "content_text": "I‚Äôm excited to announce the brand new website/user-guide for the nphysics2d and nphysics3d crates: pure-rust 2D and 3D real-time physics engines with rigid bodies and joints! Online wasm-based demos are also provided (see for example the Multibody joints 34 demo).",
      "url": "http://nphysics.org/",
      "date_published": "2018-07-29T03:46:07+10:00",
      "author": {
        "name": "S√©bastien Crozet",
        "url": "http://nphysics.org/"
      },
      "tags": [
        "Games and Graphics",
        "Crates"
      ]
    },
    {
      "id": "b5717efe-ad7b-4b02-8554-aba801aff909",
      "title": "Amethyst 0.8 has been released!",
      "content_text": "With a brand new tutorial and a ton of new features, including prefabs, controller support, MP3 audio, localisation and an even better ergonomics!",
      "url": "https://www.amethyst.rs/blog/release-0-8/",
      "date_published": "2018-08-05T00:00:00+00:00",
      "author": {
        "name": "Moxinilian (Th√©o Degioanni)",
        "url": "https://www.amethyst.rs/blog"
      },
      "tags": [
        "Games and Graphics",
        "Crates"
      ]
    },
    {
      "id": "c1718910-2677-4da4-a45f-a8bd055fe075",
      "title": "Gutenberg 0.4.0: custom taxonomies, image processing and more",
      "content_text": "Gutenberg 0.4.0 is out with custom taxonomies, image processing, improved shortcodes and more.",
      "url": "https://www.vincentprouillet.com/blog/releasing-gutenberg-0-4-0/",
      "date_published": "2018-08-04T00:00:00+00:00",
      "author": {
        "name": "Vincent Prouillet",
        "url": "https://www.vincentprouillet.com/blog/"
      },
      "tags": [
        "Tools and Applications",
        "Crates"
      ]
    },
    {
      "id": "0a171d26-74e1-491c-befd-e02ac528c1ff",
      "title": "#[derive(Debug)] on serde steroids",
      "content_text": "In this post I'd like to introduce a serdebug helper which is a drop-in replacement for #[derive(Debug)] with some of the advanced features that serde can provide.",
      "url": "https://rreverser.com/derive-serdebug/",
      "date_published": "2018-07-31T16:00:45+00:00",
      "author": {
        "name": "Ingvar Stepanyan",
        "url": "https://rreverser.com/#open"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "81096070-a563-47a0-8f09-2e5fb3c1b984",
      "title": "Sequoia, a new OpenPGP implementation",
      "content_text": "This past fall, three former GnuPG developers began working on a new OpenPGP implementation in Rust called Sequoia. As it‚Äôs starting to shape up and become useful, I feel now is a good time to announce the project to the larger Rust community, and hopefully get some feedback before our first release.",
      "url": "https://www.reddit.com/r/rust/comments/93mng5/ann_sequoia_a_new_openpgp_implementation/",
      "date_published": "2018-08-01T16:50:12+10:00",
      "author": {
        "name": "/u/nwalfield",
        "url": "https://sequoia-pgp.org/"
      },
      "tags": [
        "Tools and Applications",
        "Crates"
      ]
    },
    {
      "id": "55adde79-edfa-433f-8c4f-40f2baee7cd9",
      "title": "warp",
      "content_text": "Over the past several months, I‚Äôve been working a web framework in Rust. I wanted to make use of the new hyper 0.12 changes, so the framework is just as fast, is asynchronous, and benefits from all the improvements found powering Linkerd. More importantly, I wanted there to be a reason for making a new framework; it couldn‚Äôt just be yet another framework with the only difference being I‚Äôve written it. Instead, the way this framework is used is quite different than many that exist. In doing so, it expresses a strong opinion, which might not match your previous experiences, but I believe it manages to do something really special.\n\nI‚Äôm super excited to reveal warp, a joint project with @carllerche.",
      "url": "http://seanmonstar.com/post/176530511587/warp",
      "date_published": "2018-08-01T00:00:00+00:00",
      "author": {
        "name": "Sean McArthur",
        "url": "http://seanmonstar.com/"
      },
      "tags": [
        "Web and Network Services",
        "Crates"
      ]
    },
    {
      "id": "e29e550b-7c05-4625-9a81-513b316b5675",
      "title": "Futures 0.3.0-alpha.2",
      "content_text": "Several new changes while working towards 0.3.",
      "url": "https://rust-lang-nursery.github.io/futures-rs/blog/2018/07/30/futures-0.3.0-alpha.2.html",
      "date_published": "2018-07-30T00:00:00+00:00",
      "author": {
        "name": "Josef Brandl",
        "url": "http://rust-lang-nursery.github.io/futures-rs/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "e0622344-66a9-4b93-a59f-1b5250ba8c98",
      "title": "Using C libraries in Rust: make a sys crate",
      "content_text": "Using C libraries in a portable way involves a bit of work: finding the library on the system or building it if it's not available, checking if it is compatible, finding C headers and converting them to Rust modules, and giving Cargo correct linking instructions. Often every step of this is tricky, because operating systems, package managers and libraries have their unique quirks that need special handling.\n\nFortunately, all this work can be done once in a build script, and published as a <insert library name>-sys Rust crate. This way other Rust programmers will be able to use the C library without having to re-invent the build script themselves.",
      "url": "https://kornel.ski/rust-sys-crate",
      "date_published": "2018-07-30T00:00:00+00:00",
      "author": {
        "name": "Kornel",
        "url": "https://kornel.ski/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "e5caa9df-4d3f-46be-a8ce-79369f0cad32",
      "title": "Wayland-rs 0.21: Pure Rust implementation",
      "content_text": "wayland-rs is a set of crates providing generic APIs to manipulate the Wayland protocol, successor of X11 for linux windowing.\n\nHere I am finally, after having hinted at the possibility and finally taken the time to write and merge quite an epic pull request, I can finally say it: wayland-rs is now a pure rust implementation of the protocol, rather than a crate of bindings to the wayland system C libraries.",
      "url": "https://smithay.github.io/wayland-rs-v-0-21.html",
      "date_published": "2018-07-18T22:00:00+02:00",
      "author": {
        "name": "Victor Berger",
        "url": "https://smithay.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "2a8864ba-0872-45d2-89f4-87e9f368374b",
      "title": "Futures 0.3.0-alpha.1",
      "content_text": "Welcome to the inaugural post of the new futures-rs blog!\n\nAfter several months of work, we‚Äôre happy to announce an alpha release of the new edition of future-rs, version 0.3. The immediate goal of this work is to support async/await notation (with borrowing) in Rust itself, which has entailed significant changes to the futures crate.",
      "url": "https://rust-lang-nursery.github.io/futures-rs/blog/2018/07/19/futures-0.3.0-alpha.1.html",
      "date_published": "2018-07-19T17:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "https://rust-lang-nursery.github.io/futures-rs/"
      },
      "tags": [
        "Language",
        "Crates"
      ]
    },
    {
      "id": "9c9c6dda-6538-4088-8123-e1ad213082e5",
      "title": "What I Learned: Porting Dateutil Parser to Rust",
      "content_text": "Hi. I‚Äôm Bradlee. I‚Äôve mostly been a lurker in Rust for a while, making a couple small contributions here and there. So launching dtparse feels like nice step towards becoming a functioning member of society. But not too much, because then you know people start asking you to pay bills, and ain‚Äôt nobody got time for that.\n\nBut I built dtparse, and you can read about my thoughts on the process. Or don‚Äôt. I won‚Äôt tell you what to do with your life (but you should totally keep reading).",
      "url": "https://speice.io/2018/06/dateutil-parser-to-rust.html",
      "date_published": "2018-06-25T00:00:00+00:00",
      "author": {
        "name": "Bradlee Speice",
        "url": "https://speice.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "989d2bb2-c78b-4844-92ab-45509164c182",
      "title": "Zapper: A Very Fast Templating Engine",
      "content_text": "Thirty times faster than Handlebars, half the features! I am introducing a new templating engine for Rust that is designed to be robust and very fast! Why Zapper? Runtime templating is amazing, since you can reload templates on the fly or even allow users to provide their own templates, yet runtime templating engines are rarely fast. Templates that are statically compiled into your application can be super fast, but are completely inflexible. Recompiling and restarting your application just to change a template is especially boring. Zapper combines the flexibility of runtime templating with great performance!",
      "url": "https://ceres1.space/posts/zapper/",
      "date_published": "2018-06-25T19:28:22-07:00",
      "author": {
        "name": "Josh Leverette",
        "url": "https://ceres1.space/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "faf1a345-9eaf-4d00-a7f7-9fa3afaa51ac",
      "title": "Better HTTP Upgrades with hyper",
      "content_text": "Better HTTP Upgrades with hyper It‚Äôs been possible to handle HTTP Upgrades (like Websockets) in hyper if you made use of the low-level APIs in the server and client, but it wasn‚Äôt especially nice to...",
      "url": "http://seanmonstar.com/post/175280388657/better-http-upgrades-with-hyper",
      "date_published": "2018-06-26T00:00:00+00:00",
      "author": {
        "name": "Sean McArthur",
        "url": "http://seanmonstar.com/"
      },
      "tags": [
        "Web and Network Services",
        "Crates"
      ]
    },
    {
      "id": "ced93c25-32fb-4e74-a5e4-5fb7cd60e8ee",
      "title": "Building an Event Sourcing Crate for Rust",
      "content_text": "In one of my recent blog posts, I talked about Event Sourcing with Aggregates in Rust. In that post, I was just beginning to explore how the Rust language and its strongly typed native data structures would allow me to express event sourcing concepts and primitives. I have now created an initial version of an Event Sourcing crate that you can explore on crates.io",
      "url": "https://medium.com/@KevinHoffman/building-an-event-sourcing-crate-for-rust-2c4294eea165",
      "date_published": "2018-06-25T13:30:42.993+00:00",
      "author": {
        "name": "Kevin Hoffman",
        "url": "https://medium.com/@KevinHoffman"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "afc3d2f1-e848-4c25-af60-89cf7209b3ba",
      "title": "Writing Python Extensions In Rust Using PyO3",
      "content_text": "I've been writing some code in Rust recently, and I thought it would be cool if I could take some of this Rust code and provide it as a native extension that I can call from Python. It turns out there are some amazing tools like PyO3 that make it easy to write fully featured Python extensions in Rust, with considerably less effort than writing a CPython extension manually.\n\nTo test out PyO3 I wrote a small Python extension in Rust, and I thought I would share some of the tips and tricks I encountered in getting this going. This post aims to serve as a quick tutorial showing how to write extensions in Rust, talking about why you might want to use something more powerful than just exposing a C library called using CFFI, and how PyO3 lets you write Python aware extensions in Rust. ",
      "url": "https://www.benfrederickson.com/writing-python-extensions-in-rust-using-pyo3/",
      "date_published": "2018-06-21T00:00:00-07:00",
      "author": {
        "name": "Ben Frederickson",
        "url": "https://www.benfrederickson.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "31acdf03-3f59-4102-81ba-edafd6f2cfad",
      "title": "Fast and Simple Rendering in Rust using Proc Macros",
      "content_text": "I‚Äôve been working on a project called Thruster recently, and needed a way that a developer could reasonably use templates. Thruster is a middleware based web server written in Rust (get it, th-rust-er? I‚Äôm working on my tight 5 for amateur night at The Apollo,) and as such, I needed a way to load HTML templates and insert variables into them in a performant way. Rather than poking around the numerous existing libraries and choosing one made by someone I don‚Äôt know‚Ää‚Äî‚Äästranger danger!‚Ää‚Äî‚ÄäI decided to make it myself. This article is about that journey, the unbelievably thrilling adventures of writing my first proc_macro_derive in Rust.",
      "url": "https://medium.com/@MertzAlertz/fast-and-simple-rendering-in-rust-using-proc-macros-f0d919eb6475",
      "date_published": "2018-06-19T13:22:54.045+00:00",
      "author": {
        "name": "Pete Mertz",
        "url": "https://medium.com/@MertzAlertz"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "edd88db5-3f05-4171-9159-de17a3a4db8a",
      "title": "Let's Talk About Vector Graphics (In Rust)",
      "content_text": "I gave a talk about lyon at RustFest Paris. This post is the introduction of the talk, wherein I introduce vector graphics and try to get the audience somewhat excited about it. Things will get technical in the follow-up posts.",
      "url": "https://nical.github.io/posts/rustfest-paris-01.html",
      "date_published": "2018-06-18T00:00:00+02:00",
      "author": {
        "name": "Nical",
        "url": "https://nical.github.io/index.html"
      },
      "tags": [
        "Crates",
        "Games and Graphics"
      ]
    },
    {
      "id": "ff081914-cb16-4004-bc20-53e494477b8c",
      "title": "Building better compression together with¬†DivANS",
      "content_text": "Compressing your files is a good way to save space on your hard drive. At Dropbox‚Äôs scale, it‚Äôs not just a good idea; it is essential. Even a 1% improvement in compression efficiency can make a huge difference. That‚Äôs why we conduct research into lossless compression algorithms that are highly tuned for certain classes of files and storage, like Lepton for jpeg images, and Pied-Piper-esque lossless video encoding. For other file types, Dropbox currently uses the zlib compression format, which saves almost 8% of disk storage.\n\nWe introduce DivANS, our latest open-source contribution to compression, in this blog post.",
      "url": "https://blogs.dropbox.com/tech/2018/06/building-better-compression-together-with-divans/",
      "date_published": "2018-06-19T16:00:24+00:00",
      "author": {
        "name": "Daniel Reiter Horn and Jongmin Baek",
        "url": "https://blogs.dropbox.com/tech/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "4548e0ef-697b-414c-8bf5-9a63a707bafb",
      "title": "A Trick For Test Maintenance",
      "content_text": "This is a post about an interesting testing technique which feels like it should be well known. However, I haven‚Äôt seen it mentioned anywhere. I don‚Äôt even have a good name for it, I‚Äôve semi-discovered it in the wild. If you know how this thing is called, please leave a comment!",
      "url": "https://matklad.github.io/2018/06/18/a-trick-for-test-maintenance.html",
      "date_published": "2018-06-18T15:00:16+00:00",
      "author": {
        "name": "Aleksey Kladov",
        "url": "https://matklad.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "27c8b7ed-32ab-4390-8be8-58678541dfb8",
      "title": "Tarpaulin Past Present Future",
      "content_text": "Tarpaulin (or cargo-tarpaulin) is a code coverage tool for Rust. Last year was pretty busy with the launch of the project and the rush of issues as people started to use it so this is just a chance to look at what‚Äôs new with version 0.6.0 and what‚Äôs planned for the rest of this year.",
      "url": "https://xd009642.github.io/2018/06/11/Tarpaulin-past-present-future.html",
      "date_published": "2018-06-11T00:00:00+00:00",
      "author": {
        "name": "xd009642",
        "url": "https://xd009642.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "f98c539d-bf5c-4329-a4b2-bba3c4816350",
      "title": "Integrating QML and Rust: Creating a QMetaObject at Compile Time",
      "content_text": "In this blog post, I would like to present a research project I have been working on: Trying to use QML from Rust, and in general, using a C++ library from Rust. The project is a Rust crate which allows to create QMetaObject at compile time from pure Rust code. It is available here: https://github.com/woboq/qmetaobject-rs",
      "url": "https://woboq.com/blog/qmetaobject-from-rust.html",
      "date_published": "2018-06-07T00:00:00+00:00",
      "author": {
        "name": "Olivier Goffart",
        "url": "https://woboq.com/blog/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "01dd6aee-aa4b-46b9-a4dc-5d2550a96356",
      "title": "Crates.rs ‚Äî a new, faster crate index website",
      "content_text": "Crates.rs, an alternative opinionated front-end to crates.io:\n\nIt‚Äôs fast.\n\nAll readmes are displayed whenever possible, and if there‚Äôs no or poor readme, doc comments are shown too.\n\nIt combines information from multiple sources, e.g. byline is a compact amalgamation of Cargo.toml, crates.io, and GitHub contributors, so you get an idea who wrote the code even if authors forgot to keep Cargo.toml up to date.\n\nCrate popularity is displayed as top-N position in its most relevant category, e.g. ‚Äú#5 in Cryptography‚Äù, which is more meaningful than absolute download numbers.\n\nOptional dependencies display which feature or platform they‚Äôre for.\n\nVersion history is summarized to help see at a glance whether a crate gets regular updates and how often it has breaking changes.\n\nRecognizes sys crates even if they‚Äôre not called -sys and shows when build.rs is used.\n\nCategory pages fit more crates on screen despite looking less cluttered and having easier to read descriptions.\n\nAll categories and their representative crates are right there on the homepage.\n\nSyntax highlighting everywhere, including code blocks.\n\nEverything works without JS and gets indexed by search engines, so I‚Äôm hoping the site will help find crates.",
      "url": "https://crates.rs/index",
      "date_published": "2018-06-04T23:27:00+00:00",
      "author": {
        "name": "Kornel",
        "url": "https://kornel.ski/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "9bf3f488-ace2-43b6-9f6b-3071241f7ed2",
      "title": "hyper v0.12",
      "content_text": "Today sees the release of hyper v0.12.0, a fast and correct HTTP library for the Rust language.\n\nThis release adds support for several new features, while taking the opportunity to fix some annoyances, and improve the extreme speeds!",
      "url": "http://seanmonstar.com/post/174480374517/hyper-v012",
      "date_published": "2018-06-01T00:00:00+00:00",
      "author": {
        "name": "Sean McArthur",
        "url": "http://seanmonstar.com/"
      },
      "tags": [
        "Web and Network Services",
        "Crates"
      ]
    },
    {
      "id": "d7340b81-5e94-4123-b830-c5cbbfa154d2",
      "title": "HTTP Crate with URL Support & a Simple HTTP Client",
      "content_text": "While the http crate generally has a great API I have been unsatisfied how it handles URLs. To create a HTTP request a full URL is needed with a scheme (http/https), authority (example.org) and a path (/search?q=rust) but http does enforce this and allows you to only state the path. This means both clients and servers are either unable to determine protocol and and authority information or have to do this manually.",
      "url": "https://pyfisch.org/blog/http-with-url/",
      "date_published": "2018-06-01T00:00:00+00:00",
      "author": {
        "name": "Pyfisch",
        "url": "https://pyfisch.org/blog/"
      },
      "tags": [
        "Web and Network Services",
        "Crates"
      ]
    },
    {
      "id": "d517cda7-1102-49bb-ab34-d14f5f0d09c0",
      "title": "Learn Rust by project",
      "content_text": "More than a year ago a friend of mine wanted to learn a bit more about Rust by trying out a project. He had a nice project in mind which suits Rust quite well I think. For fun I joined his effort and created an implementation at the same time as he did, discussing and comparing along the way. In this post I‚Äôll tell you about the project specifics, but the point of the post is more an encouragement. If you‚Äôve read about Rust before but haven‚Äôt tried it yet, find a small project like the one below, and learn Rust in a fun and hands-on way yourself. It‚Äôs a great programming language, I highly recommend it.",
      "url": "http://blog.jeffsmits.net/compsci/2018/04/30/learn-rust-by-project/",
      "date_published": "2018-04-30T00:00:00+00:00",
      "author": {
        "name": "Jeff Smits",
        "url": "http://blog.jeffsmits.net/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "600945e6-9cca-43fc-abe3-8b39f5eb1766",
      "title": "nom 4.0: faster, safer, simpler parsers",
      "content_text": "It took nearly 6 months of development and the library went through nearly 5 entire rewrites. Compare that to previous major releases, which took a month at most to do. But it was worth it! This new release cleans up a lot of old bugs and unintuitive behaviours, simplifies some common patterns, is faster, uses less memory, gives better errors, but the way parsers are written stay the same. It‚Äôs like an entirely new engine under the same body work!",
      "url": "http://unhandledexpression.com/general/2018/05/14/nom-4-0-faster-safer-simpler-parsers.html",
      "date_published": "2018-05-14T13:00:00+02:00",
      "author": {
        "name": "Geoffroy Couprie",
        "url": "https://unhandledexpression.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "df6d6cbf-58fc-49e6-a582-446c255a3d39",
      "title": "gtk-test - A crate for testing GTK UIs",
      "content_text": "Currently, testing UIs is difficult, but with gtk-test you can test basically everything UI-related way more simply.",
      "url": "http://gtk-rs.org/blog/2018/05/02/who-talked-about-testing.html",
      "date_published": "2018-05-02T00:00:00+00:00",
      "author": {
        "name": "Gtk-rs",
        "url": "http://gtk-rs.org/blog"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "83c972be-a658-4858-9277-474eebee81a1",
      "title": "Introducing Sentry for Rust",
      "content_text": "As happy Rust users ourselves, it makes us even happier to be able to say that we now have a Sentry Rust SDK. This means you and your Fungiculture can now report panics, failures, and other types of incidents to Sentry.\n\nNot only is the SDK new and fancy, it is also one of the first ones that follows our new API guidelines for Sentry SDKs, which makes it even newer and fancier than you might normally expect.",
      "url": "https://blog.sentry.io/2018/05/01/sentry-for-rust",
      "date_published": "2018-05-01T00:00:00+00:00",
      "author": {
        "name": "Armin Ronacher",
        "url": "https://blog.sentry.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "bcdee764-328b-440f-b1de-d4f4d4c14604",
      "title": "New Tokio release, now with filesystem support",
      "content_text": "It took a bit longer than I had initially hoped (as it always does), but a new Tokio version has been released. This release includes, among other features, a new set of APIs that allow performing filesystem operations from an asynchronous context.",
      "url": "https://tokio.rs/blog/2018-05-tokio-fs/",
      "date_published": "2018-05-02T00:00:00+00:00",
      "author": {
        "name": "Carl Lerche",
        "url": "https://tokio.rs/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "8576f0a6-2866-4ac7-af07-dffd8e4ea019",
      "title": "Rust+GNOME Hackfest #3",
      "content_text": "Last week, I was working on improving the integration of Rust with GNOME libraries at the third Hackfest, which happened this time in Madrid.",
      "url": "http://antoyo.ml/rust-gnome-hackfest-madrid",
      "date_published": "2018-04-24T00:00:00+00:00",
      "author": {
        "name": "Antoni Boucher",
        "url": "http://antoyo.ml/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "ef7fa499-a585-491d-9700-38962a125092",
      "title": "dalek cryptography",
      "content_text": "A suite of cryptographic libraries and protocol implementations, written in the systems programming language Rust, for creating blazingly-fast, production-quality cryptographic applications.",
      "url": "https://dalek.rs/",
      "date_published": "2018-01-24T00:07:02+00:00",
      "author": {
        "name": "isis agora lovecruft",
        "url": "https://dalek.rs/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "318f9d08-d86a-4799-ac08-75014d089475",
      "title": "im - Immutable Data Structures for Rust",
      "content_text": "This library implements several of the more commonly useful immutable data structures for Rust. They rely on structural sharing to keep most operations fast without needing to mutate the underlying data store, leading to more predictable code without necessarily sacrificing performance.",
      "url": "https://docs.rs/im/10.0.0/im/",
      "date_published": "2018-04-06T21:06:00+00:00",
      "author": {
        "name": "Bodil Stokke",
        "url": "http://immutable.rs/"
      },
      "tags": [
        "Computer Science",
        "Crates"
      ]
    },
    {
      "id": "afc97289-36f8-4acb-ab80-28e7770ea126",
      "title": "MesaLink memory-safe and OpenSSL-compatible TLS library",
      "content_text": "MesaLink is a memory-safe and OpenSSL-compatible TLS library. Since 2014, the industry has seen a huge loss due to memory vulnerabilities in TLS stacks, such as the infamous \"Heartbleed\" bug. MesaLink is created with the goal of eliminating memory vulnerabilities in TLS stacks. MesaLink is written in Rust, a programming language that guarantees memory safety. This significantly reduces the attack surfaces, which facilitates auditing and restricting the remaining attack surfaces. MesaLink is cross-platform and provides OpenSSL-compatible APIs. It works seamlessly in desktop, mobile, and IoT devices. With the growth of the ecosystem, MesaLink would also be adopted in the server environment in the future.",
      "url": "https://github.com/mesalock-linux/mesalink",
      "date_published": "2018-04-06T07:00:00+10:00",
      "author": {
        "name": "MesaLock Linux",
        "url": "https://github.com/mesalock-linux"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "0cb16bc7-daff-4747-81e5-d4455d33fc43",
      "title": "HTTP upgrades with hyper",
      "content_text": "The newest release of hyper includes some lower-level connection APIs for both the server and client. Notably, this allows using hyper send and receive HTTP upgrade requests. The most popular of these is Websockets.",
      "url": "http://seanmonstar.com/post/172531530657/http-upgrades-with-hyper",
      "date_published": "2018-04-02T14:34:53-07:00",
      "author": {
        "name": "Sean McArthur",
        "url": "http://seanmonstar.com/"
      },
      "tags": [
        "Web and Network Services",
        "Crates"
      ]
    },
    {
      "id": "effc3ea9-0e61-4b47-ad1b-20782addb1bd",
      "title": "Analysing crates.io data",
      "content_text": "I am learning Clojure for the past one year and I thought making open source contributions is a great way to interact with the community. I made a post previously on using Clojars metadata to analyse JDK 9 and Clojure 1.9 issues that helped me file issues to ensure compatibility. I used the same method here to find the modules that were broken on a nightly version of a rustc due to a recent stabilisation.",
      "url": "https://tirkarthi.github.io/rust/2018/03/30/analyzing-crates-data.html",
      "date_published": "2018-03-30T18:30:29+00:00",
      "author": {
        "name": "Karthikeyan",
        "url": "https://tirkarthi.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "cca40bed-4eaf-46c6-ae72-1e49ed3ef2ad",
      "title": "New Timer implementation in Tokio",
      "content_text": "To close out a great week, there is a new release of Tokio. This release includes a brand new timer implementation.",
      "url": "https://tokio.rs/blog/2018-03-timers/",
      "date_published": "2018-03-30T00:00:00+00:00",
      "author": {
        "name": "Carl Lerche",
        "url": "https://tokio.rs/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "fd8646cf-2689-4bd8-b065-4708388250d2",
      "title": "Announcing the Tokio runtime",
      "content_text": "I‚Äôm happy to announce a new release of Tokio. This release includes the first iteration of the Tokio Runtime.",
      "url": "https://tokio.rs/blog/2018-03-tokio-runtime/",
      "date_published": "2018-03-08T00:00:00+00:00",
      "author": {
        "name": "Carl Lerche",
        "url": "https://tokio.rs/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "067e3ce9-6e69-499c-93f8-a9c4e0f99ce9",
      "title": "Futures 0.2 is nearing release",
      "content_text": "On behalf of the futures-rs team, I‚Äôm very happy to announce that the master branch is now at 0.2: we have a release candidate! Barring any surprises, we expect to publish to crates.io in the next week or two.\n\nYou can peruse the 0.2 API via the hosted crate docs, or dive right in to the master branch. Note that Tokio is not currently compatible with Futures 0.2; see below for more detail.",
      "url": "http://aturon.github.io/2018/02/27/futures-0-2-RC/",
      "date_published": "2018-02-27T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "b079d66f-d08e-4593-80cc-e0060133d12e",
      "title": "Failure 1.0.0 on March 15",
      "content_text": "I‚Äôm planning to release a 1.0.0 version of failure on March 15. Once this happens, I don‚Äôt plan to release any further breaking changes to the failure crate (though maybe someday in the distant future).\nBreaking changes in 1.0 failure is in a somewhat unique position as being a significant part of the public API of other libraries that depend on it. Whether they use the Error struct or derive Fail for a custom error type, this becomes a part of the API they expose to other users.",
      "url": "https://boats.gitlab.io/blog/post/2018-02-22-failure-1.0/",
      "date_published": "2018-02-22T00:00:00+00:00",
      "author": {
        "name": "boats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "a2946d73-a2c7-4d2a-899c-080258552b07",
      "title": "Mutation Testing Rust in Earnest",
      "content_text": "It‚Äôs been a while since I last suggested Mutation Testing in Rust, almost two years ago. Since then I got sidetracked a lot, and later lost interest. Just one more cool project I couldn‚Äôt afford to take on. But as things go, my interest in mutation testing was rekindled, and I decided to give it a shot and do more than blogging about it.",
      "url": "http://llogiq.github.io/2018/02/14/mutagen.html",
      "date_published": "2018-02-14T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "c780f270-e190-4987-aff1-ff20ebe108bf",
      "title": "Improved User Interface 0.2.0 Released!",
      "content_text": "iui, the Improved User Interface crate, has just gotten its 0.2 release. Improved User Interface is a set of safe, idiomatic Rust bindings to platform native GUI libraries (Win32API, Cocoa, and GTK+) via libui and ui-sys. Highlights of this release include: Correct, semantic use of mutability, GTK+ theme application per window, and menu bars and file open/create modal support.",
      "url": "https://www.patreon.com/posts/17016887",
      "date_published": "2018-02-16T04:16:00+00:00",
      "author": {
        "name": "Leo Tindall",
        "url": "https://www.patreon.com/leotindall"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "6a1644f0-2b9e-4c82-9ccd-ef69815f560f",
      "title": "Bincode 1.0.0, fast binary serialization with Serde",
      "content_text": "Bincode is a serializer implementation for Serde. If you stick a #[derive(Deserialize, Serialize)] on your struct, Bincode can efficiently serialize and deserialize those structs to and from bytes. Bincode is unique in that it‚Äôs a format that was built specifically for the Rust serialization ecosystem. Tight coupling with Serde allows Bincode to be very fast and serialize to very small payloads.",
      "url": "http://tyoverby.com/posts/bincode_release.html",
      "date_published": "2018-02-15T18:49:27+00:00",
      "author": {
        "name": "Ty Overby",
        "url": "http://tyoverby.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "35c70f95-6097-47df-a470-bb92e99b27e5",
      "title": "First release of TQL: the easy-to-use ORM for Rust",
      "content_text": "After a couple of weeks of work, I'm now happy to release the first version of tql, the easy-to-use ORM for Rust. While the focus was to make tql work on the stable version of the compiler, I also added some new features. The most notable new feature is the support for SQLite: now tql supports SQLite as well as PostgreSQL. The support for SQLite is almost as complete as the one for PostgreSQL: the only missing function is not implemented because the backend (SQLite) does not support it.",
      "url": "http://tql-rs.ml/first-release/",
      "date_published": "2018-02-10T00:00:00+00:00",
      "author": {
        "name": "Antoni",
        "url": "http://tql-rs.ml/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "019b1da3-b979-478b-89ed-7824c75df122",
      "title": "Corona: If you want to get async out out of your way",
      "content_text": "For some time now I develop a Rust library for asynchronous programming with coroutines, called Corona (note there‚Äôs a version 0.4.0-pre.1, but Crates prefer the ‚Äûstable‚Äú 0.3.1). I believe it is starting to be useful, so I wrote this description to show what it is good for and how it fits into the big picture of Rust. There‚Äôll be some more changes, though, at least because Tokio just released a new version (and Futures plan to do so soon), so Corona will have to adapt.",
      "url": "https://vorner.github.io/corona-04.html",
      "date_published": "2018-02-11T19:51:00+11:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "29eb1ede-d551-4b8d-aeec-c673aafb7e8f",
      "title": "Combine 3 - Partial parsing in Rust",
      "content_text": "Combine is a parser combinator library for the Rust programming language. I first announced version 3 of Combine back in August and back then I definitely expected to have a stable version by now. However other projects (cough gluon cough) got in the way and Combine fell to the wayside. It didn‚Äôt help that I didn‚Äôt have a killer feature for 3.0 either, user-defined error types make it possible to define parsers usable in #[no_std] crates which is great when you need it but it is still a fairly niche use-case.",
      "url": "https://marwes.github.io/2018/02/08/combine-3.html",
      "date_published": "2018-02-08T00:00:00+00:00",
      "author": {
        "name": "Markus Westerlind",
        "url": "https://marwes.github.io/"
      },
      "tags": [
        "Crates",
        "Computer Science"
      ]
    },
    {
      "id": "b0a2bc9c-effa-4859-b804-cbe839060855",
      "title": "Tokio Reform is Shipped and the Road to 0.2",
      "content_text": "I'm happy to announce that today, the changes proposed in the reform RFC have been released to crates.io as tokio 0.1. The primary changes are: Add a default global event loop, eliminating the need for setting up and managing your own event loop in the vast majority of cases, and decouple all task execution functionality from Tokio.",
      "url": "https://tokio.rs/blog/2018-02-tokio-reform-shipped/",
      "date_published": "2018-02-07T00:00:00+00:00",
      "author": {
        "name": "Carl Lerche",
        "url": "https://tokio.rs/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "5e5df82f-aba3-4832-bbe6-e995b2e544ef",
      "title": "Criterion.rs v0.2 - a statistics-driven benchmarking library for Rust",
      "content_text": "Criterion.rs is a statistics-driven benchmarking library for Rust. It provides precise measurements of changes in the performance of benchmarked code, and gives strong statistical confidence that apparent performance changes are real and not simply noise. Clear output, a simple API and reasonable defaults make it easy to use even for developers without a background in statistics. Unlike the benchmarking harness provided by Rust, Criterion.rs can be used with stable versions of the compiler.",
      "url": "https://bheisler.github.io/post/criterion-rs-0-2/",
      "date_published": "2018-02-05T07:00:00-06:00",
      "author": {
        "name": "Brook Heisler",
        "url": "https://bheisler.github.io/"
      },
      "tags": [
        "Performance",
        "Crates"
      ]
    },
    {
      "id": "e1a29851-ab4c-4739-a41f-56e9c783f5e4",
      "title": "Faster Progress Report 2",
      "content_text": "faster began as a yak shave, created to aid baseüíØ in its quest to become the fastest meme on Github. Writing an explicit AVX2-accelerated version of baseüíØ's encoder and decoder, then realizing I'd have to do the same thing again to see the speedups on my Ivy Bridge desktop, pushed me to make this library. Months later, it has blossomed into its own project, and has eclipsed baseüíØ in both popularity and promise.",
      "url": "https://adamniederer.com/blog/faster-pr-2.html",
      "date_published": "2018-01-28T22:14:41+00:00",
      "author": {
        "name": "Adam Niederer",
        "url": "https://adamniederer.com/blog/blog.html"
      },
      "tags": [
        "Performance",
        "Crates"
      ]
    }
  ]
}