{
  "version": "https://jsonfeed.org/version/1",
  "title": "Read Rust - Tools and Applications",
  "home_page_url": "https://readrust.net/",
  "feed_url": "https://readrust.net/tools-and-applications/feed.json",
  "description": "Tools and Applications posts on Read Rust",
  "author": {
    "name": "Wesley Moore",
    "url": "http://www.wezm.net/"
  },
  "items": [
    {
      "id": "73cbd270-d16d-4aec-b38d-9503961891bd",
      "title": "Presentation Manager written in Rust",
      "content_text": "A tool for serving and managing presentation slides.",
      "url": "https://medium.com/@mattdark/presentation-manager-written-in-rustlang-f36b73bb8dd2",
      "date_published": "2018-03-19T23:28:45.107+00:00",
      "author": {
        "name": "Mario García",
        "url": "https://medium.com/@mattdark"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "655ac748-e1e9-4fa4-b12a-2dc7c2e88fa7",
      "title": "Building a fast Electron app with Rust",
      "content_text": "When I built Finda, I wanted it to be fast — specifically, to respond to all user input within 16 milliseconds.\n\nGiven this goal, you might be surprised to learn that Finda is built with Electron, a framework that’s often decried for being the opposite of fast.",
      "url": "https://keminglabs.com/blog/building-a-fast-electron-app-with-rust/",
      "date_published": "2018-03-18T00:00:00+11:00",
      "author": {
        "name": "Kevin J. Lynagh",
        "url": "https://keminglabs.com/blog/"
      },
      "tags": [
        "Tools and Applications",
        "Performance"
      ]
    },
    {
      "id": "44f7fa8d-b23d-47e7-b3dd-f227e8317d49",
      "title": "A Tiny `ls` Clone Written in Rust",
      "content_text": "In my series of useless Unix tools rewritten in Rust, today I'm going to be covering one of my all-time favorites: ls.",
      "url": "https://matthias-endler.de/2018/ls/",
      "date_published": "2018-03-01T00:00:00+00:00",
      "author": {
        "name": "Matthias Endler",
        "url": "https://matthias-endler.de/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "c5a101b5-e749-4e99-9e08-54de2cf0a2c1",
      "title": "Oxidizing Fedora: Try Rust and its applications today",
      "content_text": "In recent years, it has become increasingly important to develop software that minimizes security vulnerabilities. Memory management bugs are a common cause of these vulnerabilities. To that end, the Mozilla community has spent the last several years building the Rust language and ecosystem which focuses primarily on eliminating those bugs. And Rust is available in Fedora today, along with a few applications in Fedora 27 and higher, as seen below.",
      "url": "https://fedoramagazine.org/oxidizing-fedora-try-rust-applications-today/",
      "date_published": "2018-02-21T08:00:23+00:00",
      "author": {
        "name": "Igor Gnatenko and Neal Gompa",
        "url": "https://fedoramagazine.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "0d46d60e-49c7-44ce-8f0c-48b94501b1ca",
      "title": "How to write GStreamer Elements in Rust Part 2: A raw audio sine wave source",
      "content_text": "A bit later than anticipated, this is now part two of the blog post series about writing GStreamer elements in Rust. Part one can be found here, and I’ll assume that everything written there is known already. In this part, a raw audio sine wave source element is going to be written. It will be similar to the one Mathieu was writing in his blog post about writing such a GStreamer element in Python. Various details will be different though, but more about that later.",
      "url": "https://coaxion.net/blog/2018/02/how-to-write-gstreamer-elements-in-rust-part-2-a-raw-audio-sine-wave-source/",
      "date_published": "2018-02-21T15:05:22+00:00",
      "author": {
        "name": "Sebastian Dröge",
        "url": "https://coaxion.net/blog/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "8e33c7c4-2788-418b-8e47-ca8990ae0d38",
      "title": "Snips Uses Rust to Build an Embedded Voice Assistant",
      "content_text": "The team at Paris-based Snips has created a voice assistant that can be embedded in a single device or used in a home network to control lights, thermostat, music, and more. You can build a home hub on a Raspberry Pi and ask it for a weather report, to play your favorite song, or to brew up a double espresso. Manufacturers like Keecker are adding Snips’ technology to products like multimedia home robots. And Snips works closely with leaders across the value chain, like NVIDIA, EBV, and Analog Devices, in order to voice-enable an increasingly wider range of device types, from speakers to home automation systems to cars.",
      "url": "https://blog.mozilla.org/blog/2018/02/21/snips-uses-rust-build-embedded-voice-assistant/",
      "date_published": "2018-02-21T12:34:56-08:00",
      "author": {
        "name": "Judy DeMocker",
        "url": "https://blog.mozilla.org/blog/author/jdemockermozilla-com/"
      },
      "tags": [
        "Language",
        "Tools and Applications"
      ]
    },
    {
      "id": "44ef6094-b3df-4a2c-9cd9-429feecff6bc",
      "title": "Spectra gets Rust scripting!",
      "content_text": "spectra is a crate I’ve been maintaining for a few months / years now. It’s a crate that I mainly use for demoscene productions (I released two with it, Céleri Rémoulade and Outline Invitation) but I also use it to play around and experiment new rendering, animation and video game techniques.",
      "url": "http://phaazon.net/blog/spectra_plugins",
      "date_published": "2018-02-19T02:57:00+00:00",
      "author": {
        "name": "Dimitri Sabadie",
        "url": "http://phaazon.net/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "0af4c90e-74b2-438d-aaed-798c9f6e900a",
      "title": "Fanta: An opinionated framework for web development in rust",
      "content_text": "Fanta is a web framework that aims for developers to be productive and consistent across projects and teams. Its goals are to be: Opinionated, Fast, and Intuitive. Based heavily off of the work here: https://github.com/tokio-rs/tokio-minihttp",
      "url": "https://github.com/trezm/Fanta",
      "date_published": "2018-02-14T18:44:00+11:00",
      "author": {
        "name": "Peter Mertz",
        "url": "https://github.com/trezm"
      },
      "tags": [
        "Tools and Applications",
        "Web and Network Services"
      ]
    },
    {
      "id": "1694fd36-21ca-4e3f-8654-9291c3ba4de7",
      "title": "comm is a peer-to-peer instant messaging protocol designed to be resilient to censorship",
      "content_text": "comm is a peer-to-peer instant messaging protocol designed to be resilient to censorship. comm-gtk is a GUI client built on the comm library. To try it out, start the app. In the configuration window, enter a secret phrase, a bootstrap node (IP:port pair), and a local port to listen on (e.g. 6669). For a bootstrap node, try 165.227.114.200:6667 (or any other node's IP address if you know one). Click connect to join the network.",
      "url": "https://github.com/zacstewart/comm-gtk",
      "date_published": "2018-02-13T23:02:31-06:00",
      "author": {
        "name": "Zac Stewart",
        "url": "https://github.com/zacstewart"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "751253b7-494d-4930-9586-40c18cab9280",
      "title": "tealdeer - A very fast implementation of tldr in Rust.",
      "content_text": "A fast command line client for tldr: A collection of simplified and community-driven man pages.",
      "url": "https://github.com/dbrgn/tealdeer",
      "date_published": "2018-02-12T07:46:00+11:00",
      "author": {
        "name": "Danilo Bargen",
        "url": "https://github.com/dbrgn"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "28ce1b60-8837-4443-87fb-669bf176db9b",
      "title": "Reflecting on ppbert",
      "content_text": "I had an itch: I was pretty-printing the BERT-encoded terms that we use in a production system at work and it was very slow. The Erlang shell took more than two minutes to dump the largest file. (It took about 0.1 second to read and parse the file; the rest was spent in io:format.) I decided to scratch that itch: I wrote ppbert, a command-line utility that reads BERT-encoded values and pretty-prints them. I’ve worked sporadically on ppbert for almost a year now, I use it daily at work, I’m happy with it, and I want to write about some of the things I learned during that journey.",
      "url": "https://vfoley.xyz/ppbert/",
      "date_published": "2018-02-09T00:00:00+00:00",
      "author": {
        "name": "Vincent Foley",
        "url": "http://vfoley.xyz/"
      },
      "tags": [
        "Tools and Applications",
        "Language"
      ]
    },
    {
      "id": "60238a1c-95ee-46d8-bf5c-e70fed87a103",
      "title": "Guitar Effects in Rust",
      "content_text": "In an effort to experiment with dsp, I wrote a guitar/bass effects processor this past weekend. The end result works very well (to my pleasant surprise). It doesn’t have 90% of the functionalities of any of rakarrack, guitar rig, garage band but overall it was a fun weekend hack.",
      "url": "http://rickyhan.com/jekyll/update/2018/02/06/rust-guitar-pedal-effects-dsp.html",
      "date_published": "2018-02-06T04:00:00+00:00",
      "author": {
        "name": "Ricky Han",
        "url": "http://rickyhan.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "434c400b-b4ac-49c9-87fa-db2a8b5f1ba7",
      "title": "DataFusion: Big Data Platform for Rust",
      "content_text": "DataFusion is an open-source Big Data platform implemented in the Rust programming language with a similar programming style to Apache Spark.",
      "url": "https://www.datafusion.rs/",
      "date_published": "2018-02-04T16:51:47+00:00",
      "author": {
        "name": "Andy Grove",
        "url": "https://www.datafusion.rs/"
      },
      "tags": [
        "Tools and Applications",
        "Web and Network Services"
      ]
    },
    {
      "id": "303b0429-9b0c-46f8-a555-fbab8c2bdf90",
      "title": "retrobasic - A BASIC interpreter written in Rust",
      "content_text": "retrobasic is a BASIC interpreter written in Rust. It is based on the original BASIC '64 implementation, and modified as needed to make it more compatible with some of the classic BASIC games.",
      "url": "https://github.com/seasalim/retrobasic",
      "date_published": "2018-02-04T17:21:55+00:00",
      "author": {
        "name": "seasalim",
        "url": "https://github.com/seasalim"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "4aeb0aa5-6a72-41c9-87bc-a2e24b5e33d3",
      "title": "Writing a command-line program in Rust - Federico's Blog",
      "content_text": "As a library writer, it feels a bit strange, but refreshing, to write a program that actually has a main() function. My experience with Rust so far has been threefold:",
      "url": "https://people.gnome.org/~federico/blog/writing-a-command-line-program-in-rust.html",
      "date_published": "2018-02-03T11:41:20-06:00",
      "author": {
        "name": "Federico Mena Quintero",
        "url": "https://people.gnome.org/~federico/blog/index.html"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "93d7f09d-e1eb-4d6a-a792-5765326730be",
      "title": "Make your own make",
      "content_text": "An obvious idea is to use Rust for task automation. Originally, I have proposed creating a special Cargo subcommand to execute build tasks, implemented as Rust programs, in this thread. However, since then I realized that there are built-in tools in Cargo which allow one to get a pretty ergonomic solution. Namely, the combination of workspaces, aliases and ability to define binaries seems to do the trick.",
      "url": "https://matklad.github.io/2018/01/03/make-your-own-make.html",
      "date_published": "2018-01-03T10:52:50+00:00",
      "author": {
        "name": "Aleksey Kladov",
        "url": "https://matklad.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "2168f429-844d-4629-97da-c149e9026cfd",
      "title": "mdcat - Cat for markdown: Show markdown documents in TTYs",
      "content_text": "Cat for markdown: Show markdown documents in TTYs",
      "url": "https://github.com/lunaryorn/mdcat",
      "date_published": "2018-02-03T18:23:00+11:00",
      "author": {
        "name": "Sebastian Wiesner",
        "url": "https://swsnr.de/"
      },
      "tags": [
        "Tools and Applications"
      ]
    }
  ]
}