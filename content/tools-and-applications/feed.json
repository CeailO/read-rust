{
  "version": "https://jsonfeed.org/version/1",
  "title": "Read Rust - Tools and Applications",
  "home_page_url": "https://readrust.net/",
  "feed_url": "https://readrust.net/tools-and-applications/feed.json",
  "description": "Tools and Applications posts on Read Rust",
  "author": {
    "name": "Wesley Moore",
    "url": "http://www.wezm.net/"
  },
  "items": [
    {
      "id": "48c70c0e-5ce7-415b-8264-6e7a6dd02a8f",
      "title": "My Emacs Rust IDE",
      "content_text": "In this post, I will walk you through configuring an EMACS Rust IDE to get syntax highlighting and code completion for the Rust programming language.",
      "url": "http://www.admintome.com/blog/my-emacs-rust-ide/",
      "date_published": "2018-06-16T01:26:03+00:00",
      "author": {
        "name": "Bill Ward",
        "url": "http://www.admintome.com/blog/author/stackadmin/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "f6f3b55c-c39c-4366-9de1-ebf3b230ee6c",
      "title": "What do you think are the most interesting/exciting projects using Rust?",
      "content_text": "Last week I tweeted \"What do you think are the most interesting/exciting projects using Rust? (No self-promotion :-) )\". The response was awesome! Jonathan Turner suggested I write up the responses as a blog post, and here we are.",
      "url": "https://www.ncameron.org/blog/interesting_projects/",
      "date_published": "2018-06-13T16:26:29+00:00",
      "author": {
        "name": "Nick Cameron",
        "url": "http://www.ncameron.org/blog/"
      },
      "tags": [
        "Language",
        "Tools and Applications"
      ]
    },
    {
      "id": "9448ee63-32da-42f1-bd2e-1ef737d9b971",
      "title": "To do a Rust GUI",
      "content_text": "Rust Qt Binding Generator lets you combine Rust code with a Qt1 graphical application. A previous blog shows how to make a simple clock. It‚Äôs a good idea to read that post before reading this more advanced post, because in this post we are getting serious.\n\nThis blog post shows how to write a to-do application. The data model is a list of to-do items. The source code for this example is available in the folder examples/todos in the Rust Qt Binding Generator repository.",
      "url": "https://www.vandenoever.info/blog/2018/06/09/to-do-a-rust-gui.html",
      "date_published": "2018-06-09T00:00:00+00:00",
      "author": {
        "name": "Jos van den Oever",
        "url": "https://www.vandenoever.info/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "e0e1ff6c-452a-442e-a3d5-93203569fa58",
      "title": "Fishing in an Abyss: Building a Password Cracker in Rust",
      "content_text": "Ahead of this year‚Äôs World Password Day, 1Password ‚Äì maker of password management software ‚Äì announced a password cracking challenge. The company ostensibly wanted to find out how hard it would be to crack a three-word passphrase master password on one of their vaults, assuming that the attacker had the derived hash of the passphrase.",
      "url": "https://sts10.github.io//2018/05/31/1password-cracking-challenge.html",
      "date_published": "2018-05-31T23:28:50+00:00",
      "author": {
        "name": "Sam Schlinkert",
        "url": "https://sts10.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "e81240c1-c783-4113-9df8-27755677e929",
      "title": "madparts-rs 1.0 release",
      "content_text": "Back in Februari 2013 then coworker Romain S. showed me the new trend of programming editors that do continuous compilation while you type, showing you immediate feedback on your code. In parallel I also worked on 3D modeling for my 3D printer using the OpenSCAD program. OpenSCAD works by writing code in its custom language and then have it rendered. I had this idea of combining these two approaches to make an electronics footprint generator. And so the development of the original madparts program started. In August 2016 I had been playing with the then pretty new rust programming language and decided a rewrite in it and simplifying the program even further would be fun to do.",
      "url": "https://damad.be/joost/blog/madparts-rs-1-0-release.html",
      "date_published": "2018-05-20T00:00:00+00:00",
      "author": {
        "name": "Joost Yervante Damad",
        "url": "https://damad.be/joost/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "d2cf9531-53d8-45dd-a9e4-0feaa3699466",
      "title": "An image viewer using Smithay's Client Toolkit",
      "content_text": "Small tutorial of using Smithay's Client Toolkit by example, building a small image viewer as a Wayland client.",
      "url": "https://smithay.github.io/sctk-image-viewer.html",
      "date_published": "2018-05-10T14:00:00+02:00",
      "author": {
        "name": "Victor Berger",
        "url": "https://smithay.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "4b63b225-3c2a-4e13-9cf5-a3ff4af811d0",
      "title": "Analyze disk usage with dutree",
      "content_text": "dutree is a command line tool to analyze disk usage. Features coloured output, according to the LS_COLORS environment variable, display the file system tree, ability to aggregate small files, ability to exclude files or directories, ability to compare different directories fast, and written in Rust. This tool is a mix between¬†tree and durep.",
      "url": "https://ownyourbits.com/2018/03/25/analize-disk-usage-with-dutree/",
      "date_published": "2018-03-25T16:10:54+00:00",
      "author": {
        "name": "nachoparker",
        "url": "https://ownyourbits.com/author/cisquero_admin/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "cfa15026-8758-4249-b23c-fa41e23161c4",
      "title": "Entity-Component-System architecture for UI in Rust",
      "content_text": "For a fun project, I‚Äôve been tinkering with xi-win, an experimental Windows front-end for xi-editor, written in Rust. I‚Äôm basically optimizing for performance, so making a number of somewhat unusual decisions. Among other things, I‚Äôm writing the UI myself, rather than using an existing toolkit or framework.",
      "url": "https://raphlinus.github.io/personal/2018/05/08/ecs-ui.html",
      "date_published": "2018-05-08T18:29:03+00:00",
      "author": {
        "name": "Raph Levien",
        "url": "https://raphlinus.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "66f3233f-afdd-49af-9cf4-cb71bcd56b33",
      "title": "sudo_pair - Plugin for sudo that requires another human to approve and monitor privileged sudo sessions",
      "content_text": "sudo is used by engineers daily to run commands as privileged users. But on some sensitive systems, you really want to ensure that no individual can act entirely autonomously. At Square, this includes applications that manage our internal access-control systems, store accounting ledgers, or even move around real money. This plugin allows us to ensure that no user can act entirely on their own authority within these systems.",
      "url": "https://github.com/square/sudo_pair",
      "date_published": "2018-05-07T18:24:54+00:00",
      "author": {
        "name": "Square",
        "url": "https://github.com/square"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "3e8fce57-40d7-4eec-9425-a2b32ef5895d",
      "title": "My Compound Passphrase List Safety Checker",
      "content_text": "I‚Äôve been thinking about information theory, entropy, and passphrases for a couple of months now. I‚Äôve been particularly interested in using random passphrases as passwords. An example of one of these passphrases would be ‚Äústamina turret backlands ruby‚Äù. The words have to be as purely random as possible ‚Äì using your four dogs‚Äô names is not nearly as strong as a password, as an attacker would likely guess that relatively early.",
      "url": "https://sts10.github.io/2018/05/05/compound-passphrase-list-safety-checker.html",
      "date_published": "2018-05-05T02:13:50+00:00",
      "author": {
        "name": "Sam Schlinkert",
        "url": "https://sts10.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "ef638662-6cfb-4335-9e01-baa7af9a5d95",
      "title": "Filtering Duplicate Log Entries via Rust and Runiq",
      "content_text": "Whilst sort -u is super easy to use, the requirement of sorting your data cannot be overlooked as it means your entire file needs to be buffered into memory at once. This is not always possible, or even if possible it's not always desired. On the other hand uniq is great, but in order to sort your data in advance you still have the same issue. It was due to this that I wrote runiq, which is essentially an optimized and more flexible implementation of both of the aforemention tools for the purposes of duplicate filtering. It performs much faster, with much less memory, and does not require sorted input (although it can optimize this case).",
      "url": "https://whitfin.io/filtering-unique-logs-using-rust/",
      "date_published": "2018-05-07T03:17:28+00:00",
      "author": {
        "name": "Isaac Whitfield",
        "url": "https://whitfin.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "cf489f8e-70b9-4669-8424-03e79fab2ad8",
      "title": "Introducing seiri ‚Äî a music üé∂ manager for lots of music",
      "content_text": "TL;DR seiri is a lightweight music manager written (mostly) in Rust that helps keep huge music libraries organized. Try it today at chyyran.moe/seiri.",
      "url": "https://medium.com/@chyyran/introducing-seiri-a-music-manager-for-lots-of-music-990b464b3387",
      "date_published": "2018-05-03T23:35:26.009+00:00",
      "author": {
        "name": "Ronny Chan",
        "url": "https://medium.com/@chyyran"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "103f9c4f-f4f9-4e15-98b2-0d2b1db6b792",
      "title": "kanban-app - Kanban board built with Rust and Elm without Electron",
      "content_text": "This is a web-based Kanban board application, built with Elm and Rust. The only different from this application and hundred thousands of web-based application out there is: We don't need Electron!. Instead, it use native WebView (WebKit for Linux/macOS, and MSHTML on Windows),",
      "url": "https://github.com/huytd/kanban-app",
      "date_published": "2018-05-03T07:30:00+10:00",
      "author": {
        "name": "Huy Tr.",
        "url": "https://github.com/huytd"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "7812ff10-6f3d-4990-8832-9b5eb63780d8",
      "title": "Servo engines written in Rust deliver memory safety and multithreading",
      "content_text": "In 2012, Mozilla started the Servo project, a community effort to create new open source browser components that can take advantage of multicore hardware to improve speed, stability and responsiveness. Servo is comparable to WebKit, an open source browser engine that is the foundation of Apple‚Äôs Safari browser. (Other browser engines include Blink, EdgeHTML, and Gecko.) The difference is that Servo is written in the Rust programming language, bringing lightning-fast performance and memory safety to browser internals. Rust code can drastically cut down the number of critical bugs that affect browser engines. Servo uses a modular architecture and currently runs on Linux, macOS, Windows, and Android operating systems.",
      "url": "https://research.mozilla.org/servo-engines/",
      "date_published": "2018-05-01T16:04:53+00:00",
      "author": {
        "name": "Mozilla Research",
        "url": "https://research.mozilla.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "c38eff1e-2560-4373-a3d6-9e3ea04853ad",
      "title": "bat - print code to the terminal with syntax highlighting and git integration",
      "content_text": "bat supports syntax highlighting for a large number of programming and markup languages. bat also communicates with git to show modifications with respect to the index (see left side bar).",
      "url": "https://github.com/sharkdp/bat",
      "date_published": "2018-05-01T00:00:00+00:00",
      "author": {
        "name": "David Peter",
        "url": "https://github.com/sharkdp"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "caa2a44c-fd86-4221-92ba-226a3834e0a4",
      "title": "JARVIS - Notes on Rust Crates From Writing an RSS Reader",
      "content_text": "Way back in the dim mists of history (back in university) I wrote myself a custom RSS reader in Java and called it JARVIS1. You see, I read a lot of webcomics. Like, a lot. Some webcomics provide RSS feeds, but some don‚Äôt, and as my collection grew it started to become a hassle to use Firefox‚Äôs live bookmarks to manage it all. Ultimately, I wrote up a quick Swing GUI to use as a single interface for keeping up with blogs and tracking which comics had published updates since the last time I‚Äôd checked2.",
      "url": "https://bheisler.github.io/post/jarvis-impressions-of-rust-libraries/",
      "date_published": "2018-04-22T16:00:00-06:00",
      "author": {
        "name": "Brook Heisler",
        "url": "https://bheisler.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "79a75489-f371-461e-8943-273f7b60e620",
      "title": "Hammond: A Podcast Client for the GNOME Desktop",
      "content_text": "Hammond has been in development since Sep 2017. It makes use of the Rust bindings to GNOME libraries as well as diesel, serde, reqwest, and a number other crates to build a beautiful, native application that feels right at home on the GNOME desktop.",
      "url": "https://gitlab.gnome.org/World/hammond",
      "date_published": "2018-04-27T21:12:00+10:00",
      "author": {
        "name": "Jordan Petridis",
        "url": "https://gitlab.gnome.org/alatiera"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "36e40f73-b836-49cd-a558-d93a238c7386",
      "title": "fastmod - A fast partial replacement for the codemod tool",
      "content_text": "fastmod is a fast partial replacement for codemod. Like codemod, it is a tool to assist you with large-scale codebase refactors, and it supports most of codemod's options. fastmod's major philosophical difference from codemod is that it is focused on improving the use case \"I want to use interactive mode to make sure my regex is correct, and then I want to apply the regex everywhere\". For this use case, it offers much better performance than codemod",
      "url": "https://github.com/facebookincubator/fastmod",
      "date_published": "2018-04-19T20:30:07+00:00",
      "author": {
        "name": "Facebook Incubator",
        "url": "https://github.com/facebookincubator"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "d0b170a0-b0c5-4d33-b3f2-e0e0dcac1872",
      "title": "Pijul 0.10",
      "content_text": "I‚Äôm pleased to announce the new release of Pijul, version 0.10. Pijul is an easy to use, distributed and fast version control system. This release has been a long time coming, but brings in an important number of new features and stability enhancements.",
      "url": "https://pijul.org/posts/2018-04-21-pijul-0.10/",
      "date_published": "2018-04-21T15:13:57+02:00",
      "author": {
        "name": "Pijul",
        "url": "https://pijul.org/posts"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "18ca5e39-fd8f-4739-95ef-9daaef6d525d",
      "title": "Announcing cargo src (beta)",
      "content_text": "cargo src is a new tool for exploring your Rust code. It is a cargo plugin which runs locally and lets you navigate your project in a web browser. It has syntax highlighting, jump to definition, type on hover, semantic search, find uses, find impls, and more.",
      "url": "https://ncameron.org/blog/announcing-cargo-src-beta/",
      "date_published": "2018-04-18T20:52:39+00:00",
      "author": {
        "name": "Nick Cameron",
        "url": "http://www.ncameron.org/blog/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "f6e1bdda-278a-4077-8d2f-49417303637f",
      "title": "dust - A more intuitive version of du in Rust",
      "content_text": "Dust is meant to give you an instant overview of which directories are using disk space without requiring sort or head. Dust will print a maximum of 1 'Did not have permissions message'. Dust will list the 15 biggest sub directories or files and will smartly recurse down the tree to find the larger ones. There is no need for a '-d' flag or a '-h' flag. The largest sub directory will have its size shown in red",
      "url": "https://github.com/bootandy/dust",
      "date_published": "2018-04-18T07:26:00+10:00",
      "author": {
        "name": "andy boot",
        "url": "https://github.com/bootandy"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "ef8bca4e-5627-4bde-a21f-9dae321ac7c0",
      "title": "angle-grinder - Slice and dice log files on the command line",
      "content_text": "Angle-grinder allows you to parse, aggregate, sum, average, percentile, and sort your data. You can see it, live-updating, in your terminal. Angle grinder is designed for when, for whatever reason, you don't have your data in graphite/honeycomb/kibana/sumologic/splunk/etc. but still want to be able to do sophisticated analytics.\n\nAngle grinder can process about a million rows per second, so it's usable for fairly meaty aggregation. The results will live update in your terminal as data is processed. Angle grinder is a bare bones functional programming language coupled with a pretty terminal UI.",
      "url": "https://github.com/rcoh/angle-grinder",
      "date_published": "2018-04-18T07:26:00+10:00",
      "author": {
        "name": "Russell Cohen",
        "url": "https://github.com/rcoh"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "d412d980-cc59-4a0b-ab9e-19100f3b8927",
      "title": "Faster Bulletproofs with Ristretto & AVX2",
      "content_text": "A few months ago, B√ºnz, Bootle, Boneh, Poelstra, Wuille, and Maxwell published Bulletproofs, which dramatically improves proof performance both in terms of proof size and verification time. In addition, it allows proving a much wider class of statements than just range proofs.\n\nAt Chain, we (Henry de Valence, Cathie Yun and Oleg Andreev) have been working on a pure-Rust Bulletproofs implementation, whose initial version we are publishing today, together with a set of notes.",
      "url": "https://blog.chain.com/faster-bulletproofs-with-ristretto-avx2-29450b4490cd",
      "date_published": "2018-04-13T19:21:27.639+00:00",
      "author": {
        "name": "Chain",
        "url": "https://blog.chain.com/@chaininc"
      },
      "tags": [
        "Tools and Applications",
        "Performance"
      ]
    },
    {
      "id": "ed19c2a7-fe9d-465b-b41a-71480e6b978a",
      "title": "QCGPU - Hardware Accelerated Quantum Computer Simulation",
      "content_text": "A software library for high performance and hardware accelerated simulation of Quantum Computers and Algorithms. Written with Rust and OpenCL.",
      "url": "https://qcgpu.github.io/",
      "date_published": "2018-04-11T06:47:00+10:00",
      "author": {
        "name": "QCGPU",
        "url": "https://qcgpu.github.io/"
      },
      "tags": [
        "Computer Science",
        "Tools and Applications"
      ]
    },
    {
      "id": "b93c9682-4e53-4a7f-a39b-79d57b2b4737",
      "title": "New sysinfo version (huge performance improvements!)",
      "content_text": "This new version comes with great performance improvements. We're talking about 3x faster on macos, 2x faster on linux and 3x faster on windows (the benchmarks are at the end of the post).",
      "url": "https://blog.guillaume-gomez.fr/articles/2018-04-09+New+sysinfo+version+%28huge+performance+improvements%21%29",
      "date_published": "2018-04-09T00:00:00+00:00",
      "author": {
        "name": "Guillaume Gomez",
        "url": "https://blog.guillaume-gomez.fr/"
      },
      "tags": [
        "Performance",
        "Tools and Applications"
      ]
    },
    {
      "id": "1282d538-71c9-4379-a330-820eccf83d22",
      "title": "Sequoia-PGP - a modular OpenPGP implementation",
      "content_text": "Sequoia is a modular OpenPGP implementation in Rust.",
      "url": "https://sequoia-pgp.org/",
      "date_published": "2018-04-11T06:52:00+10:00",
      "author": {
        "name": "p‚â°p foundation",
        "url": "https://sequoia-pgp.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "88175c1a-8150-45f5-a1d8-d390457b9fe2",
      "title": "Announcing personal finance tool 'pfr'",
      "content_text": "pfr is a command-line tool for helping me to manage my personal finances. At the end of each month, I like to sit down and ‚Äúallocate‚Äù funds to cover my expenses for the following month. However, not all of my expenses occur monthly. For example, things like rent are paid weekly, and I think of money spent on food in terms of weeks, so I have to multiply those expenses by 4 (ish). I also have to figure out how much money to put in each account, e.g on my EFTPOS (direct-debit) card or for automatic payments. It‚Äôs not hard, but then again, that‚Äôs why we write programs.",
      "url": "https://kyusscaesar.wordpress.com/2018/03/29/announcing-pfr/",
      "date_published": "2018-03-29T10:10:34+00:00",
      "author": {
        "name": "Antony Southworth",
        "url": "https://kyusscaesar.wordpress.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "1054cc8a-cbdd-4073-b7f9-2801aaad6fd6",
      "title": "Introducing Click: The Command Line Interactive Controller for Kubernetes",
      "content_text": "Click is an open-source tool that lets you quickly and easily run commands against Kubernetes resources, without copy/pasting all the time, and that easily integrates into your existing command line workflows. This blog introduces its its usage and merits.",
      "url": "https://databricks.com/blog/2018/03/27/introducing-click-the-command-line-interactive-controller-for-kubernetes.html",
      "date_published": "2018-03-27T16:07:56+00:00",
      "author": {
        "name": "Nick Lanham",
        "url": "https://databricks.com/blog/category/engineering"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "fe44a6a6-04fd-42f7-a0ee-c816282bac5e",
      "title": "From cobalt.rs to gutenberg",
      "content_text": "I wish I could have the features of both tools, but for now I will use gutenberg over cobalt. A tiny migration and feature comparison story.",
      "url": "https://markentier.tech/posts/2018/03/from-cobalt-to-gutenberg/",
      "date_published": "2018-03-28T00:00:00+00:00",
      "author": {
        "name": "Christoph Grabo (@asaaki)",
        "url": "https://markentier.tech/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "cfc59513-ea0b-4d61-ac46-d7ea2e5bba8b",
      "title": "Designing a fast CLI join tool with rust",
      "content_text": "(or how rust helped me to match the speed of GNU join written by Mike Haertel)",
      "url": "https://milancio42.github.io/blog/2018-03-22-rjoin/",
      "date_published": "2018-03-22T09:27:20+01:00",
      "author": {
        "name": "Milan Opath",
        "url": "https://milancio42.github.io/blog/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "b33165a2-c60c-4431-872d-4528770e42c1",
      "title": "xray Update for March 26, 2018",
      "content_text": "Xray - An experimental next-generation Electron-based text editor. This update covers a revised roadmap, fast file finding, and thoughts on key bindings.",
      "url": "https://github.com/atom/xray/blob/master/docs/updates/2018_03_26.md",
      "date_published": "2018-03-26T00:00:00+00:00",
      "author": {
        "name": "Xray Team",
        "url": "https://github.com/atom/xray"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "e0dec9da-faee-4dcd-bfd2-8e14dda4f3f6",
      "title": "Compiling Rust + Windows + GTK step-by-step",
      "content_text": "In case you have tried to make a rust program with GUI that would work both on Linux and Windows, you probably may have faced some issues in some point (especially if you are a newcomer). Compiling in Linux is quite easy, but in Windows life gets a bit tricky.\n\nI've pulled together some info from here and there so that no-one else had to fight their way through fire and flames.",
      "url": "https://www.reddit.com/r/rust/comments/86kmhu/compiling_rust_windows_gtk_stepbystep/",
      "date_published": "2018-03-23T13:29:57+00:00",
      "author": {
        "name": "light3rn",
        "url": "https://www.reddit.com/user/light3rn"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "73cbd270-d16d-4aec-b38d-9503961891bd",
      "title": "Presentation Manager written in Rust",
      "content_text": "A tool for serving and managing presentation slides.",
      "url": "https://medium.com/@mattdark/presentation-manager-written-in-rustlang-f36b73bb8dd2",
      "date_published": "2018-03-19T23:28:45.107+00:00",
      "author": {
        "name": "Mario Garc√≠a",
        "url": "https://medium.com/@mattdark"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "655ac748-e1e9-4fa4-b12a-2dc7c2e88fa7",
      "title": "Building a fast Electron app with Rust",
      "content_text": "When I built Finda, I wanted it to be fast ‚Äî specifically, to respond to all user input within 16 milliseconds.\n\nGiven this goal, you might be surprised to learn that Finda is built with Electron, a framework that‚Äôs often decried for being the opposite of fast.",
      "url": "https://keminglabs.com/blog/building-a-fast-electron-app-with-rust/",
      "date_published": "2018-03-18T00:00:00+11:00",
      "author": {
        "name": "Kevin J. Lynagh",
        "url": "https://keminglabs.com/blog/"
      },
      "tags": [
        "Tools and Applications",
        "Performance"
      ]
    },
    {
      "id": "44f7fa8d-b23d-47e7-b3dd-f227e8317d49",
      "title": "A Tiny `ls` Clone Written in Rust",
      "content_text": "In my series of useless Unix tools rewritten in Rust, today I'm going to be covering one of my all-time favorites: ls.",
      "url": "https://matthias-endler.de/2018/ls/",
      "date_published": "2018-03-01T00:00:00+00:00",
      "author": {
        "name": "Matthias Endler",
        "url": "https://matthias-endler.de/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "c5a101b5-e749-4e99-9e08-54de2cf0a2c1",
      "title": "Oxidizing Fedora: Try Rust and its applications today",
      "content_text": "In recent years, it has become increasingly important to develop software that minimizes security vulnerabilities. Memory management bugs are a common cause of these vulnerabilities. To that end, the Mozilla community has spent the last several years building the Rust language and ecosystem which focuses primarily on eliminating those bugs. And Rust is available in Fedora today, along with a few applications in Fedora 27 and higher, as seen below.",
      "url": "https://fedoramagazine.org/oxidizing-fedora-try-rust-applications-today/",
      "date_published": "2018-02-21T08:00:23+00:00",
      "author": {
        "name": "Igor Gnatenko and Neal Gompa",
        "url": "https://fedoramagazine.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "0d46d60e-49c7-44ce-8f0c-48b94501b1ca",
      "title": "How to write GStreamer Elements in Rust Part 2: A raw audio sine wave source",
      "content_text": "A bit later than anticipated, this is now part two of the blog post series about writing GStreamer elements in Rust. Part one can be found here, and I‚Äôll assume that everything written there is known already. In this part, a raw audio sine wave source element is going to be written. It will be similar to the one Mathieu was writing in his blog post about writing such a GStreamer element in Python. Various details will be different though, but more about that later.",
      "url": "https://coaxion.net/blog/2018/02/how-to-write-gstreamer-elements-in-rust-part-2-a-raw-audio-sine-wave-source/",
      "date_published": "2018-02-21T15:05:22+00:00",
      "author": {
        "name": "Sebastian Dr√∂ge",
        "url": "https://coaxion.net/blog/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "8e33c7c4-2788-418b-8e47-ca8990ae0d38",
      "title": "Snips Uses Rust to Build an Embedded Voice Assistant",
      "content_text": "The team at Paris-based Snips has created a voice assistant that can be embedded in a single device or used in a home network to control lights, thermostat, music, and more. You can build a home hub on a Raspberry Pi and ask it for a weather report, to play your favorite song, or to brew up a double espresso. Manufacturers like Keecker are adding Snips‚Äô technology to products like multimedia home robots. And Snips works closely with leaders across the value chain, like NVIDIA, EBV, and Analog Devices, in order to voice-enable an increasingly wider range of device types, from speakers to home automation systems to cars.",
      "url": "https://blog.mozilla.org/blog/2018/02/21/snips-uses-rust-build-embedded-voice-assistant/",
      "date_published": "2018-02-21T12:34:56-08:00",
      "author": {
        "name": "Judy DeMocker",
        "url": "https://blog.mozilla.org/blog/author/jdemockermozilla-com/"
      },
      "tags": [
        "Language",
        "Tools and Applications"
      ]
    },
    {
      "id": "44ef6094-b3df-4a2c-9cd9-429feecff6bc",
      "title": "Spectra gets Rust scripting!",
      "content_text": "spectra is a crate I‚Äôve been maintaining for a few months / years now. It‚Äôs a crate that I mainly use for demoscene productions (I released two with it, C√©leri R√©moulade and Outline Invitation) but I also use it to play around and experiment new rendering, animation and video game techniques.",
      "url": "http://phaazon.net/blog/spectra_plugins",
      "date_published": "2018-02-19T02:57:00+00:00",
      "author": {
        "name": "Dimitri Sabadie",
        "url": "http://phaazon.net/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "0af4c90e-74b2-438d-aaed-798c9f6e900a",
      "title": "Fanta: An opinionated framework for web development in rust",
      "content_text": "Fanta is a web framework that aims for developers to be productive and consistent across projects and teams. Its goals are to be: Opinionated, Fast, and Intuitive. Based heavily off of the work here: https://github.com/tokio-rs/tokio-minihttp",
      "url": "https://github.com/trezm/Fanta",
      "date_published": "2018-02-14T18:44:00+11:00",
      "author": {
        "name": "Peter Mertz",
        "url": "https://github.com/trezm"
      },
      "tags": [
        "Tools and Applications",
        "Web and Network Services"
      ]
    },
    {
      "id": "1694fd36-21ca-4e3f-8654-9291c3ba4de7",
      "title": "comm is a peer-to-peer instant messaging protocol designed to be resilient to censorship",
      "content_text": "comm is a peer-to-peer instant messaging protocol designed to be resilient to censorship. comm-gtk is a GUI client built on the comm library. To try it out, start the app. In the configuration window, enter a secret phrase, a bootstrap node (IP:port pair), and a local port to listen on (e.g. 6669). For a bootstrap node, try 165.227.114.200:6667 (or any other node's IP address if you know one). Click connect to join the network.",
      "url": "https://github.com/zacstewart/comm-gtk",
      "date_published": "2018-02-13T23:02:31-06:00",
      "author": {
        "name": "Zac Stewart",
        "url": "https://github.com/zacstewart"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "751253b7-494d-4930-9586-40c18cab9280",
      "title": "tealdeer - A very fast implementation of tldr in Rust.",
      "content_text": "A fast command line client for tldr: A collection of simplified and community-driven man pages.",
      "url": "https://github.com/dbrgn/tealdeer",
      "date_published": "2018-02-12T07:46:00+11:00",
      "author": {
        "name": "Danilo Bargen",
        "url": "https://github.com/dbrgn"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "28ce1b60-8837-4443-87fb-669bf176db9b",
      "title": "Reflecting on ppbert",
      "content_text": "I had an itch: I was pretty-printing the BERT-encoded terms that we use in a production system at work and it was very slow. The Erlang shell took more than two minutes to dump the largest file. (It took about 0.1 second to read and parse the file; the rest was spent in io:format.) I decided to scratch that itch: I wrote ppbert, a command-line utility that reads BERT-encoded values and pretty-prints them. I‚Äôve worked sporadically on ppbert for almost a year now, I use it daily at work, I‚Äôm happy with it, and I want to write about some of the things I learned during that journey.",
      "url": "https://vfoley.xyz/ppbert/",
      "date_published": "2018-02-09T00:00:00+00:00",
      "author": {
        "name": "Vincent Foley",
        "url": "http://vfoley.xyz/"
      },
      "tags": [
        "Tools and Applications",
        "Language"
      ]
    },
    {
      "id": "60238a1c-95ee-46d8-bf5c-e70fed87a103",
      "title": "Guitar Effects in Rust",
      "content_text": "In an effort to experiment with dsp, I wrote a guitar/bass effects processor this past weekend. The end result works very well (to my pleasant surprise). It doesn‚Äôt have 90% of the functionalities of any of rakarrack, guitar rig, garage band but overall it was a fun weekend hack.",
      "url": "http://rickyhan.com/jekyll/update/2018/02/06/rust-guitar-pedal-effects-dsp.html",
      "date_published": "2018-02-06T04:00:00+00:00",
      "author": {
        "name": "Ricky Han",
        "url": "http://rickyhan.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "434c400b-b4ac-49c9-87fa-db2a8b5f1ba7",
      "title": "DataFusion: Big Data Platform for Rust",
      "content_text": "DataFusion is an open-source Big Data platform implemented in the Rust programming language with a similar programming style to Apache Spark.",
      "url": "https://www.datafusion.rs/",
      "date_published": "2018-02-04T16:51:47+00:00",
      "author": {
        "name": "Andy Grove",
        "url": "https://www.datafusion.rs/"
      },
      "tags": [
        "Tools and Applications",
        "Web and Network Services"
      ]
    },
    {
      "id": "303b0429-9b0c-46f8-a555-fbab8c2bdf90",
      "title": "retrobasic - A BASIC interpreter written in Rust",
      "content_text": "retrobasic is a BASIC interpreter written in Rust. It is based on the original BASIC '64 implementation, and modified as needed to make it more compatible with some of the classic BASIC games.",
      "url": "https://github.com/seasalim/retrobasic",
      "date_published": "2018-02-04T17:21:55+00:00",
      "author": {
        "name": "seasalim",
        "url": "https://github.com/seasalim"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "4aeb0aa5-6a72-41c9-87bc-a2e24b5e33d3",
      "title": "Writing a command-line program in Rust - Federico's Blog",
      "content_text": "As a library writer, it feels a bit strange, but refreshing, to write a program that actually has a main() function. My experience with Rust so far has been threefold:",
      "url": "https://people.gnome.org/~federico/blog/writing-a-command-line-program-in-rust.html",
      "date_published": "2018-02-03T11:41:20-06:00",
      "author": {
        "name": "Federico Mena Quintero",
        "url": "https://people.gnome.org/~federico/blog/index.html"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "93d7f09d-e1eb-4d6a-a792-5765326730be",
      "title": "Make your own make",
      "content_text": "An obvious idea is to use Rust for task automation. Originally, I have proposed creating a special Cargo subcommand to execute build tasks, implemented as Rust programs, in this thread. However, since then I realized that there are built-in tools in Cargo which allow one to get a pretty ergonomic solution. Namely, the combination of workspaces, aliases and ability to define binaries seems to do the trick.",
      "url": "https://matklad.github.io/2018/01/03/make-your-own-make.html",
      "date_published": "2018-01-03T10:52:50+00:00",
      "author": {
        "name": "Aleksey Kladov",
        "url": "https://matklad.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "2168f429-844d-4629-97da-c149e9026cfd",
      "title": "mdcat - Cat for markdown: Show markdown documents in TTYs",
      "content_text": "Cat for markdown: Show markdown documents in TTYs",
      "url": "https://github.com/lunaryorn/mdcat",
      "date_published": "2018-02-03T18:23:00+11:00",
      "author": {
        "name": "Sebastian Wiesner",
        "url": "https://swsnr.de/"
      },
      "tags": [
        "Tools and Applications"
      ]
    }
  ]
}