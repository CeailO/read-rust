{
  "version": "https://jsonfeed.org/version/1",
  "title": "Read Rust - Tools and Applications",
  "home_page_url": "https://readrust.net/",
  "feed_url": "https://readrust.net/tools-and-applications/feed.json",
  "description": "Tools and Applications posts on Read Rust",
  "author": {
    "name": "Wesley Moore",
    "url": "http://www.wezm.net/"
  },
  "items": [
    {
      "id": "e9565ca9-50f7-4ed7-9acd-485040d90014",
      "title": "GNOME+Rust Hackfest #6 in Roma",
      "content_text": "End of the year, meaning it's time for a new GNOME+Rust hackfest and its feedback!",
      "url": "https://blog.guillaume-gomez.fr/articles/2019-10-24+GNOME%2BRust+Hackfest+%236+in+Roma",
      "date_published": "2019-10-24T21:15:00+00:00",
      "author": {
        "name": "Guillaume Gomez",
        "url": "https://www.guillaume-gomez.fr/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "1206f8f5-e2a7-4679-91c3-d79143268a42",
      "title": "Rust+GNOME Hackfest #6",
      "content_text": "Last week, I went to the sixth Rust+GNOME hackfest which was in Rome. During these hackfests, we work on improving the integration between Rust and the GNOME libraries.",
      "url": "https://antoyo.ml/rust-gnome-hackfest-rome",
      "date_published": "2019-10-24T00:00:00+00:00",
      "author": {
        "name": "Antoni Boucher",
        "url": "http://antoyo.ml/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "1f048104-e5be-49df-9def-c7b4de0d5478",
      "title": "Nushell 0.4.0",
      "content_text": "Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.\n\nToday we’re happy to announce the 0.4.0 release of Nushell. The 0.4.0 release marks a continually maturing shell that is now starting to show signs of stability. And, of course, a few fun features along the way.",
      "url": "http://www.jonathanturner.org/2019/10/nushell-0_4_0.html",
      "date_published": "2019-10-15T00:00:00+00:00",
      "author": {
        "name": "Jonathan Turner",
        "url": "http://www.jonathanturner.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "0932500c-62e0-4379-9e09-eb5ed61d826a",
      "title": "Mun Programming Language",
      "content_text": "The idea to create Mun originated out of frustration with the Lua dynamic scripting language that is extensively used for game development at Abbey Games.\n\nLua's hot reloading capabilities and LuaJIT's performance make it a great language for rapid prototyping of real-time applications - such as games - on PC. However, the language has performance issues on some mobile and console platforms - to which LuaJIT cannot deploy, the language lacks refactoring functionality, and does not scale well with modern technology.\n\nMun tries to take the best of both worlds to create a more robust, highly iterative, productive, and performant programming language.",
      "url": "https://mun-lang.org/",
      "date_published": "2019-10-10T06:38:30+00:00",
      "author": {
        "name": "Mun Developers",
        "url": "https://mun-lang.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "6597a1f3-2858-46de-ab2b-fb2c639759b5",
      "title": "Spotify TUI: Spotify for the terminal written in Rust",
      "content_text": "Spotify TUI: Spotify for the terminal written in Rust.",
      "url": "https://github.com/Rigellute/spotify-tui",
      "date_published": "2019-10-07T00:00:00+00:00",
      "author": {
        "name": "Alexander Keliris",
        "url": "https://github.com/Rigellute"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "f449d35d-98c7-4460-9d42-d6641415e542",
      "title": "Nushell 0.3.0",
      "content_text": "Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines. We’re happy to announce that today we’re releasing Nushell 0.3.0. Nu has seen numerous bugfixes, performance improvements, and features added since its initial public release (which was only a few weeks ago!)",
      "url": "http://www.jonathanturner.org/2019/09/nushell_0_3_0.html",
      "date_published": "2019-09-24T00:00:00+00:00",
      "author": {
        "name": "Jonathan Turner",
        "url": "http://www.jonathanturner.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "5ab7b4e5-a7ab-470c-be66-ec1a8354a782",
      "title": "Actually Using Crev, Or, The Problem Of Trusting Software Dependencies",
      "content_text": "Currently the only implementation of crev is cargo-crev, which ties into the Rust language package manager, cargo. However, none of this is Rust-specific apart from the implementation, the basic concept and code review format should work for any language or package system. Code reviews (“proofs”) are just YAML files, and they can be shared around however you feel like – the method currently seems to be by putting proofs in git repositories, and cargo-crev has support for this. crev already has a pretty good getting started guide that covers much of the same ground as this, but I wanted to write something similar that comes from a random user, not the system’s creator.",
      "url": "https://wiki.alopex.li/ActuallyUsingCrev",
      "date_published": "2019-08-25T00:00:00+00:00",
      "author": {
        "name": "Simon Heath",
        "url": "https://wiki.alopex.li/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "0df32177-8f6b-48ec-a896-5555337110fa",
      "title": "Introduction to C2Rust",
      "content_text": "Our goal is to build useful tools that make it easier to take existing Rust code and get up and running with Rust. We aim to automate much of the translation and rewriting process so that migrating legacy systems is practical and scalable with minimal manual effort.\n\nWe’re excited to announce that a milestone long in the making is finally here! You can now install C2Rust from crates.io with a simple cargo install on Linux and OS X. We’ve been hard at work improving C2Rust, so go install and give it a spin! You can find the necessary prerequisites in the C2Rust README.",
      "url": "https://immunant.com/blog/2019/08/introduction-to-c2rust/",
      "date_published": "2019-08-23T00:00:00+00:00",
      "author": {
        "name": "Immunant, Inc",
        "url": "https://immunant.com/blog"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "adf5ec47-1ec7-4b47-9d89-122b4efdd8f9",
      "title": "Introducing nushell",
      "content_text": "Today, we’re introducing a new shell, written in Rust. It draws inspiration from the classic Unix philosophy of pipelines, the structured data approach of PowerShell, functional programming, systems programming, and more.",
      "url": "http://www.jonathanturner.org/2019/08/introducing-nushell.html",
      "date_published": "2019-08-23T00:00:00+00:00",
      "author": {
        "name": "Jonathan Turner, Yehuda Katz, and Andrés Robalino, with contributions from Odin Dutton",
        "url": "https://book.nushell.sh/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "ce52dbf1-c1be-4db1-bdb9-c2ac79ed9b1d",
      "title": "rx — a minimalist and extensible pixel editor",
      "content_text": "rx is an extensible, modern and minimalist pixel editor implemented in Rust. It's designed to have as little UI as possible, and instead takes inspiration from vi's modal nature and command mode. Compared to other pixel editors, rx aims to be smaller, yet more configurable and extendable. `rx` takes a different approach when it comes to animation as well, which is done with *strips*.",
      "url": "http://cloudhead.io/rx/",
      "date_published": "2019-08-26T20:08:25+00:00",
      "author": {
        "name": "Alexis Sellier",
        "url": "http://cloudhead.io/"
      },
      "tags": [
        "Tools and Applications",
        "Games and Graphics"
      ]
    },
    {
      "id": "315ad655-56d7-48d4-b68a-434cbabf710a",
      "title": "pastel - A command-line tool to generate, analyze, convert and manipulate colors",
      "content_text": "pastel is a command-line tool to generate, analyze, convert and manipulate colors. It supports many different color formats and color spaces like RGB, HSL, CIELAB, CIELCh as well as ANSI 8-bit and 24-bit representations.",
      "url": "https://github.com/sharkdp/pastel",
      "date_published": "2019-08-26T00:00:00+00:00",
      "author": {
        "name": "David Peter",
        "url": "https://github.com/sharkdp"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "05694ac8-0c6b-413c-9853-a487c3d25652",
      "title": "Drawing in GTK in Rust (part 1)",
      "content_text": "It’s a double challenge: I’m learning Rust (but I can say I more or less know the language by now), and I’m trying to use GTK in Rust. I’m a complete beginner in GTK, and even if I know Rust, it does not mean I can use it properly. So I’ll learn a huge library (written in C) by using it in a complex and hard language I just learned. Well, well, good luck, me.",
      "url": "https://medium.com/journey-to-rust/drawing-in-gtk-in-rust-part-1-4a401eecc4e0",
      "date_published": "2019-07-08T07:10:41.840+00:00",
      "author": {
        "name": "George Shuklin",
        "url": "https://medium.com/@george.shuklin"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "a0b1cf6f-32c6-43dc-bfc4-fb86068d84fa",
      "title": "pre-alpha release - meli terminal mail client",
      "content_text": "An early release with basic features and only Maildir support has been published in meli’s git repositories. meli is a new experimental mail client for the terminal. It’s a from-scratch implementation in order to experiment with ideas I had about a client’s design.",
      "url": "https://meli.delivery/posts/2019-06-15-pre-alpha.html",
      "date_published": "2019-06-15T00:00:00+00:00",
      "author": {
        "name": "epilys",
        "url": "https://meli.delivery/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "04a62a1c-2acd-4ee3-8d83-eac3e9bcbca7",
      "title": "Speedy Desktop Apps With GTK and Rust",
      "content_text": "The web platform is the delivery mechanism of choice for a ton of software these days, either through the web browser itself or through Electron, but that doesn’t mean there isn’t a place for a good old fashioned straight-up desktop application in the picture.\n\nFortunately, it’s easier than ever to write a usable, pretty, and performant desktop app, using my language of choice (Rust) and the wildly successful cross-platform GUI framework GTK. In this blog post, we’ll walk through the source code of gDiceRoller. In future posts, I’ll explain how I packaged it for different systems.",
      "url": "https://nora.codes/tutorial/speedy-desktop-apps-with-gtk-and-rust/",
      "date_published": "2019-07-05T14:00:00-07:00",
      "author": {
        "name": "Leonora Tindall",
        "url": "https://nora.codes/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "c7f25b3a-3d76-4b05-85df-6bf59fb5c92a",
      "title": "Aelve Codesearch: Regex-based search across all of crates.io",
      "content_text": "Search the code of all crates published to crates.io.",
      "url": "https://codesearch.aelve.com/rust",
      "date_published": "2019-07-01T00:00:00+00:00",
      "author": {
        "name": "Aelve",
        "url": "https://aelve.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "c0a8ed1e-1273-49c3-b260-a700b475ada5",
      "title": "Rust Regex Playground",
      "content_text": "Web tool to evaluate rust regular expressions.",
      "url": "https://2fd.github.io/rust-regex-playground/#method=find&regex=%5Cw+&text=abc",
      "date_published": "2019-06-11T00:00:00+00:00",
      "author": {
        "name": "Fede Ramirez",
        "url": "https://github.com/2fd"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "6a4e1bf9-728a-4c25-919d-05ae4664366c",
      "title": "Building Standalone Python Applications with PyOxidizer",
      "content_text": "Today, I'm excited to announce the first release of PyOxidizer (project, documentation), an open source utility that aims to solve the Python application distribution problem! (The installation instructions are in the docs.) PyOxidizer's marquee feature is that it can produce a single file executable containing a fully-featured Python interpreter, its extensions, standard library, and your application's modules and resources.",
      "url": "https://gregoryszorc.com/blog/2019/06/24/building-standalone-python-applications-with-pyoxidizer/",
      "date_published": "2019-06-24T09:00:00+00:00",
      "author": {
        "name": "Gregory Szorc",
        "url": "https://gregoryszorc.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "b9742776-a64f-4358-beff-fabdf075d65d",
      "title": "Rustexp: A Rust regular expression editor & tester",
      "content_text": "A Rust regular expression editor & tester inspired by Rubular.",
      "url": "https://rustexp.lpil.uk/",
      "date_published": "2019-06-25T00:00:00+00:00",
      "author": {
        "name": "Louis Pilfold",
        "url": "http://lpil.uk/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "10bad307-4122-4dd4-a0b2-4347b1da1a12",
      "title": "rga: ripgrep, but also search in PDFs, E-Books, Office documents, zip, tar.gz, etc.",
      "content_text": "rga is a line-oriented search tool that allows you to look for a regex in a multitude of file types. rga wraps the awesome ripgrep and enables it to search in pdf, docx, sqlite, jpg, zip, tar.*, movie subtitles (mkv, mp4), etc.",
      "url": "https://phiresky.github.io/blog/2019/rga--ripgrep-for-zip-targz-docx-odt-epub-jpg/",
      "date_published": "2019-06-16T00:00:00+00:00",
      "author": {
        "name": "phiresky",
        "url": "https://phiresky.github.io/blog/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "87146592-5c10-431e-8655-5272eec53ed9",
      "title": "Makepad, a live Rust authoring tool for 2D vector design, shaders and animation",
      "content_text": "The vision is to build a livecoding / design hybrid program, where procedural design and code are fused in one environment. If you have missed 'learnable programming' please check this out: http://worrydream.com/LearnableProgramming/ Makepad aims to fulfill (some) of these ideas using a completely from-scratch renderstack built on the GPU and Rust. It will be like an IDE meets a vector designtool, and had offspring. Direct manipulation of the vectors modifies the code, the code modifies the vectors.\n\nHowever before we can make this awesome application, we need to build a UI stack. The aim of this toolkit is to be our stepping stone into building a livecoding IDE and designtools that don't suck or fall to pieces along the way.",
      "url": "https://github.com/makepad/makepad",
      "date_published": "2019-06-17T00:00:00+00:00",
      "author": {
        "name": "makepad",
        "url": "https://github.com/makepad"
      },
      "tags": [
        "Web and Network Services",
        "Tools and Applications"
      ]
    },
    {
      "id": "55e1be8d-4aae-4753-8bc6-9a52a6401722",
      "title": "Introducing flat-manager",
      "content_text": "A long time ago I wrote a blog post about how to maintain a Flatpak repository. It is still a nice, mostly up to date, description of how Flatpak repositories work. However, it doesn’t really have a great answer to the issue called syncing updates in the post. In other words, it really is more about how to maintain a repository on one machine.\n\nTo support this I’ve been working on a side project called flat-manager. It is a service written in rust that manages Flatpak repositories. Recently we migrated Flathub to use it, and its seems to work quite well.",
      "url": "https://blogs.gnome.org/alexl/2019/03/19/introducing-flat-manager/",
      "date_published": "2019-03-19T13:20:25+00:00",
      "author": {
        "name": "Alexander Larsson",
        "url": "https://blogs.gnome.org/alexl/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "3fab26a6-a1c1-4107-a0c0-c69f2c297342",
      "title": "Emu - GPU programming language for Rust",
      "content_text": "Emu is a language for programming GPUs from Rust. Emu provides the emu! macro for compiling functions written in the Emu language to an intermediate code which gets stored in the EMU global constant. You can then run your code using a binding to OpenCL such as ocl or rust-opencl or use the build! macro which generates Rust functions that can be called to run your Emu functions.",
      "url": "https://calebwin.github.io/emu/",
      "date_published": "2019-06-13T00:00:00+00:00",
      "author": {
        "name": "Caleb Winston",
        "url": "https://github.com/calebwin"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "2ebb2e7a-9b56-4fe3-8605-91c8deb394a9",
      "title": "dua: Disk Usage Analyzer",
      "content_text": "dua (-> Disk Usage Analyzer) is a tool to conveniently learn about the usage of disk space of a given directory. It's parallel by default and will max out your SSD, providing relevant information as fast as possible.",
      "url": "https://github.com/Byron/dua-cli",
      "date_published": "2019-06-01T00:00:00+00:00",
      "author": {
        "name": "Sebastian Thiel",
        "url": "https://github.com/Byron-TW"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "d4eee998-344f-4863-9402-c8636ff8afc0",
      "title": "LambdaCore Programming Language",
      "content_text": "An interpreted language written in Rust inspired by the Lisp family of languages.",
      "url": "https://sites.google.com/view/lcore",
      "date_published": "2019-06-01T00:00:00+00:00",
      "author": {
        "name": "Pebaz",
        "url": "https://github.com/Pebaz"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "834cc4e5-1dd6-446d-966e-8a869ff45f79",
      "title": "battop: top for your laptop battery",
      "content_text": "battop is an interactive viewer, similar to top, htop and other *top utilities, but about batteries installed in your notebook.",
      "url": "https://github.com/svartalf/rust-battop",
      "date_published": "2019-05-30T00:00:00+00:00",
      "author": {
        "name": "Nikita Kuznetsov",
        "url": "https://svartalf.info/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "3eb814d5-d467-4e34-ba31-e0a55da4da36",
      "title": "Introducing Packem: a super fast experimental bundler written in Rust",
      "content_text": "Packem is an experimental precompiled JavaScript module bundler primarily implemented in Rust. It can also handle a variety of other file types like YAML/TOML, fragment shader files and a lot more.",
      "url": "https://medium.freecodecamp.org/introducing-packem-a-super-fast-experimental-bundler-written-in-rust-e981af875517",
      "date_published": "2019-05-15T16:36:27.451+00:00",
      "author": {
        "name": "Bukhari Muhammad",
        "url": "https://medium.freecodecamp.org/@bukharim96"
      },
      "tags": [
        "Web and Network Services",
        "Tools and Applications"
      ]
    },
    {
      "id": "154c7165-f0e5-46e1-96e7-c8338485549f",
      "title": "What’s the best IDE for developing in Rust?",
      "content_text": "A curation of opinions and facts on a variety of Rust IDEs.",
      "url": "https://medium.com/cloud-native-the-gathering/whats-the-best-ide-for-developing-in-rust-5087d46006f5",
      "date_published": "2019-05-13T06:43:35.907+00:00",
      "author": {
        "name": "Tremaine Eto",
        "url": "https://medium.com/@tremaineeto"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "0cbe8a85-0ad7-49b7-b266-db068f4cef8d",
      "title": "Snips Open Sources Tract",
      "content_text": "After open sourcing Snips-NLU a year ago, Snips now shares Tract, a new piece of its embedded voice platform. Tract is Snips’ neural network inference engine.",
      "url": "https://medium.com/snips-ai/snips-open-sources-tract-cdc50f437ef2",
      "date_published": "2019-05-10T13:59:02.567+00:00",
      "author": {
        "name": "Mathieu Poumeyrol",
        "url": "https://medium.com/@mathieu.poumeyrol"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "e0804329-7f79-4ee4-9087-8aa2e8c0b672",
      "title": "Structured Greping Of Structured Logging",
      "content_text": "Why I created a command-line JSON processor.",
      "url": "https://gidi.io/2019/03/01/structured-greping-of-structured-logging-using-grep-for-json.html",
      "date_published": "2019-03-01T21:16:08+00:00",
      "author": {
        "name": "Gidi Meir Morris",
        "url": "https://gidi.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "4b134136-1041-4976-ba52-7e64e767ea89",
      "title": "gptman: A CLI tool and library for managing GUID partition tables",
      "content_text": "A CLI tool for Linux that allows you to copy a partition from one disk to another and more. A library that allows managing GUID partition tables. Features include: Read/Write GPT from 512 and 4096 bytes sector size disks, Create a new GPT on a disk, Insert/delete a partition in the table, Align partitions automatically, Resize a partition, Copy/clone a partition from one disk and insert it to another, Change partition type, Fix partitions order, Change disk GUID, Change partition name, Change partition GUID, Toggle legacy BIOS bootable, Toggle no block IO protocol, Toggle required partition flag, Toggle attributes, Customize columns to print, Print raw data of disklabel, Swap partition indexes, Randomize disk's GUID and all partition's GUID, Copy/clone all partitions from one disk and insert it to another.",
      "url": "https://crates.io/crates/gptman",
      "date_published": "2019-05-02T01:33:00+00:00",
      "author": {
        "name": "Cecile Tonglet",
        "url": "https://twitter.com/CecileTonglet"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "10ce619a-7183-49cf-91c8-99e0f085a272",
      "title": "RustPlayground: Quickly test Rust code on macOS.",
      "content_text": "Rust Playground for MacOS is a standalone native mac application that allows quickly editing and testing rust snippets.",
      "url": "https://github.com/cmyr/RustPlayground",
      "date_published": "2019-04-30T03:59:00+00:00",
      "author": {
        "name": "colin rofls",
        "url": "https://github.com/cmyr"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "767bc80b-e61f-4e0f-8cbb-82655b7aa767",
      "title": "Reviewing Sled: Part III",
      "content_text": "Unusually for me, I had a bit of a pause in reviewing Sled. As a reminder, Sled is an embedded database engine written in Rust. I last stopped looking at the buffer management, but I still don’t really have a good grasp of what is going on. The next file is the iterator. It looks like it translates between segments and messages in these segments.",
      "url": "https://ayende.com/blog/187073-C/reviewing-sled-part-iii",
      "date_published": "2019-04-23T00:00:00+00:00",
      "author": {
        "name": "Ayende Rahien",
        "url": "https://ayende.com/blog/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "47f0e720-8b24-41d0-8f3a-97683b5f03b3",
      "title": "Implementing tile encoding in rav1e",
      "content_text": "During the last few months at Videolabs, I added support for tile encoding in rav1e (a Rust AV1 Encoder). AV1 is an open and royalty-free video coding format, concurrent with HEVC (H.265). Rav1e is an encoder written in Rust, developped by Mozilla/Xiph. As such, it takes an input video and encodes it to produce a valid AV1 bitstream. Tile encoding consists in splitting video frames into tiles that can be encoded and decoded independently in parallel (to use several CPUs), at the cost of a small loss in compression efficiency. This speeds up encoding and increases decoding frame rate.",
      "url": "https://blog.rom1v.com/2019/04/implementing-tile-encoding-in-rav1e/",
      "date_published": "2019-04-25T00:00:00+00:00",
      "author": {
        "name": "Romain Vimont",
        "url": "https://blog.rom1v.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "a3598959-4fde-42aa-9fcf-4310741caa5e",
      "title": "The XV Hex Viewer",
      "content_text": "XV is a terminal hex viewer with a text user interface, written in 100% safe Rust. Licensed under the Apache-2.0 software license. Get it from crates.io by running cargo install xv in your terminal.",
      "url": "https://chrisvest.github.io/xv/",
      "date_published": "2019-04-24T10:34:15+02:00",
      "author": {
        "name": "Chris Vest",
        "url": "https://twitter.com/chvest"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "2d3bd098-bf1d-451b-bef0-b2e84678b4e3",
      "title": "Terminal Redox: Some Developer Tools Written in Rust",
      "content_text": "In my very slow and not very steady quest to learn the Rust programming language, I’ve come across a few projects written in the language that I use everyday. I thought I’d write a quick post about them, with some configuration tricks that I’ve made to make them suit my needs.\n\nWhy prefer tools built with Rust? Rust is a very fast language that also works to ensure safety from a group of bugs and pitfalls. It’s also the four-time-running most loved programming language, according to a yearly Stack Overflow survey. Also, since Rust is only a few years old, any program written in Rust is by definition new. Of course newer doesn’t always mean better, but as a non-professional developer I can afford to be on the edge a bit.",
      "url": "https://sts10.github.io//2019/04/08/terminal-redox-alacritty.html",
      "date_published": "2019-04-08T22:11:00+00:00",
      "author": {
        "name": "Sam Schlinkert",
        "url": "https://sts10.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "f995f40c-77a1-4091-8c38-7ec9c848e3f7",
      "title": "Sonic: a minimalist  alternative to Elasticsearch written in Rust",
      "content_text": "I always end up using Elasticsearch to index documents, to generate autocompletes and for geolocation. Sonic doesn’t solve all three problems but it is a good tool to solve the first two. I have not yet used it in production, but it seems like a good lightweight alternative to Elasticsearch.\n\nSince we love databases and we are trying to focus on Rust projects, Amin Arria and I decided to interview Sonic’s creator, Valerian Saliou, who generously agreed.",
      "url": "https://notamonadtutorial.com/sonic-a-minimalist-alternative-to-elasticsearch-written-in-rust-7f3612ecb47b",
      "date_published": "2019-04-02T16:15:58.458+00:00",
      "author": {
        "name": "unbalancedparentheses",
        "url": "https://notamonadtutorial.com/@unbalancedparen"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "aeb77fc8-4dba-424f-b119-aa77300b683d",
      "title": "Reviewing Sled: Part II",
      "content_text": "Sled is an embedded database engine written in Rust. It takes a very different approach for how to store data, which I’m really excited to see. And with that, let’s be about it. In stopped in my last post when getting to the flusher, which simply sleep and call flush on the iobufs.",
      "url": "https://ayende.com/blog/186785-A/reviewing-sled-part-ii?Key=d48f04ae-25dc-428e-992a-ff38587a7c72",
      "date_published": "2019-04-01T00:00:00+00:00",
      "author": {
        "name": "Ayende Rahien",
        "url": "https://ayende.com/blog/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "49f9c596-e61c-402d-a2de-21c8350ccac6",
      "title": "LeftWM - A tiling window manager for Adventurers",
      "content_text": "A tiling window manager written in Rust for stability and performance. The core of left is designed to do one thing and one thing well. Be a window manager. Because you probably want more than just a black screen LeftWM is built around the concept of theming. With themes you can choose between different bar / compositor / background / colors, whatever makes you happy. LeftWM has been built from the very beginning to support multiple screens and has been built around ultrawide monitors. You will see this with the default key bindings",
      "url": "http://leftwm.org/",
      "date_published": "2019-04-22T00:00:00+00:00",
      "author": {
        "name": "lex148",
        "url": "https://github.com/lex148"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "e57004c9-8a39-47af-bd60-b97fbcd07e7a",
      "title": "cargo-call-stack, part 2: getting call graph information from rustc",
      "content_text": "In a previous post I described the current implementation of cargo-call-stack, a static stack usage analysis tool. In the second part of that post I described the problems the tool runs into when dealing with indirect function calls (both function pointer calls and dynamic dispatch) and proposed improving the output of the tool by having rustc inject type information in the LLVM IR it produces.\n\nWhile discussing that idea with rustc developers they noted that the compiler could emit information that’s more relevant to call graph analysis than just the signatures of functions and trait methods. In this post I’ll describe the call graph metadata I’m currently implementing in rustc and how it will help tools like cargo-call-stack. By the way, I have a feature branch of cargo-call-stack that uses this upcoming rustc feature if you want to try it out but you’ll need to build a custom rustc.",
      "url": "https://blog.japaric.io/stack-analysis-2/",
      "date_published": "2019-04-13T00:00:00+00:00",
      "author": {
        "name": "Jorge Aparicio",
        "url": "http://blog.japaric.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "45b386b4-5b90-42a7-b17b-00aeb72cde34",
      "title": "Keeping Rust projects' README.md code examples up-to-date",
      "content_text": "Because keeping documentation up-to-date is very important (and should be a must have!), we need to check if the examples are still valid after every new updates. Luckily, rustdoc already makes such things very easy. But now, let's say you have examples outside of your Rust code. How can they be tested?",
      "url": "https://blog.guillaume-gomez.fr/articles/2019-04-13+Keeping+Rust+projects%27+README.md+code+examples+up-to-date",
      "date_published": "2019-04-13T01:00:00+00:00",
      "author": {
        "name": "Guillaume Gomez",
        "url": "https://blog.guillaume-gomez.fr/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "700e8697-e3f3-49ff-bf87-03cfb598ff0d",
      "title": "Alacritty Version 0.3.0",
      "content_text": " Alacritty is a terminal emulator with a strong focus on simplicity and performance. With such a strong focus on performance, included features are carefully considered and you can always expect Alacritty to be blazingly fast. By making sane choices for defaults, Alacritty requires no additional setup. However, it does allow configuration of many aspects of the terminal. With this release, Alacritty has officially entered the beta stage – there are still a few missing features and bugs to be fixed, but it is already used by many as a daily driver.",
      "url": "https://blog.christianduerr.com/alacritty_030_announcement",
      "date_published": "2019-04-07T00:00:00+00:00",
      "author": {
        "name": "Christian Duerr",
        "url": "https://blog.christianduerr.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "c702047e-47c7-493a-b73e-55a4394eb6da",
      "title": "hunter: ranger-like file browser written in Rust",
      "content_text": "hunter is a fast and lag-free file browser/manager for the terminal. It features a heavily asynchronous and multi-threaded design and all disk IO happens off the main thread in a non-blocking fashion, so that hunter will always stay responsive, even under heavy load on a slow spinning rust disk, even with all the previews enabled.",
      "url": "https://github.com/rabite0/hunter",
      "date_published": "2019-04-07T00:00:00+00:00",
      "author": {
        "name": "rabite0",
        "url": "https://github.com/rabite0"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "9c952180-dba4-4a50-8104-4d185ce7ac4b",
      "title": "Reviewing Sled: Part I",
      "content_text": "The Sled project is an embedded database written in Rust. I run into it a few times recently and given my day job, I decided to take a peek and understand how it works. The project talks about being Log Structure Merge (and also exposing this to the client) with B+Tree read performance. The last time I read an LSM codebase was quite some time ago, so this is going to be quite interesting, I hope.",
      "url": "https://ayende.com/blog/186753-A/reviewing-sled-part-i",
      "date_published": "2019-03-28T00:00:00+00:00",
      "author": {
        "name": "Ayende Rahien",
        "url": "https://ayende.com/blog/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "a9c1b96b-5e31-432e-bbb8-c18a943d03b9",
      "title": "Inko Programming Language",
      "content_text": "Concurrent and safe object-oriented programming, without the headaches.",
      "url": "https://inko-lang.org/",
      "date_published": "2019-04-03T00:00:00+00:00",
      "author": {
        "name": "Yorick Peterse",
        "url": "https://inko-lang.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "da7566eb-9da3-4f88-9c13-743fd67037a3",
      "title": "Rust + Gtk = Wow",
      "content_text": "As I’ve been experimenting with writing Rust apps, I attempted to create a small little GUI application. At first I attempted to setup everything with Qt, but C++/Qt interoperability with Rust is painful. Very, very painful. I experimented with some more radical UI frameworks such as Azul and Conrad. These have a lot of promise going forward. However for the here and now, I recommend looking at gtk-rs, Rust binding for Gtk.",
      "url": "https://dorianpula.ca/2019/03/22/rust-gtk-wow/",
      "date_published": "2019-03-22T21:54:08+00:00",
      "author": {
        "name": "Dorian Pula",
        "url": "https://dorianpula.ca/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "806cf62c-14c8-4a7e-afa8-f99843d634f2",
      "title": "New cargo subcommand: sync-readme",
      "content_text": "cargo sync-readme synchronizes your README (the file specified by the readme key in your Cargo.toml, or just README.md by default) with the entrypoint of your library or binary crate (by default, lib.rs or main.rs, or what is defined at the path key in your manifest).",
      "url": "https://phaazon.net/blog/cargo-sync-readme",
      "date_published": "2019-02-25T18:50:00+00:00",
      "author": {
        "name": "Dimitri Sabadie",
        "url": "http://phaazon.net/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "b1715412-8fc8-4882-9230-71e2b95c4b55",
      "title": "Introducing cargo-instruments: zero-hassle profiling on macOS",
      "content_text": "cargo-instruments (github) is a cargo plugin that makes it easy to profile rust binaries on macOS.  tl;dr: cargo-instruments is a shim between cargo and Xcode's very powerful dtrace-backed diagnostic suite, Instruments. Out of the box, this lets you track cpu / thread usage, allocations, context switches, and a bunch of other stuff.",
      "url": "https://www.reddit.com/r/rust/comments/b20eca/introducing_cargoinstruments_zerohassle_profiling/",
      "date_published": "2019-03-17T13:18:32+11:00",
      "author": {
        "name": "cmyr",
        "url": "https://www.reddit.com/user/cmyr/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "ec8871ce-7c85-42a8-bd0c-e85c09a2f04d",
      "title": "ActivityWatch automatic time-tracking software switches to Rust",
      "content_text": "While Python is a great language to quickly build new features in, it’s not great for performance or deploying to multiple platforms (especially Android). So @johan-bjareholt took on the tremendous task of reimplementing aw-server in the highly performant and secure programming language Rust. Since Rust compiles to Android we have built a library for use on Android, letting us avoid reimplement all of ActivityWatch to Android devices specifically (and vastly decreases the time to port future features like sync to Android).",
      "url": "https://forum.activitywatch.net/t/development-update-march-2019/189",
      "date_published": "2019-03-12T12:06:19+00:00",
      "author": {
        "name": "Erik Bjäreholt",
        "url": "https://forum.activitywatch.net/u/ErikBjare"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "0c70dd5f-51e6-4f07-8707-6783ca471d0c",
      "title": "Remote Development and Debugging of Rust with CLion",
      "content_text": "Most in our team use CLion for Rust development which is especially great for local debugging, alas it is not free. Since we are developing a blockchain it requires careful orchestration of the nodes running on separate machines, and occasionally we need to debug some corner case on a remotely running node. CLion and other JetBrains products have great support of the remote development and debugging. However, unfortunately, Rust is not a primary language of CLion which makes configuration tricky. In this post we walk through the configuration of CLion for remote Rust development and debugging.",
      "url": "https://medium.com/nearprotocol/remote-development-and-debugging-of-rust-with-clion-39c38ced7cc1",
      "date_published": "2019-03-11T01:18:15.454+00:00",
      "author": {
        "name": "Maksym Zavershynskyi",
        "url": "https://medium.com/@zaver.max"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "569a6623-bebb-48a6-8946-57b158a4a9b8",
      "title": "Mod player in Rust - part 4. Finally some music",
      "content_text": "In this post we will finally have some music. I will spend some time discussing how the Amiga sound hardware worked. The original mod file format and how it is played back is intimately linked with the Amiga hardware.",
      "url": "https://www.codeslow.com/2019/02/in-this-post-we-will-finally-have-some.html",
      "date_published": "2019-02-17T03:50:00-08:00",
      "author": {
        "name": "Jani Peltonen",
        "url": "https://www.codeslow.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "d3f4b805-773f-499e-84c8-b79fcb40631f",
      "title": "Building the virtualization stack of the future with rust-vmm",
      "content_text": "rust-vmm facilitates sharing core virtualization components between Rust Virtual Machine Monitors.",
      "url": "https://opensource.com/article/19/3/rust-virtual-machine",
      "date_published": "2019-03-11T00:00:00+00:00",
      "author": {
        "name": "Andreea Florescu",
        "url": "https://opensource.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "977952df-eb7d-43eb-82e2-3e53b7e00a72",
      "title": "Torchbear - a fast and complete interpreter for the new Speakeasy langauge",
      "content_text": "Torchbear is a new programming environment currently available for Windows, Android, MacOS, and Linux. With it, you get Rust's great library ecosystem, but you don't need to recompile with each change to how you use those libraries. Since you express your domain logic in a higher level scripting language and your system logic in Rust's language, you get the best of both worlds!",
      "url": "https://github.com/foundpatterns/torchbear",
      "date_published": "2019-03-06T13:17:44+11:00",
      "author": {
        "name": "Mitchell Tannenbaum",
        "url": "https://github.com/foundpatterns"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "fee5c201-613a-4b03-832a-369ceb788400",
      "title": "Mod player in Rust - part 3. Audio and threads",
      "content_text": "I finished my last post with having a fully parsed mod file in memory and ready to be played. By the end of this post I want to get the code into a state where the main thread lets the user pick instruments from the mod file and play them back on the audio thread.",
      "url": "https://www.codeslow.com/2019/02/mod-player-in-rust-part-3-audio-and.html",
      "date_published": "2019-02-04T14:42:00-08:00",
      "author": {
        "name": "Jani Peltonen",
        "url": "https://www.codeslow.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "aa9ed2af-2308-4ae8-a009-caf772f96e3b",
      "title": "Part 4: Line IDs in toy version control system, oji",
      "content_text": "I’ve written quite a bit about the theory of patches and merging, but nothing yet about how to actually implement anything efficiently. That will be the subject of this post, and probably some future posts too.",
      "url": "https://jneem.github.io/ids/",
      "date_published": "2019-02-25T00:00:00+00:00",
      "author": {
        "name": "Joe Neeman",
        "url": "https://jneem.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "a1899a77-1a12-49f3-92e2-5e353491c8ae",
      "title": "Forge: A scripting language for Rust gamedev inspired by JS, Rust and Python",
      "content_text": "Forge is a dynamically-typed language written in Rust. It is inspired by JavaScript, Rust, Python and Rhai. In the future, you'll be able to use Forge as a general-purpose lightweight scripting language in your applications.",
      "url": "https://github.com/zesterer/forge",
      "date_published": "2019-02-27T04:21:00+00:00",
      "author": {
        "name": "Joshua Barretto",
        "url": "https://github.com/zesterer"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "53d60351-cb50-4f9f-83d7-e6c8d94ab025",
      "title": "Part 3: Graggles can have cycles",
      "content_text": "Almost two years ago, I promised a series of three posts about version control. The first two (here and here) introduced a new (at the time) framework for version control. The third post, which I never finished, was going to talk about the datastructures and algorithms used in pijul, a version control system built around that new framework. The problem is that pijul is a complex piece of software, and so I had lots of trouble wrapping my head around it.\n\nTwo years later, I’m finally ready to continue with this series of posts (but having learned from my earlier mistakes, I’m not going to predict the total number of posts ahead of time). In the meantime, I’ve written my own toy version control system (VCS) to help me understand what’s going on. It’s called ojo, and it’s extremely primitive: to start with, it can only track a single file. However, it is (just barely) sophisticated enough to demonstrate the important ideas. I’m also doing my best to make the code is clear and well-documented.",
      "url": "https://jneem.github.io/cycles/",
      "date_published": "2019-02-19T00:00:00+00:00",
      "author": {
        "name": "Joe Neeman",
        "url": "https://jneem.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "650d3646-0583-473d-bb43-a2f22f2e8e7d",
      "title": "Rust Lifetime Visualization Ideas",
      "content_text": "Many people have had the idea that there should be a way to visualize lifetimes in Rust. Indeed, the Rust Book used to include ASCII diagrams of lifetimes in some code examples. When fighting the borrow checker, it would be great if the IDE or editor could automatically provide a visualization of the lifetimes in your code.",
      "url": "https://blog.adamant-lang.org/2019/rust-lifetime-visualization-ideas/",
      "date_published": "2019-02-18T00:00:00+00:00",
      "author": {
        "name": "Jeff Walker",
        "url": "https://blog.adamant-lang.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "c921449d-2331-49fc-b265-9219380330ed",
      "title": "Mod player in Rust - part 2",
      "content_text": "My last article finished with reading the pattern tables from the mode files. In this post I want to finish parsing the entire file so we can move onto playing it. First we need to work out where the pattern data is and how long it is.",
      "url": "https://www.codeslow.com/2019/01/mod-player-in-rust-part-2.html",
      "date_published": "2019-01-26T03:39:00-08:00",
      "author": {
        "name": "Jani Peltonen",
        "url": "https://www.codeslow.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "ddee0856-44f0-4b27-a925-8c7b39904a35",
      "title": "Mod player in Rust - part 1",
      "content_text": "For my next Rust project I want to try something a bit more challenging than the Sudoku solver. I want to write a mod player in Rust.",
      "url": "https://www.codeslow.com/2019/01/mod-player-in-rust-part-1.html",
      "date_published": "2019-01-19T12:43:00.001-08:00",
      "author": {
        "name": "Jani Peltonen",
        "url": "https://www.codeslow.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "3a45d462-3f13-451b-8b15-03d07069c3f3",
      "title": "git req | switch branches, not context",
      "content_text": "Check out git branches by their pull (or merge) request ID",
      "url": "https://arusahni.github.io/git-req/",
      "date_published": "2019-02-21T10:16:00+00:00",
      "author": {
        "name": "Aru Sahni",
        "url": "https://arusahni.net/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "ba72d3fb-8f1e-4802-a55b-15dd8584046f",
      "title": "Medic: A Rust CLI that checks the passwords of a KeePass database",
      "content_text": "After the recent breach, I was curious to check my passwords against the list, but I’m a bit paranoid, so, rather than paste my passwords into the Have I Been Pwned website, I wanted to download the big text file and check my passwords against it offline, nice and safely.\n\nI use a password manager called KeePassXC, so all of my passwords are stored in an encrypted file – a KeePass database – and I use a program called KeePassXC, a free and open-source password manager, to manage them (I wrote a beginner’s user guide to KeePassXC a while back if you’re interested!). So ideally, to check my passwords against the big list, I’d have a tool that checks all the passwords in a given KeePass database against the entire HaveIBeenPwned list of passwords, preferably against the downloaded file (i.e. “offline”), rather than the API. In other words something similar to 1Password’s Watchtower feature, but preferably offline.\n\nAfter poking around a bit I decided to write it myself in Rust, with this script and this crate as useful references. Medic is a Rust CLI that can perform a variety of “health” checks on a KeePass database.",
      "url": "https://sts10.github.io/2019/02/01/medic.html",
      "date_published": "2019-02-01T01:15:00+00:00",
      "author": {
        "name": "Sam Schlinkert",
        "url": "https://sts10.github.io/"
      },
      "tags": [
        "Tools and Applications",
        "Security"
      ]
    },
    {
      "id": "a3541593-fc72-40c3-a4b8-7fdad4cab8fe",
      "title": "Introducing swc (speedy web compiler) 1.0",
      "content_text": "swc(speedy web compiler) is a super-fast javascript to javascript compiler. It can transpile typescript / jsx / ecmascript 2019 to browser-compatible javascript. It's 16x - 20x faster than babel even on single-core synchronous benchmark. Note that actual performance gap is larger because swc works on worker thread while babel works on event loop thread.",
      "url": "https://swc-project.github.io/blog/2019/02/08/Introducing-swc-1.0",
      "date_published": "2019-02-08T00:00:00+00:00",
      "author": {
        "name": "DongYoon Kang",
        "url": "https://swc-project.github.io/"
      },
      "tags": [
        "Web and Network Services",
        "Tools and Applications"
      ]
    },
    {
      "id": "a4e3cb9f-0d9d-4a47-98cd-2b51d39b7eb6",
      "title": "A Very Relatable Database: Part 1",
      "content_text": "I like to find ways to fill up my free time over winter breaks. Since I’m not in school for a month, I usually take the time to do some self-study on a topic I find interesting. This past month, it was building a database. Unfortunately, I had only a casual understanding of how a database actually works under the hood, and no idea how to get started. Additionally, I decided to write the database in Rust, since I knew there would be complicated management of data, and I wanted to avoid headaches involving invalid data. Finally, rust’s static garbage collector meant I wouldn’t have to rely on a runtime to guarantee this.\n\nThat was a month ago. While I’m not too far along (mostly due to being busier than expected during the break), I still have things I think are worth sharing.",
      "url": "https://natelincoln.com/a-very-relatable-database/part-1/",
      "date_published": "2019-01-19T00:00:00+00:00",
      "author": {
        "name": "Nate Lincoln",
        "url": "https://natelincoln.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "821ecfae-acd8-4a50-907e-77c394807c86",
      "title": "syswall: a firewall for syscalls",
      "content_text": "A while back I started thinking about software and how it does what it does. Perhaps even more importantly, I started thinking about how we can know what software does, without relying on the software's marketing pitch.",
      "url": "https://www.polaris64.net/blog/programming/2019/syswall-a-firewall-for-syscalls",
      "date_published": "2019-02-16T22:07:25+00:00",
      "author": {
        "name": "Simon Pugnet",
        "url": "https://www.polaris64.net/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "81e00756-52f6-48fe-839e-28c88b690aef",
      "title": "Shipping Rust Binaries with GoReleaser",
      "content_text": "Although GoReleaser supports building just Go projects, it does so much more in the packaging and distribution department that it is extremely hard to ignore.",
      "url": "https://medium.com/@jondot/shipping-rust-binaries-with-goreleaser-d5aa42a46be0",
      "date_published": "2019-02-16T17:47:00.522+00:00",
      "author": {
        "name": "Dotan Nahum",
        "url": "https://medium.com/@jondot"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "da140d7b-47bf-4d63-a3e1-75ade64bed2f",
      "title": "MonkeyType: type inference for transpiling Python to Rust",
      "content_text": "In my previous post about Python to Rust transpiler I’ve said, that one of the biggest problems is absence of types in python and inability to infer them for functions. But it turns out there is a solution to this problem. Guys from Instagram have developed an incredible tool for runtime type inference called MonkeyType. It monitors what types functions accept and return while running a program. This approach works quite nicely so I want to share with you how it’s done.",
      "url": "https://medium.com/@konchunas/monkeytype-type-inference-for-transpiling-python-to-rust-64fa5a9eb966",
      "date_published": "2019-02-15T22:25:31.687+00:00",
      "author": {
        "name": "Julian Konchunas",
        "url": "https://medium.com/@konchunas"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "f2388917-1b08-4e6d-9051-daa496814ab1",
      "title": "Hello, sandboxfs 0.1.0",
      "content_text": "I am pleased to announce that the first release of sandboxfs, 0.1.0, is finally here! You can download the sources and prebuilt binaries from the 0.1.0 release page and you can read the installation instructions for more details.\n\nThe journey to this first release has been a long one. sandboxfs was first conceived over two years ago, was first announced in August 2017, showed its first promising results in April 2018, and has been undergoing a rewrite from Go to Rust.",
      "url": "http://julio.meroh.net/2019/02/hello-sandboxfs-0.1.0.html",
      "date_published": "2019-02-05T09:00:00-05:00",
      "author": {
        "name": "Julio Merino",
        "url": "http://julio.meroh.net/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "7bbec28c-a388-4372-92d9-4d2082454d67",
      "title": "Rust powered CLI apk decompiler",
      "content_text": "Lately I’ve been needing to reverse engineer some apks and I’ve been manually using some third-party tools to do so. But, how could we speed up the process? A little bit of Rust can be very helpful!",
      "url": "https://robertohuertas.com/2019/02/03/rust_cli_apk_decompiler/",
      "date_published": "2019-02-03T00:00:00+00:00",
      "author": {
        "name": "Roberto Huertas",
        "url": "https://robertohuertas.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "2eb82c9e-d427-4beb-9a07-e2fc2f5bb9df",
      "title": "A Python Interpreter written in Rust",
      "content_text": "Goals: Full Python-3 environment entirely in Rust (not CPython bindings). A clean implementation without compatibility hacks",
      "url": "https://github.com/RustPython/RustPython",
      "date_published": "2019-02-06T00:00:00+00:00",
      "author": {
        "name": "RustPython",
        "url": "https://github.com/RustPython/RustPython"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "daf60963-a30c-4e74-82cb-123d2faac884",
      "title": "Using Rust for creating Ubuntu Touch apps",
      "content_text": "This post aims to give you a small introduction to using the Rust programming language for writing apps for Ubuntu touch.",
      "url": "https://timsueberkrueb.io/posts/2019/01/18/rust-ubuntu-touch-app-dev/",
      "date_published": "2019-01-20T00:00:00+00:00",
      "author": {
        "name": "Tim Süberkrüb",
        "url": "https://timsueberkrueb.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "559ed8de-7e83-4caa-aef1-f2b5fd7faa01",
      "title": "Notion: the hassle-free JavaScript toolchain manager",
      "content_text": "Reliable: Ensure everyone in your project uses an identical dev environment, from the Node version to your preferred package manager.\n\nUniversal: Enjoy the same command-line experience in every shell and every major operating system.\n\nFast: Notion is implemented in Rust and deployed as a static executable for maximum performance.",
      "url": "https://github.com/notion-cli/notion",
      "date_published": "2019-02-06T06:23:00+00:00",
      "author": {
        "name": "LinkedIn Engineering",
        "url": "https://github.com/notion-cli"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "8a353b9f-bb7e-40d7-a5ab-fd5372ad76f4",
      "title": "Packaging a game for Windows, Mac, and Linux with Rust.",
      "content_text": "Building a cross platform game for desktop operating systems in Rust is fairly doable without needing much platform specific code. Glutin is a Rust alternative to SDL for handling window creation & input. GFX handles most of the graphics API abstraction for you. You still write the shaders, but I was able to just use OpenGL and get it working on Windows 10, MacOS, and Ubuntu.",
      "url": "https://agmprojects.com/blog/packaging-a-game-for-windows-mac-and-linux-with-rust",
      "date_published": "2019-02-02T23:53:56+00:00",
      "author": {
        "name": "Aaron McLeod",
        "url": "https://agmprojects.com/"
      },
      "tags": [
        "Games and Graphics",
        "Tools and Applications"
      ]
    },
    {
      "id": "0be32871-6687-4e3d-9cab-5bbb411c9cc0",
      "title": "A detailed guide to writing your first Neovim plugin in Rust",
      "content_text": "I recently wrote a plugin in Rust to control the Spotify desktop app for MacOS and find lyrics from within Neovim and found it to be a neat experience overall, and that’s coming from someone who isn’t a Rust expert. This post is a summary of all the research and discovery that happened during that process.",
      "url": "https://medium.com/@srishanbhattarai/a-detailed-guide-to-writing-your-first-neovim-plugin-in-rust-a81604c606b1",
      "date_published": "2019-02-04T09:58:50.953+00:00",
      "author": {
        "name": "Srishan Bhattarai",
        "url": "https://medium.com/@srishanbhattarai"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "4afbd4d0-42ae-460f-8805-22e094fb394b",
      "title": "sharkdp/hexyl: A command-line hex viewer",
      "content_text": "hexyl is a simple hex viewer for the terminal. It uses a colored output to distinguish different categories of bytes (NULL bytes, printable ASCII characters, ASCII whitespace characters, other ASCII characters and non-ASCII).",
      "url": "https://github.com/sharkdp/hexyl",
      "date_published": "2019-01-10T00:00:00+00:00",
      "author": {
        "name": "David Peter",
        "url": "https://dev.to/sharkdp"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "4a2d72d8-3aa4-4c82-a95f-847f3e0c650d",
      "title": "I made MPD index SoundCloud, here's how I did it",
      "content_text": "The usual process of playing something on our music server is a bit cumbersome: I have to browse SoundCloud, download a track that seems interesting, upload it to the music server, let MPD index it, and then play it.\n\nTo make my life easier, I wanted to leverage Linux’s FUSE interface to expose the audio on SoundCloud as a bunch of files in a folder which MPD could then index and play from. I could have taken a couple of other approaches such as swapping MPD with Mopidy, an MPD-compatible music player with SoundCloud support, or a scraper that periodically downloads the latest audio from my feed. And while these alternatives were probably easier to implement, I went for the FUSE driver because I thought it was cool.",
      "url": "https://polyfloyd.net/post/soundcloud-fuse-mpd/",
      "date_published": "2019-01-02T00:00:00+00:00",
      "author": {
        "name": "polyfloyd",
        "url": "https://polyfloyd.net/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "ea33097d-8f78-4d8d-9f75-bc9305380398",
      "title": "PyOxidizer: Make distributable Python applications using Rust",
      "content_text": "PyOxidizer is a collection of Rust crates that facilitate building libraries and binaries containing Python interpreters. PyOxidizer is capable of producing a single file executable - with all dependencies statically linked and all resources (like .pyc files) embedded in the executable.",
      "url": "https://github.com/indygreg/pyoxidizer",
      "date_published": "2019-01-03T00:00:00+00:00",
      "author": {
        "name": "Gregory Szorc",
        "url": "https://github.com/indygreg"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "c4069a09-be22-45a1-a39b-3067584379a8",
      "title": "Debugging Rust with VSCode on FreeBSD",
      "content_text": "The following is a set of notes for installing VSCode on FreeBSD and getting a debugger up and running in a step by step guide. I thought I would share them in a full post as having a full IDE with syntax and error highlighting along with detailed in-context explanations has been really useful as I get to grips with Rust.",
      "url": "https://venshare.com/debugging-rust-with-vscode-on-freebsd/",
      "date_published": "2018-12-28T23:56:37+00:00",
      "author": {
        "name": "Anton Whalley",
        "url": "https://venshare.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "8aa85a12-b1d3-4e8d-a2b9-39356878a151",
      "title": "Analyze disk usage with dutree",
      "content_text": "dutree is a command line tool to analyze disk usage.",
      "url": "https://ownyourbits.com/2018/03/25/analyze-disk-usage-with-dutree/",
      "date_published": "2018-03-25T16:10:54+00:00",
      "author": {
        "name": "nachoparker",
        "url": "https://ownyourbits.com/author/cisquero_admin/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "bf6eb06b-346b-4f0c-a294-ee1dde663418",
      "title": "Rust Analyzer in 2018 and 2019",
      "content_text": "Hi! I am Aleksey Kladov (aka @matklad). In the past, I've worked at Jet Brains where I've helped to create the IntelliJ Rust plug-in, and now I am a part of the Ferrous Systems team.\n\nI've spent a significant amount of the last year experimenting with various approaches to make the Rust IDE story better. The culmination of my experiments is the rust-analyzer project – an experimental Rust compiler frontend, targeting the IDE/Language Server Protocol use case.",
      "url": "https://ferrous-systems.com/blog/rust-analyzer-2019/",
      "date_published": "2018-12-15T00:00:00+00:00",
      "author": {
        "name": "Aleksey Kladov",
        "url": "https://ferrous-systems.com/blog/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "629810d5-0f02-4ef1-9826-32cd4bc2f048",
      "title": "Tools in the 2018 edition",
      "content_text": "In this blog post I'll cover Clippy and Rustfmt – two tools that have been around for a few years and are now stable and ready for general use. I'll also cover IDE support – a key workflow for many users which is now much better supported. I'll start by talking about Rustfix, a new tool which was central to our edition migration plans.",
      "url": "https://blog.rust-lang.org/2018/12/17/Rust-2018-dev-tools.html",
      "date_published": "2018-12-17T00:00:00+00:00",
      "author": {
        "name": "The Dev-tools team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "20ba5c8d-b4f2-4ae5-af75-7631ccc05f12",
      "title": "cargo-inspect: A Little Tool for Exploring Rust Internals",
      "content_text": "Rust allows for a lot of syntactic sugar, that makes it a pleasure to write. It is sometimes hard, however, to look behind the curtain and see what the compiler is really doing with our code. I wondered if there was a tool, which revealed what Rust was doing behind the curtains.",
      "url": "https://matthias-endler.de/2018/cargo-inspect/",
      "date_published": "2018-12-01T00:00:00+00:00",
      "author": {
        "name": "Matthias Endler",
        "url": "https://matthias-endler.de/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "5527d11f-6f5e-47f4-b208-c90499764f04",
      "title": "Build Your Own Shell using Rust",
      "content_text": "This is a tutorial on building your own shell using Rust, in the spirit of the build-your-own-x list. Creating a shell is a great way to understand how the shell, terminal emulator, and OS work together.",
      "url": "https://www.joshmcguigan.com/blog/build-your-own-shell-rust/",
      "date_published": "2018-11-17T00:00:00+00:00",
      "author": {
        "name": "Josh Mcguigan",
        "url": "https://www.joshmcguigan.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "d8946b80-5782-44b2-80d9-9ac2e18eb5d0",
      "title": "Qt applications with Cargo",
      "content_text": "This blog shows how Qt applications can be built with Cargo. The goal is to make compiling them as simple as installing Qt and running cargo build.",
      "url": "https://www.vandenoever.info/blog/2018/10/30/building_qt_apps_with_cargo.html",
      "date_published": "2018-10-30T00:00:00+00:00",
      "author": {
        "name": "Jos van den Oever",
        "url": "https://www.vandenoever.info/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "fac60173-70f5-4682-a698-716cf05306ce",
      "title": "korq: Kubernetes Dynamic Log Tailing Utility",
      "content_text": "K∅RQ is used for tailing pod logs concurrently and following groups at once. It was basically a need to follow logs during deployment and see how instances behave during and after deployment. This is the main motive behind K∅RQ.",
      "url": "https://vertexclique.github.io/korq/",
      "date_published": "2018-10-23T00:00:00+00:00",
      "author": {
        "name": "Mahmut Bulut",
        "url": "https://vertexclique.github.io/"
      },
      "tags": [
        "DevOps and Deployment",
        "Tools and Applications"
      ]
    },
    {
      "id": "2b068be3-88b7-4d60-ad38-cfd40019cf5f",
      "title": "imag: Call for Participation (1)",
      "content_text": "This is the first call for participation for the imag project. I have no experience writing such calls for participation, so please bear with me!\n\nRight now, the imag ecosystem has some tools available which are already usable and in rather good shape. There is a contact manager, a diary and a notes tool, a habit tracker and a time tracker are there as well, though those are not extensively tested by now.",
      "url": "https://imag-pim.org/blog/2018/10/10/call-for-participation-1/",
      "date_published": "2018-10-10T08:42:06+00:00",
      "author": {
        "name": "imag",
        "url": "https://imag-pim.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "cb2bfe24-75a2-43d6-bebc-b8f8ac610c95",
      "title": "Rust Programming with Dynamsoft Barcode Reader",
      "content_text": "A few days ago, I accepted a new challenge of creating a simple command line barcode reader using Rust and Dynamsoft Barcode Reader SDK. Rust is a system programming language similar to C++. The learning process did not go through smoothly as I expected. It is not as easy as learning other high-level programming languages such as Java and Python. In this article, I share my experience of learning and using Rust.",
      "url": "https://medium.com/@yushulx/rust-programming-with-dynamsoft-barcode-reader-3d1e83004bba",
      "date_published": "2018-10-11T00:26:20+00:00",
      "author": {
        "name": "Xiao Ling",
        "url": "https://medium.com/@yushulx"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "2657be5e-f98f-48a7-9e0a-c4ad2c183cba",
      "title": "ruplacer: find and replace text in source files",
      "content_text": "Today I’d like to talk about a command-line tool I’ve been working on. It’s called ruplacer and as the name suggest, it’s rually cool and written in Rust. Basically, it finds and replaces text in source files.",
      "url": "https://dmerej.info/blog/post/ruplacer/",
      "date_published": "2018-10-14T12:34:43+00:00",
      "author": {
        "name": "Dimitri Merejkowsky",
        "url": "https://dmerej.info/blog/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "49cace2a-ebaf-4aec-b41b-8fb7aa67acc8",
      "title": "Remacs continues to improve",
      "content_text": "As you doubtless know, Emacs has an embedded Lisp environment that provides a large number of intersting Lisp functions that the user can call. Many of these are implemented in C for speed, and we've been rewriting them in Rust. So far we've ported 394 individual Lisp functions from C to Rust, of which 207 were ported in this last year. This is about a third of the total, as you can see by this graph. We've actually completely ported several whole C files now.",
      "url": "http://db48x.net/rust-remacs-2018/",
      "date_published": "2018-10-09T12:35:00+00:00",
      "author": {
        "name": "db48x",
        "url": "http://db48x.net/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "0a206ee6-7e54-4570-9f0c-8040fb9cd530",
      "title": "Running Little Rust Snippets with Runner",
      "content_text": "runner is mostly a clever wrapper around normal Cargo operations. runner acts like an interpreter. There is no forced directory structure, just source. But it’s just using rustc under the hood in the most direct way possible.",
      "url": "https://stevedonovan.github.io/rustifications/2018/09/23/runner.html",
      "date_published": "2018-09-23T00:00:00+02:00",
      "author": {
        "name": "Steve Donovan",
        "url": "http://stevedonovan.github.io/rustifications/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "5a387bd6-85b7-439d-97d4-fdb76fec80c5",
      "title": "Hegemon: A modular system monitor written in Rust",
      "content_text": "Hegemon is a work-in-progress modular system monitor written in safe Rust. Currently, it has the following features: Monitor CPU and memory usage, temperatures, and fan speeds; expand any data stream to reveal a more detailed graph and additional information, adjustable update interval.",
      "url": "https://github.com/p-e-w/hegemon",
      "date_published": "2018-09-22T00:00:00+00:00",
      "author": {
        "name": "Philipp Emanuel Weidmann",
        "url": "http://worldwidemann.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "e3bb7297-9e70-4070-a2aa-8bb8f9a5eaf2",
      "title": "A Sudoku Solver & Generator 🔢",
      "content_text": "For a small side project I’m working on, I’m using a Sudoku puzzle solver and puzzle generator that I’ve written in Rust. The experience was fun, so I thought I’d write up a little bit about the algorithm I’ve used and some interesting stats about how it performs.",
      "url": "https://blog.ryanlevick.com/posts/sudoku-solver-generator/",
      "date_published": "2018-09-16T00:00:00+00:00",
      "author": {
        "name": "Ryan Levick",
        "url": "https://blog.ryanlevick.com/"
      },
      "tags": [
        "Tools and Applications",
        "Performance"
      ]
    },
    {
      "id": "c75159c1-4e8c-4b09-9371-430cc5971b94",
      "title": "TOTP generator with account handling for multiple tokens",
      "content_text": " a totp generator I wrote a while ago in C++ but now it’s in rust. It can generate a token and save it into an account file that is AES encrypted. The password is never saved, so it’s secure enough to use it. One of it’s properties it will have over the c++ implementation is it’s safe, it uses a proper IV and once I’m done, it will also support encryption via PGP.",
      "url": "https://skarlso.github.io/2018/09/13/gotp/",
      "date_published": "2018-09-13T08:01:00+01:00",
      "author": {
        "name": "Gergely Brautigam",
        "url": "https://skarlso.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "790afaff-5784-4b34-82eb-38a05a05a0ec",
      "title": "Browsing your mail with Rust and Qt",
      "content_text": "Let’s write a mail viewer with Rust and Qt. This is another blog about Rust Qt Binding Generator, the project that lets you add a Qt GUI to your Rust code, or if you will, add Rust to your Qt program.",
      "url": "https://www.vandenoever.info/blog/2018/09/16/browsing_your_mail_with_rust_and_qt.html",
      "date_published": "2018-09-16T00:00:00+00:00",
      "author": {
        "name": "Jos van den Oever",
        "url": "https://www.vandenoever.info/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "4f00ccb1-9966-4c6d-83e9-0e8032ff68a4",
      "title": "Alacritty now supports scrollback",
      "content_text": "Alacritty, the OpenGL terminal emulator written in Rust, now supports scrollback! Performance has improved, and we've got benchmarks to share.",
      "url": "https://jwilm.io/blog/alacritty-lands-scrollback/",
      "date_published": "2018-09-16T17:00:00-07:00",
      "author": {
        "name": "Joe Wilm",
        "url": "https://jwilm.io/blog"
      },
      "tags": [
        "Tools and Applications",
        "Performance"
      ]
    },
    {
      "id": "a92cab79-16fc-46b9-9bdb-0eb21518db8c",
      "title": "Rust at Datalust",
      "content_text": "At Datalust we build a log server called Seq. It's really a database, written in C#, with its own SQL-based query language, that's specifically designed for storing and querying structured log data. In the past, Seq has managed log event storage through ESENT, which is a storage technology baked into Windows. For our cross-platform Seq 5 release we’ve built a storage engine called Flare in the Rust programming language to replace our usage of ESENT.",
      "url": "https://blog.getseq.net/rust-at-datalust/",
      "date_published": "2018-09-03T22:18:30+00:00",
      "author": {
        "name": "Ashley Mannix",
        "url": "https://blog.getseq.net/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "8b60e040-4635-4a84-b8a6-3e0f2933f066",
      "title": "Password Generation in Ruby and Rust",
      "content_text": "Writing the same password generator in two different languages to learn more Rust.",
      "url": "https://hur.st/blog/2018/08-25-password-generation-in-ruby-and-rust/",
      "date_published": "2018-08-25T00:00:00+00:00",
      "author": {
        "name": "Thomas Hurst",
        "url": "https://hur.st/"
      },
      "tags": [
        "Tools and Applications",
        "Getting Started"
      ]
    },
    {
      "id": "e2e12b4d-817f-4c1b-997f-285d9eec6a74",
      "title": "IntelliJ Rust features. Entry one: Macros",
      "content_text": "In this series of short blog posts, we are going to take a closer look at the key Rust related features present in JetBrains IDEs through our corresponding plugin.",
      "url": "https://blog.jetbrains.com/clion/2018/08/intellij-rust-features-entry-one-macros/",
      "date_published": "2018-08-24T16:11:11+00:00",
      "author": {
        "name": "Kirill Malich",
        "url": "https://blog.jetbrains.com/clion/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "4f79a6a7-0d44-44ce-b82c-c4376e073660",
      "title": "C2rust - A bridge to C",
      "content_text": "The c2rust project exists to help bridge the fact that there is a lot of valuable software written in C and that there have been great strides in making safer and more-reliable programming languages since C was designed. Rust offers many modern improvements for C while still preserving the low-level control that makes it attractive. Beyond that, Rust provides new abstraction capabilities like parametricity, type-traits, methods, a module system, thread-safety, and more.",
      "url": "https://galois.com/blog/2018/08/c2rust/",
      "date_published": "2018-08-14T18:16:29+00:00",
      "author": {
        "name": "Eric Mertens",
        "url": "https://galois.com/blog/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "fdc8eef0-1b02-41f7-8340-faf4660db183",
      "title": "Journey into Gentoo eclass",
      "content_text": "I spent some days writing a portage eclass for Gentoo. I want to share my experience.",
      "url": "https://gibix.github.io/gsoc/2018/08/11/journey-into-gentoo-eclass.html",
      "date_published": "2018-08-11T00:00:00+00:00",
      "author": {
        "name": "gibix",
        "url": "https://gibix.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "424adcbb-d3de-467b-8ca2-af877e849e85",
      "title": "Introducing the Routinator 3000",
      "content_text": "NLnet Labs is embarking on a new adventure. In the coming months we will be developing an RPKI toolset aimed at making BGP routing more secure. It will consist of three parts: a Certificate Authority package, a Publication Server and Relying Party software. We’ve chosen to do the development in a modern systems programming language, Rust.",
      "url": "https://medium.com/nlnetlabs/introducing-the-routinator-3000-2a234d455b2b",
      "date_published": "2018-07-26T14:43:27.275+00:00",
      "author": {
        "name": "Alex Band",
        "url": "https://medium.com/@alexander_band"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "df22bc28-0b6f-4d1a-960a-9e29ca258b53",
      "title": "Incremental Parsing in Amp",
      "content_text": "With the latest release of Amp (text editor), syntax highlighting has been overhauled. This post dives into the performance-related redesign that has landed with v0.5.",
      "url": "https://medium.com/@jordan_98525/incremental-parsing-in-amp-ba5e8c3e85dc",
      "date_published": "2018-08-14T16:13:52.640+00:00",
      "author": {
        "name": "Jordan MacDonald",
        "url": "https://medium.com/@jordan_98525"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "1d84906a-4085-4d87-8f43-786f1d531f44",
      "title": "Kickstart - a fast and simple project template bootstrapper",
      "content_text": "Ever had some code base that you regularly use to start a new project? Until now, you've probably lost some time refactoring everything to fill out the right project name, title etc. A few tools already exist but either you're lost in feature bloating hell or you're fighting to configure everything in most cases. The following tool is an early-developement, rust-based, template tool made to be more versatile that its closest python counter-part, cookiecutter.",
      "url": "https://blog.artemix.org/article/show/kickstart",
      "date_published": "2018-08-08T23:02:19+00:00",
      "author": {
        "name": "Artemis",
        "url": "https://blog.artemix.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "7161b1be-54de-4776-857e-3ef78df24125",
      "title": "Pax: A fast dev time JavaScript bundler",
      "content_text": "Don’t waste time waiting for your bundler to do its thing. Use Pax while you’re developing, and iterate to your heart’s content. Use your super-cool, magical, slow-as-molasses bundler for releases, when you don’t care how long it takes to run.",
      "url": "https://pax.js.org/",
      "date_published": "2018-07-25T12:59:16+00:00",
      "author": {
        "name": "Nathan",
        "url": "https://pax.js.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "1e54b1bb-953c-4149-b09c-9d1d3f7046cf",
      "title": "glitchcat — Creating CLI apps in Rust is super easy",
      "content_text": "glitchcat is a cat-like program with glitch animation.",
      "url": "https://blog.kuviman.com/2018/07/20/glitchcat.html",
      "date_published": "2018-07-20T00:00:00+00:00",
      "author": {
        "name": "kuviman",
        "url": "https://blog.kuviman.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "d32e6dac-51d6-4ede-9a7f-10f0bea2ca8a",
      "title": "Bioyino — a distributed, scalable metric aggregator",
      "content_text": "So, you collect metrics. So do we. Yep, we also collect them. We can assure you that they are not useless at all, business guys do need…",
      "url": "https://medium.com/avitotech/bioyino-a-distributed-scalable-statsd-3445acb177eb",
      "date_published": "2018-07-05T10:07:52.180+00:00",
      "author": {
        "name": "Sergey N",
        "url": "https://medium.com/@albibek"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "18d063ca-b781-400f-9e5f-1534b5b90630",
      "title": "CLion IDE Rust plugin update: language support improvements, new quick-fixes, improved debugger and more",
      "content_text": "CLion 2018.2 was released just recently. Along with the release, the Rust plugin has had an update! In this blog post, we’d like to highlight some of the main improvements in the plugin.",
      "url": "https://blog.jetbrains.com/clion/2018/08/intellij-rust-update-2018_2/",
      "date_published": "2018-08-02T11:01:28+00:00",
      "author": {
        "name": "Anastasia Kazakova",
        "url": "https://blog.jetbrains.com/clion/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "c1718910-2677-4da4-a45f-a8bd055fe075",
      "title": "Gutenberg 0.4.0: custom taxonomies, image processing and more",
      "content_text": "Gutenberg 0.4.0 is out with custom taxonomies, image processing, improved shortcodes and more.",
      "url": "https://www.vincentprouillet.com/blog/releasing-gutenberg-0-4-0/",
      "date_published": "2018-08-04T00:00:00+00:00",
      "author": {
        "name": "Vincent Prouillet",
        "url": "https://www.vincentprouillet.com/blog/"
      },
      "tags": [
        "Tools and Applications",
        "Crates"
      ]
    },
    {
      "id": "1bc929f4-2800-466c-bd70-fb73f7b70ef8",
      "title": "Easily Analyzing Your S3 Buckets",
      "content_text": "mazon S3 is a storage solution used by pretty much everyone these days. Due to this there are naturally a bunch of tools for doing almost everything you can think of with S3. This post is about a tool I wrote to retrieve metadata about S3 buckets. If you don't care for the post, feel free to skip straight to the repo.",
      "url": "http://whitfin.io/analyzing-your-buckets-with-s3-meta/",
      "date_published": "2018-08-04T17:44:06+00:00",
      "author": {
        "name": "Isaac Whitfield",
        "url": "https://whitfin.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "81096070-a563-47a0-8f09-2e5fb3c1b984",
      "title": "Sequoia, a new OpenPGP implementation",
      "content_text": "This past fall, three former GnuPG developers began working on a new OpenPGP implementation in Rust called Sequoia. As it’s starting to shape up and become useful, I feel now is a good time to announce the project to the larger Rust community, and hopefully get some feedback before our first release.",
      "url": "https://www.reddit.com/r/rust/comments/93mng5/ann_sequoia_a_new_openpgp_implementation/",
      "date_published": "2018-08-01T16:50:12+10:00",
      "author": {
        "name": "/u/nwalfield",
        "url": "https://sequoia-pgp.org/"
      },
      "tags": [
        "Tools and Applications",
        "Crates"
      ]
    },
    {
      "id": "31fd7758-63f6-4e38-8331-bd27fd6324ba",
      "title": "Recommending books (with Rust)",
      "content_text": "In this post, we’re going to build a sequence-based recommender system in Rust: a system that accepts a person’s reading history as input, and outputs recommendations on what to read next.",
      "url": "https://maciejkula.github.io/2018/07/27/recommending-books-with-rust/",
      "date_published": "2018-07-27T09:17:00-07:00",
      "author": {
        "name": "Maciej Kula",
        "url": "https://maciejkula.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "bf6d4501-afb3-40dc-aa8a-bef247e2e77b",
      "title": "Why I Ripped The Same CD 300 Times",
      "content_text": "The piano arrangement album 帰るべき城 by Altneuland was published in 2005. I discovered it in 2008 (probably on YouTube), downloaded the best copy I could find, and filed it away in the TODO list. Recent advances in international parcel forwarding technology let me buy a used copy last year, but when it arrived none of my CD drives could read track #3. This sort of thing is common when buying used CDs, especially if they need to transit a USPS international shipping center. I shelved it and kept on the lookout for another copy, which I located last month. It arrived on Friday, I immediately tried to rip it, and hit the exact same error. This didn’t seem to be an issue of wear or damage…",
      "url": "https://john-millikin.com/%F0%9F%A4%94/why-i-ripped-the-same-cd-300-times",
      "date_published": "2018-08-02T00:00:00+00:00",
      "author": {
        "name": "John Millikin",
        "url": "https://john-millikin.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "4c6bb401-ff09-4bce-a6d2-d598777a0ce2",
      "title": "fastcat - A Faster 'cat' Implementation Using Splice",
      "content_text": "Lots of people asked me to write another piece about the internals of well-known Unix commands. Well, actually, nobody asked me, but it makes for a good intro. I'm sure you’ve read the previous parts about yes and ls — they are awesome.\n\nAnyway, today we talk about cat, which is used to concatenate files - or, more commonly, abused to print a file's contents to the screen.",
      "url": "https://matthias-endler.de/2018/fastcat/",
      "date_published": "2018-07-01T00:00:00+00:00",
      "author": {
        "name": "Matthias Endler",
        "url": "https://matthias-endler.de/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "14507477-073a-4055-a2de-b0e4c4fd2ad5",
      "title": "Announcing Vagga 0.8.1 – PaulColomiets",
      "content_text": "We are excited to announce the next version of vagga, the containerization tool that makes setting up development environments easy and fun. This release brings local overrides for vagga commands, support of ubuntu bionic, better CI support, space reuse between multiple projects, and more.",
      "url": "https://medium.com/@paulcolomiets/announcing-vagga-0-8-1-5e1fd44ee6fa",
      "date_published": "2018-07-31T19:39:25.963+00:00",
      "author": {
        "name": "PaulColomiets",
        "url": "https://medium.com/@paulcolomiets"
      },
      "tags": [
        "Tools and Applications",
        "DevOps and Deployment"
      ]
    },
    {
      "id": "9ceafb2d-9937-48c9-9deb-ff9d1ebd19d3",
      "title": "cargo-generate: create a new Rust project from a template ",
      "content_text": "cargo-generate is a developer tool to help you get up and running quickly with a new Rust project by leveraging a pre-existing git repository as a template.",
      "url": "https://github.com/ashleygwilliams/cargo-generate",
      "date_published": "2018-07-18T06:59:00+00:00",
      "author": {
        "name": "Ashley Williams",
        "url": "https://github.com/ashleygwilliams"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "a9a551b0-07a6-48a2-944f-b956438fecc0",
      "title": "How we built a Visual Studio Code extension for IoT prototyping",
      "content_text": "We recently had the opportunity to make a Visual Studio Code extension that needed to communicate with an embedded device. This post explains the architecture we chose to achieve that and the decisions that led to it.",
      "url": "https://cultivatehq.com/posts/how-we-built-a-visual-studio-code-extension-for-iot-prototyping/",
      "date_published": "2018-07-13T22:39:00+00:00",
      "author": {
        "name": "Dan Munckton",
        "url": "https://cultivatehq.com/posts/"
      },
      "tags": [
        "Tools and Applications",
        "Embedded"
      ]
    },
    {
      "id": "504568b7-fb85-4ed5-b94d-1c96333d2c64",
      "title": "Moving from the shell to Rust with commandspec",
      "content_text": "Almost every project I’ve worked on has grown a shell script named “build.sh”, and not much later a “test.sh” and “run.sh”. At this point, you have to make a decision as a developer whether your goal is to accidentally reinvent make or if your codebase’s needs are better met by an executable to manage your workflow.",
      "url": "http://timryan.org/2018/07/02/moving-from-the-shell-to-rust-with-commandspec.html",
      "date_published": "2018-07-02T15:50:00+00:00",
      "author": {
        "name": "Tim Ryan",
        "url": "http://timryan.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "09393d03-bb17-4f1e-8d5a-5dc8338ff513",
      "title": "Nannou open source creative coding framework",
      "content_text": "Nannou is an open source creative coding framework built in Rust for artists, hackers, designers and devs to express themselves with simple, fast, reliable, portable code.",
      "url": "http://nannou.cc/news/hello-nannou/",
      "date_published": "2018-06-14T07:24:05+00:00",
      "author": {
        "name": "Mitch, Josh, Keenan & Tom",
        "url": "http://nannou.cc/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "f6f626f4-47ff-427c-8d44-b63c457bed46",
      "title": "devtop: Command line parser",
      "content_text": "As operator I found that existing tooling fails with large number of unusual devices. If you have server with >100 virtual machines, and each virtual machines have one or more additional disk and a few network interfaces, it’s hard to find which VM cause stress on the server. Normal atop simply couldn’t cope with hundreds of tap/tun interfaces, multitude of block devices, etc. When I found that I have no proper tooling (as an operator) I wrote a shabby tools to do my job: they are calling blktop and ifstop. Both were written dirty and fast, and they does not follow the usual Python conventions (but they work as standalone binaries). They do their job, and normally I would say that’s enough. But those utilities are simple and have no big complications under the hood, so they are perfect candidates for rewriting in Rust for the sake of writing in Rust (I’m learning it!). I decide to combine them into a single utility: devtop, which I want to develop properly, according to Rust conventions, and through all aspects of packaging.",
      "url": "https://medium.com/journey-to-rust/devtop-command-line-parser-f08b72b02bea",
      "date_published": "2018-06-24T14:21:28.810+00:00",
      "author": {
        "name": "George Shuklin",
        "url": "https://medium.com/@george.shuklin"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "81e1a990-ce97-4ab6-a943-720330b5db6e",
      "title": "Oxy - A Security Focused Remote Access Tool",
      "content_text": "It's like SSH, but more secure, and with cool modern features. It is not an implementation of SSH, it is a new, modern protocol.",
      "url": "https://oxy-secure.app/",
      "date_published": "2018-06-24T23:58:43+10:00",
      "author": {
        "name": "Jenna Magius",
        "url": "https://oxy-secure.app/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "b93a3070-a495-46de-a9e1-a1c650cafec3",
      "title": "Finda Websocket Architecture",
      "content_text": "Finda lets you search and instantly switch between tabs in browsers like Firefox and Chrome and editors like Sublime Text and Visual Studio Code. It does this by communicating with these programs over local websocket connections. This article describes the design tradeoffs of this system, focusing on Rust implementation details that may be helpful to others building similar systems.",
      "url": "https://keminglabs.com/blog/finda-websocket-architecture/",
      "date_published": "2018-06-20T00:00:00+00:00",
      "author": {
        "name": "Kevin J. Lynagh",
        "url": "https://keminglabs.com/blog/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "fbc12ece-4e2b-4ee2-b3fb-e55fb54b508e",
      "title": "Using Rust Code in a C/C++ Project with CMake",
      "content_text": "I am currently working on Wayk Now written in C for the most part. We recently started writing new code for it in Rust which I’m super excited about.\n\n As we needed a way to integrate this code in our CMake build1, we wrote a set of modules for CMake ",
      "url": "https://blog.devolutions.net/2018/06/insider-series-using-rust-code-in-a-cc-project-with-cmake",
      "date_published": "2018-06-19T12:23:36+00:00",
      "author": {
        "name": "Sebastien Duquette",
        "url": "https://blog.devolutions.net/author/sebastien-duquette"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "c1d20548-b510-4452-9d30-8088b65f626a",
      "title": "Extreme benchmark feedback using Gitlab CI",
      "content_text": "I am quite notorious for exploiting Gitlab’s CI. Ever since I started playing with it at the start of 2016, I tended to make things worse.",
      "url": "https://www.rubdos.be/linux/gitlab/automation/benchmarks/rust/2018/06/19/extreme-benchmark-feedback.html",
      "date_published": "2018-06-19T13:18:00+00:00",
      "author": {
        "name": "Ruben De Smet",
        "url": "https://www.rubdos.be/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "f12b593d-9a94-4571-8fe8-08ef5059d68f",
      "title": "C2Rust Demonstration",
      "content_text": "The C2Rust project is being developed by Galois and Immunant. This tool is able to translate most C modules into semantically equivalent Rust code. These modules are intended to be compiled in isolation in order to produce compatible object files. We are developing several tools that help transform the initial Rust sources into idiomatic Rust. ",
      "url": "https://c2rust.com/",
      "date_published": "2018-06-17T00:00:00+00:00",
      "author": {
        "name": "Galois and Immunant",
        "url": "https://c2rust.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "48c70c0e-5ce7-415b-8264-6e7a6dd02a8f",
      "title": "My Emacs Rust IDE",
      "content_text": "In this post, I will walk you through configuring an EMACS Rust IDE to get syntax highlighting and code completion for the Rust programming language.",
      "url": "http://www.admintome.com/blog/my-emacs-rust-ide/",
      "date_published": "2018-06-16T01:26:03+00:00",
      "author": {
        "name": "Bill Ward",
        "url": "http://www.admintome.com/blog/author/stackadmin/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "f6f3b55c-c39c-4366-9de1-ebf3b230ee6c",
      "title": "What do you think are the most interesting/exciting projects using Rust?",
      "content_text": "Last week I tweeted \"What do you think are the most interesting/exciting projects using Rust? (No self-promotion :-) )\". The response was awesome! Jonathan Turner suggested I write up the responses as a blog post, and here we are.",
      "url": "https://www.ncameron.org/blog/interesting_projects/",
      "date_published": "2018-06-13T16:26:29+00:00",
      "author": {
        "name": "Nick Cameron",
        "url": "http://www.ncameron.org/blog/"
      },
      "tags": [
        "Language",
        "Tools and Applications"
      ]
    },
    {
      "id": "9448ee63-32da-42f1-bd2e-1ef737d9b971",
      "title": "To do a Rust GUI",
      "content_text": "Rust Qt Binding Generator lets you combine Rust code with a Qt1 graphical application. A previous blog shows how to make a simple clock. It’s a good idea to read that post before reading this more advanced post, because in this post we are getting serious.\n\nThis blog post shows how to write a to-do application. The data model is a list of to-do items. The source code for this example is available in the folder examples/todos in the Rust Qt Binding Generator repository.",
      "url": "https://www.vandenoever.info/blog/2018/06/09/to-do-a-rust-gui.html",
      "date_published": "2018-06-09T00:00:00+00:00",
      "author": {
        "name": "Jos van den Oever",
        "url": "https://www.vandenoever.info/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "e0e1ff6c-452a-442e-a3d5-93203569fa58",
      "title": "Fishing in an Abyss: Building a Password Cracker in Rust",
      "content_text": "Ahead of this year’s World Password Day, 1Password – maker of password management software – announced a password cracking challenge. The company ostensibly wanted to find out how hard it would be to crack a three-word passphrase master password on one of their vaults, assuming that the attacker had the derived hash of the passphrase.",
      "url": "https://sts10.github.io//2018/05/31/1password-cracking-challenge.html",
      "date_published": "2018-05-31T23:28:50+00:00",
      "author": {
        "name": "Sam Schlinkert",
        "url": "https://sts10.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "e81240c1-c783-4113-9df8-27755677e929",
      "title": "madparts-rs 1.0 release",
      "content_text": "Back in Februari 2013 then coworker Romain S. showed me the new trend of programming editors that do continuous compilation while you type, showing you immediate feedback on your code. In parallel I also worked on 3D modeling for my 3D printer using the OpenSCAD program. OpenSCAD works by writing code in its custom language and then have it rendered. I had this idea of combining these two approaches to make an electronics footprint generator. And so the development of the original madparts program started. In August 2016 I had been playing with the then pretty new rust programming language and decided a rewrite in it and simplifying the program even further would be fun to do.",
      "url": "https://damad.be/joost/blog/madparts-rs-1-0-release.html",
      "date_published": "2018-05-20T00:00:00+00:00",
      "author": {
        "name": "Joost Yervante Damad",
        "url": "https://damad.be/joost/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "d2cf9531-53d8-45dd-a9e4-0feaa3699466",
      "title": "An image viewer using Smithay's Client Toolkit",
      "content_text": "Small tutorial of using Smithay's Client Toolkit by example, building a small image viewer as a Wayland client.",
      "url": "https://smithay.github.io/sctk-image-viewer.html",
      "date_published": "2018-05-10T14:00:00+02:00",
      "author": {
        "name": "Victor Berger",
        "url": "https://smithay.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "4b63b225-3c2a-4e13-9cf5-a3ff4af811d0",
      "title": "Analyze disk usage with dutree",
      "content_text": "dutree is a command line tool to analyze disk usage. Features coloured output, according to the LS_COLORS environment variable, display the file system tree, ability to aggregate small files, ability to exclude files or directories, ability to compare different directories fast, and written in Rust. This tool is a mix between tree and durep.",
      "url": "https://ownyourbits.com/2018/03/25/analize-disk-usage-with-dutree/",
      "date_published": "2018-03-25T16:10:54+00:00",
      "author": {
        "name": "nachoparker",
        "url": "https://ownyourbits.com/author/cisquero_admin/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "cfa15026-8758-4249-b23c-fa41e23161c4",
      "title": "Entity-Component-System architecture for UI in Rust",
      "content_text": "For a fun project, I’ve been tinkering with xi-win, an experimental Windows front-end for xi-editor, written in Rust. I’m basically optimizing for performance, so making a number of somewhat unusual decisions. Among other things, I’m writing the UI myself, rather than using an existing toolkit or framework.",
      "url": "https://raphlinus.github.io/personal/2018/05/08/ecs-ui.html",
      "date_published": "2018-05-08T18:29:03+00:00",
      "author": {
        "name": "Raph Levien",
        "url": "https://raphlinus.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "66f3233f-afdd-49af-9cf4-cb71bcd56b33",
      "title": "sudo_pair - Plugin for sudo that requires another human to approve and monitor privileged sudo sessions",
      "content_text": "sudo is used by engineers daily to run commands as privileged users. But on some sensitive systems, you really want to ensure that no individual can act entirely autonomously. At Square, this includes applications that manage our internal access-control systems, store accounting ledgers, or even move around real money. This plugin allows us to ensure that no user can act entirely on their own authority within these systems.",
      "url": "https://github.com/square/sudo_pair",
      "date_published": "2018-05-07T18:24:54+00:00",
      "author": {
        "name": "Square",
        "url": "https://github.com/square"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "3e8fce57-40d7-4eec-9425-a2b32ef5895d",
      "title": "My Compound Passphrase List Safety Checker",
      "content_text": "I’ve been thinking about information theory, entropy, and passphrases for a couple of months now. I’ve been particularly interested in using random passphrases as passwords. An example of one of these passphrases would be “stamina turret backlands ruby”. The words have to be as purely random as possible – using your four dogs’ names is not nearly as strong as a password, as an attacker would likely guess that relatively early.",
      "url": "https://sts10.github.io/2018/05/05/compound-passphrase-list-safety-checker.html",
      "date_published": "2018-05-05T02:13:50+00:00",
      "author": {
        "name": "Sam Schlinkert",
        "url": "https://sts10.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "ef638662-6cfb-4335-9e01-baa7af9a5d95",
      "title": "Filtering Duplicate Log Entries via Rust and Runiq",
      "content_text": "Whilst sort -u is super easy to use, the requirement of sorting your data cannot be overlooked as it means your entire file needs to be buffered into memory at once. This is not always possible, or even if possible it's not always desired. On the other hand uniq is great, but in order to sort your data in advance you still have the same issue. It was due to this that I wrote runiq, which is essentially an optimized and more flexible implementation of both of the aforemention tools for the purposes of duplicate filtering. It performs much faster, with much less memory, and does not require sorted input (although it can optimize this case).",
      "url": "https://whitfin.io/filtering-unique-logs-using-rust/",
      "date_published": "2018-05-07T03:17:28+00:00",
      "author": {
        "name": "Isaac Whitfield",
        "url": "https://whitfin.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "cf489f8e-70b9-4669-8424-03e79fab2ad8",
      "title": "Introducing seiri — a music 🎶 manager for lots of music",
      "content_text": "TL;DR seiri is a lightweight music manager written (mostly) in Rust that helps keep huge music libraries organized. Try it today at chyyran.moe/seiri.",
      "url": "https://medium.com/@chyyran/introducing-seiri-a-music-manager-for-lots-of-music-990b464b3387",
      "date_published": "2018-05-03T23:35:26.009+00:00",
      "author": {
        "name": "Ronny Chan",
        "url": "https://medium.com/@chyyran"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "103f9c4f-f4f9-4e15-98b2-0d2b1db6b792",
      "title": "kanban-app - Kanban board built with Rust and Elm without Electron",
      "content_text": "This is a web-based Kanban board application, built with Elm and Rust. The only different from this application and hundred thousands of web-based application out there is: We don't need Electron!. Instead, it use native WebView (WebKit for Linux/macOS, and MSHTML on Windows),",
      "url": "https://github.com/huytd/kanban-app",
      "date_published": "2018-05-03T07:30:00+10:00",
      "author": {
        "name": "Huy Tr.",
        "url": "https://github.com/huytd"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "7812ff10-6f3d-4990-8832-9b5eb63780d8",
      "title": "Servo engines written in Rust deliver memory safety and multithreading",
      "content_text": "In 2012, Mozilla started the Servo project, a community effort to create new open source browser components that can take advantage of multicore hardware to improve speed, stability and responsiveness. Servo is comparable to WebKit, an open source browser engine that is the foundation of Apple’s Safari browser. (Other browser engines include Blink, EdgeHTML, and Gecko.) The difference is that Servo is written in the Rust programming language, bringing lightning-fast performance and memory safety to browser internals. Rust code can drastically cut down the number of critical bugs that affect browser engines. Servo uses a modular architecture and currently runs on Linux, macOS, Windows, and Android operating systems.",
      "url": "https://research.mozilla.org/servo-engines/",
      "date_published": "2018-05-01T16:04:53+00:00",
      "author": {
        "name": "Mozilla Research",
        "url": "https://research.mozilla.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "c38eff1e-2560-4373-a3d6-9e3ea04853ad",
      "title": "bat - print code to the terminal with syntax highlighting and git integration",
      "content_text": "bat supports syntax highlighting for a large number of programming and markup languages. bat also communicates with git to show modifications with respect to the index (see left side bar).",
      "url": "https://github.com/sharkdp/bat",
      "date_published": "2018-05-01T00:00:00+00:00",
      "author": {
        "name": "David Peter",
        "url": "https://github.com/sharkdp"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "caa2a44c-fd86-4221-92ba-226a3834e0a4",
      "title": "JARVIS - Notes on Rust Crates From Writing an RSS Reader",
      "content_text": "Way back in the dim mists of history (back in university) I wrote myself a custom RSS reader in Java and called it JARVIS1. You see, I read a lot of webcomics. Like, a lot. Some webcomics provide RSS feeds, but some don’t, and as my collection grew it started to become a hassle to use Firefox’s live bookmarks to manage it all. Ultimately, I wrote up a quick Swing GUI to use as a single interface for keeping up with blogs and tracking which comics had published updates since the last time I’d checked2.",
      "url": "https://bheisler.github.io/post/jarvis-impressions-of-rust-libraries/",
      "date_published": "2018-04-22T16:00:00-06:00",
      "author": {
        "name": "Brook Heisler",
        "url": "https://bheisler.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "79a75489-f371-461e-8943-273f7b60e620",
      "title": "Hammond: A Podcast Client for the GNOME Desktop",
      "content_text": "Hammond has been in development since Sep 2017. It makes use of the Rust bindings to GNOME libraries as well as diesel, serde, reqwest, and a number other crates to build a beautiful, native application that feels right at home on the GNOME desktop.",
      "url": "https://gitlab.gnome.org/World/hammond",
      "date_published": "2018-04-27T21:12:00+10:00",
      "author": {
        "name": "Jordan Petridis",
        "url": "https://gitlab.gnome.org/alatiera"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "36e40f73-b836-49cd-a558-d93a238c7386",
      "title": "fastmod - A fast partial replacement for the codemod tool",
      "content_text": "fastmod is a fast partial replacement for codemod. Like codemod, it is a tool to assist you with large-scale codebase refactors, and it supports most of codemod's options. fastmod's major philosophical difference from codemod is that it is focused on improving the use case \"I want to use interactive mode to make sure my regex is correct, and then I want to apply the regex everywhere\". For this use case, it offers much better performance than codemod",
      "url": "https://github.com/facebookincubator/fastmod",
      "date_published": "2018-04-19T20:30:07+00:00",
      "author": {
        "name": "Facebook Incubator",
        "url": "https://github.com/facebookincubator"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "d0b170a0-b0c5-4d33-b3f2-e0e0dcac1872",
      "title": "Pijul 0.10",
      "content_text": "I’m pleased to announce the new release of Pijul, version 0.10. Pijul is an easy to use, distributed and fast version control system. This release has been a long time coming, but brings in an important number of new features and stability enhancements.",
      "url": "https://pijul.org/posts/2018-04-21-pijul-0.10/",
      "date_published": "2018-04-21T15:13:57+02:00",
      "author": {
        "name": "Pijul",
        "url": "https://pijul.org/posts"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "18ca5e39-fd8f-4739-95ef-9daaef6d525d",
      "title": "Announcing cargo src (beta)",
      "content_text": "cargo src is a new tool for exploring your Rust code. It is a cargo plugin which runs locally and lets you navigate your project in a web browser. It has syntax highlighting, jump to definition, type on hover, semantic search, find uses, find impls, and more.",
      "url": "https://ncameron.org/blog/announcing-cargo-src-beta/",
      "date_published": "2018-04-18T20:52:39+00:00",
      "author": {
        "name": "Nick Cameron",
        "url": "http://www.ncameron.org/blog/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "f6e1bdda-278a-4077-8d2f-49417303637f",
      "title": "dust - A more intuitive version of du in Rust",
      "content_text": "Dust is meant to give you an instant overview of which directories are using disk space without requiring sort or head. Dust will print a maximum of 1 'Did not have permissions message'. Dust will list the 15 biggest sub directories or files and will smartly recurse down the tree to find the larger ones. There is no need for a '-d' flag or a '-h' flag. The largest sub directory will have its size shown in red",
      "url": "https://github.com/bootandy/dust",
      "date_published": "2018-04-18T07:26:00+10:00",
      "author": {
        "name": "andy boot",
        "url": "https://github.com/bootandy"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "ef8bca4e-5627-4bde-a21f-9dae321ac7c0",
      "title": "angle-grinder - Slice and dice log files on the command line",
      "content_text": "Angle-grinder allows you to parse, aggregate, sum, average, percentile, and sort your data. You can see it, live-updating, in your terminal. Angle grinder is designed for when, for whatever reason, you don't have your data in graphite/honeycomb/kibana/sumologic/splunk/etc. but still want to be able to do sophisticated analytics.\n\nAngle grinder can process about a million rows per second, so it's usable for fairly meaty aggregation. The results will live update in your terminal as data is processed. Angle grinder is a bare bones functional programming language coupled with a pretty terminal UI.",
      "url": "https://github.com/rcoh/angle-grinder",
      "date_published": "2018-04-18T07:26:00+10:00",
      "author": {
        "name": "Russell Cohen",
        "url": "https://github.com/rcoh"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "d412d980-cc59-4a0b-ab9e-19100f3b8927",
      "title": "Faster Bulletproofs with Ristretto & AVX2",
      "content_text": "A few months ago, Bünz, Bootle, Boneh, Poelstra, Wuille, and Maxwell published Bulletproofs, which dramatically improves proof performance both in terms of proof size and verification time. In addition, it allows proving a much wider class of statements than just range proofs.\n\nAt Chain, we (Henry de Valence, Cathie Yun and Oleg Andreev) have been working on a pure-Rust Bulletproofs implementation, whose initial version we are publishing today, together with a set of notes.",
      "url": "https://blog.chain.com/faster-bulletproofs-with-ristretto-avx2-29450b4490cd",
      "date_published": "2018-04-13T19:21:27.639+00:00",
      "author": {
        "name": "Chain",
        "url": "https://blog.chain.com/@chaininc"
      },
      "tags": [
        "Tools and Applications",
        "Performance"
      ]
    },
    {
      "id": "ed19c2a7-fe9d-465b-b41a-71480e6b978a",
      "title": "QCGPU - Hardware Accelerated Quantum Computer Simulation",
      "content_text": "A software library for high performance and hardware accelerated simulation of Quantum Computers and Algorithms. Written with Rust and OpenCL.",
      "url": "https://qcgpu.github.io/",
      "date_published": "2018-04-11T06:47:00+10:00",
      "author": {
        "name": "QCGPU",
        "url": "https://qcgpu.github.io/"
      },
      "tags": [
        "Computer Science",
        "Tools and Applications"
      ]
    },
    {
      "id": "b93c9682-4e53-4a7f-a39b-79d57b2b4737",
      "title": "New sysinfo version (huge performance improvements!)",
      "content_text": "This new version comes with great performance improvements. We're talking about 3x faster on macos, 2x faster on linux and 3x faster on windows (the benchmarks are at the end of the post).",
      "url": "https://blog.guillaume-gomez.fr/articles/2018-04-09+New+sysinfo+version+%28huge+performance+improvements%21%29",
      "date_published": "2018-04-09T00:00:00+00:00",
      "author": {
        "name": "Guillaume Gomez",
        "url": "https://blog.guillaume-gomez.fr/"
      },
      "tags": [
        "Performance",
        "Tools and Applications"
      ]
    },
    {
      "id": "1282d538-71c9-4379-a330-820eccf83d22",
      "title": "Sequoia-PGP - a modular OpenPGP implementation",
      "content_text": "Sequoia is a modular OpenPGP implementation in Rust.",
      "url": "https://sequoia-pgp.org/",
      "date_published": "2018-04-11T06:52:00+10:00",
      "author": {
        "name": "p≡p foundation",
        "url": "https://sequoia-pgp.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "88175c1a-8150-45f5-a1d8-d390457b9fe2",
      "title": "Announcing personal finance tool 'pfr'",
      "content_text": "pfr is a command-line tool for helping me to manage my personal finances. At the end of each month, I like to sit down and “allocate” funds to cover my expenses for the following month. However, not all of my expenses occur monthly. For example, things like rent are paid weekly, and I think of money spent on food in terms of weeks, so I have to multiply those expenses by 4 (ish). I also have to figure out how much money to put in each account, e.g on my EFTPOS (direct-debit) card or for automatic payments. It’s not hard, but then again, that’s why we write programs.",
      "url": "https://kyusscaesar.wordpress.com/2018/03/29/announcing-pfr/",
      "date_published": "2018-03-29T10:10:34+00:00",
      "author": {
        "name": "Antony Southworth",
        "url": "https://kyusscaesar.wordpress.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "1054cc8a-cbdd-4073-b7f9-2801aaad6fd6",
      "title": "Introducing Click: The Command Line Interactive Controller for Kubernetes",
      "content_text": "Click is an open-source tool that lets you quickly and easily run commands against Kubernetes resources, without copy/pasting all the time, and that easily integrates into your existing command line workflows. This blog introduces its its usage and merits.",
      "url": "https://databricks.com/blog/2018/03/27/introducing-click-the-command-line-interactive-controller-for-kubernetes.html",
      "date_published": "2018-03-27T16:07:56+00:00",
      "author": {
        "name": "Nick Lanham",
        "url": "https://databricks.com/blog/category/engineering"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "fe44a6a6-04fd-42f7-a0ee-c816282bac5e",
      "title": "From cobalt.rs to gutenberg",
      "content_text": "I wish I could have the features of both tools, but for now I will use gutenberg over cobalt. A tiny migration and feature comparison story.",
      "url": "https://markentier.tech/posts/2018/03/from-cobalt-to-gutenberg/",
      "date_published": "2018-03-28T00:00:00+00:00",
      "author": {
        "name": "Christoph Grabo (@asaaki)",
        "url": "https://markentier.tech/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "cfc59513-ea0b-4d61-ac46-d7ea2e5bba8b",
      "title": "Designing a fast CLI join tool with rust",
      "content_text": "(or how rust helped me to match the speed of GNU join written by Mike Haertel)",
      "url": "https://milancio42.github.io/blog/2018-03-22-rjoin/",
      "date_published": "2018-03-22T09:27:20+01:00",
      "author": {
        "name": "Milan Opath",
        "url": "https://milancio42.github.io/blog/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "b33165a2-c60c-4431-872d-4528770e42c1",
      "title": "xray Update for March 26, 2018",
      "content_text": "Xray - An experimental next-generation Electron-based text editor. This update covers a revised roadmap, fast file finding, and thoughts on key bindings.",
      "url": "https://github.com/atom/xray/blob/master/docs/updates/2018_03_26.md",
      "date_published": "2018-03-26T00:00:00+00:00",
      "author": {
        "name": "Xray Team",
        "url": "https://github.com/atom/xray"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "e0dec9da-faee-4dcd-bfd2-8e14dda4f3f6",
      "title": "Compiling Rust + Windows + GTK step-by-step",
      "content_text": "In case you have tried to make a rust program with GUI that would work both on Linux and Windows, you probably may have faced some issues in some point (especially if you are a newcomer). Compiling in Linux is quite easy, but in Windows life gets a bit tricky.\n\nI've pulled together some info from here and there so that no-one else had to fight their way through fire and flames.",
      "url": "https://www.reddit.com/r/rust/comments/86kmhu/compiling_rust_windows_gtk_stepbystep/",
      "date_published": "2018-03-23T13:29:57+00:00",
      "author": {
        "name": "light3rn",
        "url": "https://www.reddit.com/user/light3rn"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "73cbd270-d16d-4aec-b38d-9503961891bd",
      "title": "Presentation Manager written in Rust",
      "content_text": "A tool for serving and managing presentation slides.",
      "url": "https://medium.com/@mattdark/presentation-manager-written-in-rustlang-f36b73bb8dd2",
      "date_published": "2018-03-19T23:28:45.107+00:00",
      "author": {
        "name": "Mario García",
        "url": "https://medium.com/@mattdark"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "655ac748-e1e9-4fa4-b12a-2dc7c2e88fa7",
      "title": "Building a fast Electron app with Rust",
      "content_text": "When I built Finda, I wanted it to be fast — specifically, to respond to all user input within 16 milliseconds.\n\nGiven this goal, you might be surprised to learn that Finda is built with Electron, a framework that’s often decried for being the opposite of fast.",
      "url": "https://keminglabs.com/blog/building-a-fast-electron-app-with-rust/",
      "date_published": "2018-03-18T00:00:00+11:00",
      "author": {
        "name": "Kevin J. Lynagh",
        "url": "https://keminglabs.com/blog/"
      },
      "tags": [
        "Tools and Applications",
        "Performance"
      ]
    },
    {
      "id": "44f7fa8d-b23d-47e7-b3dd-f227e8317d49",
      "title": "A Tiny `ls` Clone Written in Rust",
      "content_text": "In my series of useless Unix tools rewritten in Rust, today I'm going to be covering one of my all-time favorites: ls.",
      "url": "https://matthias-endler.de/2018/ls/",
      "date_published": "2018-03-01T00:00:00+00:00",
      "author": {
        "name": "Matthias Endler",
        "url": "https://matthias-endler.de/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "c5a101b5-e749-4e99-9e08-54de2cf0a2c1",
      "title": "Oxidizing Fedora: Try Rust and its applications today",
      "content_text": "In recent years, it has become increasingly important to develop software that minimizes security vulnerabilities. Memory management bugs are a common cause of these vulnerabilities. To that end, the Mozilla community has spent the last several years building the Rust language and ecosystem which focuses primarily on eliminating those bugs. And Rust is available in Fedora today, along with a few applications in Fedora 27 and higher, as seen below.",
      "url": "https://fedoramagazine.org/oxidizing-fedora-try-rust-applications-today/",
      "date_published": "2018-02-21T08:00:23+00:00",
      "author": {
        "name": "Igor Gnatenko and Neal Gompa",
        "url": "https://fedoramagazine.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "0d46d60e-49c7-44ce-8f0c-48b94501b1ca",
      "title": "How to write GStreamer Elements in Rust Part 2: A raw audio sine wave source",
      "content_text": "A bit later than anticipated, this is now part two of the blog post series about writing GStreamer elements in Rust. Part one can be found here, and I’ll assume that everything written there is known already. In this part, a raw audio sine wave source element is going to be written. It will be similar to the one Mathieu was writing in his blog post about writing such a GStreamer element in Python. Various details will be different though, but more about that later.",
      "url": "https://coaxion.net/blog/2018/02/how-to-write-gstreamer-elements-in-rust-part-2-a-raw-audio-sine-wave-source/",
      "date_published": "2018-02-21T15:05:22+00:00",
      "author": {
        "name": "Sebastian Dröge",
        "url": "https://coaxion.net/blog/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "8e33c7c4-2788-418b-8e47-ca8990ae0d38",
      "title": "Snips Uses Rust to Build an Embedded Voice Assistant",
      "content_text": "The team at Paris-based Snips has created a voice assistant that can be embedded in a single device or used in a home network to control lights, thermostat, music, and more. You can build a home hub on a Raspberry Pi and ask it for a weather report, to play your favorite song, or to brew up a double espresso. Manufacturers like Keecker are adding Snips’ technology to products like multimedia home robots. And Snips works closely with leaders across the value chain, like NVIDIA, EBV, and Analog Devices, in order to voice-enable an increasingly wider range of device types, from speakers to home automation systems to cars.",
      "url": "https://blog.mozilla.org/blog/2018/02/21/snips-uses-rust-build-embedded-voice-assistant/",
      "date_published": "2018-02-21T12:34:56-08:00",
      "author": {
        "name": "Judy DeMocker",
        "url": "https://blog.mozilla.org/blog/author/jdemockermozilla-com/"
      },
      "tags": [
        "Language",
        "Tools and Applications"
      ]
    },
    {
      "id": "44ef6094-b3df-4a2c-9cd9-429feecff6bc",
      "title": "Spectra gets Rust scripting!",
      "content_text": "spectra is a crate I’ve been maintaining for a few months / years now. It’s a crate that I mainly use for demoscene productions (I released two with it, Céleri Rémoulade and Outline Invitation) but I also use it to play around and experiment new rendering, animation and video game techniques.",
      "url": "http://phaazon.net/blog/spectra_plugins",
      "date_published": "2018-02-19T02:57:00+00:00",
      "author": {
        "name": "Dimitri Sabadie",
        "url": "http://phaazon.net/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "0af4c90e-74b2-438d-aaed-798c9f6e900a",
      "title": "Fanta: An opinionated framework for web development in rust",
      "content_text": "Fanta is a web framework that aims for developers to be productive and consistent across projects and teams. Its goals are to be: Opinionated, Fast, and Intuitive. Based heavily off of the work here: https://github.com/tokio-rs/tokio-minihttp",
      "url": "https://github.com/trezm/Fanta",
      "date_published": "2018-02-14T18:44:00+11:00",
      "author": {
        "name": "Peter Mertz",
        "url": "https://github.com/trezm"
      },
      "tags": [
        "Tools and Applications",
        "Web and Network Services"
      ]
    },
    {
      "id": "1694fd36-21ca-4e3f-8654-9291c3ba4de7",
      "title": "comm is a peer-to-peer instant messaging protocol designed to be resilient to censorship",
      "content_text": "comm is a peer-to-peer instant messaging protocol designed to be resilient to censorship. comm-gtk is a GUI client built on the comm library. To try it out, start the app. In the configuration window, enter a secret phrase, a bootstrap node (IP:port pair), and a local port to listen on (e.g. 6669). For a bootstrap node, try 165.227.114.200:6667 (or any other node's IP address if you know one). Click connect to join the network.",
      "url": "https://github.com/zacstewart/comm-gtk",
      "date_published": "2018-02-13T23:02:31-06:00",
      "author": {
        "name": "Zac Stewart",
        "url": "https://github.com/zacstewart"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "751253b7-494d-4930-9586-40c18cab9280",
      "title": "tealdeer - A very fast implementation of tldr in Rust.",
      "content_text": "A fast command line client for tldr: A collection of simplified and community-driven man pages.",
      "url": "https://github.com/dbrgn/tealdeer",
      "date_published": "2018-02-12T07:46:00+11:00",
      "author": {
        "name": "Danilo Bargen",
        "url": "https://github.com/dbrgn"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "28ce1b60-8837-4443-87fb-669bf176db9b",
      "title": "Reflecting on ppbert",
      "content_text": "I had an itch: I was pretty-printing the BERT-encoded terms that we use in a production system at work and it was very slow. The Erlang shell took more than two minutes to dump the largest file. (It took about 0.1 second to read and parse the file; the rest was spent in io:format.) I decided to scratch that itch: I wrote ppbert, a command-line utility that reads BERT-encoded values and pretty-prints them. I’ve worked sporadically on ppbert for almost a year now, I use it daily at work, I’m happy with it, and I want to write about some of the things I learned during that journey.",
      "url": "https://vfoley.xyz/ppbert/",
      "date_published": "2018-02-09T00:00:00+00:00",
      "author": {
        "name": "Vincent Foley",
        "url": "http://vfoley.xyz/"
      },
      "tags": [
        "Tools and Applications",
        "Language"
      ]
    },
    {
      "id": "60238a1c-95ee-46d8-bf5c-e70fed87a103",
      "title": "Guitar Effects in Rust",
      "content_text": "In an effort to experiment with dsp, I wrote a guitar/bass effects processor this past weekend. The end result works very well (to my pleasant surprise). It doesn’t have 90% of the functionalities of any of rakarrack, guitar rig, garage band but overall it was a fun weekend hack.",
      "url": "http://rickyhan.com/jekyll/update/2018/02/06/rust-guitar-pedal-effects-dsp.html",
      "date_published": "2018-02-06T04:00:00+00:00",
      "author": {
        "name": "Ricky Han",
        "url": "http://rickyhan.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "434c400b-b4ac-49c9-87fa-db2a8b5f1ba7",
      "title": "DataFusion: Big Data Platform for Rust",
      "content_text": "DataFusion is an open-source Big Data platform implemented in the Rust programming language with a similar programming style to Apache Spark.",
      "url": "https://www.datafusion.rs/",
      "date_published": "2018-02-04T16:51:47+00:00",
      "author": {
        "name": "Andy Grove",
        "url": "https://www.datafusion.rs/"
      },
      "tags": [
        "Tools and Applications",
        "Web and Network Services"
      ]
    },
    {
      "id": "303b0429-9b0c-46f8-a555-fbab8c2bdf90",
      "title": "retrobasic - A BASIC interpreter written in Rust",
      "content_text": "retrobasic is a BASIC interpreter written in Rust. It is based on the original BASIC '64 implementation, and modified as needed to make it more compatible with some of the classic BASIC games.",
      "url": "https://github.com/seasalim/retrobasic",
      "date_published": "2018-02-04T17:21:55+00:00",
      "author": {
        "name": "seasalim",
        "url": "https://github.com/seasalim"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "4aeb0aa5-6a72-41c9-87bc-a2e24b5e33d3",
      "title": "Writing a command-line program in Rust",
      "content_text": "As a library writer, it feels a bit strange, but refreshing, to write a program that actually has a main() function. My experience with Rust so far has been threefold:",
      "url": "https://people.gnome.org/~federico/blog/writing-a-command-line-program-in-rust.html",
      "date_published": "2018-02-03T11:41:20-06:00",
      "author": {
        "name": "Federico Mena Quintero",
        "url": "https://people.gnome.org/~federico/blog/index.html"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "93d7f09d-e1eb-4d6a-a792-5765326730be",
      "title": "Make your own make",
      "content_text": "An obvious idea is to use Rust for task automation. Originally, I have proposed creating a special Cargo subcommand to execute build tasks, implemented as Rust programs, in this thread. However, since then I realized that there are built-in tools in Cargo which allow one to get a pretty ergonomic solution. Namely, the combination of workspaces, aliases and ability to define binaries seems to do the trick.",
      "url": "https://matklad.github.io/2018/01/03/make-your-own-make.html",
      "date_published": "2018-01-03T10:52:50+00:00",
      "author": {
        "name": "Aleksey Kladov",
        "url": "https://matklad.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "2168f429-844d-4629-97da-c149e9026cfd",
      "title": "mdcat - Cat for markdown: Show markdown documents in TTYs",
      "content_text": "Cat for markdown: Show markdown documents in TTYs",
      "url": "https://github.com/lunaryorn/mdcat",
      "date_published": "2018-02-03T18:23:00+11:00",
      "author": {
        "name": "Sebastian Wiesner",
        "url": "https://swsnr.de/"
      },
      "tags": [
        "Tools and Applications"
      ]
    }
  ]
}