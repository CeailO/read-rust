<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - Tools and Applications</title><link>https://readrust.net/</link><description>Tools and Applications posts on Read Rust</description><item><title>Introducing cargo-instruments: zero-hassle profiling on macOS</title><link>https://www.reddit.com/r/rust/comments/b20eca/introducing_cargoinstruments_zerohassle_profiling/</link><description><![CDATA[cargo-instruments (github) is a cargo plugin that makes it easy to profile rust binaries on macOS.  tl;dr: cargo-instruments is a shim between cargo and Xcode's very powerful dtrace-backed diagnostic suite, Instruments. Out of the box, this lets you track cpu / thread usage, allocations, context switches, and a bunch of other stuff.]]></description><guid isPermaLink="false">b1715412-8fc8-4882-9230-71e2b95c4b55</guid><pubDate>Sun, 17 Mar 2019 13:18:32 +1100</pubDate><dc:creator>cmyr</dc:creator></item><item><title>ActivityWatch automatic time-tracking software switches to Rust</title><link>https://forum.activitywatch.net/t/development-update-march-2019/189</link><description><![CDATA[While Python is a great language to quickly build new features in, it’s not great for performance or deploying to multiple platforms (especially Android). So @johan-bjareholt took on the tremendous task of reimplementing aw-server in the highly performant and secure programming language Rust. Since Rust compiles to Android we have built a library for use on Android, letting us avoid reimplement all of ActivityWatch to Android devices specifically (and vastly decreases the time to port future features like sync to Android).]]></description><guid isPermaLink="false">ec8871ce-7c85-42a8-bd0c-e85c09a2f04d</guid><pubDate>Tue, 12 Mar 2019 12:06:19 +0000</pubDate><dc:creator>Erik Bjäreholt</dc:creator></item><item><title>Remote Development and Debugging of Rust with CLion</title><link>https://medium.com/nearprotocol/remote-development-and-debugging-of-rust-with-clion-39c38ced7cc1</link><description><![CDATA[Most in our team use CLion for Rust development which is especially great for local debugging, alas it is not free. Since we are developing a blockchain it requires careful orchestration of the nodes running on separate machines, and occasionally we need to debug some corner case on a remotely running node. CLion and other JetBrains products have great support of the remote development and debugging. However, unfortunately, Rust is not a primary language of CLion which makes configuration tricky. In this post we walk through the configuration of CLion for remote Rust development and debugging.]]></description><guid isPermaLink="false">0c70dd5f-51e6-4f07-8707-6783ca471d0c</guid><pubDate>Mon, 11 Mar 2019 01:18:15 +0000</pubDate><dc:creator>Maksym Zavershynskyi</dc:creator></item><item><title>Building the virtualization stack of the future with rust-vmm</title><link>https://opensource.com/article/19/3/rust-virtual-machine</link><description><![CDATA[rust-vmm facilitates sharing core virtualization components between Rust Virtual Machine Monitors.]]></description><guid isPermaLink="false">d3f4b805-773f-499e-84c8-b79fcb40631f</guid><pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Andreea Florescu</dc:creator></item><item><title>Torchbear - a fast and complete interpreter for the new Speakeasy langauge</title><link>https://github.com/foundpatterns/torchbear</link><description><![CDATA[Torchbear is a new programming environment currently available for Windows, Android, MacOS, and Linux. With it, you get Rust's great library ecosystem, but you don't need to recompile with each change to how you use those libraries. Since you express your domain logic in a higher level scripting language and your system logic in Rust's language, you get the best of both worlds!]]></description><guid isPermaLink="false">977952df-eb7d-43eb-82e2-3e53b7e00a72</guid><pubDate>Wed,  6 Mar 2019 13:17:44 +1100</pubDate><dc:creator>Mitchell Tannenbaum</dc:creator></item><item><title>Forge: A scripting language for Rust gamedev inspired by JS, Rust and Python</title><link>https://github.com/zesterer/forge</link><description><![CDATA[Forge is a dynamically-typed language written in Rust. It is inspired by JavaScript, Rust, Python and Rhai. In the future, you'll be able to use Forge as a general-purpose lightweight scripting language in your applications.]]></description><guid isPermaLink="false">a1899a77-1a12-49f3-92e2-5e353491c8ae</guid><pubDate>Wed, 27 Feb 2019 04:21:00 +0000</pubDate><dc:creator>Joshua Barretto</dc:creator></item><item><title>New cargo subcommand: sync-readme</title><link>https://phaazon.net/blog/cargo-sync-readme</link><description><![CDATA[cargo sync-readme synchronizes your README (the file specified by the readme key in your Cargo.toml, or just README.md by default) with the entrypoint of your library or binary crate (by default, lib.rs or main.rs, or what is defined at the path key in your manifest).]]></description><guid isPermaLink="false">806cf62c-14c8-4a7e-afa8-f99843d634f2</guid><pubDate>Mon, 25 Feb 2019 18:50:00 +0000</pubDate><dc:creator>Dimitri Sabadie</dc:creator></item><item><title>Part 4: Line IDs in toy version control system, oji</title><link>https://jneem.github.io/ids/</link><description><![CDATA[I’ve written quite a bit about the theory of patches and merging, but nothing yet about how to actually implement anything efficiently. That will be the subject of this post, and probably some future posts too.]]></description><guid isPermaLink="false">aa9ed2af-2308-4ae8-a009-caf772f96e3b</guid><pubDate>Mon, 25 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Joe Neeman</dc:creator></item><item><title>git req | switch branches, not context</title><link>https://arusahni.github.io/git-req/</link><description><![CDATA[Check out git branches by their pull (or merge) request ID]]></description><guid isPermaLink="false">3a45d462-3f13-451b-8b15-03d07069c3f3</guid><pubDate>Thu, 21 Feb 2019 10:16:00 +0000</pubDate><dc:creator>Aru Sahni</dc:creator></item><item><title>Part 3: Graggles can have cycles</title><link>https://jneem.github.io/cycles/</link><description><![CDATA[Almost two years ago, I promised a series of three posts about version control. The first two (here and here) introduced a new (at the time) framework for version control. The third post, which I never finished, was going to talk about the datastructures and algorithms used in pijul, a version control system built around that new framework. The problem is that pijul is a complex piece of software, and so I had lots of trouble wrapping my head around it.

Two years later, I’m finally ready to continue with this series of posts (but having learned from my earlier mistakes, I’m not going to predict the total number of posts ahead of time). In the meantime, I’ve written my own toy version control system (VCS) to help me understand what’s going on. It’s called ojo, and it’s extremely primitive: to start with, it can only track a single file. However, it is (just barely) sophisticated enough to demonstrate the important ideas. I’m also doing my best to make the code is clear and well-documented.]]></description><guid isPermaLink="false">53d60351-cb50-4f9f-83d7-e6c8d94ab025</guid><pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Joe Neeman</dc:creator></item><item><title>Rust Lifetime Visualization Ideas</title><link>https://blog.adamant-lang.org/2019/rust-lifetime-visualization-ideas/</link><description><![CDATA[Many people have had the idea that there should be a way to visualize lifetimes in Rust. Indeed, the Rust Book used to include ASCII diagrams of lifetimes in some code examples. When fighting the borrow checker, it would be great if the IDE or editor could automatically provide a visualization of the lifetimes in your code.]]></description><guid isPermaLink="false">650d3646-0583-473d-bb43-a2f22f2e8e7d</guid><pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Jeff Walker</dc:creator></item><item><title>Mod player in Rust - part 4. Finally some music</title><link>https://www.codeslow.com/2019/02/in-this-post-we-will-finally-have-some.html</link><description><![CDATA[In this post we will finally have some music. I will spend some time discussing how the Amiga sound hardware worked. The original mod file format and how it is played back is intimately linked with the Amiga hardware.]]></description><guid isPermaLink="false">569a6623-bebb-48a6-8946-57b158a4a9b8</guid><pubDate>Sun, 17 Feb 2019 03:50:00 -0800</pubDate><dc:creator>Jani Peltonen</dc:creator></item><item><title>syswall: a firewall for syscalls</title><link>https://www.polaris64.net/blog/programming/2019/syswall-a-firewall-for-syscalls</link><description><![CDATA[A while back I started thinking about software and how it does what it does. Perhaps even more importantly, I started thinking about how we can know what software does, without relying on the software's marketing pitch.]]></description><guid isPermaLink="false">821ecfae-acd8-4a50-907e-77c394807c86</guid><pubDate>Sat, 16 Feb 2019 22:07:25 +0000</pubDate><dc:creator>Simon Pugnet</dc:creator></item><item><title>Shipping Rust Binaries with GoReleaser</title><link>https://medium.com/@jondot/shipping-rust-binaries-with-goreleaser-d5aa42a46be0</link><description><![CDATA[Although GoReleaser supports building just Go projects, it does so much more in the packaging and distribution department that it is extremely hard to ignore.]]></description><guid isPermaLink="false">81e00756-52f6-48fe-839e-28c88b690aef</guid><pubDate>Sat, 16 Feb 2019 17:47:00 +0000</pubDate><dc:creator>Dotan Nahum</dc:creator></item><item><title>MonkeyType: type inference for transpiling Python to Rust</title><link>https://medium.com/@konchunas/monkeytype-type-inference-for-transpiling-python-to-rust-64fa5a9eb966</link><description><![CDATA[In my previous post about Python to Rust transpiler I’ve said, that one of the biggest problems is absence of types in python and inability to infer them for functions. But it turns out there is a solution to this problem. Guys from Instagram have developed an incredible tool for runtime type inference called MonkeyType. It monitors what types functions accept and return while running a program. This approach works quite nicely so I want to share with you how it’s done.]]></description><guid isPermaLink="false">da140d7b-47bf-4d63-a3e1-75ade64bed2f</guid><pubDate>Fri, 15 Feb 2019 22:25:31 +0000</pubDate><dc:creator>Julian Konchunas</dc:creator></item><item><title>Introducing swc (speedy web compiler) 1.0</title><link>https://swc-project.github.io/blog/2019/02/08/Introducing-swc-1.0</link><description><![CDATA[swc(speedy web compiler) is a super-fast javascript to javascript compiler. It can transpile typescript / jsx / ecmascript 2019 to browser-compatible javascript. It's 16x - 20x faster than babel even on single-core synchronous benchmark. Note that actual performance gap is larger because swc works on worker thread while babel works on event loop thread.]]></description><guid isPermaLink="false">a3541593-fc72-40c3-a4b8-7fdad4cab8fe</guid><pubDate>Fri,  8 Feb 2019 00:00:00 +0000</pubDate><dc:creator>DongYoon Kang</dc:creator></item><item><title>Notion: the hassle-free JavaScript toolchain manager</title><link>https://github.com/notion-cli/notion</link><description><![CDATA[Reliable: Ensure everyone in your project uses an identical dev environment, from the Node version to your preferred package manager.

Universal: Enjoy the same command-line experience in every shell and every major operating system.

Fast: Notion is implemented in Rust and deployed as a static executable for maximum performance.]]></description><guid isPermaLink="false">559ed8de-7e83-4caa-aef1-f2b5fd7faa01</guid><pubDate>Wed,  6 Feb 2019 06:23:00 +0000</pubDate><dc:creator>LinkedIn Engineering</dc:creator></item><item><title>A Python Interpreter written in Rust</title><link>https://github.com/RustPython/RustPython</link><description><![CDATA[Goals: Full Python-3 environment entirely in Rust (not CPython bindings). A clean implementation without compatibility hacks]]></description><guid isPermaLink="false">2eb82c9e-d427-4beb-9a07-e2fc2f5bb9df</guid><pubDate>Wed,  6 Feb 2019 00:00:00 +0000</pubDate><dc:creator>RustPython</dc:creator></item><item><title>Hello, sandboxfs 0.1.0</title><link>http://julio.meroh.net/2019/02/hello-sandboxfs-0.1.0.html</link><description><![CDATA[I am pleased to announce that the first release of sandboxfs, 0.1.0, is finally here! You can download the sources and prebuilt binaries from the 0.1.0 release page and you can read the installation instructions for more details.

The journey to this first release has been a long one. sandboxfs was first conceived over two years ago, was first announced in August 2017, showed its first promising results in April 2018, and has been undergoing a rewrite from Go to Rust.]]></description><guid isPermaLink="false">f2388917-1b08-4e6d-9051-daa496814ab1</guid><pubDate>Tue,  5 Feb 2019 09:00:00 -0500</pubDate><dc:creator>Julio Merino</dc:creator></item><item><title>Mod player in Rust - part 3. Audio and threads</title><link>https://www.codeslow.com/2019/02/mod-player-in-rust-part-3-audio-and.html</link><description><![CDATA[I finished my last post with having a fully parsed mod file in memory and ready to be played. By the end of this post I want to get the code into a state where the main thread lets the user pick instruments from the mod file and play them back on the audio thread.]]></description><guid isPermaLink="false">fee5c201-613a-4b03-832a-369ceb788400</guid><pubDate>Mon,  4 Feb 2019 14:42:00 -0800</pubDate><dc:creator>Jani Peltonen</dc:creator></item><item><title>A detailed guide to writing your first Neovim plugin in Rust</title><link>https://medium.com/@srishanbhattarai/a-detailed-guide-to-writing-your-first-neovim-plugin-in-rust-a81604c606b1</link><description><![CDATA[I recently wrote a plugin in Rust to control the Spotify desktop app for MacOS and find lyrics from within Neovim and found it to be a neat experience overall, and that’s coming from someone who isn’t a Rust expert. This post is a summary of all the research and discovery that happened during that process.]]></description><guid isPermaLink="false">0be32871-6687-4e3d-9cab-5bbb411c9cc0</guid><pubDate>Mon,  4 Feb 2019 09:58:50 +0000</pubDate><dc:creator>Srishan Bhattarai</dc:creator></item><item><title>Rust powered CLI apk decompiler</title><link>https://robertohuertas.com/2019/02/03/rust_cli_apk_decompiler/</link><description><![CDATA[Lately I’ve been needing to reverse engineer some apks and I’ve been manually using some third-party tools to do so. But, how could we speed up the process? A little bit of Rust can be very helpful!]]></description><guid isPermaLink="false">7bbec28c-a388-4372-92d9-4d2082454d67</guid><pubDate>Sun,  3 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Roberto Huertas</dc:creator></item><item><title>Packaging a game for Windows, Mac, and Linux with Rust.</title><link>https://agmprojects.com/blog/packaging-a-game-for-windows-mac-and-linux-with-rust</link><description><![CDATA[Building a cross platform game for desktop operating systems in Rust is fairly doable without needing much platform specific code. Glutin is a Rust alternative to SDL for handling window creation & input. GFX handles most of the graphics API abstraction for you. You still write the shaders, but I was able to just use OpenGL and get it working on Windows 10, MacOS, and Ubuntu.]]></description><guid isPermaLink="false">8a353b9f-bb7e-40d7-a5ab-fd5372ad76f4</guid><pubDate>Sat,  2 Feb 2019 23:53:56 +0000</pubDate><dc:creator>Aaron McLeod</dc:creator></item><item><title>Medic: A Rust CLI that checks the passwords of a KeePass database</title><link>https://sts10.github.io/2019/02/01/medic.html</link><description><![CDATA[After the recent breach, I was curious to check my passwords against the list, but I’m a bit paranoid, so, rather than paste my passwords into the Have I Been Pwned website, I wanted to download the big text file and check my passwords against it offline, nice and safely.

I use a password manager called KeePassXC, so all of my passwords are stored in an encrypted file – a KeePass database – and I use a program called KeePassXC, a free and open-source password manager, to manage them (I wrote a beginner’s user guide to KeePassXC a while back if you’re interested!). So ideally, to check my passwords against the big list, I’d have a tool that checks all the passwords in a given KeePass database against the entire HaveIBeenPwned list of passwords, preferably against the downloaded file (i.e. “offline”), rather than the API. In other words something similar to 1Password’s Watchtower feature, but preferably offline.

After poking around a bit I decided to write it myself in Rust, with this script and this crate as useful references. Medic is a Rust CLI that can perform a variety of “health” checks on a KeePass database.]]></description><guid isPermaLink="false">ba72d3fb-8f1e-4802-a55b-15dd8584046f</guid><pubDate>Fri,  1 Feb 2019 01:15:00 +0000</pubDate><dc:creator>Sam Schlinkert</dc:creator></item><item><title>Mod player in Rust - part 2</title><link>https://www.codeslow.com/2019/01/mod-player-in-rust-part-2.html</link><description><![CDATA[My last article finished with reading the pattern tables from the mode files. In this post I want to finish parsing the entire file so we can move onto playing it. First we need to work out where the pattern data is and how long it is.]]></description><guid isPermaLink="false">c921449d-2331-49fc-b265-9219380330ed</guid><pubDate>Sat, 26 Jan 2019 03:39:00 -0800</pubDate><dc:creator>Jani Peltonen</dc:creator></item><item><title>Using Rust for creating Ubuntu Touch apps</title><link>https://timsueberkrueb.io/posts/2019/01/18/rust-ubuntu-touch-app-dev/</link><description><![CDATA[This post aims to give you a small introduction to using the Rust programming language for writing apps for Ubuntu touch.]]></description><guid isPermaLink="false">daf60963-a30c-4e74-82cb-123d2faac884</guid><pubDate>Sun, 20 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Tim Süberkrüb</dc:creator></item><item><title>Mod player in Rust - part 1</title><link>https://www.codeslow.com/2019/01/mod-player-in-rust-part-1.html</link><description><![CDATA[For my next Rust project I want to try something a bit more challenging than the Sudoku solver. I want to write a mod player in Rust.]]></description><guid isPermaLink="false">ddee0856-44f0-4b27-a925-8c7b39904a35</guid><pubDate>Sat, 19 Jan 2019 12:43:00 -0800</pubDate><dc:creator>Jani Peltonen</dc:creator></item><item><title>A Very Relatable Database: Part 1</title><link>https://natelincoln.com/a-very-relatable-database/part-1/</link><description><![CDATA[I like to find ways to fill up my free time over winter breaks. Since I’m not in school for a month, I usually take the time to do some self-study on a topic I find interesting. This past month, it was building a database. Unfortunately, I had only a casual understanding of how a database actually works under the hood, and no idea how to get started. Additionally, I decided to write the database in Rust, since I knew there would be complicated management of data, and I wanted to avoid headaches involving invalid data. Finally, rust’s static garbage collector meant I wouldn’t have to rely on a runtime to guarantee this.

That was a month ago. While I’m not too far along (mostly due to being busier than expected during the break), I still have things I think are worth sharing.]]></description><guid isPermaLink="false">a4e3cb9f-0d9d-4a47-98cd-2b51d39b7eb6</guid><pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Nate Lincoln</dc:creator></item><item><title>sharkdp/hexyl: A command-line hex viewer</title><link>https://github.com/sharkdp/hexyl</link><description><![CDATA[hexyl is a simple hex viewer for the terminal. It uses a colored output to distinguish different categories of bytes (NULL bytes, printable ASCII characters, ASCII whitespace characters, other ASCII characters and non-ASCII).]]></description><guid isPermaLink="false">4afbd4d0-42ae-460f-8805-22e094fb394b</guid><pubDate>Thu, 10 Jan 2019 00:00:00 +0000</pubDate><dc:creator>David Peter</dc:creator></item><item><title>PyOxidizer: Make distributable Python applications using Rust</title><link>https://github.com/indygreg/pyoxidizer</link><description><![CDATA[PyOxidizer is a collection of Rust crates that facilitate building libraries and binaries containing Python interpreters. PyOxidizer is capable of producing a single file executable - with all dependencies statically linked and all resources (like .pyc files) embedded in the executable.]]></description><guid isPermaLink="false">ea33097d-8f78-4d8d-9f75-bc9305380398</guid><pubDate>Thu,  3 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Gregory Szorc</dc:creator></item><item><title>I made MPD index SoundCloud, here&apos;s how I did it</title><link>https://polyfloyd.net/post/soundcloud-fuse-mpd/</link><description><![CDATA[The usual process of playing something on our music server is a bit cumbersome: I have to browse SoundCloud, download a track that seems interesting, upload it to the music server, let MPD index it, and then play it.

To make my life easier, I wanted to leverage Linux’s FUSE interface to expose the audio on SoundCloud as a bunch of files in a folder which MPD could then index and play from. I could have taken a couple of other approaches such as swapping MPD with Mopidy, an MPD-compatible music player with SoundCloud support, or a scraper that periodically downloads the latest audio from my feed. And while these alternatives were probably easier to implement, I went for the FUSE driver because I thought it was cool.]]></description><guid isPermaLink="false">4a2d72d8-3aa4-4c82-a95f-847f3e0c650d</guid><pubDate>Wed,  2 Jan 2019 00:00:00 +0000</pubDate><dc:creator>polyfloyd</dc:creator></item><item><title>Debugging Rust with VSCode on FreeBSD</title><link>https://venshare.com/debugging-rust-with-vscode-on-freebsd/</link><description><![CDATA[The following is a set of notes for installing VSCode on FreeBSD and getting a debugger up and running in a step by step guide. I thought I would share them in a full post as having a full IDE with syntax and error highlighting along with detailed in-context explanations has been really useful as I get to grips with Rust.]]></description><guid isPermaLink="false">c4069a09-be22-45a1-a39b-3067584379a8</guid><pubDate>Fri, 28 Dec 2018 23:56:37 +0000</pubDate><dc:creator>Anton Whalley</dc:creator></item><item><title>Tools in the 2018 edition</title><link>https://blog.rust-lang.org/2018/12/17/Rust-2018-dev-tools.html</link><description><![CDATA[In this blog post I'll cover Clippy and Rustfmt – two tools that have been around for a few years and are now stable and ready for general use. I'll also cover IDE support – a key workflow for many users which is now much better supported. I'll start by talking about Rustfix, a new tool which was central to our edition migration plans.]]></description><guid isPermaLink="false">629810d5-0f02-4ef1-9826-32cd4bc2f048</guid><pubDate>Mon, 17 Dec 2018 00:00:00 +0000</pubDate><dc:creator>The Dev-tools team</dc:creator></item><item><title>Rust Analyzer in 2018 and 2019</title><link>https://ferrous-systems.com/blog/rust-analyzer-2019/</link><description><![CDATA[Hi! I am Aleksey Kladov (aka @matklad). In the past, I've worked at Jet Brains where I've helped to create the IntelliJ Rust plug-in, and now I am a part of the Ferrous Systems team.

I've spent a significant amount of the last year experimenting with various approaches to make the Rust IDE story better. The culmination of my experiments is the rust-analyzer project – an experimental Rust compiler frontend, targeting the IDE/Language Server Protocol use case.]]></description><guid isPermaLink="false">bf6eb06b-346b-4f0c-a294-ee1dde663418</guid><pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate><dc:creator>Aleksey Kladov</dc:creator></item><item><title>cargo-inspect: A Little Tool for Exploring Rust Internals</title><link>https://matthias-endler.de/2018/cargo-inspect/</link><description><![CDATA[Rust allows for a lot of syntactic sugar, that makes it a pleasure to write. It is sometimes hard, however, to look behind the curtain and see what the compiler is really doing with our code. I wondered if there was a tool, which revealed what Rust was doing behind the curtains.]]></description><guid isPermaLink="false">20ba5c8d-b4f2-4ae5-af75-7631ccc05f12</guid><pubDate>Sat,  1 Dec 2018 00:00:00 +0000</pubDate><dc:creator>Matthias Endler</dc:creator></item><item><title>Build Your Own Shell using Rust</title><link>https://www.joshmcguigan.com/blog/build-your-own-shell-rust/</link><description><![CDATA[This is a tutorial on building your own shell using Rust, in the spirit of the build-your-own-x list. Creating a shell is a great way to understand how the shell, terminal emulator, and OS work together.]]></description><guid isPermaLink="false">5527d11f-6f5e-47f4-b208-c90499764f04</guid><pubDate>Sat, 17 Nov 2018 00:00:00 +0000</pubDate><dc:creator>Josh Mcguigan</dc:creator></item><item><title>Qt applications with Cargo</title><link>https://www.vandenoever.info/blog/2018/10/30/building_qt_apps_with_cargo.html</link><description><![CDATA[This blog shows how Qt applications can be built with Cargo. The goal is to make compiling them as simple as installing Qt and running cargo build.]]></description><guid isPermaLink="false">d8946b80-5782-44b2-80d9-9ac2e18eb5d0</guid><pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Jos van den Oever</dc:creator></item><item><title>korq: Kubernetes Dynamic Log Tailing Utility</title><link>https://vertexclique.github.io/korq/</link><description><![CDATA[K∅RQ is used for tailing pod logs concurrently and following groups at once. It was basically a need to follow logs during deployment and see how instances behave during and after deployment. This is the main motive behind K∅RQ.]]></description><guid isPermaLink="false">fac60173-70f5-4682-a698-716cf05306ce</guid><pubDate>Tue, 23 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Mahmut Bulut</dc:creator></item><item><title>ruplacer: find and replace text in source files</title><link>https://dmerej.info/blog/post/ruplacer/</link><description><![CDATA[Today I’d like to talk about a command-line tool I’ve been working on. It’s called ruplacer and as the name suggest, it’s rually cool and written in Rust. Basically, it finds and replaces text in source files.]]></description><guid isPermaLink="false">2657be5e-f98f-48a7-9e0a-c4ad2c183cba</guid><pubDate>Sun, 14 Oct 2018 12:34:43 +0000</pubDate><dc:creator>Dimitri Merejkowsky</dc:creator></item><item><title>Rust Programming with Dynamsoft Barcode Reader</title><link>https://medium.com/@yushulx/rust-programming-with-dynamsoft-barcode-reader-3d1e83004bba</link><description><![CDATA[A few days ago, I accepted a new challenge of creating a simple command line barcode reader using Rust and Dynamsoft Barcode Reader SDK. Rust is a system programming language similar to C++. The learning process did not go through smoothly as I expected. It is not as easy as learning other high-level programming languages such as Java and Python. In this article, I share my experience of learning and using Rust.]]></description><guid isPermaLink="false">cb2bfe24-75a2-43d6-bebc-b8f8ac610c95</guid><pubDate>Thu, 11 Oct 2018 00:26:20 +0000</pubDate><dc:creator>Xiao Ling</dc:creator></item><item><title>imag: Call for Participation (1)</title><link>https://imag-pim.org/blog/2018/10/10/call-for-participation-1/</link><description><![CDATA[This is the first call for participation for the imag project. I have no experience writing such calls for participation, so please bear with me!

Right now, the imag ecosystem has some tools available which are already usable and in rather good shape. There is a contact manager, a diary and a notes tool, a habit tracker and a time tracker are there as well, though those are not extensively tested by now.]]></description><guid isPermaLink="false">2b068be3-88b7-4d60-ad38-cfd40019cf5f</guid><pubDate>Wed, 10 Oct 2018 08:42:06 +0000</pubDate><dc:creator>imag</dc:creator></item><item><title>Remacs continues to improve</title><link>http://db48x.net/rust-remacs-2018/</link><description><![CDATA[As you doubtless know, Emacs has an embedded Lisp environment that provides a large number of intersting Lisp functions that the user can call. Many of these are implemented in C for speed, and we've been rewriting them in Rust. So far we've ported 394 individual Lisp functions from C to Rust, of which 207 were ported in this last year. This is about a third of the total, as you can see by this graph. We've actually completely ported several whole C files now.]]></description><guid isPermaLink="false">49cace2a-ebaf-4aec-b41b-8fb7aa67acc8</guid><pubDate>Tue,  9 Oct 2018 12:35:00 +0000</pubDate><dc:creator>db48x</dc:creator></item><item><title>Running Little Rust Snippets with Runner</title><link>https://stevedonovan.github.io/rustifications/2018/09/23/runner.html</link><description><![CDATA[runner is mostly a clever wrapper around normal Cargo operations. runner acts like an interpreter. There is no forced directory structure, just source. But it’s just using rustc under the hood in the most direct way possible.]]></description><guid isPermaLink="false">0a206ee6-7e54-4570-9f0c-8040fb9cd530</guid><pubDate>Sun, 23 Sep 2018 00:00:00 +0200</pubDate><dc:creator>Steve Donovan</dc:creator></item><item><title>Hegemon: A modular system monitor written in Rust</title><link>https://github.com/p-e-w/hegemon</link><description><![CDATA[Hegemon is a work-in-progress modular system monitor written in safe Rust. Currently, it has the following features: Monitor CPU and memory usage, temperatures, and fan speeds; expand any data stream to reveal a more detailed graph and additional information, adjustable update interval.]]></description><guid isPermaLink="false">5a387bd6-85b7-439d-97d4-fdb76fec80c5</guid><pubDate>Sat, 22 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Philipp Emanuel Weidmann</dc:creator></item><item><title>Alacritty now supports scrollback</title><link>https://jwilm.io/blog/alacritty-lands-scrollback/</link><description><![CDATA[Alacritty, the OpenGL terminal emulator written in Rust, now supports scrollback! Performance has improved, and we've got benchmarks to share.]]></description><guid isPermaLink="false">4f00ccb1-9966-4c6d-83e9-0e8032ff68a4</guid><pubDate>Sun, 16 Sep 2018 17:00:00 -0700</pubDate><dc:creator>Joe Wilm</dc:creator></item><item><title>A Sudoku Solver &amp; Generator 🔢</title><link>https://blog.ryanlevick.com/posts/sudoku-solver-generator/</link><description><![CDATA[For a small side project I’m working on, I’m using a Sudoku puzzle solver and puzzle generator that I’ve written in Rust. The experience was fun, so I thought I’d write up a little bit about the algorithm I’ve used and some interesting stats about how it performs.]]></description><guid isPermaLink="false">e3bb7297-9e70-4070-a2aa-8bb8f9a5eaf2</guid><pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Ryan Levick</dc:creator></item><item><title>Browsing your mail with Rust and Qt</title><link>https://www.vandenoever.info/blog/2018/09/16/browsing_your_mail_with_rust_and_qt.html</link><description><![CDATA[Let’s write a mail viewer with Rust and Qt. This is another blog about Rust Qt Binding Generator, the project that lets you add a Qt GUI to your Rust code, or if you will, add Rust to your Qt program.]]></description><guid isPermaLink="false">790afaff-5784-4b34-82eb-38a05a05a0ec</guid><pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Jos van den Oever</dc:creator></item><item><title>TOTP generator with account handling for multiple tokens</title><link>https://skarlso.github.io/2018/09/13/gotp/</link><description><![CDATA[ a totp generator I wrote a while ago in C++ but now it’s in rust. It can generate a token and save it into an account file that is AES encrypted. The password is never saved, so it’s secure enough to use it. One of it’s properties it will have over the c++ implementation is it’s safe, it uses a proper IV and once I’m done, it will also support encryption via PGP.]]></description><guid isPermaLink="false">c75159c1-4e8c-4b09-9371-430cc5971b94</guid><pubDate>Thu, 13 Sep 2018 08:01:00 +0100</pubDate><dc:creator>Gergely Brautigam</dc:creator></item><item><title>Rust at Datalust</title><link>https://blog.getseq.net/rust-at-datalust/</link><description><![CDATA[At Datalust we build a log server called Seq. It's really a database, written in C#, with its own SQL-based query language, that's specifically designed for storing and querying structured log data. In the past, Seq has managed log event storage through ESENT, which is a storage technology baked into Windows. For our cross-platform Seq 5 release we’ve built a storage engine called Flare in the Rust programming language to replace our usage of ESENT.]]></description><guid isPermaLink="false">a92cab79-16fc-46b9-9bdb-0eb21518db8c</guid><pubDate>Mon,  3 Sep 2018 22:18:30 +0000</pubDate><dc:creator>Ashley Mannix</dc:creator></item><item><title>Password Generation in Ruby and Rust</title><link>https://hur.st/blog/2018/08-25-password-generation-in-ruby-and-rust/</link><description><![CDATA[Writing the same password generator in two different languages to learn more Rust.]]></description><guid isPermaLink="false">8b60e040-4635-4a84-b8a6-3e0f2933f066</guid><pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Thomas Hurst</dc:creator></item><item><title>IntelliJ Rust features. Entry one: Macros</title><link>https://blog.jetbrains.com/clion/2018/08/intellij-rust-features-entry-one-macros/</link><description><![CDATA[In this series of short blog posts, we are going to take a closer look at the key Rust related features present in JetBrains IDEs through our corresponding plugin.]]></description><guid isPermaLink="false">e2e12b4d-817f-4c1b-997f-285d9eec6a74</guid><pubDate>Fri, 24 Aug 2018 16:11:11 +0000</pubDate><dc:creator>Kirill Malich</dc:creator></item><item><title>C2rust - A bridge to C</title><link>https://galois.com/blog/2018/08/c2rust/</link><description><![CDATA[The c2rust project exists to help bridge the fact that there is a lot of valuable software written in C and that there have been great strides in making safer and more-reliable programming languages since C was designed. Rust offers many modern improvements for C while still preserving the low-level control that makes it attractive. Beyond that, Rust provides new abstraction capabilities like parametricity, type-traits, methods, a module system, thread-safety, and more.]]></description><guid isPermaLink="false">4f79a6a7-0d44-44ce-b82c-c4376e073660</guid><pubDate>Tue, 14 Aug 2018 18:16:29 +0000</pubDate><dc:creator>Eric Mertens</dc:creator></item><item><title>Incremental Parsing in Amp</title><link>https://medium.com/@jordan_98525/incremental-parsing-in-amp-ba5e8c3e85dc</link><description><![CDATA[With the latest release of Amp (text editor), syntax highlighting has been overhauled. This post dives into the performance-related redesign that has landed with v0.5.]]></description><guid isPermaLink="false">df22bc28-0b6f-4d1a-960a-9e29ca258b53</guid><pubDate>Tue, 14 Aug 2018 16:13:52 +0000</pubDate><dc:creator>Jordan MacDonald</dc:creator></item><item><title>Journey into Gentoo eclass</title><link>https://gibix.github.io/gsoc/2018/08/11/journey-into-gentoo-eclass.html</link><description><![CDATA[I spent some days writing a portage eclass for Gentoo. I want to share my experience.]]></description><guid isPermaLink="false">fdc8eef0-1b02-41f7-8340-faf4660db183</guid><pubDate>Sat, 11 Aug 2018 00:00:00 +0000</pubDate><dc:creator>gibix</dc:creator></item><item><title>Kickstart - a fast and simple project template bootstrapper</title><link>https://blog.artemix.org/article/show/kickstart</link><description><![CDATA[Ever had some code base that you regularly use to start a new project? Until now, you've probably lost some time refactoring everything to fill out the right project name, title etc. A few tools already exist but either you're lost in feature bloating hell or you're fighting to configure everything in most cases. The following tool is an early-developement, rust-based, template tool made to be more versatile that its closest python counter-part, cookiecutter.]]></description><guid isPermaLink="false">1d84906a-4085-4d87-8f43-786f1d531f44</guid><pubDate>Wed,  8 Aug 2018 23:02:19 +0000</pubDate><dc:creator>Artemis</dc:creator></item><item><title>Easily Analyzing Your S3 Buckets</title><link>http://whitfin.io/analyzing-your-buckets-with-s3-meta/</link><description><![CDATA[mazon S3 is a storage solution used by pretty much everyone these days. Due to this there are naturally a bunch of tools for doing almost everything you can think of with S3. This post is about a tool I wrote to retrieve metadata about S3 buckets. If you don't care for the post, feel free to skip straight to the repo.]]></description><guid isPermaLink="false">1bc929f4-2800-466c-bd70-fb73f7b70ef8</guid><pubDate>Sat,  4 Aug 2018 17:44:06 +0000</pubDate><dc:creator>Isaac Whitfield</dc:creator></item><item><title>Gutenberg 0.4.0: custom taxonomies, image processing and more</title><link>https://www.vincentprouillet.com/blog/releasing-gutenberg-0-4-0/</link><description><![CDATA[Gutenberg 0.4.0 is out with custom taxonomies, image processing, improved shortcodes and more.]]></description><guid isPermaLink="false">c1718910-2677-4da4-a45f-a8bd055fe075</guid><pubDate>Sat,  4 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Vincent Prouillet</dc:creator></item><item><title>CLion IDE Rust plugin update: language support improvements, new quick-fixes, improved debugger and more</title><link>https://blog.jetbrains.com/clion/2018/08/intellij-rust-update-2018_2/</link><description><![CDATA[CLion 2018.2 was released just recently. Along with the release, the Rust plugin has had an update! In this blog post, we’d like to highlight some of the main improvements in the plugin.]]></description><guid isPermaLink="false">18d063ca-b781-400f-9e5f-1534b5b90630</guid><pubDate>Thu,  2 Aug 2018 11:01:28 +0000</pubDate><dc:creator>Anastasia Kazakova</dc:creator></item><item><title>Why I Ripped The Same CD 300 Times</title><link>https://john-millikin.com/%F0%9F%A4%94/why-i-ripped-the-same-cd-300-times</link><description><![CDATA[The piano arrangement album 帰るべき城 by Altneuland was published in 2005. I discovered it in 2008 (probably on YouTube), downloaded the best copy I could find, and filed it away in the TODO list. Recent advances in international parcel forwarding technology let me buy a used copy last year, but when it arrived none of my CD drives could read track #3. This sort of thing is common when buying used CDs, especially if they need to transit a USPS international shipping center. I shelved it and kept on the lookout for another copy, which I located last month. It arrived on Friday, I immediately tried to rip it, and hit the exact same error. This didn’t seem to be an issue of wear or damage…]]></description><guid isPermaLink="false">bf6d4501-afb3-40dc-aa8a-bef247e2e77b</guid><pubDate>Thu,  2 Aug 2018 00:00:00 +0000</pubDate><dc:creator>John Millikin</dc:creator></item><item><title>Sequoia, a new OpenPGP implementation</title><link>https://www.reddit.com/r/rust/comments/93mng5/ann_sequoia_a_new_openpgp_implementation/</link><description><![CDATA[This past fall, three former GnuPG developers began working on a new OpenPGP implementation in Rust called Sequoia. As it’s starting to shape up and become useful, I feel now is a good time to announce the project to the larger Rust community, and hopefully get some feedback before our first release.]]></description><guid isPermaLink="false">81096070-a563-47a0-8f09-2e5fb3c1b984</guid><pubDate>Wed,  1 Aug 2018 16:50:12 +1000</pubDate><dc:creator>/u/nwalfield</dc:creator></item><item><title>Announcing Vagga 0.8.1 – PaulColomiets</title><link>https://medium.com/@paulcolomiets/announcing-vagga-0-8-1-5e1fd44ee6fa</link><description><![CDATA[We are excited to announce the next version of vagga, the containerization tool that makes setting up development environments easy and fun. This release brings local overrides for vagga commands, support of ubuntu bionic, better CI support, space reuse between multiple projects, and more.]]></description><guid isPermaLink="false">14507477-073a-4055-a2de-b0e4c4fd2ad5</guid><pubDate>Tue, 31 Jul 2018 19:39:25 +0000</pubDate><dc:creator>PaulColomiets</dc:creator></item><item><title>Recommending books (with Rust)</title><link>https://maciejkula.github.io/2018/07/27/recommending-books-with-rust/</link><description><![CDATA[In this post, we’re going to build a sequence-based recommender system in Rust: a system that accepts a person’s reading history as input, and outputs recommendations on what to read next.]]></description><guid isPermaLink="false">31fd7758-63f6-4e38-8331-bd27fd6324ba</guid><pubDate>Fri, 27 Jul 2018 09:17:00 -0700</pubDate><dc:creator>Maciej Kula</dc:creator></item><item><title>Introducing the Routinator 3000</title><link>https://medium.com/nlnetlabs/introducing-the-routinator-3000-2a234d455b2b</link><description><![CDATA[NLnet Labs is embarking on a new adventure. In the coming months we will be developing an RPKI toolset aimed at making BGP routing more secure. It will consist of three parts: a Certificate Authority package, a Publication Server and Relying Party software. We’ve chosen to do the development in a modern systems programming language, Rust.]]></description><guid isPermaLink="false">424adcbb-d3de-467b-8ca2-af877e849e85</guid><pubDate>Thu, 26 Jul 2018 14:43:27 +0000</pubDate><dc:creator>Alex Band</dc:creator></item><item><title>Pax: A fast dev time JavaScript bundler</title><link>https://pax.js.org/</link><description><![CDATA[Don’t waste time waiting for your bundler to do its thing. Use Pax while you’re developing, and iterate to your heart’s content. Use your super-cool, magical, slow-as-molasses bundler for releases, when you don’t care how long it takes to run.]]></description><guid isPermaLink="false">7161b1be-54de-4776-857e-3ef78df24125</guid><pubDate>Wed, 25 Jul 2018 12:59:16 +0000</pubDate><dc:creator>Nathan</dc:creator></item><item><title>glitchcat — Creating CLI apps in Rust is super easy</title><link>https://blog.kuviman.com/2018/07/20/glitchcat.html</link><description><![CDATA[glitchcat is a cat-like program with glitch animation.]]></description><guid isPermaLink="false">1e54b1bb-953c-4149-b09c-9d1d3f7046cf</guid><pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate><dc:creator>kuviman</dc:creator></item><item><title>cargo-generate: create a new Rust project from a template </title><link>https://github.com/ashleygwilliams/cargo-generate</link><description><![CDATA[cargo-generate is a developer tool to help you get up and running quickly with a new Rust project by leveraging a pre-existing git repository as a template.]]></description><guid isPermaLink="false">9ceafb2d-9937-48c9-9deb-ff9d1ebd19d3</guid><pubDate>Wed, 18 Jul 2018 06:59:00 +0000</pubDate><dc:creator>Ashley Williams</dc:creator></item><item><title>How we built a Visual Studio Code extension for IoT prototyping</title><link>https://cultivatehq.com/posts/how-we-built-a-visual-studio-code-extension-for-iot-prototyping/</link><description><![CDATA[We recently had the opportunity to make a Visual Studio Code extension that needed to communicate with an embedded device. This post explains the architecture we chose to achieve that and the decisions that led to it.]]></description><guid isPermaLink="false">a9a551b0-07a6-48a2-944f-b956438fecc0</guid><pubDate>Fri, 13 Jul 2018 22:39:00 +0000</pubDate><dc:creator>Dan Munckton</dc:creator></item><item><title>Bioyino — a distributed, scalable metric aggregator</title><link>https://medium.com/avitotech/bioyino-a-distributed-scalable-statsd-3445acb177eb</link><description><![CDATA[So, you collect metrics. So do we. Yep, we also collect them. We can assure you that they are not useless at all, business guys do need…]]></description><guid isPermaLink="false">d32e6dac-51d6-4ede-9a7f-10f0bea2ca8a</guid><pubDate>Thu,  5 Jul 2018 10:07:52 +0000</pubDate><dc:creator>Sergey N</dc:creator></item><item><title>Moving from the shell to Rust with commandspec</title><link>http://timryan.org/2018/07/02/moving-from-the-shell-to-rust-with-commandspec.html</link><description><![CDATA[Almost every project I’ve worked on has grown a shell script named “build.sh”, and not much later a “test.sh” and “run.sh”. At this point, you have to make a decision as a developer whether your goal is to accidentally reinvent make or if your codebase’s needs are better met by an executable to manage your workflow.]]></description><guid isPermaLink="false">504568b7-fb85-4ed5-b94d-1c96333d2c64</guid><pubDate>Mon,  2 Jul 2018 15:50:00 +0000</pubDate><dc:creator>Tim Ryan</dc:creator></item><item><title>fastcat - A Faster &apos;cat&apos; Implementation Using Splice</title><link>https://matthias-endler.de/2018/fastcat/</link><description><![CDATA[Lots of people asked me to write another piece about the internals of well-known Unix commands. Well, actually, nobody asked me, but it makes for a good intro. I'm sure you’ve read the previous parts about yes and ls — they are awesome.

Anyway, today we talk about cat, which is used to concatenate files - or, more commonly, abused to print a file's contents to the screen.]]></description><guid isPermaLink="false">4c6bb401-ff09-4bce-a6d2-d598777a0ce2</guid><pubDate>Sun,  1 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Matthias Endler</dc:creator></item><item><title>devtop: Command line parser</title><link>https://medium.com/journey-to-rust/devtop-command-line-parser-f08b72b02bea</link><description><![CDATA[As operator I found that existing tooling fails with large number of unusual devices. If you have server with >100 virtual machines, and each virtual machines have one or more additional disk and a few network interfaces, it’s hard to find which VM cause stress on the server. Normal atop simply couldn’t cope with hundreds of tap/tun interfaces, multitude of block devices, etc. When I found that I have no proper tooling (as an operator) I wrote a shabby tools to do my job: they are calling blktop and ifstop. Both were written dirty and fast, and they does not follow the usual Python conventions (but they work as standalone binaries). They do their job, and normally I would say that’s enough. But those utilities are simple and have no big complications under the hood, so they are perfect candidates for rewriting in Rust for the sake of writing in Rust (I’m learning it!). I decide to combine them into a single utility: devtop, which I want to develop properly, according to Rust conventions, and through all aspects of packaging.]]></description><guid isPermaLink="false">f6f626f4-47ff-427c-8d44-b63c457bed46</guid><pubDate>Sun, 24 Jun 2018 14:21:28 +0000</pubDate><dc:creator>George Shuklin</dc:creator></item><item><title>Oxy - A Security Focused Remote Access Tool</title><link>https://oxy-secure.app/</link><description><![CDATA[It's like SSH, but more secure, and with cool modern features. It is not an implementation of SSH, it is a new, modern protocol.]]></description><guid isPermaLink="false">81e1a990-ce97-4ab6-a943-720330b5db6e</guid><pubDate>Sun, 24 Jun 2018 23:58:43 +1000</pubDate><dc:creator>Jenna Magius</dc:creator></item><item><title>Finda Websocket Architecture</title><link>https://keminglabs.com/blog/finda-websocket-architecture/</link><description><![CDATA[Finda lets you search and instantly switch between tabs in browsers like Firefox and Chrome and editors like Sublime Text and Visual Studio Code. It does this by communicating with these programs over local websocket connections. This article describes the design tradeoffs of this system, focusing on Rust implementation details that may be helpful to others building similar systems.]]></description><guid isPermaLink="false">b93a3070-a495-46de-a9e1-a1c650cafec3</guid><pubDate>Wed, 20 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Kevin J. Lynagh</dc:creator></item><item><title>Extreme benchmark feedback using Gitlab CI</title><link>https://www.rubdos.be/linux/gitlab/automation/benchmarks/rust/2018/06/19/extreme-benchmark-feedback.html</link><description><![CDATA[I am quite notorious for exploiting Gitlab’s CI. Ever since I started playing with it at the start of 2016, I tended to make things worse.]]></description><guid isPermaLink="false">c1d20548-b510-4452-9d30-8088b65f626a</guid><pubDate>Tue, 19 Jun 2018 13:18:00 +0000</pubDate><dc:creator>Ruben De Smet</dc:creator></item><item><title>Using Rust Code in a C/C++ Project with CMake</title><link>https://blog.devolutions.net/2018/06/insider-series-using-rust-code-in-a-cc-project-with-cmake</link><description><![CDATA[I am currently working on Wayk Now written in C for the most part. We recently started writing new code for it in Rust which I’m super excited about.

 As we needed a way to integrate this code in our CMake build1, we wrote a set of modules for CMake ]]></description><guid isPermaLink="false">fbc12ece-4e2b-4ee2-b3fb-e55fb54b508e</guid><pubDate>Tue, 19 Jun 2018 12:23:36 +0000</pubDate><dc:creator>Sebastien Duquette</dc:creator></item><item><title>C2Rust Demonstration</title><link>https://c2rust.com/</link><description><![CDATA[The C2Rust project is being developed by Galois and Immunant. This tool is able to translate most C modules into semantically equivalent Rust code. These modules are intended to be compiled in isolation in order to produce compatible object files. We are developing several tools that help transform the initial Rust sources into idiomatic Rust. ]]></description><guid isPermaLink="false">f12b593d-9a94-4571-8fe8-08ef5059d68f</guid><pubDate>Sun, 17 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Galois and Immunant</dc:creator></item><item><title>My Emacs Rust IDE</title><link>http://www.admintome.com/blog/my-emacs-rust-ide/</link><description><![CDATA[In this post, I will walk you through configuring an EMACS Rust IDE to get syntax highlighting and code completion for the Rust programming language.]]></description><guid isPermaLink="false">48c70c0e-5ce7-415b-8264-6e7a6dd02a8f</guid><pubDate>Sat, 16 Jun 2018 01:26:03 +0000</pubDate><dc:creator>Bill Ward</dc:creator></item><item><title>Nannou open source creative coding framework</title><link>http://nannou.cc/news/hello-nannou/</link><description><![CDATA[Nannou is an open source creative coding framework built in Rust for artists, hackers, designers and devs to express themselves with simple, fast, reliable, portable code.]]></description><guid isPermaLink="false">09393d03-bb17-4f1e-8d5a-5dc8338ff513</guid><pubDate>Thu, 14 Jun 2018 07:24:05 +0000</pubDate><dc:creator>Mitch, Josh, Keenan &amp; Tom</dc:creator></item><item><title>What do you think are the most interesting/exciting projects using Rust?</title><link>https://www.ncameron.org/blog/interesting_projects/</link><description><![CDATA[Last week I tweeted "What do you think are the most interesting/exciting projects using Rust? (No self-promotion :-) )". The response was awesome! Jonathan Turner suggested I write up the responses as a blog post, and here we are.]]></description><guid isPermaLink="false">f6f3b55c-c39c-4366-9de1-ebf3b230ee6c</guid><pubDate>Wed, 13 Jun 2018 16:26:29 +0000</pubDate><dc:creator>Nick Cameron</dc:creator></item><item><title>To do a Rust GUI</title><link>https://www.vandenoever.info/blog/2018/06/09/to-do-a-rust-gui.html</link><description><![CDATA[Rust Qt Binding Generator lets you combine Rust code with a Qt1 graphical application. A previous blog shows how to make a simple clock. It’s a good idea to read that post before reading this more advanced post, because in this post we are getting serious.

This blog post shows how to write a to-do application. The data model is a list of to-do items. The source code for this example is available in the folder examples/todos in the Rust Qt Binding Generator repository.]]></description><guid isPermaLink="false">9448ee63-32da-42f1-bd2e-1ef737d9b971</guid><pubDate>Sat,  9 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Jos van den Oever</dc:creator></item><item><title>Fishing in an Abyss: Building a Password Cracker in Rust</title><link>https://sts10.github.io//2018/05/31/1password-cracking-challenge.html</link><description><![CDATA[Ahead of this year’s World Password Day, 1Password – maker of password management software – announced a password cracking challenge. The company ostensibly wanted to find out how hard it would be to crack a three-word passphrase master password on one of their vaults, assuming that the attacker had the derived hash of the passphrase.]]></description><guid isPermaLink="false">e0e1ff6c-452a-442e-a3d5-93203569fa58</guid><pubDate>Thu, 31 May 2018 23:28:50 +0000</pubDate><dc:creator>Sam Schlinkert</dc:creator></item><item><title>madparts-rs 1.0 release</title><link>https://damad.be/joost/blog/madparts-rs-1-0-release.html</link><description><![CDATA[Back in Februari 2013 then coworker Romain S. showed me the new trend of programming editors that do continuous compilation while you type, showing you immediate feedback on your code. In parallel I also worked on 3D modeling for my 3D printer using the OpenSCAD program. OpenSCAD works by writing code in its custom language and then have it rendered. I had this idea of combining these two approaches to make an electronics footprint generator. And so the development of the original madparts program started. In August 2016 I had been playing with the then pretty new rust programming language and decided a rewrite in it and simplifying the program even further would be fun to do.]]></description><guid isPermaLink="false">e81240c1-c783-4113-9df8-27755677e929</guid><pubDate>Sun, 20 May 2018 00:00:00 +0000</pubDate><dc:creator>Joost Yervante Damad</dc:creator></item><item><title>An image viewer using Smithay&apos;s Client Toolkit</title><link>https://smithay.github.io/sctk-image-viewer.html</link><description><![CDATA[Small tutorial of using Smithay's Client Toolkit by example, building a small image viewer as a Wayland client.]]></description><guid isPermaLink="false">d2cf9531-53d8-45dd-a9e4-0feaa3699466</guid><pubDate>Thu, 10 May 2018 14:00:00 +0200</pubDate><dc:creator>Victor Berger</dc:creator></item><item><title>Entity-Component-System architecture for UI in Rust</title><link>https://raphlinus.github.io/personal/2018/05/08/ecs-ui.html</link><description><![CDATA[For a fun project, I’ve been tinkering with xi-win, an experimental Windows front-end for xi-editor, written in Rust. I’m basically optimizing for performance, so making a number of somewhat unusual decisions. Among other things, I’m writing the UI myself, rather than using an existing toolkit or framework.]]></description><guid isPermaLink="false">cfa15026-8758-4249-b23c-fa41e23161c4</guid><pubDate>Tue,  8 May 2018 18:29:03 +0000</pubDate><dc:creator>Raph Levien</dc:creator></item><item><title>sudo_pair - Plugin for sudo that requires another human to approve and monitor privileged sudo sessions</title><link>https://github.com/square/sudo_pair</link><description><![CDATA[sudo is used by engineers daily to run commands as privileged users. But on some sensitive systems, you really want to ensure that no individual can act entirely autonomously. At Square, this includes applications that manage our internal access-control systems, store accounting ledgers, or even move around real money. This plugin allows us to ensure that no user can act entirely on their own authority within these systems.]]></description><guid isPermaLink="false">66f3233f-afdd-49af-9cf4-cb71bcd56b33</guid><pubDate>Mon,  7 May 2018 18:24:54 +0000</pubDate><dc:creator>Square</dc:creator></item><item><title>Filtering Duplicate Log Entries via Rust and Runiq</title><link>https://whitfin.io/filtering-unique-logs-using-rust/</link><description><![CDATA[Whilst sort -u is super easy to use, the requirement of sorting your data cannot be overlooked as it means your entire file needs to be buffered into memory at once. This is not always possible, or even if possible it's not always desired. On the other hand uniq is great, but in order to sort your data in advance you still have the same issue. It was due to this that I wrote runiq, which is essentially an optimized and more flexible implementation of both of the aforemention tools for the purposes of duplicate filtering. It performs much faster, with much less memory, and does not require sorted input (although it can optimize this case).]]></description><guid isPermaLink="false">ef638662-6cfb-4335-9e01-baa7af9a5d95</guid><pubDate>Mon,  7 May 2018 03:17:28 +0000</pubDate><dc:creator>Isaac Whitfield</dc:creator></item><item><title>My Compound Passphrase List Safety Checker</title><link>https://sts10.github.io/2018/05/05/compound-passphrase-list-safety-checker.html</link><description><![CDATA[I’ve been thinking about information theory, entropy, and passphrases for a couple of months now. I’ve been particularly interested in using random passphrases as passwords. An example of one of these passphrases would be “stamina turret backlands ruby”. The words have to be as purely random as possible – using your four dogs’ names is not nearly as strong as a password, as an attacker would likely guess that relatively early.]]></description><guid isPermaLink="false">3e8fce57-40d7-4eec-9425-a2b32ef5895d</guid><pubDate>Sat,  5 May 2018 02:13:50 +0000</pubDate><dc:creator>Sam Schlinkert</dc:creator></item><item><title>Introducing seiri — a music 🎶 manager for lots of music</title><link>https://medium.com/@chyyran/introducing-seiri-a-music-manager-for-lots-of-music-990b464b3387</link><description><![CDATA[TL;DR seiri is a lightweight music manager written (mostly) in Rust that helps keep huge music libraries organized. Try it today at chyyran.moe/seiri.]]></description><guid isPermaLink="false">cf489f8e-70b9-4669-8424-03e79fab2ad8</guid><pubDate>Thu,  3 May 2018 23:35:26 +0000</pubDate><dc:creator>Ronny Chan</dc:creator></item><item><title>kanban-app - Kanban board built with Rust and Elm without Electron</title><link>https://github.com/huytd/kanban-app</link><description><![CDATA[This is a web-based Kanban board application, built with Elm and Rust. The only different from this application and hundred thousands of web-based application out there is: We don't need Electron!. Instead, it use native WebView (WebKit for Linux/macOS, and MSHTML on Windows),]]></description><guid isPermaLink="false">103f9c4f-f4f9-4e15-98b2-0d2b1db6b792</guid><pubDate>Thu,  3 May 2018 07:30:00 +1000</pubDate><dc:creator>Huy Tr.</dc:creator></item><item><title>Servo engines written in Rust deliver memory safety and multithreading</title><link>https://research.mozilla.org/servo-engines/</link><description><![CDATA[In 2012, Mozilla started the Servo project, a community effort to create new open source browser components that can take advantage of multicore hardware to improve speed, stability and responsiveness. Servo is comparable to WebKit, an open source browser engine that is the foundation of Apple’s Safari browser. (Other browser engines include Blink, EdgeHTML, and Gecko.) The difference is that Servo is written in the Rust programming language, bringing lightning-fast performance and memory safety to browser internals. Rust code can drastically cut down the number of critical bugs that affect browser engines. Servo uses a modular architecture and currently runs on Linux, macOS, Windows, and Android operating systems.]]></description><guid isPermaLink="false">7812ff10-6f3d-4990-8832-9b5eb63780d8</guid><pubDate>Tue,  1 May 2018 16:04:53 +0000</pubDate><dc:creator>Mozilla Research</dc:creator></item><item><title>bat - print code to the terminal with syntax highlighting and git integration</title><link>https://github.com/sharkdp/bat</link><description><![CDATA[bat supports syntax highlighting for a large number of programming and markup languages. bat also communicates with git to show modifications with respect to the index (see left side bar).]]></description><guid isPermaLink="false">c38eff1e-2560-4373-a3d6-9e3ea04853ad</guid><pubDate>Tue,  1 May 2018 00:00:00 +0000</pubDate><dc:creator>David Peter</dc:creator></item><item><title>Hammond: A Podcast Client for the GNOME Desktop</title><link>https://gitlab.gnome.org/World/hammond</link><description><![CDATA[Hammond has been in development since Sep 2017. It makes use of the Rust bindings to GNOME libraries as well as diesel, serde, reqwest, and a number other crates to build a beautiful, native application that feels right at home on the GNOME desktop.]]></description><guid isPermaLink="false">79a75489-f371-461e-8943-273f7b60e620</guid><pubDate>Fri, 27 Apr 2018 21:12:00 +1000</pubDate><dc:creator>Jordan Petridis</dc:creator></item><item><title>JARVIS - Notes on Rust Crates From Writing an RSS Reader</title><link>https://bheisler.github.io/post/jarvis-impressions-of-rust-libraries/</link><description><![CDATA[Way back in the dim mists of history (back in university) I wrote myself a custom RSS reader in Java and called it JARVIS1. You see, I read a lot of webcomics. Like, a lot. Some webcomics provide RSS feeds, but some don’t, and as my collection grew it started to become a hassle to use Firefox’s live bookmarks to manage it all. Ultimately, I wrote up a quick Swing GUI to use as a single interface for keeping up with blogs and tracking which comics had published updates since the last time I’d checked2.]]></description><guid isPermaLink="false">caa2a44c-fd86-4221-92ba-226a3834e0a4</guid><pubDate>Sun, 22 Apr 2018 16:00:00 -0600</pubDate><dc:creator>Brook Heisler</dc:creator></item><item><title>Pijul 0.10</title><link>https://pijul.org/posts/2018-04-21-pijul-0.10/</link><description><![CDATA[I’m pleased to announce the new release of Pijul, version 0.10. Pijul is an easy to use, distributed and fast version control system. This release has been a long time coming, but brings in an important number of new features and stability enhancements.]]></description><guid isPermaLink="false">d0b170a0-b0c5-4d33-b3f2-e0e0dcac1872</guid><pubDate>Sat, 21 Apr 2018 15:13:57 +0200</pubDate><dc:creator>Pijul</dc:creator></item><item><title>fastmod - A fast partial replacement for the codemod tool</title><link>https://github.com/facebookincubator/fastmod</link><description><![CDATA[fastmod is a fast partial replacement for codemod. Like codemod, it is a tool to assist you with large-scale codebase refactors, and it supports most of codemod's options. fastmod's major philosophical difference from codemod is that it is focused on improving the use case "I want to use interactive mode to make sure my regex is correct, and then I want to apply the regex everywhere". For this use case, it offers much better performance than codemod]]></description><guid isPermaLink="false">36e40f73-b836-49cd-a558-d93a238c7386</guid><pubDate>Thu, 19 Apr 2018 20:30:07 +0000</pubDate><dc:creator>Facebook Incubator</dc:creator></item><item><title>Announcing cargo src (beta)</title><link>https://ncameron.org/blog/announcing-cargo-src-beta/</link><description><![CDATA[cargo src is a new tool for exploring your Rust code. It is a cargo plugin which runs locally and lets you navigate your project in a web browser. It has syntax highlighting, jump to definition, type on hover, semantic search, find uses, find impls, and more.]]></description><guid isPermaLink="false">18ca5e39-fd8f-4739-95ef-9daaef6d525d</guid><pubDate>Wed, 18 Apr 2018 20:52:39 +0000</pubDate><dc:creator>Nick Cameron</dc:creator></item><item><title>dust - A more intuitive version of du in Rust</title><link>https://github.com/bootandy/dust</link><description><![CDATA[Dust is meant to give you an instant overview of which directories are using disk space without requiring sort or head. Dust will print a maximum of 1 'Did not have permissions message'. Dust will list the 15 biggest sub directories or files and will smartly recurse down the tree to find the larger ones. There is no need for a '-d' flag or a '-h' flag. The largest sub directory will have its size shown in red]]></description><guid isPermaLink="false">f6e1bdda-278a-4077-8d2f-49417303637f</guid><pubDate>Wed, 18 Apr 2018 07:26:00 +1000</pubDate><dc:creator>andy boot</dc:creator></item><item><title>angle-grinder - Slice and dice log files on the command line</title><link>https://github.com/rcoh/angle-grinder</link><description><![CDATA[Angle-grinder allows you to parse, aggregate, sum, average, percentile, and sort your data. You can see it, live-updating, in your terminal. Angle grinder is designed for when, for whatever reason, you don't have your data in graphite/honeycomb/kibana/sumologic/splunk/etc. but still want to be able to do sophisticated analytics.

Angle grinder can process about a million rows per second, so it's usable for fairly meaty aggregation. The results will live update in your terminal as data is processed. Angle grinder is a bare bones functional programming language coupled with a pretty terminal UI.]]></description><guid isPermaLink="false">ef8bca4e-5627-4bde-a21f-9dae321ac7c0</guid><pubDate>Wed, 18 Apr 2018 07:26:00 +1000</pubDate><dc:creator>Russell Cohen</dc:creator></item><item><title>Faster Bulletproofs with Ristretto &amp; AVX2</title><link>https://blog.chain.com/faster-bulletproofs-with-ristretto-avx2-29450b4490cd</link><description><![CDATA[A few months ago, Bünz, Bootle, Boneh, Poelstra, Wuille, and Maxwell published Bulletproofs, which dramatically improves proof performance both in terms of proof size and verification time. In addition, it allows proving a much wider class of statements than just range proofs.

At Chain, we (Henry de Valence, Cathie Yun and Oleg Andreev) have been working on a pure-Rust Bulletproofs implementation, whose initial version we are publishing today, together with a set of notes.]]></description><guid isPermaLink="false">d412d980-cc59-4a0b-ab9e-19100f3b8927</guid><pubDate>Fri, 13 Apr 2018 19:21:27 +0000</pubDate><dc:creator>Chain</dc:creator></item><item><title>Sequoia-PGP - a modular OpenPGP implementation</title><link>https://sequoia-pgp.org/</link><description><![CDATA[Sequoia is a modular OpenPGP implementation in Rust.]]></description><guid isPermaLink="false">1282d538-71c9-4379-a330-820eccf83d22</guid><pubDate>Wed, 11 Apr 2018 06:52:00 +1000</pubDate><dc:creator>p≡p foundation</dc:creator></item></channel></rss>