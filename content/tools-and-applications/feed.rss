<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - Tools and Applications</title><link>https://readrust.net/</link><description>Tools and Applications posts on Read Rust</description><item><title>kanban-app - Kanban board built with Rust and Elm without Electron</title><link>https://github.com/huytd/kanban-app</link><description><![CDATA[This is a web-based Kanban board application, built with Elm and Rust. The only different from this application and hundred thousands of web-based application out there is: We don't need Electron!. Instead, it use native WebView (WebKit for Linux/macOS, and MSHTML on Windows),]]></description><guid isPermaLink="false">103f9c4f-f4f9-4e15-98b2-0d2b1db6b792</guid><pubDate>Thu,  3 May 2018 07:30:00 +1000</pubDate><dc:creator>Huy Tr.</dc:creator></item><item><title>Servo engines written in Rust deliver memory safety and multithreading</title><link>https://research.mozilla.org/servo-engines/</link><description><![CDATA[In 2012, Mozilla started the Servo project, a community effort to create new open source browser components that can take advantage of multicore hardware to improve speed, stability and responsiveness. Servo is comparable to WebKit, an open source browser engine that is the foundation of Apple’s Safari browser. (Other browser engines include Blink, EdgeHTML, and Gecko.) The difference is that Servo is written in the Rust programming language, bringing lightning-fast performance and memory safety to browser internals. Rust code can drastically cut down the number of critical bugs that affect browser engines. Servo uses a modular architecture and currently runs on Linux, macOS, Windows, and Android operating systems.]]></description><guid isPermaLink="false">7812ff10-6f3d-4990-8832-9b5eb63780d8</guid><pubDate>Tue,  1 May 2018 16:04:53 +0000</pubDate><dc:creator>Mozilla Research</dc:creator></item><item><title>bat - print code to the terminal with syntax highlighting and git integration</title><link>https://github.com/sharkdp/bat</link><description><![CDATA[bat supports syntax highlighting for a large number of programming and markup languages. bat also communicates with git to show modifications with respect to the index (see left side bar).]]></description><guid isPermaLink="false">c38eff1e-2560-4373-a3d6-9e3ea04853ad</guid><pubDate>Tue,  1 May 2018 00:00:00 +0000</pubDate><dc:creator>David Peter</dc:creator></item><item><title>JARVIS - Notes on Rust Crates From Writing an RSS Reader</title><link>https://bheisler.github.io/post/jarvis-impressions-of-rust-libraries/</link><description><![CDATA[Way back in the dim mists of history (back in university) I wrote myself a custom RSS reader in Java and called it JARVIS1. You see, I read a lot of webcomics. Like, a lot. Some webcomics provide RSS feeds, but some don’t, and as my collection grew it started to become a hassle to use Firefox’s live bookmarks to manage it all. Ultimately, I wrote up a quick Swing GUI to use as a single interface for keeping up with blogs and tracking which comics had published updates since the last time I’d checked2.]]></description><guid isPermaLink="false">caa2a44c-fd86-4221-92ba-226a3834e0a4</guid><pubDate>Sun, 22 Apr 2018 16:00:00 -0600</pubDate><dc:creator>Brook Heisler</dc:creator></item><item><title>Hammond: A Podcast Client for the GNOME Desktop</title><link>https://gitlab.gnome.org/World/hammond</link><description><![CDATA[Hammond has been in development since Sep 2017. It makes use of the Rust bindings to GNOME libraries as well as diesel, serde, reqwest, and a number other crates to build a beautiful, native application that feels right at home on the GNOME desktop.]]></description><guid isPermaLink="false">79a75489-f371-461e-8943-273f7b60e620</guid><pubDate>Fri, 27 Apr 2018 21:12:00 +1000</pubDate><dc:creator>Jordan Petridis</dc:creator></item><item><title>fastmod - A fast partial replacement for the codemod tool</title><link>https://github.com/facebookincubator/fastmod</link><description><![CDATA[fastmod is a fast partial replacement for codemod. Like codemod, it is a tool to assist you with large-scale codebase refactors, and it supports most of codemod's options. fastmod's major philosophical difference from codemod is that it is focused on improving the use case "I want to use interactive mode to make sure my regex is correct, and then I want to apply the regex everywhere". For this use case, it offers much better performance than codemod]]></description><guid isPermaLink="false">36e40f73-b836-49cd-a558-d93a238c7386</guid><pubDate>Thu, 19 Apr 2018 20:30:07 +0000</pubDate><dc:creator>Facebook Incubator</dc:creator></item><item><title>Pijul 0.10</title><link>https://pijul.org/posts/2018-04-21-pijul-0.10/</link><description><![CDATA[I’m pleased to announce the new release of Pijul, version 0.10. Pijul is an easy to use, distributed and fast version control system. This release has been a long time coming, but brings in an important number of new features and stability enhancements.]]></description><guid isPermaLink="false">d0b170a0-b0c5-4d33-b3f2-e0e0dcac1872</guid><pubDate>Sat, 21 Apr 2018 15:13:57 +0200</pubDate><dc:creator>Pijul</dc:creator></item><item><title>Announcing cargo src (beta)</title><link>https://ncameron.org/blog/announcing-cargo-src-beta/</link><description><![CDATA[cargo src is a new tool for exploring your Rust code. It is a cargo plugin which runs locally and lets you navigate your project in a web browser. It has syntax highlighting, jump to definition, type on hover, semantic search, find uses, find impls, and more.]]></description><guid isPermaLink="false">18ca5e39-fd8f-4739-95ef-9daaef6d525d</guid><pubDate>Wed, 18 Apr 2018 20:52:39 +0000</pubDate><dc:creator>Nick Cameron</dc:creator></item><item><title>dust - A more intuitive version of du in Rust</title><link>https://github.com/bootandy/dust</link><description><![CDATA[Dust is meant to give you an instant overview of which directories are using disk space without requiring sort or head. Dust will print a maximum of 1 'Did not have permissions message'. Dust will list the 15 biggest sub directories or files and will smartly recurse down the tree to find the larger ones. There is no need for a '-d' flag or a '-h' flag. The largest sub directory will have its size shown in red]]></description><guid isPermaLink="false">f6e1bdda-278a-4077-8d2f-49417303637f</guid><pubDate>Wed, 18 Apr 2018 07:26:00 +1000</pubDate><dc:creator>andy boot</dc:creator></item><item><title>angle-grinder - Slice and dice log files on the command line</title><link>https://github.com/rcoh/angle-grinder</link><description><![CDATA[Angle-grinder allows you to parse, aggregate, sum, average, percentile, and sort your data. You can see it, live-updating, in your terminal. Angle grinder is designed for when, for whatever reason, you don't have your data in graphite/honeycomb/kibana/sumologic/splunk/etc. but still want to be able to do sophisticated analytics.

Angle grinder can process about a million rows per second, so it's usable for fairly meaty aggregation. The results will live update in your terminal as data is processed. Angle grinder is a bare bones functional programming language coupled with a pretty terminal UI.]]></description><guid isPermaLink="false">ef8bca4e-5627-4bde-a21f-9dae321ac7c0</guid><pubDate>Wed, 18 Apr 2018 07:26:00 +1000</pubDate><dc:creator>Russell Cohen</dc:creator></item><item><title>Faster Bulletproofs with Ristretto &amp; AVX2</title><link>https://blog.chain.com/faster-bulletproofs-with-ristretto-avx2-29450b4490cd</link><description><![CDATA[A few months ago, Bünz, Bootle, Boneh, Poelstra, Wuille, and Maxwell published Bulletproofs, which dramatically improves proof performance both in terms of proof size and verification time. In addition, it allows proving a much wider class of statements than just range proofs.

At Chain, we (Henry de Valence, Cathie Yun and Oleg Andreev) have been working on a pure-Rust Bulletproofs implementation, whose initial version we are publishing today, together with a set of notes.]]></description><guid isPermaLink="false">d412d980-cc59-4a0b-ab9e-19100f3b8927</guid><pubDate>Fri, 13 Apr 2018 19:21:27 +0000</pubDate><dc:creator>Chain</dc:creator></item><item><title>QCGPU - Hardware Accelerated Quantum Computer Simulation</title><link>https://qcgpu.github.io/</link><description><![CDATA[A software library for high performance and hardware accelerated simulation of Quantum Computers and Algorithms. Written with Rust and OpenCL.]]></description><guid isPermaLink="false">ed19c2a7-fe9d-465b-b41a-71480e6b978a</guid><pubDate>Wed, 11 Apr 2018 06:47:00 +1000</pubDate><dc:creator>QCGPU</dc:creator></item><item><title>New sysinfo version (huge performance improvements!)</title><link>https://blog.guillaume-gomez.fr/articles/2018-04-09+New+sysinfo+version+%28huge+performance+improvements%21%29</link><description><![CDATA[This new version comes with great performance improvements. We're talking about 3x faster on macos, 2x faster on linux and 3x faster on windows (the benchmarks are at the end of the post).]]></description><guid isPermaLink="false">b93c9682-4e53-4a7f-a39b-79d57b2b4737</guid><pubDate>Mon,  9 Apr 2018 00:00:00 +0000</pubDate><dc:creator>Guillaume Gomez</dc:creator></item><item><title>Sequoia-PGP - a modular OpenPGP implementation</title><link>https://sequoia-pgp.org/</link><description><![CDATA[Sequoia is a modular OpenPGP implementation in Rust.]]></description><guid isPermaLink="false">1282d538-71c9-4379-a330-820eccf83d22</guid><pubDate>Wed, 11 Apr 2018 06:52:00 +1000</pubDate><dc:creator>p≡p foundation</dc:creator></item><item><title>Announcing personal finance tool &apos;pfr&apos;</title><link>https://kyusscaesar.wordpress.com/2018/03/29/announcing-pfr/</link><description><![CDATA[pfr is a command-line tool for helping me to manage my personal finances. At the end of each month, I like to sit down and “allocate” funds to cover my expenses for the following month. However, not all of my expenses occur monthly. For example, things like rent are paid weekly, and I think of money spent on food in terms of weeks, so I have to multiply those expenses by 4 (ish). I also have to figure out how much money to put in each account, e.g on my EFTPOS (direct-debit) card or for automatic payments. It’s not hard, but then again, that’s why we write programs.]]></description><guid isPermaLink="false">88175c1a-8150-45f5-a1d8-d390457b9fe2</guid><pubDate>Thu, 29 Mar 2018 10:10:34 +0000</pubDate><dc:creator>Antony Southworth</dc:creator></item><item><title>Introducing Click: The Command Line Interactive Controller for Kubernetes</title><link>https://databricks.com/blog/2018/03/27/introducing-click-the-command-line-interactive-controller-for-kubernetes.html</link><description><![CDATA[Click is an open-source tool that lets you quickly and easily run commands against Kubernetes resources, without copy/pasting all the time, and that easily integrates into your existing command line workflows. This blog introduces its its usage and merits.]]></description><guid isPermaLink="false">1054cc8a-cbdd-4073-b7f9-2801aaad6fd6</guid><pubDate>Tue, 27 Mar 2018 16:07:56 +0000</pubDate><dc:creator>Nick Lanham</dc:creator></item><item><title>From cobalt.rs to gutenberg</title><link>https://markentier.tech/posts/2018/03/from-cobalt-to-gutenberg/</link><description><![CDATA[I wish I could have the features of both tools, but for now I will use gutenberg over cobalt. A tiny migration and feature comparison story.]]></description><guid isPermaLink="false">fe44a6a6-04fd-42f7-a0ee-c816282bac5e</guid><pubDate>Wed, 28 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Christoph Grabo (@asaaki)</dc:creator></item><item><title>Designing a fast CLI join tool with rust</title><link>https://milancio42.github.io/blog/2018-03-22-rjoin/</link><description><![CDATA[(or how rust helped me to match the speed of GNU join written by Mike Haertel)]]></description><guid isPermaLink="false">cfc59513-ea0b-4d61-ac46-d7ea2e5bba8b</guid><pubDate>Thu, 22 Mar 2018 09:27:20 +0100</pubDate><dc:creator>Milan Opath</dc:creator></item><item><title>xray Update for March 26, 2018</title><link>https://github.com/atom/xray/blob/master/docs/updates/2018_03_26.md</link><description><![CDATA[Xray - An experimental next-generation Electron-based text editor. This update covers a revised roadmap, fast file finding, and thoughts on key bindings.]]></description><guid isPermaLink="false">b33165a2-c60c-4431-872d-4528770e42c1</guid><pubDate>Mon, 26 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Xray Team</dc:creator></item><item><title>Compiling Rust + Windows + GTK step-by-step</title><link>https://www.reddit.com/r/rust/comments/86kmhu/compiling_rust_windows_gtk_stepbystep/</link><description><![CDATA[In case you have tried to make a rust program with GUI that would work both on Linux and Windows, you probably may have faced some issues in some point (especially if you are a newcomer). Compiling in Linux is quite easy, but in Windows life gets a bit tricky.

I've pulled together some info from here and there so that no-one else had to fight their way through fire and flames.]]></description><guid isPermaLink="false">e0dec9da-faee-4dcd-bfd2-8e14dda4f3f6</guid><pubDate>Fri, 23 Mar 2018 13:29:57 +0000</pubDate><dc:creator>light3rn</dc:creator></item><item><title>Presentation Manager written in Rust</title><link>https://medium.com/@mattdark/presentation-manager-written-in-rustlang-f36b73bb8dd2</link><description><![CDATA[A tool for serving and managing presentation slides.]]></description><guid isPermaLink="false">73cbd270-d16d-4aec-b38d-9503961891bd</guid><pubDate>Mon, 19 Mar 2018 23:28:45 +0000</pubDate><dc:creator>Mario García</dc:creator></item><item><title>Building a fast Electron app with Rust</title><link>https://keminglabs.com/blog/building-a-fast-electron-app-with-rust/</link><description><![CDATA[When I built Finda, I wanted it to be fast — specifically, to respond to all user input within 16 milliseconds.

Given this goal, you might be surprised to learn that Finda is built with Electron, a framework that’s often decried for being the opposite of fast.]]></description><guid isPermaLink="false">655ac748-e1e9-4fa4-b12a-2dc7c2e88fa7</guid><pubDate>Sun, 18 Mar 2018 00:00:00 +1100</pubDate><dc:creator>Kevin J. Lynagh</dc:creator></item><item><title>A Tiny `ls` Clone Written in Rust</title><link>https://matthias-endler.de/2018/ls/</link><description><![CDATA[In my series of useless Unix tools rewritten in Rust, today I'm going to be covering one of my all-time favorites: ls.]]></description><guid isPermaLink="false">44f7fa8d-b23d-47e7-b3dd-f227e8317d49</guid><pubDate>Thu,  1 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Matthias Endler</dc:creator></item><item><title>Oxidizing Fedora: Try Rust and its applications today</title><link>https://fedoramagazine.org/oxidizing-fedora-try-rust-applications-today/</link><description><![CDATA[In recent years, it has become increasingly important to develop software that minimizes security vulnerabilities. Memory management bugs are a common cause of these vulnerabilities. To that end, the Mozilla community has spent the last several years building the Rust language and ecosystem which focuses primarily on eliminating those bugs. And Rust is available in Fedora today, along with a few applications in Fedora 27 and higher, as seen below.]]></description><guid isPermaLink="false">c5a101b5-e749-4e99-9e08-54de2cf0a2c1</guid><pubDate>Wed, 21 Feb 2018 08:00:23 +0000</pubDate><dc:creator>Igor Gnatenko and Neal Gompa</dc:creator></item><item><title>How to write GStreamer Elements in Rust Part 2: A raw audio sine wave source</title><link>https://coaxion.net/blog/2018/02/how-to-write-gstreamer-elements-in-rust-part-2-a-raw-audio-sine-wave-source/</link><description><![CDATA[A bit later than anticipated, this is now part two of the blog post series about writing GStreamer elements in Rust. Part one can be found here, and I’ll assume that everything written there is known already. In this part, a raw audio sine wave source element is going to be written. It will be similar to the one Mathieu was writing in his blog post about writing such a GStreamer element in Python. Various details will be different though, but more about that later.]]></description><guid isPermaLink="false">0d46d60e-49c7-44ce-8f0c-48b94501b1ca</guid><pubDate>Wed, 21 Feb 2018 15:05:22 +0000</pubDate><dc:creator>Sebastian Dröge</dc:creator></item><item><title>Snips Uses Rust to Build an Embedded Voice Assistant</title><link>https://blog.mozilla.org/blog/2018/02/21/snips-uses-rust-build-embedded-voice-assistant/</link><description><![CDATA[The team at Paris-based Snips has created a voice assistant that can be embedded in a single device or used in a home network to control lights, thermostat, music, and more. You can build a home hub on a Raspberry Pi and ask it for a weather report, to play your favorite song, or to brew up a double espresso. Manufacturers like Keecker are adding Snips’ technology to products like multimedia home robots. And Snips works closely with leaders across the value chain, like NVIDIA, EBV, and Analog Devices, in order to voice-enable an increasingly wider range of device types, from speakers to home automation systems to cars.]]></description><guid isPermaLink="false">8e33c7c4-2788-418b-8e47-ca8990ae0d38</guid><pubDate>Wed, 21 Feb 2018 12:34:56 -0800</pubDate><dc:creator>Judy DeMocker</dc:creator></item><item><title>Spectra gets Rust scripting!</title><link>http://phaazon.net/blog/spectra_plugins</link><description><![CDATA[spectra is a crate I’ve been maintaining for a few months / years now. It’s a crate that I mainly use for demoscene productions (I released two with it, Céleri Rémoulade and Outline Invitation) but I also use it to play around and experiment new rendering, animation and video game techniques.]]></description><guid isPermaLink="false">44ef6094-b3df-4a2c-9cd9-429feecff6bc</guid><pubDate>Mon, 19 Feb 2018 02:57:00 +0000</pubDate><dc:creator>Dimitri Sabadie</dc:creator></item><item><title>Fanta: An opinionated framework for web development in rust</title><link>https://github.com/trezm/Fanta</link><description><![CDATA[Fanta is a web framework that aims for developers to be productive and consistent across projects and teams. Its goals are to be: Opinionated, Fast, and Intuitive. Based heavily off of the work here: https://github.com/tokio-rs/tokio-minihttp]]></description><guid isPermaLink="false">0af4c90e-74b2-438d-aaed-798c9f6e900a</guid><pubDate>Wed, 14 Feb 2018 18:44:00 +1100</pubDate><dc:creator>Peter Mertz</dc:creator></item><item><title>comm is a peer-to-peer instant messaging protocol designed to be resilient to censorship</title><link>https://github.com/zacstewart/comm-gtk</link><description><![CDATA[comm is a peer-to-peer instant messaging protocol designed to be resilient to censorship. comm-gtk is a GUI client built on the comm library. To try it out, start the app. In the configuration window, enter a secret phrase, a bootstrap node (IP:port pair), and a local port to listen on (e.g. 6669). For a bootstrap node, try 165.227.114.200:6667 (or any other node's IP address if you know one). Click connect to join the network.]]></description><guid isPermaLink="false">1694fd36-21ca-4e3f-8654-9291c3ba4de7</guid><pubDate>Tue, 13 Feb 2018 23:02:31 -0600</pubDate><dc:creator>Zac Stewart</dc:creator></item><item><title>tealdeer - A very fast implementation of tldr in Rust.</title><link>https://github.com/dbrgn/tealdeer</link><description><![CDATA[A fast command line client for tldr: A collection of simplified and community-driven man pages.]]></description><guid isPermaLink="false">751253b7-494d-4930-9586-40c18cab9280</guid><pubDate>Mon, 12 Feb 2018 07:46:00 +1100</pubDate><dc:creator>Danilo Bargen</dc:creator></item><item><title>Reflecting on ppbert</title><link>https://vfoley.xyz/ppbert/</link><description><![CDATA[I had an itch: I was pretty-printing the BERT-encoded terms that we use in a production system at work and it was very slow. The Erlang shell took more than two minutes to dump the largest file. (It took about 0.1 second to read and parse the file; the rest was spent in io:format.) I decided to scratch that itch: I wrote ppbert, a command-line utility that reads BERT-encoded values and pretty-prints them. I’ve worked sporadically on ppbert for almost a year now, I use it daily at work, I’m happy with it, and I want to write about some of the things I learned during that journey.]]></description><guid isPermaLink="false">28ce1b60-8837-4443-87fb-669bf176db9b</guid><pubDate>Fri,  9 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Vincent Foley</dc:creator></item><item><title>Guitar Effects in Rust</title><link>http://rickyhan.com/jekyll/update/2018/02/06/rust-guitar-pedal-effects-dsp.html</link><description><![CDATA[In an effort to experiment with dsp, I wrote a guitar/bass effects processor this past weekend. The end result works very well (to my pleasant surprise). It doesn’t have 90% of the functionalities of any of rakarrack, guitar rig, garage band but overall it was a fun weekend hack.]]></description><guid isPermaLink="false">60238a1c-95ee-46d8-bf5c-e70fed87a103</guid><pubDate>Tue,  6 Feb 2018 04:00:00 +0000</pubDate><dc:creator>Ricky Han</dc:creator></item><item><title>DataFusion: Big Data Platform for Rust</title><link>https://www.datafusion.rs/</link><description><![CDATA[DataFusion is an open-source Big Data platform implemented in the Rust programming language with a similar programming style to Apache Spark.]]></description><guid isPermaLink="false">434c400b-b4ac-49c9-87fa-db2a8b5f1ba7</guid><pubDate>Sun,  4 Feb 2018 16:51:47 +0000</pubDate><dc:creator>Andy Grove</dc:creator></item><item><title>retrobasic - A BASIC interpreter written in Rust</title><link>https://github.com/seasalim/retrobasic</link><description><![CDATA[retrobasic is a BASIC interpreter written in Rust. It is based on the original BASIC '64 implementation, and modified as needed to make it more compatible with some of the classic BASIC games.]]></description><guid isPermaLink="false">303b0429-9b0c-46f8-a555-fbab8c2bdf90</guid><pubDate>Sun,  4 Feb 2018 17:21:55 +0000</pubDate><dc:creator>seasalim</dc:creator></item><item><title>Writing a command-line program in Rust - Federico&apos;s Blog</title><link>https://people.gnome.org/~federico/blog/writing-a-command-line-program-in-rust.html</link><description><![CDATA[As a library writer, it feels a bit strange, but refreshing, to write a program that actually has a main() function. My experience with Rust so far has been threefold:]]></description><guid isPermaLink="false">4aeb0aa5-6a72-41c9-87bc-a2e24b5e33d3</guid><pubDate>Sat,  3 Feb 2018 11:41:20 -0600</pubDate><dc:creator>Federico Mena Quintero</dc:creator></item><item><title>Make your own make</title><link>https://matklad.github.io/2018/01/03/make-your-own-make.html</link><description><![CDATA[An obvious idea is to use Rust for task automation. Originally, I have proposed creating a special Cargo subcommand to execute build tasks, implemented as Rust programs, in this thread. However, since then I realized that there are built-in tools in Cargo which allow one to get a pretty ergonomic solution. Namely, the combination of workspaces, aliases and ability to define binaries seems to do the trick.]]></description><guid isPermaLink="false">93d7f09d-e1eb-4d6a-a792-5765326730be</guid><pubDate>Wed,  3 Jan 2018 10:52:50 +0000</pubDate><dc:creator>Aleksey Kladov</dc:creator></item><item><title>mdcat - Cat for markdown: Show markdown documents in TTYs</title><link>https://github.com/lunaryorn/mdcat</link><description><![CDATA[Cat for markdown: Show markdown documents in TTYs]]></description><guid isPermaLink="false">2168f429-844d-4629-97da-c149e9026cfd</guid><pubDate>Sat,  3 Feb 2018 18:23:00 +1100</pubDate><dc:creator>Sebastian Wiesner</dc:creator></item></channel></rss>