<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - Tools and Applications</title><link>https://readrust.net/</link><description>Tools and Applications posts on Read Rust</description><item><title>Notion: the hassle-free JavaScript toolchain manager</title><link>https://github.com/notion-cli/notion</link><description><![CDATA[Reliable: Ensure everyone in your project uses an identical dev environment, from the Node version to your preferred package manager.

Universal: Enjoy the same command-line experience in every shell and every major operating system.

Fast: Notion is implemented in Rust and deployed as a static executable for maximum performance.]]></description><guid isPermaLink="false">559ed8de-7e83-4caa-aef1-f2b5fd7faa01</guid><pubDate>Wed,  6 Feb 2019 06:23:00 +0000</pubDate><dc:creator>LinkedIn Engineering</dc:creator></item><item><title>A detailed guide to writing your first Neovim plugin in Rust</title><link>https://medium.com/@srishanbhattarai/a-detailed-guide-to-writing-your-first-neovim-plugin-in-rust-a81604c606b1</link><description><![CDATA[I recently wrote a plugin in Rust to control the Spotify desktop app for MacOS and find lyrics from within Neovim and found it to be a neat experience overall, and that’s coming from someone who isn’t a Rust expert. This post is a summary of all the research and discovery that happened during that process.]]></description><guid isPermaLink="false">0be32871-6687-4e3d-9cab-5bbb411c9cc0</guid><pubDate>Mon,  4 Feb 2019 09:58:50 +0000</pubDate><dc:creator>Srishan Bhattarai</dc:creator></item><item><title>Packaging a game for Windows, Mac, and Linux with Rust.</title><link>https://agmprojects.com/blog/packaging-a-game-for-windows-mac-and-linux-with-rust</link><description><![CDATA[Building a cross platform game for desktop operating systems in Rust is fairly doable without needing much platform specific code. Glutin is a Rust alternative to SDL for handling window creation & input. GFX handles most of the graphics API abstraction for you. You still write the shaders, but I was able to just use OpenGL and get it working on Windows 10, MacOS, and Ubuntu.]]></description><guid isPermaLink="false">8a353b9f-bb7e-40d7-a5ab-fd5372ad76f4</guid><pubDate>Sat,  2 Feb 2019 23:53:56 +0000</pubDate><dc:creator>Aaron McLeod</dc:creator></item><item><title>Using Rust for creating Ubuntu Touch apps</title><link>https://timsueberkrueb.io/posts/2019/01/18/rust-ubuntu-touch-app-dev/</link><description><![CDATA[This post aims to give you a small introduction to using the Rust programming language for writing apps for Ubuntu touch.]]></description><guid isPermaLink="false">daf60963-a30c-4e74-82cb-123d2faac884</guid><pubDate>Sun, 20 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Tim Süberkrüb</dc:creator></item><item><title>sharkdp/hexyl: A command-line hex viewer</title><link>https://github.com/sharkdp/hexyl</link><description><![CDATA[hexyl is a simple hex viewer for the terminal. It uses a colored output to distinguish different categories of bytes (NULL bytes, printable ASCII characters, ASCII whitespace characters, other ASCII characters and non-ASCII).]]></description><guid isPermaLink="false">4afbd4d0-42ae-460f-8805-22e094fb394b</guid><pubDate>Thu, 10 Jan 2019 00:00:00 +0000</pubDate><dc:creator>David Peter</dc:creator></item><item><title>PyOxidizer: Make distributable Python applications using Rust</title><link>https://github.com/indygreg/pyoxidizer</link><description><![CDATA[PyOxidizer is a collection of Rust crates that facilitate building libraries and binaries containing Python interpreters. PyOxidizer is capable of producing a single file executable - with all dependencies statically linked and all resources (like .pyc files) embedded in the executable.]]></description><guid isPermaLink="false">ea33097d-8f78-4d8d-9f75-bc9305380398</guid><pubDate>Thu,  3 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Gregory Szorc</dc:creator></item><item><title>I made MPD index SoundCloud, here&apos;s how I did it</title><link>https://polyfloyd.net/post/soundcloud-fuse-mpd/</link><description><![CDATA[The usual process of playing something on our music server is a bit cumbersome: I have to browse SoundCloud, download a track that seems interesting, upload it to the music server, let MPD index it, and then play it.

To make my life easier, I wanted to leverage Linux’s FUSE interface to expose the audio on SoundCloud as a bunch of files in a folder which MPD could then index and play from. I could have taken a couple of other approaches such as swapping MPD with Mopidy, an MPD-compatible music player with SoundCloud support, or a scraper that periodically downloads the latest audio from my feed. And while these alternatives were probably easier to implement, I went for the FUSE driver because I thought it was cool.]]></description><guid isPermaLink="false">4a2d72d8-3aa4-4c82-a95f-847f3e0c650d</guid><pubDate>Wed,  2 Jan 2019 00:00:00 +0000</pubDate><dc:creator>polyfloyd</dc:creator></item><item><title>Debugging Rust with VSCode on FreeBSD</title><link>https://venshare.com/debugging-rust-with-vscode-on-freebsd/</link><description><![CDATA[The following is a set of notes for installing VSCode on FreeBSD and getting a debugger up and running in a step by step guide. I thought I would share them in a full post as having a full IDE with syntax and error highlighting along with detailed in-context explanations has been really useful as I get to grips with Rust.]]></description><guid isPermaLink="false">c4069a09-be22-45a1-a39b-3067584379a8</guid><pubDate>Fri, 28 Dec 2018 23:56:37 +0000</pubDate><dc:creator>Anton Whalley</dc:creator></item><item><title>Tools in the 2018 edition</title><link>https://blog.rust-lang.org/2018/12/17/Rust-2018-dev-tools.html</link><description><![CDATA[In this blog post I'll cover Clippy and Rustfmt – two tools that have been around for a few years and are now stable and ready for general use. I'll also cover IDE support – a key workflow for many users which is now much better supported. I'll start by talking about Rustfix, a new tool which was central to our edition migration plans.]]></description><guid isPermaLink="false">629810d5-0f02-4ef1-9826-32cd4bc2f048</guid><pubDate>Mon, 17 Dec 2018 00:00:00 +0000</pubDate><dc:creator>The Dev-tools team</dc:creator></item><item><title>Rust Analyzer in 2018 and 2019</title><link>https://ferrous-systems.com/blog/rust-analyzer-2019/</link><description><![CDATA[Hi! I am Aleksey Kladov (aka @matklad). In the past, I've worked at Jet Brains where I've helped to create the IntelliJ Rust plug-in, and now I am a part of the Ferrous Systems team.

I've spent a significant amount of the last year experimenting with various approaches to make the Rust IDE story better. The culmination of my experiments is the rust-analyzer project – an experimental Rust compiler frontend, targeting the IDE/Language Server Protocol use case.]]></description><guid isPermaLink="false">bf6eb06b-346b-4f0c-a294-ee1dde663418</guid><pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate><dc:creator>Aleksey Kladov</dc:creator></item><item><title>cargo-inspect: A Little Tool for Exploring Rust Internals</title><link>https://matthias-endler.de/2018/cargo-inspect/</link><description><![CDATA[Rust allows for a lot of syntactic sugar, that makes it a pleasure to write. It is sometimes hard, however, to look behind the curtain and see what the compiler is really doing with our code. I wondered if there was a tool, which revealed what Rust was doing behind the curtains.]]></description><guid isPermaLink="false">20ba5c8d-b4f2-4ae5-af75-7631ccc05f12</guid><pubDate>Sat,  1 Dec 2018 00:00:00 +0000</pubDate><dc:creator>Matthias Endler</dc:creator></item><item><title>Build Your Own Shell using Rust</title><link>https://www.joshmcguigan.com/blog/build-your-own-shell-rust/</link><description><![CDATA[This is a tutorial on building your own shell using Rust, in the spirit of the build-your-own-x list. Creating a shell is a great way to understand how the shell, terminal emulator, and OS work together.]]></description><guid isPermaLink="false">5527d11f-6f5e-47f4-b208-c90499764f04</guid><pubDate>Sat, 17 Nov 2018 00:00:00 +0000</pubDate><dc:creator>Josh Mcguigan</dc:creator></item><item><title>Qt applications with Cargo</title><link>https://www.vandenoever.info/blog/2018/10/30/building_qt_apps_with_cargo.html</link><description><![CDATA[This blog shows how Qt applications can be built with Cargo. The goal is to make compiling them as simple as installing Qt and running cargo build.]]></description><guid isPermaLink="false">d8946b80-5782-44b2-80d9-9ac2e18eb5d0</guid><pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Jos van den Oever</dc:creator></item><item><title>korq: Kubernetes Dynamic Log Tailing Utility</title><link>https://vertexclique.github.io/korq/</link><description><![CDATA[K∅RQ is used for tailing pod logs concurrently and following groups at once. It was basically a need to follow logs during deployment and see how instances behave during and after deployment. This is the main motive behind K∅RQ.]]></description><guid isPermaLink="false">fac60173-70f5-4682-a698-716cf05306ce</guid><pubDate>Tue, 23 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Mahmut Bulut</dc:creator></item><item><title>ruplacer: find and replace text in source files</title><link>https://dmerej.info/blog/post/ruplacer/</link><description><![CDATA[Today I’d like to talk about a command-line tool I’ve been working on. It’s called ruplacer and as the name suggest, it’s rually cool and written in Rust. Basically, it finds and replaces text in source files.]]></description><guid isPermaLink="false">2657be5e-f98f-48a7-9e0a-c4ad2c183cba</guid><pubDate>Sun, 14 Oct 2018 12:34:43 +0000</pubDate><dc:creator>Dimitri Merejkowsky</dc:creator></item><item><title>Rust Programming with Dynamsoft Barcode Reader</title><link>https://medium.com/@yushulx/rust-programming-with-dynamsoft-barcode-reader-3d1e83004bba</link><description><![CDATA[A few days ago, I accepted a new challenge of creating a simple command line barcode reader using Rust and Dynamsoft Barcode Reader SDK. Rust is a system programming language similar to C++. The learning process did not go through smoothly as I expected. It is not as easy as learning other high-level programming languages such as Java and Python. In this article, I share my experience of learning and using Rust.]]></description><guid isPermaLink="false">cb2bfe24-75a2-43d6-bebc-b8f8ac610c95</guid><pubDate>Thu, 11 Oct 2018 00:26:20 +0000</pubDate><dc:creator>Xiao Ling</dc:creator></item><item><title>imag: Call for Participation (1)</title><link>https://imag-pim.org/blog/2018/10/10/call-for-participation-1/</link><description><![CDATA[This is the first call for participation for the imag project. I have no experience writing such calls for participation, so please bear with me!

Right now, the imag ecosystem has some tools available which are already usable and in rather good shape. There is a contact manager, a diary and a notes tool, a habit tracker and a time tracker are there as well, though those are not extensively tested by now.]]></description><guid isPermaLink="false">2b068be3-88b7-4d60-ad38-cfd40019cf5f</guid><pubDate>Wed, 10 Oct 2018 08:42:06 +0000</pubDate><dc:creator>imag</dc:creator></item><item><title>Remacs continues to improve</title><link>http://db48x.net/rust-remacs-2018/</link><description><![CDATA[As you doubtless know, Emacs has an embedded Lisp environment that provides a large number of intersting Lisp functions that the user can call. Many of these are implemented in C for speed, and we've been rewriting them in Rust. So far we've ported 394 individual Lisp functions from C to Rust, of which 207 were ported in this last year. This is about a third of the total, as you can see by this graph. We've actually completely ported several whole C files now.]]></description><guid isPermaLink="false">49cace2a-ebaf-4aec-b41b-8fb7aa67acc8</guid><pubDate>Tue,  9 Oct 2018 12:35:00 +0000</pubDate><dc:creator>db48x</dc:creator></item><item><title>Running Little Rust Snippets with Runner</title><link>https://stevedonovan.github.io/rustifications/2018/09/23/runner.html</link><description><![CDATA[runner is mostly a clever wrapper around normal Cargo operations. runner acts like an interpreter. There is no forced directory structure, just source. But it’s just using rustc under the hood in the most direct way possible.]]></description><guid isPermaLink="false">0a206ee6-7e54-4570-9f0c-8040fb9cd530</guid><pubDate>Sun, 23 Sep 2018 00:00:00 +0200</pubDate><dc:creator>Steve Donovan</dc:creator></item><item><title>Hegemon: A modular system monitor written in Rust</title><link>https://github.com/p-e-w/hegemon</link><description><![CDATA[Hegemon is a work-in-progress modular system monitor written in safe Rust. Currently, it has the following features: Monitor CPU and memory usage, temperatures, and fan speeds; expand any data stream to reveal a more detailed graph and additional information, adjustable update interval.]]></description><guid isPermaLink="false">5a387bd6-85b7-439d-97d4-fdb76fec80c5</guid><pubDate>Sat, 22 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Philipp Emanuel Weidmann</dc:creator></item><item><title>Alacritty now supports scrollback</title><link>https://jwilm.io/blog/alacritty-lands-scrollback/</link><description><![CDATA[Alacritty, the OpenGL terminal emulator written in Rust, now supports scrollback! Performance has improved, and we've got benchmarks to share.]]></description><guid isPermaLink="false">4f00ccb1-9966-4c6d-83e9-0e8032ff68a4</guid><pubDate>Sun, 16 Sep 2018 17:00:00 -0700</pubDate><dc:creator>Joe Wilm</dc:creator></item><item><title>A Sudoku Solver &amp; Generator 🔢</title><link>https://blog.ryanlevick.com/posts/sudoku-solver-generator/</link><description><![CDATA[For a small side project I’m working on, I’m using a Sudoku puzzle solver and puzzle generator that I’ve written in Rust. The experience was fun, so I thought I’d write up a little bit about the algorithm I’ve used and some interesting stats about how it performs.]]></description><guid isPermaLink="false">e3bb7297-9e70-4070-a2aa-8bb8f9a5eaf2</guid><pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Ryan Levick</dc:creator></item><item><title>Browsing your mail with Rust and Qt</title><link>https://www.vandenoever.info/blog/2018/09/16/browsing_your_mail_with_rust_and_qt.html</link><description><![CDATA[Let’s write a mail viewer with Rust and Qt. This is another blog about Rust Qt Binding Generator, the project that lets you add a Qt GUI to your Rust code, or if you will, add Rust to your Qt program.]]></description><guid isPermaLink="false">790afaff-5784-4b34-82eb-38a05a05a0ec</guid><pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Jos van den Oever</dc:creator></item><item><title>TOTP generator with account handling for multiple tokens</title><link>https://skarlso.github.io/2018/09/13/gotp/</link><description><![CDATA[ a totp generator I wrote a while ago in C++ but now it’s in rust. It can generate a token and save it into an account file that is AES encrypted. The password is never saved, so it’s secure enough to use it. One of it’s properties it will have over the c++ implementation is it’s safe, it uses a proper IV and once I’m done, it will also support encryption via PGP.]]></description><guid isPermaLink="false">c75159c1-4e8c-4b09-9371-430cc5971b94</guid><pubDate>Thu, 13 Sep 2018 08:01:00 +0100</pubDate><dc:creator>Gergely Brautigam</dc:creator></item><item><title>Rust at Datalust</title><link>https://blog.getseq.net/rust-at-datalust/</link><description><![CDATA[At Datalust we build a log server called Seq. It's really a database, written in C#, with its own SQL-based query language, that's specifically designed for storing and querying structured log data. In the past, Seq has managed log event storage through ESENT, which is a storage technology baked into Windows. For our cross-platform Seq 5 release we’ve built a storage engine called Flare in the Rust programming language to replace our usage of ESENT.]]></description><guid isPermaLink="false">a92cab79-16fc-46b9-9bdb-0eb21518db8c</guid><pubDate>Mon,  3 Sep 2018 22:18:30 +0000</pubDate><dc:creator>Ashley Mannix</dc:creator></item><item><title>Password Generation in Ruby and Rust</title><link>https://hur.st/blog/2018/08-25-password-generation-in-ruby-and-rust/</link><description><![CDATA[Writing the same password generator in two different languages to learn more Rust.]]></description><guid isPermaLink="false">8b60e040-4635-4a84-b8a6-3e0f2933f066</guid><pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Thomas Hurst</dc:creator></item><item><title>IntelliJ Rust features. Entry one: Macros</title><link>https://blog.jetbrains.com/clion/2018/08/intellij-rust-features-entry-one-macros/</link><description><![CDATA[In this series of short blog posts, we are going to take a closer look at the key Rust related features present in JetBrains IDEs through our corresponding plugin.]]></description><guid isPermaLink="false">e2e12b4d-817f-4c1b-997f-285d9eec6a74</guid><pubDate>Fri, 24 Aug 2018 16:11:11 +0000</pubDate><dc:creator>Kirill Malich</dc:creator></item><item><title>C2rust - A bridge to C</title><link>https://galois.com/blog/2018/08/c2rust/</link><description><![CDATA[The c2rust project exists to help bridge the fact that there is a lot of valuable software written in C and that there have been great strides in making safer and more-reliable programming languages since C was designed. Rust offers many modern improvements for C while still preserving the low-level control that makes it attractive. Beyond that, Rust provides new abstraction capabilities like parametricity, type-traits, methods, a module system, thread-safety, and more.]]></description><guid isPermaLink="false">4f79a6a7-0d44-44ce-b82c-c4376e073660</guid><pubDate>Tue, 14 Aug 2018 18:16:29 +0000</pubDate><dc:creator>Eric Mertens</dc:creator></item><item><title>Incremental Parsing in Amp</title><link>https://medium.com/@jordan_98525/incremental-parsing-in-amp-ba5e8c3e85dc</link><description><![CDATA[With the latest release of Amp (text editor), syntax highlighting has been overhauled. This post dives into the performance-related redesign that has landed with v0.5.]]></description><guid isPermaLink="false">df22bc28-0b6f-4d1a-960a-9e29ca258b53</guid><pubDate>Tue, 14 Aug 2018 16:13:52 +0000</pubDate><dc:creator>Jordan MacDonald</dc:creator></item><item><title>Journey into Gentoo eclass</title><link>https://gibix.github.io/gsoc/2018/08/11/journey-into-gentoo-eclass.html</link><description><![CDATA[I spent some days writing a portage eclass for Gentoo. I want to share my experience.]]></description><guid isPermaLink="false">fdc8eef0-1b02-41f7-8340-faf4660db183</guid><pubDate>Sat, 11 Aug 2018 00:00:00 +0000</pubDate><dc:creator>gibix</dc:creator></item><item><title>Kickstart - a fast and simple project template bootstrapper</title><link>https://blog.artemix.org/article/show/kickstart</link><description><![CDATA[Ever had some code base that you regularly use to start a new project? Until now, you've probably lost some time refactoring everything to fill out the right project name, title etc. A few tools already exist but either you're lost in feature bloating hell or you're fighting to configure everything in most cases. The following tool is an early-developement, rust-based, template tool made to be more versatile that its closest python counter-part, cookiecutter.]]></description><guid isPermaLink="false">1d84906a-4085-4d87-8f43-786f1d531f44</guid><pubDate>Wed,  8 Aug 2018 23:02:19 +0000</pubDate><dc:creator>Artemis</dc:creator></item><item><title>Easily Analyzing Your S3 Buckets</title><link>http://whitfin.io/analyzing-your-buckets-with-s3-meta/</link><description><![CDATA[mazon S3 is a storage solution used by pretty much everyone these days. Due to this there are naturally a bunch of tools for doing almost everything you can think of with S3. This post is about a tool I wrote to retrieve metadata about S3 buckets. If you don't care for the post, feel free to skip straight to the repo.]]></description><guid isPermaLink="false">1bc929f4-2800-466c-bd70-fb73f7b70ef8</guid><pubDate>Sat,  4 Aug 2018 17:44:06 +0000</pubDate><dc:creator>Isaac Whitfield</dc:creator></item><item><title>Gutenberg 0.4.0: custom taxonomies, image processing and more</title><link>https://www.vincentprouillet.com/blog/releasing-gutenberg-0-4-0/</link><description><![CDATA[Gutenberg 0.4.0 is out with custom taxonomies, image processing, improved shortcodes and more.]]></description><guid isPermaLink="false">c1718910-2677-4da4-a45f-a8bd055fe075</guid><pubDate>Sat,  4 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Vincent Prouillet</dc:creator></item><item><title>CLion IDE Rust plugin update: language support improvements, new quick-fixes, improved debugger and more</title><link>https://blog.jetbrains.com/clion/2018/08/intellij-rust-update-2018_2/</link><description><![CDATA[CLion 2018.2 was released just recently. Along with the release, the Rust plugin has had an update! In this blog post, we’d like to highlight some of the main improvements in the plugin.]]></description><guid isPermaLink="false">18d063ca-b781-400f-9e5f-1534b5b90630</guid><pubDate>Thu,  2 Aug 2018 11:01:28 +0000</pubDate><dc:creator>Anastasia Kazakova</dc:creator></item><item><title>Why I Ripped The Same CD 300 Times</title><link>https://john-millikin.com/%F0%9F%A4%94/why-i-ripped-the-same-cd-300-times</link><description><![CDATA[The piano arrangement album 帰るべき城 by Altneuland was published in 2005. I discovered it in 2008 (probably on YouTube), downloaded the best copy I could find, and filed it away in the TODO list. Recent advances in international parcel forwarding technology let me buy a used copy last year, but when it arrived none of my CD drives could read track #3. This sort of thing is common when buying used CDs, especially if they need to transit a USPS international shipping center. I shelved it and kept on the lookout for another copy, which I located last month. It arrived on Friday, I immediately tried to rip it, and hit the exact same error. This didn’t seem to be an issue of wear or damage…]]></description><guid isPermaLink="false">bf6d4501-afb3-40dc-aa8a-bef247e2e77b</guid><pubDate>Thu,  2 Aug 2018 00:00:00 +0000</pubDate><dc:creator>John Millikin</dc:creator></item><item><title>Sequoia, a new OpenPGP implementation</title><link>https://www.reddit.com/r/rust/comments/93mng5/ann_sequoia_a_new_openpgp_implementation/</link><description><![CDATA[This past fall, three former GnuPG developers began working on a new OpenPGP implementation in Rust called Sequoia. As it’s starting to shape up and become useful, I feel now is a good time to announce the project to the larger Rust community, and hopefully get some feedback before our first release.]]></description><guid isPermaLink="false">81096070-a563-47a0-8f09-2e5fb3c1b984</guid><pubDate>Wed,  1 Aug 2018 16:50:12 +1000</pubDate><dc:creator>/u/nwalfield</dc:creator></item><item><title>Announcing Vagga 0.8.1 – PaulColomiets</title><link>https://medium.com/@paulcolomiets/announcing-vagga-0-8-1-5e1fd44ee6fa</link><description><![CDATA[We are excited to announce the next version of vagga, the containerization tool that makes setting up development environments easy and fun. This release brings local overrides for vagga commands, support of ubuntu bionic, better CI support, space reuse between multiple projects, and more.]]></description><guid isPermaLink="false">14507477-073a-4055-a2de-b0e4c4fd2ad5</guid><pubDate>Tue, 31 Jul 2018 19:39:25 +0000</pubDate><dc:creator>PaulColomiets</dc:creator></item><item><title>Recommending books (with Rust)</title><link>https://maciejkula.github.io/2018/07/27/recommending-books-with-rust/</link><description><![CDATA[In this post, we’re going to build a sequence-based recommender system in Rust: a system that accepts a person’s reading history as input, and outputs recommendations on what to read next.]]></description><guid isPermaLink="false">31fd7758-63f6-4e38-8331-bd27fd6324ba</guid><pubDate>Fri, 27 Jul 2018 09:17:00 -0700</pubDate><dc:creator>Maciej Kula</dc:creator></item><item><title>Introducing the Routinator 3000</title><link>https://medium.com/nlnetlabs/introducing-the-routinator-3000-2a234d455b2b</link><description><![CDATA[NLnet Labs is embarking on a new adventure. In the coming months we will be developing an RPKI toolset aimed at making BGP routing more secure. It will consist of three parts: a Certificate Authority package, a Publication Server and Relying Party software. We’ve chosen to do the development in a modern systems programming language, Rust.]]></description><guid isPermaLink="false">424adcbb-d3de-467b-8ca2-af877e849e85</guid><pubDate>Thu, 26 Jul 2018 14:43:27 +0000</pubDate><dc:creator>Alex Band</dc:creator></item><item><title>Pax: A fast dev time JavaScript bundler</title><link>https://pax.js.org/</link><description><![CDATA[Don’t waste time waiting for your bundler to do its thing. Use Pax while you’re developing, and iterate to your heart’s content. Use your super-cool, magical, slow-as-molasses bundler for releases, when you don’t care how long it takes to run.]]></description><guid isPermaLink="false">7161b1be-54de-4776-857e-3ef78df24125</guid><pubDate>Wed, 25 Jul 2018 12:59:16 +0000</pubDate><dc:creator>Nathan</dc:creator></item><item><title>glitchcat — Creating CLI apps in Rust is super easy</title><link>https://blog.kuviman.com/2018/07/20/glitchcat.html</link><description><![CDATA[glitchcat is a cat-like program with glitch animation.]]></description><guid isPermaLink="false">1e54b1bb-953c-4149-b09c-9d1d3f7046cf</guid><pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate><dc:creator>kuviman</dc:creator></item><item><title>cargo-generate: create a new Rust project from a template </title><link>https://github.com/ashleygwilliams/cargo-generate</link><description><![CDATA[cargo-generate is a developer tool to help you get up and running quickly with a new Rust project by leveraging a pre-existing git repository as a template.]]></description><guid isPermaLink="false">9ceafb2d-9937-48c9-9deb-ff9d1ebd19d3</guid><pubDate>Wed, 18 Jul 2018 06:59:00 +0000</pubDate><dc:creator>Ashley Williams</dc:creator></item><item><title>How we built a Visual Studio Code extension for IoT prototyping</title><link>https://cultivatehq.com/posts/how-we-built-a-visual-studio-code-extension-for-iot-prototyping/</link><description><![CDATA[We recently had the opportunity to make a Visual Studio Code extension that needed to communicate with an embedded device. This post explains the architecture we chose to achieve that and the decisions that led to it.]]></description><guid isPermaLink="false">a9a551b0-07a6-48a2-944f-b956438fecc0</guid><pubDate>Fri, 13 Jul 2018 22:39:00 +0000</pubDate><dc:creator>Dan Munckton</dc:creator></item><item><title>Bioyino — a distributed, scalable metric aggregator</title><link>https://medium.com/avitotech/bioyino-a-distributed-scalable-statsd-3445acb177eb</link><description><![CDATA[So, you collect metrics. So do we. Yep, we also collect them. We can assure you that they are not useless at all, business guys do need…]]></description><guid isPermaLink="false">d32e6dac-51d6-4ede-9a7f-10f0bea2ca8a</guid><pubDate>Thu,  5 Jul 2018 10:07:52 +0000</pubDate><dc:creator>Sergey N</dc:creator></item><item><title>Moving from the shell to Rust with commandspec</title><link>http://timryan.org/2018/07/02/moving-from-the-shell-to-rust-with-commandspec.html</link><description><![CDATA[Almost every project I’ve worked on has grown a shell script named “build.sh”, and not much later a “test.sh” and “run.sh”. At this point, you have to make a decision as a developer whether your goal is to accidentally reinvent make or if your codebase’s needs are better met by an executable to manage your workflow.]]></description><guid isPermaLink="false">504568b7-fb85-4ed5-b94d-1c96333d2c64</guid><pubDate>Mon,  2 Jul 2018 15:50:00 +0000</pubDate><dc:creator>Tim Ryan</dc:creator></item><item><title>fastcat - A Faster &apos;cat&apos; Implementation Using Splice</title><link>https://matthias-endler.de/2018/fastcat/</link><description><![CDATA[Lots of people asked me to write another piece about the internals of well-known Unix commands. Well, actually, nobody asked me, but it makes for a good intro. I'm sure you’ve read the previous parts about yes and ls — they are awesome.

Anyway, today we talk about cat, which is used to concatenate files - or, more commonly, abused to print a file's contents to the screen.]]></description><guid isPermaLink="false">4c6bb401-ff09-4bce-a6d2-d598777a0ce2</guid><pubDate>Sun,  1 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Matthias Endler</dc:creator></item><item><title>devtop: Command line parser</title><link>https://medium.com/journey-to-rust/devtop-command-line-parser-f08b72b02bea</link><description><![CDATA[As operator I found that existing tooling fails with large number of unusual devices. If you have server with >100 virtual machines, and each virtual machines have one or more additional disk and a few network interfaces, it’s hard to find which VM cause stress on the server. Normal atop simply couldn’t cope with hundreds of tap/tun interfaces, multitude of block devices, etc. When I found that I have no proper tooling (as an operator) I wrote a shabby tools to do my job: they are calling blktop and ifstop. Both were written dirty and fast, and they does not follow the usual Python conventions (but they work as standalone binaries). They do their job, and normally I would say that’s enough. But those utilities are simple and have no big complications under the hood, so they are perfect candidates for rewriting in Rust for the sake of writing in Rust (I’m learning it!). I decide to combine them into a single utility: devtop, which I want to develop properly, according to Rust conventions, and through all aspects of packaging.]]></description><guid isPermaLink="false">f6f626f4-47ff-427c-8d44-b63c457bed46</guid><pubDate>Sun, 24 Jun 2018 14:21:28 +0000</pubDate><dc:creator>George Shuklin</dc:creator></item><item><title>Oxy - A Security Focused Remote Access Tool</title><link>https://oxy-secure.app/</link><description><![CDATA[It's like SSH, but more secure, and with cool modern features. It is not an implementation of SSH, it is a new, modern protocol.]]></description><guid isPermaLink="false">81e1a990-ce97-4ab6-a943-720330b5db6e</guid><pubDate>Sun, 24 Jun 2018 23:58:43 +1000</pubDate><dc:creator>Jenna Magius</dc:creator></item><item><title>Finda Websocket Architecture</title><link>https://keminglabs.com/blog/finda-websocket-architecture/</link><description><![CDATA[Finda lets you search and instantly switch between tabs in browsers like Firefox and Chrome and editors like Sublime Text and Visual Studio Code. It does this by communicating with these programs over local websocket connections. This article describes the design tradeoffs of this system, focusing on Rust implementation details that may be helpful to others building similar systems.]]></description><guid isPermaLink="false">b93a3070-a495-46de-a9e1-a1c650cafec3</guid><pubDate>Wed, 20 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Kevin J. Lynagh</dc:creator></item><item><title>Extreme benchmark feedback using Gitlab CI</title><link>https://www.rubdos.be/linux/gitlab/automation/benchmarks/rust/2018/06/19/extreme-benchmark-feedback.html</link><description><![CDATA[I am quite notorious for exploiting Gitlab’s CI. Ever since I started playing with it at the start of 2016, I tended to make things worse.]]></description><guid isPermaLink="false">c1d20548-b510-4452-9d30-8088b65f626a</guid><pubDate>Tue, 19 Jun 2018 13:18:00 +0000</pubDate><dc:creator>Ruben De Smet</dc:creator></item><item><title>Using Rust Code in a C/C++ Project with CMake</title><link>https://blog.devolutions.net/2018/06/insider-series-using-rust-code-in-a-cc-project-with-cmake</link><description><![CDATA[I am currently working on Wayk Now written in C for the most part. We recently started writing new code for it in Rust which I’m super excited about.

 As we needed a way to integrate this code in our CMake build1, we wrote a set of modules for CMake ]]></description><guid isPermaLink="false">fbc12ece-4e2b-4ee2-b3fb-e55fb54b508e</guid><pubDate>Tue, 19 Jun 2018 12:23:36 +0000</pubDate><dc:creator>Sebastien Duquette</dc:creator></item><item><title>C2Rust Demonstration</title><link>https://c2rust.com/</link><description><![CDATA[The C2Rust project is being developed by Galois and Immunant. This tool is able to translate most C modules into semantically equivalent Rust code. These modules are intended to be compiled in isolation in order to produce compatible object files. We are developing several tools that help transform the initial Rust sources into idiomatic Rust. ]]></description><guid isPermaLink="false">f12b593d-9a94-4571-8fe8-08ef5059d68f</guid><pubDate>Sun, 17 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Galois and Immunant</dc:creator></item><item><title>My Emacs Rust IDE</title><link>http://www.admintome.com/blog/my-emacs-rust-ide/</link><description><![CDATA[In this post, I will walk you through configuring an EMACS Rust IDE to get syntax highlighting and code completion for the Rust programming language.]]></description><guid isPermaLink="false">48c70c0e-5ce7-415b-8264-6e7a6dd02a8f</guid><pubDate>Sat, 16 Jun 2018 01:26:03 +0000</pubDate><dc:creator>Bill Ward</dc:creator></item><item><title>Nannou open source creative coding framework</title><link>http://nannou.cc/news/hello-nannou/</link><description><![CDATA[Nannou is an open source creative coding framework built in Rust for artists, hackers, designers and devs to express themselves with simple, fast, reliable, portable code.]]></description><guid isPermaLink="false">09393d03-bb17-4f1e-8d5a-5dc8338ff513</guid><pubDate>Thu, 14 Jun 2018 07:24:05 +0000</pubDate><dc:creator>Mitch, Josh, Keenan &amp; Tom</dc:creator></item><item><title>What do you think are the most interesting/exciting projects using Rust?</title><link>https://www.ncameron.org/blog/interesting_projects/</link><description><![CDATA[Last week I tweeted "What do you think are the most interesting/exciting projects using Rust? (No self-promotion :-) )". The response was awesome! Jonathan Turner suggested I write up the responses as a blog post, and here we are.]]></description><guid isPermaLink="false">f6f3b55c-c39c-4366-9de1-ebf3b230ee6c</guid><pubDate>Wed, 13 Jun 2018 16:26:29 +0000</pubDate><dc:creator>Nick Cameron</dc:creator></item><item><title>To do a Rust GUI</title><link>https://www.vandenoever.info/blog/2018/06/09/to-do-a-rust-gui.html</link><description><![CDATA[Rust Qt Binding Generator lets you combine Rust code with a Qt1 graphical application. A previous blog shows how to make a simple clock. It’s a good idea to read that post before reading this more advanced post, because in this post we are getting serious.

This blog post shows how to write a to-do application. The data model is a list of to-do items. The source code for this example is available in the folder examples/todos in the Rust Qt Binding Generator repository.]]></description><guid isPermaLink="false">9448ee63-32da-42f1-bd2e-1ef737d9b971</guid><pubDate>Sat,  9 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Jos van den Oever</dc:creator></item><item><title>Fishing in an Abyss: Building a Password Cracker in Rust</title><link>https://sts10.github.io//2018/05/31/1password-cracking-challenge.html</link><description><![CDATA[Ahead of this year’s World Password Day, 1Password – maker of password management software – announced a password cracking challenge. The company ostensibly wanted to find out how hard it would be to crack a three-word passphrase master password on one of their vaults, assuming that the attacker had the derived hash of the passphrase.]]></description><guid isPermaLink="false">e0e1ff6c-452a-442e-a3d5-93203569fa58</guid><pubDate>Thu, 31 May 2018 23:28:50 +0000</pubDate><dc:creator>Sam Schlinkert</dc:creator></item><item><title>madparts-rs 1.0 release</title><link>https://damad.be/joost/blog/madparts-rs-1-0-release.html</link><description><![CDATA[Back in Februari 2013 then coworker Romain S. showed me the new trend of programming editors that do continuous compilation while you type, showing you immediate feedback on your code. In parallel I also worked on 3D modeling for my 3D printer using the OpenSCAD program. OpenSCAD works by writing code in its custom language and then have it rendered. I had this idea of combining these two approaches to make an electronics footprint generator. And so the development of the original madparts program started. In August 2016 I had been playing with the then pretty new rust programming language and decided a rewrite in it and simplifying the program even further would be fun to do.]]></description><guid isPermaLink="false">e81240c1-c783-4113-9df8-27755677e929</guid><pubDate>Sun, 20 May 2018 00:00:00 +0000</pubDate><dc:creator>Joost Yervante Damad</dc:creator></item><item><title>An image viewer using Smithay&apos;s Client Toolkit</title><link>https://smithay.github.io/sctk-image-viewer.html</link><description><![CDATA[Small tutorial of using Smithay's Client Toolkit by example, building a small image viewer as a Wayland client.]]></description><guid isPermaLink="false">d2cf9531-53d8-45dd-a9e4-0feaa3699466</guid><pubDate>Thu, 10 May 2018 14:00:00 +0200</pubDate><dc:creator>Victor Berger</dc:creator></item><item><title>Entity-Component-System architecture for UI in Rust</title><link>https://raphlinus.github.io/personal/2018/05/08/ecs-ui.html</link><description><![CDATA[For a fun project, I’ve been tinkering with xi-win, an experimental Windows front-end for xi-editor, written in Rust. I’m basically optimizing for performance, so making a number of somewhat unusual decisions. Among other things, I’m writing the UI myself, rather than using an existing toolkit or framework.]]></description><guid isPermaLink="false">cfa15026-8758-4249-b23c-fa41e23161c4</guid><pubDate>Tue,  8 May 2018 18:29:03 +0000</pubDate><dc:creator>Raph Levien</dc:creator></item><item><title>sudo_pair - Plugin for sudo that requires another human to approve and monitor privileged sudo sessions</title><link>https://github.com/square/sudo_pair</link><description><![CDATA[sudo is used by engineers daily to run commands as privileged users. But on some sensitive systems, you really want to ensure that no individual can act entirely autonomously. At Square, this includes applications that manage our internal access-control systems, store accounting ledgers, or even move around real money. This plugin allows us to ensure that no user can act entirely on their own authority within these systems.]]></description><guid isPermaLink="false">66f3233f-afdd-49af-9cf4-cb71bcd56b33</guid><pubDate>Mon,  7 May 2018 18:24:54 +0000</pubDate><dc:creator>Square</dc:creator></item><item><title>Filtering Duplicate Log Entries via Rust and Runiq</title><link>https://whitfin.io/filtering-unique-logs-using-rust/</link><description><![CDATA[Whilst sort -u is super easy to use, the requirement of sorting your data cannot be overlooked as it means your entire file needs to be buffered into memory at once. This is not always possible, or even if possible it's not always desired. On the other hand uniq is great, but in order to sort your data in advance you still have the same issue. It was due to this that I wrote runiq, which is essentially an optimized and more flexible implementation of both of the aforemention tools for the purposes of duplicate filtering. It performs much faster, with much less memory, and does not require sorted input (although it can optimize this case).]]></description><guid isPermaLink="false">ef638662-6cfb-4335-9e01-baa7af9a5d95</guid><pubDate>Mon,  7 May 2018 03:17:28 +0000</pubDate><dc:creator>Isaac Whitfield</dc:creator></item><item><title>My Compound Passphrase List Safety Checker</title><link>https://sts10.github.io/2018/05/05/compound-passphrase-list-safety-checker.html</link><description><![CDATA[I’ve been thinking about information theory, entropy, and passphrases for a couple of months now. I’ve been particularly interested in using random passphrases as passwords. An example of one of these passphrases would be “stamina turret backlands ruby”. The words have to be as purely random as possible – using your four dogs’ names is not nearly as strong as a password, as an attacker would likely guess that relatively early.]]></description><guid isPermaLink="false">3e8fce57-40d7-4eec-9425-a2b32ef5895d</guid><pubDate>Sat,  5 May 2018 02:13:50 +0000</pubDate><dc:creator>Sam Schlinkert</dc:creator></item><item><title>Introducing seiri — a music 🎶 manager for lots of music</title><link>https://medium.com/@chyyran/introducing-seiri-a-music-manager-for-lots-of-music-990b464b3387</link><description><![CDATA[TL;DR seiri is a lightweight music manager written (mostly) in Rust that helps keep huge music libraries organized. Try it today at chyyran.moe/seiri.]]></description><guid isPermaLink="false">cf489f8e-70b9-4669-8424-03e79fab2ad8</guid><pubDate>Thu,  3 May 2018 23:35:26 +0000</pubDate><dc:creator>Ronny Chan</dc:creator></item><item><title>kanban-app - Kanban board built with Rust and Elm without Electron</title><link>https://github.com/huytd/kanban-app</link><description><![CDATA[This is a web-based Kanban board application, built with Elm and Rust. The only different from this application and hundred thousands of web-based application out there is: We don't need Electron!. Instead, it use native WebView (WebKit for Linux/macOS, and MSHTML on Windows),]]></description><guid isPermaLink="false">103f9c4f-f4f9-4e15-98b2-0d2b1db6b792</guid><pubDate>Thu,  3 May 2018 07:30:00 +1000</pubDate><dc:creator>Huy Tr.</dc:creator></item><item><title>Servo engines written in Rust deliver memory safety and multithreading</title><link>https://research.mozilla.org/servo-engines/</link><description><![CDATA[In 2012, Mozilla started the Servo project, a community effort to create new open source browser components that can take advantage of multicore hardware to improve speed, stability and responsiveness. Servo is comparable to WebKit, an open source browser engine that is the foundation of Apple’s Safari browser. (Other browser engines include Blink, EdgeHTML, and Gecko.) The difference is that Servo is written in the Rust programming language, bringing lightning-fast performance and memory safety to browser internals. Rust code can drastically cut down the number of critical bugs that affect browser engines. Servo uses a modular architecture and currently runs on Linux, macOS, Windows, and Android operating systems.]]></description><guid isPermaLink="false">7812ff10-6f3d-4990-8832-9b5eb63780d8</guid><pubDate>Tue,  1 May 2018 16:04:53 +0000</pubDate><dc:creator>Mozilla Research</dc:creator></item><item><title>bat - print code to the terminal with syntax highlighting and git integration</title><link>https://github.com/sharkdp/bat</link><description><![CDATA[bat supports syntax highlighting for a large number of programming and markup languages. bat also communicates with git to show modifications with respect to the index (see left side bar).]]></description><guid isPermaLink="false">c38eff1e-2560-4373-a3d6-9e3ea04853ad</guid><pubDate>Tue,  1 May 2018 00:00:00 +0000</pubDate><dc:creator>David Peter</dc:creator></item><item><title>Hammond: A Podcast Client for the GNOME Desktop</title><link>https://gitlab.gnome.org/World/hammond</link><description><![CDATA[Hammond has been in development since Sep 2017. It makes use of the Rust bindings to GNOME libraries as well as diesel, serde, reqwest, and a number other crates to build a beautiful, native application that feels right at home on the GNOME desktop.]]></description><guid isPermaLink="false">79a75489-f371-461e-8943-273f7b60e620</guid><pubDate>Fri, 27 Apr 2018 21:12:00 +1000</pubDate><dc:creator>Jordan Petridis</dc:creator></item><item><title>JARVIS - Notes on Rust Crates From Writing an RSS Reader</title><link>https://bheisler.github.io/post/jarvis-impressions-of-rust-libraries/</link><description><![CDATA[Way back in the dim mists of history (back in university) I wrote myself a custom RSS reader in Java and called it JARVIS1. You see, I read a lot of webcomics. Like, a lot. Some webcomics provide RSS feeds, but some don’t, and as my collection grew it started to become a hassle to use Firefox’s live bookmarks to manage it all. Ultimately, I wrote up a quick Swing GUI to use as a single interface for keeping up with blogs and tracking which comics had published updates since the last time I’d checked2.]]></description><guid isPermaLink="false">caa2a44c-fd86-4221-92ba-226a3834e0a4</guid><pubDate>Sun, 22 Apr 2018 16:00:00 -0600</pubDate><dc:creator>Brook Heisler</dc:creator></item><item><title>Pijul 0.10</title><link>https://pijul.org/posts/2018-04-21-pijul-0.10/</link><description><![CDATA[I’m pleased to announce the new release of Pijul, version 0.10. Pijul is an easy to use, distributed and fast version control system. This release has been a long time coming, but brings in an important number of new features and stability enhancements.]]></description><guid isPermaLink="false">d0b170a0-b0c5-4d33-b3f2-e0e0dcac1872</guid><pubDate>Sat, 21 Apr 2018 15:13:57 +0200</pubDate><dc:creator>Pijul</dc:creator></item><item><title>fastmod - A fast partial replacement for the codemod tool</title><link>https://github.com/facebookincubator/fastmod</link><description><![CDATA[fastmod is a fast partial replacement for codemod. Like codemod, it is a tool to assist you with large-scale codebase refactors, and it supports most of codemod's options. fastmod's major philosophical difference from codemod is that it is focused on improving the use case "I want to use interactive mode to make sure my regex is correct, and then I want to apply the regex everywhere". For this use case, it offers much better performance than codemod]]></description><guid isPermaLink="false">36e40f73-b836-49cd-a558-d93a238c7386</guid><pubDate>Thu, 19 Apr 2018 20:30:07 +0000</pubDate><dc:creator>Facebook Incubator</dc:creator></item><item><title>Announcing cargo src (beta)</title><link>https://ncameron.org/blog/announcing-cargo-src-beta/</link><description><![CDATA[cargo src is a new tool for exploring your Rust code. It is a cargo plugin which runs locally and lets you navigate your project in a web browser. It has syntax highlighting, jump to definition, type on hover, semantic search, find uses, find impls, and more.]]></description><guid isPermaLink="false">18ca5e39-fd8f-4739-95ef-9daaef6d525d</guid><pubDate>Wed, 18 Apr 2018 20:52:39 +0000</pubDate><dc:creator>Nick Cameron</dc:creator></item><item><title>dust - A more intuitive version of du in Rust</title><link>https://github.com/bootandy/dust</link><description><![CDATA[Dust is meant to give you an instant overview of which directories are using disk space without requiring sort or head. Dust will print a maximum of 1 'Did not have permissions message'. Dust will list the 15 biggest sub directories or files and will smartly recurse down the tree to find the larger ones. There is no need for a '-d' flag or a '-h' flag. The largest sub directory will have its size shown in red]]></description><guid isPermaLink="false">f6e1bdda-278a-4077-8d2f-49417303637f</guid><pubDate>Wed, 18 Apr 2018 07:26:00 +1000</pubDate><dc:creator>andy boot</dc:creator></item><item><title>angle-grinder - Slice and dice log files on the command line</title><link>https://github.com/rcoh/angle-grinder</link><description><![CDATA[Angle-grinder allows you to parse, aggregate, sum, average, percentile, and sort your data. You can see it, live-updating, in your terminal. Angle grinder is designed for when, for whatever reason, you don't have your data in graphite/honeycomb/kibana/sumologic/splunk/etc. but still want to be able to do sophisticated analytics.

Angle grinder can process about a million rows per second, so it's usable for fairly meaty aggregation. The results will live update in your terminal as data is processed. Angle grinder is a bare bones functional programming language coupled with a pretty terminal UI.]]></description><guid isPermaLink="false">ef8bca4e-5627-4bde-a21f-9dae321ac7c0</guid><pubDate>Wed, 18 Apr 2018 07:26:00 +1000</pubDate><dc:creator>Russell Cohen</dc:creator></item><item><title>Faster Bulletproofs with Ristretto &amp; AVX2</title><link>https://blog.chain.com/faster-bulletproofs-with-ristretto-avx2-29450b4490cd</link><description><![CDATA[A few months ago, Bünz, Bootle, Boneh, Poelstra, Wuille, and Maxwell published Bulletproofs, which dramatically improves proof performance both in terms of proof size and verification time. In addition, it allows proving a much wider class of statements than just range proofs.

At Chain, we (Henry de Valence, Cathie Yun and Oleg Andreev) have been working on a pure-Rust Bulletproofs implementation, whose initial version we are publishing today, together with a set of notes.]]></description><guid isPermaLink="false">d412d980-cc59-4a0b-ab9e-19100f3b8927</guid><pubDate>Fri, 13 Apr 2018 19:21:27 +0000</pubDate><dc:creator>Chain</dc:creator></item><item><title>Sequoia-PGP - a modular OpenPGP implementation</title><link>https://sequoia-pgp.org/</link><description><![CDATA[Sequoia is a modular OpenPGP implementation in Rust.]]></description><guid isPermaLink="false">1282d538-71c9-4379-a330-820eccf83d22</guid><pubDate>Wed, 11 Apr 2018 06:52:00 +1000</pubDate><dc:creator>p≡p foundation</dc:creator></item><item><title>QCGPU - Hardware Accelerated Quantum Computer Simulation</title><link>https://qcgpu.github.io/</link><description><![CDATA[A software library for high performance and hardware accelerated simulation of Quantum Computers and Algorithms. Written with Rust and OpenCL.]]></description><guid isPermaLink="false">ed19c2a7-fe9d-465b-b41a-71480e6b978a</guid><pubDate>Wed, 11 Apr 2018 06:47:00 +1000</pubDate><dc:creator>QCGPU</dc:creator></item><item><title>New sysinfo version (huge performance improvements!)</title><link>https://blog.guillaume-gomez.fr/articles/2018-04-09+New+sysinfo+version+%28huge+performance+improvements%21%29</link><description><![CDATA[This new version comes with great performance improvements. We're talking about 3x faster on macos, 2x faster on linux and 3x faster on windows (the benchmarks are at the end of the post).]]></description><guid isPermaLink="false">b93c9682-4e53-4a7f-a39b-79d57b2b4737</guid><pubDate>Mon,  9 Apr 2018 00:00:00 +0000</pubDate><dc:creator>Guillaume Gomez</dc:creator></item><item><title>Announcing personal finance tool &apos;pfr&apos;</title><link>https://kyusscaesar.wordpress.com/2018/03/29/announcing-pfr/</link><description><![CDATA[pfr is a command-line tool for helping me to manage my personal finances. At the end of each month, I like to sit down and “allocate” funds to cover my expenses for the following month. However, not all of my expenses occur monthly. For example, things like rent are paid weekly, and I think of money spent on food in terms of weeks, so I have to multiply those expenses by 4 (ish). I also have to figure out how much money to put in each account, e.g on my EFTPOS (direct-debit) card or for automatic payments. It’s not hard, but then again, that’s why we write programs.]]></description><guid isPermaLink="false">88175c1a-8150-45f5-a1d8-d390457b9fe2</guid><pubDate>Thu, 29 Mar 2018 10:10:34 +0000</pubDate><dc:creator>Antony Southworth</dc:creator></item><item><title>From cobalt.rs to gutenberg</title><link>https://markentier.tech/posts/2018/03/from-cobalt-to-gutenberg/</link><description><![CDATA[I wish I could have the features of both tools, but for now I will use gutenberg over cobalt. A tiny migration and feature comparison story.]]></description><guid isPermaLink="false">fe44a6a6-04fd-42f7-a0ee-c816282bac5e</guid><pubDate>Wed, 28 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Christoph Grabo (@asaaki)</dc:creator></item><item><title>Introducing Click: The Command Line Interactive Controller for Kubernetes</title><link>https://databricks.com/blog/2018/03/27/introducing-click-the-command-line-interactive-controller-for-kubernetes.html</link><description><![CDATA[Click is an open-source tool that lets you quickly and easily run commands against Kubernetes resources, without copy/pasting all the time, and that easily integrates into your existing command line workflows. This blog introduces its its usage and merits.]]></description><guid isPermaLink="false">1054cc8a-cbdd-4073-b7f9-2801aaad6fd6</guid><pubDate>Tue, 27 Mar 2018 16:07:56 +0000</pubDate><dc:creator>Nick Lanham</dc:creator></item><item><title>xray Update for March 26, 2018</title><link>https://github.com/atom/xray/blob/master/docs/updates/2018_03_26.md</link><description><![CDATA[Xray - An experimental next-generation Electron-based text editor. This update covers a revised roadmap, fast file finding, and thoughts on key bindings.]]></description><guid isPermaLink="false">b33165a2-c60c-4431-872d-4528770e42c1</guid><pubDate>Mon, 26 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Xray Team</dc:creator></item><item><title>Analyze disk usage with dutree</title><link>https://ownyourbits.com/2018/03/25/analyze-disk-usage-with-dutree/</link><description><![CDATA[dutree is a command line tool to analyze disk usage.]]></description><guid isPermaLink="false">8aa85a12-b1d3-4e8d-a2b9-39356878a151</guid><pubDate>Sun, 25 Mar 2018 16:10:54 +0000</pubDate><dc:creator>nachoparker</dc:creator></item><item><title>Analyze disk usage with dutree</title><link>https://ownyourbits.com/2018/03/25/analize-disk-usage-with-dutree/</link><description><![CDATA[dutree is a command line tool to analyze disk usage. Features coloured output, according to the LS_COLORS environment variable, display the file system tree, ability to aggregate small files, ability to exclude files or directories, ability to compare different directories fast, and written in Rust. This tool is a mix between tree and durep.]]></description><guid isPermaLink="false">4b63b225-3c2a-4e13-9cf5-a3ff4af811d0</guid><pubDate>Sun, 25 Mar 2018 16:10:54 +0000</pubDate><dc:creator>nachoparker</dc:creator></item><item><title>Compiling Rust + Windows + GTK step-by-step</title><link>https://www.reddit.com/r/rust/comments/86kmhu/compiling_rust_windows_gtk_stepbystep/</link><description><![CDATA[In case you have tried to make a rust program with GUI that would work both on Linux and Windows, you probably may have faced some issues in some point (especially if you are a newcomer). Compiling in Linux is quite easy, but in Windows life gets a bit tricky.

I've pulled together some info from here and there so that no-one else had to fight their way through fire and flames.]]></description><guid isPermaLink="false">e0dec9da-faee-4dcd-bfd2-8e14dda4f3f6</guid><pubDate>Fri, 23 Mar 2018 13:29:57 +0000</pubDate><dc:creator>light3rn</dc:creator></item><item><title>Designing a fast CLI join tool with rust</title><link>https://milancio42.github.io/blog/2018-03-22-rjoin/</link><description><![CDATA[(or how rust helped me to match the speed of GNU join written by Mike Haertel)]]></description><guid isPermaLink="false">cfc59513-ea0b-4d61-ac46-d7ea2e5bba8b</guid><pubDate>Thu, 22 Mar 2018 09:27:20 +0100</pubDate><dc:creator>Milan Opath</dc:creator></item><item><title>Presentation Manager written in Rust</title><link>https://medium.com/@mattdark/presentation-manager-written-in-rustlang-f36b73bb8dd2</link><description><![CDATA[A tool for serving and managing presentation slides.]]></description><guid isPermaLink="false">73cbd270-d16d-4aec-b38d-9503961891bd</guid><pubDate>Mon, 19 Mar 2018 23:28:45 +0000</pubDate><dc:creator>Mario García</dc:creator></item><item><title>Building a fast Electron app with Rust</title><link>https://keminglabs.com/blog/building-a-fast-electron-app-with-rust/</link><description><![CDATA[When I built Finda, I wanted it to be fast — specifically, to respond to all user input within 16 milliseconds.

Given this goal, you might be surprised to learn that Finda is built with Electron, a framework that’s often decried for being the opposite of fast.]]></description><guid isPermaLink="false">655ac748-e1e9-4fa4-b12a-2dc7c2e88fa7</guid><pubDate>Sun, 18 Mar 2018 00:00:00 +1100</pubDate><dc:creator>Kevin J. Lynagh</dc:creator></item><item><title>A Tiny `ls` Clone Written in Rust</title><link>https://matthias-endler.de/2018/ls/</link><description><![CDATA[In my series of useless Unix tools rewritten in Rust, today I'm going to be covering one of my all-time favorites: ls.]]></description><guid isPermaLink="false">44f7fa8d-b23d-47e7-b3dd-f227e8317d49</guid><pubDate>Thu,  1 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Matthias Endler</dc:creator></item><item><title>Snips Uses Rust to Build an Embedded Voice Assistant</title><link>https://blog.mozilla.org/blog/2018/02/21/snips-uses-rust-build-embedded-voice-assistant/</link><description><![CDATA[The team at Paris-based Snips has created a voice assistant that can be embedded in a single device or used in a home network to control lights, thermostat, music, and more. You can build a home hub on a Raspberry Pi and ask it for a weather report, to play your favorite song, or to brew up a double espresso. Manufacturers like Keecker are adding Snips’ technology to products like multimedia home robots. And Snips works closely with leaders across the value chain, like NVIDIA, EBV, and Analog Devices, in order to voice-enable an increasingly wider range of device types, from speakers to home automation systems to cars.]]></description><guid isPermaLink="false">8e33c7c4-2788-418b-8e47-ca8990ae0d38</guid><pubDate>Wed, 21 Feb 2018 12:34:56 -0800</pubDate><dc:creator>Judy DeMocker</dc:creator></item><item><title>How to write GStreamer Elements in Rust Part 2: A raw audio sine wave source</title><link>https://coaxion.net/blog/2018/02/how-to-write-gstreamer-elements-in-rust-part-2-a-raw-audio-sine-wave-source/</link><description><![CDATA[A bit later than anticipated, this is now part two of the blog post series about writing GStreamer elements in Rust. Part one can be found here, and I’ll assume that everything written there is known already. In this part, a raw audio sine wave source element is going to be written. It will be similar to the one Mathieu was writing in his blog post about writing such a GStreamer element in Python. Various details will be different though, but more about that later.]]></description><guid isPermaLink="false">0d46d60e-49c7-44ce-8f0c-48b94501b1ca</guid><pubDate>Wed, 21 Feb 2018 15:05:22 +0000</pubDate><dc:creator>Sebastian Dröge</dc:creator></item><item><title>Oxidizing Fedora: Try Rust and its applications today</title><link>https://fedoramagazine.org/oxidizing-fedora-try-rust-applications-today/</link><description><![CDATA[In recent years, it has become increasingly important to develop software that minimizes security vulnerabilities. Memory management bugs are a common cause of these vulnerabilities. To that end, the Mozilla community has spent the last several years building the Rust language and ecosystem which focuses primarily on eliminating those bugs. And Rust is available in Fedora today, along with a few applications in Fedora 27 and higher, as seen below.]]></description><guid isPermaLink="false">c5a101b5-e749-4e99-9e08-54de2cf0a2c1</guid><pubDate>Wed, 21 Feb 2018 08:00:23 +0000</pubDate><dc:creator>Igor Gnatenko and Neal Gompa</dc:creator></item><item><title>Spectra gets Rust scripting!</title><link>http://phaazon.net/blog/spectra_plugins</link><description><![CDATA[spectra is a crate I’ve been maintaining for a few months / years now. It’s a crate that I mainly use for demoscene productions (I released two with it, Céleri Rémoulade and Outline Invitation) but I also use it to play around and experiment new rendering, animation and video game techniques.]]></description><guid isPermaLink="false">44ef6094-b3df-4a2c-9cd9-429feecff6bc</guid><pubDate>Mon, 19 Feb 2018 02:57:00 +0000</pubDate><dc:creator>Dimitri Sabadie</dc:creator></item><item><title>Fanta: An opinionated framework for web development in rust</title><link>https://github.com/trezm/Fanta</link><description><![CDATA[Fanta is a web framework that aims for developers to be productive and consistent across projects and teams. Its goals are to be: Opinionated, Fast, and Intuitive. Based heavily off of the work here: https://github.com/tokio-rs/tokio-minihttp]]></description><guid isPermaLink="false">0af4c90e-74b2-438d-aaed-798c9f6e900a</guid><pubDate>Wed, 14 Feb 2018 18:44:00 +1100</pubDate><dc:creator>Peter Mertz</dc:creator></item><item><title>comm is a peer-to-peer instant messaging protocol designed to be resilient to censorship</title><link>https://github.com/zacstewart/comm-gtk</link><description><![CDATA[comm is a peer-to-peer instant messaging protocol designed to be resilient to censorship. comm-gtk is a GUI client built on the comm library. To try it out, start the app. In the configuration window, enter a secret phrase, a bootstrap node (IP:port pair), and a local port to listen on (e.g. 6669). For a bootstrap node, try 165.227.114.200:6667 (or any other node's IP address if you know one). Click connect to join the network.]]></description><guid isPermaLink="false">1694fd36-21ca-4e3f-8654-9291c3ba4de7</guid><pubDate>Tue, 13 Feb 2018 23:02:31 -0600</pubDate><dc:creator>Zac Stewart</dc:creator></item><item><title>tealdeer - A very fast implementation of tldr in Rust.</title><link>https://github.com/dbrgn/tealdeer</link><description><![CDATA[A fast command line client for tldr: A collection of simplified and community-driven man pages.]]></description><guid isPermaLink="false">751253b7-494d-4930-9586-40c18cab9280</guid><pubDate>Mon, 12 Feb 2018 07:46:00 +1100</pubDate><dc:creator>Danilo Bargen</dc:creator></item><item><title>Reflecting on ppbert</title><link>https://vfoley.xyz/ppbert/</link><description><![CDATA[I had an itch: I was pretty-printing the BERT-encoded terms that we use in a production system at work and it was very slow. The Erlang shell took more than two minutes to dump the largest file. (It took about 0.1 second to read and parse the file; the rest was spent in io:format.) I decided to scratch that itch: I wrote ppbert, a command-line utility that reads BERT-encoded values and pretty-prints them. I’ve worked sporadically on ppbert for almost a year now, I use it daily at work, I’m happy with it, and I want to write about some of the things I learned during that journey.]]></description><guid isPermaLink="false">28ce1b60-8837-4443-87fb-669bf176db9b</guid><pubDate>Fri,  9 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Vincent Foley</dc:creator></item><item><title>Guitar Effects in Rust</title><link>http://rickyhan.com/jekyll/update/2018/02/06/rust-guitar-pedal-effects-dsp.html</link><description><![CDATA[In an effort to experiment with dsp, I wrote a guitar/bass effects processor this past weekend. The end result works very well (to my pleasant surprise). It doesn’t have 90% of the functionalities of any of rakarrack, guitar rig, garage band but overall it was a fun weekend hack.]]></description><guid isPermaLink="false">60238a1c-95ee-46d8-bf5c-e70fed87a103</guid><pubDate>Tue,  6 Feb 2018 04:00:00 +0000</pubDate><dc:creator>Ricky Han</dc:creator></item><item><title>retrobasic - A BASIC interpreter written in Rust</title><link>https://github.com/seasalim/retrobasic</link><description><![CDATA[retrobasic is a BASIC interpreter written in Rust. It is based on the original BASIC '64 implementation, and modified as needed to make it more compatible with some of the classic BASIC games.]]></description><guid isPermaLink="false">303b0429-9b0c-46f8-a555-fbab8c2bdf90</guid><pubDate>Sun,  4 Feb 2018 17:21:55 +0000</pubDate><dc:creator>seasalim</dc:creator></item><item><title>DataFusion: Big Data Platform for Rust</title><link>https://www.datafusion.rs/</link><description><![CDATA[DataFusion is an open-source Big Data platform implemented in the Rust programming language with a similar programming style to Apache Spark.]]></description><guid isPermaLink="false">434c400b-b4ac-49c9-87fa-db2a8b5f1ba7</guid><pubDate>Sun,  4 Feb 2018 16:51:47 +0000</pubDate><dc:creator>Andy Grove</dc:creator></item></channel></rss>