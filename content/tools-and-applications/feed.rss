<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - Tools and Applications</title><link>https://readrust.net/</link><description>Tools and Applications posts on Read Rust</description><item><title>GNOME+Rust Hackfest #6 in Roma</title><link>https://blog.guillaume-gomez.fr/articles/2019-10-24+GNOME%2BRust+Hackfest+%236+in+Roma</link><description><![CDATA[End of the year, meaning it's time for a new GNOME+Rust hackfest and its feedback!]]></description><guid isPermaLink="false">e9565ca9-50f7-4ed7-9acd-485040d90014</guid><pubDate>Thu, 24 Oct 2019 21:15:00 +0000</pubDate><dc:creator>Guillaume Gomez</dc:creator></item><item><title>Rust+GNOME Hackfest #6</title><link>https://antoyo.ml/rust-gnome-hackfest-rome</link><description><![CDATA[Last week, I went to the sixth Rust+GNOME hackfest which was in Rome. During these hackfests, we work on improving the integration between Rust and the GNOME libraries.]]></description><guid isPermaLink="false">1206f8f5-e2a7-4679-91c3-d79143268a42</guid><pubDate>Thu, 24 Oct 2019 00:00:00 +0000</pubDate><dc:creator>Antoni Boucher</dc:creator></item><item><title>Nushell 0.4.0</title><link>http://www.jonathanturner.org/2019/10/nushell-0_4_0.html</link><description><![CDATA[Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.

Today we’re happy to announce the 0.4.0 release of Nushell. The 0.4.0 release marks a continually maturing shell that is now starting to show signs of stability. And, of course, a few fun features along the way.]]></description><guid isPermaLink="false">1f048104-e5be-49df-9def-c7b4de0d5478</guid><pubDate>Tue, 15 Oct 2019 00:00:00 +0000</pubDate><dc:creator>Jonathan Turner</dc:creator></item><item><title>Mun Programming Language</title><link>https://mun-lang.org/</link><description><![CDATA[The idea to create Mun originated out of frustration with the Lua dynamic scripting language that is extensively used for game development at Abbey Games.

Lua's hot reloading capabilities and LuaJIT's performance make it a great language for rapid prototyping of real-time applications - such as games - on PC. However, the language has performance issues on some mobile and console platforms - to which LuaJIT cannot deploy, the language lacks refactoring functionality, and does not scale well with modern technology.

Mun tries to take the best of both worlds to create a more robust, highly iterative, productive, and performant programming language.]]></description><guid isPermaLink="false">0932500c-62e0-4379-9e09-eb5ed61d826a</guid><pubDate>Thu, 10 Oct 2019 06:38:30 +0000</pubDate><dc:creator>Mun Developers</dc:creator></item><item><title>Spotify TUI: Spotify for the terminal written in Rust</title><link>https://github.com/Rigellute/spotify-tui</link><description><![CDATA[Spotify TUI: Spotify for the terminal written in Rust.]]></description><guid isPermaLink="false">6597a1f3-2858-46de-ab2b-fb2c639759b5</guid><pubDate>Mon,  7 Oct 2019 00:00:00 +0000</pubDate><dc:creator>Alexander Keliris</dc:creator></item><item><title>Nushell 0.3.0</title><link>http://www.jonathanturner.org/2019/09/nushell_0_3_0.html</link><description><![CDATA[Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines. We’re happy to announce that today we’re releasing Nushell 0.3.0. Nu has seen numerous bugfixes, performance improvements, and features added since its initial public release (which was only a few weeks ago!)]]></description><guid isPermaLink="false">f449d35d-98c7-4460-9d42-d6641415e542</guid><pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate><dc:creator>Jonathan Turner</dc:creator></item><item><title>rx — a minimalist and extensible pixel editor</title><link>http://cloudhead.io/rx/</link><description><![CDATA[rx is an extensible, modern and minimalist pixel editor implemented in Rust. It's designed to have as little UI as possible, and instead takes inspiration from vi's modal nature and command mode. Compared to other pixel editors, rx aims to be smaller, yet more configurable and extendable. `rx` takes a different approach when it comes to animation as well, which is done with *strips*.]]></description><guid isPermaLink="false">ce52dbf1-c1be-4db1-bdb9-c2ac79ed9b1d</guid><pubDate>Mon, 26 Aug 2019 20:08:25 +0000</pubDate><dc:creator>Alexis Sellier</dc:creator></item><item><title>pastel - A command-line tool to generate, analyze, convert and manipulate colors</title><link>https://github.com/sharkdp/pastel</link><description><![CDATA[pastel is a command-line tool to generate, analyze, convert and manipulate colors. It supports many different color formats and color spaces like RGB, HSL, CIELAB, CIELCh as well as ANSI 8-bit and 24-bit representations.]]></description><guid isPermaLink="false">315ad655-56d7-48d4-b68a-434cbabf710a</guid><pubDate>Mon, 26 Aug 2019 00:00:00 +0000</pubDate><dc:creator>David Peter</dc:creator></item><item><title>Actually Using Crev, Or, The Problem Of Trusting Software Dependencies</title><link>https://wiki.alopex.li/ActuallyUsingCrev</link><description><![CDATA[Currently the only implementation of crev is cargo-crev, which ties into the Rust language package manager, cargo. However, none of this is Rust-specific apart from the implementation, the basic concept and code review format should work for any language or package system. Code reviews (“proofs”) are just YAML files, and they can be shared around however you feel like – the method currently seems to be by putting proofs in git repositories, and cargo-crev has support for this. crev already has a pretty good getting started guide that covers much of the same ground as this, but I wanted to write something similar that comes from a random user, not the system’s creator.]]></description><guid isPermaLink="false">5ab7b4e5-a7ab-470c-be66-ec1a8354a782</guid><pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate><dc:creator>Simon Heath</dc:creator></item><item><title>Introduction to C2Rust</title><link>https://immunant.com/blog/2019/08/introduction-to-c2rust/</link><description><![CDATA[Our goal is to build useful tools that make it easier to take existing Rust code and get up and running with Rust. We aim to automate much of the translation and rewriting process so that migrating legacy systems is practical and scalable with minimal manual effort.

We’re excited to announce that a milestone long in the making is finally here! You can now install C2Rust from crates.io with a simple cargo install on Linux and OS X. We’ve been hard at work improving C2Rust, so go install and give it a spin! You can find the necessary prerequisites in the C2Rust README.]]></description><guid isPermaLink="false">0df32177-8f6b-48ec-a896-5555337110fa</guid><pubDate>Fri, 23 Aug 2019 00:00:00 +0000</pubDate><dc:creator>Immunant, Inc</dc:creator></item><item><title>Introducing nushell</title><link>http://www.jonathanturner.org/2019/08/introducing-nushell.html</link><description><![CDATA[Today, we’re introducing a new shell, written in Rust. It draws inspiration from the classic Unix philosophy of pipelines, the structured data approach of PowerShell, functional programming, systems programming, and more.]]></description><guid isPermaLink="false">adf5ec47-1ec7-4b47-9d89-122b4efdd8f9</guid><pubDate>Fri, 23 Aug 2019 00:00:00 +0000</pubDate><dc:creator>Jonathan Turner, Yehuda Katz, and Andrés Robalino, with contributions from Odin Dutton</dc:creator></item><item><title>Drawing in GTK in Rust (part 1)</title><link>https://medium.com/journey-to-rust/drawing-in-gtk-in-rust-part-1-4a401eecc4e0</link><description><![CDATA[It’s a double challenge: I’m learning Rust (but I can say I more or less know the language by now), and I’m trying to use GTK in Rust. I’m a complete beginner in GTK, and even if I know Rust, it does not mean I can use it properly. So I’ll learn a huge library (written in C) by using it in a complex and hard language I just learned. Well, well, good luck, me.]]></description><guid isPermaLink="false">05694ac8-0c6b-413c-9853-a487c3d25652</guid><pubDate>Mon,  8 Jul 2019 07:10:41 +0000</pubDate><dc:creator>George Shuklin</dc:creator></item><item><title>Speedy Desktop Apps With GTK and Rust</title><link>https://nora.codes/tutorial/speedy-desktop-apps-with-gtk-and-rust/</link><description><![CDATA[The web platform is the delivery mechanism of choice for a ton of software these days, either through the web browser itself or through Electron, but that doesn’t mean there isn’t a place for a good old fashioned straight-up desktop application in the picture.

Fortunately, it’s easier than ever to write a usable, pretty, and performant desktop app, using my language of choice (Rust) and the wildly successful cross-platform GUI framework GTK. In this blog post, we’ll walk through the source code of gDiceRoller. In future posts, I’ll explain how I packaged it for different systems.]]></description><guid isPermaLink="false">04a62a1c-2acd-4ee3-8d83-eac3e9bcbca7</guid><pubDate>Fri,  5 Jul 2019 14:00:00 -0700</pubDate><dc:creator>Leonora Tindall</dc:creator></item><item><title>Aelve Codesearch: Regex-based search across all of crates.io</title><link>https://codesearch.aelve.com/rust</link><description><![CDATA[Search the code of all crates published to crates.io.]]></description><guid isPermaLink="false">c7f25b3a-3d76-4b05-85df-6bf59fb5c92a</guid><pubDate>Mon,  1 Jul 2019 00:00:00 +0000</pubDate><dc:creator>Aelve</dc:creator></item><item><title>Rustexp: A Rust regular expression editor &amp; tester</title><link>https://rustexp.lpil.uk/</link><description><![CDATA[A Rust regular expression editor & tester inspired by Rubular.]]></description><guid isPermaLink="false">b9742776-a64f-4358-beff-fabdf075d65d</guid><pubDate>Tue, 25 Jun 2019 00:00:00 +0000</pubDate><dc:creator>Louis Pilfold</dc:creator></item><item><title>Building Standalone Python Applications with PyOxidizer</title><link>https://gregoryszorc.com/blog/2019/06/24/building-standalone-python-applications-with-pyoxidizer/</link><description><![CDATA[Today, I'm excited to announce the first release of PyOxidizer (project, documentation), an open source utility that aims to solve the Python application distribution problem! (The installation instructions are in the docs.) PyOxidizer's marquee feature is that it can produce a single file executable containing a fully-featured Python interpreter, its extensions, standard library, and your application's modules and resources.]]></description><guid isPermaLink="false">6a4e1bf9-728a-4c25-919d-05ae4664366c</guid><pubDate>Mon, 24 Jun 2019 09:00:00 +0000</pubDate><dc:creator>Gregory Szorc</dc:creator></item><item><title>Makepad, a live Rust authoring tool for 2D vector design, shaders and animation</title><link>https://github.com/makepad/makepad</link><description><![CDATA[The vision is to build a livecoding / design hybrid program, where procedural design and code are fused in one environment. If you have missed 'learnable programming' please check this out: http://worrydream.com/LearnableProgramming/ Makepad aims to fulfill (some) of these ideas using a completely from-scratch renderstack built on the GPU and Rust. It will be like an IDE meets a vector designtool, and had offspring. Direct manipulation of the vectors modifies the code, the code modifies the vectors.

However before we can make this awesome application, we need to build a UI stack. The aim of this toolkit is to be our stepping stone into building a livecoding IDE and designtools that don't suck or fall to pieces along the way.]]></description><guid isPermaLink="false">87146592-5c10-431e-8655-5272eec53ed9</guid><pubDate>Mon, 17 Jun 2019 00:00:00 +0000</pubDate><dc:creator>makepad</dc:creator></item><item><title>rga: ripgrep, but also search in PDFs, E-Books, Office documents, zip, tar.gz, etc.</title><link>https://phiresky.github.io/blog/2019/rga--ripgrep-for-zip-targz-docx-odt-epub-jpg/</link><description><![CDATA[rga is a line-oriented search tool that allows you to look for a regex in a multitude of file types. rga wraps the awesome ripgrep and enables it to search in pdf, docx, sqlite, jpg, zip, tar.*, movie subtitles (mkv, mp4), etc.]]></description><guid isPermaLink="false">10bad307-4122-4dd4-a0b2-4347b1da1a12</guid><pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate><dc:creator>phiresky</dc:creator></item><item><title>pre-alpha release - meli terminal mail client</title><link>https://meli.delivery/posts/2019-06-15-pre-alpha.html</link><description><![CDATA[An early release with basic features and only Maildir support has been published in meli’s git repositories. meli is a new experimental mail client for the terminal. It’s a from-scratch implementation in order to experiment with ideas I had about a client’s design.]]></description><guid isPermaLink="false">a0b1cf6f-32c6-43dc-bfc4-fb86068d84fa</guid><pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate><dc:creator>epilys</dc:creator></item><item><title>Emu - GPU programming language for Rust</title><link>https://calebwin.github.io/emu/</link><description><![CDATA[Emu is a language for programming GPUs from Rust. Emu provides the emu! macro for compiling functions written in the Emu language to an intermediate code which gets stored in the EMU global constant. You can then run your code using a binding to OpenCL such as ocl or rust-opencl or use the build! macro which generates Rust functions that can be called to run your Emu functions.]]></description><guid isPermaLink="false">3fab26a6-a1c1-4107-a0c0-c69f2c297342</guid><pubDate>Thu, 13 Jun 2019 00:00:00 +0000</pubDate><dc:creator>Caleb Winston</dc:creator></item><item><title>Rust Regex Playground</title><link>https://2fd.github.io/rust-regex-playground/#method=find&amp;regex=%5Cw+&amp;text=abc</link><description><![CDATA[Web tool to evaluate rust regular expressions.]]></description><guid isPermaLink="false">c0a8ed1e-1273-49c3-b260-a700b475ada5</guid><pubDate>Tue, 11 Jun 2019 00:00:00 +0000</pubDate><dc:creator>Fede Ramirez</dc:creator></item><item><title>dua: Disk Usage Analyzer</title><link>https://github.com/Byron/dua-cli</link><description><![CDATA[dua (-> Disk Usage Analyzer) is a tool to conveniently learn about the usage of disk space of a given directory. It's parallel by default and will max out your SSD, providing relevant information as fast as possible.]]></description><guid isPermaLink="false">2ebb2e7a-9b56-4fe3-8605-91c8deb394a9</guid><pubDate>Sat,  1 Jun 2019 00:00:00 +0000</pubDate><dc:creator>Sebastian Thiel</dc:creator></item><item><title>LambdaCore Programming Language</title><link>https://sites.google.com/view/lcore</link><description><![CDATA[An interpreted language written in Rust inspired by the Lisp family of languages.]]></description><guid isPermaLink="false">d4eee998-344f-4863-9402-c8636ff8afc0</guid><pubDate>Sat,  1 Jun 2019 00:00:00 +0000</pubDate><dc:creator>Pebaz</dc:creator></item><item><title>battop: top for your laptop battery</title><link>https://github.com/svartalf/rust-battop</link><description><![CDATA[battop is an interactive viewer, similar to top, htop and other *top utilities, but about batteries installed in your notebook.]]></description><guid isPermaLink="false">834cc4e5-1dd6-446d-966e-8a869ff45f79</guid><pubDate>Thu, 30 May 2019 00:00:00 +0000</pubDate><dc:creator>Nikita Kuznetsov</dc:creator></item><item><title>Introducing Packem: a super fast experimental bundler written in Rust</title><link>https://medium.freecodecamp.org/introducing-packem-a-super-fast-experimental-bundler-written-in-rust-e981af875517</link><description><![CDATA[Packem is an experimental precompiled JavaScript module bundler primarily implemented in Rust. It can also handle a variety of other file types like YAML/TOML, fragment shader files and a lot more.]]></description><guid isPermaLink="false">3eb814d5-d467-4e34-ba31-e0a55da4da36</guid><pubDate>Wed, 15 May 2019 16:36:27 +0000</pubDate><dc:creator>Bukhari Muhammad</dc:creator></item><item><title>What’s the best IDE for developing in Rust?</title><link>https://medium.com/cloud-native-the-gathering/whats-the-best-ide-for-developing-in-rust-5087d46006f5</link><description><![CDATA[A curation of opinions and facts on a variety of Rust IDEs.]]></description><guid isPermaLink="false">154c7165-f0e5-46e1-96e7-c8338485549f</guid><pubDate>Mon, 13 May 2019 06:43:35 +0000</pubDate><dc:creator>Tremaine Eto</dc:creator></item><item><title>Snips Open Sources Tract</title><link>https://medium.com/snips-ai/snips-open-sources-tract-cdc50f437ef2</link><description><![CDATA[After open sourcing Snips-NLU a year ago, Snips now shares Tract, a new piece of its embedded voice platform. Tract is Snips’ neural network inference engine.]]></description><guid isPermaLink="false">0cbe8a85-0ad7-49b7-b266-db068f4cef8d</guid><pubDate>Fri, 10 May 2019 13:59:02 +0000</pubDate><dc:creator>Mathieu Poumeyrol</dc:creator></item><item><title>gptman: A CLI tool and library for managing GUID partition tables</title><link>https://crates.io/crates/gptman</link><description><![CDATA[A CLI tool for Linux that allows you to copy a partition from one disk to another and more. A library that allows managing GUID partition tables. Features include: Read/Write GPT from 512 and 4096 bytes sector size disks, Create a new GPT on a disk, Insert/delete a partition in the table, Align partitions automatically, Resize a partition, Copy/clone a partition from one disk and insert it to another, Change partition type, Fix partitions order, Change disk GUID, Change partition name, Change partition GUID, Toggle legacy BIOS bootable, Toggle no block IO protocol, Toggle required partition flag, Toggle attributes, Customize columns to print, Print raw data of disklabel, Swap partition indexes, Randomize disk's GUID and all partition's GUID, Copy/clone all partitions from one disk and insert it to another.]]></description><guid isPermaLink="false">4b134136-1041-4976-ba52-7e64e767ea89</guid><pubDate>Thu,  2 May 2019 01:33:00 +0000</pubDate><dc:creator>Cecile Tonglet</dc:creator></item><item><title>RustPlayground: Quickly test Rust code on macOS.</title><link>https://github.com/cmyr/RustPlayground</link><description><![CDATA[Rust Playground for MacOS is a standalone native mac application that allows quickly editing and testing rust snippets.]]></description><guid isPermaLink="false">10ce619a-7183-49cf-91c8-99e0f085a272</guid><pubDate>Tue, 30 Apr 2019 03:59:00 +0000</pubDate><dc:creator>colin rofls</dc:creator></item><item><title>Implementing tile encoding in rav1e</title><link>https://blog.rom1v.com/2019/04/implementing-tile-encoding-in-rav1e/</link><description><![CDATA[During the last few months at Videolabs, I added support for tile encoding in rav1e (a Rust AV1 Encoder). AV1 is an open and royalty-free video coding format, concurrent with HEVC (H.265). Rav1e is an encoder written in Rust, developped by Mozilla/Xiph. As such, it takes an input video and encodes it to produce a valid AV1 bitstream. Tile encoding consists in splitting video frames into tiles that can be encoded and decoded independently in parallel (to use several CPUs), at the cost of a small loss in compression efficiency. This speeds up encoding and increases decoding frame rate.]]></description><guid isPermaLink="false">47f0e720-8b24-41d0-8f3a-97683b5f03b3</guid><pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Romain Vimont</dc:creator></item><item><title>The XV Hex Viewer</title><link>https://chrisvest.github.io/xv/</link><description><![CDATA[XV is a terminal hex viewer with a text user interface, written in 100% safe Rust. Licensed under the Apache-2.0 software license. Get it from crates.io by running cargo install xv in your terminal.]]></description><guid isPermaLink="false">a3598959-4fde-42aa-9fcf-4310741caa5e</guid><pubDate>Wed, 24 Apr 2019 10:34:15 +0200</pubDate><dc:creator>Chris Vest</dc:creator></item><item><title>Reviewing Sled: Part III</title><link>https://ayende.com/blog/187073-C/reviewing-sled-part-iii</link><description><![CDATA[Unusually for me, I had a bit of a pause in reviewing Sled. As a reminder, Sled is an embedded database engine written in Rust. I last stopped looking at the buffer management, but I still don’t really have a good grasp of what is going on. The next file is the iterator. It looks like it translates between segments and messages in these segments.]]></description><guid isPermaLink="false">767bc80b-e61f-4e0f-8cbb-82655b7aa767</guid><pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Ayende Rahien</dc:creator></item><item><title>LeftWM - A tiling window manager for Adventurers</title><link>http://leftwm.org/</link><description><![CDATA[A tiling window manager written in Rust for stability and performance. The core of left is designed to do one thing and one thing well. Be a window manager. Because you probably want more than just a black screen LeftWM is built around the concept of theming. With themes you can choose between different bar / compositor / background / colors, whatever makes you happy. LeftWM has been built from the very beginning to support multiple screens and has been built around ultrawide monitors. You will see this with the default key bindings]]></description><guid isPermaLink="false">49f9c596-e61c-402d-a2de-21c8350ccac6</guid><pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate><dc:creator>lex148</dc:creator></item><item><title>Keeping Rust projects&apos; README.md code examples up-to-date</title><link>https://blog.guillaume-gomez.fr/articles/2019-04-13+Keeping+Rust+projects%27+README.md+code+examples+up-to-date</link><description><![CDATA[Because keeping documentation up-to-date is very important (and should be a must have!), we need to check if the examples are still valid after every new updates. Luckily, rustdoc already makes such things very easy. But now, let's say you have examples outside of your Rust code. How can they be tested?]]></description><guid isPermaLink="false">45b386b4-5b90-42a7-b17b-00aeb72cde34</guid><pubDate>Sat, 13 Apr 2019 01:00:00 +0000</pubDate><dc:creator>Guillaume Gomez</dc:creator></item><item><title>cargo-call-stack, part 2: getting call graph information from rustc</title><link>https://blog.japaric.io/stack-analysis-2/</link><description><![CDATA[In a previous post I described the current implementation of cargo-call-stack, a static stack usage analysis tool. In the second part of that post I described the problems the tool runs into when dealing with indirect function calls (both function pointer calls and dynamic dispatch) and proposed improving the output of the tool by having rustc inject type information in the LLVM IR it produces.

While discussing that idea with rustc developers they noted that the compiler could emit information that’s more relevant to call graph analysis than just the signatures of functions and trait methods. In this post I’ll describe the call graph metadata I’m currently implementing in rustc and how it will help tools like cargo-call-stack. By the way, I have a feature branch of cargo-call-stack that uses this upcoming rustc feature if you want to try it out but you’ll need to build a custom rustc.]]></description><guid isPermaLink="false">e57004c9-8a39-47af-bd60-b97fbcd07e7a</guid><pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Jorge Aparicio</dc:creator></item><item><title>Terminal Redox: Some Developer Tools Written in Rust</title><link>https://sts10.github.io//2019/04/08/terminal-redox-alacritty.html</link><description><![CDATA[In my very slow and not very steady quest to learn the Rust programming language, I’ve come across a few projects written in the language that I use everyday. I thought I’d write a quick post about them, with some configuration tricks that I’ve made to make them suit my needs.

Why prefer tools built with Rust? Rust is a very fast language that also works to ensure safety from a group of bugs and pitfalls. It’s also the four-time-running most loved programming language, according to a yearly Stack Overflow survey. Also, since Rust is only a few years old, any program written in Rust is by definition new. Of course newer doesn’t always mean better, but as a non-professional developer I can afford to be on the edge a bit.]]></description><guid isPermaLink="false">2d3bd098-bf1d-451b-bef0-b2e84678b4e3</guid><pubDate>Mon,  8 Apr 2019 22:11:00 +0000</pubDate><dc:creator>Sam Schlinkert</dc:creator></item><item><title>Alacritty Version 0.3.0</title><link>https://blog.christianduerr.com/alacritty_030_announcement</link><description><![CDATA[ Alacritty is a terminal emulator with a strong focus on simplicity and performance. With such a strong focus on performance, included features are carefully considered and you can always expect Alacritty to be blazingly fast. By making sane choices for defaults, Alacritty requires no additional setup. However, it does allow configuration of many aspects of the terminal. With this release, Alacritty has officially entered the beta stage – there are still a few missing features and bugs to be fixed, but it is already used by many as a daily driver.]]></description><guid isPermaLink="false">700e8697-e3f3-49ff-bf87-03cfb598ff0d</guid><pubDate>Sun,  7 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Christian Duerr</dc:creator></item><item><title>hunter: ranger-like file browser written in Rust</title><link>https://github.com/rabite0/hunter</link><description><![CDATA[hunter is a fast and lag-free file browser/manager for the terminal. It features a heavily asynchronous and multi-threaded design and all disk IO happens off the main thread in a non-blocking fashion, so that hunter will always stay responsive, even under heavy load on a slow spinning rust disk, even with all the previews enabled.]]></description><guid isPermaLink="false">c702047e-47c7-493a-b73e-55a4394eb6da</guid><pubDate>Sun,  7 Apr 2019 00:00:00 +0000</pubDate><dc:creator>rabite0</dc:creator></item><item><title>Inko Programming Language</title><link>https://inko-lang.org/</link><description><![CDATA[Concurrent and safe object-oriented programming, without the headaches.]]></description><guid isPermaLink="false">a9c1b96b-5e31-432e-bbb8-c18a943d03b9</guid><pubDate>Wed,  3 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Yorick Peterse</dc:creator></item><item><title>Sonic: a minimalist  alternative to Elasticsearch written in Rust</title><link>https://notamonadtutorial.com/sonic-a-minimalist-alternative-to-elasticsearch-written-in-rust-7f3612ecb47b</link><description><![CDATA[I always end up using Elasticsearch to index documents, to generate autocompletes and for geolocation. Sonic doesn’t solve all three problems but it is a good tool to solve the first two. I have not yet used it in production, but it seems like a good lightweight alternative to Elasticsearch.

Since we love databases and we are trying to focus on Rust projects, Amin Arria and I decided to interview Sonic’s creator, Valerian Saliou, who generously agreed.]]></description><guid isPermaLink="false">f995f40c-77a1-4091-8c38-7ec9c848e3f7</guid><pubDate>Tue,  2 Apr 2019 16:15:58 +0000</pubDate><dc:creator>unbalancedparentheses</dc:creator></item><item><title>Reviewing Sled: Part II</title><link>https://ayende.com/blog/186785-A/reviewing-sled-part-ii?Key=d48f04ae-25dc-428e-992a-ff38587a7c72</link><description><![CDATA[Sled is an embedded database engine written in Rust. It takes a very different approach for how to store data, which I’m really excited to see. And with that, let’s be about it. In stopped in my last post when getting to the flusher, which simply sleep and call flush on the iobufs.]]></description><guid isPermaLink="false">aeb77fc8-4dba-424f-b119-aa77300b683d</guid><pubDate>Mon,  1 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Ayende Rahien</dc:creator></item><item><title>Reviewing Sled: Part I</title><link>https://ayende.com/blog/186753-A/reviewing-sled-part-i</link><description><![CDATA[The Sled project is an embedded database written in Rust. I run into it a few times recently and given my day job, I decided to take a peek and understand how it works. The project talks about being Log Structure Merge (and also exposing this to the client) with B+Tree read performance. The last time I read an LSM codebase was quite some time ago, so this is going to be quite interesting, I hope.]]></description><guid isPermaLink="false">9c952180-dba4-4a50-8104-4d185ce7ac4b</guid><pubDate>Thu, 28 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Ayende Rahien</dc:creator></item><item><title>Rust + Gtk = Wow</title><link>https://dorianpula.ca/2019/03/22/rust-gtk-wow/</link><description><![CDATA[As I’ve been experimenting with writing Rust apps, I attempted to create a small little GUI application. At first I attempted to setup everything with Qt, but C++/Qt interoperability with Rust is painful. Very, very painful. I experimented with some more radical UI frameworks such as Azul and Conrad. These have a lot of promise going forward. However for the here and now, I recommend looking at gtk-rs, Rust binding for Gtk.]]></description><guid isPermaLink="false">da7566eb-9da3-4f88-9c13-743fd67037a3</guid><pubDate>Fri, 22 Mar 2019 21:54:08 +0000</pubDate><dc:creator>Dorian Pula</dc:creator></item><item><title>Introducing flat-manager</title><link>https://blogs.gnome.org/alexl/2019/03/19/introducing-flat-manager/</link><description><![CDATA[A long time ago I wrote a blog post about how to maintain a Flatpak repository. It is still a nice, mostly up to date, description of how Flatpak repositories work. However, it doesn’t really have a great answer to the issue called syncing updates in the post. In other words, it really is more about how to maintain a repository on one machine.

To support this I’ve been working on a side project called flat-manager. It is a service written in rust that manages Flatpak repositories. Recently we migrated Flathub to use it, and its seems to work quite well.]]></description><guid isPermaLink="false">55e1be8d-4aae-4753-8bc6-9a52a6401722</guid><pubDate>Tue, 19 Mar 2019 13:20:25 +0000</pubDate><dc:creator>Alexander Larsson</dc:creator></item><item><title>Introducing cargo-instruments: zero-hassle profiling on macOS</title><link>https://www.reddit.com/r/rust/comments/b20eca/introducing_cargoinstruments_zerohassle_profiling/</link><description><![CDATA[cargo-instruments (github) is a cargo plugin that makes it easy to profile rust binaries on macOS.  tl;dr: cargo-instruments is a shim between cargo and Xcode's very powerful dtrace-backed diagnostic suite, Instruments. Out of the box, this lets you track cpu / thread usage, allocations, context switches, and a bunch of other stuff.]]></description><guid isPermaLink="false">b1715412-8fc8-4882-9230-71e2b95c4b55</guid><pubDate>Sun, 17 Mar 2019 13:18:32 +1100</pubDate><dc:creator>cmyr</dc:creator></item><item><title>ActivityWatch automatic time-tracking software switches to Rust</title><link>https://forum.activitywatch.net/t/development-update-march-2019/189</link><description><![CDATA[While Python is a great language to quickly build new features in, it’s not great for performance or deploying to multiple platforms (especially Android). So @johan-bjareholt took on the tremendous task of reimplementing aw-server in the highly performant and secure programming language Rust. Since Rust compiles to Android we have built a library for use on Android, letting us avoid reimplement all of ActivityWatch to Android devices specifically (and vastly decreases the time to port future features like sync to Android).]]></description><guid isPermaLink="false">ec8871ce-7c85-42a8-bd0c-e85c09a2f04d</guid><pubDate>Tue, 12 Mar 2019 12:06:19 +0000</pubDate><dc:creator>Erik Bjäreholt</dc:creator></item><item><title>Remote Development and Debugging of Rust with CLion</title><link>https://medium.com/nearprotocol/remote-development-and-debugging-of-rust-with-clion-39c38ced7cc1</link><description><![CDATA[Most in our team use CLion for Rust development which is especially great for local debugging, alas it is not free. Since we are developing a blockchain it requires careful orchestration of the nodes running on separate machines, and occasionally we need to debug some corner case on a remotely running node. CLion and other JetBrains products have great support of the remote development and debugging. However, unfortunately, Rust is not a primary language of CLion which makes configuration tricky. In this post we walk through the configuration of CLion for remote Rust development and debugging.]]></description><guid isPermaLink="false">0c70dd5f-51e6-4f07-8707-6783ca471d0c</guid><pubDate>Mon, 11 Mar 2019 01:18:15 +0000</pubDate><dc:creator>Maksym Zavershynskyi</dc:creator></item><item><title>Building the virtualization stack of the future with rust-vmm</title><link>https://opensource.com/article/19/3/rust-virtual-machine</link><description><![CDATA[rust-vmm facilitates sharing core virtualization components between Rust Virtual Machine Monitors.]]></description><guid isPermaLink="false">d3f4b805-773f-499e-84c8-b79fcb40631f</guid><pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Andreea Florescu</dc:creator></item><item><title>Torchbear - a fast and complete interpreter for the new Speakeasy langauge</title><link>https://github.com/foundpatterns/torchbear</link><description><![CDATA[Torchbear is a new programming environment currently available for Windows, Android, MacOS, and Linux. With it, you get Rust's great library ecosystem, but you don't need to recompile with each change to how you use those libraries. Since you express your domain logic in a higher level scripting language and your system logic in Rust's language, you get the best of both worlds!]]></description><guid isPermaLink="false">977952df-eb7d-43eb-82e2-3e53b7e00a72</guid><pubDate>Wed,  6 Mar 2019 13:17:44 +1100</pubDate><dc:creator>Mitchell Tannenbaum</dc:creator></item><item><title>Structured Greping Of Structured Logging</title><link>https://gidi.io/2019/03/01/structured-greping-of-structured-logging-using-grep-for-json.html</link><description><![CDATA[Why I created a command-line JSON processor.]]></description><guid isPermaLink="false">e0804329-7f79-4ee4-9087-8aa2e8c0b672</guid><pubDate>Fri,  1 Mar 2019 21:16:08 +0000</pubDate><dc:creator>Gidi Meir Morris</dc:creator></item><item><title>Forge: A scripting language for Rust gamedev inspired by JS, Rust and Python</title><link>https://github.com/zesterer/forge</link><description><![CDATA[Forge is a dynamically-typed language written in Rust. It is inspired by JavaScript, Rust, Python and Rhai. In the future, you'll be able to use Forge as a general-purpose lightweight scripting language in your applications.]]></description><guid isPermaLink="false">a1899a77-1a12-49f3-92e2-5e353491c8ae</guid><pubDate>Wed, 27 Feb 2019 04:21:00 +0000</pubDate><dc:creator>Joshua Barretto</dc:creator></item><item><title>New cargo subcommand: sync-readme</title><link>https://phaazon.net/blog/cargo-sync-readme</link><description><![CDATA[cargo sync-readme synchronizes your README (the file specified by the readme key in your Cargo.toml, or just README.md by default) with the entrypoint of your library or binary crate (by default, lib.rs or main.rs, or what is defined at the path key in your manifest).]]></description><guid isPermaLink="false">806cf62c-14c8-4a7e-afa8-f99843d634f2</guid><pubDate>Mon, 25 Feb 2019 18:50:00 +0000</pubDate><dc:creator>Dimitri Sabadie</dc:creator></item><item><title>Part 4: Line IDs in toy version control system, oji</title><link>https://jneem.github.io/ids/</link><description><![CDATA[I’ve written quite a bit about the theory of patches and merging, but nothing yet about how to actually implement anything efficiently. That will be the subject of this post, and probably some future posts too.]]></description><guid isPermaLink="false">aa9ed2af-2308-4ae8-a009-caf772f96e3b</guid><pubDate>Mon, 25 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Joe Neeman</dc:creator></item><item><title>git req | switch branches, not context</title><link>https://arusahni.github.io/git-req/</link><description><![CDATA[Check out git branches by their pull (or merge) request ID]]></description><guid isPermaLink="false">3a45d462-3f13-451b-8b15-03d07069c3f3</guid><pubDate>Thu, 21 Feb 2019 10:16:00 +0000</pubDate><dc:creator>Aru Sahni</dc:creator></item><item><title>Part 3: Graggles can have cycles</title><link>https://jneem.github.io/cycles/</link><description><![CDATA[Almost two years ago, I promised a series of three posts about version control. The first two (here and here) introduced a new (at the time) framework for version control. The third post, which I never finished, was going to talk about the datastructures and algorithms used in pijul, a version control system built around that new framework. The problem is that pijul is a complex piece of software, and so I had lots of trouble wrapping my head around it.

Two years later, I’m finally ready to continue with this series of posts (but having learned from my earlier mistakes, I’m not going to predict the total number of posts ahead of time). In the meantime, I’ve written my own toy version control system (VCS) to help me understand what’s going on. It’s called ojo, and it’s extremely primitive: to start with, it can only track a single file. However, it is (just barely) sophisticated enough to demonstrate the important ideas. I’m also doing my best to make the code is clear and well-documented.]]></description><guid isPermaLink="false">53d60351-cb50-4f9f-83d7-e6c8d94ab025</guid><pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Joe Neeman</dc:creator></item><item><title>Rust Lifetime Visualization Ideas</title><link>https://blog.adamant-lang.org/2019/rust-lifetime-visualization-ideas/</link><description><![CDATA[Many people have had the idea that there should be a way to visualize lifetimes in Rust. Indeed, the Rust Book used to include ASCII diagrams of lifetimes in some code examples. When fighting the borrow checker, it would be great if the IDE or editor could automatically provide a visualization of the lifetimes in your code.]]></description><guid isPermaLink="false">650d3646-0583-473d-bb43-a2f22f2e8e7d</guid><pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Jeff Walker</dc:creator></item><item><title>Mod player in Rust - part 4. Finally some music</title><link>https://www.codeslow.com/2019/02/in-this-post-we-will-finally-have-some.html</link><description><![CDATA[In this post we will finally have some music. I will spend some time discussing how the Amiga sound hardware worked. The original mod file format and how it is played back is intimately linked with the Amiga hardware.]]></description><guid isPermaLink="false">569a6623-bebb-48a6-8946-57b158a4a9b8</guid><pubDate>Sun, 17 Feb 2019 03:50:00 -0800</pubDate><dc:creator>Jani Peltonen</dc:creator></item><item><title>syswall: a firewall for syscalls</title><link>https://www.polaris64.net/blog/programming/2019/syswall-a-firewall-for-syscalls</link><description><![CDATA[A while back I started thinking about software and how it does what it does. Perhaps even more importantly, I started thinking about how we can know what software does, without relying on the software's marketing pitch.]]></description><guid isPermaLink="false">821ecfae-acd8-4a50-907e-77c394807c86</guid><pubDate>Sat, 16 Feb 2019 22:07:25 +0000</pubDate><dc:creator>Simon Pugnet</dc:creator></item><item><title>Shipping Rust Binaries with GoReleaser</title><link>https://medium.com/@jondot/shipping-rust-binaries-with-goreleaser-d5aa42a46be0</link><description><![CDATA[Although GoReleaser supports building just Go projects, it does so much more in the packaging and distribution department that it is extremely hard to ignore.]]></description><guid isPermaLink="false">81e00756-52f6-48fe-839e-28c88b690aef</guid><pubDate>Sat, 16 Feb 2019 17:47:00 +0000</pubDate><dc:creator>Dotan Nahum</dc:creator></item><item><title>MonkeyType: type inference for transpiling Python to Rust</title><link>https://medium.com/@konchunas/monkeytype-type-inference-for-transpiling-python-to-rust-64fa5a9eb966</link><description><![CDATA[In my previous post about Python to Rust transpiler I’ve said, that one of the biggest problems is absence of types in python and inability to infer them for functions. But it turns out there is a solution to this problem. Guys from Instagram have developed an incredible tool for runtime type inference called MonkeyType. It monitors what types functions accept and return while running a program. This approach works quite nicely so I want to share with you how it’s done.]]></description><guid isPermaLink="false">da140d7b-47bf-4d63-a3e1-75ade64bed2f</guid><pubDate>Fri, 15 Feb 2019 22:25:31 +0000</pubDate><dc:creator>Julian Konchunas</dc:creator></item><item><title>Introducing swc (speedy web compiler) 1.0</title><link>https://swc-project.github.io/blog/2019/02/08/Introducing-swc-1.0</link><description><![CDATA[swc(speedy web compiler) is a super-fast javascript to javascript compiler. It can transpile typescript / jsx / ecmascript 2019 to browser-compatible javascript. It's 16x - 20x faster than babel even on single-core synchronous benchmark. Note that actual performance gap is larger because swc works on worker thread while babel works on event loop thread.]]></description><guid isPermaLink="false">a3541593-fc72-40c3-a4b8-7fdad4cab8fe</guid><pubDate>Fri,  8 Feb 2019 00:00:00 +0000</pubDate><dc:creator>DongYoon Kang</dc:creator></item><item><title>Notion: the hassle-free JavaScript toolchain manager</title><link>https://github.com/notion-cli/notion</link><description><![CDATA[Reliable: Ensure everyone in your project uses an identical dev environment, from the Node version to your preferred package manager.

Universal: Enjoy the same command-line experience in every shell and every major operating system.

Fast: Notion is implemented in Rust and deployed as a static executable for maximum performance.]]></description><guid isPermaLink="false">559ed8de-7e83-4caa-aef1-f2b5fd7faa01</guid><pubDate>Wed,  6 Feb 2019 06:23:00 +0000</pubDate><dc:creator>LinkedIn Engineering</dc:creator></item><item><title>A Python Interpreter written in Rust</title><link>https://github.com/RustPython/RustPython</link><description><![CDATA[Goals: Full Python-3 environment entirely in Rust (not CPython bindings). A clean implementation without compatibility hacks]]></description><guid isPermaLink="false">2eb82c9e-d427-4beb-9a07-e2fc2f5bb9df</guid><pubDate>Wed,  6 Feb 2019 00:00:00 +0000</pubDate><dc:creator>RustPython</dc:creator></item><item><title>Hello, sandboxfs 0.1.0</title><link>http://julio.meroh.net/2019/02/hello-sandboxfs-0.1.0.html</link><description><![CDATA[I am pleased to announce that the first release of sandboxfs, 0.1.0, is finally here! You can download the sources and prebuilt binaries from the 0.1.0 release page and you can read the installation instructions for more details.

The journey to this first release has been a long one. sandboxfs was first conceived over two years ago, was first announced in August 2017, showed its first promising results in April 2018, and has been undergoing a rewrite from Go to Rust.]]></description><guid isPermaLink="false">f2388917-1b08-4e6d-9051-daa496814ab1</guid><pubDate>Tue,  5 Feb 2019 09:00:00 -0500</pubDate><dc:creator>Julio Merino</dc:creator></item><item><title>Mod player in Rust - part 3. Audio and threads</title><link>https://www.codeslow.com/2019/02/mod-player-in-rust-part-3-audio-and.html</link><description><![CDATA[I finished my last post with having a fully parsed mod file in memory and ready to be played. By the end of this post I want to get the code into a state where the main thread lets the user pick instruments from the mod file and play them back on the audio thread.]]></description><guid isPermaLink="false">fee5c201-613a-4b03-832a-369ceb788400</guid><pubDate>Mon,  4 Feb 2019 14:42:00 -0800</pubDate><dc:creator>Jani Peltonen</dc:creator></item><item><title>A detailed guide to writing your first Neovim plugin in Rust</title><link>https://medium.com/@srishanbhattarai/a-detailed-guide-to-writing-your-first-neovim-plugin-in-rust-a81604c606b1</link><description><![CDATA[I recently wrote a plugin in Rust to control the Spotify desktop app for MacOS and find lyrics from within Neovim and found it to be a neat experience overall, and that’s coming from someone who isn’t a Rust expert. This post is a summary of all the research and discovery that happened during that process.]]></description><guid isPermaLink="false">0be32871-6687-4e3d-9cab-5bbb411c9cc0</guid><pubDate>Mon,  4 Feb 2019 09:58:50 +0000</pubDate><dc:creator>Srishan Bhattarai</dc:creator></item><item><title>Rust powered CLI apk decompiler</title><link>https://robertohuertas.com/2019/02/03/rust_cli_apk_decompiler/</link><description><![CDATA[Lately I’ve been needing to reverse engineer some apks and I’ve been manually using some third-party tools to do so. But, how could we speed up the process? A little bit of Rust can be very helpful!]]></description><guid isPermaLink="false">7bbec28c-a388-4372-92d9-4d2082454d67</guid><pubDate>Sun,  3 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Roberto Huertas</dc:creator></item><item><title>Packaging a game for Windows, Mac, and Linux with Rust.</title><link>https://agmprojects.com/blog/packaging-a-game-for-windows-mac-and-linux-with-rust</link><description><![CDATA[Building a cross platform game for desktop operating systems in Rust is fairly doable without needing much platform specific code. Glutin is a Rust alternative to SDL for handling window creation & input. GFX handles most of the graphics API abstraction for you. You still write the shaders, but I was able to just use OpenGL and get it working on Windows 10, MacOS, and Ubuntu.]]></description><guid isPermaLink="false">8a353b9f-bb7e-40d7-a5ab-fd5372ad76f4</guid><pubDate>Sat,  2 Feb 2019 23:53:56 +0000</pubDate><dc:creator>Aaron McLeod</dc:creator></item><item><title>Medic: A Rust CLI that checks the passwords of a KeePass database</title><link>https://sts10.github.io/2019/02/01/medic.html</link><description><![CDATA[After the recent breach, I was curious to check my passwords against the list, but I’m a bit paranoid, so, rather than paste my passwords into the Have I Been Pwned website, I wanted to download the big text file and check my passwords against it offline, nice and safely.

I use a password manager called KeePassXC, so all of my passwords are stored in an encrypted file – a KeePass database – and I use a program called KeePassXC, a free and open-source password manager, to manage them (I wrote a beginner’s user guide to KeePassXC a while back if you’re interested!). So ideally, to check my passwords against the big list, I’d have a tool that checks all the passwords in a given KeePass database against the entire HaveIBeenPwned list of passwords, preferably against the downloaded file (i.e. “offline”), rather than the API. In other words something similar to 1Password’s Watchtower feature, but preferably offline.

After poking around a bit I decided to write it myself in Rust, with this script and this crate as useful references. Medic is a Rust CLI that can perform a variety of “health” checks on a KeePass database.]]></description><guid isPermaLink="false">ba72d3fb-8f1e-4802-a55b-15dd8584046f</guid><pubDate>Fri,  1 Feb 2019 01:15:00 +0000</pubDate><dc:creator>Sam Schlinkert</dc:creator></item><item><title>Mod player in Rust - part 2</title><link>https://www.codeslow.com/2019/01/mod-player-in-rust-part-2.html</link><description><![CDATA[My last article finished with reading the pattern tables from the mode files. In this post I want to finish parsing the entire file so we can move onto playing it. First we need to work out where the pattern data is and how long it is.]]></description><guid isPermaLink="false">c921449d-2331-49fc-b265-9219380330ed</guid><pubDate>Sat, 26 Jan 2019 03:39:00 -0800</pubDate><dc:creator>Jani Peltonen</dc:creator></item><item><title>Using Rust for creating Ubuntu Touch apps</title><link>https://timsueberkrueb.io/posts/2019/01/18/rust-ubuntu-touch-app-dev/</link><description><![CDATA[This post aims to give you a small introduction to using the Rust programming language for writing apps for Ubuntu touch.]]></description><guid isPermaLink="false">daf60963-a30c-4e74-82cb-123d2faac884</guid><pubDate>Sun, 20 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Tim Süberkrüb</dc:creator></item><item><title>Mod player in Rust - part 1</title><link>https://www.codeslow.com/2019/01/mod-player-in-rust-part-1.html</link><description><![CDATA[For my next Rust project I want to try something a bit more challenging than the Sudoku solver. I want to write a mod player in Rust.]]></description><guid isPermaLink="false">ddee0856-44f0-4b27-a925-8c7b39904a35</guid><pubDate>Sat, 19 Jan 2019 12:43:00 -0800</pubDate><dc:creator>Jani Peltonen</dc:creator></item><item><title>A Very Relatable Database: Part 1</title><link>https://natelincoln.com/a-very-relatable-database/part-1/</link><description><![CDATA[I like to find ways to fill up my free time over winter breaks. Since I’m not in school for a month, I usually take the time to do some self-study on a topic I find interesting. This past month, it was building a database. Unfortunately, I had only a casual understanding of how a database actually works under the hood, and no idea how to get started. Additionally, I decided to write the database in Rust, since I knew there would be complicated management of data, and I wanted to avoid headaches involving invalid data. Finally, rust’s static garbage collector meant I wouldn’t have to rely on a runtime to guarantee this.

That was a month ago. While I’m not too far along (mostly due to being busier than expected during the break), I still have things I think are worth sharing.]]></description><guid isPermaLink="false">a4e3cb9f-0d9d-4a47-98cd-2b51d39b7eb6</guid><pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Nate Lincoln</dc:creator></item><item><title>sharkdp/hexyl: A command-line hex viewer</title><link>https://github.com/sharkdp/hexyl</link><description><![CDATA[hexyl is a simple hex viewer for the terminal. It uses a colored output to distinguish different categories of bytes (NULL bytes, printable ASCII characters, ASCII whitespace characters, other ASCII characters and non-ASCII).]]></description><guid isPermaLink="false">4afbd4d0-42ae-460f-8805-22e094fb394b</guid><pubDate>Thu, 10 Jan 2019 00:00:00 +0000</pubDate><dc:creator>David Peter</dc:creator></item><item><title>PyOxidizer: Make distributable Python applications using Rust</title><link>https://github.com/indygreg/pyoxidizer</link><description><![CDATA[PyOxidizer is a collection of Rust crates that facilitate building libraries and binaries containing Python interpreters. PyOxidizer is capable of producing a single file executable - with all dependencies statically linked and all resources (like .pyc files) embedded in the executable.]]></description><guid isPermaLink="false">ea33097d-8f78-4d8d-9f75-bc9305380398</guid><pubDate>Thu,  3 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Gregory Szorc</dc:creator></item><item><title>I made MPD index SoundCloud, here&apos;s how I did it</title><link>https://polyfloyd.net/post/soundcloud-fuse-mpd/</link><description><![CDATA[The usual process of playing something on our music server is a bit cumbersome: I have to browse SoundCloud, download a track that seems interesting, upload it to the music server, let MPD index it, and then play it.

To make my life easier, I wanted to leverage Linux’s FUSE interface to expose the audio on SoundCloud as a bunch of files in a folder which MPD could then index and play from. I could have taken a couple of other approaches such as swapping MPD with Mopidy, an MPD-compatible music player with SoundCloud support, or a scraper that periodically downloads the latest audio from my feed. And while these alternatives were probably easier to implement, I went for the FUSE driver because I thought it was cool.]]></description><guid isPermaLink="false">4a2d72d8-3aa4-4c82-a95f-847f3e0c650d</guid><pubDate>Wed,  2 Jan 2019 00:00:00 +0000</pubDate><dc:creator>polyfloyd</dc:creator></item><item><title>Debugging Rust with VSCode on FreeBSD</title><link>https://venshare.com/debugging-rust-with-vscode-on-freebsd/</link><description><![CDATA[The following is a set of notes for installing VSCode on FreeBSD and getting a debugger up and running in a step by step guide. I thought I would share them in a full post as having a full IDE with syntax and error highlighting along with detailed in-context explanations has been really useful as I get to grips with Rust.]]></description><guid isPermaLink="false">c4069a09-be22-45a1-a39b-3067584379a8</guid><pubDate>Fri, 28 Dec 2018 23:56:37 +0000</pubDate><dc:creator>Anton Whalley</dc:creator></item><item><title>Tools in the 2018 edition</title><link>https://blog.rust-lang.org/2018/12/17/Rust-2018-dev-tools.html</link><description><![CDATA[In this blog post I'll cover Clippy and Rustfmt – two tools that have been around for a few years and are now stable and ready for general use. I'll also cover IDE support – a key workflow for many users which is now much better supported. I'll start by talking about Rustfix, a new tool which was central to our edition migration plans.]]></description><guid isPermaLink="false">629810d5-0f02-4ef1-9826-32cd4bc2f048</guid><pubDate>Mon, 17 Dec 2018 00:00:00 +0000</pubDate><dc:creator>The Dev-tools team</dc:creator></item><item><title>Rust Analyzer in 2018 and 2019</title><link>https://ferrous-systems.com/blog/rust-analyzer-2019/</link><description><![CDATA[Hi! I am Aleksey Kladov (aka @matklad). In the past, I've worked at Jet Brains where I've helped to create the IntelliJ Rust plug-in, and now I am a part of the Ferrous Systems team.

I've spent a significant amount of the last year experimenting with various approaches to make the Rust IDE story better. The culmination of my experiments is the rust-analyzer project – an experimental Rust compiler frontend, targeting the IDE/Language Server Protocol use case.]]></description><guid isPermaLink="false">bf6eb06b-346b-4f0c-a294-ee1dde663418</guid><pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate><dc:creator>Aleksey Kladov</dc:creator></item><item><title>cargo-inspect: A Little Tool for Exploring Rust Internals</title><link>https://matthias-endler.de/2018/cargo-inspect/</link><description><![CDATA[Rust allows for a lot of syntactic sugar, that makes it a pleasure to write. It is sometimes hard, however, to look behind the curtain and see what the compiler is really doing with our code. I wondered if there was a tool, which revealed what Rust was doing behind the curtains.]]></description><guid isPermaLink="false">20ba5c8d-b4f2-4ae5-af75-7631ccc05f12</guid><pubDate>Sat,  1 Dec 2018 00:00:00 +0000</pubDate><dc:creator>Matthias Endler</dc:creator></item><item><title>Build Your Own Shell using Rust</title><link>https://www.joshmcguigan.com/blog/build-your-own-shell-rust/</link><description><![CDATA[This is a tutorial on building your own shell using Rust, in the spirit of the build-your-own-x list. Creating a shell is a great way to understand how the shell, terminal emulator, and OS work together.]]></description><guid isPermaLink="false">5527d11f-6f5e-47f4-b208-c90499764f04</guid><pubDate>Sat, 17 Nov 2018 00:00:00 +0000</pubDate><dc:creator>Josh Mcguigan</dc:creator></item><item><title>Qt applications with Cargo</title><link>https://www.vandenoever.info/blog/2018/10/30/building_qt_apps_with_cargo.html</link><description><![CDATA[This blog shows how Qt applications can be built with Cargo. The goal is to make compiling them as simple as installing Qt and running cargo build.]]></description><guid isPermaLink="false">d8946b80-5782-44b2-80d9-9ac2e18eb5d0</guid><pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Jos van den Oever</dc:creator></item><item><title>korq: Kubernetes Dynamic Log Tailing Utility</title><link>https://vertexclique.github.io/korq/</link><description><![CDATA[K∅RQ is used for tailing pod logs concurrently and following groups at once. It was basically a need to follow logs during deployment and see how instances behave during and after deployment. This is the main motive behind K∅RQ.]]></description><guid isPermaLink="false">fac60173-70f5-4682-a698-716cf05306ce</guid><pubDate>Tue, 23 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Mahmut Bulut</dc:creator></item><item><title>ruplacer: find and replace text in source files</title><link>https://dmerej.info/blog/post/ruplacer/</link><description><![CDATA[Today I’d like to talk about a command-line tool I’ve been working on. It’s called ruplacer and as the name suggest, it’s rually cool and written in Rust. Basically, it finds and replaces text in source files.]]></description><guid isPermaLink="false">2657be5e-f98f-48a7-9e0a-c4ad2c183cba</guid><pubDate>Sun, 14 Oct 2018 12:34:43 +0000</pubDate><dc:creator>Dimitri Merejkowsky</dc:creator></item><item><title>Rust Programming with Dynamsoft Barcode Reader</title><link>https://medium.com/@yushulx/rust-programming-with-dynamsoft-barcode-reader-3d1e83004bba</link><description><![CDATA[A few days ago, I accepted a new challenge of creating a simple command line barcode reader using Rust and Dynamsoft Barcode Reader SDK. Rust is a system programming language similar to C++. The learning process did not go through smoothly as I expected. It is not as easy as learning other high-level programming languages such as Java and Python. In this article, I share my experience of learning and using Rust.]]></description><guid isPermaLink="false">cb2bfe24-75a2-43d6-bebc-b8f8ac610c95</guid><pubDate>Thu, 11 Oct 2018 00:26:20 +0000</pubDate><dc:creator>Xiao Ling</dc:creator></item><item><title>imag: Call for Participation (1)</title><link>https://imag-pim.org/blog/2018/10/10/call-for-participation-1/</link><description><![CDATA[This is the first call for participation for the imag project. I have no experience writing such calls for participation, so please bear with me!

Right now, the imag ecosystem has some tools available which are already usable and in rather good shape. There is a contact manager, a diary and a notes tool, a habit tracker and a time tracker are there as well, though those are not extensively tested by now.]]></description><guid isPermaLink="false">2b068be3-88b7-4d60-ad38-cfd40019cf5f</guid><pubDate>Wed, 10 Oct 2018 08:42:06 +0000</pubDate><dc:creator>imag</dc:creator></item><item><title>Remacs continues to improve</title><link>http://db48x.net/rust-remacs-2018/</link><description><![CDATA[As you doubtless know, Emacs has an embedded Lisp environment that provides a large number of intersting Lisp functions that the user can call. Many of these are implemented in C for speed, and we've been rewriting them in Rust. So far we've ported 394 individual Lisp functions from C to Rust, of which 207 were ported in this last year. This is about a third of the total, as you can see by this graph. We've actually completely ported several whole C files now.]]></description><guid isPermaLink="false">49cace2a-ebaf-4aec-b41b-8fb7aa67acc8</guid><pubDate>Tue,  9 Oct 2018 12:35:00 +0000</pubDate><dc:creator>db48x</dc:creator></item><item><title>Running Little Rust Snippets with Runner</title><link>https://stevedonovan.github.io/rustifications/2018/09/23/runner.html</link><description><![CDATA[runner is mostly a clever wrapper around normal Cargo operations. runner acts like an interpreter. There is no forced directory structure, just source. But it’s just using rustc under the hood in the most direct way possible.]]></description><guid isPermaLink="false">0a206ee6-7e54-4570-9f0c-8040fb9cd530</guid><pubDate>Sun, 23 Sep 2018 00:00:00 +0200</pubDate><dc:creator>Steve Donovan</dc:creator></item><item><title>Hegemon: A modular system monitor written in Rust</title><link>https://github.com/p-e-w/hegemon</link><description><![CDATA[Hegemon is a work-in-progress modular system monitor written in safe Rust. Currently, it has the following features: Monitor CPU and memory usage, temperatures, and fan speeds; expand any data stream to reveal a more detailed graph and additional information, adjustable update interval.]]></description><guid isPermaLink="false">5a387bd6-85b7-439d-97d4-fdb76fec80c5</guid><pubDate>Sat, 22 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Philipp Emanuel Weidmann</dc:creator></item><item><title>Alacritty now supports scrollback</title><link>https://jwilm.io/blog/alacritty-lands-scrollback/</link><description><![CDATA[Alacritty, the OpenGL terminal emulator written in Rust, now supports scrollback! Performance has improved, and we've got benchmarks to share.]]></description><guid isPermaLink="false">4f00ccb1-9966-4c6d-83e9-0e8032ff68a4</guid><pubDate>Sun, 16 Sep 2018 17:00:00 -0700</pubDate><dc:creator>Joe Wilm</dc:creator></item><item><title>A Sudoku Solver &amp; Generator 🔢</title><link>https://blog.ryanlevick.com/posts/sudoku-solver-generator/</link><description><![CDATA[For a small side project I’m working on, I’m using a Sudoku puzzle solver and puzzle generator that I’ve written in Rust. The experience was fun, so I thought I’d write up a little bit about the algorithm I’ve used and some interesting stats about how it performs.]]></description><guid isPermaLink="false">e3bb7297-9e70-4070-a2aa-8bb8f9a5eaf2</guid><pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Ryan Levick</dc:creator></item><item><title>Browsing your mail with Rust and Qt</title><link>https://www.vandenoever.info/blog/2018/09/16/browsing_your_mail_with_rust_and_qt.html</link><description><![CDATA[Let’s write a mail viewer with Rust and Qt. This is another blog about Rust Qt Binding Generator, the project that lets you add a Qt GUI to your Rust code, or if you will, add Rust to your Qt program.]]></description><guid isPermaLink="false">790afaff-5784-4b34-82eb-38a05a05a0ec</guid><pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Jos van den Oever</dc:creator></item><item><title>TOTP generator with account handling for multiple tokens</title><link>https://skarlso.github.io/2018/09/13/gotp/</link><description><![CDATA[ a totp generator I wrote a while ago in C++ but now it’s in rust. It can generate a token and save it into an account file that is AES encrypted. The password is never saved, so it’s secure enough to use it. One of it’s properties it will have over the c++ implementation is it’s safe, it uses a proper IV and once I’m done, it will also support encryption via PGP.]]></description><guid isPermaLink="false">c75159c1-4e8c-4b09-9371-430cc5971b94</guid><pubDate>Thu, 13 Sep 2018 08:01:00 +0100</pubDate><dc:creator>Gergely Brautigam</dc:creator></item><item><title>Rust at Datalust</title><link>https://blog.getseq.net/rust-at-datalust/</link><description><![CDATA[At Datalust we build a log server called Seq. It's really a database, written in C#, with its own SQL-based query language, that's specifically designed for storing and querying structured log data. In the past, Seq has managed log event storage through ESENT, which is a storage technology baked into Windows. For our cross-platform Seq 5 release we’ve built a storage engine called Flare in the Rust programming language to replace our usage of ESENT.]]></description><guid isPermaLink="false">a92cab79-16fc-46b9-9bdb-0eb21518db8c</guid><pubDate>Mon,  3 Sep 2018 22:18:30 +0000</pubDate><dc:creator>Ashley Mannix</dc:creator></item><item><title>Password Generation in Ruby and Rust</title><link>https://hur.st/blog/2018/08-25-password-generation-in-ruby-and-rust/</link><description><![CDATA[Writing the same password generator in two different languages to learn more Rust.]]></description><guid isPermaLink="false">8b60e040-4635-4a84-b8a6-3e0f2933f066</guid><pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Thomas Hurst</dc:creator></item><item><title>IntelliJ Rust features. Entry one: Macros</title><link>https://blog.jetbrains.com/clion/2018/08/intellij-rust-features-entry-one-macros/</link><description><![CDATA[In this series of short blog posts, we are going to take a closer look at the key Rust related features present in JetBrains IDEs through our corresponding plugin.]]></description><guid isPermaLink="false">e2e12b4d-817f-4c1b-997f-285d9eec6a74</guid><pubDate>Fri, 24 Aug 2018 16:11:11 +0000</pubDate><dc:creator>Kirill Malich</dc:creator></item><item><title>C2rust - A bridge to C</title><link>https://galois.com/blog/2018/08/c2rust/</link><description><![CDATA[The c2rust project exists to help bridge the fact that there is a lot of valuable software written in C and that there have been great strides in making safer and more-reliable programming languages since C was designed. Rust offers many modern improvements for C while still preserving the low-level control that makes it attractive. Beyond that, Rust provides new abstraction capabilities like parametricity, type-traits, methods, a module system, thread-safety, and more.]]></description><guid isPermaLink="false">4f79a6a7-0d44-44ce-b82c-c4376e073660</guid><pubDate>Tue, 14 Aug 2018 18:16:29 +0000</pubDate><dc:creator>Eric Mertens</dc:creator></item><item><title>Incremental Parsing in Amp</title><link>https://medium.com/@jordan_98525/incremental-parsing-in-amp-ba5e8c3e85dc</link><description><![CDATA[With the latest release of Amp (text editor), syntax highlighting has been overhauled. This post dives into the performance-related redesign that has landed with v0.5.]]></description><guid isPermaLink="false">df22bc28-0b6f-4d1a-960a-9e29ca258b53</guid><pubDate>Tue, 14 Aug 2018 16:13:52 +0000</pubDate><dc:creator>Jordan MacDonald</dc:creator></item><item><title>Journey into Gentoo eclass</title><link>https://gibix.github.io/gsoc/2018/08/11/journey-into-gentoo-eclass.html</link><description><![CDATA[I spent some days writing a portage eclass for Gentoo. I want to share my experience.]]></description><guid isPermaLink="false">fdc8eef0-1b02-41f7-8340-faf4660db183</guid><pubDate>Sat, 11 Aug 2018 00:00:00 +0000</pubDate><dc:creator>gibix</dc:creator></item><item><title>Kickstart - a fast and simple project template bootstrapper</title><link>https://blog.artemix.org/article/show/kickstart</link><description><![CDATA[Ever had some code base that you regularly use to start a new project? Until now, you've probably lost some time refactoring everything to fill out the right project name, title etc. A few tools already exist but either you're lost in feature bloating hell or you're fighting to configure everything in most cases. The following tool is an early-developement, rust-based, template tool made to be more versatile that its closest python counter-part, cookiecutter.]]></description><guid isPermaLink="false">1d84906a-4085-4d87-8f43-786f1d531f44</guid><pubDate>Wed,  8 Aug 2018 23:02:19 +0000</pubDate><dc:creator>Artemis</dc:creator></item></channel></rss>