{
  "version": "https://jsonfeed.org/version/1",
  "title": "Read Rust - Performance",
  "home_page_url": "https://readrust.net/",
  "feed_url": "https://readrust.net/performance/feed.json",
  "description": "Performance posts on Read Rust",
  "author": {
    "name": "Wesley Moore",
    "url": "http://www.wezm.net/"
  },
  "items": [
    {
      "id": "59f60adc-9c66-4f8b-9a3a-6ffdcedb14c6",
      "title": "Rust Big Data Benchmarks",
      "content_text": "I have been running benchmarks of aggregate queries against the NYC taxi data set, using Apache Spark (JVM-based) as the baseline, since it is currently a popular tool for distributed compute, and a tool I am familiar with.",
      "url": "https://andygrove.io/rust_bigdata_benchmarks/",
      "date_published": "2019-10-20T00:00:00+00:00",
      "author": {
        "name": "Andy Grove",
        "url": "https://andygrove.io/blog"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "5babdb55-5061-4e26-b05e-a7c407d03c80",
      "title": "Where rustc spends its time",
      "content_text": "So a couple weeks ago I was a little stung by the quote from This Week In Rust: “Rust compilation is so slow that I can fix the bugs while it still compiles the crates”. On the one hand, I have unfond memories of waiting for a Typescript project to compile, pack (aka link), minify (aka optimize), and so on, over and over, on every change. At least if it had been Rust I’d have been able to fix the bugs while it was doing this. On the other hand, it’s also mostly true: compiling Rust is heckin’ slow. So I’ve decided to dust off a backburner project for a while, and figure out just where rustc spends most of its time.",
      "url": "https://wiki.alopex.li/WhereRustcSpendsItsTime",
      "date_published": "2019-10-23T00:00:00+11:00",
      "author": {
        "name": "Simon Heath",
        "url": "https://wiki.alopex.li/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "97ca4165-4f8c-4c57-872d-e5986df0c7ee",
      "title": "Making the Tokio scheduler 10x faster",
      "content_text": "We’ve been hard at work on the next major revision of Tokio, Rust’s asynchronous runtime. Today, a complete rewrite of the scheduler has been submitted as a pull request. The result is huge performance and latency improvements. Some benchmarks saw a 10x speed up! It is always unclear how much these kinds of improvements impact “full stack” use cases, so we’ve also tested how these scheduler improvements impacted use cases like Hyper and Tonic (spoiler: it’s really good).",
      "url": "https://tokio.rs/blog/2019-10-scheduler/",
      "date_published": "2019-10-13T00:00:00+00:00",
      "author": {
        "name": "Carl Lerche",
        "url": "https://tokio.rs/"
      },
      "tags": [
        "Performance",
        "Crates"
      ]
    },
    {
      "id": "67d3364b-64e1-4c9e-bf5c-93ed324c8f4a",
      "title": "How to speed up the Rust compiler some more in 2019",
      "content_text": "In July I wrote about my efforts to speed up the Rust compiler in 2019. I also described how the Rust compiler has gotten faster in 2019, with compile time reductions of 20-50% on most benchmarks. Now that Q3 is finished it’s a good time to see how things have changed since then.",
      "url": "https://blog.mozilla.org/nnethercote/2019/10/11/how-to-speed-up-the-rust-compiler-some-more-in-2019/",
      "date_published": "2019-10-10T23:01:52+00:00",
      "author": {
        "name": "Nicholas Nethercote",
        "url": "https://blog.mozilla.org/nnethercote/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "9058ab44-792b-4652-a06a-db4ada3e0ff5",
      "title": "Dev Time Optimization -- Part 1 (1.9x speedup, 65% less disk usage)",
      "content_text": "Summary In a 45k LOC / 102-crate workspace, moving tests from member crates into a single workspace_tests crate achieved the following improvements:\n\nBuild and test duration in release mode reduced from 23 minutes to 13 minutes . Debug artifact disk usage reduced from 20 G to 7 G (65% reduction, fresh build), or 230 G to 50 G (78% reduction, ongoing development)  Background The rate of software development is affected by many limits.",
      "url": "https://azriel.im/will/2019/10/08/dev-time-optimization-part-1-1.9x-speedup-65-less-disk-usage/",
      "date_published": "2019-10-08T13:10:38+13:00",
      "author": {
        "name": "Azriel Hoh",
        "url": "https://azriel.im/will"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "87600fb3-40d3-403e-87b7-25a3a2eacdcf",
      "title": "Binary Format Shootout",
      "content_text": "Cap'n Proto vs. Flatbuffers vs. Simple Binary Encoding",
      "url": "https://speice.io/2019/09/binary-format-shootout.html",
      "date_published": "2019-09-28T00:00:00+00:00",
      "author": {
        "name": "Bradlee Speice",
        "url": "https://speice.io/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "d7a12b5f-ab52-4e4b-b752-7d857e9f86bf",
      "title": "Of bitpacking, with or without SSE3",
      "content_text": "This blog post might interest three type of readers: people interested in tantivy: You’ll learn how tantivy uses SIMD instructions to decode posting lists, and what happens on platform where the relevant instruction set is not available.  rustaceans who would like to hear a good SIMD in rust story. lucene core devs (yeah it is a very select club) who might be interested in a possible (unconfirmed) optimization opportunity.",
      "url": "https://fulmicoton.com/posts/bitpacking/",
      "date_published": "2019-09-20T00:00:00+00:00",
      "author": {
        "name": "Paul Masurel",
        "url": "https://fulmicoton.com/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "a8b46d95-5e16-4348-abfe-b54bc46da590",
      "title": "Improvement to the compile time of a crate",
      "content_text": "For one of my projects, I need to use LLVM so I tried this cool inkwell crate that provides a mostly safe wrapper over LLVM. To my dismay, though, compiling this crate takes… a lot of time: Debug build: 1m 05s Release build: 3m 34s. By the way, I write this article for the sole purpose of trying to fix some problems there is in the crate ecosystem and by no mean I want to incriminate the author of this crate (or any other). I’ve been guilty of doing the same mistakes, but I learned from them and want other people to learn from them as well.",
      "url": "http://antoyo.ml/compilation-time-dependencies",
      "date_published": "2019-09-07T00:00:00+00:00",
      "author": {
        "name": "Antoni Boucher",
        "url": "http://antoyo.ml/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "7304ebe7-ee28-48a9-b88c-dd03e2605a10",
      "title": "How Rust optimizes async/await II: Program analysis",
      "content_text": "In Part 1, we covered how async fns in Rust are compiled to state machines. We saw that the internal compiler implementation uses generators and the yield statement to facilitate this transformation. In this post, we'll go over some subtleties that the compiler implementation must consider when optimizing generators. We'll look at two different kinds of analysis, liveness analysis and storage conflict detection.",
      "url": "https://tmandry.gitlab.io/blog/posts/optimizing-await-2/",
      "date_published": "2019-09-02T00:00:00+00:00",
      "author": {
        "name": "Tyler Mandry",
        "url": "https://tmandry.gitlab.io/blog/"
      },
      "tags": [
        "Performance",
        "Language"
      ]
    },
    {
      "id": "b577a6bb-429a-454b-8d2b-77175dba68c8",
      "title": "Building with async/await in Rust",
      "content_text": "As you might have heard, async/await is coming to Rust soon. This is a big deal. Rust has already has popular crates (tokio, actix) that provide asynchronous concurrency, but the async syntax coming to stable in 1.39 is much, much more approachable. My experience has been that you can produce and reason about application flow much more easily, which has made me significantly more productive when dealing with highly concurrent systems. To kick the tires of this new syntax I dug into the nightly branch, and built a high-performance TCP client called clobber. In this post I'll talk about why I think async/await in Rust is a big deal, and walk you some of the code in clobber.",
      "url": "https://ragona.com/posts/clobber_async_await",
      "date_published": "2019-08-21T00:00:00+00:00",
      "author": {
        "name": "Ryan Ragona",
        "url": "https://ragona.com/"
      },
      "tags": [
        "Web and Network Services",
        "Performance"
      ]
    },
    {
      "id": "c0401410-c335-43a2-a9f3-342909efdb3f",
      "title": "How Rust optimizes async/await: Part 1",
      "content_text": "The issue to stabilize an initial version of async/await in Rust has left final comment period. The feature looks slated to stabilize in an upcoming release, most likely 1.39. One of the blockers mentioned in the RFC is the size of the state machines emitted by async fn. I’ve spent the last few months tackling this problem, and wanted to give people a window into the process of writing these optimizations, with all the intricacies involved.",
      "url": "https://tmandry.gitlab.io/blog/posts/optimizing-await-1/",
      "date_published": "2019-08-18T00:00:00+00:00",
      "author": {
        "name": "Tyler Mandry",
        "url": "https://tmandry.gitlab.io/blog/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "13003d78-0993-49fe-ae7e-0b0263a77353",
      "title": "C vs Rust vs Go: performance analysis",
      "content_text": "In one of my previous jobs I got a task: “For given image find popular colors in that image, so users can browse images by it’s colors”. This is where three languages comes to play. I have implemented histogram algorithm in C, Rust and Go.",
      "url": "https://medium.com/@marek.michalik/c-vs-rust-vs-go-performance-analysis-945ab749056c",
      "date_published": "2019-07-18T20:54:01.576+00:00",
      "author": {
        "name": "Marek Michalik",
        "url": "https://medium.com/@marek.michalik"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "fb9caad4-9aa0-4996-92d6-93fd75509dcf",
      "title": "CPU atomics and orderings explained",
      "content_text": "Sometimes the question comes up about how CPU memory orderings work, and what they do. I hope this post explains it in a really accessible way.",
      "url": "https://fy.blackhats.net.au/blog/html/2019/07/16/cpu_atomics_and_orderings_explained.html",
      "date_published": "2019-07-16T00:00:00+00:00",
      "author": {
        "name": "Firstyear",
        "url": "https://fy.blackhats.net.au/blog/html/index.html"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "5f582def-af9d-44cb-9a18-648bff14bd67",
      "title": "Introducing glam and mathbench",
      "content_text": "glam is a simple and fast Rust linear algebra library for games and graphics. mathbench is a set of unit tests and benchmarks comparing the performance of glam with the popular Rust linear algebra libraries cgmath and nalgebra. The following is a table of benchmarks produced by mathbench comparing glam performance to cgmath and nalgebra on f32 data.",
      "url": "http://bitshifter.github.io/2019/07/10/introducing-glam-and-mathbench/",
      "date_published": "2019-07-10T00:00:00+00:00",
      "author": {
        "name": "Cameron Hart",
        "url": "https://bitshifter.github.io/"
      },
      "tags": [
        "Performance",
        "Crates"
      ]
    },
    {
      "id": "771ffeb1-3f31-43b3-9f4b-17b114e326c2",
      "title": "The Rust compiler is still getting faster",
      "content_text": "I previously wrote about one period of improvement in Rust compiler speed. How are things going in 2019?",
      "url": "https://blog.mozilla.org/nnethercote/2019/07/25/the-rust-compiler-is-still-getting-faster/",
      "date_published": "2019-07-25T03:56:24+00:00",
      "author": {
        "name": "Nicholas Nethercote",
        "url": "https://blog.mozilla.org/nnethercote/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "44e12e0f-4572-479e-a63c-c4539b2c9ae8",
      "title": "cedarwood: Efficiently-Updatable Double Array Trie in Rust",
      "content_text": "Cedarwood is an effort to speed up jieba-rs, an efficient implementation of trie is needed in order to satisfying the following needs.",
      "url": "https://blog.paulme.ng/posts/2019-07-14-cedarwood:-efficiently-updatable-double-array-trie-in-rust.html",
      "date_published": "2019-07-14T00:00:00+00:00",
      "author": {
        "name": "Paul Meng",
        "url": "https://blog.paulme.ng/"
      },
      "tags": [
        "Computer Science",
        "Performance"
      ]
    },
    {
      "id": "688a7c2c-4cb7-4da6-a9d5-3cf4d5f7571a",
      "title": "How to speed up the Rust compiler in 2019",
      "content_text": "I have written previously about my efforts to speed up the Rust compiler in 2016 (part 1, part 2) and 2018 (part 1, part 2, NLL edition). It’s time for an update on the first half of 2019.",
      "url": "https://blog.mozilla.org/nnethercote/2019/07/17/how-to-speed-up-the-rust-compiler-in-2019/",
      "date_published": "2019-07-17T02:54:57+00:00",
      "author": {
        "name": "Nicholas Nethercote",
        "url": "https://blog.mozilla.org/nnethercote/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "07e226de-482b-4f51-af76-adb65b4a35dc",
      "title": "The Computer Language Benachmarks Game: Rust ranks #1 for n-body",
      "content_text": "The Computer Language Benchmarks Game is a free software project for comparing how a given subset of simple algorithms can be implemented in various popular programming languages. I converted the fastest (dating early 2019) n-body C-implementation (#4) to Rust (#7) in a one-to-one fashion, gaining a performance encreasement by factor 1.6 to my own surprise.",
      "url": "https://frehberg.com/2019/07/the-computer-language-benachmarks-game-rust-ranks-1-for-n-body/",
      "date_published": "2019-07-09T16:53:57+00:00",
      "author": {
        "name": "Frank Rehberger",
        "url": "https://frehberg.com/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "ead392a4-baff-4c08-9820-8fd74ef14200",
      "title": "TLS performance: rustls versus OpenSSL",
      "content_text": "There are quite a few dimensions to how performance can vary between TLS libraries such as handshake performance and bulk performance. This series of blog posts measures and compares the performance of rustls (a TLS library in rust) and OpenSSL.",
      "url": "https://jbp.io/2019/07/01/rustls-vs-openssl-performance.html",
      "date_published": "2019-07-01T00:00:00+00:00",
      "author": {
        "name": "Joseph Birr-Pixton",
        "url": "https://jbp.io/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "6e2a2811-942b-4e62-b173-6d2b0d3e0acd",
      "title": "Writing a small ray tracer in Rust and Zig",
      "content_text": "The two languages that I spent most of my time daydreaming about writing code in are Rust and Zig. Would the lack of features in Zig make me more or less productive than with Rust’s feature overload? Which language is more enjoyable to use for writing a small, self-contained computer graphics project?  To find out, I decided to implement the same simple project in both languages: a small ray tracer, following the book Ray Tracing in One Weekend.",
      "url": "https://nelari.us/post/raytracer_with_rust_and_zig/",
      "date_published": "2019-06-27T20:00:00+02:00",
      "author": {
        "name": "Johann Muszynski",
        "url": "https://nelari.us/"
      },
      "tags": [
        "Language",
        "Performance"
      ]
    },
    {
      "id": "a7b2c09d-06ca-4ae2-89c2-70bf78282396",
      "title": "One Program Written in Python, Go, and Rust",
      "content_text": "This is a subjective, primarily developer-ergonomics-based comparison of the three languages from the perspective of a Python developer, but you can skip the prose and go to the code samples, the performance comparison if you want some hard numbers, the takeaway for the tl;dr, or the Python, Go, and Rust diffimg implementations.",
      "url": "http://www.nicolas-hahn.com/python/go/rust/programming/2019/07/01/program-in-python-go-rust/",
      "date_published": "2019-07-01T00:00:00+00:00",
      "author": {
        "name": "Nicolas Hahn",
        "url": "http://www.nicolas-hahn.com/"
      },
      "tags": [
        "Language",
        "Performance"
      ]
    },
    {
      "id": "9618e311-ec84-431c-97ab-c9f010c3c65c",
      "title": "Optimizing jieba-rs to be 33% faster than cppjieba",
      "content_text": "This blog post is mainly to share my experience on taking an emerging programming language’s ecosystem seriously and evaluating it by working on a serious project, and see how far we can go in terms of performance and development experience. The project I chose as mentioned in the title is jieba-rs, the rust implementation of a popular Chinese word segmentation library: Jieba.",
      "url": "https://blog.paulme.ng/posts/2019-06-30-optimizing-jieba-rs-to-be-33percents-faster-than-cppjieba.html",
      "date_published": "2019-06-30T00:00:00+00:00",
      "author": {
        "name": "Paul Meng",
        "url": "https://blog.paulme.ng/archive.html"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "876033ef-0f64-4108-89c6-8ce8d6536ac7",
      "title": "RESS (Rusty EcmaScript Scanner) 0.7.0 bring large performance improvements",
      "content_text": "A blog about learning computer science concepts with practical projects",
      "url": "https://wiredforge.com/blog/ress-7/",
      "date_published": "2019-06-26T00:00:00+00:00",
      "author": {
        "name": "Robert Masen",
        "url": "https://wiredforge.com/"
      },
      "tags": [
        "Crates",
        "Performance"
      ]
    },
    {
      "id": "b26fcca3-2a79-4340-88fd-80c6f70c95d1",
      "title": "On Memoization in Rust",
      "content_text": "A detailed walk through how to memoize function calls in Rust.",
      "url": "https://medium.com/swlh/on-memoization-291fd1dd924",
      "date_published": "2019-06-17T12:30:14.793+00:00",
      "author": {
        "name": "Andrew Pritchard",
        "url": "https://medium.com/@andrewjpritchard"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "1898399d-d60a-46fc-a3e0-cb8a73fb546e",
      "title": "The smooth resize test",
      "content_text": "Today is an exciting point in the evolution of native GUI in Rust. There is much exploration, and a number of promising projects, but I also think we don’t yet know the recipe to make GUI truly great. As I develop my own vision in this space, druid, I hope more that the efforts will learn from each other and that an excellent synthesis will emerge, more so than simply hoping that druid will win.\n\nIn my work, I have come across a problem that is as seemingly simple, yet as difficult to get right, as making decent tea: handling smooth window resizing. Very few GUI toolkits get it perfect, with some failing spectacularly. This is true across platforms, though Windows poses special challenges. It’s also pretty easy to test (as opposed to requiring sophisticated latency measurements, which I also plan to develop). I suggest it become one of the basic tests to evaluate a GUI toolkit.",
      "url": "https://raphlinus.github.io/rust/gui/2019/06/21/smooth-resize-test.html",
      "date_published": "2019-06-21T19:50:42+00:00",
      "author": {
        "name": "Raph Levien",
        "url": "https://raphlinus.github.io/"
      },
      "tags": [
        "Games and Graphics",
        "Performance"
      ]
    },
    {
      "id": "e3be782c-4057-4e64-9c1a-0ff81761d5d7",
      "title": "Speed Up Your JavaScript With Rust",
      "content_text": "For a recent personal project, I had only needed a fairly simple node.js server to do exponential and costly computing tasks. To be honest, I could have switched the entire tech stack, but I estimated that the development time of such a choice wasn’t worth it… Still, I had some functions taking ages to compute. So I had a look around, and decided to let that task be handled by a more appropriate language, in this case Rust.",
      "url": "https://medium.com/paloit/speed-up-your-javascript-with-rust-7661922562fa",
      "date_published": "2019-06-06T01:54:49.483+00:00",
      "author": {
        "name": "Johan Paasche",
        "url": "https://medium.com/@Rainbow.Dash"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "d937feae-59ca-4312-bd40-dc77317e441a",
      "title": "Rust for Machine Learning: SIMD, BLAS, and Lapack",
      "content_text": "I love Rust. But, as a data scientist, it’s still hard to use Rust on a daily basis. 90% of my programming these days is in Python.\n\nMy interest in Rust-based machine learning sparked several months ago. But, the key limitation I found was the lack of an ergonomic linear algebra library. There’s nalgebra and ndarray and a few others. Yet, I found none of them at the time ergonomic to work with, nor fast in comparison to writing the lower-level SIMD, BLAS, and Lapack code (I have picked up ndarray more in recent weeks and months).\n\nWhile inconvenient, a few months later, I’m glad I had to take things a step further. Rust is great for writing performant code. The resources for writing quite low-level mathematics operations in Rust are quite good. Using blas-src and lapack-src, as well as Rust’s built in SIMD functions, we can write fast and surprisingly portable Rust code. You can even run Rust on the GPU using, at least, the same underlying code.",
      "url": "https://www.erikpartridge.com/2019-03/rust-ml-simd-blas-lapack",
      "date_published": "2019-03-16T00:00:00+00:00",
      "author": {
        "name": "Erik Partridge",
        "url": "https://www.erikpartridge.com/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "63fcd49a-f8d8-46f4-92dd-58cb8d77082c",
      "title": "Speeding up Ruby MRI with Rust",
      "content_text": "Let me start by saying I really like Ruby. I tend to agree with the statement saying Ruby is optimized for developer happiness. However, nothing comes for free. Programming ecstasy is a double-edged sword and writing slow Ruby is as easy as it is pleasant.",
      "url": "https://medium.com/@flixdescteaux/speeding-up-ruby-mri-with-rust-a7c914d2f9d0",
      "date_published": "2019-05-21T13:58:31.362+00:00",
      "author": {
        "name": "Félix Descôteaux",
        "url": "https://medium.com/@flixdescteaux"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "568fdc54-427f-47be-8849-dd040bafe8dd",
      "title": "Momo · Get Back Some Compile Time From Monomorphization",
      "content_text": "Monomorphization has one problem (apart from being a ridiculous word that I’ll probably spell wrong every time): It generates rather a lot of code, bloating binary size and potentially pessimizing execution cache usage. Often, generics aren’t really needed for speed, but for ergonomics: Library code might want to present an easy-to-use generic interface that will automate some conversions. However, this often means that almost each user gets their own version of the code, leading to the aforementioned bloat (case in point: Earlier clap versions were notorious for adding hundreds of kilobytes to the binary size – for a simple command line parser).",
      "url": "https://llogiq.github.io/2019/05/18/momo.html",
      "date_published": "2019-05-18T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "2d643e8c-a753-49c4-b18a-3323bb783259",
      "title": "Using Rust to Scale Elixir for 11 Million Concurrent Discord Users",
      "content_text": "Over the last year, the Backend Infrastructure team at Discord was hard at work improving the scalability and performance of our core real-time communications infrastructure. One big project we undertook was changing how we update the Member List.",
      "url": "https://blog.discordapp.com/using-rust-to-scale-elixir-for-11-million-concurrent-users-c6f19fc029d3",
      "date_published": "2019-05-17T15:42:16.633+00:00",
      "author": {
        "name": "Matt Nowack",
        "url": "https://blog.discordapp.com/@discord.matt"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "7d2c4d88-ce3c-4794-8093-80d1dd15395c",
      "title": "Racing sed with Rust",
      "content_text": "As part of a project I’m working on, I sometimes find myself having to deal with quite large X12 files. What I’d really like is a small, self-contained tool that I can pass an X12 file to and rely on it to Do The Right Thing™ without any unnecessary incantations. Since I’m dealing with large source files it would also be nice if it was at least as fast as standard tools like sed. Sounds like a job for…",
      "url": "https://www.lambdafunctions.com/articles/racing-sed-with-rust",
      "date_published": "2019-05-07T00:00:00+00:00",
      "author": {
        "name": "Mike Clarke",
        "url": "https://www.lambdafunctions.com/articles"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "5cea79c2-18d1-470d-b0a4-8647f0e2e5ca",
      "title": "Rust concurrency patterns: Communicate by sharing your sender(re-visited)",
      "content_text": "Since I last wrote about this topic, just only about a year ago select as used in the standard-library channel, has been deprecated. So it’s a good time to re-visit some of the concepts in that article, this time in the context of using crossbeam channels, and instead of using a made-up example, let’s dig into some real “production” code, as found in Servo. Let’s continue our exploration of Rust concurrency…",
      "url": "https://medium.com/@polyglot_factotum/rust-concurrency-patterns-communicate-by-sharing-your-sender-re-visited-9d42e6dfecfa",
      "date_published": "2019-05-05T06:18:08.433+00:00",
      "author": {
        "name": "Gregory Terzian",
        "url": "https://medium.com/@polyglot_factotum"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "329ef1a1-d5e3-49df-87e6-b4f40038d4d8",
      "title": "Rust parallelism for non-C/C++ developers",
      "content_text": "Majority of the people coming to Rust have C/C++ background which allows them to easily transition into Rust parallelism since it is so similar. However, for many people coming from other languages, it is a challenge. In this post, we will walk through the standard Rust parallelism tools as well as the motivation behind them. This will require a hardware deep dive at the beginning, followed by an explanation of the low-level tools, like atomics, and ending with an explanation of high-level tools like Mutex. Finally, we will explain how Rust guarantees safety in multi-threaded applications.",
      "url": "https://medium.com/nearprotocol/rust-parallelism-for-non-c-c-developers-ec23f48b7e56",
      "date_published": "2019-05-02T21:32:53.684+00:00",
      "author": {
        "name": "Maksym Zavershynskyi",
        "url": "https://medium.com/@zaver.max"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "e25d035f-9121-4cd6-b0ac-f98db53fb3e5",
      "title": "DataFusion 0.13.0 Benchmarks",
      "content_text": "Over the past couple weeks I’ve been working on a couple different efforts around parallel query execution with DataFusion: 1. Benchmarking parallel query execution by manually creating one execution context per parquet partition and running on a thread, just to get an idea of expected performance, and comparing results to Apache Spark (running in local mode). 2. Creating a PoC of actual parallel query execution in the Arrow/DataFusion repository. This post is mostly about the first effort.",
      "url": "https://andygrove.io/2019/04/datafusion-0.13.0-benchmarks/",
      "date_published": "2019-04-28T00:00:00+00:00",
      "author": {
        "name": "Andy Grove",
        "url": "https://andygrove.io/blog"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "5af2fc94-f73d-498a-99b8-15400fad948e",
      "title": "Arenas vs. Indices",
      "content_text": "When optimizing code, one thing I’m always looking for is memory layout and access patterns. One such pattern is an arena: Reserve some sufficiently large space to put your objects in, then allocate by incrementing a pointer. If your objects are of a uniform type, you can basically simplify this to a Vec of that type.",
      "url": "https://llogiq.github.io/2019/04/06/arena.html",
      "date_published": "2019-04-06T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "eb668d47-71e6-4379-a39c-3abeadd136b3",
      "title": "RaptorQ (RFC6330) and performance optimization in Rust",
      "content_text": "I recently decided to learn more about Rust, and wrote a high performance RaptorQ (RFC6330) library. RaptorQ is a fountain code, and the core of the algorithm is a lot of matrix math over GF(256) – which translates into lots of XORs and reads from lookup tables. After getting the initial implementation working, I set about optimizing it. Below is a journal of the steps I took to profile and optimize the implementation.",
      "url": "https://www.cberner.com/2019/03/30/raptorq-rfc6330-rust-optimization/",
      "date_published": "2019-03-30T02:11:47+00:00",
      "author": {
        "name": "Christopher Berner",
        "url": "https://www.cberner.com/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "b6fc1bbd-26d3-4334-86cc-3485ec7f4dc4",
      "title": "Guidelines on Benchmarking and Rust",
      "content_text": "This post covers: Benchmark reports for contributors, Benchmark reports for users, Profiling with valgrind / kcachegrind, Reproducible benchmarks and graphics, and Tips for benchmark behavior and benchmarking other languages.",
      "url": "https://nbsoftsolutions.com/blog/guidelines-on-benchmarking-and-rust",
      "date_published": "2019-01-27T00:00:00+00:00",
      "author": {
        "name": "Nick Babcock",
        "url": "https://nbsoftsolutions.com/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "1f1562d2-b784-4bda-84d4-a0dc68178793",
      "title": "Helix: Improve the Performance of Rails with Rust",
      "content_text": "With Rust, you can do low-level number-crunching and bit-by-bit processing, while enjoying memory safety and concurrency features. With Helix, you can use your Rust code inside of a Rails project.",
      "url": "https://headway.io/blog/helix-improve-the-performance-of-rails-with-rust/",
      "date_published": "2019-03-22T00:00:00+00:00",
      "author": {
        "name": "Raphael Spencer",
        "url": "https://headway.io/about/raphael-spencer"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "38a15a60-b3e5-49c5-9036-3af3d6bc43ff",
      "title": "Why Hashbrown Does A Double-Lookup",
      "content_text": "I recently finished a detailed review of hashbrown, which will likely become the new implementation for rust's std::collections::HashMap. One of the most surprising things I found was in the implementation of insert. It was doing something that was so offensive to people who care about collection performance that we had designed an entire API to help people avoid it: it did two lookups in the map. However, after some more discussion and review, I concluded that this implementation was reasonable. This post will try to cover why that is.",
      "url": "https://gankro.github.io/blah/hashbrown-insert/",
      "date_published": "2019-03-20T00:00:00+00:00",
      "author": {
        "name": "Alexis Beingessner",
        "url": "https://gankro.github.io/"
      },
      "tags": [
        "Language",
        "Performance"
      ]
    },
    {
      "id": "04aedaf8-e7fe-4b54-8b6c-9fb77e31f739",
      "title": "Rust benchmarking with Criterion on Travis CI",
      "content_text": "Criterion allows you to benchmark against Rust stable, but it’s also providing a set of awesome features: Statistics: Statistical analysis detects if, and by how much, performance has changed since the last benchmark run. Charts: Uses gnuplot to generate detailed graphs of benchmark results. Stable-compatible: Benchmark your code without installing nightly Rust.",
      "url": "https://medium.com/@yamafaktory/rust-benchmarking-with-criterion-on-travis-ci-%EF%B8%8F-8b54d321e05",
      "date_published": "2019-01-27T22:14:12.147+00:00",
      "author": {
        "name": "Davy Duperron",
        "url": "https://medium.com/@yamafaktory"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "ca80053b-f874-4631-9f13-c8ffaf6dabd6",
      "title": "From 48s to 5s - optimizing a 350 line pathtracer in Rust",
      "content_text": "In this post I’ll talk about how to port a short raytracer written in C#/C++ codebase to Rust, then applying some simple optimizations by leveraging some features in Rust.",
      "url": "https://medium.com/@cfsamson/from-48s-to-5s-optimizing-a-350-line-pathtracer-in-rust-191ab4a1a412",
      "date_published": "2019-03-04T23:03:25.223+00:00",
      "author": {
        "name": "Carl Fredrik Samson",
        "url": "https://medium.com/@cfsamson"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "938a7c8a-5c3d-4adb-82e0-caf416396075",
      "title": "Fearless concurrency: how Clojure, Rust, Pony, Erlang and Dart let you achieve that",
      "content_text": "several models that make it easier to reason about concurrent programs have been envisioned over time. In this article, we'll have a quick look at a few of them, from new to not-so-new languages. I don't intend to give an extensive analysis of each solution, or make a formal comparison between them. My intention is to simply explain the basics of each solution and how they can be used in practice (with code samples that show off what the result of using the models might look like), so that other developers may have an easier time understanding them and deciding which solution, or language, might be better applicable to their particular problems.",
      "url": "https://sites.google.com/a/athaydes.com/renato-athaydes/posts/fearlessconcurrencyhowclojurerustponyerlanganddartletyouachievethat",
      "date_published": "2019-02-24T09:13:00+00:00",
      "author": {
        "name": "Renato Athaydes",
        "url": "https://sites.google.com/a/athaydes.com/renato-athaydes/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "9494ac41-95c6-43e8-86ef-660443465886",
      "title": "Rewriting stackcollapse-xdebug in Rust",
      "content_text": "A week or so ago, I saw the inferno project mentioned on the Rust subreddit. It was a rewrite of the great FlameGraph library into Rust. All of the work was being livestreamed by Jon Gjengset. I ended up watching some of the livestreams and had the idea of porting the stackcollapse-xdebug.php file to Rust, potentially so it could be included in the project in the future.",
      "url": "https://daniellockyer.com/rewriting-stackcollapse-xdebug/",
      "date_published": "2019-02-08T00:00:00+00:00",
      "author": {
        "name": "Daniel Lockyer",
        "url": "https://daniellockyer.com/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "7d5bbb25-d599-43d5-82cb-1a4dcdf47286",
      "title": "Lock-free Rust: Crossbeam in 2019",
      "content_text": "This is a follow-up post to Lock-freedom without garbage collection from 2015, which introduced Crossbeam, a Rust library that implements efficient lock-free data structures without relying on a tracing garbage collector.",
      "url": "https://stjepang.github.io/2019/01/29/lock-free-rust-crossbeam-in-2019.html",
      "date_published": "2019-01-29T00:00:00+00:00",
      "author": {
        "name": "Stjepan Glavina",
        "url": "https://stjepang.github.io/"
      },
      "tags": [
        "Crates",
        "Performance"
      ]
    },
    {
      "id": "2d51794e-d4d6-44a1-a2ab-f04940842e84",
      "title": "Performance of Rust's match vs. lookup tables",
      "content_text": "I’ve been getting into bioinformatics algorithms lately and ran across an interesting pull request that improved performance by changing a Rust match expression to a lookup. This felt quite surprising to me since, well, the match is so simple — why isn’t the compiler already generating optimal code for it?",
      "url": "https://kevinlynagh.com/notes/match-vs-lookup/",
      "date_published": "2019-01-22T00:00:00+00:00",
      "author": {
        "name": "Kevin Lynagh",
        "url": "https://kevinlynagh.com/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "c032fc9f-79b2-454f-914f-a32fda90092d",
      "title": "Embedded Rust Experiments - Is my STM32 MCU running fast?",
      "content_text": "So, I have this STM32VLDISCOVERY dev board. It has the STM32F100RBT6B MCU, capable of running at 24MHz. On the board, there is a 8MHz crystal. Naturally, when you are new to microcontrollers (like me), you may have a few questions: When we upload a program on this development board, at what speed it is actually running? Is it using this external crystal? Why is this crystal 8MHz if the MCU is capable of 24MHz? If our program is not running at the maximum speed, how do we make it run at the maximum speed?",
      "url": "https://nercury.github.io/rust/embedded/experiments/2019/01/27/rust-embedded-02-measuring-the-clock.html",
      "date_published": "2019-01-27T00:00:00+00:00",
      "author": {
        "name": "Nerijus Arlauskas",
        "url": "http://nercury.github.io/"
      },
      "tags": [
        "Embedded",
        "Performance"
      ]
    },
    {
      "id": "b7475efb-632c-4875-ab6b-d283e220a434",
      "title": "Solving Advent of Code in Under a Second",
      "content_text": "Algorithms and optimization to solve all Advent of Code 2018 puzzles in under one total second.",
      "url": "https://www.forrestthewoods.com/blog/solving-advent-of-code-in-under-a-second/",
      "date_published": "2019-02-03T00:00:00+00:00",
      "author": {
        "name": "Forrest Smith",
        "url": "https://www.forrestthewoods.com/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "f6f38aae-10b9-4c71-b4fd-c0412a56e064",
      "title": "Converting a Python library to Rust",
      "content_text": "I rewrote a Python project in Rust. The rewrite took a fair bit longer than expected, but the results were good (about 9 times faster and ½ the memory usage). In the process, I learned a fair bit about Rust.",
      "url": "https://alantrick.ca/writings/programming/python_to_rust/",
      "date_published": "2018-12-22T00:00:00+00:00",
      "author": {
        "name": "Alan Trick",
        "url": "https://alantrick.ca/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "6022c644-5499-422b-baab-9124f58a0c69",
      "title": "Comparing Pythagorean triples in C++, D, and Rust",
      "content_text": "You may have recently encountered and/or read this blog post criticising a possible C++20 implementation of Pythagorean triples using ranges. In it the author benchmarks different implemetations of the problem, comparing readability, compile times, run times and binary sizes. My main language these days is D, and given that D also has ranges (and right now, as opposed to a future version of the language), I almost immediately reached for my keyboard. By that time there were already some D and Rust versions floating about as a result of the reddit thread, so fortunately for lazy me “all” I had to next was to benchmark the lot of them.",
      "url": "https://atilanevesoncode.wordpress.com/2018/12/31/comparing-pythagorean-triples-in-c-d-and-rust/",
      "date_published": "2018-12-31T13:16:03+00:00",
      "author": {
        "name": "Átila Alves Neves",
        "url": "https://atilanevesoncode.wordpress.com/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "04d1c753-5242-4aa9-bff7-500a717a62bc",
      "title": "A Rusty Advent of Code",
      "content_text": "For the first time, I took part in the Advent of Code this year. If you haven't heard of it, it's a daily programming challenge that can be solved in any programming language. Rust was very present in the Advent of Code community with people contributing a ton of Rust-related content. In the daily solutions thread on the /r/aoc subreddit, there were always several Rust solutions posted. Advent of Code really helps show off the things that make Rust shine, demonstrating the power and utility of many community-created crates as well as the language itself.",
      "url": "https://cprimozic.net/blog/a-rusty-aoc/",
      "date_published": "2018-12-27T00:00:00+00:00",
      "author": {
        "name": "Casey Primozic",
        "url": "https://cprimozic.net/blog/"
      },
      "tags": [
        "Language",
        "Performance"
      ]
    },
    {
      "id": "6aa36df9-001c-478b-830e-56e2b896303b",
      "title": "Rust & Python—A Gentle Comparison using Simple Neural Networks",
      "content_text": "A gentle comparison between Rust & Python from multiple perspectives against a small, relatively simple problem.",
      "url": "https://blog.digital-horror.com/rust-python-comparison/",
      "date_published": "2018-12-23T17:10:39+00:00",
      "author": {
        "name": "Juxhin Dyrmishi Brigjaj",
        "url": "https://blog.digital-horror.com/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "f848772a-4132-4e4f-b817-c4a6dec365b7",
      "title": "Making Rust Float Parsing Fast and Correct",
      "content_text": "Previously, I wrote about how Rust parsing is atypically slow comparing Rust's libcore implementation to a rudimentary parser I wrote. However, as others noted, the comparison was fairly limited. It didn't compare Rust's implementation to other implementations, such as glibc's strtod or Go's ParseFloat. The parser I implemented wasn't correct, it led to rounding error for most representations, by using floats for intermediate values. Furthermore, the comparisons used data unlikely to be encountered in real-world datasets, overstating the performance differences by forcing Rust to use slower algorithms. So, naturally, I aimed to address all these concerns. And finally, I forgot to disable CPU scaling, meaning CPU throttling could have led to inconsistent benchmarks.",
      "url": "https://www.reddit.com/r/rust/comments/a6j5j1/making_rust_float_parsing_fast_and_correct/",
      "date_published": "2018-12-16T08:39:39+11:00",
      "author": {
        "name": "u/ialex32_2",
        "url": "https://www.reddit.com/user/ialex32_2/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "4ea6d02a-6279-4eef-af2f-bd67424d6de8",
      "title": "The Swiss Army Knife of Hashmaps",
      "content_text": "A while back, there was a discussion comparing the performance of using the hashbrown crate (based on Google’s SwissTable implementation) in the Rust compiler. In the last RustFest, Amanieu was experimenting on integrating his crate into stdlib, which turned out to have some really promising results. As a result, it’s being planned to move the crate into stdlib.\n\nWhile the integration is still ongoing, there’s currently no blog post out there explaining SwissTable at the moment. So, I thought I’d dig deeper into the Rust implementation to try and explain how its (almost) identical twin hashbrown::HashMap works.",
      "url": "https://blog.waffles.space/2018/12/07/deep-dive-into-hashbrown/",
      "date_published": "2018-12-07T16:58:46+00:00",
      "author": {
        "name": "Ravi Shankar",
        "url": "https://blog.waffles.space/"
      },
      "tags": [
        "Computer Science",
        "Performance"
      ]
    },
    {
      "id": "93922af4-e454-4bfd-a0f2-64c481a6263c",
      "title": "Exploring a shipping puzzle, part 2",
      "content_text": "A friend recently told me about a puzzle, which is a great excuse to explore programming craft. My Rust solution was a simple port of my second Clojure solution. The only major difference is that it takes advantage of mutability (which is idiomatic in Rust, unlike in Clojure). The Rust solution runs in about 4.22 ± 0.05 ms, or about 5x faster than the fast Clojure solution.",
      "url": "https://kevinlynagh.com/notes/shipping-puzzle/part-2/",
      "date_published": "2018-11-09T00:00:00+00:00",
      "author": {
        "name": "Kevin Lynagh",
        "url": "https://kevinlynagh.com/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "14df2f8d-908b-4836-966f-b307f763319d",
      "title": "How to speed up the Rust compiler in 2018: NLL edition",
      "content_text": "Niko Matsakis recently blogged about the Rust compiler’s new borrow checker, which implements non-lexical lifetimes (NLL). The new borrow checker is a really nice improvement to Rust, because it accepts many sound programs that the old borrow checker rejected.",
      "url": "https://blog.mozilla.org/nnethercote/2018/11/06/how-to-speed-up-the-rust-compiler-in-2018-nll-edition/",
      "date_published": "2018-11-06T00:09:41+00:00",
      "author": {
        "name": "Nicholas Nethercote",
        "url": "https://blog.mozilla.org/nnethercote/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "80d71718-3acf-49d1-ad47-3e05c5da17a2",
      "title": "Parsing logs 230x faster with Rust",
      "content_text": "Perhaps surprisingly, one of the most challenging things about operating RubyGems.org is the logs. A single day of request logs is usually around 500 gigabytes on disk. So every day, we generate about 500 files that are 85MB on disk, and contain about a million streaming JSON objects that take up 1GB when uncompressed. What we want out of those files is incredibly tiny—a few thousand integers, labelled with names and version numbers. Without any real idea of how to get those counts out of S3, I started by writing a proof of concept Ruby script that could parse one of the 500 log files and print out stats from it. Even on my super-fast laptop, my prototype script would take more than 16 hours to parse 24 hours worth of logs.",
      "url": "https://andre.arko.net/2018/10/25/parsing-logs-230x-faster-with-rust/",
      "date_published": "2018-10-25T00:00:00+00:00",
      "author": {
        "name": "Andre Arko",
        "url": "https://plus.google.com/116392164619002275727"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "8157d765-72cb-40a0-b59f-6b4ae2ae173d",
      "title": "Rust RwLock and Mutex Performance Oddities",
      "content_text": "Recently I have been working on Rust datastructures once again. In the process I wanted to test how my work performed compared to a standard library RwLock and Mutex. On my home laptop the RwLock was 5 times faster, the Mutex 2 times faster than my work.\n\nSo checking out my code on my workplace workstation and running my bench marks I noticed the Mutex was the same - 2 times faster. However, the RwLock was 4000 times slower.",
      "url": "https://fy.blackhats.net.au/blog/html/2018/10/19/rust_rwlock_and_mutex_performance_oddities.html",
      "date_published": "2018-10-19T00:00:00+00:00",
      "author": {
        "name": "Firstyear",
        "url": "https://fy.blackhats.net.au/blog/html/index.html"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "0d41cc9f-584c-4da3-8516-a567cc923279",
      "title": "Oxidizing Python: Speeding up URL quoting by 10× using Rust",
      "content_text": "Recently a colleague of mine told me about a small bottleneck with url quoting since we are quoting a lot of storage keys at least once when loading or storing a dataset. To speed it up, we are going to write a C-Library in Rust and invoke it from Python.",
      "url": "https://tech.blue-yonder.com/oxidizing-python-speeding-up-urlquoting-by-using-rust/",
      "date_published": "2018-10-08T10:48:12+00:00",
      "author": {
        "name": "Markus Klein",
        "url": "https://tech.blue-yonder.com/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "917520f5-6f74-4e91-87e1-40d2360c0e46",
      "title": "A Case Study in Heaptrack",
      "content_text": "When I first started building the dtparse crate, my intention was to mirror as closely as possible the equivalent Python library. Python, as you may know, is garbage collected. Very rarely is memory usage considered in Python, and I likewise wasn’t paying too much attention when dtparse was first being built.\n\nThis lackadaisical approach to memory works well enough, and I’m not planning on making dtparse hyper-efficient. But every so often, I’ve wondered: “what exactly is going on in memory?”",
      "url": "https://speice.io/2018/10/case-study-optimization.html",
      "date_published": "2018-10-08T00:00:00-04:00",
      "author": {
        "name": "Bradlee Speice",
        "url": "https://speice.io/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "55b31f9c-fa63-4890-bcf3-5f9b899c197f",
      "title": "Going Four Times Faster using Multi-Threading",
      "content_text": "Rust makes writing parallel code safe. Rayon makes it easy.",
      "url": "http://worthe-it.co.za/programming/2018/10/03/going-four-times-faster-with-multithreading.html",
      "date_published": "2018-10-03T00:00:00+00:00",
      "author": {
        "name": "Justin Worthe",
        "url": "http://worthe-it.co.za/blog/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "dceefb77-f60e-4864-80e4-1dfb50c52cce",
      "title": "No, pest is not faster than nom",
      "content_text": "But today (October 4th, 2018), the pest website featured a very misleading graph. Yes, a pest 2.0 parser that does not convert the input to Rust types is indeed faster than a nom 4.0 parser that does convert the input to Rust types. But what happens if I write a nom 4.0 parser that does not convert its input to Rust types?",
      "url": "https://unhandledexpression.com/general/2018/10/04/no-pest-is-not-faster-than-nom.html",
      "date_published": "2018-10-04T00:00:00+00:00",
      "author": {
        "name": "Geoffroy Couprie",
        "url": "https://unhandledexpression.com/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "307ed024-4949-4c53-80cf-c1e60a57e0a7",
      "title": "lolbench: automagically and empirically discovering Rust performance regressions",
      "content_text": "lolbench compiles ~350 benchmarks with every Rust nightly. It then runs them and highlights potential performance regressions in the standard library and the output of the compiler. Each toolchain’s run is summarized with a list of likely candidates, as seen in the image below, and we’re now getting started using these to safeguard the performance of Rust programs. Come help!",
      "url": "https://blog.anp.lol/rust/2018/09/29/lolbench/",
      "date_published": "2018-09-29T00:00:00+00:00",
      "author": {
        "name": "Adam Perry",
        "url": "https://blog.anp.lol/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "23617503-ac10-4027-bd53-a98ad82c7d1e",
      "title": "The relative performance of C and Rust",
      "content_text": "I reimplemented a body of C software in Rust, and it performed better for the same task; what’s going on? And is there anything broader we can say about these results?\n\nTo explore this, I ran some statemap rendering tests on SmartOS on a single-socket Haswell server (Xeon E3-1270 v3) running at 3.50GHz. The C version was compiled with GCC 7.3.0 with -O2 level optimizations; the Rust version was compiled with 1.29.0 with --release. All of the tests were run bound to a processor set containing a single core; all were bound to one logical CPU within that core, with the other logical CPU forced to be idle. cpustat was used to gather CPU performance counter data, with one number denoting one run with pic0 programmed to that CPU performance counter. The input file (~30MB compressed) contains 3.5M state changes, and in the default config will generate a ~6MB SVG. ",
      "url": "http://dtrace.org/blogs/bmc/2018/09/28/the-relative-performance-of-c-and-rust/",
      "date_published": "2018-09-29T01:28:17+00:00",
      "author": {
        "name": "Bryan Cantrill",
        "url": "http://dtrace.org/blogs/bmc/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "e3bb7297-9e70-4070-a2aa-8bb8f9a5eaf2",
      "title": "A Sudoku Solver & Generator 🔢",
      "content_text": "For a small side project I’m working on, I’m using a Sudoku puzzle solver and puzzle generator that I’ve written in Rust. The experience was fun, so I thought I’d write up a little bit about the algorithm I’ve used and some interesting stats about how it performs.",
      "url": "https://blog.ryanlevick.com/posts/sudoku-solver-generator/",
      "date_published": "2018-09-16T00:00:00+00:00",
      "author": {
        "name": "Ryan Levick",
        "url": "https://blog.ryanlevick.com/"
      },
      "tags": [
        "Tools and Applications",
        "Performance"
      ]
    },
    {
      "id": "90573eab-4e15-48a4-9c53-8f3466356845",
      "title": "The evolution of performance in ppbert",
      "content_text": "Today I released ppbert 0.8.4. This release also marks the first time that one of my original test files can be pretty printed in less than a second. I’ll use this occasion to look back on ppbert and how I was able to improve its performance, little by little.",
      "url": "https://vfoley.xyz/ppbert-perf-evolution/",
      "date_published": "2018-09-19T00:00:00+00:00",
      "author": {
        "name": "Vincent Foley",
        "url": "http://vfoley.xyz/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "4f00ccb1-9966-4c6d-83e9-0e8032ff68a4",
      "title": "Alacritty now supports scrollback",
      "content_text": "Alacritty, the OpenGL terminal emulator written in Rust, now supports scrollback! Performance has improved, and we've got benchmarks to share.",
      "url": "https://jwilm.io/blog/alacritty-lands-scrollback/",
      "date_published": "2018-09-16T17:00:00-07:00",
      "author": {
        "name": "Joe Wilm",
        "url": "https://jwilm.io/blog"
      },
      "tags": [
        "Tools and Applications",
        "Performance"
      ]
    },
    {
      "id": "48eac964-8486-4cd6-83cb-3bca4ff5b616",
      "title": "Measuring SmallVec Footprint with Smallvectune",
      "content_text": "Rust is all about paying only for what you use, and gives us plenty tools to eliminate unneeded allocation. One of the tools that is used in a lot of crates (crates.io shows 98 dependent crates) is SmallVec. It is also used in the Rust compiler. I recently got around to speed up the operation of getting a SmallVec from a slice of copyable data. In short, they’re awesome.",
      "url": "https://llogiq.github.io/2018/09/13/smallvec.html",
      "date_published": "2018-09-13T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "2cfb43bc-99fe-4fea-beb0-8e422c55376a",
      "title": "Parallelizing PNG, part 7: Rust profiling on Linux",
      "content_text": "I already covered some inner-loop optimization tricks for low-level Rust code in mtpng, but how do you check how fast bits of your code are anyway?\n\nThe way to go is to use a sampling-based profiler native to your operating system. I’ve done most of my detailed profiling on Linux, using the “perf” tool.",
      "url": "https://brionv.com/log/2018/09/11/parallelizing-png-part-7-rust-profiling-on-linux/",
      "date_published": "2018-09-11T19:52:29+00:00",
      "author": {
        "name": "Brion Vibber",
        "url": "https://brionv.com/log/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "d8bbfe78-53bb-49df-9d7b-092d306492c0",
      "title": "Parallelizing PNG: Choosing Rust for mtpng",
      "content_text": "In my last post I wrapped up the patches to improve perceived performance of screenshots on the Linux GNOME desktop. With that done, why not implement my crazy plan for parallel PNG encoding to speed the actual save time?",
      "url": "https://brionv.com/log/2018/09/09/parallelizing-png-part-5-choosing-rust-for-mtpng/",
      "date_published": "2018-09-09T23:32:41+00:00",
      "author": {
        "name": "Brion Vibber",
        "url": "https://brionv.com/log/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "bf9e8fe4-c788-47c9-9a8a-27ee3fa0b20f",
      "title": "Rust Faster SIMD edition",
      "content_text": "It’s been a while since I’ve been playing the benchmarksgame with Rust. But I recently found an interesting crate called packed_simd which had a SIMD-ified version of some benchmarks, so as Rust stable now has stdsimd, we should be able to speed up our benchmarks quite a bit.",
      "url": "https://llogiq.github.io/2018/09/06/fast.html",
      "date_published": "2018-09-06T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "3c7f3466-8495-4684-b0c2-e0b26ca9234c",
      "title": "Time difference between L1 cache fetch and memory fetch",
      "content_text": "Aim: Measure how fast a fetch from L1 cache is when compared to a fetch from memory. Instead of writing pure assembly code, we will use Rust's inline assembly feature.",
      "url": "https://nitish.ch/notes/time-difference-between-l1-cache-fetch-and-memory-fetch/",
      "date_published": "2018-09-02T22:15:24+00:00",
      "author": {
        "name": "Nitish Chinta",
        "url": "https://nitish.ch/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "715ee4bf-9164-4c58-aa4f-93f088859281",
      "title": "Benchmarking a Rust web application",
      "content_text": "I set out out my goal 9 for Rustnish: Write benchmark code that compares runtime performance of Rustnish against Varnish. Use cargo bench to execute the benchmarks.\n\nThe basic idea of a performance test here is to send many HTTP requests to the web service (the reverse proxy in this case) and measure how fast the responses arrive back. Comparing the results from Rustnish and Varnish should give us an idea if our performance expectations are holding up.",
      "url": "https://klausi.github.io/rustnish/2018/08/31/benchmarking-a-rust-web-application.html",
      "date_published": "2018-08-31T00:00:00+00:00",
      "author": {
        "name": "klausi",
        "url": "https://klausi.github.io/rustnish/"
      },
      "tags": [
        "Web and Network Services",
        "Performance"
      ]
    },
    {
      "id": "f9bf5234-b8f7-4a0d-9908-e1cf35c6ba8b",
      "title": "Comparing code counters",
      "content_text": "This document is a compilation of various benchmarks and comparisons between code counters, namely tokei, cloc, scc, and loc. This document seeks to compare performance, and accuracy of the code counters. polyglot is not currently included as it was unabled to be installed on the machine at the time of writing.",
      "url": "https://github.com/Aaronepower/tokei/blob/master/COMPARISON.md",
      "date_published": "2018-08-25T21:00:24+00:00",
      "author": {
        "name": "Aaron Power",
        "url": "https://github.com/Aaronepower/tokei"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "ba6b3643-c414-4efe-90a4-4ea6fd45ef3d",
      "title": "Rust, meet q",
      "content_text": "We leverage the elegance of kdb+ and the power of Rust to create data applications that can process data at the rate of tens of GB/second on consumer grade hardware.",
      "url": "https://blog.redsift.com/labs/rust-meet-q/",
      "date_published": "2018-08-23T13:08:16+00:00",
      "author": {
        "name": "Rahul",
        "url": "https://blog.redsift.com/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "d26e4a2d-a00d-4ab2-95e3-326ded5d1fe0",
      "title": "Reading files quickly in Rust",
      "content_text": "With the latest release of 1.27 of Rust (SIMD support) the code counters written in Rust were suddenly a lot faster in Linux. In fact it meant that the fastest one tokei was suddenly faster than my scc for almost all tests. In addition a new project polyglot written in a language I have never heard of ATS popped up which is also now faster than my Go program for any repository when running on a machine with less than 8 cores.",
      "url": "https://boyter.org/posts/reading-files-quickly-in-rust/",
      "date_published": "2018-08-20T00:00:00+00:00",
      "author": {
        "name": "Ben Boyter",
        "url": "https://boyter.org/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "98469a08-b569-403f-a3ed-6049ff91c0b1",
      "title": "Learning SIMD with Rust by finding planets",
      "content_text": "Rust 1.27.0 has brought SIMD (Single Instruction Multiple Data), also known as vectorization, to stable Rust. If you read the announcement, you will see that SIMD should bring performance enhancements to our applications if we learn how to use it properly. But, for that let's first dive into how SIMD works.",
      "url": "https://medium.com/@Razican/learning-simd-with-rust-by-finding-planets-b85ccfb724c3",
      "date_published": "2018-07-02T20:47:57.225+00:00",
      "author": {
        "name": "Iban Eguia",
        "url": "https://medium.com/@Razican"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "495d9d83-2572-43cb-8f9d-c5c404ab83fe",
      "title": "Optimising path tracing: the last 10%",
      "content_text": "In my last post on optimising my Rust path tracer with SIMD I had got withing 10% of my performance target, that is Aras’s C++ SSE4.1 path tracer. From profiling I had determined that the main differences were MSVC using SSE versions of sinf and cosf and differences between Rayon and enkiTS thread pools. The first thing I tried was implement an SSE2 version of sin_cos based off of Julien Pommier’s code that I found via a bit of googling. This was enough to get my SSE4.1 implementation to match the performance of Aras’s SSE4.1 code. I had a slight advantage in that I just call sin_cos as a single function versus separate sin and cos functions, but meh, I’m calling my performance target reached.\n\nThe other part of this post is about Rust’s runtime and compile time CPU feature detection and some wrong turns I took along the way.",
      "url": "https://bitshifter.github.io/blog/2018/06/20/the-last-10-percent/",
      "date_published": "2018-06-20T00:00:00+00:00",
      "author": {
        "name": "bitshifter",
        "url": "https://bitshifter.github.io/"
      },
      "tags": [
        "Performance",
        "Games and Graphics"
      ]
    },
    {
      "id": "019cfc86-4560-40cc-8619-30d04e30699b",
      "title": "Optimising path tracing with SIMD",
      "content_text": "Following on from path tracing in parallel with Rayon I had a lot of other optimisations I wanted to try. In particular I want to see if I could match the CPU performance of @aras_p’s C++ path tracer in Rust. He’d done a fair amount of optimising so it seemed like a good target to aim for. To get a better comparison I copied his scene and also added his light sampling approach which he talks about here. I also implemented a live render loop mimicking his.",
      "url": "https://bitshifter.github.io/blog/2018/06/04/simd-path-tracing/",
      "date_published": "2018-06-04T00:00:00+00:00",
      "author": {
        "name": "bitshifter",
        "url": "https://bitshifter.github.io/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "9a7909ce-8831-4f06-b32e-55a4a3df9116",
      "title": "How to speed up the Rust compiler some more in 2018",
      "content_text": "Since my last post, rustc-perf — the benchmark suite, harness and visualizer — has seen some improvements. First, some new benchmarks were added: cargo, ripgrep, sentry-cli, and webrender. Also, the parser benchmark has been removed because it was a toy program and thus not a good benchmark.",
      "url": "https://blog.mozilla.org/nnethercote/2018/06/05/how-to-speed-up-the-rust-compiler-some-more-in-2018/",
      "date_published": "2018-06-05T00:05:01+00:00",
      "author": {
        "name": "Nicholas Nethercote",
        "url": "https://blog.mozilla.org/nnethercote/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "cb90dbcf-0621-4e96-83ca-62deac7e8a3d",
      "title": "RustFest Paris Workshop: Fastware",
      "content_text": "It’s often said1 that the slowest code is that which has been optimised without benchmarks. You wouldn’t expect your code to work if you never ran it, so why should you expect it to be fast if you never benchmarked it? Writing good benchmarks is a bit of an art, because it’s really easy to accidentally write benchmarks that make your code seem fast, when really the compiler is applying some optimisations that work in the side-effect-free world of the benchmark but can no longer get applied when you put it out into the wild.",
      "url": "http://troubles.md/posts/rustfest-2018-workshop/",
      "date_published": "2018-05-22T11:22:48+02:00",
      "author": {
        "name": "troubles.md",
        "url": "http://troubles.md/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "da6bf82a-304e-42bd-9209-fbb8ee975fcd",
      "title": "Improving SmallVec's speed by 60% and why that shouldn't matter to you",
      "content_text": "smallvec is a library by the Servo team for reducing the number of allocations for dynamic arrays in the case that most of those arrays are below a certain size. Because malloc is fast, for many cases it’s actually slower to use SmallVec than just using Vec because the one-time cost of the initial allocation is dwarfed by the lifetime cost of SmallVec’s increased complexity. You can see that switching to Vec actually improves speed on many of SmallVec’s own benchmarks.",
      "url": "http://troubles.md/posts/improving-smallvec/",
      "date_published": "2018-05-17T14:44:51+02:00",
      "author": {
        "name": "troubles.md",
        "url": "http://troubles.md/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "f676f9eb-ea74-4dc5-a393-1f23a7886678",
      "title": "Dropping drops",
      "content_text": "Recently, a benchmark made it to the top of /r/programming, featuring Rust among other languages, and I was a bit surprised to see that the idiomatic Rust program was not competitive with the best-tuned C++ solution. The benchmark implements a binary tree, and the C++ solution leverages raw pointers while Rust would use an Option<Box<Node>> to represent its tree. Since Option knows that Box is non-nullable, it should compile down to a raw pointer. Quickly inspecting the Rust and C++ versions would not let me find where the performance difference came from.",
      "url": "https://barrielle.cedeela.fr/research_page/dropping-drops.html",
      "date_published": "2018-05-17T00:00:00+02:00",
      "author": {
        "name": "Vincent Barrielle",
        "url": "https://barrielle.cedeela.fr/research_page/category/blog.html"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "51352c9c-dac9-4e94-a90f-5e953057a01a",
      "title": "Porting Rust Benchmarks To Criterion",
      "content_text": "A few weeks ago, I set out to convert bytecount’s benchmarks to criterion, a statistics-driven benchmarking framework started by Jorge Aparicio and maintained by Brook Heisler.\n\nBefore, bytecount used bencher for its benchmarks, which is a straight port of the unstable, nightly-only std::test benchmark framework, extended to work with stable Rust. This was a great benefit compared to std::test, because now we could benchmark on all Rust versions (stable, beta, nightly, some specific version) without needing to fear regressions.",
      "url": "https://llogiq.github.io/2018/05/18/criterion.html",
      "date_published": "2018-05-18T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "a9218983-121e-4d4f-a02f-fd30cb6cf9b2",
      "title": "The Rust compiler is getting faster",
      "content_text": "TL;DR: The Rust compiler has gotten 1.06x–4x faster over the past month.",
      "url": "https://blog.mozilla.org/nnethercote/2018/05/17/the-rust-compiler-is-getting-faster/",
      "date_published": "2018-05-17T04:08:48+00:00",
      "author": {
        "name": "Nicholas Nethercote",
        "url": "https://blog.mozilla.org/nnethercote/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "2027caf9-9c4c-4e62-b4f3-2c43ff70590b",
      "title": "Optimising CTree and strs",
      "content_text": "Once upon a time, I wrote an interpreter for Stratego Core in Rust, which I named strs. Stratego Core is the core language that Stratego is compiled to before the compiler goes further (to Java, or previously to C). A core language is an intermediate representation that is a subset of the surface language.\n\nWhile I optimised that interpreter quite a bit, I noticed that the CTree (Stratego Core Abstract Syntax Tree) that the compiler spit out for me to interpret was very unoptimised. Therefore one the plans I described at the end of the blog post was a little tool for Copy Propagation on CTree files. This post is about that tool, and the optimisations in the interpreter that made it obsolete again.",
      "url": "http://blog.jeffsmits.net/compsci/2018/05/08/optimising-stratego-core/",
      "date_published": "2018-05-08T00:00:00+00:00",
      "author": {
        "name": "Jeff Smits",
        "url": "http://blog.jeffsmits.net/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "97a47f42-b32a-45df-8473-892b94367048",
      "title": "How a Rust upgrade more than tripled the speed of my code",
      "content_text": "I’d like to share a quick story about the sheer power of LLVM and the benefits of using higher-level languages over assembly.",
      "url": "http://troubles.md/posts/the-power-of-compilers/",
      "date_published": "2018-05-11T16:07:31+02:00",
      "author": {
        "name": "troubles.md",
        "url": "http://troubles.md/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "d18e865c-71c2-4c7e-85ff-7d84e1999055",
      "title": "Performance experiments with matrix multiplication",
      "content_text": "One of Rust’s design goals is to be fast. That actually needs two distinct things from the language. First, is it shouldn’t introduce too much (preferably zero) overhead for its abstractions and be fast out of the box. Many people coming from the high level languages (python, javascript, …) find this to be the case ‒ just type the program, compile it (with --release) and it’s reasonable fast. The other, no less important, is allowing the programmer to tweak some knobs when trying to squeeze a bit more speed out of the program.\n\nI’ve decided to test the second a bit and see how far I could go. I’ve chosen matrix multiplication as a case study, for several reasons. I’ve played with it before (in my master’s thesis), it’s relatively simple and the effects of optimizing it can be great. For simplicity, I’ve decided to multiply only square matrices with power-of-two sizes, but these restrictions can be lifted in a real implementation without significantly loosing performance ‒ only the code gets somewhat more complex and hairy.",
      "url": "https://vorner.github.io/2018/05/12/Mat-perf.html",
      "date_published": "2018-05-12T00:00:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "0a6c62ed-f16b-4b57-8ff1-3984e08f204e",
      "title": "How fast can we compile Rust hello world?",
      "content_text": "Seeing Nick Nethercote’s blog post about speeding up the compiler, I started wondering just how fast could a Rust compiler be? How fast could we compile a simple example? How fast can we compile a Rust hello world?",
      "url": "http://www.jonathanturner.org/2018/05/how-fast-can-we-compile-rust-hello-world.html",
      "date_published": "2018-05-03T00:00:00+00:00",
      "author": {
        "name": "Jonathan Turner",
        "url": "http://www.jonathanturner.org/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "1c59d8b2-c755-4f10-859e-4847be81bc4c",
      "title": "How to speed up the Rust compiler in 2018",
      "content_text": "18 months ago I wrote about some work I did to speed up the Rust compiler (rustc). I’ve recently taken this work up again. Also, in the meantime rustc’s build system has been replaced and its benchmark suite has been overhauled. So it’s a good time for an update.",
      "url": "https://blog.mozilla.org/nnethercote/2018/04/30/how-to-speed-up-the-rust-compiler-in-2018/",
      "date_published": "2018-04-30T04:13:45+00:00",
      "author": {
        "name": "Nicholas Nethercote",
        "url": "https://blog.mozilla.org/nnethercote/"
      },
      "tags": [
        "Language",
        "Performance"
      ]
    },
    {
      "id": "d412d980-cc59-4a0b-ab9e-19100f3b8927",
      "title": "Faster Bulletproofs with Ristretto & AVX2",
      "content_text": "A few months ago, Bünz, Bootle, Boneh, Poelstra, Wuille, and Maxwell published Bulletproofs, which dramatically improves proof performance both in terms of proof size and verification time. In addition, it allows proving a much wider class of statements than just range proofs.\n\nAt Chain, we (Henry de Valence, Cathie Yun and Oleg Andreev) have been working on a pure-Rust Bulletproofs implementation, whose initial version we are publishing today, together with a set of notes.",
      "url": "https://blog.chain.com/faster-bulletproofs-with-ristretto-avx2-29450b4490cd",
      "date_published": "2018-04-13T19:21:27.639+00:00",
      "author": {
        "name": "Chain",
        "url": "https://blog.chain.com/@chaininc"
      },
      "tags": [
        "Tools and Applications",
        "Performance"
      ]
    },
    {
      "id": "b93c9682-4e53-4a7f-a39b-79d57b2b4737",
      "title": "New sysinfo version (huge performance improvements!)",
      "content_text": "This new version comes with great performance improvements. We're talking about 3x faster on macos, 2x faster on linux and 3x faster on windows (the benchmarks are at the end of the post).",
      "url": "https://blog.guillaume-gomez.fr/articles/2018-04-09+New+sysinfo+version+%28huge+performance+improvements%21%29",
      "date_published": "2018-04-09T00:00:00+00:00",
      "author": {
        "name": "Guillaume Gomez",
        "url": "https://blog.guillaume-gomez.fr/"
      },
      "tags": [
        "Performance",
        "Tools and Applications"
      ]
    },
    {
      "id": "98f65a4a-8501-45e4-bda8-48d5d01306ba",
      "title": "Improving GStreamer performance with tokio",
      "content_text": "For one of our customers at Centricular we were working on a quite interesting project. Their use-case was basically to receive an as-high-as-possible number of audio RTP streams over UDP, transcode them, and then send them out via UDP again. Due to how GStreamer usually works, they were running into some performance issues.\n\nThis blog post will describe the first set of improvements that were implemented for this use-case, together with a minimal benchmark and the results. My colleague Mathieu will follow up with one or two other blog posts with the other improvements and a more full-featured benchmark.\n\nThe short version is that CPU usage decreased by about 65-75%, i.e. allowing 3-4x more streams with the same CPU usage. Also parallelization works better and usage of different CPU cores is more controllable, allowing for better scalability. And a fixed, but configurable number of threads is used, which is independent of the number of streams.",
      "url": "https://coaxion.net/blog/2018/04/improving-gstreamer-performance-on-a-high-number-of-network-streams-by-sharing-threads-between-elements-with-rusts-tokio-crate/",
      "date_published": "2018-04-05T15:21:06+00:00",
      "author": {
        "name": "Sebastian Dröge",
        "url": "https://coaxion.net/blog/"
      },
      "tags": [
        "Web and Network Services",
        "Performance"
      ]
    },
    {
      "id": "3052579c-dccc-46b8-8d93-bbecfa493992",
      "title": "Speeding Up 'dwarfdump' With Rust",
      "content_text": "Writing a debugger for C++ on Linux, you spend a lot of time examining pretty-printed DWARF debug information using tools like readelf, objdump or dwarfdump. Unfortunately this can be quite slow.\n\nI decided to try to speed dwarfdump up. TL;DR: I reduced the dump time from 506s to 26s by fixing some simple issues and taking advantage of Rust \"fearless parallelism\". I think there are interesting opportunities for speeding up many kinds of command-line tools using Rust and parallelism.",
      "url": "https://robert.ocallahan.org/2018/03/speeding-up-dwarfdump-with-rust.html",
      "date_published": "2018-03-29T14:44:00+13:00",
      "author": {
        "name": "Robert O'Callahan",
        "url": "https://robert.ocallahan.org/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "07825eb3-aaab-46c5-b7e4-680857d73750",
      "title": "Rust + Node.js are awesome!",
      "content_text": "Blazing fast, low requirements, computationally intensive operations on Node.js using Rust",
      "url": "https://itnext.io/rust-node-js-are-awesome-a50d63411773",
      "date_published": "2018-03-27T21:50:20.148+00:00",
      "author": {
        "name": "Benjamín Calderón",
        "url": "https://itnext.io/@benjcal"
      },
      "tags": [
        "Web and Network Services",
        "Performance"
      ]
    },
    {
      "id": "655ac748-e1e9-4fa4-b12a-2dc7c2e88fa7",
      "title": "Building a fast Electron app with Rust",
      "content_text": "When I built Finda, I wanted it to be fast — specifically, to respond to all user input within 16 milliseconds.\n\nGiven this goal, you might be surprised to learn that Finda is built with Electron, a framework that’s often decried for being the opposite of fast.",
      "url": "https://keminglabs.com/blog/building-a-fast-electron-app-with-rust/",
      "date_published": "2018-03-18T00:00:00+11:00",
      "author": {
        "name": "Kevin J. Lynagh",
        "url": "https://keminglabs.com/blog/"
      },
      "tags": [
        "Tools and Applications",
        "Performance"
      ]
    },
    {
      "id": "0ebef41d-c7b1-424a-a120-ebf1098bbe38",
      "title": "Three Algorithm Optimizations Outside [Place], [Other place]",
      "content_text": "Recently, I came across an ad for a job that had a precondition for application: it required you to first solve a ✨programming challenge✨:",
      "url": "https://medium.com/@urschrei/three-algorithm-optimizations-outside-place-other-place-294de5a68f27",
      "date_published": "2018-02-28T17:12:42.361+00:00",
      "author": {
        "name": "Steph",
        "url": "https://medium.com/@urschrei"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "5e5df82f-aba3-4832-bbe6-e995b2e544ef",
      "title": "Criterion.rs v0.2 - a statistics-driven benchmarking library for Rust",
      "content_text": "Criterion.rs is a statistics-driven benchmarking library for Rust. It provides precise measurements of changes in the performance of benchmarked code, and gives strong statistical confidence that apparent performance changes are real and not simply noise. Clear output, a simple API and reasonable defaults make it easy to use even for developers without a background in statistics. Unlike the benchmarking harness provided by Rust, Criterion.rs can be used with stable versions of the compiler.",
      "url": "https://bheisler.github.io/post/criterion-rs-0-2/",
      "date_published": "2018-02-05T07:00:00-06:00",
      "author": {
        "name": "Brook Heisler",
        "url": "https://bheisler.github.io/"
      },
      "tags": [
        "Performance",
        "Crates"
      ]
    },
    {
      "id": "1ccb8993-1118-4eb4-a1fb-0c6146948662",
      "title": "Benchmark of different Async approaches in Rust",
      "content_text": "The story about Rust’s async is still a bit in flux. There’s a bunch of libraries with their pros and cons and different approaches. Even I’m a bit to blame for that, as I’m writing one of my own, called Corona.",
      "url": "https://vorner.github.io/async-bench.html",
      "date_published": "2018-02-03T11:16:55+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "e1a29851-ab4c-4739-a41f-56e9c783f5e4",
      "title": "Faster Progress Report 2",
      "content_text": "faster began as a yak shave, created to aid base💯 in its quest to become the fastest meme on Github. Writing an explicit AVX2-accelerated version of base💯's encoder and decoder, then realizing I'd have to do the same thing again to see the speedups on my Ivy Bridge desktop, pushed me to make this library. Months later, it has blossomed into its own project, and has eclipsed base💯 in both popularity and promise.",
      "url": "https://adamniederer.com/blog/faster-pr-2.html",
      "date_published": "2018-01-28T22:14:41+00:00",
      "author": {
        "name": "Adam Niederer",
        "url": "https://adamniederer.com/blog/blog.html"
      },
      "tags": [
        "Performance",
        "Crates"
      ]
    }
  ]
}