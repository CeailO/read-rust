<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - Embedded</title><link>https://readrust.net/</link><description>Embedded posts on Read Rust</description><item><title>I decided to make an 1980&apos;s Home Computer in Rust - Part 1</title><link>http://railwayelectronics.blogspot.com.au/2018/02/i-decided-to-make-1980s-home-computer.html?m=1</link><description>My first attempt at Rust programming was the stellaris-launchpad crate. This has a few demos that either blink the LED or roll it through an RGB rainbow using the PWM timers. Recently I&apos;ve started a new version of the lm4f120 crate called tm4c123x-hal. The name change reflects TI&apos;s new name for basically the exact same part, while the -hal indicates that it&apos;s based upon the output of svd2rust and @japaric&apos;s new Embedded Hal crate. At the same time, I was watching videos on Youtube about a new wave of 1980&apos;s style &apos;retro&apos; computing boards - text output, BASIC interpreter, etc. An idea started to form that I could put all three of these things together.</description><guid isPermaLink="false">b2eb24c3-d7ee-438c-b041-0446dd551abe</guid><pubDate>Tue, 20 Feb 2018 22:16:00 +0000</pubDate><dc:creator>theJPster</dc:creator></item><item><title>Programming an ARM microcontroller in Rust at four different levels of abstraction</title><link>http://pramode.in/2018/02/20/programming-a-microcontroller-in-rust-at-four-levels-of-abstraction/</link><description>Covering: Why Rust on Microcontrollers, Level 1: Direct register access in an unsafe block, Level 2: No unsafe blocks, use the API provided by svd2rust, A problem, Level 3: The embedded HAL to the rescue, Level 4: Use a board support crate.</description><guid isPermaLink="false">f2bf66c3-52bf-4a3c-b508-96bbd3385e8d</guid><pubDate>Tue, 20 Feb 2018 00:00:00 -0500</pubDate><dc:creator>Pramode C.E</dc:creator></item><item><title>Weekly driver 1 &amp; 2: L3GD20, LSM303DLHC and Madgwick - Embedded in Rust</title><link>http://blog.japaric.io/wd-1-2-l3gd20-lsm303dlhc-madgwick/</link><description>Oh, time flies. It’s already week 8 and we have zero weekly driver posts out there – don’t worry though because there’s plenty of drivers and embedded-hal implementations in the works. To play catch up in this post I’ll cover two embedded-hal drivers: the l3gd20 and the lsm303dlhc. The L3GD20 is an IC that contains a gyroscope and exposes I2C and SPI interfaces; the LSM303DLHC is an IC that contains an accelerometer and a magnetometer, and exposes an I2C interface. You can find these two ICs on the STM32F3DISCOVERY board.</description><guid isPermaLink="false">25d98aac-94a1-4cda-bbdb-7b22b76ed032</guid><pubDate>Mon, 19 Feb 2018 15:57:59 +0100</pubDate><dc:creator>Jorge Aparicio</dc:creator></item><item><title>Zero cost stack overflow protection for ARM Cortex-M devices</title><link>http://blog.japaric.io/stack-overflow-protection/</link><description>One of the core features of Rust is memory safety. Whenever possible the compiler enforces memory safety at compile. One example of this is the borrow checker which prevents data races, iterator invalidation, pointer invalidation and other issues at compile time. Other memory problems like buffer overflows can’t be prevented at compile time. In those cases the compiler inserts runtime checks, bounds checks in this case, to enforce memory safety at runtime. What about stack overflows? For quite a long time Rust didn’t have stack overflow checking but that wasn’t much of a problem on tier 1 platforms since these platforms have an OS and a MMU (Memory Management Unit) that prevents stack overflows from wreaking havoc.</description><guid isPermaLink="false">45c32609-24ef-4288-b361-57ca8b5a34cd</guid><pubDate>Sat, 17 Feb 2018 18:16:39 +0100</pubDate><dc:creator>Jorge Aparicio</dc:creator></item><item><title>Memory safe DMA transfers - Embedded in Rust</title><link>http://blog.japaric.io/safe-dma/</link><description>A blog about Rust and embedded stuff</description><guid isPermaLink="false">b7290658-fff8-4ee5-b8e5-eceefdc6beb6</guid><pubDate>Fri,  9 Feb 2018 11:47:30 +0100</pubDate><dc:creator>Jorge Aparicio</dc:creator></item><item><title>Experimenting with the New I/O Framework (in Rust) for embedded systems</title><link>http://pramode.in/2018/01/31/ti-launchpad-with-rust-new-io/</link><description>Notes on Code, by Pramode C.E</description><guid isPermaLink="false">d4191312-2442-4eb8-b313-67ba224829b6</guid><pubDate>Wed, 31 Jan 2018 00:00:00 -0500</pubDate><dc:creator>Pramode C.E</dc:creator></item><item><title>Rust 2018: Improving Safety and Ergonomics for Low-Level Programming - Bobbin Blog</title><link>http://www.bobbin.io/blog/post/rust_2018_low_level/</link><description>There’s been a lot written about what can be done to make Rust’s tooling, libraries and infrastructure better for embedded programming, but I’d like to cover a slightly different topic: what can be done to make Rust the language itself safer and easier to use for low-level programming?</description><guid isPermaLink="false">d2189bca-0b13-451d-b70c-70ec43f7a207</guid><pubDate>Fri, 26 Jan 2018 14:00:00 -0400</pubDate><dc:creator>Jonathan Soo</dc:creator></item><item><title>Rust 2018: Core, Embedded+SIMD, Intermesiate documenation, Async • r/rust</title><link>https://www.reddit.com/r/rust/comments/7syxw4/rust_2018_core_embeddedsimd_intermesiate/</link><description>Hi there! I&apos;m Nico, and I&apos;ve been lurking around these parts for about a year now. I thought I&apos;d give my 2 cents on Rust&apos;s 2018 plans. Note: this...</description><guid isPermaLink="false">ae85973e-7540-4027-b53a-ee41a249d124</guid><pubDate>Thu, 25 Jan 2018 20:12:01 +0000</pubDate><dc:creator>Nico</dc:creator></item><item><title>Embedded Rust in 2018 - Embedded in Rust</title><link>http://blog.japaric.io/embedded-rust-in-2018/</link><description>A blog about Rust and embedded stuff</description><guid isPermaLink="false">a59a299c-28d1-4c41-9563-47faea69a0b7</guid><pubDate>Sun, 21 Jan 2018 22:10:38 +0100</pubDate><dc:creator>Jorge Aparicio</dc:creator></item><item><title>Embedded Rust in 2018</title><link>http://railwayelectronics.blogspot.com.au/2018/01/i-recently-picked-up-embedded-project.html</link><description>I recently picked up an embedded project that I hadn&apos;t touched for a few months, so I could add some new features. I was disappointed to not...</description><guid isPermaLink="false">f3f500d5-d108-4f83-808e-e15ad520cce7</guid><pubDate>Sun, 14 Jan 2018 00:00:00 +0000</pubDate><dc:creator>theJPster</dc:creator></item><item><title>Pollen Robotics call for #Rust2018: toward stability on embedded systems</title><link>https://medium.com/pollenrobotics/rust-for-robotics-and-embedded-systems-in-2018-96e9be8464</link><description>Robotics developers face two main problems:</description><guid isPermaLink="false">c506e8b8-69f1-4f39-803a-6e3a34c06145</guid><pubDate>Fri, 12 Jan 2018 13:32:49 +0000</pubDate><dc:creator>Pierre Rouanet</dc:creator></item></channel></rss>