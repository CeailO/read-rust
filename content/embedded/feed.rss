<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - Embedded</title><link>https://readrust.net/</link><description>Embedded posts on Read Rust</description><item><title>Running Rust and FreeRTOS on the PADI IoT Stamp</title><link>https://medium.com/@ly.lee/running-rust-and-freertos-on-the-padi-iot-stamp-fb36c5ef4844</link><description><![CDATA[In this article we’ll explore a better way to build and test programs for microcontroller platforms. Specifically we’ll look at Rust, FreeRTOS and Visual Studio Code. And how I made them run on the PADI IoT Stamp.]]></description><guid isPermaLink="false">fb7909fb-5c7d-4360-a9fe-4620e04262d8</guid><pubDate>Mon, 18 Jun 2018 05:45:28 +0000</pubDate><dc:creator>Lup Yuen Lee</dc:creator></item><item><title>Bobbin SDK: Richer Hardware Abstractions for Embedded Systems Programming</title><link>http://www.bobbin.io/blog/post/bobbin_sdk_richer_hardware/</link><description><![CDATA[Bobbin SDK is a suite of tools and code that has been used in embedded development projects running on a variety of ARM Cortex-M MCUs over the last year and a half. It exists to bridge the gap between the existing Rust ecosystem centered around svd2rust and rich but proprietary vendor SDKs.]]></description><guid isPermaLink="false">df7df3a9-1519-4453-963e-fb69d766798d</guid><pubDate>Fri, 25 May 2018 00:00:00 +0000</pubDate><dc:creator>Jonathan Soo</dc:creator></item><item><title>Neural networks on a micro controller - Preparation and math</title><link>http://trangar.blogspot.com.au/2018/05/neural-networks-on-micro-controller.html?m=1</link><description><![CDATA[I've been playing around with the idea of running a neural network on a micro controller. This project is not designed to be the most efficient neural network, but rather one that runs on a micro controller with very limited resources.]]></description><guid isPermaLink="false">4c0ea01d-c011-49aa-b6a6-10178e03c627</guid><pubDate>Wed, 23 May 2018 10:04:00 -0700</pubDate><dc:creator>Trangar</dc:creator></item><item><title>Memory-Mapped Registers in Tock</title><link>https://www.tockos.org/blog/2018/mmio-registers/</link><description><![CDATA[Microcontrollers typically use memory-mapped I/O interfaces to control hardware peripherals. Driver code uses these memory-mapped registers and fields to interact with the peripheral while providing a higher-level interface to the rest of the system. This post describes how Tock deals with register memory maps and a new tool that can automatically generate memory maps for many ARM microcontrollers.]]></description><guid isPermaLink="false">3d49dcaa-90bd-4749-82a8-83a272d0864b</guid><pubDate>Mon,  7 May 2018 00:00:00 +0000</pubDate><dc:creator>Branden Ghena</dc:creator></item><item><title>Cross compiling rust with docker</title><link>https://medium.com/@pvinchon/cross-compiling-rust-with-docker-17d846adae4d</link><description><![CDATA[I am giving embedded systems another go with a side project of mine. The device has a single purpose. It captures network packets, and forwards them to a server. It is easily achieved with LIBpcap, but the device makes it interesting.

The GL-AR150 sells as a mini smart router. The limited storage makes it hard to install language interpreters, or virtual machines. This pushed me to look into standalone executables, and how to compile them for other devices.]]></description><guid isPermaLink="false">47521515-a430-41a1-bcdc-bb68b3f9d646</guid><pubDate>Mon, 30 Apr 2018 23:01:01 +0000</pubDate><dc:creator>Philippe</dc:creator></item><item><title>c3r3s - Serial 64-bit bootloader for the Raspberry Pi 3</title><link>https://github.com/robey/c3r3s</link><description><![CDATA[c3r3s is a tiny (1KB binary) serial bootloader for loading "bare metal" 64-bit kernels on the Raspberry Pi 3. You can iterate on your own kernel code without constantly moving the SD card back and forth.]]></description><guid isPermaLink="false">b4ecd378-f152-4049-b281-8b519cdb870d</guid><pubDate>Tue,  1 May 2018 07:22:00 +1000</pubDate><dc:creator>Robey Pointer</dc:creator></item><item><title>Flipping some bits high on STM32VLDISCOVERY board</title><link>http://nercury.github.io/rust/embedded/experiments/2018/04/29/rust-embedded-01-discovery-vl-flipping-bits.html</link><description><![CDATA[Here I will document the steps to get started with STM32VLDISCOVERY board. We will take my favourite “from scratch” approach. That way, we build the final thing step by step while building our understanding of how it all fits together.]]></description><guid isPermaLink="false">73443ff7-2113-490d-9249-430c95c1534a</guid><pubDate>Sun, 29 Apr 2018 00:00:00 +0000</pubDate><dc:creator>Nerijus Arlauskas</dc:creator></item><item><title>Embedded Rust: Peripherals (and low-level stuffs) - take 1</title><link>https://ithinuel.me/embedded-rust-peripherals-take-1/</link><description><![CDATA[First of all, low level stuffs such as peripheral drivers should be hidden from the application developer. They should not be able to access directly the registers and mess with the peripheral states/control. The wrong flag in the wrong register can lead to dramatic failures and even damages to the products.]]></description><guid isPermaLink="false">97c03488-1331-4858-baf0-26e1d0fca6f0</guid><pubDate>Sat, 28 Apr 2018 00:00:00 +0000</pubDate><dc:creator>Wilfried Chauveau</dc:creator></item><item><title>Flipper - A new embedded development paradigm</title><link>https://www.reddit.com/r/rust/comments/8d8vqn/flipper_a_new_embedded_development_paradigm/</link><description><![CDATA[Flipper is a new kind of development board that redefines the embedded software development cycle by offloading development/debugging into higher level languages + tools. One of the languages that we're putting the most focus into adding support for is Rust. We would love to see more embedded done with Rust and Flipper provides a great springboard for existing Rust developers to familiarize themselves with embedded hardware using the tools they already know how to use.]]></description><guid isPermaLink="false">9cb9976f-4023-496c-9bdf-b5eff31fe5bb</guid><pubDate>Wed, 18 Apr 2018 20:28:34 +0000</pubDate><dc:creator>George Morgan</dc:creator></item><item><title>Cargo, Xargo, and Rustup</title><link>http://aturon.github.io/2018/04/06/rustup-xargo/</link><description><![CDATA[Another topic of discussion at the Berlin Rust All Hands was the long-term story around Cargo, Xargo, and Rustup. The latter two tools are both involved in managing your Rust toolchain, with Xargo allowing you to build custom stds and Rustup managing pre-built artifacts for mainstream targets. Xargo is most commonly used for cross-compiling to less common platforms, but can also be used to customize the standard library on mainstream platforms.]]></description><guid isPermaLink="false">277652ec-bbeb-454c-85da-766438600d47</guid><pubDate>Fri,  6 Apr 2018 00:00:00 +0000</pubDate><dc:creator>Aaron Turon</dc:creator></item><item><title>Building Tiny Rust Binaries for Embedded Linux</title><link>https://jamesmunns.com/update/2018/04/01/tinyrocket.html</link><description><![CDATA[At the recent 2018 Rust All Hands, I met up with Katharina @spacekookie, who works on an open source project that creates software for Embedded Linux Devices. She had talked with the other engineers on the project about including some Rust components, however with their limited flash storage space (8MB for the whole firmware, including operating system and all other software), she was worried that the Rust binaries wouldn’t fit. The current webserver component for their project was measured in the 100’s of KB, while the Rust binary she produced was already multiple MBs, even with a --release build!]]></description><guid isPermaLink="false">6419c6a3-a47d-4ce5-93ef-11f17be5eecd</guid><pubDate>Sun,  1 Apr 2018 09:30:00 +0000</pubDate><dc:creator>James Munns</dc:creator></item><item><title>Weekly Driver: Using the SGP30 Gas Sensor from Rust</title><link>https://blog.dbrgn.ch/2018/4/1/rust-sgp30-driver/</link><description><![CDATA[After the MCP3425 ADC driver I published last month as part of the the weekly driver initiative, I wrote a second Rust embedded-hal driver, this time for the SGP30. The Sensirion SGP30 is a tiny low-power gas sensor (produced in Switzerland) for indoor air quality applications with good long-term stability. It has an I²C interface with TVOC (Total Volatile Organic Compounds) and CO₂ equivalent signals.]]></description><guid isPermaLink="false">2f7b942d-1a59-40bc-bc92-a1e2e85803ee</guid><pubDate>Sun,  1 Apr 2018 00:00:00 +0200</pubDate><dc:creator>Danilo Bargen</dc:creator></item><item><title>Embedded Rust: Why?</title><link>http://ithinuel.me/embedded-rust-why/</link><description><![CDATA[I will try to publish here a series of articles about my approach to embedded development and how I plan to achieve that in Rust.]]></description><guid isPermaLink="false">5230134e-6bfc-4a88-9cee-7bec1f15e099</guid><pubDate>Fri, 30 Mar 2018 08:26:00 +0000</pubDate><dc:creator>Wilfried Chauveau</dc:creator></item><item><title>Writing A Driver in Rust Using Embedded-Hal Traits for the RN4870 BLE Module</title><link>http://byronwasti.com/post/writing_a_ble_driver_in_rust/</link><description><![CDATA[This post will document my process and thoughts on writing a driver for a bluetooth module using Rust and the embedded-hal crate. The specific bluetooth device I will be using is the RN4870 BLE castellated module. It features a simple UART interface and handles most of the complexities of BLE itself, making it very easy to get a simple BLE connection up and running.]]></description><guid isPermaLink="false">348de5bf-0fa7-48d1-b112-20cd13cfd3f3</guid><pubDate>Sun, 25 Mar 2018 20:15:57 +0000</pubDate><dc:creator>Byron Wasti</dc:creator></item><item><title>Safe Peripheral Management</title><link>https://www.tockos.org/blog/2018/peripheral-management/</link><description><![CDATA[This post describes the recently merged PeripheralManager, which helps software ensure it always accesses hardware correctly, and cleans up after it’s done.]]></description><guid isPermaLink="false">c57dc18b-48b9-453e-b44a-46da4dce6d8e</guid><pubDate>Wed, 21 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Pat Pannuto</dc:creator></item><item><title>HTS221 Humidity and Temperature Sensor</title><link>https://medium.com/@pdanielgallagher/hts221-humidity-and-temperature-sensor-88056ea9e5fa</link><description><![CDATA[ST Micro’s HTS221 is a “capacitive digital sensor for relative humidity and temperature” that can be used over either I²C or SPI. It is factory-calibrated, so there is no end-user calibration to incorporate into your application. The driver provides a simple, high-level API to configure the chip once on startup, then read the temperature and humidity.]]></description><guid isPermaLink="false">f860801f-7b99-4fe3-88cc-a6c00ca7d97a</guid><pubDate>Tue, 20 Mar 2018 04:16:48 +0000</pubDate><dc:creator>Daniel Gallagher</dc:creator></item><item><title>Achieving memory safety without compromise</title><link>https://www.embedded.com/electronics-blogs/say-what-/4460422/Achieving-memory-safety-without-compromise</link><description><![CDATA[A new generation of safe programming languages is leaving garbage collectors and runtimes behind, delivering memory safety and control.]]></description><guid isPermaLink="false">f1b7c59f-fff8-4000-ac97-2be742b86760</guid><pubDate>Tue, 13 Mar 2018 16:32:00 +0000</pubDate><dc:creator>Adam Foltzer</dc:creator></item><item><title>Weekly driver 4: ENC28J60, Ethernet for your microcontroller</title><link>http://blog.japaric.io/wd-4-enc28j60/</link><description><![CDATA[This week I’m releasing a driver for the ENC28J60, an Ethernet controller with SPI interface. This IC lets you connect your microcontroller, if it has a SPI interface, to a Local Area Network or, with more work, to the internet. Apart from the IC you need a RJ45 connector and a few other components so I’m using this module which has the ENC28J60 and all the required components on a single board.]]></description><guid isPermaLink="false">a48d8156-7f0f-4731-a17b-e36678b86f5f</guid><pubDate>Tue, 13 Mar 2018 04:32:18 +0100</pubDate><dc:creator>Jorge Aparicio</dc:creator></item><item><title>Weekly Driver: Using the MCP3425 ADC from Rust</title><link>https://blog.dbrgn.ch/2018/3/13/rust-mcp3425-driver/</link><description><![CDATA[Announing the MCP3425 Rust driver.]]></description><guid isPermaLink="false">249e8bc3-a836-4b71-89b6-8d7c4d1b0977</guid><pubDate>Tue, 13 Mar 2018 00:00:00 +0100</pubDate><dc:creator>Danilo Bargen</dc:creator></item><item><title>Tock 1.0 Kernel Released</title><link>https://www.tockos.org/blog/2018/talking-tock-35/</link><description><![CDATA[We silently tag our first rolling release of the Tock kernel in February. If you’re building applications with Tock or porting to a new board, and want to be immune from updating your code everyday, you can work from that tag. We’ll also upload binary kernel images for the supported board sometime soon.]]></description><guid isPermaLink="false">a4faa45e-f24e-4ce9-822c-5c4623919e17</guid><pubDate>Tue,  6 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Amit Levy</dc:creator></item><item><title>Rust on the STMicro Nucleo</title><link>https://medium.com/@pdanielgallagher/rust-on-the-stmicro-nucleo-7a66b97be549</link><description><![CDATA[For the embedded portion of my project, I had two decisions to make: which processors and chips to use, and which language to write the firmware in. Since this personal project is about learning new skills, I decided to use Rust instead of C. I opted to use STMicro’s Nucleo boards, since their ecosystem has shields that do all of the things I would like (WiFi, BLE, and environmental sensing), and there was also a great Rust tutorial for a similar board. However, since I’ve never really done any embedded development, I decided to start with the old standby: copying code off the internet!]]></description><guid isPermaLink="false">3907940b-eb06-4f2a-a3ff-6df4ae5ac9ca</guid><pubDate>Thu,  1 Mar 2018 05:50:42 +0000</pubDate><dc:creator>Daniel Gallagher</dc:creator></item><item><title>Discovery: Discover the world of microcontrollers through Rust! - 2018 edition</title><link>https://www.reddit.com/r/rust/comments/80doqg/discovery_discover_the_world_of_microcontrollers/</link><description><![CDATA[This is an mdbook I wrote more than a year ago for a workshop and it's an introductory course to embedded systems that uses Rust as the teaching language. I just updated the starter code to use the latest versions of everything so it's now easier to jump from the book to use the latest developments in the Cortex-M ecosystem; there's no new content, though -- the exercises remain unchanged in terms of goals; just the code has changed.]]></description><guid isPermaLink="false">0cb6b35f-0d4f-4e71-bcae-66d4cd115d41</guid><pubDate>Mon, 26 Feb 2018 15:12:44 +0000</pubDate><dc:creator>Jorge Aparicio</dc:creator></item><item><title>Let&apos;s write an embedded-hal-driver</title><link>http://zuendmasse.de/blog/2018/02/23/lets-write-an-embedded-hal-driver/</link><description><![CDATA[Mid January japaric started "The weekly driver initiative" with the goal to kick-start releases of platform agnostic embedded-hal based driver crates. In this post we'll build an embedded-hal-driver for the AT24C32-EEPROM chip.]]></description><guid isPermaLink="false">75898724-f900-46ae-877b-36d87b440ac1</guid><pubDate>Sun, 25 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Sebastian Wötzel</dc:creator></item><item><title>Transcript: Should you Rust in embedded yet?</title><link>https://kazlauskas.me/entries/rust-embedded-ready.html</link><description><![CDATA[This is a transcript of a talk I gave at the Vilnius Rust meetup.

It would not be an exaggeration to say that embedded is omnipresent. You can find embedded firmware everywhere from fridges, microwaves and personal computers to safety-critical applications in automotive, medical fields, etc.

Most of this software is still written in C or C++, and neither of these, given their non-ideal track record in relation to security critical software, are the most confidence inspiring choice for safety-critical systems.

In my experience, bugs occurring in embedded firmware tend to be fairly similar to those commonly found in the user-space software.]]></description><guid isPermaLink="false">504ed65c-1efe-4cbd-b655-b17e89110936</guid><pubDate>Sat, 24 Feb 2018 20:09:27 +0000</pubDate><dc:creator>Simonas Kazlauskas</dc:creator></item><item><title>An introduction to writing platform agnostic drivers in Rust using the MCP3008</title><link>http://pramode.in/2018/02/24/an-introduction-to-writing-embedded-hal-based-drivers-in-rust/</link><description><![CDATA[Here is how a device like an accelerometer works: you send the device commands over a serial interface (SPI, I2C), say something like: “get me the X-axis reading”; the device responds by sending back some data.

The way the SPI/I2C/GPIO (and other) interfaces are programmed is very much dependent on the specific microcontroller family. But the actions you need to perform to interface with a device like a temperature sensor / accelerometer etc depend only on the device and are independent of the controller being used. What if you can write a generic accelerometer driver and use it on any microcontroller platform - right from low-end ARM Cortex-M, AVR, MSP430 etc to complex Embedded Linux platforms like the Raspberry Pi? What if you can distribute these drivers on crates.io so that you only have to include one line in your Cargo.toml to use it in your code?]]></description><guid isPermaLink="false">34ee0b77-cabd-47a8-bb6c-00e8a34046c7</guid><pubDate>Sat, 24 Feb 2018 00:00:00 -0500</pubDate><dc:creator>Pramode C.E</dc:creator></item><item><title>I decided to make an 1980&apos;s Home Computer in Rust - Part 1</title><link>http://railwayelectronics.blogspot.com.au/2018/02/i-decided-to-make-1980s-home-computer.html?m=1</link><description><![CDATA[My first attempt at Rust programming was the stellaris-launchpad crate. This has a few demos that either blink the LED or roll it through an RGB rainbow using the PWM timers. Recently I've started a new version of the lm4f120 crate called tm4c123x-hal. The name change reflects TI's new name for basically the exact same part, while the -hal indicates that it's based upon the output of svd2rust and @japaric's new Embedded Hal crate. At the same time, I was watching videos on Youtube about a new wave of 1980's style 'retro' computing boards - text output, BASIC interpreter, etc. An idea started to form that I could put all three of these things together.]]></description><guid isPermaLink="false">b2eb24c3-d7ee-438c-b041-0446dd551abe</guid><pubDate>Tue, 20 Feb 2018 22:16:00 +0000</pubDate><dc:creator>theJPster</dc:creator></item><item><title>Programming an ARM microcontroller in Rust at four different levels of abstraction</title><link>http://pramode.in/2018/02/20/programming-a-microcontroller-in-rust-at-four-levels-of-abstraction/</link><description><![CDATA[Covering: Why Rust on Microcontrollers, Level 1: Direct register access in an unsafe block, Level 2: No unsafe blocks, use the API provided by svd2rust, A problem, Level 3: The embedded HAL to the rescue, Level 4: Use a board support crate.]]></description><guid isPermaLink="false">f2bf66c3-52bf-4a3c-b508-96bbd3385e8d</guid><pubDate>Tue, 20 Feb 2018 00:00:00 -0500</pubDate><dc:creator>Pramode C.E</dc:creator></item><item><title>Weekly driver 1 &amp; 2: L3GD20, LSM303DLHC and Madgwick - Embedded in Rust</title><link>http://blog.japaric.io/wd-1-2-l3gd20-lsm303dlhc-madgwick/</link><description><![CDATA[Oh, time flies. It’s already week 8 and we have zero weekly driver posts out there – don’t worry though because there’s plenty of drivers and embedded-hal implementations in the works. To play catch up in this post I’ll cover two embedded-hal drivers: the l3gd20 and the lsm303dlhc. The L3GD20 is an IC that contains a gyroscope and exposes I2C and SPI interfaces; the LSM303DLHC is an IC that contains an accelerometer and a magnetometer, and exposes an I2C interface. You can find these two ICs on the STM32F3DISCOVERY board.]]></description><guid isPermaLink="false">25d98aac-94a1-4cda-bbdb-7b22b76ed032</guid><pubDate>Mon, 19 Feb 2018 15:57:59 +0100</pubDate><dc:creator>Jorge Aparicio</dc:creator></item><item><title>Zero cost stack overflow protection for ARM Cortex-M devices</title><link>http://blog.japaric.io/stack-overflow-protection/</link><description><![CDATA[One of the core features of Rust is memory safety. Whenever possible the compiler enforces memory safety at compile. One example of this is the borrow checker which prevents data races, iterator invalidation, pointer invalidation and other issues at compile time. Other memory problems like buffer overflows can’t be prevented at compile time. In those cases the compiler inserts runtime checks, bounds checks in this case, to enforce memory safety at runtime. What about stack overflows? For quite a long time Rust didn’t have stack overflow checking but that wasn’t much of a problem on tier 1 platforms since these platforms have an OS and a MMU (Memory Management Unit) that prevents stack overflows from wreaking havoc.]]></description><guid isPermaLink="false">45c32609-24ef-4288-b361-57ca8b5a34cd</guid><pubDate>Sat, 17 Feb 2018 18:16:39 +0100</pubDate><dc:creator>Jorge Aparicio</dc:creator></item><item><title>Memory safe DMA transfers - Embedded in Rust</title><link>http://blog.japaric.io/safe-dma/</link><description><![CDATA[A blog about Rust and embedded stuff]]></description><guid isPermaLink="false">b7290658-fff8-4ee5-b8e5-eceefdc6beb6</guid><pubDate>Fri,  9 Feb 2018 11:47:30 +0100</pubDate><dc:creator>Jorge Aparicio</dc:creator></item><item><title>Experimenting with the New I/O Framework (in Rust) for embedded systems</title><link>http://pramode.in/2018/01/31/ti-launchpad-with-rust-new-io/</link><description><![CDATA[Notes on Code, by Pramode C.E]]></description><guid isPermaLink="false">d4191312-2442-4eb8-b313-67ba224829b6</guid><pubDate>Wed, 31 Jan 2018 00:00:00 -0500</pubDate><dc:creator>Pramode C.E</dc:creator></item><item><title>Rust 2018: Improving Safety and Ergonomics for Low-Level Programming - Bobbin Blog</title><link>http://www.bobbin.io/blog/post/rust_2018_low_level/</link><description><![CDATA[There’s been a lot written about what can be done to make Rust’s tooling, libraries and infrastructure better for embedded programming, but I’d like to cover a slightly different topic: what can be done to make Rust the language itself safer and easier to use for low-level programming?]]></description><guid isPermaLink="false">d2189bca-0b13-451d-b70c-70ec43f7a207</guid><pubDate>Fri, 26 Jan 2018 14:00:00 -0400</pubDate><dc:creator>Jonathan Soo</dc:creator></item><item><title>Rust 2018: Core, Embedded+SIMD, Intermesiate documenation, Async • r/rust</title><link>https://www.reddit.com/r/rust/comments/7syxw4/rust_2018_core_embeddedsimd_intermesiate/</link><description><![CDATA[Hi there! I'm Nico, and I've been lurking around these parts for about a year now. I thought I'd give my 2 cents on Rust's 2018 plans. Note: this...]]></description><guid isPermaLink="false">ae85973e-7540-4027-b53a-ee41a249d124</guid><pubDate>Thu, 25 Jan 2018 20:12:01 +0000</pubDate><dc:creator>Nico</dc:creator></item><item><title>Embedded Rust in 2018 - Embedded in Rust</title><link>http://blog.japaric.io/embedded-rust-in-2018/</link><description><![CDATA[A blog about Rust and embedded stuff]]></description><guid isPermaLink="false">a59a299c-28d1-4c41-9563-47faea69a0b7</guid><pubDate>Sun, 21 Jan 2018 22:10:38 +0100</pubDate><dc:creator>Jorge Aparicio</dc:creator></item><item><title>Embedded Rust in 2018</title><link>http://railwayelectronics.blogspot.com.au/2018/01/i-recently-picked-up-embedded-project.html</link><description><![CDATA[I recently picked up an embedded project that I hadn't touched for a few months, so I could add some new features. I was disappointed to not...]]></description><guid isPermaLink="false">f3f500d5-d108-4f83-808e-e15ad520cce7</guid><pubDate>Sun, 14 Jan 2018 00:00:00 +0000</pubDate><dc:creator>theJPster</dc:creator></item><item><title>Pollen Robotics call for #Rust2018: toward stability on embedded systems</title><link>https://medium.com/pollenrobotics/rust-for-robotics-and-embedded-systems-in-2018-96e9be8464</link><description><![CDATA[Robotics developers face two main problems:]]></description><guid isPermaLink="false">c506e8b8-69f1-4f39-803a-6e3a34c06145</guid><pubDate>Fri, 12 Jan 2018 13:32:49 +0000</pubDate><dc:creator>Pierre Rouanet</dc:creator></item></channel></rss>