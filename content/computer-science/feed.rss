<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - Computer Science</title><link>https://readrust.net/</link><description>Computer Science posts on Read Rust</description><item><title>Combine 3 - Partial parsing in Rust</title><link>https://marwes.github.io/2018/02/08/combine-3.html</link><description>Combine is a parser combinator library for the Rust programming language. I first announced version 3 of Combine back in August and back then I definitely expected to have a stable version by now. However other projects (cough gluon cough) got in the way and Combine fell to the wayside. It didn’t help that I didn’t have a killer feature for 3.0 either, user-defined error types make it possible to define parsers usable in #[no_std] crates which is great when you need it but it is still a fairly niche use-case.</description><guid isPermaLink="false">29eb1ede-d551-4b8d-aeec-c673aafb7e8f</guid><pubDate>Thu,  8 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Markus Westerlind</dc:creator></item><item><title>Memory Safety in Rust: A Case Study with C</title><link>http://willcrichton.net/notes/rust-memory-safety/</link><description>To demonstrate the value of Rust&apos;s memory safety rules, I contrast the implementation of a simple vector library in C and Rust, highlighting where and how Rust&apos;s static analysis can prevent tricky memory errors.</description><guid isPermaLink="false">d2fc34d4-c1ec-4c3d-8e39-b420b8f20fe8</guid><pubDate>Fri,  2 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Will Crichton</dc:creator></item></channel></rss>