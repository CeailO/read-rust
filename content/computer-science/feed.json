{
  "version": "https://jsonfeed.org/version/1",
  "title": "Read Rust - Computer Science",
  "home_page_url": "https://readrust.net/",
  "feed_url": "https://readrust.net/computer-science/feed.json",
  "description": "Computer Science posts on Read Rust",
  "author": {
    "name": "Wesley Moore",
    "url": "http://www.wezm.net/"
  },
  "items": [
    {
      "id": "66851aee-1bf3-4b18-b1aa-50f79ce773f4",
      "title": "Writing a recursive ascent parser by hand",
      "content_text": "I’ve been exploring various ways to write parsers. For a long time, I’ve used hand-written recursive descent for its straightforwardness, flexibility, and performance. There is another way—parser generators like Menhir, LALRPOP, or the venerable Bison use the bottom-up LR algorithm. I decided I would try an experiment: write an LR parser by hand, and see how readable I could make it.",
      "url": "https://www.abubalay.com/blog/2018/04/08/recursive-ascent",
      "date_published": "2018-04-08T00:00:00+00:00",
      "author": {
        "name": "Russell Johnston",
        "url": "https://www.abubalay.com/blog"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "e01d9c09-e66d-4fea-94e3-95db24137dd6",
      "title": "Sound and ergonomic specialization for Rust",
      "content_text": "Specialization holds the dubious honor of being among the oldest post-1.0 features remaining in unstable limbo. That’s for good reason, though: until recently, we did not know how to make it sound.",
      "url": "http://aturon.github.io/2018/04/05/sound-specialization/",
      "date_published": "2018-04-05T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/"
      },
      "tags": [
        "Language",
        "Computer Science"
      ]
    },
    {
      "id": "4812042b-1d2a-4171-9a77-d2f0a0c44b91",
      "title": "Writing the Perfect 'Collect' Trait",
      "content_text": "I’ve been spending some time thinking about garbage collection in rust. I know, shame on me, it’s a systems language, we hate garbage collection, but… even in a systems programming language, garbage collection is still pretty damn useful.",
      "url": "https://mtak-blog.github.io/the_perfect_collect_trait",
      "date_published": "2018-04-05T00:00:00+00:00",
      "author": {
        "name": "mtak-blog",
        "url": "https://mtak-blog.github.io/"
      },
      "tags": [
        "Language",
        "Computer Science"
      ]
    },
    {
      "id": "318f9d08-d86a-4799-ac08-75014d089475",
      "title": "im - Immutable Data Structures for Rust",
      "content_text": "This library implements several of the more commonly useful immutable data structures for Rust. They rely on structural sharing to keep most operations fast without needing to mutate the underlying data store, leading to more predictable code without necessarily sacrificing performance.",
      "url": "https://docs.rs/im/10.0.0/im/",
      "date_published": "2018-04-06T21:06:00+00:00",
      "author": {
        "name": "Bodil Stokke",
        "url": "http://immutable.rs/"
      },
      "tags": [
        "Computer Science",
        "Crates"
      ]
    },
    {
      "id": "465a729e-a243-4cd7-bee8-e0c7d5d09fbd",
      "title": "Number Theory using Rust's type system",
      "content_text": "Rust does not have dependent types, or GADTs like Haskell, but with a few tricks, we can use Rust's type system to emulate an Idris-like number system.",
      "url": "https://shingtaklam1324.github.io/number-theory-rust/",
      "date_published": "2018-03-18T00:00:00+11:00",
      "author": {
        "name": "shingtaklam1324",
        "url": "https://shingtaklam1324.github.io/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "17b6e878-388f-40c5-93a0-cf3da64a1078",
      "title": "stencil; abstract stencil calculation",
      "content_text": "I am developing a library for stencil calculation in Rust.",
      "url": "https://dev.to/termoshtt/stencil-abstract-stencil-calculation-i2m",
      "date_published": "2018-03-17T00:00:00+00:00",
      "author": {
        "name": "termoshtt",
        "url": "https://dev.to/termoshtt"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "d377bc0d-a127-456d-81fa-926fe634de0f",
      "title": "Fast Search Through Metric Spaces with Rust and BK Trees",
      "content_text": "In the previous post, pHash helped us to summarize our photo album. Now it’s time to employ BK-trees and efficiently search through the metric space of perceptual hashes. Let’s roll up the sleeves; more Rust awaits!",
      "url": "https://www.innoq.com/en/blog/looks-the-same-to-me/",
      "date_published": "2018-03-01T00:00:00+01:00",
      "author": {
        "name": "Jan Stępień",
        "url": "https://www.innoq.com/en/staff/jans/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "5e572868-98d0-4944-b897-14cca13a39a4",
      "title": "Reasoning with Types in Rust",
      "content_text": "Rust is a modern programming language which is marketed primarily on the basis of its very nice type system, and I’d like to tell you about how you can use this type system to reason about your programs in interesting ways. Most of the time when its type system is discussed, the focus is on its guarantee of data race freedom and ability to enable so-called fearless concurrency (and rightfully so—this is a place where Rust truly shines!). Today, I have a different focus in mind, characterized perhaps most succinctly as follows:",
      "url": "https://aaronweiss.us/posts/2018-02-26-reasoning-with-types-in-rust.html",
      "date_published": "2018-02-26T00:00:00+00:00",
      "author": {
        "name": "Aaron Weiss",
        "url": "https://aaronweiss.us/archive.html"
      },
      "tags": [
        "Language",
        "Computer Science"
      ]
    },
    {
      "id": "29eb1ede-d551-4b8d-aeec-c673aafb7e8f",
      "title": "Combine 3 - Partial parsing in Rust",
      "content_text": "Combine is a parser combinator library for the Rust programming language. I first announced version 3 of Combine back in August and back then I definitely expected to have a stable version by now. However other projects (cough gluon cough) got in the way and Combine fell to the wayside. It didn’t help that I didn’t have a killer feature for 3.0 either, user-defined error types make it possible to define parsers usable in #[no_std] crates which is great when you need it but it is still a fairly niche use-case.",
      "url": "https://marwes.github.io/2018/02/08/combine-3.html",
      "date_published": "2018-02-08T00:00:00+00:00",
      "author": {
        "name": "Markus Westerlind",
        "url": "https://marwes.github.io/"
      },
      "tags": [
        "Crates",
        "Computer Science"
      ]
    },
    {
      "id": "d2fc34d4-c1ec-4c3d-8e39-b420b8f20fe8",
      "title": "Memory Safety in Rust: A Case Study with C",
      "content_text": "To demonstrate the value of Rust's memory safety rules, I contrast the implementation of a simple vector library in C and Rust, highlighting where and how Rust's static analysis can prevent tricky memory errors.",
      "url": "http://willcrichton.net/notes/rust-memory-safety/",
      "date_published": "2018-02-02T00:00:00+00:00",
      "author": {
        "name": "Will Crichton",
        "url": "http://willcrichton.net/notes/"
      },
      "tags": [
        "Computer Science"
      ]
    }
  ]
}