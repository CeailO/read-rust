<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - Language</title><link>https://readrust.net/</link><description>Language posts on Read Rust</description><item><title>Async/Await IV: An Even Better Proposal</title><link>https://boats.gitlab.io/blog/post/2018-02-07-async-iv-an-even-better-proposal/</link><description>I did not plan to write this blog post. I thought that the fourth post in my series would explain how we could go from the generator API in my previous post to a futures API in which you don’t have to heap allocate every async call. But eddyb surprised me, and now I have to revisit the API in the previous post, because we can implement everything we need from immovability with a safe interface afterall.</description><guid isPermaLink="false">ac0c5546-f21b-4b47-b4a4-950464472aad</guid><pubDate>Wed,  7 Feb 2018 00:00:00 +0000</pubDate><dc:creator>boats</dc:creator></item><item><title>A vision for portability in Rust</title><link>http://aturon.github.io/2018/02/06/portability-vision/</link><description>TL;DR: This post proposes to deprecate the std facade, instead having a unified std that uses target- and capability-based cfgs to control API availability. Leave comments on internals!</description><guid isPermaLink="false">6e3c698d-7f42-43d4-9c08-2ee084945e5c</guid><pubDate>Tue,  6 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Aaron Turon</dc:creator></item><item><title>Rust Lifetimes for the Uninitialised</title><link>http://asquera.de/blog/2018-01-29/rust-lifetimes-for-the-uninitialised/</link><description>Lifetimes are a interesting subject: a lot of people seem to gain a day-to-day familiarity with them, without fully understanding what they are. Maybe, they are truly Rust&apos;s Monads. Let&apos;s talk about what they are, where you encounter them and then how to get competent with them.</description><guid isPermaLink="false">c0b3d7ad-673f-4eb9-aa54-45447d1eafb0</guid><pubDate>Mon, 29 Jan 2018 15:30:00 +0100</pubDate><dc:creator>Florian Gilcher</dc:creator></item><item><title>Introduction to Procedural Macros</title><link>https://tinkering.xyz/posts/introduction-to-proc-macros/</link><description>As a newcomer to Rust, I heard the phrase “procedural macro” thrown around a lot without really understanding what it meant. I figured that I would learn about them if I ever needed them. Well, I’m working on the guts of relm, and a large chunk of it is procedural macros. I’ve learned enough about procedural macros to be dangerous, so I thought I would pass on some knowledge.</description><guid isPermaLink="false">f4e99fe5-2dab-418d-9256-813a75036164</guid><pubDate>Sat,  3 Feb 2018 19:36:37 -0500</pubDate><dc:creator>Zach Mitchell</dc:creator></item><item><title>Async/Await III: Moving Forward with Something Shippable</title><link>https://boats.gitlab.io/blog/post/2018-01-30-async-iii-moving-forward/</link><description>In the first post, we looked at the relationship between generators and a more general notion of self-references. In the second post, we narrowed down exactly what problem we need to solve to make generators work, and talked about some solutions that we’ve considered but don’t feel like we could ship in the near future.
In the original post, I promised that I would have a near term solution by the end of this series.</description><guid isPermaLink="false">25060712-7d38-4492-991d-a52a9111891c</guid><pubDate>Sun,  4 Feb 2018 00:00:00 +0000</pubDate><dc:creator>boats</dc:creator></item></channel></rss>