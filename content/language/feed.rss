<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - Language</title><link>https://readrust.net/</link><description>Language posts on Read Rust</description><item><title>Dark Side Of Ergonomics</title><link>https://vorner.github.io/2018/04/08/Dark-side-of-ergonomics.html</link><description>Despite having an experience with wide range of computer languages, including C++ and Haskell (both strong influences to Rusts design), I found Rust hard to learn. Sometimes I grind my teeth about something the compiler doesn’t let me do. Despite that, I didn’t put ergonomics as a wish in any poll. In fact, if I was to take a poll right now, I’d probably be against further ergonomics initiatives.</description><guid isPermaLink="false">d1d6e382-3b80-431e-ba08-5cbe1ccebce2</guid><pubDate>Sun,  8 Apr 2018 00:00:00 +0000</pubDate><dc:creator>Michal &apos;vorner&apos; Vaner</dc:creator></item><item><title>Async &amp; Await in Rust: a full proposal</title><link>https://boats.gitlab.io/blog/post/2018-04-06-async-await-final/</link><description>I’m really excited to announce the culmination of much of our work over the last four months: a pair of RFCs for supporting async &amp; await notation in Rust. This will be very impactful for Rust in the network services space. The change is proposed as two RFCs:
 RFC #2394: which adds async &amp; await notation to the language. RFC #2395: which moves a part of the futures library into std to support that syntax.</description><guid isPermaLink="false">7fbe9c06-2e4a-4da4-aea0-45b4828f6687</guid><pubDate>Fri,  6 Apr 2018 00:00:00 +0000</pubDate><dc:creator>boats</dc:creator></item><item><title>Sound and ergonomic specialization for Rust</title><link>http://aturon.github.io/2018/04/05/sound-specialization/</link><description>Specialization holds the dubious honor of being among the oldest post-1.0 features remaining in unstable limbo. That’s for good reason, though: until recently, we did not know how to make it sound.</description><guid isPermaLink="false">e01d9c09-e66d-4fea-94e3-95db24137dd6</guid><pubDate>Thu,  5 Apr 2018 00:00:00 +0000</pubDate><dc:creator>Aaron Turon</dc:creator></item><item><title>Writing the Perfect &apos;Collect&apos; Trait</title><link>https://mtak-blog.github.io/the_perfect_collect_trait</link><description>I’ve been spending some time thinking about garbage collection in rust. I know, shame on me, it’s a systems language, we hate garbage collection, but… even in a systems programming language, garbage collection is still pretty damn useful.</description><guid isPermaLink="false">4812042b-1d2a-4171-9a77-d2f0a0c44b91</guid><pubDate>Thu,  5 Apr 2018 00:00:00 +0000</pubDate><dc:creator>mtak-blog</dc:creator></item><item><title>Custom tasks in Cargo</title><link>http://aturon.github.io/2018/04/05/workflows/</link><description>One of the big requests from the Domain Working Groups for Rust 2018 is a richer feature set for framework- or domain-specific workflows in Cargo. At the simplest level, that might look like project templates – the ability to direct cargo new to start with a custom template defined in crates.io. That’s already enough to get you cooking with frameworks like QuiCLI, which today involve a fixed set of initial scaffolding that you can fill in.</description><guid isPermaLink="false">cb113ba3-eaa8-40e1-8ff8-a8b710bf89db</guid><pubDate>Thu,  5 Apr 2018 00:00:00 +0000</pubDate><dc:creator>Aaron Turon</dc:creator></item><item><title>The Rust Team All Hands in Berlin: a Recap</title><link>https://blog.rust-lang.org/2018/04/06/all-hands.html</link><description>Last week we held an “All Hands” event in Berlin, which drew more than 50 people involved in 15 different Rust Teams or Working Groups, with a majority being volunteer contributors. This was the first such event, and its location reflects the current concentration of team members in Europe. The week was a smashing success which we plan to repeat on at least an annual basis.</description><guid isPermaLink="false">5eca0d0a-81f6-4804-869f-32ed307adb9f</guid><pubDate>Fri,  6 Apr 2018 00:00:00 +0000</pubDate><dc:creator>Aaron Turon</dc:creator></item><item><title>Cargo, Xargo, and Rustup</title><link>http://aturon.github.io/2018/04/06/rustup-xargo/</link><description>Another topic of discussion at the Berlin Rust All Hands was the long-term story around Cargo, Xargo, and Rustup. The latter two tools are both involved in managing your Rust toolchain, with Xargo allowing you to build custom stds and Rustup managing pre-built artifacts for mainstream targets. Xargo is most commonly used for cross-compiling to less common platforms, but can also be used to customize the standard library on mainstream platforms.</description><guid isPermaLink="false">277652ec-bbeb-454c-85da-766438600d47</guid><pubDate>Fri,  6 Apr 2018 00:00:00 +0000</pubDate><dc:creator>Aaron Turon</dc:creator></item><item><title>A Formal Look at Pinning</title><link>https://www.ralfj.de/blog/2018/04/05/a-formal-look-at-pinning.html</link><description>Recently, a new API for “pinned references” has landed as a new unstable feature in the standard library. The purpose of these references is to express that the data at the memory it points to will not, ever, be moved elsewhere. Others have written about why this is important in the context of async IO. The purpose of this post is to take a closer, more formal look at that API: We are going to take a stab at extending the RustBelt model of types with support for pinning.</description><guid isPermaLink="false">8379ada9-43de-4764-88b1-aa3d24b114fd</guid><pubDate>Thu,  5 Apr 2018 00:00:00 +0200</pubDate><dc:creator>Ralf Jung</dc:creator></item><item><title>Corner Cutting vs. Productivity</title><link>https://llogiq.github.io/2018/04/03/corners.html</link><description>I recently got into a discussion with another very knowledgeable Rustacean, who (I paraphrase) claimed that Rust is about adding just enough roadblocks to keep you from cutting corners. This is a nice metaphor because it explains a lot: Rust may feel more cumbersome, because it won’t let you cut corners. On the other hand, once it compiles, many classes of errors will already have been taken care of, so your code will usually work as expected (or if you’re new to Rust, unexpectedly well).</description><guid isPermaLink="false">0dd3a72c-b43f-449a-92f3-fd25f164d224</guid><pubDate>Tue,  3 Apr 2018 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>Why We&apos;re Betting on Rust</title><link>https://www.uptime.ventures/blog/2018/04/why-were-betting-on-rust/</link><description>Considering how the state of our art is ever changing, I re-evaluate which tools belong in my box of gizmos each year as well. In the past, I’ve employed nginx as a high-performance cache and proxy, but it has been largely edged out by Envoy, which touts a hybrid non-blocking event model and has become wildly successful after being released in 2016. That very same principle, event-driven I/O, is the same reason I chose Node.js for most of the APIs I’ve developed since 2011. Even if practices change, we retain successful engineering models.

Beginning late last year, as I sketched our founding mission and initial product offerings, I also decided to select a new primary language that could handle most of our primary development tasks. After writing mostly JavaScript and compile-to-JS languages for half a decade, I longed for something more.</description><guid isPermaLink="false">680e9488-98e3-4a44-b462-761cf817ca10</guid><pubDate>Mon,  2 Apr 2018 00:00:00 +0000</pubDate><dc:creator>Nicholas Young</dc:creator></item><item><title>Removing Connection State In mob</title><link>http://hermanradtke.com/2018/03/29/removing-connection-state-from-mob.html</link><description>I started writing mob, an multi-echo server using mio, in 2015. I coded mob into a mostly working state and then left it mostly alone, only updating it to work with the latest stable mio. Recently, I started looking at the code again and had the urge to improve it. In a previous post, I talked about managing the state of connections in mob. In this post, I will walk through what I did to remove the need to track connection state. I wanted to remove the state because the implementation required an O(n) operation every tick of the mio event loop. It also added a fair amount of complexity to the code.</description><guid isPermaLink="false">d14f3e75-4047-441e-a67b-fc0de042845a</guid><pubDate>Thu, 29 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Herman J. Radtke III</dc:creator></item><item><title>Reliable Systems Series: Model-Based Testing</title><link>https://medium.com/@tylerneely/reliable-systems-series-model-based-property-testing-e89a433b360</link><description>This is the first article in a series on techniques I’ve found useful for making my projects more reliable. These techniques are used in the distributed systems, database, automotive, embedded, and aerospace fields, but if you build services, user interfaces, or generally anything stateful, I think you will find something useful along the way.</description><guid isPermaLink="false">dac3ce68-bfe5-4774-8b89-fb4351d53445</guid><pubDate>Wed, 28 Mar 2018 12:52:27 +0000</pubDate><dc:creator>Tyler Neely</dc:creator></item><item><title>Rust: First impressions from a C++ developer</title><link>http://templated-thoughts.blogspot.com.au/2018/03/rust-first-impressions-from-c-developer.html</link><description>I started learning Rust 2 weeks back (yay!!) whenever I got free time. And all the time that I spent  learning it has been worthwhile. This is not going to be a deep technical post, but just my impressions about Rust from where I come from (C++).</description><guid isPermaLink="false">5941ab41-5269-4401-9978-f6f389922443</guid><pubDate>Sat, 31 Mar 2018 00:43:00 -0700</pubDate><dc:creator>Arun Muralidharan</dc:creator></item><item><title>You can&apos;t Rust that</title><link>http://lucumr.pocoo.org/2018/3/31/you-cant-rust-that/</link><description>The last year has been fun because I could build a lot for really nice stuff for Sentry in Rust and for the first time the development experience was without bigger roadblocks. While we have been using Rust before it now feels different because the ecosystem is so much more stable and we ran less against language or tooling issues.

However talking to people new to Rust (and even brainstorming APIs with coworkers) it&apos;s hard to get rid of the feeling that Rust can be a mind bending adventure and that the best way to have a stress free experience is knowing upfront what you cannot (or should not attempt to) do. Knowing that certain things just cannot be done helps putting your mind back back on the right track.

So here are things not to do in Rust and what to do instead which I think should be better known.</description><guid isPermaLink="false">980f0166-c073-42bc-a1df-7dab36421e10</guid><pubDate>Sat, 31 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Armin Ronacher</dc:creator></item><item><title>I&apos;ve just learned Rust and I think I&apos;m in love</title><link>https://rskupnik.github.io/I-learned-rust-and-I-think-Im-in-love</link><description>I’ve decided to learn some Rust recently while working on the Stanford’s experimental course on operating systems. Here’s a list of things that I think are great about it.</description><guid isPermaLink="false">79ebe691-fe8b-46ea-806c-996919b730ca</guid><pubDate>Fri, 30 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Radosław Skupnik</dc:creator></item><item><title>Thoughts on Rust, a few thousand lines in</title><link>https://rcoh.me/posts/things-learned-first-thousand-lines-of-rust/</link><description>To say my first foray into Rust was a frustrating struggle would be an understatement. I picked a terrible first project that left me neck deep in Rust’s trickiest areas right off the bat. I was excited to try again. A few years ago I wrote Sumoshell, a CLI App for log analysis. I’d wanted to improve it for a while, so porting it to Rust seemed like a nice way to kill two birds with one stone.</description><guid isPermaLink="false">4a0c4c01-2597-4688-ac99-2726bb1a3505</guid><pubDate>Sat, 24 Mar 2018 12:56:00 -0700</pubDate><dc:creator>Russell Cohen</dc:creator></item><item><title>Memory Safety and Lifetimes in Rust</title><link>https://balu.github.io/lifetimes.html</link><description>A program is memory-safe if in any possible execution of the program , all expressions e in the program that refer to an object of type T resolve to an object of type T that has been initialized and not yet deallocated.

There are different ways to guarantee memory safety for all programs. One is to restrict the programming language and disallow pointers. But, this forces most programs to make unnecessary copies of data. Another strategy, called garbage collection, embeds a garbage collector with every program. The garbage collector periodically looks for objects in memory that cannot be accessed from the program and reclaims this memory. The drawbacks of this are the overhead of garbage collection and that deallocation of memory is no longer under the control of the programmer.</description><guid isPermaLink="false">dc304d16-2ec3-45b1-833b-a9536c1a7d95</guid><pubDate>Mon, 26 Feb 2018 18:52:22 +0000</pubDate><dc:creator>Balagopal Komarath</dc:creator></item><item><title>Announcing Rust 1.25</title><link>https://blog.rust-lang.org/2018/03/29/Rust-1.25.html</link><description>The Rust team is happy to announce a new version of Rust, 1.25.0. The last few releases have been relatively minor, but Rust 1.25 contains a bunch of stuff!</description><guid isPermaLink="false">2cadbd86-48ec-4fab-95bb-5959818d5747</guid><pubDate>Thu, 29 Mar 2018 00:00:00 +0000</pubDate><dc:creator>The Rust Core Team</dc:creator></item><item><title>Cargo got some new tricks, but is it still correct!?</title><link>https://www.reddit.com/r/rust/comments/87ss76/cargo_got_some_new_tricks_but_is_it_still_correct/</link><description>I have been working with @alexcrichton to improve the resolver in Cargo.</description><guid isPermaLink="false">04fdf0c8-05ab-46f3-b72d-c7e88eb6dc9b</guid><pubDate>Wed, 28 Mar 2018 15:25:46 +0000</pubDate><dc:creator>Eh2406</dc:creator></item><item><title>Closures 101</title><link>http://mttyng.com/closures-101/</link><description>Closures are an interesting CS concept and one that will frequently come up in interviews. I know I&apos;ve been asked, and have asked, questions about closures for frontend (Javascript) positions numerous times. And in all honesty they&apos;re a difficult concept to define, especially when you&apos;re under the scrutiny of an interviewer. In this post I&apos;d like to show how Rust leverages the concept of closures and why they might be used. But first, we need to discuss the concept of scope because it is so important for the full understanding of closures.</description><guid isPermaLink="false">d4574214-e1ca-4fe8-858b-b5c9c64046ab</guid><pubDate>Sun, 25 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Matt</dc:creator></item><item><title>Atomics ☢ and memory ordering</title><link>https://vorner.github.io/2018/03/25/Atomics.html</link><description>Taming multiple threads is a mess. Not only many things can happen all at once, but what you wrote in the code isn’t exactly what happens in the CPU. To gain some more performance, the compiler cheats if it thinks nobody is watching. It can reorder instructions or throw some of them out if they look useless. The same happens in the hardware. Furthermore, there isn’t just one RAM, but each memory location can live in different caches at each time and some of them are private to each CPU. It would not make do to publish all the local changes to one’s cache right away.</description><guid isPermaLink="false">eef1f270-fb75-475a-b10c-8e3813990362</guid><pubDate>Sun, 25 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Michal &apos;vorner&apos; Vaner</dc:creator></item><item><title>Refactoring some repetitive code to a Rust macro</title><link>https://people.gnome.org/~federico/blog/refactoring-some-repetitive-code-to-a-macro.html</link><description>I have started porting the code in librsvg that parses SVG&apos;s CSS properties from C to Rust. Many properties have symbolic values. StrokeLinejoin is the first property that I ported. First I had to write a little bunch of machinery to allow CSS properties to be kept in Rust-space instead of the main C structure that holds them (upcoming blog post about that). But for now, I just want to show how this boiled down to a macro after refactoring.</description><guid isPermaLink="false">ad4ba620-3dae-4618-abc7-e245c97369d3</guid><pubDate>Fri, 23 Mar 2018 11:01:30 -0600</pubDate><dc:creator>Federico Mena Quintero</dc:creator></item><item><title>Mutating Rust: Under Cover</title><link>https://llogiq.github.io/2018/03/25/cover.html</link><description>Any mutation testing tool worth its salt uses coverage to restrict the number of tests to run. mutagen is no exception, of course, so once we had a test runner, we wanted to extend it with coverage-based testing.</description><guid isPermaLink="false">bf2c60f0-b2be-44c4-ba38-dce0f5b2e041</guid><pubDate>Sun, 25 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>A look at Tokio: how this asynchronous event handler works (Russian)</title><link>https://habrahabr.ru/company/bitfury/blog/351824/</link><description>И для чего он используется в фреймворке для приватных блокчейнов Exonum Tokio — это фреймворк для разработки сетевых масштабируемых приложений на Rust,...</description><guid isPermaLink="false">9e02b413-b1dd-42a3-a970-2d7b89354c0c</guid><pubDate>Thu, 22 Mar 2018 16:46:00 +0000</pubDate><dc:creator>Алина Тестова</dc:creator></item><item><title>Python Idioms in Rust</title><link>http://benjamincongdon.me/blog/2018/03/23/Python-Idioms-in-Rust/</link><description>I’ve been going through a period of programming language wanderlust over the past couple months. Recently, I’ve been quite interested in Rust. Coming from Python, I’ve found a lot of Rust’s language features to be quite powerful.</description><guid isPermaLink="false">6cf2d39d-3ea9-4af4-b9c7-a368be610189</guid><pubDate>Fri, 23 Mar 2018 12:23:22 +0000</pubDate><dc:creator>Benjamin Congdon</dc:creator></item><item><title>From python to Go to Rust: an opinionated journey</title><link>http://tech.allo-media.net/point/of/view/2018/03/22/from-python-to-go-to-rust.html</link><description>When looking for a new backend language, I naturally went from Python to the new cool kid: Go. But after only one week of Go, I realised that Go was only half of a progress. Better suited to my needs than Python, but too far away from the developer experience I was enjoying when doing Elm in the frontend. So I gave Rust a try.</description><guid isPermaLink="false">93eaac73-c49e-4d21-8d11-f9ca7e40721c</guid><pubDate>Thu, 22 Mar 2018 09:00:00 +0100</pubDate><dc:creator>Allo-Media</dc:creator></item><item><title>Async/Await VI: 6 weeks of great progress</title><link>https://boats.gitlab.io/blog/post/2018-03-20-async-vi/</link><description>It’s hard to believe its been almost 6 weeks since the last post I made about async/await in Rust. So much has happened that these last several weeks have flown by. We’ve made exceptionally good progress on solving the problem laid out in the first post of this series, and I want to document it all for everyone.
Future and the pinning API Last month I wrote an RFC called “Standard library API for immovable types”.</description><guid isPermaLink="false">afdcd322-eab4-4363-be76-cecaa050e867</guid><pubDate>Tue, 20 Mar 2018 00:00:00 +0000</pubDate><dc:creator>boats</dc:creator></item><item><title>Type-directed metaprogramming in Rust</title><link>http://willcrichton.net/notes/type-directed-metaprogramming-in-rust/</link><description>I explore how to use Rust compiler internals to metaprogram Rust using information from the typechecker, e.g. to automatically insert garbage-collection into Rust code, and discuss the benefits and drawbacks of this approach.</description><guid isPermaLink="false">8bd1d21c-79d1-4470-9d49-907c26ab0057</guid><pubDate>Sun, 18 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Will Crichton</dc:creator></item><item><title>Putting bors on a PIP</title><link>http://aturon.github.io/2018/03/19/bors/</link><description>We have a problem: the average queue of ready-to-test PRs to the main Rust repo has been steadily growing for a year. And at the same time, the likelihood of merge conflicts is also growing, as we include more submodules and Cargo dependencies that require updates to Cargo.lock.</description><guid isPermaLink="false">03cf26ef-4e0f-4124-91ec-064467299583</guid><pubDate>Mon, 19 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Aaron Turon</dc:creator></item><item><title>Rust Lifetimes or: How I Learned to Stop Free-ing and Love the Borrow</title><link>http://mttyng.com/rust-lifetimes-or-how-i-learned-to-stop-free-ing-and-love-the-borrow/</link><description>To me one of the initial shocks of learning Rust was figuring out lifetimes. As a frontend-by-day developer I don&apos;t come face-to-face with the &apos;Double free&apos; and &apos;Use after free&apos; problems all that often. Actually, it could be easily argued that my backend-brethren don&apos;t really either or, for that matter, anyone who&apos;s typically dealing with a garbage collected language. I&apos;m looking over at you JS, Java, and Ruby devs. I&apos;d bet most neckbea.. *cough, excuse me, C developers are comfortable with these issues but alas, I am not. As such, lifetimes were kinda difficult to wrap my head around but I think I get them a little better now so let me try to explain.</description><guid isPermaLink="false">908c4bee-bf00-4e80-8136-9282eb8de6f6</guid><pubDate>Fri,  9 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Matt</dc:creator></item><item><title>What&apos;s a where clause?</title><link>http://mttyng.com/whats-a-where-clause/</link><description>I&apos;ve been trying to get a hang of some of the more advanced, and weird, concepts of Rust. With any new language it&apos;s a little difficult to know where to begin. How do you throw yourself into the deep-end of something without knowing where the deep-end is?</description><guid isPermaLink="false">1fe95cfd-488a-41a5-adca-a44d8f79c679</guid><pubDate>Tue, 20 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Matt</dc:creator></item><item><title>How Rust Implements Tagged Unions</title><link>http://patshaughnessy.net/2018/3/15/how-rust-implements-tagged-unions</link><description>The Rust compiler implements tagged unions, which prevent you from crashing your program by initializing a union with one variant and accessing it with another. Rust uses enum to improve on both C enums and C unions at the same time.</description><guid isPermaLink="false">f5ba053a-1bbb-465d-a430-55bd0a1d357a</guid><pubDate>Thu, 15 Mar 2018 03:00:00 +0000</pubDate><dc:creator>Pat Shaughnessy</dc:creator></item><item><title>Deciding if two types are equal</title><link>https://llogiq.github.io/2018/03/15/types.html</link><description>mutagen until recently suffered a bug that rendered both the return input and the interchange arguments mutation inapplicable.

To explain, the former mutation compares each input type with the return type and allows code to return inputs of the same type, if any, while the latter compares input arguments’ types and exchanges two equally-typed inputs.</description><guid isPermaLink="false">81e14040-a499-4802-9d1b-c58deeb2be79</guid><pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>A Comparison Between Rust and Erlang</title><link>https://www.infoq.com/articles/rust-erlang-comparison</link><description>This article will focus on a comparison between Erlang and Rust, detailing their similarities and differences. It may be interesting to both Erlang developers looking into Rust and Rust developers looking into Erlang. A final section will detail more about each of the language capabilities and shortcomings and argue for the possibility of leveraging both languages&apos; strengths in the same project.</description><guid isPermaLink="false">eabc9692-30cf-4511-89f4-9068b46aadd8</guid><pubDate>Tue, 13 Mar 2018 00:00:00 +0000</pubDate><dc:creator> Krishna Kumar Thokala</dc:creator></item><item><title>How to use external crates with macros in Rust</title><link>https://medium.com/@kimond/how-to-use-external-crates-with-our-macros-in-rust-6dfe025351e0</link><description>A simple approach to use external crates with our macros in Rust.</description><guid isPermaLink="false">24afdde0-ef13-4e26-b39e-b2f9d52ab901</guid><pubDate>Wed, 14 Mar 2018 12:45:30 +0000</pubDate><dc:creator>Kim Desrosiers</dc:creator></item><item><title>mutagen: Pattern Boldness</title><link>http://llogiq.github.io/2018/03/13/patterns.html</link><description>At the moment, mutagen only considers top-level idents in function arguments (e.g.foo(x: X, y: Y)), but function arguments are actually patterns, so we could have foo((x, y): (X, Y)) or bar(Bar { bla, bazz } : Bar). For now, this means we have no type information for either of those examples.</description><guid isPermaLink="false">962abf61-6061-4e8d-90b1-1d3ba90d5e1d</guid><pubDate>Tue, 13 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>Rust&apos;s 2018 Roadmap</title><link>https://blog.rust-lang.org/2018/03/12/roadmap.html</link><description>Each year the Rust community comes together to set out a roadmap. This year, in addition to the survey, we put out a call for blog posts in December, which resulted in 100 blog posts written over the span of a few weeks. The end result is the recently-merged 2018 roadmap RFC.</description><guid isPermaLink="false">4ed8ee1b-6f71-4ac5-b7e5-142509562231</guid><pubDate>Mon, 12 Mar 2018 00:00:00 +0000</pubDate><dc:creator>The Rust Core Team</dc:creator></item><item><title>Should You Learn Rust?</title><link>https://vorner.github.io/2018/03/11/Should-you-learn-rust.html</link><description>Oftentimes, I see a variant of this question posted or asked somewhere. In general, most of the times I think the answer is „Yes“, but maybe for reasons other than you’d think at first.</description><guid isPermaLink="false">90d39fbf-c75d-4943-9069-4b65d11b1be9</guid><pubDate>Sun, 11 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Michal &apos;vorner&apos; Vaner</dc:creator></item><item><title>The Union of Parallel Universes</title><link>https://quietmisdreavus.net/code/2018/03/09/the-union-of-parallel-universes/</link><description>Rustdoc has a pretty powerful feature that feels pretty unknown. It doesn’t help that it’s currently restricted by a nightly feature gate, but it’s still cool enough that I want to talk about it.</description><guid isPermaLink="false">bd4b8e12-dd4d-4bf8-b553-f5f912ec4e87</guid><pubDate>Fri,  9 Mar 2018 14:30:00 -0600</pubDate><dc:creator>QuietMisdreavus</dc:creator></item><item><title>Exploring Function Overloading</title><link>http://casualhacks.net/blog/2018-03-10/exploring-function-overloading/</link><description>Overloading is the ability to create multiple functions of the same name with different implementations.

Rust has no traditional overloading, you cannot define two methods with the same name. The compiler will complain that you have a duplicate definition regardless of the different argument types.</description><guid isPermaLink="false">db7ea4c5-14ae-4a9d-9bf4-a314c20225f7</guid><pubDate>Sat, 10 Mar 2018 00:00:00 +0900</pubDate><dc:creator>Casper</dc:creator></item><item><title>Redefining Failure</title><link>https://epage.github.io/blog/2018/03/redefining-failure/</link><description>I recently got the chance to redo the error handling in two different crates I help maintain. For liquid, I decided to write the error types by hand rather than use something like error-chain. In the case of assert_cli, I decided to finally give failure a try.</description><guid isPermaLink="false">0d2f8636-6f6c-42f3-8159-beac5a856009</guid><pubDate>Fri,  9 Mar 2018 03:08:23 +0000</pubDate><dc:creator>Ed Page</dc:creator></item><item><title>Coping with Mutable State in Multiple Threads with Rust</title><link>https://medium.com/@KevinHoffman/coping-with-mutable-state-in-multiple-threads-with-rust-9059c83b6c01</link><description>One of the value propositions most frequently lauded by Rust developers is its freedom from data races. The compiler will literally not allow you to build code that could ever produce a situation where two threads can mutate the same data.</description><guid isPermaLink="false">8da41ef1-4c51-4269-bec3-fc377a0f387f</guid><pubDate>Mon,  5 Mar 2018 17:42:58 +0000</pubDate><dc:creator>Kevin Hoffman</dc:creator></item><item><title>Getting A Handle On Things</title><link>https://eno.space/blog/2018/03/Getting-a-handle-on-things</link><description>Today we will take a very simple intrusive linked list written in Rust and make it safe. Kind of, anyway.

Before we start making something safe we need an unsafe thing to make safe. Let’s not pretend that what we are doing here is the least bit useful, let us instead do it just for the fun of it. (What we are doing actually is useful, the explanation of which this margin is too narrow to contain.)</description><guid isPermaLink="false">79704e4b-5e9f-4366-84a8-53d5a3431e2f</guid><pubDate>Sat,  3 Mar 2018 00:00:00 +0100</pubDate><dc:creator>@u0060</dc:creator></item><item><title>Compiling Cargo crates natively with Meson</title><link>https://nibblestew.blogspot.com.au/2018/03/compiling-cargo-crates-natively-with.html</link><description>Recently we have been having discussions about how Rust and Meson should work together, especially for mixed language projects. One thing which multiple people have told me (over a time span of several years, actually) is that Rust is Special in that everyone uses crates for everything. Thus there is no point in having any sort of Rust support, the only true way is to blindly call Cargo and have it do everything exactly the way it wants to.

This seems like a reasonable recommendation so I did what every reasonable person would do and accepted this as is.

But then curiosity takes hold of you and you start to wonder. Is that really the case?</description><guid isPermaLink="false">0c9a85c5-9017-4922-b07a-050f36b8db84</guid><pubDate>Sun,  4 Mar 2018 05:35:00 -0800</pubDate><dc:creator>Jussi</dc:creator></item><item><title>Encheapening Cernan Internal Metrics</title><link>http://blog.troutwine.us/2017/08/31/encheapening-cernan-internal-metrics/</link><description>In the new 0.7.x series of cernan we stumbled on a neat, cheap approach for making internal metrics available inside a rust codebase, an approach that has legs in other projects, I&apos;d say. This is going to be a quick note describing what cernan is, what we were doing before and how our current approach works.</description><guid isPermaLink="false">85925a6b-30c1-4c0f-8caf-b6ccd9e3e19c</guid><pubDate>Sun,  4 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Brian L. Troutwine</dc:creator></item><item><title>Why Rust Has Macros</title><link>https://kasma1990.gitlab.io/2018/03/04/why-rust-has-macros/</link><description>When I recently told a coworker that Rust has macros, his first reaction was that this was bad. Previously I would have had the same reaction, but a part of what learning Rust has taught me is that macros don’t need to be bad. This post exists to help explain why that is, by diving into what problems macros solve, with a brief look at their downsides as well. In other words, this post is not a technical deep dive on how macros work, but focuses on the use cases for macros, and doesn’t require much knowledge about Rust to follow.</description><guid isPermaLink="false">c59a9688-62e5-4919-8687-e5ff82c3c5a3</guid><pubDate>Sun,  4 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Kasper Andersen</dc:creator></item><item><title>Serializing awkward data with serde</title><link>http://zork.net/~st/jottings/Serializing_awkward_data_with_serde.html</link><description>Recently I’ve been writing Rust code to work with a third-party data source in TOML format. In other languages I’d just load the data with some standard TOML library and have my program rummage through it, but I’ve been hearing lovely things about the Rust serialization library serde, so I figured I’d try it out.</description><guid isPermaLink="false">95bd2ff7-1a99-4092-931a-b17d782282d3</guid><pubDate>Sun,  4 Mar 2018 07:43:09 +0000</pubDate><dc:creator>Screwtape</dc:creator></item><item><title>Making a Brainf*ck to C Compiler in Rust</title><link>https://medium.com/@CanHasCommunism/making-a-brainf-ck-to-c-compiler-in-rust-10f0c01a282d</link><description>Let’s make a tokenizer and code generator to understand the basics behind tiny compilers.</description><guid isPermaLink="false">39d1ac9b-501b-46c3-b2e6-68f2d4aabe1d</guid><pubDate>Sat,  3 Mar 2018 18:13:20 +0000</pubDate><dc:creator>Aesl</dc:creator></item><item><title>Opportunistic Mutations</title><link>https://llogiq.github.io/2018/03/03/opportune.html</link><description>As you may know, my current mutagen project deals with mutation testing in Rust. However, as I remarked, Rust’s famed flexibility leaves us little room to do mutations while keeping the type checker happy. For example, other mutation testing frameworks can mutate x + y to x - y.

This is an interesting mutation, because it’s so easy to do in languages like Java, which have full type information available at the bytecode level and so hard to do in Rust, because the std::ops traits make everything so hecking flexible.</description><guid isPermaLink="false">2f386775-d0a5-474b-a9de-c14af7453c40</guid><pubDate>Sat,  3 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>Stopping a Rust worker</title><link>https://matklad.github.io/2018/03/02/stopping-a-rust-worker.html</link><description>This is a small post about a specific pattern for cancellation in the Rust programming language. The pattern is simple and elegant, but it’s rather difficult to come up with it by yourself.</description><guid isPermaLink="false">407d3ba2-d0af-4121-b13a-468b1f0f66cd</guid><pubDate>Fri,  2 Mar 2018 20:11:50 +0000</pubDate><dc:creator>Aleksey Kladov</dc:creator></item><item><title>Docker Multi-Stage Build</title><link>https://blog.jawg.io/docker-multi-stage-build/</link><description>On June 13, 2017 took place the Paris Container Day. They unveiled a new docker feature: multi-stage build. That&apos;s the subject of this article.</description><guid isPermaLink="false">ab076ead-649f-47ff-8fa2-a7c243ba3dca</guid><pubDate>Thu,  1 Mar 2018 14:00:00 +0000</pubDate><dc:creator>Jones Magloire</dc:creator></item><item><title>Object Shadowing for Serialization of Complex Types</title><link>https://commiebstrd.github.io/rustlang/serde/json/2018/03/01/object-shadowing.html</link><description>Presently, I’m busy writing a capture the flag (CTF) scoreboard, it requires rather complex structures and relationships with other internal objects. Being a security event, I’d also like to maintain explicit control of user data. While serialization in Rust has come a significant way, leveraging auto-generation presents some issues.</description><guid isPermaLink="false">257617e2-c1fe-44c7-9cb9-7c07495b96ec</guid><pubDate>Thu,  1 Mar 2018 05:00:00 +0000</pubDate><dc:creator>Spenser Reinhardt</dc:creator></item><item><title>Add examples to your Rust libraries</title><link>http://xion.io/post/code/rust-examples.html</link><description>When you’re writing a library for other programs to depend on, it is paramount to think how the developers are going to use it in their code.

The best way to ensure they have a pleasant experience is to put yourself in their shoes. Forget the internal details of your package, and consider only its outward interface. Then, come up with a realistic use case and just implement it.

In other words, you should create complete, end-to-end, and (somewhat) usable example applications.</description><guid isPermaLink="false">ca98f7f9-8927-48e9-8028-15e81f20f8a6</guid><pubDate>Wed, 28 Feb 2018 08:37:00 +0100</pubDate><dc:creator>Karol Kuczmarski</dc:creator></item><item><title>My Rust Dockerfile</title><link>https://blog.sedrik.se/posts/my-docker-setup-for-rust/</link><description>Lets deploy small docker images for Rust</description><guid isPermaLink="false">d001ce02-fbfb-4a08-8389-0f713b09bf72</guid><pubDate>Mon, 26 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Fredrik Park</dc:creator></item><item><title>Writing a doubly linked list in Rust is easy</title><link>https://www.reddit.com/r/rust/comments/7zsy72/writing_a_doubly_linked_list_in_rust_is_easy/</link><description>This is a response to the recently submitted blog post titled Why Writing a Linked List in (safe) Rust is So Damned Hard. The post on Reddit was even more dramatic: Why Writing a Linked List in Rust is Basically Impossible.

I see exaggarated claims like these very often - and strongly disagree. Writing a doubly linked list in Rust is not hard - in fact, it&apos;s fairly easy! The best strategy, in my opinion, is creating a vector for allocating nodes and using indices instead of pointers. This strategy is often overlooked, getting a &apos;honorauble mention&apos; at best.</description><guid isPermaLink="false">cec6c9fd-a92b-4f5a-8d9b-9b84c263c48f</guid><pubDate>Sat, 24 Feb 2018 00:35:43 +0000</pubDate><dc:creator>/u/stjepang</dc:creator></item><item><title>Reasoning with Types in Rust</title><link>https://aaronweiss.us/posts/2018-02-26-reasoning-with-types-in-rust.html</link><description>Rust is a modern programming language which is marketed primarily on the basis of its very nice type system, and I’d like to tell you about how you can use this type system to reason about your programs in interesting ways. Most of the time when its type system is discussed, the focus is on its guarantee of data race freedom and ability to enable so-called fearless concurrency (and rightfully so—this is a place where Rust truly shines!). Today, I have a different focus in mind, characterized perhaps most succinctly as follows:</description><guid isPermaLink="false">5e572868-98d0-4944-b897-14cca13a39a4</guid><pubDate>Mon, 26 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Aaron Weiss</dc:creator></item><item><title>Pushing Rust To 2019</title><link>https://medium.com/@dumindu/pushing-rust-to-2019-9616d82172d3</link><description>Some of these suggestions are not entirely new and have been added as posts/ comments on /r/rust, Github threads. But I believe better listing down all in a one place, because now we are in the correct time even I am bit late.</description><guid isPermaLink="false">0493daa3-4abb-46eb-82de-e75daea4bbac</guid><pubDate>Fri, 23 Feb 2018 15:44:16 +0000</pubDate><dc:creator>Dumindu Madunuwan</dc:creator></item><item><title>How doctests get made</title><link>https://quietmisdreavus.net/code/2018/02/23/how-the-doctests-get-made/</link><description>One of rustdoc’s greatest features is the ability to take code samples within your documentation and run them like tests. This ensures that all your samples stay up to date with your library’s API changes. However, there are some steps that need to happen to massage these “doctests” into something that can be compiled and run like a regular program.</description><guid isPermaLink="false">516e4eaf-1ce1-49be-a457-a471e9f97329</guid><pubDate>Fri, 23 Feb 2018 16:00:00 -0600</pubDate><dc:creator>QuietMisdreavus</dc:creator></item><item><title>Rust Typestates</title><link>https://yoric.github.io/post/rust-typestate/</link><description>A long time ago, the Rust language was a language with typestate. Officially, typestates were dropped long before Rust 1.0. In this entry, I’ll get you in on the worst kept secret of the Rust community: Rust still has typestates.</description><guid isPermaLink="false">450ba7fc-c3ea-4af5-bda4-06842f062de8</guid><pubDate>Thu, 22 Feb 2018 15:15:55 +0100</pubDate><dc:creator>David Teller</dc:creator></item><item><title>Why Writing a Linked List in Rust is Basically Impossible [in safe Rust]</title><link>https://rcoh.me/posts/rust-linked-list-basically-impossible/</link><description>Before I start this post, let me preface it by saying that I’m not an experienced Rustacean by any means. Errata and corrections are appreciated. This post is aimed at helping other fledgling rust-learners avoid my mistake. First, by helping Rust learners pick good introductory projects that will fit naturally in idiomatic rust. Second, by helping Rust learners start building Rust-friendly design intuition. I’d heard about Rust and it’s inscrutable borrow checker for years, but after reading a few blog posts about compiler error improvements, I figured it might be user-friendly enough to give it a try.</description><guid isPermaLink="false">45772a5b-1f22-4db9-9eee-f888c0c82660</guid><pubDate>Tue, 20 Feb 2018 08:55:56 -0800</pubDate><dc:creator>Russell Cohen</dc:creator></item><item><title>Rust for Cross-Language System Libraries</title><link>https://libpasta.github.io/blog/bindings/</link><description>We have been building libpasta as a simple, usable solution to password hashing and migration. The goal for libpasta is to be a cross-platform, cross-language system library. libpasta is written in Rust, exports a C-style API, and builds to a static/shared library. Most languages support calling external libraries through foreign function interfaces (FFIs), and the end result can be seen in the documentation where each language has access to the libpasta functionality.</description><guid isPermaLink="false">3dc17991-d359-4205-917a-80b37a564b37</guid><pubDate>Wed, 21 Feb 2018 00:00:00 +0000</pubDate><dc:creator>libpasta</dc:creator></item><item><title>Snips Uses Rust to Build an Embedded Voice Assistant</title><link>https://blog.mozilla.org/blog/2018/02/21/snips-uses-rust-build-embedded-voice-assistant/</link><description>The team at Paris-based Snips has created a voice assistant that can be embedded in a single device or used in a home network to control lights, thermostat, music, and more. You can build a home hub on a Raspberry Pi and ask it for a weather report, to play your favorite song, or to brew up a double espresso. Manufacturers like Keecker are adding Snips’ technology to products like multimedia home robots. And Snips works closely with leaders across the value chain, like NVIDIA, EBV, and Analog Devices, in order to voice-enable an increasingly wider range of device types, from speakers to home automation systems to cars.</description><guid isPermaLink="false">8e33c7c4-2788-418b-8e47-ca8990ae0d38</guid><pubDate>Wed, 21 Feb 2018 12:34:56 -0800</pubDate><dc:creator>Judy DeMocker</dc:creator></item><item><title>Using macro to generate generic docs?</title><link>https://blog.guillaume-gomez.fr/articles/2018-02-19+Using+macro+to+generate+generic+docs%3F</link><description>We were recently able to finally make the docs for integer primitive types much more accurate (thanks to @antoyo!). Now, the code examples match the type for which they&apos;re written. No more i32 examples for i128 (I think you got the idea at this point)! Now, I think a few people might be interested by the method we used to achieve such a result so let&apos;s talk about it.</description><guid isPermaLink="false">c078b1d0-a902-42c5-84d0-5d262146e64c</guid><pubDate>Mon, 19 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Guillaume Gomez</dc:creator></item><item><title>Ferrous Oxide For Jaguars And Incremented Crocodiles</title><link>https://eno.space/blog/2018/02/Ferrous-oxide-for-jaguars-and-incremented-crocodiles</link><description>Caveat lector: the primary purpose of the article is to introduce a reader proficient in one of the popular object-oriented languages how not to program in Rust. While each feature of the language will be briefly introduced where it is used, no great efforts will be made to explain the feature in detail. Links to the Rust book should provide that.</description><guid isPermaLink="false">5ecd2c77-20dd-4fd5-84a7-6c8e2364ebde</guid><pubDate>Thu, 15 Feb 2018 00:00:00 +0100</pubDate><dc:creator>@u0060</dc:creator></item><item><title>Rust things I miss in C</title><link>https://people.gnome.org/~federico/blog/rust-things-i-miss-in-c.html</link><description>Librsvg feels like it is reaching a tipping point, where suddenly it seems like it would be easier to just port some major parts from C to Rust than to just add accessors for them. Also, more and more of the meat of the library is in Rust now. I&apos;m switching back and forth a lot between C and Rust these days, and C feels very, very primitive these days.</description><guid isPermaLink="false">6d0e61c5-087e-48dc-abd8-ded4f3e43a8a</guid><pubDate>Sun, 18 Feb 2018 21:26:04 -0600</pubDate><dc:creator>Federico Mena Quintero</dc:creator></item><item><title>Sorting in Rust: Selection, Insertion, and Counting Sort</title><link>https://medium.com/@spyr1014/sorting-in-rust-selection-insertion-and-counting-sort-2c4d3575e364</link><description>Sorting is an invaluable skill and often covered early in a computer science curriculum. Have you ever tried to look up a friends phone number in an unsorted list!? You’d have to look at every single entry. Sorting creates all sorts of ways to access data quicker.</description><guid isPermaLink="false">f77cc701-eca9-4b85-a450-dd10c1766966</guid><pubDate>Sun, 18 Feb 2018 23:57:10 +0000</pubDate><dc:creator>Andrew Jakubowicz</dc:creator></item><item><title>Borrow cycles in Rust: arenas v.s. drop-checking</title><link>https://exyr.org/2018/rust-arenas-vs-dropck/</link><description>Ownership and borrowing are the fundamentals of data structures in Rust. However, both taking owneship of a value (moving it) or taking a reference to it can only happen after the value was created. This ordering seems to prevent having any cycle in a data structure, even though that’s sometimes useful or necessary. For example in a web page’s content tree, from any DOM node, one can easily access (if any) its first and last child, previous and next sibling, (so children of a node form a doubly-linked list) and parent. Some other applications might need to manipulate arbitrary graphs in their full generality.</description><guid isPermaLink="false">ff94e8a6-c203-4cbe-af46-8f99e2896dd8</guid><pubDate>Sat, 17 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Simon Sapin</dc:creator></item><item><title>&quot;The Expressive C++17 Coding Challenge (in Rust)&quot; Revisited</title><link>http://words.steveklabnik.com/the-expressive-c-17-coding-challenge-in-rust-revisited</link><description>In October of last year, I wrote a post, “The Expressive C++17 Coding Challenge (in Rust)”. For various reasons, it got brought up again in the D world, and seb has written a new post. It’s good, you should check it out! However, it links to my gist, not my blog post. As I said back then: I held myself to the same constraints as the original contest; no external packages is a bit painful in Rust, but it’s not too bad. Mostly it would let me eliminate boilerplate while also improving correctness, and making the code a bit shorter. So, that got me thinking: What would this look like if I could use external packages? I took about an hour, and knocked it out. I have two versions to show you today, one where I pay no attention to allocations, and one where it’s zero-allocation.</description><guid isPermaLink="false">938457b4-8905-4954-9007-88c80a2c24d6</guid><pubDate>Wed, 14 Feb 2018 10:12:15 -0800</pubDate><dc:creator>Steve Klabnik</dc:creator></item><item><title>Reflecting on ppbert</title><link>https://vfoley.xyz/ppbert/</link><description>I had an itch: I was pretty-printing the BERT-encoded terms that we use in a production system at work and it was very slow. The Erlang shell took more than two minutes to dump the largest file. (It took about 0.1 second to read and parse the file; the rest was spent in io:format.) I decided to scratch that itch: I wrote ppbert, a command-line utility that reads BERT-encoded values and pretty-prints them. I’ve worked sporadically on ppbert for almost a year now, I use it daily at work, I’m happy with it, and I want to write about some of the things I learned during that journey.</description><guid isPermaLink="false">28ce1b60-8837-4443-87fb-669bf176db9b</guid><pubDate>Fri,  9 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Vincent Foley</dc:creator></item><item><title>Maximally minimal specialization: always applicable impls</title><link>http://smallcultfollowing.com/babysteps/blog/2018/02/09/maximally-minimal-specialization-always-applicable-impls/</link><description>So aturon wrote this beautiful post about what a good week it has been. In there, they wrote: &quot;Breakthrough #2: @nikomatsakis had a eureka moment and figured out a path to make specialization sound, while still supporting its most important use cases (blog post forthcoming!). Again, this suddenly puts specialization on the map for Rust Epoch 2018&quot;. Sheesh I wish they hadn’t written that! Now the pressure is on. Well, here goes nothing =).</description><guid isPermaLink="false">c7a9c9d2-8858-4f47-afa3-19ec1f2f6b86</guid><pubDate>Fri,  9 Feb 2018 00:00:00 -0500</pubDate><dc:creator>Niko Matsakis</dc:creator></item><item><title>Closing out an incredible week in Rust</title><link>http://aturon.github.io/2018/02/09/amazing-week/</link><description>This week has been so amazing that I just had to write about it. Here’s a quick list of some of what went down in one week:</description><guid isPermaLink="false">325af8a8-af88-4a07-9c8f-16d2865f01f3</guid><pubDate>Fri,  9 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Aaron Turon</dc:creator></item><item><title>Async/Await V: Getting back to the futures</title><link>https://boats.gitlab.io/blog/post/2018-02-08-async-v-getting-back-to-the-futures/</link><description>Two posts ago I proposed a particular interface for shipping self-referential generators this year. Immediately after that, eddyb showed me a better interface, which I described in the next post. Now, to tie everything together, its time to talk about how we can integrate this into the futures ecosystem. Starting point: this Generator API To begin, I want to document the generator API I’ll be using in this post, which is roughly what followed from my previous post:</description><guid isPermaLink="false">4924a3b4-b71f-4a15-ae2d-0a77bcb30e98</guid><pubDate>Thu,  8 Feb 2018 00:00:00 +0000</pubDate><dc:creator>boats</dc:creator></item><item><title>Async/Await IV: An Even Better Proposal</title><link>https://boats.gitlab.io/blog/post/2018-02-07-async-iv-an-even-better-proposal/</link><description>I did not plan to write this blog post. I thought that the fourth post in my series would explain how we could go from the generator API in my previous post to a futures API in which you don’t have to heap allocate every async call. But eddyb surprised me, and now I have to revisit the API in the previous post, because we can implement everything we need from immovability with a safe interface afterall.</description><guid isPermaLink="false">ac0c5546-f21b-4b47-b4a4-950464472aad</guid><pubDate>Wed,  7 Feb 2018 00:00:00 +0000</pubDate><dc:creator>boats</dc:creator></item><item><title>A vision for portability in Rust</title><link>http://aturon.github.io/2018/02/06/portability-vision/</link><description>TL;DR: This post proposes to deprecate the std facade, instead having a unified std that uses target- and capability-based cfgs to control API availability. Leave comments on internals!</description><guid isPermaLink="false">6e3c698d-7f42-43d4-9c08-2ee084945e5c</guid><pubDate>Tue,  6 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Aaron Turon</dc:creator></item><item><title>Rust Lifetimes for the Uninitialised</title><link>http://asquera.de/blog/2018-01-29/rust-lifetimes-for-the-uninitialised/</link><description>Lifetimes are a interesting subject: a lot of people seem to gain a day-to-day familiarity with them, without fully understanding what they are. Maybe, they are truly Rust&apos;s Monads. Let&apos;s talk about what they are, where you encounter them and then how to get competent with them.</description><guid isPermaLink="false">c0b3d7ad-673f-4eb9-aa54-45447d1eafb0</guid><pubDate>Mon, 29 Jan 2018 15:30:00 +0100</pubDate><dc:creator>Florian Gilcher</dc:creator></item><item><title>Introduction to Procedural Macros</title><link>https://tinkering.xyz/posts/introduction-to-proc-macros/</link><description>As a newcomer to Rust, I heard the phrase “procedural macro” thrown around a lot without really understanding what it meant. I figured that I would learn about them if I ever needed them. Well, I’m working on the guts of relm, and a large chunk of it is procedural macros. I’ve learned enough about procedural macros to be dangerous, so I thought I would pass on some knowledge.</description><guid isPermaLink="false">f4e99fe5-2dab-418d-9256-813a75036164</guid><pubDate>Sat,  3 Feb 2018 19:36:37 -0500</pubDate><dc:creator>Zach Mitchell</dc:creator></item><item><title>Async/Await III: Moving Forward with Something Shippable</title><link>https://boats.gitlab.io/blog/post/2018-01-30-async-iii-moving-forward/</link><description>In the first post, we looked at the relationship between generators and a more general notion of self-references. In the second post, we narrowed down exactly what problem we need to solve to make generators work, and talked about some solutions that we’ve considered but don’t feel like we could ship in the near future.
In the original post, I promised that I would have a near term solution by the end of this series.</description><guid isPermaLink="false">25060712-7d38-4492-991d-a52a9111891c</guid><pubDate>Sun,  4 Feb 2018 00:00:00 +0000</pubDate><dc:creator>boats</dc:creator></item></channel></rss>