{
  "version": "https://jsonfeed.org/version/1",
  "title": "Read Rust - Language",
  "home_page_url": "https://readrust.net/",
  "feed_url": "https://readrust.net/language/feed.json",
  "description": "Language posts on Read Rust",
  "author": {
    "name": "Wesley Moore",
    "url": "http://www.wezm.net/"
  },
  "items": [
    {
      "id": "80a9211d-dd65-4da8-b8d6-5d4223ee278d",
      "title": "Auditing popular Rust crates: how a one-line unsafe has nearly ruined everything",
      "content_text": "Following the actix-web incident (which is fixed now, at least mostly) I decided to poke other popular Rust libraries and see what comes of it.\n\nThe good news is I’ve poked at 6 popular crates now, and I’ve got not a single actually exploitable vulnerability. I am impressed. When I poked popular C libraries a few years ago it quickly ended in tears. The bad news is I’ve found one instance that was not a security vulnerability by sheer luck, plus a whole slew of denial-of-service bugs. And I can’t fix all of them by myself. Read on to find out how I did it, and how you can help!",
      "url": "https://medium.com/@shnatsel/auditing-popular-rust-crates-how-a-one-line-unsafe-has-nearly-ruined-everything-fab2d837ebb1",
      "date_published": "2018-07-19T01:38:11.806+00:00",
      "author": {
        "name": "Sergey \"Shnatsel\" Davidoff",
        "url": "https://medium.com/@shnatsel"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a81b111b-b3d6-4515-81bc-00d00bf62fb9",
      "title": "How to help test the 2018 edition",
      "content_text": "An edition brings together the features that have landed into a clear package, with fully updated documentation and tooling. By the end of the year we are planning to release the 2018 edition, our first since the Rust 1.0 release. You can currently opt-in to a preview of the 2018 edition to try it out and help test it.\n\nIn fact, we really need help testing it out! Once you’ve turned it on and seen its wonderful new features, what then? Here we’ve got some specific things we’d like you to test.",
      "url": "https://www.ncameron.org/blog/how-to-help-test-the-2018-edition/",
      "date_published": "2018-07-18T03:08:04+00:00",
      "author": {
        "name": "Nick Cameron",
        "url": "http://www.ncameron.org/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "fbdc0364-12e8-49f4-914f-b3c4f17d43f0",
      "title": "Hello Content-o-Tron",
      "content_text": "Content-o-Tron is a project to help amplify the lesser heard voices in the Rust community.\n\nWe are able to do this by providing editorial assistance and technical reviews of draft blog posts.\n\nOnce your blog post is ready to publish, we will ensure it is disseminated through various channels such as Read Rust, MozHacks, social networks and of course the Rust Community’s own blog on community.rs.",
      "url": "http://blog.community.rs/content-team/2018/07/16/hello-content-o-tron.html",
      "date_published": "2018-07-16T00:00:00+00:00",
      "author": {
        "name": "Mark Sta Ana",
        "url": "http://blog.community.rs/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d52613f9-60c7-4448-89ed-72cd3da79346",
      "title": "Why I love Rust",
      "content_text": "I spent much of my free time over the past year learning Rust, and while it’s been a difficult language to fully grasp (it’s still a work in progress), I find it incredibly rewarding to write in. I also have had many conversations with people who don’t know much about Rust and are curious about the problems it solves.\n\nThis is my take on why Rust is important, and why I have fallen in love with the language.",
      "url": "https://alexkitchens.net/2018/07/06/why-i-love-rust.html",
      "date_published": "2018-07-06T08:46:39+00:00",
      "author": {
        "name": "Alex Kitchens",
        "url": "https://alexkitchens.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ca7cc808-b6f7-4650-a219-b2c92be95460",
      "title": "Rust: Raw string literals",
      "content_text": "While working with Rust, you will often come across r#\"something like this\"#, especially when working with JSON and TOML files. It defines a raw string literal. When would you use a raw string literal and what makes a valid raw string literal?",
      "url": "https://medium.com/@rahulthakoor/rust-raw-string-literals-9579c4feb231",
      "date_published": "2018-07-05T13:26:49.039+00:00",
      "author": {
        "name": "Rahul Thakoor",
        "url": "https://medium.com/@rahulthakoor"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "54242603-6ea7-4c99-8826-bbda3f8f63db",
      "title": "Surface Rust: The Missing IDE",
      "content_text": "This week I decided to do a little hacking on Rust. I thought I’d write down my first impressions of the language.",
      "url": "https://medium.com/@wolfshirts/surface-rust-6470d0075721",
      "date_published": "2018-07-04T21:45:48.367+00:00",
      "author": {
        "name": "@wolfshirts",
        "url": "https://medium.com/@wolfshirts"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "b2fbac94-27b1-4c37-8c21-ead67edecf43",
      "title": "The Tale of a Bug in Arc: Synchronization and Data Races",
      "content_text": "While I was busy doing Rust-unrelated research, RustBelt continues to move and recently found another bug (after a missing impl !Sync that we found previously): It turns out that Arc::get_mut did not perform sufficient synchronization, leading to a data race.",
      "url": "https://www.ralfj.de/blog/2018/07/13/arc-synchronization.html",
      "date_published": "2018-07-13T00:00:00+00:00",
      "author": {
        "name": "Ralf Jung",
        "url": "https://www.ralfj.de/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "1b9d4f29-d237-4f3d-bc55-23b9ab2c5d77",
      "title": "Why Rust?",
      "content_text": "Programming is hard. Not because our hardware is complex, but simply because we’re all humans. Our attention span is limited, our memory is volatile — in other words, we tend to make mistakes.",
      "url": "https://medium.com/paritytech/why-rust-846fd3320d3f",
      "date_published": "2018-07-04T07:43:11.858+00:00",
      "author": {
        "name": "Dmitriy Kashitsyn",
        "url": "https://medium.com/@0x7cfe"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "f12f8561-c983-40b4-a7b4-9da8b350b33d",
      "title": "Idioms of Dynamic Languages",
      "content_text": "Programmers think dynamic languages like Python are easier to use than static ones, but why? I look at uniquely dynamic programming idioms and their static alternatives, identifying a few broad trends that impact language usability.",
      "url": "http://willcrichton.net/notes/idioms-of-dynamic-languages/",
      "date_published": "2018-07-01T00:00:00+00:00",
      "author": {
        "name": "Will Crichton",
        "url": "http://willcrichton.net/notes/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "3b171674-7223-48e4-95da-5f268ec6fa1f",
      "title": "llvm-tools: a new rustup component for binary inspection and profiling",
      "content_text": "Recent nightly releases provide an opt-in llvm-tools rustup component which you can install using the command: rustup component add llvm-tools. This component contains the following LLVM tools: llvm-nm, llvm-objcopy, llvm-objdump, llvm-profdata, and llvm-size. Most of these tools are LLVM alternatives to GNU binutils. The main advantage of these LLVM tools is that they support all the architectures that the Rust compiler supports.",
      "url": "https://internals.rust-lang.org/t/llvm-tools-a-new-rustup-component-for-binary-inspection-objdump-nm-size-and-profiling-profdata/7830",
      "date_published": "2018-06-29T11:22:00+00:00",
      "author": {
        "name": "Jorge Aparicio",
        "url": "http://blog.japaric.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "19aba600-95ff-4ba2-920f-0db67b3755e4",
      "title": "New Photon Release of Eclipse IDE Ships With Full Rust Support | ",
      "content_text": "The release delivers native Eclipse IDE experiences for Rust and C# through Language Server based plugins. The Language Server Protocol (LSP) ecosystem delivers editing support for popular and emerging programming languages. Combined with the move to a quarterly rolling release cadence, the LSP focus demonstrates a commitment to keeping pace with evolving developer and commercial needs.",
      "url": "https://www.eclipse.org/org/press-release/20180627_new-photon-release-of-eclipse-ide-ships-with-full-rust-support.php",
      "date_published": "2018-06-27T00:00:00+00:00",
      "author": {
        "name": "The Eclipse Foundation",
        "url": "https://www.eclipse.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "696ba27d-cdab-400f-9e86-a138422c2154",
      "title": "A Self-ish Bug",
      "content_text": "I recently found a bug in mutagen: The “exchange arguments” mutation was actually ineffective. I was in the process of refactoring the code to pull coverage reporting into the mutagen calls (to reduce the amount of code generated), so the report_coverage call was to go away anyway. Except this bug masked another, more insiduous one: When I refactored, I found that one of the test would no longer compile methods with self arguments, running into Error E0424 (self keyword used in static method). Consider me confused.",
      "url": "https://llogiq.github.io/2018/06/28/self-bug.html",
      "date_published": "2018-06-28T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "0a781f91-aca4-47ac-81d4-f9f606f33d0f",
      "title": "A Rusty Go at Channels",
      "content_text": "Channels Channels are a useful concurrency primitive that enable separate processes to safely communicate without the need for explicit synchronization. The term processes is used here to loosely describe independent threads of execution within a program. This can be an OS level thread or a runtime level thread. Channels can be seen as a pipe to connect these processes and allow them to share memory with one another. For example a program could spawn any number of processes along with a channel to transmit results that it gathers.",
      "url": "https://gsquire.github.io/static/post/a-rusty-go-at-channels/",
      "date_published": "2018-06-24T10:44:31-07:00",
      "author": {
        "name": "Garrett Squire",
        "url": "https://gsquire.github.io/static/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "fa4c6fb5-3c9e-4831-86b1-3585c08398de",
      "title": "Programming Servo: The script event-loop",
      "content_text": "One thing I have come to appreciate over time in the design of Servo, is the concurrency story. Basically, it’s pretty much all done using channels(and their multi-process counterpart).\n\nWhat is so great about channels vs shared mutable state? One thing is, it makes it easier to reason about how various threads will synchronize their behavior as they go on about their business.\n\nThe way it’s done in Servo is by combining event-loops with multi-threading/processing. What does that mean?",
      "url": "https://medium.com/@polyglot_factotum/programming-servo-the-script-event-loop-be687b985b3e",
      "date_published": "2018-06-28T05:17:48.726+00:00",
      "author": {
        "name": "Gregory Terzian",
        "url": "https://medium.com/@polyglot_factotum"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "638f5073-3504-43de-af0b-dbce4b5ae6c6",
      "title": "Failure. Or: why Rust is probably the best programming language ever created",
      "content_text": "This post is two stories. One is about accepting and recognising personal failure, reflecting and growing from it; the other is about an incredibly and seemingly endlessly powerful programming language, called Rust.",
      "url": "https://spacekookie.de/blog/failure-or-why-rust-is-probably-the-best-programming-language-ever-created/",
      "date_published": "2018-03-11T00:00:00+00:00",
      "author": {
        "name": "Katharina Fey",
        "url": "https://spacekookie.de/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e9ac81fa-8018-4bb1-91a2-cfd0b705f780",
      "title": "Why choose Rust?",
      "content_text": "Many of the candidates we interview for a position at PassFort are intrigued by the fact that we use Rust, a language which is only three years old (since its 1.0 release).\n\nDespite its relatively young age, Rust has been voted the “most loved” language in the StackOverflow developer survey every one of those three years - an impressive feat!\n\nHowever, it’s not enough for a language to be well liked: the programming ecosystem changes rapidly, and many of these developers are rightly afraid to jump blindly onto the latest bandwagon. We chose Rust not because it is popular, but because we believe it is the best tool for the job we have to do, and I hope to explain that reasoning now.",
      "url": "https://blog.passfort.com/why-choose-rust/",
      "date_published": "2018-06-26T16:00:00+00:00",
      "author": {
        "name": "PassFort",
        "url": "https://blog.passfort.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "34e39003-edb1-4232-ad2a-aae9d4868d81",
      "title": "Compiler fuzzing, part 1",
      "content_text": "Much has been written about fuzzing compilers already, but there is not a lot that I could find about fuzzing compilers using more modern fuzzing techniques where coverage information is fed back into the fuzzer to find more bugs.\n\nIf you know me at all, you know I'll throw anything I can get my hands on at AFL. So I tried gcc. (And clang, and rustc -- but more about Rust in a later post.)",
      "url": "http://www.vegardno.net/2018/06/compiler-fuzzing.html",
      "date_published": "2018-06-24T15:02:00+02:00",
      "author": {
        "name": "Vegard",
        "url": "http://www.blogger.com/profile/04821963505711884515"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "03d374fc-9500-42d8-8515-7f98447fd62a",
      "title": "Making Arc more atomic",
      "content_text": "This is a story of a tiny feature I was missing in Rust… so I created it (partly because I like the feature, because it felt wrong for Rust not to have it, but mostly for the practice and fun of beating a hard and interesting problem). You can read the story if you are interested about the behind the scenes, about the feature itself, how to use it or just for fun ☺.",
      "url": "https://vorner.github.io/2018/06/24/arc-more-atomic.html",
      "date_published": "2018-06-24T00:00:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "698090f0-fa77-43b5-aaed-dcd2b71d3c39",
      "title": "Rust 2018: an early preview",
      "content_text": "The Rust teams having been working hard to implement features of the 2018 edition. Today we have reached an important milestone: we are announcing that we have an alpha-quality preview of the 2018 edition ready for testing and feedback.\n\nThe preview presents a great opportunity for those of you using the stable channel to switch to nightly and try out how it feels to code in the new edition, both to help us fix bugs and to provide feedback – positive and negative – on features. Unfortunately, today’s nightly doesn’t work due to infrastructure issues, so you’ll need to run rustup install nightly-2018-06-20 in order to get a nightly that’ll work. If you’re already on the nightly channel, it’s likely that there’s no need to update the compiler.",
      "url": "https://internals.rust-lang.org/t/rust-2018-an-early-preview/7776",
      "date_published": "2018-06-23T08:19:19+10:00",
      "author": {
        "name": "Rust Team Members",
        "url": "https://internals.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "295dac4f-f095-4d04-b6ee-a6a2870cc7fb",
      "title": "Rust review: The ecosystem",
      "content_text": "In this part of the review, I would like to focus on Rust’s ecosystem: in other words, how Rust plays with other parts of a functioning system and how Rust’s standard library vs. external libraries interact with each other. There are a lot of pieces to cover in these areas and they have left me with mixed feelings. Let’s look at some.",
      "url": "http://julio.meroh.net/2018/06/rust-review-ecosystem.html",
      "date_published": "2018-06-22T09:00:00-04:00",
      "author": {
        "name": "Julio Merino",
        "url": "http://julio.meroh.net/series.html#Rust%20review"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "41f94ae9-ac3a-42fe-bc78-fbc6dab42d85",
      "title": "Announcing Rust 1.27",
      "content_text": "This release has two big language features that people have been waiting for: SIMD, and dyn Trait. Additionally there is support for searching the Rust books, and a new book about rustc.",
      "url": "https://blog.rust-lang.org/2018/06/21/Rust-1.27.html",
      "date_published": "2018-06-21T00:00:00+00:00",
      "author": {
        "name": "The Rust Core Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c883f036-9e31-44b2-995a-24b575c524b8",
      "title": "From ActiveRecord to Diesel",
      "content_text": "Recently I needed to run a simple SQL query on a Postgres database and produce a one-off report. I could have done this in 5 minutes using Ruby and ActiveRecord. Instead, I decided to use Rust and Diesel – a language and a tool I hadn’t used before. Instead of 5 minutes it took several hours, but I learned something new. I’ve written up the steps I took here today. Get your mind’s exercise for today and read on to learn how to execute a SQL statement using Rust.",
      "url": "http://patshaughnessy.net/2018/6/9/from-activerecord-to-diesel",
      "date_published": "2018-06-09T03:00:00+00:00",
      "author": {
        "name": "Pat Shaughnessy",
        "url": "http://patshaughnessy.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "220b4649-e853-4f07-9773-e4ae3d286a4f",
      "title": "Proposal for a staged RFC process",
      "content_text": "I consider Rust’s RFC process one of our great accomplishments, but it’s no secret that it has a few flaws. At its best, the RFC offers an opportunity for collaborative design that is really exciting to be a part of. At its worst, it can devolve into bickering without any real motion towards consensus. If you’ve not done so already, I strongly recommend reading aturon’s excellent blog posts on this topic.\n\nThe RFC process has also evolved somewhat organically over time. What began as “just open a pull request on GitHub” has moved into a process with a number of formal and informal stages (described below). I think it’s a good time for us to take a step back and see if we can refine those stages into something that works better for everyone.",
      "url": "http://smallcultfollowing.com/babysteps/blog/2018/06/20/proposal-for-a-staged-rfc-process/",
      "date_published": "2018-06-20T00:00:00-04:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "0122445e-8a19-4a52-bcd6-4ee7e55feb7c",
      "title": "Rust review: The book",
      "content_text": "“The Rust Programming Language” is one of the free books that the community has put together to teach the language. The book does a good job in general, but there are some things that could be better. Let’s cover these, but first, some background.",
      "url": "http://julio.meroh.net/2018/06/rust-review-book.html",
      "date_published": "2018-06-19T09:00:00-04:00",
      "author": {
        "name": "Julio Merino",
        "url": "http://julio.meroh.net/series.html#Rust%20review"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "b5fe7539-f996-4c57-9fc1-5fa06b6a68b2",
      "title": "Rust review: The match keyword",
      "content_text": "A commonly-acclaimed feature of Rust is its match keyword: a “conditional on steroids”. match lets you take the value of an expression and compare it against a bunch of values—or, more generally, patterns.\n\nAs you write and read Rust, you will notice that this keyword is used everywhere because it’s the way to access certain types, like Option values or error codes.",
      "url": "http://julio.meroh.net/2018/06/rust-review-match-keyword.html",
      "date_published": "2018-06-15T09:00:00-04:00",
      "author": {
        "name": "Julio Merino",
        "url": "http://julio.meroh.net/series.html#Rust%20review"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "67f2f6f8-75f9-458c-969f-4bcbe9c0223f",
      "title": "Rust + Diesel + GitLab + CI",
      "content_text": "It is very straightforward to get Rust projects to build within a CI environment. This post is going to take that build process one small step further, we’re going to build a Rust project that uses the Diesel ORM. This adds a step of complexity since to compile a Diesel project you need to have a postgresql database accessible if you’re using the infer_schema!() macro.",
      "url": "https://noyez.gitlab.io/post/2018-06-15-rust-plus-diesel-plus-gitlab/",
      "date_published": "2018-06-18T00:00:00+00:00",
      "author": {
        "name": "noyez",
        "url": "https://noyez.gitlab.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "41722089-9cfe-413c-aa51-02c244fb4d67",
      "title": "Rust Is Not So Hairy",
      "content_text": "TL;DR I decided to learn Rust on my nth attempt. Writing small programs helped me get stuff done. I converted a Java gRPC service into Rust for comparison I'm super-impressed with Rust's low CPU and memory footprint.",
      "url": "https://nevi.me/rust-is-not-so-hairy/",
      "date_published": "2018-06-16T14:05:48+00:00",
      "author": {
        "name": "Neville",
        "url": "https://nevi.me/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "977aa3cd-7136-4d69-84ac-0c15c6396ae4",
      "title": "Dynamic Casting for Traits",
      "content_text": "In Rust, traits are a powerful tool to use polymorphism, both static and dynamic. I’m going to skip the basics about the traits and just link to another blog post with a good explanation about static and dynamic dispatch in Rust: Traits and Trait Objects in Rust.\n\nInstead, I would like to do an experiment of making dynamic dispatch even more dynamic! Like in Java1.",
      "url": "http://idubrov.name/rust/2018/06/16/dynamic-casting-traits.html",
      "date_published": "2018-06-16T00:00:00+00:00",
      "author": {
        "name": "Ivan Dubrov",
        "url": "http://idubrov.name/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c55b518c-125b-4fb9-82c5-08c3367bb6c6",
      "title": "MIR-based borrow check (NLL) status update",
      "content_text": "I’ve been getting a lot of questions about the status of “Non-lexical lifetimes” (NLL) – or, as I prefer to call it these days, the MIR-based borrow checker – so I wanted to post a status update.\n\nThe single most important fact is that the MIR-based borrow check is feature complete and available on nightly. What this means is that the behavior of #![feature(nll)] is roughly what we intend to ship for “version 1”, except that (a) the performance needs work and (b) we are still improving the diagnostics.",
      "url": "http://smallcultfollowing.com/babysteps/blog/2018/06/15/mir-based-borrow-check-nll-status-update/",
      "date_published": "2018-06-15T00:00:00-07:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "79d23f1b-0e7b-4d75-a061-9e5b9930424b",
      "title": "From Go to Rust - JSON and YAML",
      "content_text": "One of Go's big selling points for me was its novel approach to JSON encoding. Learning about Rust's encoding has made me even more excited. In this post, we'll start with Go's JSON encoder, and then see how Rust does encoding. And we'll even through in some YAML!",
      "url": "http://technosophos.com/2018/06/12/from-go-to-rust-json-and-yaml.html",
      "date_published": "2018-06-12T00:00:00+00:00",
      "author": {
        "name": "Matt Butcher",
        "url": "http://technosophos.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4749d178-b87d-4946-b8e2-0a6d17d7495e",
      "title": "Automatic Type Coercions with Procedural Macros in Rust",
      "content_text": "I briefly demonstrate how to use procedural macros to automatically perform type coercion in Rust, mimicking the behavior of dynamic languages.",
      "url": "http://willcrichton.net/notes/automatic-type-coercions-macros-rust/",
      "date_published": "2018-06-12T00:00:00+00:00",
      "author": {
        "name": "Will Crichton",
        "url": "http://willcrichton.net/notes/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "f6f3b55c-c39c-4366-9de1-ebf3b230ee6c",
      "title": "What do you think are the most interesting/exciting projects using Rust?",
      "content_text": "Last week I tweeted \"What do you think are the most interesting/exciting projects using Rust? (No self-promotion :-) )\". The response was awesome! Jonathan Turner suggested I write up the responses as a blog post, and here we are.",
      "url": "https://www.ncameron.org/blog/interesting_projects/",
      "date_published": "2018-06-13T16:26:29+00:00",
      "author": {
        "name": "Nick Cameron",
        "url": "http://www.ncameron.org/blog/"
      },
      "tags": [
        "Language",
        "Tools and Applications"
      ]
    },
    {
      "id": "2b4b4efe-3a50-4ceb-ac4c-267b708c2ce8",
      "title": "Traits and Trait Objects in Rust",
      "content_text": "I’ve been really confused lately about Rust’s trait objects. Specifically when it comes to questions about the difference between &Trait, Box<Trait>, impl Trait, and dyn Trait.",
      "url": "https://joshleeb.com/posts/rust-traits-and-trait-objects/",
      "date_published": "2018-06-12T00:00:00+00:00",
      "author": {
        "name": "Josh Leeb-du Toit",
        "url": "https://joshleeb.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "8e5085a4-0057-4ed8-81dc-93242e35b6e9",
      "title": "Rust review: Expressions, expressions, expressions",
      "content_text": "Rust resembles a functional language in many ways although it does not claim to be one. In fact, I have been thinking of Rust as a “pragmatic Haskell” or as a “well-balanced mixture between C++ and Haskell”.\n\nOne of the ways the functional aspects show up is via expressions and how pretty much any construct in Rust can be treated as an expression. But before we begin, a little warning: the examples below are, by no means, idiomatic Rust—I just hope they are simple enough to illustrate what I want to show.",
      "url": "http://julio.meroh.net/2018/06/rust-review-expressions.html",
      "date_published": "2018-06-12T09:00:00-04:00",
      "author": {
        "name": "Julio Merino",
        "url": "http://julio.meroh.net/series.html#Rust%20review"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "34b26ba8-daa3-431f-ba53-9c0d9d873459",
      "title": "Where do Rust threads come from?",
      "content_text": "Last week, I wrote a post in which I discussed some of the things that I learned about Rust concurrency. One of the things that I pointed out was that when you spawn a thread within another thread, they both have the main process as their parent.",
      "url": "http://squidarth.com/rc/rust/concurrency/2018/06/09/rust-threads-detach.html",
      "date_published": "2018-06-09T09:00:38-04:00",
      "author": {
        "name": "Sid Shanker",
        "url": "http://www.squidarth.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4ab9c39f-72ed-4b84-a5e7-abe4c594c019",
      "title": "First Impressions of the Rust Programming Language",
      "content_text": "C is almost 50 years old, and C++ is almost 40 years old. While age is usually indicative of mature implementations with decades of optimization under their belts, it also means that the language's feature set is mostly devoid of modern advancements in programming language design. For that reason, you see a great deal of encouragement nowadays to move to newer languages - they're designed with contemporary platforms in mind, rather than working within the limitations of platforms like the PDP-11. Among said \"new languages\" are Zig, Myrddin, Go, Nim, D, Rust.. even languages like Java and Elixir that run on a virtual machine are occasionally suggested as alternatives to the AOT-compiled C and C++.\n\nI have plans to look into the characteristics that distinguish each and every one of these new programming languages, learning them and documenting my first impressions in the form of blog posts. This post is the beginning of that adventure: my first impressions of Rust.",
      "url": "http://jakob.space/blog/post/First+Impressions+of+the+Rust+Programming+Language",
      "date_published": "2018-06-08T13:02:33-05:00",
      "author": {
        "name": "Jakob",
        "url": "http://jakob.space/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "644f8b30-47a3-4da8-b4e9-1b72755d69b0",
      "title": "Rust review: Learning curve",
      "content_text": "Writing Rust code is not restricted to programming gurus—but there is no denying that the learning curve is steeper than that of other languages. Or is it? In this post, I'll try to convince you that the curve does feel steep, but it isn't when taken into perspective.\nLet's first start by stating that learning a language is not the same as learning its syntax. Learning a language involves learning the syntax, of course, but it also involves familiarizing oneself with its common idioms and grabbing a good sense of what the standard libraries provide.",
      "url": "http://julio.meroh.net/2018/06/rust-review-learning-curve.html",
      "date_published": "2018-06-08T09:00:00-04:00",
      "author": {
        "name": "Julio Merino",
        "url": "http://julio.meroh.net/series.html#Rust%20review"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "314ba2b8-5ace-4348-b96a-b704c628e2b3",
      "title": "Safe Concurrency with Rust",
      "content_text": "Last week, I started learning Rust, and published a post about the “ownership” system. One of the places where Rust’s ownership system really shines is in threading and concurrency. Kevin and I decided to dig into this more on Friday, and did some work on the dining philosophers problem.\n\nIn this post I’ll be covering what we learned, and how the Rust compiler saves you from some scary concurrency issues.",
      "url": "http://www.squidarth.com/rc/rust/2018/06/04/rust-concurrency.html",
      "date_published": "2018-06-04T09:00:38-04:00",
      "author": {
        "name": "Sid Shanker",
        "url": "http://www.squidarth.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "cebd59fa-c884-49cd-9de7-4da401e26642",
      "title": "Why PhantomData",
      "content_text": "We’re not allowed to have a type parameter that goes unused. If we want to have a type that looks like the one above we have to add a marker to it like so: struct Tagged<T>(usize, PhantomData<T>);",
      "url": "http://troubles.md/posts/why-phantomdata/",
      "date_published": "2018-06-05T13:41:30+02:00",
      "author": {
        "name": "troubles.md",
        "url": "http://troubles.md/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "901dde63-68f7-45d0-b161-cf585e47d266",
      "title": "Announcing Rust 1.26.2",
      "content_text": "This patch release fixes a bug in the borrow checker verification of match expressions. This bug was introduced in 1.26.0 with the stabilization of match ergonomics. Specifically, it permitted code which took two mutable borrows of the bar path at the same time.",
      "url": "https://blog.rust-lang.org/2018/06/05/Rust-1.26.2.html",
      "date_published": "2018-06-05T00:00:00+00:00",
      "author": {
        "name": "The Rust Core Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "2b743aaf-6ae4-4bda-8de9-6bef817e9a4d",
      "title": "The Future of Clippy (the Rust Linter)",
      "content_text": "We’ve recently been making lots of progress on future plans for clippy and I thought I’d post an update.",
      "url": "https://manishearth.github.io/blog/2018/06/05/the-future-of-clippy-the-rust-linter/",
      "date_published": "2018-06-05T00:00:00+00:00",
      "author": {
        "name": "Manish Goregaokar",
        "url": "https://manishearth.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "046762b0-c3da-4f38-8d4a-7bb515f73d4b",
      "title": "Rust review: Protect the data",
      "content_text": "The one thing that blew my mind about Rust is its approach to data sharing in concurrent situations.\n\nI had always thought of mutexes as something that is easy to get wrong and was convinced that the use of a RAII pattern to prevent lock leaks never happen (like with Abseil’s MutexLock) was the panacea. (I’m a fan of RAII in C++ by the way, in case you haven’t noticed.)",
      "url": "http://julio.meroh.net/2018/06/rust-review-protect-the-data.html",
      "date_published": "2018-06-05T09:00:00-04:00",
      "author": {
        "name": "Julio Merino",
        "url": "http://julio.meroh.net/series.html#Rust%20review"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d4896054-d302-4629-8679-7456e1a741ef",
      "title": "Async Methods II: object safety",
      "content_text": "Last time, we introduced the idea of async methods, and talked about how they would be implemented: as a kind of anonymous associated type on the trait that declares the method, which corresponds to a different, anonymous future type for each implementation of that method. Starting this week we’re going to look at some of the implications of that. The first one we’re going to look at is object safety.",
      "url": "https://boats.gitlab.io/blog/post/async-methods-ii/",
      "date_published": "2018-06-04T00:00:00+00:00",
      "author": {
        "name": "boats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d8c6d9c0-38eb-4656-a28e-0125ca9e5cd1",
      "title": "The Secret Life of Cows",
      "content_text": "A lot of people at RustFest Paris mentioned Cows – which may be surprising if you’ve never seen std::borrow::Cow!\n\nCow in this context stands for “Clone on Write” and is a type that allows you to reuse data if it is not modified. Somehow, these bovine super powers of Rust’s standard library appear to be a well-kept secret even though they are not new. This post will dig into this very useful pointer type by explaining why in systems programming languages you need such fine control, explain Cows in detail, and compare them to other ways of organizing your data.",
      "url": "https://deterministic.space/secret-life-of-cows.html",
      "date_published": "2018-06-02T00:00:00+02:00",
      "author": {
        "name": "Pascal Hertleif",
        "url": "https://deterministic.space/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e672721a-5577-4897-b440-619731384ac1",
      "title": "Newtype Index Pattern",
      "content_text": "Similarly to the previous post, we will once again add types to the Rust code which works perfectly fine without them. This time, we’ll try to improve the pervasive pattern of using indexes to manage cyclic data structures.",
      "url": "https://matklad.github.io//2018/06/03/newtype-index-pattern.html",
      "date_published": "2018-06-03T21:21:45+00:00",
      "author": {
        "name": "Aleksey Kladov",
        "url": "https://matklad.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d5a4da56-2e7e-4f30-bd1a-d0211958a00a",
      "title": "Async Methods I: generic associated types",
      "content_text": "Async/await continues to move along swimmingly. We’ve accepted an RFC describing how the async/await syntax will work in Rust, and work is underway on implementing support for it in the compiler. We’re hopeful that users will be able to start experimenting with the syntax on nightly by early July.\n\nThe RFC for async/await didn’t address one important thing: async methods. It is very important for people defining libraries to be able to define traits that contain async functions, like this:",
      "url": "https://boats.gitlab.io/blog/post/async-methods-i/",
      "date_published": "2018-05-31T00:00:00+00:00",
      "author": {
        "name": "boats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "19239f2e-41c0-44cb-8b3d-02199eaa57b1",
      "title": "Infinite Negative Utility: The Rust Language and Special Cases",
      "content_text": "I first came across Rust back in 2010 or 2011, and it was a very different language than the one it is today, both syntactically and semantically. I remember at the time that newcomers would often complain loudly about the terse keywords—like the fact that the return keyword had been shortened to ret—and the omnipresent tildes scattered throughout the language like fallen leaves in autumn. My programming background was in functional languages—specifically in Scheme and Haskell—and I found this language fascinating, sitting in an interesting and unexplored place in the spectrum of programming languages and bringing something genuinely new to the table.",
      "url": "https://blog.infinitenegativeutility.com/2018/6/the-rust-language-and-special-cases",
      "date_published": "2018-06-01T00:00:00+00:00",
      "author": {
        "name": "Getty Ritter",
        "url": "https://blog.infinitenegativeutility.com/archive"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "1572c586-709c-44a9-9232-ae4d3b9466ec",
      "title": "The Go Developer's Quickstart Guide to Rust",
      "content_text": "As the co-author of Go in Practice, I have felt a certain obligation to Go. But I'm ready for a change. Rust topped the satisfaction survey in Stack Overflow's survey of languages (screenshot above). I've decided to give it a try. While Go and Rust are often compared, they are remarkably different languages.\n\nComing from a Go background, there are things about Rust that feel very natural, and things (like memory management) that feel utterly foreign. And so as I learn Rust, I am cataloging how it feels for a Go programmer. And rather than leading others to \"dive in at the deep end\" as I did (when I tried to write a full web service), I decided to approach Rust by starting with similarities and working toward differences.",
      "url": "http://technosophos.com/2018/05/27/the-go-developers-quickstart-guide-to-rust.html",
      "date_published": "2018-05-27T00:00:00+00:00",
      "author": {
        "name": "Matt Butcher",
        "url": "http://technosophos.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "09d6be59-4bee-49e0-aa34-d43622422cb8",
      "title": "Rust review: The borrow checker",
      "content_text": "Aaaah, the borrow checker: the dreaded enemy lurking within the Rust compiler, ready to make its move to bring pain to your life by preventing your code from compiling. Or that’s what everyone seems to say, which is one of the reasons I put off learning Rust for so long. In reality… the borrow checker is a blessing, but it is true that getting past its gates is difficult at first.",
      "url": "http://julio.meroh.net/2018/06/rust-review-borrow-checker.html",
      "date_published": "2018-06-01T09:00:00-04:00",
      "author": {
        "name": "Julio Merino",
        "url": "http://julio.meroh.net/series.html#Rust%20review"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ab635755-efd4-432a-8407-7b1c94649f8f",
      "title": "Tricking the HashMap",
      "content_text": "Is it possible to find something in a hashmap if the key you are looking for is not exactly the same as the one you put into that hashmap? At first glance, this might not make any sense at all. The whole purpose of a hashmap is to store something under some key and then look it up using the same key. Right?",
      "url": "https://idubrov.github.io/rust/2018/06/01/tricking-the-hashmap.html",
      "date_published": "2018-06-01T00:00:00+00:00",
      "author": {
        "name": "Ivan Dubrov",
        "url": "https://idubrov.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "80930880-f4a9-4485-b372-648928490dca",
      "title": "Assignment Semantics in Python, JavaScript, Java, C++, and Rust",
      "content_text": "What happens when a data collection is copied and then the new copy is changed? Does the original remain the same, or does it change too?\n\nIf you think of copying as creating a completely new object, of course you expect that any change to the new copy does not affect the original object. But if you think of copying as creating a new name for the same, single object, then you expect that any change to the object through the new name appears also when you access the same object through the old name.\n\nLet's see how is the behavior of Python, Javascript, Java, C++, and Rust regarding the assignment operator (\"=\") between collection variables.",
      "url": "https://www.apress.com/us/blog/all-blog-posts/assignment-semantics/15805464",
      "date_published": "2018-06-01T00:00:00+00:00",
      "author": {
        "name": "Carlo Milanesi",
        "url": "https://www.apress.com/us/blog"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "1f808812-4e70-4dcb-90a0-c45964863cd5",
      "title": "Fear not the Rust Borrow Checker",
      "content_text": "I spent pretty much the whole day banging my head against the wall trying to figure out how ownership and borrowing work in Rust, and finally have a grasp on what’s going on.\n\nIn this post I’m going to demonstrate how these concepts work through some examples of code that break Rust’s rules, and explain why they’re problematic. I assume very little knowledge of the Rust programming language. I’ve also added comments to all of the code blocks that indicate whether the code is valid Rust or not.",
      "url": "http://www.squidarth.com/rc/rust/2018/05/31/rust-borrowing-and-ownership.html",
      "date_published": "2018-05-31T12:00:38-04:00",
      "author": {
        "name": "Sid Shanker",
        "url": "http://www.squidarth.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "aea72b83-8f56-4c8d-a9d7-c88fded0cfc7",
      "title": "Mutagen - An Inopportune Consumption",
      "content_text": "I just failed to implement what looked to be a relatively simple opportunistic replacement so that the compiler would accept the mutated code. But I’m getting ahead of myself.",
      "url": "https://llogiq.github.io/2018/05/30/inop.html",
      "date_published": "2018-05-30T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "12f71ab8-809a-45a6-8e95-fd98a92e7f60",
      "title": "Why put Rust in our Python Monitoring agent?",
      "content_text": "Prior to adding Python performance monitoring, we'd written monitoring agents for Ruby and Elixir. Our Ruby and Elixir agents had duplicated much of their code between them, and we didn't want to add a third copy of the agent-plumbing code. The overlapping code included things like JSON payload format, SQL statement parsing, temporary data storage and compaction, and a number of internal business logic components.\n\nThis plumbing code is about 80% of the agent code! Only 20% is the actual instrumentation of application code.\n\nSo, starting with Python, our goal became \"how do we prevent more duplication\". In order to do that, we decided to split the agent into two components. A language agent and a core agent. The language agent is the Python component, and the core agent is a standalone executable that contains most of the shared logic.",
      "url": "http://blog.scoutapp.com/articles/2018/04/10/why-put-rust-in-our-python-monitoring-agent",
      "date_published": "2018-04-05T07:46:00-04:00",
      "author": {
        "name": "Chris",
        "url": "http://blog.scoutapp.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d9877c7d-7175-490d-89a8-46fad05d9903",
      "title": "Rust review: Immutable by default",
      "content_text": "Let’s start the deep dive by looking into a powerful feature of Rust: all variables and references are immutable by default unless qualified with mut.\nTo understand why this is important, let’s cover some context first. One of my pet peeves when reviewing C++ code is to ask authors to sprinkle the const qualifier everywhere: if something ain’t mutated, say so explicitly. This includes marking local variables, function arguments, function return values, class attributes, etc.",
      "url": "http://julio.meroh.net/2018/05/rust-review-immutable-by-default.html",
      "date_published": "2018-05-29T09:00:00-04:00",
      "author": {
        "name": "Julio Merino",
        "url": "http://julio.meroh.net/series.html#Rust%20review"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "da46cfde-97b2-4e16-9e08-4308a34d6826",
      "title": "Evolving Rust",
      "content_text": "When you're just building some very basic tool programs, I'd probably not even think about threading in C, but here it is so easy that I've been quick to drop a (for example, typically) 30ms loop down to 3.5ms. One of the things I've been somewhat missing is easy access to SIMD intrinsics, but this brings me to something else I've been enjoying this year: Rust is evolving.",
      "url": "https://blog.shivoa.net/2018/05/evolving-rust.html",
      "date_published": "2018-05-29T12:11:00+01:00",
      "author": {
        "name": "Shivoa Birch",
        "url": "https://plus.google.com/104688779548004579468"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ae63f930-3568-433f-b8e6-35feb516b4c2",
      "title": "Announcing Rust 1.26.1",
      "content_text": "A couple of issues were found in 1.26.0 which were deemed sufficient for a patch release.\n\nA quick summary of the changes:\n\nRLS no longer interferes with command line builds\nRustfmt stopped badly formatting text in some cases\nReturning from main via impl Trait where the Trait is not Termination is no longer permitted\n::<> (turbofish) no longer works for method arguments whose type is impl Trait\n\nNaN > NaN no longer returns true in const contexts\nrustup should no longer fail due to missing documentation on some platforms",
      "url": "https://blog.rust-lang.org/2018/05/29/Rust-1.26.1.html",
      "date_published": "2018-05-29T00:00:00+00:00",
      "author": {
        "name": "The Rust Core Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "95a6f9d4-dcfa-4b20-8ee7-f240cde435b1",
      "title": "Exploring Rust fat pointers",
      "content_text": "Beware that at any point the code here may stop compiling, segfault, and otherwise behave in weird ways, some of which involve Velociraptors.\n\nNow that that’s out of the way, what is a fat pointer anyway? All pointers are the same right? Just a number indicating an address in memory. Well, yes and no.",
      "url": "https://iandouglasscott.com/2018/05/28/exploring-rust-fat-pointers/",
      "date_published": "2018-05-28T02:46:00-07:00",
      "author": {
        "name": "Ian Douglas Scott",
        "url": "https://iandouglasscott.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e0370259-0204-491d-9bd1-3769a682f6e1",
      "title": "Fuzz testing in Rust with Cargo-fuzz",
      "content_text": "In this post, I go through how I added the first automated fuzz test for my hobby project Hat — a snapshotting backup system written in Rust. I’ll briefly go through what a fuzz test is and how it works. In a follow-up post, I will share how I made the test more effective by running it through Seasoned Software.",
      "url": "https://medium.com/@seasoned_sw/fuzz-testing-in-rust-with-cargo-fuzz-13b89feecc30",
      "date_published": "2018-05-25T10:08:45.112+00:00",
      "author": {
        "name": "Seasoned Software",
        "url": "https://medium.com/@seasoned_sw"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d25787d1-089e-4455-ac6a-1183548d48cd",
      "title": "Rust review: Introduction",
      "content_text": "I had been meaning to learn Rust since I first toyed with Go a couple of years ago. During this period, I’ve written a non-trivial amount of Go code both inside and outside Google, but never found the chance to sit back and learn Rust.\n\nThis changed a month ago during my yearly family trip to Korea. This time around, I decided upfront that I would not work on any personal or work projects for the 2-week long vacation. Instead, I would focus all spare time in reading. And I would read “The Rust Programming Language”, second edition. The plan worked: getting through the book took the two weeks and I barely wrote any code.",
      "url": "http://julio.meroh.net/2018/05/rust-review-introduction.html",
      "date_published": "2018-05-25T09:00:00-04:00",
      "author": {
        "name": "Julio Merino",
        "url": "http://julio.meroh.net/series.html#Rust%20review"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "5b8ae1bc-5625-4115-ab3a-3f399e157314",
      "title": "Typed Key Pattern",
      "content_text": "In this post, I’ll talk about a pattern for extracting values from a weakly typed map. This pattern applies to all statically typed languages, and even to dynamically typed ones, but the post is rather Rust-specific.",
      "url": "https://matklad.github.io/2018/05/24/typed-key-pattern.html",
      "date_published": "2018-05-24T10:18:13+00:00",
      "author": {
        "name": "Aleksey Kladov",
        "url": "https://matklad.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "7518f181-39ba-4c9c-a76d-1a07b697d264",
      "title": "Moving out of a Drop struct in Rust?",
      "content_text": "Rust doesn’t allow you to move out of a value which type implements Drop, and this is quite logical. When Foo::take returns, because of self going out of scope, it must call its Drop::drop implementation. If you have moved out of it – both a: A and b: B fields, the Drop::drop implementation is now a complete UB. So Rust is right here and doesn’t allow you to do this.\n\nBut imagine that we have to do this. For insance, we need to hand over both the scarce resources a and b to another struct (in our case, a (A, B), but you could easily imagine a better type for this).\n\nThere’s a way to, still, implement Foo::take with Foo implementing Drop. Here’s how:",
      "url": "http://phaazon.netkblog/rust-no-drop",
      "date_published": "2018-05-22T22:22:00+00:00",
      "author": {
        "name": "Dimitri Sabadie",
        "url": "http://phaazon.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "80818d94-c29b-47b1-8307-f5c9e1d03808",
      "title": "impl Trait in Rust explanation",
      "content_text": "In Rust 1.26 a new feature called impl Trait was stabilized. How does it work? Instead of specifying an exact type, you can say that your function either returns or takes something that implements a trait.",
      "url": "https://medium.com/@iopguy/impl-trait-in-rust-explanation-efde0d94946a",
      "date_published": "2018-05-23T04:37:08.411+00:00",
      "author": {
        "name": "Igor Polyakov",
        "url": "https://medium.com/@iopguy"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d2971f3f-a40d-45c9-a544-ed94f3b962f6",
      "title": "Rust is Incredibly Productive for CLIs",
      "content_text": "I built a little tool in Rust to convert an Evernote export file to Markdown. It was impressively easy.",
      "url": "https://www.chriskrycho.com/2018/rust-is-incredibly-productive-for-clis.html",
      "date_published": "2018-05-20T08:35:00-04:00",
      "author": {
        "name": "Chris Krycho",
        "url": "https://www.chriskrycho.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "940f0d10-67ee-49d4-a243-d4310077a962",
      "title": "Asynchronous warmy: a prequel",
      "content_text": "Last weeks were interesting for warmy, a crate I’ve been writing for several weeks / months now that enables you to hot load and reload scarce resources – e.g. textures, meshes, configuration, JSON parameters, dependency nodes, whatever. warmy received several interesting features.",
      "url": "http://phaazon.net/blog/asynchronous_warmy_prequel",
      "date_published": "2018-05-08T19:30:00+00:00",
      "author": {
        "name": "Dimitri Sabadie",
        "url": "http://phaazon.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "999b0809-c97d-42c2-b102-d8d2567e8979",
      "title": "A boolean's story",
      "content_text": "Earlier this month I told you about my pet project in Rust.\n\nAs a reminder, it’s a tool named rusync which contains some of the functionality offered by the rsync command-line tool.\n\nToday I’d like to talk about a feature I’ve added recently, and take this opportunity to show you a few principles of good design along the way.",
      "url": "https://dmerej.info/blog/post/a-booleans-story/",
      "date_published": "2018-05-18T13:50:38+00:00",
      "author": {
        "name": "Dimitri Merejkowsky",
        "url": "https://dmerej.info/blog/humans.txt"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "6e5c626c-f240-41fa-9520-a3d5586523b3",
      "title": "Rust for Android games using SDL2",
      "content_text": "I've been wanting to write a simple Android game for my daughter, and decided to use it as an excuse to learn Rust.  Thus began an odyssey.\n\nI'll ignore the game itself in this post in favour of describing how to get a simple Rust on Android game environment.  For my game I didn't want anything fancy - I wanted to load some jpg files and blit rectangles from those textures to the screen.  But I don't know OpenGL, and I don't really feel the need to learn for this project - if I hit the need to use a shader, then I backtracked and tried another approach.  The plan was to get a simple, high-level graphics API for Rust running on Android.",
      "url": "https://lliwynd.blogspot.com.au/2018/05/rust-for-android-games-using-sdl2.html",
      "date_published": "2018-05-19T16:15:00+10:00",
      "author": {
        "name": "William Uther",
        "url": "https://lliwynd.blogspot.com.au/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "2bdd1638-e211-477d-8bb8-3ae0de703661",
      "title": "FizzBuzz Can Finally Be Implemented in Stable Rust",
      "content_text": "I have been editing my FizzBuzz repository since 2014. After four years, I was finally able to switch from nightly to stable due to the 1.26 release. Let’s back up a little bit and appreciate the changes since the first revision.",
      "url": "https://medium.com/@iopguy/fizzbuzz-can-finally-be-implemented-in-stable-rust-87649a882f2d",
      "date_published": "2018-05-17T17:23:27.319+00:00",
      "author": {
        "name": "Igor Polyakov",
        "url": "https://medium.com/@iopguy"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c1e5c8e3-46e1-412d-98fe-6735ad9e4f19",
      "title": "Compile Time Prevention of SQL-Injections in Rust",
      "content_text": "SQL injection vulnerabilities have been a plague ever since such databases have been combined with user facing applications. Such vulnerabilities arise when a SQL query string is naively combined with data that is controlled by an attacker.\n\nTo mitigate, people should make use of placeholders and prepared statements provided by SQL client libraries. This separates the variable data from the actual query, ensuring that these two never mix. Pretty much all modern SQL client libraries offer this functionality, but of course, it’s still possible to mix variable data and SQL by means of string concatenation.",
      "url": "https://polyfloyd.net/post/compile-time-prevention-of-sql-injections/",
      "date_published": "2018-05-18T00:00:00+00:00",
      "author": {
        "name": "polyfloyd",
        "url": "https://polyfloyd.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "50ca4f3e-2051-4779-adf4-a12615b72d99",
      "title": "Rust turns three",
      "content_text": "Three years ago today, the Rust community released Rust 1.0 to the world, with our initial vision of fearless systems programming. As per tradition, we’ll celebrate Rust’s birthday by taking stock of the people and the product, and especially of what’s happened in the last year.",
      "url": "https://blog.rust-lang.org/2018/05/15/Rust-turns-three.html",
      "date_published": "2018-05-15T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c65ddae5-51e1-4eb4-96ab-365e0d819d0f",
      "title": "Announcing Rust 1.26",
      "content_text": "The past few releases have had a steady stream of relatively minor additions. We’ve been working on a lot of stuff, however, and it’s all starting to land in stable. 1.26 is possibly the most feature-packed release since Rust 1.0.",
      "url": "https://blog.rust-lang.org/2018/05/10/Rust-1.26.html",
      "date_published": "2018-05-10T00:00:00+00:00",
      "author": {
        "name": "The Rust Core Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a7a257bb-3da8-42f1-b341-dad7221b9ab3",
      "title": "Rust: Enterprise Services Need Not Suck",
      "content_text": "I practice Barbarian Leadership. Standing on the back lines with hand in pocket giving orders is missing the fun. More importantly, knowledge is created on the cutting edge of action. People you work with know this. They value modern, non-hierarchical organizations where a leader dives into the fray, sword in hand, and gets to know intimately the problems and tools for solving them. So I dove into the fight despite knowing that it is “hard language”.",
      "url": "https://medium.com/@paulhoughton/rust-enterprise-services-need-not-suck-679b79edcab5",
      "date_published": "2018-05-07T12:59:10.610+00:00",
      "author": {
        "name": "Paul Houghton",
        "url": "https://medium.com/@paulhoughton"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "7fe0f8aa-fbe1-4fef-bba3-e64b98b00bc2",
      "title": "Procedural Macros in Rust",
      "content_text": "Procedural macros are a really powerful language feature in Rust and something I haven’t seen in many other languages.\n\nThere are a heap of tutorials out there for procedural macros, including in The Rust Reference, and the first edition of the Rust Book. One of the more entertaining (and useful) posts is by Zach Mitchell where you get to “learn Rust procedural macros with Nic Cage”.\n\nI won’t go into depth about what procedural macros are and why they’re so powerful.",
      "url": "https://joshleeb.com/posts/rust-procedural-macros/",
      "date_published": "2018-05-04T00:00:00+00:00",
      "author": {
        "name": "Josh Leeb-du Toit",
        "url": "https://joshleeb.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "cb34566e-4c96-4191-9179-eca6bc9ac07f",
      "title": "Embedding Rustup into Cargo and the Wrapper",
      "content_text": "One of my issue when building a project from scratch is the amount of manual steps required to be able to run a simple project. This is not so much a concern when you are a single developer but the larger the team, the most obvious it becomes.",
      "url": "https://medium.com/@tibotz/embedding-rustup-into-cargo-and-the-wrapper-d5b447f381fc",
      "date_published": "2018-05-04T05:53:28.079+00:00",
      "author": {
        "name": "Tibo Delor",
        "url": "https://medium.com/@tibotz"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "266098f6-079e-42d6-8d15-3a7867687f49",
      "title": "Refactoring Apache Arrow to use traits and generics",
      "content_text": "I am currently working on a refactor of the Rust implementation of Apache Arrow to change the way that arrays are represented. This is a relatively large change even though this is a tiny codebase so far and I thought it would be good to write up this blog post to explain why I think this is needed. I think this information will also be interesting for any Rust developer who is struggling with making the right choice between (or using the right combination of) enums, structs, generics and traits. I was inspired to write this up after reading this blog post that was posted to Reddit just a few days ago.",
      "url": "https://andygrove.io/2018/05/apache-arrow-traits-generics/",
      "date_published": "2018-05-04T00:00:00+00:00",
      "author": {
        "name": "Andy Grove",
        "url": "https://andygrove.io/blog"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ca367462-e3ba-4b03-9b46-05b7850bdcba",
      "title": "Encapsulating Lifetime of the Field",
      "content_text": "This is a post about an annoying Rust pattern and an annoyingworkaround, without a good solution :)",
      "url": "https://matklad.github.io/2018/05/04/encapsulating-lifetime-of-the-field.html",
      "date_published": "2018-05-04T17:47:23+00:00",
      "author": {
        "name": "Aleksey Kladov",
        "url": "https://matklad.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d9100be3-bb0c-4ea5-9aff-3fa3b7946b12",
      "title": "Rust in production at Figma",
      "content_text": "How Mozilla’s new language dramatically improved our server-side performance.",
      "url": "https://blog.figma.com/rust-in-production-at-figma-e10a0ec31929",
      "date_published": "2018-05-02T15:14:00.276+00:00",
      "author": {
        "name": "Evan Wallace",
        "url": "https://blog.figma.com/@evanwallace"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "fce158e9-2134-4c57-bbc8-67483dc0b0d8",
      "title": "rustref - memorable Rust reference links",
      "content_text": "This contains shorthand URLs for navigating to Rust documentation.",
      "url": "https://rustref.com/",
      "date_published": "2018-04-27T20:12:36+00:00",
      "author": {
        "name": "Mackenzie Hauck",
        "url": "https://github.com/nocduro"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4539d16d-f909-4fff-9eda-dc6763fa7a3b",
      "title": "Mutagen – More opportunities",
      "content_text": "Recently I gave a talk at our Rust Meetup about mutagen, and I also showed how our opportunistic mutations work (I however left out that gnarly thing about shifts, but in my defense I was short on time). That got me thinking whether we always do the right thing elsewhere.",
      "url": "https://llogiq.github.io/2018/05/01/moreop.html",
      "date_published": "2018-05-01T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e5b4d06d-c604-42fa-9329-e4bec9f44cfd",
      "title": "Dataframes: Traits, Enums, Generics, and Dynamic Typing",
      "content_text": "I’m attempting to build a dataframe in Rust. I implemented a pattern using traits, generics, and enums in conjunction to deal with columns of different datatypes while allowing runtime reflection for accessing the data stored in a column.",
      "url": "https://blog.hwc.io/posts/dataframe1/",
      "date_published": "2018-03-28T09:57:53-04:00",
      "author": {
        "name": "hwc",
        "url": "https://blog.hwc.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "803b6bf7-0cde-4a49-9e63-a117e95de2c0",
      "title": "Adventures in Rust",
      "content_text": "A tale of my time in Rust-land",
      "url": "https://dev.to/tmr232/adventures-in-rust-56fc",
      "date_published": "2018-04-27T00:00:00+00:00",
      "author": {
        "name": "Tamir Bahar",
        "url": "https://dev.to/tmr232"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "1d371a92-135a-4456-aca8-5537c9d53c81",
      "title": "Installing Rust Offline",
      "content_text": "I wanted to use Rust on an offline Linux system, but it seemed like there isn’t a nice guide to install Rust and some popular packages all in one go (like Anaconda, though what I describe here is much more ghetto), so I decided to summarize the procedure to install the Rust toolchain and some popular libraries all in one go on a system with no internet access.",
      "url": "https://hatsunearu.github.io/2018/04/29/rust-offline/",
      "date_published": "2018-04-29T14:00:00+00:00",
      "author": {
        "name": "hatsunearu",
        "url": "https://hatsunearu.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "1c59d8b2-c755-4f10-859e-4847be81bc4c",
      "title": "How to speed up the Rust compiler in 2018",
      "content_text": "18 months ago I wrote about some work I did to speed up the Rust compiler (rustc). I’ve recently taken this work up again. Also, in the meantime rustc’s build system has been replaced and its benchmark suite has been overhauled. So it’s a good time for an update.",
      "url": "https://blog.mozilla.org/nnethercote/2018/04/30/how-to-speed-up-the-rust-compiler-in-2018/",
      "date_published": "2018-04-30T04:13:45+00:00",
      "author": {
        "name": "Nicholas Nethercote",
        "url": "https://blog.mozilla.org/nnethercote/"
      },
      "tags": [
        "Language",
        "Performance"
      ]
    },
    {
      "id": "5e0ef28e-278a-48f1-92d1-256a37f76e47",
      "title": "Borrowing in async code",
      "content_text": "The networking working group is pushing hard on async/await notation for Rust, and @withoutboats in particular wrote a fantastic blog series working through the design space. I wanted to talk a little bit about some of the implications of async/await, which may not have been entirely clear. In particular, async/await is not just about avoiding combinators; it completely changes the game for borrowing.",
      "url": "http://aturon.github.io/2018/04/24/async-borrowing/",
      "date_published": "2018-04-24T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "282a816f-1c0b-4efc-9939-0674020ee1ef",
      "title": "An alias-based formulation of the borrow checker",
      "content_text": "Ever since the Rust All Hands, I’ve been experimenting with an alternative formulation of the Rust borrow checker. The goal is to find a formulation that overcomes some shortcomings of the current proposal while hopefully also being faster to compute. I have implemented a prototype for this analysis. It passes the full NLL test suite and also handles a few cases – such as #47680 – that the current NLL analysis cannot handle. However, the performance has a long way to go (it is currently slower than existing analysis). That said, I haven’t even begun to optimize yet, and I know I am doing some naive and inefficient things that can definitely be done better; so I am still optimistic we’ll be able to make big strides there.",
      "url": "http://smallcultfollowing.com/babysteps/blog/2018/04/27/an-alias-based-formulation-of-the-borrow-checker/",
      "date_published": "2018-04-27T00:00:00-04:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "67b88f7c-7b39-43ad-863a-0d03dd180faf",
      "title": "Reflections on Rust, and the Sand Castle Metaphor",
      "content_text": "A month ago, I wrote about how I was frustrated with my progress in Rust. These days, I’m still no expert, but I’ve made progress.",
      "url": "https://brandur.org/fragments/rust-reflections",
      "date_published": "2018-04-27T00:00:00+00:00",
      "author": {
        "name": "Brandur Leach",
        "url": "https://brandur.org"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "49014ace-e742-49f8-887a-8fa7d1b627cc",
      "title": "Rust Case Study: Chucklefish Taps Rust to Bring Safe Concurrency to Video Games [pdf]",
      "content_text": "Chucklefish, an independent game studio based in London, publishes hit video games like Stardew Valley and Starbound. Now, the company is developing its next game, code-named Witchbrook, using the Rust programming language instead of C++. Why the switch? Two main reasons: to get better performance on multiprocessor hardware and to have fewer crashes during game play.",
      "url": "https://www.rust-lang.org/pdfs/Rust-Chucklefish-Whitepaper.pdf",
      "date_published": "2018-04-23T17:38:56+00:00",
      "author": {
        "name": "The Rust Project Developers",
        "url": "https://www.rust-lang.org/en-US/whitepapers.html"
      },
      "tags": [
        "Language",
        "Games and Graphics"
      ]
    },
    {
      "id": "76fb9740-07d0-45c8-a6b3-17534f293c54",
      "title": "Ask an expert: How do you maintain Rust?",
      "content_text": "From team structure and annual surveys to RFCs and the release process, a staff research engineer on Mozilla’s Rust team shares what it takes.",
      "url": "https://increment.com/programming-languages/maintaining-rust/",
      "date_published": "2018-04-26T19:00:00+00:00",
      "author": {
        "name": "Jonathan Turner",
        "url": "https://increment.com/programming-languages/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "096f02f7-0ce4-41ef-8896-f8209ca126f5",
      "title": "GLib/GIO async operations and Rust futures + async/await",
      "content_text": "Unfortunately I was not able to attend the Rust+GNOME hackfest in Madrid last week, but I could at least spend some of my work time at Centricular on implementing one of the things I wanted to work on during the hackfest. The other one, more closely related to the gnome-class work, will be the topic &#8230; <a href=\"https://coaxion.net/blog/2018/04/glib-gio-async-operations-and-rust-futures-async-await/\" class=\"more-link\">Continue reading <span class=\"screen-reader-text\">GLib/GIO async operations and Rust futures + async/await</span></a>",
      "url": "https://coaxion.net/blog/2018/04/glib-gio-async-operations-and-rust-futures-async-await/",
      "date_published": "2018-04-23T08:46:32+00:00",
      "author": {
        "name": "With the latest GIT version of the Rust bindings for GLib, GTK, etc it is now possible to make use of the Rust futures infrastructure for GIO async operations and various other functions. This should make writing of GNOME, and in general GLib-using, applications in Rust quite a bit more convenient.",
        "url": "https://coaxion.net/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4eb3e72f-dec7-445e-9cbe-5464f3df1ceb",
      "title": "Rust memory safety revolution",
      "content_text": "This introduction is written for people, who are programmers, but don’t know Rust or are at the very beginning of learning it. It’s easier to understand for readers who know C, C++ or other language with manually managed memory as well as some with garbage collector. It’s a high-level introduction intended to present core Rust concepts and encourage further learning. It’s not a tutorial, there is no Hello Rust in the end.",
      "url": "https://anixe.pl/content/news/rust_memory_safety_revolution",
      "date_published": "2018-04-03T00:00:00+00:00",
      "author": {
        "name": "Igor Żuk",
        "url": "https://anixe.pl/news"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "017d9ce1-f259-4d95-bffc-b3d44dfc8cde",
      "title": "Dev-tools in 2018",
      "content_text": "This is a bit late (how is it the middle of April already?!), but the dev-tools team has lots of exciting plans for 2018 and I want to talk about them! Our goals for 2018 Here's a summary of our goals for the year. Ship it! We want to ship",
      "url": "https://www.ncameron.org/blog/dev-tools-in-2018/",
      "date_published": "2018-04-19T19:31:53+00:00",
      "author": {
        "name": "Nick Cameron",
        "url": "http://www.ncameron.org/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4096f192-ba2d-4a25-b1be-f3e4b0b40b51",
      "title": "BYO Standard: An Explorer's Guide to Complier Plugins",
      "content_text": "The Rust programming language provides powerful guarantees around memory and thread safety. It also exposes all the knobs required for implementing custom rules, enabling a project to make additional guarantees and enforce opinions on best practice. Embedded standards are very opinionated about software practices—like using floating point values as loop counters or the number of possible exit points of a function—and Rust’s defaults don’t prevent every runtime panic (for example, recursion that goes too deep and overflows the stack).\n\nFor PolySync, a runtime panic means the potential for an unsafe situation on the road, and with that in mind, we’ve explored ways to restrict that potential. Of course, we aren’t the only ones thinking about ways to improve the quality of code at compile time by enforcing the right rules for the job. Active projects like rust-clippy are working to do that too by providing lints to supplement the rustc defaults.\n\nIn this post we’ll explore how to enforce a rule by prohibiting a practice we’ve formed an opinion about, the indexing of a vector or an array.",
      "url": "https://polysync.io/explorers-guide-to-compiler-plugins",
      "date_published": "2018-04-21T00:00:00+00:00",
      "author": {
        "name": "Shea Newton",
        "url": "https://polysync.io/blog"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ba2b10d2-16a7-4036-8e8f-1fe0d113b0ac",
      "title": "Why Rust's error handling is awesome",
      "content_text": "This post is about the process of transforming something you would write as a one-off script in Python (or any other scripting language) into a library including error handling.",
      "url": "http://rantsideasstuff.com/posts/2018/04/20-rust-error-handling-awesome/",
      "date_published": "2018-04-20T10:00:00+02:00",
      "author": {
        "name": "Zoran Zaric",
        "url": "http://rantsideasstuff.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "89612f07-abeb-400f-8bf1-0826601e17d1",
      "title": "Rust pattern: Rooting an Rc handle",
      "content_text": "I’ve decided to do a little series of posts about Rust compiler errors. Each one will talk about a particular error that I got recently and try to explain (a) why I am getting it and (b) how I fixed it. The purpose of this series of posts is partly to explain Rust, but partly just to gain data for myself. I may also write posts about errors I’m not getting – basically places where I anticipated an error, and used a pattern to avoid it. I hope that after writing enough of these posts, I or others will be able to synthesize some of these facts to make intermediate Rust material, or perhaps to improve the language itself.",
      "url": "http://smallcultfollowing.com/babysteps/blog/2018/04/16/rust-pattern-rooting-an-rc-handle/",
      "date_published": "2018-04-16T00:00:00-04:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "447b930e-7350-4ef3-80d4-2ec23a4c5708",
      "title": "Implementing multiprocessing.pool.ThreadPool from Python in Rust",
      "content_text": "In this post, we will implement multiprocessing.pool.ThreadPool from Python in Rust. It represents a thread-oriented version of multiprocessing.Pool, which offers a convenient means of parallelizing the execution of a function across multiple input values by distributing the input data across processes. We will use an existing thread-pool implementation and focus on adjusting its interface to match that of multiprocessing.pool.ThreadPool.",
      "url": "https://blog.petrzemek.net/2018/04/16/implementing-multiprocessing-pool-threadpool-from-python-in-rust/",
      "date_published": "2018-04-16T15:14:15+00:00",
      "author": {
        "name": "Petr Zemek",
        "url": "https://blog.petrzemek.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c3057e94-6b2a-4f19-b109-d6f7b17aefbe",
      "title": "A Useful Feature Few Rust Programmers Know About",
      "content_text": "Surprisingly few know about the built-in pretty-printer. In the book, there is only a short passage that mentions {:#?} in passing. It aligns structs and enums based on nested positions and is automatically derived with Debug.",
      "url": "http://rickyhan.com/jekyll/update/2018/04/16/the-best-kept-secret-rust-feature.html",
      "date_published": "2018-04-16T04:00:00+00:00",
      "author": {
        "name": "Ricky Han",
        "url": "http://rickyhan.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "f4d6ff64-87eb-466f-94a6-fbbaa28fab7d",
      "title": "From Chaos to Order -- Tools and Techniques for Testing TiDB, A Distributed NewSQL Database",
      "content_text": "As an open source distributed NewSQL Hybrid Transactional/Analytical Processing (HTAP) database, TiDB contains the most important asset of our customers--their data. One of the fundamental and foremost requirements of our system is to be fault-tolerant. But how do you ensure fault tolerance in a distributed database? This article covers the top fault injection tools and techniques in Chaos Engineering, as well as how to execute Chaos practices in TiDB.",
      "url": "https://pingcap.com/blog/chaos-practice-in-tidb/",
      "date_published": "2018-04-14T00:00:00+00:00",
      "author": {
        "name": "Siddon Tang",
        "url": "https://pingcap.com/blog"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a38c18ee-88ab-46dd-994c-2c4e4d288d4c",
      "title": "Instance Identity in C++ and Rust",
      "content_text": "A document describing how (in my opinion) C++’s and Rust’s definitions of object instance differ.",
      "url": "https://jrvanwhy.github.io/instance-identity/",
      "date_published": "2018-04-10T21:04:09+00:00",
      "author": {
        "name": "Johnathan Van Why",
        "url": "https://jrvanwhy.github.io/instance-identity/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "b92200f5-9ac0-4104-9b0d-f444c55aceb8",
      "title": "Rust CLI Survey Results",
      "content_text": "Over the month of March 2018, we've been accepting responses to the Rust CLI Survey. This survey was designed to give us some areas of focus, according to the community, for the CLI Working Group (CLI-WG).\n\nOne of the goals of Rust 2018 is to make writing command line applications in Rust as frictionless (and fun!) as possible. And we are super excited to say: we've received 1,045 responses! The results, while varied, paint a pretty clear picture for tangible goals.",
      "url": "https://github.com/rust-lang-nursery/cli-wg/blob/master/survey-results/Readme.md",
      "date_published": "2018-04-12T22:26:15+00:00",
      "author": {
        "name": "Rust CLI Working Group",
        "url": "https://github.com/rust-lang-nursery/cli-wg"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ba7af9ee-e916-4d65-b7b2-c6afa2477ade",
      "title": "Down a Rusty Rabbit Hole",
      "content_text": "Last week I fell down a rather interesting rabbit hole in Rust, which was basically me discovering a series of quirks of the Rust compiler/language, each one leading to the next when I asked “why?”",
      "url": "https://manishearth.github.io/blog/2018/04/12/down-a-rusty-rabbit-hole/",
      "date_published": "2018-04-12T00:00:00+00:00",
      "author": {
        "name": "Manish Goregaokar",
        "url": "https://manishearth.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "30fe522c-e827-436a-bd52-40314d80e95b",
      "title": "The Challenge of Using C in Safety-Critical Applications [pdf]",
      "content_text": "Software errors in safety-critical systems can have severe consequences: property-loss, environmental devastation, injury, or death. Despite the severity of these risks, software continues to be written for safety-critical applications in languages that permit common classes of failures, such as undefined behavior, state corruption, and unexpected termination. One such language is C. Language standards that define allowable subsets (e.g. MISRA) and static analysis tools are often used in an attempt to ameliorate these failures by detecting them in the program code before they result in a critical issue at runtime. These traditional methods are ultimately insufficient when it comes to providing ahead-of-time assurances about safe runtime behavior for safety-critical applications. Alternative approaches must be considered.",
      "url": "https://polysync.io/s/The-Challenge-of-Using-C-in-Safety-Critical-Applications.pdf",
      "date_published": "2018-04-11T08:54:41.128+00:00",
      "author": {
        "name": "Shea Newton, Nathan Aschbache",
        "url": "https://polysync.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "2238849b-fcc8-4bd4-9828-66637c22f9af",
      "title": "Why would I use divergent functions?",
      "content_text": "Rust has some special syntax for ‘diverging functions’, which are functions that do not return.",
      "url": "https://medium.com/@yangnana11/rust-why-would-i-use-divergent-functions-d9dec59071bc",
      "date_published": "2018-04-11T08:54:41.128+00:00",
      "author": {
        "name": "Yang Nana",
        "url": "https://medium.com/@yangnana11"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d506eda8-cab3-4046-b0b7-3c16fd1bc53d",
      "title": "Rust all-hands (dev-tools stuff)",
      "content_text": "Last week (sigh, the week before last now) we held an 'all-hands' event in Berlin. It was a great event - fantastic to meet so many Rust people in real life and really energising to see how much is being planned and implemented. In this post I want to summarise some of the important dev-tools stuff that happened. Our planning and notes from some meetings is in the dev-tools team repo.",
      "url": "https://www.ncameron.org/blog/rust-all-hands-dev-tools-stuff/",
      "date_published": "2018-04-11T02:18:18+00:00",
      "author": {
        "name": "Nick Cameron",
        "url": "http://www.ncameron.org/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "68f328f0-50d5-4152-aa9a-f5ab3c69f397",
      "title": "A Shifty Riddle",
      "content_text": "When I finally implemented opportunistic mutations in mutagen, everything seemed fine until my co-maintainer gnieto found a problem. Code failed to compile with the mutagen plugin, something that should never happen as long as the code in question compiles without the plugin. We not only broke the code – we broke the build.",
      "url": "http://llogiq.github.io/2018/04/11/shift.html",
      "date_published": "2018-04-11T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e497ecb9-788c-476e-bb28-c1746fbff940",
      "title": "Writing My Final Year Project in Rust",
      "content_text": "As part of my final year in university I have had to undertake a project and then write a twenty page paper on it. I ended up being assigned one on a type of machine learning algorithm called boosting. This wasn't my first choice unfortunately, so I decided I'd try to make it interesting for myself by implementing it in Rust. Rust was, and still is, quite immature when it comes to machine learning - as Are We Learning Yet? confirms. I thought it would be an interesting challenge to write some machine learning algorithms in a language that has yet to be used too much for this field.",
      "url": "http://mattyhall.github.io/posts/writing-my-final-year-project-in-rust.html",
      "date_published": "2018-03-30T23:00:00+00:00",
      "author": {
        "name": "Matthew Hall",
        "url": "http://mattyhall.github.io/blog.html"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d1d6e382-3b80-431e-ba08-5cbe1ccebce2",
      "title": "Dark Side Of Ergonomics",
      "content_text": "Despite having an experience with wide range of computer languages, including C++ and Haskell (both strong influences to Rusts design), I found Rust hard to learn. Sometimes I grind my teeth about something the compiler doesn’t let me do. Despite that, I didn’t put ergonomics as a wish in any poll. In fact, if I was to take a poll right now, I’d probably be against further ergonomics initiatives.",
      "url": "https://vorner.github.io/2018/04/08/Dark-side-of-ergonomics.html",
      "date_published": "2018-04-08T00:00:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "7fbe9c06-2e4a-4da4-aea0-45b4828f6687",
      "title": "Async & Await in Rust: a full proposal",
      "content_text": "I’m really excited to announce the culmination of much of our work over the last four months: a pair of RFCs for supporting async & await notation in Rust. This will be very impactful for Rust in the network services space. The change is proposed as two RFCs:\n RFC #2394: which adds async & await notation to the language. RFC #2395: which moves a part of the futures library into std to support that syntax.",
      "url": "https://boats.gitlab.io/blog/post/2018-04-06-async-await-final/",
      "date_published": "2018-04-06T00:00:00+00:00",
      "author": {
        "name": "boats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e01d9c09-e66d-4fea-94e3-95db24137dd6",
      "title": "Sound and ergonomic specialization for Rust",
      "content_text": "Specialization holds the dubious honor of being among the oldest post-1.0 features remaining in unstable limbo. That’s for good reason, though: until recently, we did not know how to make it sound.",
      "url": "http://aturon.github.io/2018/04/05/sound-specialization/",
      "date_published": "2018-04-05T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/"
      },
      "tags": [
        "Language",
        "Computer Science"
      ]
    },
    {
      "id": "4812042b-1d2a-4171-9a77-d2f0a0c44b91",
      "title": "Writing the Perfect 'Collect' Trait",
      "content_text": "I’ve been spending some time thinking about garbage collection in rust. I know, shame on me, it’s a systems language, we hate garbage collection, but… even in a systems programming language, garbage collection is still pretty damn useful.",
      "url": "https://mtak-blog.github.io/the_perfect_collect_trait",
      "date_published": "2018-04-05T00:00:00+00:00",
      "author": {
        "name": "mtak-blog",
        "url": "https://mtak-blog.github.io/"
      },
      "tags": [
        "Language",
        "Computer Science"
      ]
    },
    {
      "id": "cb113ba3-eaa8-40e1-8ff8-a8b710bf89db",
      "title": "Custom tasks in Cargo",
      "content_text": "One of the big requests from the Domain Working Groups for Rust 2018 is a richer feature set for framework- or domain-specific workflows in Cargo. At the simplest level, that might look like project templates – the ability to direct cargo new to start with a custom template defined in crates.io. That’s already enough to get you cooking with frameworks like QuiCLI, which today involve a fixed set of initial scaffolding that you can fill in.",
      "url": "http://aturon.github.io/2018/04/05/workflows/",
      "date_published": "2018-04-05T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "5eca0d0a-81f6-4804-869f-32ed307adb9f",
      "title": "The Rust Team All Hands in Berlin: a Recap",
      "content_text": "Last week we held an “All Hands” event in Berlin, which drew more than 50 people involved in 15 different Rust Teams or Working Groups, with a majority being volunteer contributors. This was the first such event, and its location reflects the current concentration of team members in Europe. The week was a smashing success which we plan to repeat on at least an annual basis.",
      "url": "https://blog.rust-lang.org/2018/04/06/all-hands.html",
      "date_published": "2018-04-06T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "277652ec-bbeb-454c-85da-766438600d47",
      "title": "Cargo, Xargo, and Rustup",
      "content_text": "Another topic of discussion at the Berlin Rust All Hands was the long-term story around Cargo, Xargo, and Rustup. The latter two tools are both involved in managing your Rust toolchain, with Xargo allowing you to build custom stds and Rustup managing pre-built artifacts for mainstream targets. Xargo is most commonly used for cross-compiling to less common platforms, but can also be used to customize the standard library on mainstream platforms.",
      "url": "http://aturon.github.io/2018/04/06/rustup-xargo/",
      "date_published": "2018-04-06T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/"
      },
      "tags": [
        "Embedded",
        "Language"
      ]
    },
    {
      "id": "8379ada9-43de-4764-88b1-aa3d24b114fd",
      "title": "A Formal Look at Pinning",
      "content_text": "Recently, a new API for “pinned references” has landed as a new unstable feature in the standard library. The purpose of these references is to express that the data at the memory it points to will not, ever, be moved elsewhere. Others have written about why this is important in the context of async IO. The purpose of this post is to take a closer, more formal look at that API: We are going to take a stab at extending the RustBelt model of types with support for pinning.",
      "url": "https://www.ralfj.de/blog/2018/04/05/a-formal-look-at-pinning.html",
      "date_published": "2018-04-05T00:00:00+02:00",
      "author": {
        "name": "Ralf Jung",
        "url": "https://www.ralfj.de/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "0dd3a72c-b43f-449a-92f3-fd25f164d224",
      "title": "Corner Cutting vs. Productivity",
      "content_text": "I recently got into a discussion with another very knowledgeable Rustacean, who (I paraphrase) claimed that Rust is about adding just enough roadblocks to keep you from cutting corners. This is a nice metaphor because it explains a lot: Rust may feel more cumbersome, because it won’t let you cut corners. On the other hand, once it compiles, many classes of errors will already have been taken care of, so your code will usually work as expected (or if you’re new to Rust, unexpectedly well).",
      "url": "https://llogiq.github.io/2018/04/03/corners.html",
      "date_published": "2018-04-03T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "680e9488-98e3-4a44-b462-761cf817ca10",
      "title": "Why We're Betting on Rust",
      "content_text": "Considering how the state of our art is ever changing, I re-evaluate which tools belong in my box of gizmos each year as well. In the past, I’ve employed nginx as a high-performance cache and proxy, but it has been largely edged out by Envoy, which touts a hybrid non-blocking event model and has become wildly successful after being released in 2016. That very same principle, event-driven I/O, is the same reason I chose Node.js for most of the APIs I’ve developed since 2011. Even if practices change, we retain successful engineering models.\n\nBeginning late last year, as I sketched our founding mission and initial product offerings, I also decided to select a new primary language that could handle most of our primary development tasks. After writing mostly JavaScript and compile-to-JS languages for half a decade, I longed for something more.",
      "url": "https://www.uptime.ventures/blog/2018/04/why-were-betting-on-rust/",
      "date_published": "2018-04-02T00:00:00+00:00",
      "author": {
        "name": "Nicholas Young",
        "url": "https://www.uptime.ventures/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d14f3e75-4047-441e-a67b-fc0de042845a",
      "title": "Removing Connection State In mob",
      "content_text": "I started writing mob, an multi-echo server using mio, in 2015. I coded mob into a mostly working state and then left it mostly alone, only updating it to work with the latest stable mio. Recently, I started looking at the code again and had the urge to improve it. In a previous post, I talked about managing the state of connections in mob. In this post, I will walk through what I did to remove the need to track connection state. I wanted to remove the state because the implementation required an O(n) operation every tick of the mio event loop. It also added a fair amount of complexity to the code.",
      "url": "http://hermanradtke.com/2018/03/29/removing-connection-state-from-mob.html",
      "date_published": "2018-03-29T00:00:00+00:00",
      "author": {
        "name": "Herman J. Radtke III",
        "url": "http://hermanradtke.com/"
      },
      "tags": [
        "Language",
        "Web and Network Services"
      ]
    },
    {
      "id": "dac3ce68-bfe5-4774-8b89-fb4351d53445",
      "title": "Reliable Systems Series: Model-Based Testing",
      "content_text": "This is the first article in a series on techniques I’ve found useful for making my projects more reliable. These techniques are used in the distributed systems, database, automotive, embedded, and aerospace fields, but if you build services, user interfaces, or generally anything stateful, I think you will find something useful along the way.",
      "url": "https://medium.com/@tylerneely/reliable-systems-series-model-based-property-testing-e89a433b360",
      "date_published": "2018-03-28T12:52:27.284+00:00",
      "author": {
        "name": "Tyler Neely",
        "url": "https://medium.com/@tylerneely"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "5941ab41-5269-4401-9978-f6f389922443",
      "title": "Rust: First impressions from a C++ developer",
      "content_text": "I started learning Rust 2 weeks back (yay!!) whenever I got free time. And all the time that I spent  learning it has been worthwhile. This is not going to be a deep technical post, but just my impressions about Rust from where I come from (C++).",
      "url": "http://templated-thoughts.blogspot.com.au/2018/03/rust-first-impressions-from-c-developer.html",
      "date_published": "2018-03-31T00:43:00-07:00",
      "author": {
        "name": "Arun Muralidharan",
        "url": "http://templated-thoughts.blogspot.com.au/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "980f0166-c073-42bc-a1df-7dab36421e10",
      "title": "You can't Rust that",
      "content_text": "The last year has been fun because I could build a lot for really nice stuff for Sentry in Rust and for the first time the development experience was without bigger roadblocks. While we have been using Rust before it now feels different because the ecosystem is so much more stable and we ran less against language or tooling issues.\n\nHowever talking to people new to Rust (and even brainstorming APIs with coworkers) it's hard to get rid of the feeling that Rust can be a mind bending adventure and that the best way to have a stress free experience is knowing upfront what you cannot (or should not attempt to) do. Knowing that certain things just cannot be done helps putting your mind back back on the right track.\n\nSo here are things not to do in Rust and what to do instead which I think should be better known.",
      "url": "http://lucumr.pocoo.org/2018/3/31/you-cant-rust-that/",
      "date_published": "2018-03-31T00:00:00+00:00",
      "author": {
        "name": "Armin Ronacher",
        "url": "http://lucumr.pocoo.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "79ebe691-fe8b-46ea-806c-996919b730ca",
      "title": "I've just learned Rust and I think I'm in love",
      "content_text": "I’ve decided to learn some Rust recently while working on the Stanford’s experimental course on operating systems. Here’s a list of things that I think are great about it.",
      "url": "https://rskupnik.github.io/I-learned-rust-and-I-think-Im-in-love",
      "date_published": "2018-03-30T00:00:00+00:00",
      "author": {
        "name": "Radosław Skupnik",
        "url": "https://rskupnik.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4a0c4c01-2597-4688-ac99-2726bb1a3505",
      "title": "Thoughts on Rust, a few thousand lines in",
      "content_text": "To say my first foray into Rust was a frustrating struggle would be an understatement. I picked a terrible first project that left me neck deep in Rust’s trickiest areas right off the bat. I was excited to try again. A few years ago I wrote Sumoshell, a CLI App for log analysis. I’d wanted to improve it for a while, so porting it to Rust seemed like a nice way to kill two birds with one stone.",
      "url": "https://rcoh.me/posts/things-learned-first-thousand-lines-of-rust/",
      "date_published": "2018-03-24T12:56:00-07:00",
      "author": {
        "name": "Russell Cohen",
        "url": "https://rcoh.me/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "dc304d16-2ec3-45b1-833b-a9536c1a7d95",
      "title": "Memory Safety and Lifetimes in Rust",
      "content_text": "A program is memory-safe if in any possible execution of the program , all expressions e in the program that refer to an object of type T resolve to an object of type T that has been initialized and not yet deallocated.\n\nThere are different ways to guarantee memory safety for all programs. One is to restrict the programming language and disallow pointers. But, this forces most programs to make unnecessary copies of data. Another strategy, called garbage collection, embeds a garbage collector with every program. The garbage collector periodically looks for objects in memory that cannot be accessed from the program and reclaims this memory. The drawbacks of this are the overhead of garbage collection and that deallocation of memory is no longer under the control of the programmer.",
      "url": "https://balu.github.io/lifetimes.html",
      "date_published": "2018-02-26T18:52:22+00:00",
      "author": {
        "name": "Balagopal Komarath",
        "url": "https://balu.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "2cadbd86-48ec-4fab-95bb-5959818d5747",
      "title": "Announcing Rust 1.25",
      "content_text": "The Rust team is happy to announce a new version of Rust, 1.25.0. The last few releases have been relatively minor, but Rust 1.25 contains a bunch of stuff!",
      "url": "https://blog.rust-lang.org/2018/03/29/Rust-1.25.html",
      "date_published": "2018-03-29T00:00:00+00:00",
      "author": {
        "name": "The Rust Core Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "04fdf0c8-05ab-46f3-b72d-c7e88eb6dc9b",
      "title": "Cargo got some new tricks, but is it still correct!?",
      "content_text": "I have been working with @alexcrichton to improve the resolver in Cargo.",
      "url": "https://www.reddit.com/r/rust/comments/87ss76/cargo_got_some_new_tricks_but_is_it_still_correct/",
      "date_published": "2018-03-28T15:25:46+00:00",
      "author": {
        "name": "Eh2406",
        "url": "https://www.reddit.com/user/Eh2406"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d4574214-e1ca-4fe8-858b-b5c9c64046ab",
      "title": "Closures 101",
      "content_text": "Closures are an interesting CS concept and one that will frequently come up in interviews. I know I've been asked, and have asked, questions about closures for frontend (Javascript) positions numerous times. And in all honesty they're a difficult concept to define, especially when you're under the scrutiny of an interviewer. In this post I'd like to show how Rust leverages the concept of closures and why they might be used. But first, we need to discuss the concept of scope because it is so important for the full understanding of closures.",
      "url": "http://mttyng.com/closures-101/",
      "date_published": "2018-03-25T00:00:00+00:00",
      "author": {
        "name": "Matt",
        "url": "http://mttyng.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "eef1f270-fb75-475a-b10c-8e3813990362",
      "title": "Atomics ☢ and memory ordering",
      "content_text": "Taming multiple threads is a mess. Not only many things can happen all at once, but what you wrote in the code isn’t exactly what happens in the CPU. To gain some more performance, the compiler cheats if it thinks nobody is watching. It can reorder instructions or throw some of them out if they look useless. The same happens in the hardware. Furthermore, there isn’t just one RAM, but each memory location can live in different caches at each time and some of them are private to each CPU. It would not make do to publish all the local changes to one’s cache right away.",
      "url": "https://vorner.github.io/2018/03/25/Atomics.html",
      "date_published": "2018-03-25T00:00:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ad4ba620-3dae-4618-abc7-e245c97369d3",
      "title": "Refactoring some repetitive code to a Rust macro",
      "content_text": "I have started porting the code in librsvg that parses SVG's CSS properties from C to Rust. Many properties have symbolic values. StrokeLinejoin is the first property that I ported. First I had to write a little bunch of machinery to allow CSS properties to be kept in Rust-space instead of the main C structure that holds them (upcoming blog post about that). But for now, I just want to show how this boiled down to a macro after refactoring.",
      "url": "https://people.gnome.org/~federico/blog/refactoring-some-repetitive-code-to-a-macro.html",
      "date_published": "2018-03-23T11:01:30-06:00",
      "author": {
        "name": "Federico Mena Quintero",
        "url": "https://people.gnome.org/~federico/blog/index.html"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "bf2c60f0-b2be-44c4-ba38-dce0f5b2e041",
      "title": "Mutating Rust: Under Cover",
      "content_text": "Any mutation testing tool worth its salt uses coverage to restrict the number of tests to run. mutagen is no exception, of course, so once we had a test runner, we wanted to extend it with coverage-based testing.",
      "url": "https://llogiq.github.io/2018/03/25/cover.html",
      "date_published": "2018-03-25T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "9e02b413-b1dd-42a3-a970-2d7b89354c0c",
      "title": "A look at Tokio: how this asynchronous event handler works (Russian)",
      "content_text": "И для чего он используется в фреймворке для приватных блокчейнов Exonum Tokio — это фреймворк для разработки сетевых масштабируемых приложений на Rust,...",
      "url": "https://habrahabr.ru/company/bitfury/blog/351824/",
      "date_published": "2018-03-22T16:46:00+00:00",
      "author": {
        "name": "Алина Тестова",
        "url": "https://habrahabr.ru/company/bitfury/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "6cf2d39d-3ea9-4af4-b9c7-a368be610189",
      "title": "Python Idioms in Rust",
      "content_text": "I’ve been going through a period of programming language wanderlust over the past couple months. Recently, I’ve been quite interested in Rust. Coming from Python, I’ve found a lot of Rust’s language features to be quite powerful.",
      "url": "http://benjamincongdon.me/blog/2018/03/23/Python-Idioms-in-Rust/",
      "date_published": "2018-03-23T12:23:22+00:00",
      "author": {
        "name": "Benjamin Congdon",
        "url": "http://benjamincongdon.me/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "93eaac73-c49e-4d21-8d11-f9ca7e40721c",
      "title": "From python to Go to Rust: an opinionated journey",
      "content_text": "When looking for a new backend language, I naturally went from Python to the new cool kid: Go. But after only one week of Go, I realised that Go was only half of a progress. Better suited to my needs than Python, but too far away from the developer experience I was enjoying when doing Elm in the frontend. So I gave Rust a try.",
      "url": "http://tech.allo-media.net/point/of/view/2018/03/22/from-python-to-go-to-rust.html",
      "date_published": "2018-03-22T09:00:00+01:00",
      "author": {
        "name": "Allo-Media",
        "url": "http://tech.allo-media.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "afdcd322-eab4-4363-be76-cecaa050e867",
      "title": "Async/Await VI: 6 weeks of great progress",
      "content_text": "It’s hard to believe its been almost 6 weeks since the last post I made about async/await in Rust. So much has happened that these last several weeks have flown by. We’ve made exceptionally good progress on solving the problem laid out in the first post of this series, and I want to document it all for everyone.\nFuture and the pinning API Last month I wrote an RFC called “Standard library API for immovable types”.",
      "url": "https://boats.gitlab.io/blog/post/2018-03-20-async-vi/",
      "date_published": "2018-03-20T00:00:00+00:00",
      "author": {
        "name": "boats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "8bd1d21c-79d1-4470-9d49-907c26ab0057",
      "title": "Type-directed metaprogramming in Rust",
      "content_text": "I explore how to use Rust compiler internals to metaprogram Rust using information from the typechecker, e.g. to automatically insert garbage-collection into Rust code, and discuss the benefits and drawbacks of this approach.",
      "url": "http://willcrichton.net/notes/type-directed-metaprogramming-in-rust/",
      "date_published": "2018-03-18T00:00:00+00:00",
      "author": {
        "name": "Will Crichton",
        "url": "http://willcrichton.net/notes/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "03cf26ef-4e0f-4124-91ec-064467299583",
      "title": "Putting bors on a PIP",
      "content_text": "We have a problem: the average queue of ready-to-test PRs to the main Rust repo has been steadily growing for a year. And at the same time, the likelihood of merge conflicts is also growing, as we include more submodules and Cargo dependencies that require updates to Cargo.lock.",
      "url": "http://aturon.github.io/2018/03/19/bors/",
      "date_published": "2018-03-19T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "908c4bee-bf00-4e80-8136-9282eb8de6f6",
      "title": "Rust Lifetimes or: How I Learned to Stop Free-ing and Love the Borrow",
      "content_text": "To me one of the initial shocks of learning Rust was figuring out lifetimes. As a frontend-by-day developer I don't come face-to-face with the 'Double free' and 'Use after free' problems all that often. Actually, it could be easily argued that my backend-brethren don't really either or, for that matter, anyone who's typically dealing with a garbage collected language. I'm looking over at you JS, Java, and Ruby devs. I'd bet most neckbea.. *cough, excuse me, C developers are comfortable with these issues but alas, I am not. As such, lifetimes were kinda difficult to wrap my head around but I think I get them a little better now so let me try to explain.",
      "url": "http://mttyng.com/rust-lifetimes-or-how-i-learned-to-stop-free-ing-and-love-the-borrow/",
      "date_published": "2018-03-09T00:00:00+00:00",
      "author": {
        "name": "Matt",
        "url": "http://mttyng.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "1fe95cfd-488a-41a5-adca-a44d8f79c679",
      "title": "What's a where clause?",
      "content_text": "I've been trying to get a hang of some of the more advanced, and weird, concepts of Rust. With any new language it's a little difficult to know where to begin. How do you throw yourself into the deep-end of something without knowing where the deep-end is?",
      "url": "http://mttyng.com/whats-a-where-clause/",
      "date_published": "2018-02-20T00:00:00+00:00",
      "author": {
        "name": "Matt",
        "url": "http://mttyng.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "f5ba053a-1bbb-465d-a430-55bd0a1d357a",
      "title": "How Rust Implements Tagged Unions",
      "content_text": "The Rust compiler implements tagged unions, which prevent you from crashing your program by initializing a union with one variant and accessing it with another. Rust uses enum to improve on both C enums and C unions at the same time.",
      "url": "http://patshaughnessy.net/2018/3/15/how-rust-implements-tagged-unions",
      "date_published": "2018-03-15T03:00:00+00:00",
      "author": {
        "name": "Pat Shaughnessy",
        "url": "http://patshaughnessy.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "81e14040-a499-4802-9d1b-c58deeb2be79",
      "title": "Deciding if two types are equal",
      "content_text": "mutagen until recently suffered a bug that rendered both the return input and the interchange arguments mutation inapplicable.\n\nTo explain, the former mutation compares each input type with the return type and allows code to return inputs of the same type, if any, while the latter compares input arguments’ types and exchanges two equally-typed inputs.",
      "url": "https://llogiq.github.io/2018/03/15/types.html",
      "date_published": "2018-03-15T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "eabc9692-30cf-4511-89f4-9068b46aadd8",
      "title": "A Comparison Between Rust and Erlang",
      "content_text": "This article will focus on a comparison between Erlang and Rust, detailing their similarities and differences. It may be interesting to both Erlang developers looking into Rust and Rust developers looking into Erlang. A final section will detail more about each of the language capabilities and shortcomings and argue for the possibility of leveraging both languages' strengths in the same project.",
      "url": "https://www.infoq.com/articles/rust-erlang-comparison",
      "date_published": "2018-03-13T00:00:00+00:00",
      "author": {
        "name": " Krishna Kumar Thokala",
        "url": "https://www.infoq.com/profile/Krishna-Kumar-Thokala"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "24afdde0-ef13-4e26-b39e-b2f9d52ab901",
      "title": "How to use external crates with macros in Rust",
      "content_text": "A simple approach to use external crates with our macros in Rust.",
      "url": "https://medium.com/@kimond/how-to-use-external-crates-with-our-macros-in-rust-6dfe025351e0",
      "date_published": "2018-03-14T12:45:30.700+00:00",
      "author": {
        "name": "Kim Desrosiers",
        "url": "https://medium.com/@kimond"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "962abf61-6061-4e8d-90b1-1d3ba90d5e1d",
      "title": "mutagen: Pattern Boldness",
      "content_text": "At the moment, mutagen only considers top-level idents in function arguments (e.g.foo(x: X, y: Y)), but function arguments are actually patterns, so we could have foo((x, y): (X, Y)) or bar(Bar { bla, bazz } : Bar). For now, this means we have no type information for either of those examples.",
      "url": "http://llogiq.github.io/2018/03/13/patterns.html",
      "date_published": "2018-03-13T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4ed8ee1b-6f71-4ac5-b7e5-142509562231",
      "title": "Rust's 2018 Roadmap",
      "content_text": "Each year the Rust community comes together to set out a roadmap. This year, in addition to the survey, we put out a call for blog posts in December, which resulted in 100 blog posts written over the span of a few weeks. The end result is the recently-merged 2018 roadmap RFC.",
      "url": "https://blog.rust-lang.org/2018/03/12/roadmap.html",
      "date_published": "2018-03-12T00:00:00+00:00",
      "author": {
        "name": "The Rust Core Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "90d39fbf-c75d-4943-9069-4b65d11b1be9",
      "title": "Should You Learn Rust?",
      "content_text": "Oftentimes, I see a variant of this question posted or asked somewhere. In general, most of the times I think the answer is „Yes“, but maybe for reasons other than you’d think at first.",
      "url": "https://vorner.github.io/2018/03/11/Should-you-learn-rust.html",
      "date_published": "2018-03-11T00:00:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "bd4b8e12-dd4d-4bf8-b553-f5f912ec4e87",
      "title": "The Union of Parallel Universes",
      "content_text": "Rustdoc has a pretty powerful feature that feels pretty unknown. It doesn’t help that it’s currently restricted by a nightly feature gate, but it’s still cool enough that I want to talk about it.",
      "url": "https://quietmisdreavus.net/code/2018/03/09/the-union-of-parallel-universes/",
      "date_published": "2018-03-09T14:30:00-06:00",
      "author": {
        "name": "QuietMisdreavus",
        "url": "https://quietmisdreavus.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "db7ea4c5-14ae-4a9d-9bf4-a314c20225f7",
      "title": "Exploring Function Overloading",
      "content_text": "Overloading is the ability to create multiple functions of the same name with different implementations.\n\nRust has no traditional overloading, you cannot define two methods with the same name. The compiler will complain that you have a duplicate definition regardless of the different argument types.",
      "url": "http://casualhacks.net/blog/2018-03-10/exploring-function-overloading/",
      "date_published": "2018-03-10T00:00:00+09:00",
      "author": {
        "name": "Casper",
        "url": "http://casualhacks.net/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "0d2f8636-6f6c-42f3-8159-beac5a856009",
      "title": "Redefining Failure",
      "content_text": "I recently got the chance to redo the error handling in two different crates I help maintain. For liquid, I decided to write the error types by hand rather than use something like error-chain. In the case of assert_cli, I decided to finally give failure a try.",
      "url": "https://epage.github.io/blog/2018/03/redefining-failure/",
      "date_published": "2018-03-09T03:08:23+00:00",
      "author": {
        "name": "Ed Page",
        "url": "https://epage.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "8da41ef1-4c51-4269-bec3-fc377a0f387f",
      "title": "Coping with Mutable State in Multiple Threads with Rust",
      "content_text": "One of the value propositions most frequently lauded by Rust developers is its freedom from data races. The compiler will literally not allow you to build code that could ever produce a situation where two threads can mutate the same data.",
      "url": "https://medium.com/@KevinHoffman/coping-with-mutable-state-in-multiple-threads-with-rust-9059c83b6c01",
      "date_published": "2018-03-05T17:42:58.844+00:00",
      "author": {
        "name": "Kevin Hoffman",
        "url": "https://medium.com/@KevinHoffman"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "79704e4b-5e9f-4366-84a8-53d5a3431e2f",
      "title": "Getting A Handle On Things",
      "content_text": "Today we will take a very simple intrusive linked list written in Rust and make it safe. Kind of, anyway.\n\nBefore we start making something safe we need an unsafe thing to make safe. Let’s not pretend that what we are doing here is the least bit useful, let us instead do it just for the fun of it. (What we are doing actually is useful, the explanation of which this margin is too narrow to contain.)",
      "url": "https://eno.space/blog/2018/03/Getting-a-handle-on-things",
      "date_published": "2018-03-03T00:00:00+01:00",
      "author": {
        "name": "@u0060",
        "url": "https://eno.space/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "0c9a85c5-9017-4922-b07a-050f36b8db84",
      "title": "Compiling Cargo crates natively with Meson",
      "content_text": "Recently we have been having discussions about how Rust and Meson should work together, especially for mixed language projects. One thing which multiple people have told me (over a time span of several years, actually) is that Rust is Special in that everyone uses crates for everything. Thus there is no point in having any sort of Rust support, the only true way is to blindly call Cargo and have it do everything exactly the way it wants to.\n\nThis seems like a reasonable recommendation so I did what every reasonable person would do and accepted this as is.\n\nBut then curiosity takes hold of you and you start to wonder. Is that really the case?",
      "url": "https://nibblestew.blogspot.com.au/2018/03/compiling-cargo-crates-natively-with.html",
      "date_published": "2018-03-04T05:35:00-08:00",
      "author": {
        "name": "Jussi",
        "url": "https://nibblestew.blogspot.com.au/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "85925a6b-30c1-4c0f-8caf-b6ccd9e3e19c",
      "title": "Encheapening Cernan Internal Metrics",
      "content_text": "In the new 0.7.x series of cernan we stumbled on a neat, cheap approach for making internal metrics available inside a rust codebase, an approach that has legs in other projects, I'd say. This is going to be a quick note describing what cernan is, what we were doing before and how our current approach works.",
      "url": "http://blog.troutwine.us/2017/08/31/encheapening-cernan-internal-metrics/",
      "date_published": "2018-03-04T00:00:00+00:00",
      "author": {
        "name": "Brian L. Troutwine",
        "url": "http://blog.troutwine.us/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c59a9688-62e5-4919-8687-e5ff82c3c5a3",
      "title": "Why Rust Has Macros",
      "content_text": "When I recently told a coworker that Rust has macros, his first reaction was that this was bad. Previously I would have had the same reaction, but a part of what learning Rust has taught me is that macros don’t need to be bad. This post exists to help explain why that is, by diving into what problems macros solve, with a brief look at their downsides as well. In other words, this post is not a technical deep dive on how macros work, but focuses on the use cases for macros, and doesn’t require much knowledge about Rust to follow.",
      "url": "https://kasma1990.gitlab.io/2018/03/04/why-rust-has-macros/",
      "date_published": "2018-03-04T00:00:00+00:00",
      "author": {
        "name": "Kasper Andersen",
        "url": "https://kasma1990.gitlab.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "95bd2ff7-1a99-4092-931a-b17d782282d3",
      "title": "Serializing awkward data with serde",
      "content_text": "Recently I’ve been writing Rust code to work with a third-party data source in TOML format. In other languages I’d just load the data with some standard TOML library and have my program rummage through it, but I’ve been hearing lovely things about the Rust serialization library serde, so I figured I’d try it out.",
      "url": "http://zork.net/~st/jottings/Serializing_awkward_data_with_serde.html",
      "date_published": "2018-03-04T07:43:09+00:00",
      "author": {
        "name": "Screwtape",
        "url": "http://zork.net/~st/jottings/all_pages.html"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "39d1ac9b-501b-46c3-b2e6-68f2d4aabe1d",
      "title": "Making a Brainf*ck to C Compiler in Rust",
      "content_text": "Let’s make a tokenizer and code generator to understand the basics behind tiny compilers.",
      "url": "https://medium.com/@CanHasCommunism/making-a-brainf-ck-to-c-compiler-in-rust-10f0c01a282d",
      "date_published": "2018-03-03T18:13:20.377+00:00",
      "author": {
        "name": "Aesl",
        "url": "https://medium.com/@CanHasCommunism"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "2f386775-d0a5-474b-a9de-c14af7453c40",
      "title": "Opportunistic Mutations",
      "content_text": "As you may know, my current mutagen project deals with mutation testing in Rust. However, as I remarked, Rust’s famed flexibility leaves us little room to do mutations while keeping the type checker happy. For example, other mutation testing frameworks can mutate x + y to x - y.\n\nThis is an interesting mutation, because it’s so easy to do in languages like Java, which have full type information available at the bytecode level and so hard to do in Rust, because the std::ops traits make everything so hecking flexible.",
      "url": "https://llogiq.github.io/2018/03/03/opportune.html",
      "date_published": "2018-03-03T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "407d3ba2-d0af-4121-b13a-468b1f0f66cd",
      "title": "Stopping a Rust worker",
      "content_text": "This is a small post about a specific pattern for cancellation in the Rust programming language. The pattern is simple and elegant, but it’s rather difficult to come up with it by yourself.",
      "url": "https://matklad.github.io/2018/03/02/stopping-a-rust-worker.html",
      "date_published": "2018-03-02T20:11:50+00:00",
      "author": {
        "name": "Aleksey Kladov",
        "url": "https://matklad.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ab076ead-649f-47ff-8fa2-a7c243ba3dca",
      "title": "Docker Multi-Stage Build",
      "content_text": "On June 13, 2017 took place the Paris Container Day. They unveiled a new docker feature: multi-stage build. That's the subject of this article.",
      "url": "https://blog.jawg.io/docker-multi-stage-build/",
      "date_published": "2018-03-01T14:00:00+00:00",
      "author": {
        "name": "Jones Magloire",
        "url": "http://blog.jawg.io/"
      },
      "tags": [
        "Language",
        "DevOps and Deployment"
      ]
    },
    {
      "id": "257617e2-c1fe-44c7-9cb9-7c07495b96ec",
      "title": "Object Shadowing for Serialization of Complex Types",
      "content_text": "Presently, I’m busy writing a capture the flag (CTF) scoreboard, it requires rather complex structures and relationships with other internal objects. Being a security event, I’d also like to maintain explicit control of user data. While serialization in Rust has come a significant way, leveraging auto-generation presents some issues.",
      "url": "https://commiebstrd.github.io/rustlang/serde/json/2018/03/01/object-shadowing.html",
      "date_published": "2018-03-01T05:00:00+00:00",
      "author": {
        "name": "Spenser Reinhardt",
        "url": "https://commiebstrd.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ca98f7f9-8927-48e9-8028-15e81f20f8a6",
      "title": "Add examples to your Rust libraries",
      "content_text": "When you’re writing a library for other programs to depend on, it is paramount to think how the developers are going to use it in their code.\n\nThe best way to ensure they have a pleasant experience is to put yourself in their shoes. Forget the internal details of your package, and consider only its outward interface. Then, come up with a realistic use case and just implement it.\n\nIn other words, you should create complete, end-to-end, and (somewhat) usable example applications.",
      "url": "http://xion.io/post/code/rust-examples.html",
      "date_published": "2018-02-28T08:37:00+01:00",
      "author": {
        "name": "Karol Kuczmarski",
        "url": "http://xion.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d001ce02-fbfb-4a08-8389-0f713b09bf72",
      "title": "My Rust Dockerfile",
      "content_text": "Lets deploy small docker images for Rust",
      "url": "https://blog.sedrik.se/posts/my-docker-setup-for-rust/",
      "date_published": "2018-02-26T00:00:00+00:00",
      "author": {
        "name": "Fredrik Park",
        "url": "https://blog.sedrik.se/"
      },
      "tags": [
        "Language",
        "DevOps and Deployment"
      ]
    },
    {
      "id": "cec6c9fd-a92b-4f5a-8d9b-9b84c263c48f",
      "title": "Writing a doubly linked list in Rust is easy",
      "content_text": "This is a response to the recently submitted blog post titled Why Writing a Linked List in (safe) Rust is So Damned Hard. The post on Reddit was even more dramatic: Why Writing a Linked List in Rust is Basically Impossible.\n\nI see exaggarated claims like these very often - and strongly disagree. Writing a doubly linked list in Rust is not hard - in fact, it's fairly easy! The best strategy, in my opinion, is creating a vector for allocating nodes and using indices instead of pointers. This strategy is often overlooked, getting a 'honorauble mention' at best.",
      "url": "https://www.reddit.com/r/rust/comments/7zsy72/writing_a_doubly_linked_list_in_rust_is_easy/",
      "date_published": "2018-02-24T00:35:43+00:00",
      "author": {
        "name": "/u/stjepang",
        "url": "https://www.reddit.com/user/stjepang"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "5e572868-98d0-4944-b897-14cca13a39a4",
      "title": "Reasoning with Types in Rust",
      "content_text": "Rust is a modern programming language which is marketed primarily on the basis of its very nice type system, and I’d like to tell you about how you can use this type system to reason about your programs in interesting ways. Most of the time when its type system is discussed, the focus is on its guarantee of data race freedom and ability to enable so-called fearless concurrency (and rightfully so—this is a place where Rust truly shines!). Today, I have a different focus in mind, characterized perhaps most succinctly as follows:",
      "url": "https://aaronweiss.us/posts/2018-02-26-reasoning-with-types-in-rust.html",
      "date_published": "2018-02-26T00:00:00+00:00",
      "author": {
        "name": "Aaron Weiss",
        "url": "https://aaronweiss.us/archive.html"
      },
      "tags": [
        "Language",
        "Computer Science"
      ]
    },
    {
      "id": "0493daa3-4abb-46eb-82de-e75daea4bbac",
      "title": "Pushing Rust To 2019",
      "content_text": "Some of these suggestions are not entirely new and have been added as posts/ comments on /r/rust, Github threads. But I believe better listing down all in a one place, because now we are in the correct time even I am bit late.",
      "url": "https://medium.com/@dumindu/pushing-rust-to-2019-9616d82172d3",
      "date_published": "2018-02-23T15:44:16.399+00:00",
      "author": {
        "name": "Dumindu Madunuwan",
        "url": "https://medium.com/@dumindu"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "516e4eaf-1ce1-49be-a457-a471e9f97329",
      "title": "How doctests get made",
      "content_text": "One of rustdoc’s greatest features is the ability to take code samples within your documentation and run them like tests. This ensures that all your samples stay up to date with your library’s API changes. However, there are some steps that need to happen to massage these “doctests” into something that can be compiled and run like a regular program.",
      "url": "https://quietmisdreavus.net/code/2018/02/23/how-the-doctests-get-made/",
      "date_published": "2018-02-23T16:00:00-06:00",
      "author": {
        "name": "QuietMisdreavus",
        "url": "https://quietmisdreavus.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "450ba7fc-c3ea-4af5-bda4-06842f062de8",
      "title": "Rust Typestates",
      "content_text": "A long time ago, the Rust language was a language with typestate. Officially, typestates were dropped long before Rust 1.0. In this entry, I’ll get you in on the worst kept secret of the Rust community: Rust still has typestates.",
      "url": "https://yoric.github.io/post/rust-typestate/",
      "date_published": "2018-02-22T15:15:55+01:00",
      "author": {
        "name": "David Teller",
        "url": "https://yoric.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "45772a5b-1f22-4db9-9eee-f888c0c82660",
      "title": "Why Writing a Linked List in Rust is Basically Impossible [in safe Rust]",
      "content_text": "Before I start this post, let me preface it by saying that I’m not an experienced Rustacean by any means. Errata and corrections are appreciated. This post is aimed at helping other fledgling rust-learners avoid my mistake. First, by helping Rust learners pick good introductory projects that will fit naturally in idiomatic rust. Second, by helping Rust learners start building Rust-friendly design intuition. I’d heard about Rust and it’s inscrutable borrow checker for years, but after reading a few blog posts about compiler error improvements, I figured it might be user-friendly enough to give it a try.",
      "url": "https://rcoh.me/posts/rust-linked-list-basically-impossible/",
      "date_published": "2018-02-20T08:55:56-08:00",
      "author": {
        "name": "Russell Cohen",
        "url": "https://rcoh.me/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "3dc17991-d359-4205-917a-80b37a564b37",
      "title": "Rust for Cross-Language System Libraries",
      "content_text": "We have been building libpasta as a simple, usable solution to password hashing and migration. The goal for libpasta is to be a cross-platform, cross-language system library. libpasta is written in Rust, exports a C-style API, and builds to a static/shared library. Most languages support calling external libraries through foreign function interfaces (FFIs), and the end result can be seen in the documentation where each language has access to the libpasta functionality.",
      "url": "https://libpasta.github.io/blog/bindings/",
      "date_published": "2018-02-21T00:00:00+00:00",
      "author": {
        "name": "libpasta",
        "url": "https://libpasta.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "8e33c7c4-2788-418b-8e47-ca8990ae0d38",
      "title": "Snips Uses Rust to Build an Embedded Voice Assistant",
      "content_text": "The team at Paris-based Snips has created a voice assistant that can be embedded in a single device or used in a home network to control lights, thermostat, music, and more. You can build a home hub on a Raspberry Pi and ask it for a weather report, to play your favorite song, or to brew up a double espresso. Manufacturers like Keecker are adding Snips’ technology to products like multimedia home robots. And Snips works closely with leaders across the value chain, like NVIDIA, EBV, and Analog Devices, in order to voice-enable an increasingly wider range of device types, from speakers to home automation systems to cars.",
      "url": "https://blog.mozilla.org/blog/2018/02/21/snips-uses-rust-build-embedded-voice-assistant/",
      "date_published": "2018-02-21T12:34:56-08:00",
      "author": {
        "name": "Judy DeMocker",
        "url": "https://blog.mozilla.org/blog/author/jdemockermozilla-com/"
      },
      "tags": [
        "Language",
        "Tools and Applications"
      ]
    },
    {
      "id": "c078b1d0-a902-42c5-84d0-5d262146e64c",
      "title": "Using macro to generate generic docs?",
      "content_text": "We were recently able to finally make the docs for integer primitive types much more accurate (thanks to @antoyo!). Now, the code examples match the type for which they're written. No more i32 examples for i128 (I think you got the idea at this point)! Now, I think a few people might be interested by the method we used to achieve such a result so let's talk about it.",
      "url": "https://blog.guillaume-gomez.fr/articles/2018-02-19+Using+macro+to+generate+generic+docs%3F",
      "date_published": "2018-02-19T00:00:00+00:00",
      "author": {
        "name": "Guillaume Gomez",
        "url": "https://blog.guillaume-gomez.fr/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "5ecd2c77-20dd-4fd5-84a7-6c8e2364ebde",
      "title": "Ferrous Oxide For Jaguars And Incremented Crocodiles",
      "content_text": "Caveat lector: the primary purpose of the article is to introduce a reader proficient in one of the popular object-oriented languages how not to program in Rust. While each feature of the language will be briefly introduced where it is used, no great efforts will be made to explain the feature in detail. Links to the Rust book should provide that.",
      "url": "https://eno.space/blog/2018/02/Ferrous-oxide-for-jaguars-and-incremented-crocodiles",
      "date_published": "2018-02-15T00:00:00+01:00",
      "author": {
        "name": "@u0060",
        "url": "https://eno.space/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "6d0e61c5-087e-48dc-abd8-ded4f3e43a8a",
      "title": "Rust things I miss in C",
      "content_text": "Librsvg feels like it is reaching a tipping point, where suddenly it seems like it would be easier to just port some major parts from C to Rust than to just add accessors for them. Also, more and more of the meat of the library is in Rust now. I'm switching back and forth a lot between C and Rust these days, and C feels very, very primitive these days.",
      "url": "https://people.gnome.org/~federico/blog/rust-things-i-miss-in-c.html",
      "date_published": "2018-02-18T21:26:04-06:00",
      "author": {
        "name": "Federico Mena Quintero",
        "url": "https://people.gnome.org/~federico/blog/index.html"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "f77cc701-eca9-4b85-a450-dd10c1766966",
      "title": "Sorting in Rust: Selection, Insertion, and Counting Sort",
      "content_text": "Sorting is an invaluable skill and often covered early in a computer science curriculum. Have you ever tried to look up a friends phone number in an unsorted list!? You’d have to look at every single entry. Sorting creates all sorts of ways to access data quicker.",
      "url": "https://medium.com/@spyr1014/sorting-in-rust-selection-insertion-and-counting-sort-2c4d3575e364",
      "date_published": "2018-02-18T23:57:10.254+00:00",
      "author": {
        "name": "Andrew Jakubowicz",
        "url": "https://medium.com/@spyr1014"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ff94e8a6-c203-4cbe-af46-8f99e2896dd8",
      "title": "Borrow cycles in Rust: arenas v.s. drop-checking",
      "content_text": "Ownership and borrowing are the fundamentals of data structures in Rust. However, both taking owneship of a value (moving it) or taking a reference to it can only happen after the value was created. This ordering seems to prevent having any cycle in a data structure, even though that’s sometimes useful or necessary. For example in a web page’s content tree, from any DOM node, one can easily access (if any) its first and last child, previous and next sibling, (so children of a node form a doubly-linked list) and parent. Some other applications might need to manipulate arbitrary graphs in their full generality.",
      "url": "https://exyr.org/2018/rust-arenas-vs-dropck/",
      "date_published": "2018-02-17T00:00:00+00:00",
      "author": {
        "name": "Simon Sapin",
        "url": "https://exyr.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "938457b4-8905-4954-9007-88c80a2c24d6",
      "title": "\"The Expressive C++17 Coding Challenge (in Rust)\" Revisited",
      "content_text": "In October of last year, I wrote a post, “The Expressive C++17 Coding Challenge (in Rust)”. For various reasons, it got brought up again in the D world, and seb has written a new post. It’s good, you should check it out! However, it links to my gist, not my blog post. As I said back then: I held myself to the same constraints as the original contest; no external packages is a bit painful in Rust, but it’s not too bad. Mostly it would let me eliminate boilerplate while also improving correctness, and making the code a bit shorter. So, that got me thinking: What would this look like if I could use external packages? I took about an hour, and knocked it out. I have two versions to show you today, one where I pay no attention to allocations, and one where it’s zero-allocation.",
      "url": "http://words.steveklabnik.com/the-expressive-c-17-coding-challenge-in-rust-revisited",
      "date_published": "2018-02-14T10:12:15-08:00",
      "author": {
        "name": "Steve Klabnik",
        "url": "http://words.steveklabnik.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "28ce1b60-8837-4443-87fb-669bf176db9b",
      "title": "Reflecting on ppbert",
      "content_text": "I had an itch: I was pretty-printing the BERT-encoded terms that we use in a production system at work and it was very slow. The Erlang shell took more than two minutes to dump the largest file. (It took about 0.1 second to read and parse the file; the rest was spent in io:format.) I decided to scratch that itch: I wrote ppbert, a command-line utility that reads BERT-encoded values and pretty-prints them. I’ve worked sporadically on ppbert for almost a year now, I use it daily at work, I’m happy with it, and I want to write about some of the things I learned during that journey.",
      "url": "https://vfoley.xyz/ppbert/",
      "date_published": "2018-02-09T00:00:00+00:00",
      "author": {
        "name": "Vincent Foley",
        "url": "http://vfoley.xyz/"
      },
      "tags": [
        "Tools and Applications",
        "Language"
      ]
    },
    {
      "id": "c7a9c9d2-8858-4f47-afa3-19ec1f2f6b86",
      "title": "Maximally minimal specialization: always applicable impls",
      "content_text": "So aturon wrote this beautiful post about what a good week it has been. In there, they wrote: \"Breakthrough #2: @nikomatsakis had a eureka moment and figured out a path to make specialization sound, while still supporting its most important use cases (blog post forthcoming!). Again, this suddenly puts specialization on the map for Rust Epoch 2018\". Sheesh I wish they hadn’t written that! Now the pressure is on. Well, here goes nothing =).",
      "url": "http://smallcultfollowing.com/babysteps/blog/2018/02/09/maximally-minimal-specialization-always-applicable-impls/",
      "date_published": "2018-02-09T00:00:00-05:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "325af8a8-af88-4a07-9c8f-16d2865f01f3",
      "title": "Closing out an incredible week in Rust",
      "content_text": "This week has been so amazing that I just had to write about it. Here’s a quick list of some of what went down in one week:",
      "url": "http://aturon.github.io/2018/02/09/amazing-week/",
      "date_published": "2018-02-09T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4924a3b4-b71f-4a15-ae2d-0a77bcb30e98",
      "title": "Async/Await V: Getting back to the futures",
      "content_text": "Two posts ago I proposed a particular interface for shipping self-referential generators this year. Immediately after that, eddyb showed me a better interface, which I described in the next post. Now, to tie everything together, its time to talk about how we can integrate this into the futures ecosystem. Starting point: this Generator API To begin, I want to document the generator API I’ll be using in this post, which is roughly what followed from my previous post:",
      "url": "https://boats.gitlab.io/blog/post/2018-02-08-async-v-getting-back-to-the-futures/",
      "date_published": "2018-02-08T00:00:00+00:00",
      "author": {
        "name": "boats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ac0c5546-f21b-4b47-b4a4-950464472aad",
      "title": "Async/Await IV: An Even Better Proposal",
      "content_text": "I did not plan to write this blog post. I thought that the fourth post in my series would explain how we could go from the generator API in my previous post to a futures API in which you don’t have to heap allocate every async call. But eddyb surprised me, and now I have to revisit the API in the previous post, because we can implement everything we need from immovability with a safe interface afterall.",
      "url": "https://boats.gitlab.io/blog/post/2018-02-07-async-iv-an-even-better-proposal/",
      "date_published": "2018-02-07T00:00:00+00:00",
      "author": {
        "name": "boats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "6e3c698d-7f42-43d4-9c08-2ee084945e5c",
      "title": "A vision for portability in Rust",
      "content_text": "TL;DR: This post proposes to deprecate the std facade, instead having a unified std that uses target- and capability-based cfgs to control API availability. Leave comments on internals!",
      "url": "http://aturon.github.io/2018/02/06/portability-vision/",
      "date_published": "2018-02-06T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c0b3d7ad-673f-4eb9-aa54-45447d1eafb0",
      "title": "Rust Lifetimes for the Uninitialised",
      "content_text": "Lifetimes are a interesting subject: a lot of people seem to gain a day-to-day familiarity with them, without fully understanding what they are. Maybe, they are truly Rust's Monads. Let's talk about what they are, where you encounter them and then how to get competent with them.",
      "url": "http://asquera.de/blog/2018-01-29/rust-lifetimes-for-the-uninitialised/",
      "date_published": "2018-01-29T15:30:00+01:00",
      "author": {
        "name": "Florian Gilcher",
        "url": "http://asquera.de/blog"
      },
      "tags": [
        "Language",
        "Getting Started"
      ]
    },
    {
      "id": "f4e99fe5-2dab-418d-9256-813a75036164",
      "title": "Introduction to Procedural Macros",
      "content_text": "As a newcomer to Rust, I heard the phrase “procedural macro” thrown around a lot without really understanding what it meant. I figured that I would learn about them if I ever needed them. Well, I’m working on the guts of relm, and a large chunk of it is procedural macros. I’ve learned enough about procedural macros to be dangerous, so I thought I would pass on some knowledge.",
      "url": "https://tinkering.xyz/posts/introduction-to-proc-macros/",
      "date_published": "2018-02-03T19:36:37-05:00",
      "author": {
        "name": "Zach Mitchell",
        "url": "https://tinkering.xyz/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "25060712-7d38-4492-991d-a52a9111891c",
      "title": "Async/Await III: Moving Forward with Something Shippable",
      "content_text": "In the first post, we looked at the relationship between generators and a more general notion of self-references. In the second post, we narrowed down exactly what problem we need to solve to make generators work, and talked about some solutions that we’ve considered but don’t feel like we could ship in the near future.\nIn the original post, I promised that I would have a near term solution by the end of this series.",
      "url": "https://boats.gitlab.io/blog/post/2018-01-30-async-iii-moving-forward/",
      "date_published": "2018-02-04T00:00:00+00:00",
      "author": {
        "name": "boats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Language"
      ]
    }
  ]
}