{
  "version": "https://jsonfeed.org/version/1",
  "title": "Read Rust",
  "home_page_url": "https://readrust.net/",
  "feed_url": "https://readrust.net/all/feed.json",
  "description": "Rust related posts from around the internet.",
  "author": {
    "name": "Wesley Moore",
    "url": "http://www.wezm.net/"
  },
  "items": [
    {
      "id": "cfa15026-8758-4249-b23c-fa41e23161c4",
      "title": "Entity-Component-System architecture for UI in Rust",
      "content_text": "For a fun project, I‚Äôve been tinkering with xi-win, an experimental Windows front-end for xi-editor, written in Rust. I‚Äôm basically optimizing for performance, so making a number of somewhat unusual decisions. Among other things, I‚Äôm writing the UI myself, rather than using an existing toolkit or framework.",
      "url": "https://raphlinus.github.io/personal/2018/05/08/ecs-ui.html",
      "date_published": "2018-05-08T18:29:03+00:00",
      "author": {
        "name": "Raph Levien",
        "url": "https://raphlinus.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "66f3233f-afdd-49af-9cf4-cb71bcd56b33",
      "title": "sudo_pair - Plugin for sudo that requires another human to approve and monitor privileged sudo sessions",
      "content_text": "sudo is used by engineers daily to run commands as privileged users. But on some sensitive systems, you really want to ensure that no individual can act entirely autonomously. At Square, this includes applications that manage our internal access-control systems, store accounting ledgers, or even move around real money. This plugin allows us to ensure that no user can act entirely on their own authority within these systems.",
      "url": "https://github.com/square/sudo_pair",
      "date_published": "2018-05-07T18:24:54+00:00",
      "author": {
        "name": "Square",
        "url": "https://github.com/square"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "3e8fce57-40d7-4eec-9425-a2b32ef5895d",
      "title": "My Compound Passphrase List Safety Checker",
      "content_text": "I‚Äôve been thinking about information theory, entropy, and passphrases for a couple of months now. I‚Äôve been particularly interested in using random passphrases as passwords. An example of one of these passphrases would be ‚Äústamina turret backlands ruby‚Äù. The words have to be as purely random as possible ‚Äì using your four dogs‚Äô names is not nearly as strong as a password, as an attacker would likely guess that relatively early.",
      "url": "https://sts10.github.io/2018/05/05/compound-passphrase-list-safety-checker.html",
      "date_published": "2018-05-05T02:13:50+00:00",
      "author": {
        "name": "Sam Schlinkert",
        "url": "https://sts10.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "ef638662-6cfb-4335-9e01-baa7af9a5d95",
      "title": "Filtering Duplicate Log Entries via Rust and Runiq",
      "content_text": "Whilst sort -u is super easy to use, the requirement of sorting your data cannot be overlooked as it means your entire file needs to be buffered into memory at once. This is not always possible, or even if possible it's not always desired. On the other hand uniq is great, but in order to sort your data in advance you still have the same issue. It was due to this that I wrote runiq, which is essentially an optimized and more flexible implementation of both of the aforemention tools for the purposes of duplicate filtering. It performs much faster, with much less memory, and does not require sorted input (although it can optimize this case).",
      "url": "https://whitfin.io/filtering-unique-logs-using-rust/",
      "date_published": "2018-05-07T03:17:28+00:00",
      "author": {
        "name": "Isaac Whitfield",
        "url": "https://whitfin.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "a7a257bb-3da8-42f1-b341-dad7221b9ab3",
      "title": "Rust: Enterprise Services Need Not Suck",
      "content_text": "I practice Barbarian Leadership. Standing on the back lines with hand in pocket giving orders is missing the fun. More importantly, knowledge is created on the cutting edge of action. People you work with know this. They value modern, non-hierarchical organizations where a leader dives into the fray, sword in hand, and gets to know intimately the problems and tools for solving them. So I dove into the fight despite knowing that it is ‚Äúhard language‚Äù.",
      "url": "https://medium.com/@paulhoughton/rust-enterprise-services-need-not-suck-679b79edcab5",
      "date_published": "2018-05-07T12:59:10.610+00:00",
      "author": {
        "name": "Paul Houghton",
        "url": "https://medium.com/@paulhoughton"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "7f406b9a-226a-4498-b708-59b14401a9af",
      "title": "Making microservices in Rust",
      "content_text": "This is a small idea that I have been wanting to put together for quite some time now and finally have managed to get the time and most importantly experience in Rust to finally try something a little more than just small projects. One area that I think Rust is really making a decent headway in in the web domain, which I am assuming is likely due to its origin from Firefox. So I wanted to see if I could put together a really basic CRUD micro-service doing the ever so original TODO functionality.",
      "url": "https://maccoda.github.io/rust-web-frameworks/",
      "date_published": "2018-05-01T00:00:00+00:00",
      "author": {
        "name": "Dylan Maccora",
        "url": "https://maccoda.github.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "7fe0f8aa-fbe1-4fef-bba3-e64b98b00bc2",
      "title": "Procedural Macros in Rust",
      "content_text": "Procedural macros are a really powerful language feature in Rust and something I haven‚Äôt seen in many other languages.\n\nThere are a heap of tutorials out there for procedural macros, including in The Rust Reference, and the first edition of the Rust Book. One of the more entertaining (and useful) posts is by Zach Mitchell where you get to ‚Äúlearn Rust procedural macros with Nic Cage‚Äù.\n\nI won‚Äôt go into depth about what procedural macros are and why they&rsquo;re so powerful.",
      "url": "https://joshleeb.com/posts/rust-procedural-macros/",
      "date_published": "2018-05-04T00:00:00+00:00",
      "author": {
        "name": "Josh Leeb-du Toit",
        "url": "https://joshleeb.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "cb34566e-4c96-4191-9179-eca6bc9ac07f",
      "title": "Embedding Rustup into Cargo and the Wrapper",
      "content_text": "One of my issue when building a project from scratch is the amount of manual steps required to be able to run a simple project. This is not so much a concern when you are a single developer but the larger the team, the most obvious it becomes.",
      "url": "https://medium.com/@tibotz/embedding-rustup-into-cargo-and-the-wrapper-d5b447f381fc",
      "date_published": "2018-05-04T05:53:28.079+00:00",
      "author": {
        "name": "Tibo Delor",
        "url": "https://medium.com/@tibotz"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "266098f6-079e-42d6-8d15-3a7867687f49",
      "title": "Refactoring Apache Arrow to use traits and generics",
      "content_text": "I am currently working on a refactor of the Rust implementation of Apache Arrow to change the way that arrays are represented. This is a relatively large change even though this is a tiny codebase so far and I thought it would be good to write up this blog post to explain why I think this is needed. I think this information will also be interesting for any Rust developer who is struggling with making the right choice between (or using the right combination of) enums, structs, generics and traits. I was inspired to write this up after reading this blog post that was posted to Reddit just a few days ago.",
      "url": "https://andygrove.io/2018/05/apache-arrow-traits-generics/",
      "date_published": "2018-05-04T00:00:00+00:00",
      "author": {
        "name": "Andy Grove",
        "url": "https://andygrove.io/blog"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ca367462-e3ba-4b03-9b46-05b7850bdcba",
      "title": "Encapsulating Lifetime of the Field",
      "content_text": "This is a post about an annoying Rust pattern and an annoyingworkaround, without a good solution :)",
      "url": "https://matklad.github.io/2018/05/04/encapsulating-lifetime-of-the-field.html",
      "date_published": "2018-05-04T17:47:23+00:00",
      "author": {
        "name": "Aleksey Kladov",
        "url": "https://matklad.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "cf489f8e-70b9-4669-8424-03e79fab2ad8",
      "title": "Introducing seiri ‚Äî a music üé∂ manager for lots of music",
      "content_text": "TL;DR seiri is a lightweight music manager written (mostly) in Rust that helps keep huge music libraries organized. Try it today at chyyran.moe/seiri.",
      "url": "https://medium.com/@chyyran/introducing-seiri-a-music-manager-for-lots-of-music-990b464b3387",
      "date_published": "2018-05-03T23:35:26.009+00:00",
      "author": {
        "name": "Ronny Chan",
        "url": "https://medium.com/@chyyran"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "97c03488-1331-4858-baf0-26e1d0fca6f0",
      "title": "Embedded Rust: Peripherals (and low-level stuffs) - take 1",
      "content_text": "First of all, low level stuffs such as peripheral drivers should be hidden from the application developer. They should not be able to access directly the registers and mess with the peripheral states/control. The wrong flag in the wrong register can lead to dramatic failures and even damages to the products.",
      "url": "https://ithinuel.me/embedded-rust-peripherals-take-1/",
      "date_published": "2018-04-28T00:00:00+00:00",
      "author": {
        "name": "Wilfried Chauveau",
        "url": "https://ithinuel.me/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "47521515-a430-41a1-bcdc-bb68b3f9d646",
      "title": "Cross compiling rust with docker",
      "content_text": "I am giving embedded systems another go with a side project of mine. The device has a single purpose. It captures network packets, and forwards them to a server. It is easily achieved with LIBpcap, but the device makes it interesting.\n\nThe GL-AR150 sells as a mini smart router. The limited storage makes it hard to install language interpreters, or virtual machines. This pushed me to look into standalone executables, and how to compile them for other devices.",
      "url": "https://medium.com/@pvinchon/cross-compiling-rust-with-docker-17d846adae4d",
      "date_published": "2018-04-30T23:01:01.249+00:00",
      "author": {
        "name": "Philippe",
        "url": "https://medium.com/@pvinchon"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "0a6c62ed-f16b-4b57-8ff1-3984e08f204e",
      "title": "How fast can we compile Rust hello world?",
      "content_text": "Seeing Nick Nethercote‚Äôs blog post about speeding up the compiler, I started wondering just how fast could a Rust compiler be? How fast could we compile a simple example? How fast can we compile a Rust hello world?",
      "url": "http://www.jonathanturner.org/2018/05/how-fast-can-we-compile-rust-hello-world.html",
      "date_published": "2018-05-03T00:00:00+00:00",
      "author": {
        "name": "Jonathan Turner",
        "url": "http://www.jonathanturner.org/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "2cf6bb87-842b-4d53-906d-6036d7e3eaf5",
      "title": "Can Rust speed up your Azure Functions?",
      "content_text": "Using Rust on Microsoft Azure Functions with web assembly",
      "url": "https://blog.x5ff.xyz/blog/azure-functions-wasm-rust/",
      "date_published": "2018-04-30T00:00:00+00:00",
      "author": {
        "name": "Claus",
        "url": "https://blog.x5ff.xyz/blog"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "df6d6cbf-58fc-49e6-a582-446c255a3d39",
      "title": "gtk-test - A crate for testing GTK UIs",
      "content_text": "Currently, testing UIs is difficult, but with gtk-test you can test basically everything UI-related way more simply.",
      "url": "http://gtk-rs.org/blog/2018/05/02/who-talked-about-testing.html",
      "date_published": "2018-05-02T00:00:00+00:00",
      "author": {
        "name": "Gtk-rs",
        "url": "http://gtk-rs.org/blog"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "91fb984c-4084-4b2c-84e5-ebda94169657",
      "title": "WASM+Rust Tutorial",
      "content_text": "A project used for a meetup talk about getting started with rust & wasm",
      "url": "https://freemasen.github.io/wasm_tutorial/",
      "date_published": "2018-05-03T07:30:00+10:00",
      "author": {
        "name": "Robert Masen",
        "url": "https://github.com/FreeMasen"
      },
      "tags": [
        "Getting Started",
        "Web and Network Services"
      ]
    },
    {
      "id": "103f9c4f-f4f9-4e15-98b2-0d2b1db6b792",
      "title": "kanban-app - Kanban board built with Rust and Elm without Electron",
      "content_text": "This is a web-based Kanban board application, built with Elm and Rust. The only different from this application and hundred thousands of web-based application out there is: We don't need Electron!. Instead, it use native WebView (WebKit for Linux/macOS, and MSHTML on Windows),",
      "url": "https://github.com/huytd/kanban-app",
      "date_published": "2018-05-03T07:30:00+10:00",
      "author": {
        "name": "Huy Tr.",
        "url": "https://github.com/huytd"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "83c972be-a658-4858-9277-474eebee81a1",
      "title": "Introducing Sentry for Rust",
      "content_text": "As happy Rust users ourselves, it makes us even happier to be able to say that we now have a Sentry Rust SDK. This means you and your Fungiculture can now report panics, failures, and other types of incidents to Sentry.\n\nNot only is the SDK new and fancy, it is also one of the first ones that follows our new API guidelines for Sentry SDKs, which makes it even newer and fancier than you might normally expect.",
      "url": "https://blog.sentry.io/2018/05/01/sentry-for-rust",
      "date_published": "2018-05-01T00:00:00+00:00",
      "author": {
        "name": "Armin Ronacher",
        "url": "https://blog.sentry.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "d9100be3-bb0c-4ea5-9aff-3fa3b7946b12",
      "title": "Rust in production at Figma",
      "content_text": "How Mozilla‚Äôs new language dramatically improved our server-side performance.",
      "url": "https://blog.figma.com/rust-in-production-at-figma-e10a0ec31929",
      "date_published": "2018-05-02T15:14:00.276+00:00",
      "author": {
        "name": "Evan Wallace",
        "url": "https://blog.figma.com/@evanwallace"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "bcdee764-328b-440f-b1de-d4f4d4c14604",
      "title": "New Tokio release, now with filesystem support",
      "content_text": "It took a bit longer than I had initially hoped (as it always does), but a new Tokio version has been released. This release includes, among other features, a new set of APIs that allow performing filesystem operations from an asynchronous context.",
      "url": "https://tokio.rs/blog/2018-05-tokio-fs/",
      "date_published": "2018-05-02T00:00:00+00:00",
      "author": {
        "name": "Carl Lerche",
        "url": "https://tokio.rs/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "fce158e9-2134-4c57-bbc8-67483dc0b0d8",
      "title": "rustref - memorable Rust reference links",
      "content_text": "This contains shorthand URLs for navigating to Rust documentation.",
      "url": "https://rustref.com/",
      "date_published": "2018-04-27T20:12:36+00:00",
      "author": {
        "name": "Mackenzie Hauck",
        "url": "https://github.com/nocduro"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4539d16d-f909-4fff-9eda-dc6763fa7a3b",
      "title": "Mutagen ‚Äì More opportunities",
      "content_text": "Recently I gave a talk at our Rust Meetup about mutagen, and I also showed how our opportunistic mutations work (I however left out that gnarly thing about shifts, but in my defense I was short on time). That got me thinking whether we always do the right thing elsewhere.",
      "url": "https://llogiq.github.io/2018/05/01/moreop.html",
      "date_published": "2018-05-01T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "b7e3c6ef-7be3-4f63-b8ad-04affb29716c",
      "title": "Ray Tracing in a Weekend in Rust",
      "content_text": "I was inspired to work through Peter Shirley‚Äôs Ray Tracing in a Weekend mini book (for brevity RTIAW) but I wanted to write it in Rust instead of the C++ that‚Äôs used in the book. I found out about the book via @aras_p‚Äôs blog series about a toy path tracer he‚Äôs been building.",
      "url": "https://bitshifter.github.io/blog/2018/04/29/rust-ray-tracer-in-one-weekend/",
      "date_published": "2018-04-29T00:00:00+00:00",
      "author": {
        "name": "bitshifter",
        "url": "https://bitshifter.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "0c0d7114-9e80-4e4f-868d-51de6778bed1",
      "title": "KRust: A Formal Executable Semantics of Rust",
      "content_text": "Rust is a new and promising high-level system programming language. It provides both memory safety and thread safety through its novel mechanisms such as ownership, moves and borrows. Ownership system ensures that at any point there is only one owner of any given resource. The ownership of a resource can be moved or borrowed according to the lifetimes. The ownership system establishes a clear lifetime for each value and hence does not necessarily need garbage collection. These novel features bring Rust high performance, fine low-level control of C and C++, and unnecessity in garbage collection, which differ Rust from other existing prevalent languages. For formal analysis of Rust programs and helping programmers learn its new mechanisms and features, a formal semantics of Rust is desired and useful as a fundament for developing related tools. In this paper, we present a formal executable operational semantics of a realistic subset of Rust, called KRust. The semantics is defined in K, a rewriting-based executable semantic framework for programming languages. The executable semantics yields automatically a formal interpreter and verification tools for Rust programs. KRust has been thoroughly validated by testing with hundreds of tests, including the official Rust test suite.",
      "url": "https://arxiv.org/abs/1804.10806",
      "date_published": "2018-04-28T00:00:00+00:00",
      "author": {
        "name": "Feng Wang, Fu Song, Min Zhang, Xiaoran Zhu, Jun Zhang",
        "url": "https://arxiv.org/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "7812ff10-6f3d-4990-8832-9b5eb63780d8",
      "title": "Servo engines written in Rust deliver memory safety and multithreading",
      "content_text": "In 2012, Mozilla started the Servo project, a community effort to create new open source browser components that can take advantage of multicore hardware to improve speed, stability and responsiveness. Servo is comparable to WebKit, an open source browser engine that is the foundation of Apple‚Äôs Safari browser. (Other browser engines include Blink, EdgeHTML, and Gecko.) The difference is that Servo is written in the Rust programming language, bringing lightning-fast performance and memory safety to browser internals. Rust code can drastically cut down the number of critical bugs that affect browser engines. Servo uses a modular architecture and currently runs on Linux, macOS, Windows, and Android operating systems.",
      "url": "https://research.mozilla.org/servo-engines/",
      "date_published": "2018-05-01T16:04:53+00:00",
      "author": {
        "name": "Mozilla Research",
        "url": "https://research.mozilla.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "c38eff1e-2560-4373-a3d6-9e3ea04853ad",
      "title": "bat - print code to the terminal with syntax highlighting and git integration",
      "content_text": "bat supports syntax highlighting for a large number of programming and markup languages. bat also communicates with git to show modifications with respect to the index (see left side bar).",
      "url": "https://github.com/sharkdp/bat",
      "date_published": "2018-05-01T00:00:00+00:00",
      "author": {
        "name": "David Peter",
        "url": "https://github.com/sharkdp"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "e5b4d06d-c604-42fa-9329-e4bec9f44cfd",
      "title": "Dataframes: Traits, Enums, Generics, and Dynamic Typing",
      "content_text": "I‚Äôm attempting to build a dataframe in Rust. I implemented a pattern using traits, generics, and enums in conjunction to deal with columns of different datatypes while allowing runtime reflection for accessing the data stored in a column.",
      "url": "https://blog.hwc.io/posts/dataframe1/",
      "date_published": "2018-03-28T09:57:53-04:00",
      "author": {
        "name": "hwc",
        "url": "https://blog.hwc.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "803b6bf7-0cde-4a49-9e63-a117e95de2c0",
      "title": "Adventures in Rust",
      "content_text": "A tale of my time in Rust-land",
      "url": "https://dev.to/tmr232/adventures-in-rust-56fc",
      "date_published": "2018-04-27T00:00:00+00:00",
      "author": {
        "name": "Tamir Bahar",
        "url": "https://dev.to/tmr232"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "18f0f723-af8c-4415-9ea4-6578a641729a",
      "title": "Writing an OS in Rust: Unit Testing",
      "content_text": "This post explores unit testing in no_std executables using Rust's built-in test framework. We will adjust our code so that cargo test works and add some basic unit tests to our VGA buffer module.",
      "url": "https://os.phil-opp.com/unit-testing/",
      "date_published": "2018-04-29T00:00:00+00:00",
      "author": {
        "name": "Philipp Oppermann",
        "url": "https://os.phil-opp.com/second-edition/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "73443ff7-2113-490d-9249-430c95c1534a",
      "title": "Flipping some bits high on STM32VLDISCOVERY board",
      "content_text": "Here I will document the steps to get started with STM32VLDISCOVERY board. We will take my favourite ‚Äúfrom scratch‚Äù approach. That way, we build the final thing step by step while building our understanding of how it all fits together.",
      "url": "http://nercury.github.io/rust/embedded/experiments/2018/04/29/rust-embedded-01-discovery-vl-flipping-bits.html",
      "date_published": "2018-04-29T00:00:00+00:00",
      "author": {
        "name": "Nerijus Arlauskas",
        "url": "http://nercury.github.io/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "64356c91-6a6c-40d2-acd9-cbde11eaace4",
      "title": "Using LLVM from Rust, to generate WebAssembly",
      "content_text": "Hopefully this post helps jumpstart those who want to use LLVM from Rust. I also include how one could use this to generate WebAssembly, but the first part of this post is target platform agnostic.",
      "url": "https://medium.com/@jayphelps/using-llvm-from-rust-to-generate-webassembly-93e8c193fdb4",
      "date_published": "2018-04-29T00:49:36.802+00:00",
      "author": {
        "name": "Jay Phelps",
        "url": "https://medium.com/@jayphelps"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "1d371a92-135a-4456-aca8-5537c9d53c81",
      "title": "Installing Rust Offline",
      "content_text": "I wanted to use Rust on an offline Linux system, but it seemed like there isn‚Äôt a nice guide to install Rust and some popular packages all in one go (like Anaconda, though what I describe here is much more ghetto), so I decided to summarize the procedure to install the Rust toolchain and some popular libraries all in one go on a system with no internet access.",
      "url": "https://hatsunearu.github.io/2018/04/29/rust-offline/",
      "date_published": "2018-04-29T14:00:00+00:00",
      "author": {
        "name": "hatsunearu",
        "url": "https://hatsunearu.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "b4ecd378-f152-4049-b281-8b519cdb870d",
      "title": "c3r3s - Serial 64-bit bootloader for the Raspberry Pi 3",
      "content_text": "c3r3s is a tiny (1KB binary) serial bootloader for loading \"bare metal\" 64-bit kernels on the Raspberry Pi 3. You can iterate on your own kernel code without constantly moving the SD card back and forth.",
      "url": "https://github.com/robey/c3r3s",
      "date_published": "2018-05-01T07:22:00+10:00",
      "author": {
        "name": "Robey Pointer",
        "url": "https://github.com/robey"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "1c59d8b2-c755-4f10-859e-4847be81bc4c",
      "title": "How to speed up the Rust compiler in 2018",
      "content_text": "18 months ago I wrote about some work I did to speed up the Rust compiler (rustc). I‚Äôve recently taken this work up again. Also, in the meantime rustc‚Äôs build system has been replaced and its benchmark suite has been overhauled. So it‚Äôs a good time for an update.",
      "url": "https://blog.mozilla.org/nnethercote/2018/04/30/how-to-speed-up-the-rust-compiler-in-2018/",
      "date_published": "2018-04-30T04:13:45+00:00",
      "author": {
        "name": "Nicholas Nethercote",
        "url": "https://blog.mozilla.org/nnethercote/"
      },
      "tags": [
        "Language",
        "Performance"
      ]
    },
    {
      "id": "caa2a44c-fd86-4221-92ba-226a3834e0a4",
      "title": "JARVIS - Notes on Rust Crates From Writing an RSS Reader",
      "content_text": "Way back in the dim mists of history (back in university) I wrote myself a custom RSS reader in Java and called it JARVIS1. You see, I read a lot of webcomics. Like, a lot. Some webcomics provide RSS feeds, but some don‚Äôt, and as my collection grew it started to become a hassle to use Firefox‚Äôs live bookmarks to manage it all. Ultimately, I wrote up a quick Swing GUI to use as a single interface for keeping up with blogs and tracking which comics had published updates since the last time I‚Äôd checked2.",
      "url": "https://bheisler.github.io/post/jarvis-impressions-of-rust-libraries/",
      "date_published": "2018-04-22T16:00:00-06:00",
      "author": {
        "name": "Brook Heisler",
        "url": "https://bheisler.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "5e0ef28e-278a-48f1-92d1-256a37f76e47",
      "title": "Borrowing in async code",
      "content_text": "The networking working group is pushing hard on async/await notation for Rust, and @withoutboats in particular wrote a fantastic blog series working through the design space. I wanted to talk a little bit about some of the implications of async/await, which may not have been entirely clear. In particular, async/await is not just about avoiding combinators; it completely changes the game for borrowing.",
      "url": "http://aturon.github.io/2018/04/24/async-borrowing/",
      "date_published": "2018-04-24T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "282a816f-1c0b-4efc-9939-0674020ee1ef",
      "title": "An alias-based formulation of the borrow checker",
      "content_text": "Ever since the Rust All Hands, I‚Äôve been experimenting with an alternative formulation of the Rust borrow checker. The goal is to find a formulation that overcomes some shortcomings of the current proposal while hopefully also being faster to compute. I have implemented a prototype for this analysis. It passes the full NLL test suite and also handles a few cases ‚Äì such as #47680 ‚Äì that the current NLL analysis cannot handle. However, the performance has a long way to go (it is currently slower than existing analysis). That said, I haven‚Äôt even begun to optimize yet, and I know I am doing some naive and inefficient things that can definitely be done better; so I am still optimistic we‚Äôll be able to make big strides there.",
      "url": "http://smallcultfollowing.com/babysteps/blog/2018/04/27/an-alias-based-formulation-of-the-borrow-checker/",
      "date_published": "2018-04-27T00:00:00-04:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "67b88f7c-7b39-43ad-863a-0d03dd180faf",
      "title": "Reflections on Rust, and the Sand Castle Metaphor",
      "content_text": "A month ago, I wrote about how I was frustrated with my progress in Rust. These days, I‚Äôm still no expert, but I‚Äôve made progress.",
      "url": "https://brandur.org/fragments/rust-reflections",
      "date_published": "2018-04-27T00:00:00+00:00",
      "author": {
        "name": "Brandur Leach",
        "url": "https://brandur.org"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "49014ace-e742-49f8-887a-8fa7d1b627cc",
      "title": "Rust Case Study: Chucklefish Taps Rust to Bring Safe Concurrency to Video Games [pdf]",
      "content_text": "Chucklefish, an independent game studio based in London, publishes hit video games like Stardew Valley and Starbound. Now, the company is developing its next game, code-named Witchbrook, using the Rust programming language instead of C++. Why the switch? Two main reasons: to get better performance on multiprocessor hardware and to have fewer crashes during game play.",
      "url": "https://www.rust-lang.org/pdfs/Rust-Chucklefish-Whitepaper.pdf",
      "date_published": "2018-04-23T17:38:56+00:00",
      "author": {
        "name": "The Rust Project Developers",
        "url": "https://www.rust-lang.org/en-US/whitepapers.html"
      },
      "tags": [
        "Language",
        "Games and Graphics"
      ]
    },
    {
      "id": "8576f0a6-2866-4ac7-af07-dffd8e4ea019",
      "title": "Rust+GNOME Hackfest #3",
      "content_text": "Last week, I was working on improving the integration of Rust with GNOME libraries at the third Hackfest, which happened this time in Madrid.",
      "url": "http://antoyo.ml/rust-gnome-hackfest-madrid",
      "date_published": "2018-04-24T00:00:00+00:00",
      "author": {
        "name": "Antoni Boucher",
        "url": "http://antoyo.ml/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "76fb9740-07d0-45c8-a6b3-17534f293c54",
      "title": "Ask an expert: How do you maintain Rust?",
      "content_text": "From team structure and annual surveys to RFCs and the release process, a staff research engineer on Mozilla‚Äôs Rust team shares what it takes.",
      "url": "https://increment.com/programming-languages/maintaining-rust/",
      "date_published": "2018-04-26T19:00:00+00:00",
      "author": {
        "name": "Jonathan Turner",
        "url": "https://increment.com/programming-languages/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "79a75489-f371-461e-8943-273f7b60e620",
      "title": "Hammond: A Podcast Client for the GNOME Desktop",
      "content_text": "Hammond has been in development since Sep 2017. It makes use of the Rust bindings to GNOME libraries as well as diesel, serde, reqwest, and a number other crates to build a beautiful, native application that feels right at home on the GNOME desktop.",
      "url": "https://gitlab.gnome.org/World/hammond",
      "date_published": "2018-04-27T21:12:00+10:00",
      "author": {
        "name": "Jordan Petridis",
        "url": "https://gitlab.gnome.org/alatiera"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "2925c583-7c70-400d-8f50-f8c06b3dc0fb",
      "title": "How does dynamic dispatch work in WebAssembly?",
      "content_text": "C, C++, and Rust all have some capability for dynamic dispatch: function pointers, virtual methods, and trait objects. On native targets like x86, all these forms compile down into a jump to a dynamic address. What do these forms compile down into when targeting WebAssembly?",
      "url": "http://fitzgeraldnick.com/2018/04/26/how-does-dynamic-dispatch-work-in-wasm.html",
      "date_published": "2018-04-26T00:00:00-07:00",
      "author": {
        "name": "Nick Fitzgerald",
        "url": "http://fitzgeraldnick.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "096f02f7-0ce4-41ef-8896-f8209ca126f5",
      "title": "GLib/GIO async operations and Rust futures + async/await",
      "content_text": "Unfortunately I was not able to attend the Rust+GNOME hackfest in Madrid last week, but I could at least spend some of my work time at Centricular on implementing one of the things I wanted to work on during the hackfest. The other one, more closely related to the gnome-class work, will be the topic &#8230; <a href=\"https://coaxion.net/blog/2018/04/glib-gio-async-operations-and-rust-futures-async-await/\" class=\"more-link\">Continue reading <span class=\"screen-reader-text\">GLib/GIO async operations and Rust futures + async/await</span></a>",
      "url": "https://coaxion.net/blog/2018/04/glib-gio-async-operations-and-rust-futures-async-await/",
      "date_published": "2018-04-23T08:46:32+00:00",
      "author": {
        "name": "With the latest GIT version of the Rust bindings for GLib, GTK, etc it is now possible to make use of the Rust futures infrastructure for GIO async operations and various other functions. This should make writing of GNOME, and in general GLib-using, applications in Rust quite a bit more convenient.",
        "url": "https://coaxion.net/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4eb3e72f-dec7-445e-9cbe-5464f3df1ceb",
      "title": "Rust memory safety revolution",
      "content_text": "This introduction is written for people, who are programmers, but don‚Äôt know Rust or are at the very beginning of learning it. It‚Äôs easier to understand for readers who know C, C++ or other language with manually managed memory as well as some with garbage collector. It‚Äôs a high-level introduction intended to present core Rust concepts and encourage further learning. It‚Äôs not a tutorial, there is no Hello Rust in the end.",
      "url": "https://anixe.pl/content/news/rust_memory_safety_revolution",
      "date_published": "2018-04-03T00:00:00+00:00",
      "author": {
        "name": "Igor ≈ªuk",
        "url": "https://anixe.pl/news"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "9cb9976f-4023-496c-9bdf-b5eff31fe5bb",
      "title": "Flipper - A new embedded development paradigm",
      "content_text": "Flipper is a new kind of development board that redefines the embedded software development cycle by offloading development/debugging into higher level languages + tools. One of the languages that we're putting the most focus into adding support for is Rust. We would love to see more embedded done with Rust and Flipper provides a great springboard for existing Rust developers to familiarize themselves with embedded hardware using the tools they already know how to use.",
      "url": "https://www.reddit.com/r/rust/comments/8d8vqn/flipper_a_new_embedded_development_paradigm/",
      "date_published": "2018-04-18T20:28:34+00:00",
      "author": {
        "name": "George Morgan",
        "url": "https://www.reddit.com/user/george-morgan"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "017d9ce1-f259-4d95-bffc-b3d44dfc8cde",
      "title": "Dev-tools in 2018",
      "content_text": "This is a bit late (how is it the middle of April already?!), but the dev-tools team has lots of exciting plans for 2018 and I want to talk about them! Our goals for 2018 Here's a summary of our goals for the year. Ship it! We want to ship",
      "url": "https://www.ncameron.org/blog/dev-tools-in-2018/",
      "date_published": "2018-04-19T19:31:53+00:00",
      "author": {
        "name": "Nick Cameron",
        "url": "http://www.ncameron.org/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "36e40f73-b836-49cd-a558-d93a238c7386",
      "title": "fastmod - A fast partial replacement for the codemod tool",
      "content_text": "fastmod is a fast partial replacement for codemod. Like codemod, it is a tool to assist you with large-scale codebase refactors, and it supports most of codemod's options. fastmod's major philosophical difference from codemod is that it is focused on improving the use case \"I want to use interactive mode to make sure my regex is correct, and then I want to apply the regex everywhere\". For this use case, it offers much better performance than codemod",
      "url": "https://github.com/facebookincubator/fastmod",
      "date_published": "2018-04-19T20:30:07+00:00",
      "author": {
        "name": "Facebook Incubator",
        "url": "https://github.com/facebookincubator"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "3a1ac912-0af7-47cb-b540-1cb3efc46956",
      "title": "Madrid GNOME+Rust Hackfest, part 2",
      "content_text": "Hacking on gnome-class continues apace! Philippe updated our dependencies. Alberto made the syntax for per-instance private structsmore ergonomic, and then made that code nice and compact. Martin improved our conversion from CamelCase to snake_case for code generation. Daniel added initial support for GObject properties. This is not finished...; ",
      "url": "https://people.gnome.org/~federico/blog/madrid-gnome-rust-2.html",
      "date_published": "2018-04-20T08:59:23+02:00",
      "author": {
        "name": "Federico Mena Quintero",
        "url": "https://people.gnome.org/~federico/blog/index.html"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "6e75a3dc-d157-4f13-878c-5111cd6b03a2",
      "title": "Small WebAssembly Binaries with Rust + Emscripten",
      "content_text": "The Rust language is one of the earliest adopters of WebAssembly, and it has more than one way to compile to it:",
      "url": "https://kripken.github.io/blog/binaryen/2018/04/18/rust-emscripten.html",
      "date_published": "2018-04-18T17:52:56+00:00",
      "author": {
        "name": "Alon Zakai",
        "url": "https://kripken.github.io/blog/"
      },
      "tags": [
        "Web and Network Services "
      ]
    },
    {
      "id": "4096f192-ba2d-4a25-b1be-f3e4b0b40b51",
      "title": "BYO Standard: An Explorer's Guide to Complier Plugins",
      "content_text": "The Rust programming language provides powerful guarantees around memory and thread safety. It also exposes all the knobs required for implementing custom rules, enabling a project to make additional guarantees and enforce opinions on best practice. Embedded standards are very opinionated about software practices‚Äîlike using floating point values as loop counters or the number of possible exit points of a function‚Äîand Rust‚Äôs defaults don‚Äôt prevent every runtime panic (for example, recursion that goes too deep and overflows the stack).\n\nFor PolySync, a runtime panic means the potential for an unsafe situation on the road, and with that in mind, we‚Äôve explored ways to restrict that potential. Of course, we aren‚Äôt the only ones thinking about ways to improve the quality of code at compile time by enforcing the right rules for the job. Active projects like rust-clippy are working to do that too by providing lints to supplement the rustc defaults.\n\nIn this post we‚Äôll explore how to enforce a rule by prohibiting a practice we‚Äôve formed an opinion about, the indexing of a vector or an array.",
      "url": "https://polysync.io/explorers-guide-to-compiler-plugins",
      "date_published": "2018-04-21T00:00:00+00:00",
      "author": {
        "name": "Shea Newton",
        "url": "https://polysync.io/blog"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ba2b10d2-16a7-4036-8e8f-1fe0d113b0ac",
      "title": "Why Rust's error handling is awesome",
      "content_text": "This post is about the process of transforming something you would write as a one-off script in Python (or any other scripting language) into a library including error handling.",
      "url": "http://rantsideasstuff.com/posts/2018/04/20-rust-error-handling-awesome/",
      "date_published": "2018-04-20T10:00:00+02:00",
      "author": {
        "name": "Zoran Zaric",
        "url": "http://rantsideasstuff.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d0b170a0-b0c5-4d33-b3f2-e0e0dcac1872",
      "title": "Pijul 0.10",
      "content_text": "I‚Äôm pleased to announce the new release of Pijul, version 0.10. Pijul is an easy to use, distributed and fast version control system. This release has been a long time coming, but brings in an important number of new features and stability enhancements.",
      "url": "https://pijul.org/posts/2018-04-21-pijul-0.10/",
      "date_published": "2018-04-21T15:13:57+02:00",
      "author": {
        "name": "Pijul",
        "url": "https://pijul.org/posts"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "86f4fa21-5194-4439-a131-85c3a587a1fd",
      "title": "Rust+GNOME Hackfest in Madrid",
      "content_text": "Last week was the third edition of the Rust+GNOME hackfest. What about talking a bit about what we achieved? The goals of this edition were: Improve gnome-class, improve gtk-rs continuous integration process, improve gtk-rs crates bindings. I'm happy to say that we were able to achieve all of these goals!",
      "url": "https://blog.guillaume-gomez.fr/articles/2018-04-21+Rust%2BGNOME+Hackfest+in+Madrid",
      "date_published": "2018-04-21T00:00:00+00:00",
      "author": {
        "name": "Guillaume Gomez",
        "url": "https://blog.guillaume-gomez.fr/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "53831192-f7e2-4841-898f-f39f1cd9f1ff",
      "title": "Madrid GNOME+Rust Hackfest, part 1",
      "content_text": "I'm in Madrid since Monday, at the third GNOME+Rust hackfest! The OpenShine folks are kindly letting us use their offices, on the seventh floor of a building by the Cuatro Caminos roundabout.\n\nI am very, very thankful that this time everyone seems to be working on developing gnome-class. It's a difficult project for me, and more brainpower is definitely welcome ‚Äî all the indirection, type conversion, GObject obscurity, and procedural macro shenanigans definitely take a toll on oneself.",
      "url": "https://people.gnome.org/~federico/blog/madrid-gnome-rust-1.html",
      "date_published": "2018-04-18T02:55:12-05:00",
      "author": {
        "name": "Federico Mena Quintero",
        "url": "https://people.gnome.org/~federico/blog/index.html"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "43c290f5-4178-431d-9874-5e24cde01299",
      "title": "Hello wasm-pack!",
      "content_text": "wasm-pack is a tool for assembling and packaging Rust crates that target WebAssembly. These packages can be published to the npm Registry and used alongside other packages. This means you can use them side-by-side with JS and other packages, and in many kind of applications, be it a Node.js server side app, a client-side application bundled by Webpack, or any other sort of application that uses npm dependencies. You can find wasm-pack on crates.io and GitHub.",
      "url": "https://hacks.mozilla.org/2018/04/hello-wasm-pack/",
      "date_published": "2018-04-18T14:54:13+00:00",
      "author": {
        "name": "Ashley Williams",
        "url": "https://hacks.mozilla.org/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "18ca5e39-fd8f-4739-95ef-9daaef6d525d",
      "title": "Announcing cargo src (beta)",
      "content_text": "cargo src is a new tool for exploring your Rust code. It is a cargo plugin which runs locally and lets you navigate your project in a web browser. It has syntax highlighting, jump to definition, type on hover, semantic search, find uses, find impls, and more.",
      "url": "https://ncameron.org/blog/announcing-cargo-src-beta/",
      "date_published": "2018-04-18T20:52:39+00:00",
      "author": {
        "name": "Nick Cameron",
        "url": "http://www.ncameron.org/blog/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "89612f07-abeb-400f-8bf1-0826601e17d1",
      "title": "Rust pattern: Rooting an Rc handle",
      "content_text": "I‚Äôve decided to do a little series of posts about Rust compiler errors. Each one will talk about a particular error that I got recently and try to explain (a) why I am getting it and (b) how I fixed it. The purpose of this series of posts is partly to explain Rust, but partly just to gain data for myself. I may also write posts about errors I‚Äôm not getting ‚Äì basically places where I anticipated an error, and used a pattern to avoid it. I hope that after writing enough of these posts, I or others will be able to synthesize some of these facts to make intermediate Rust material, or perhaps to improve the language itself.",
      "url": "http://smallcultfollowing.com/babysteps/blog/2018/04/16/rust-pattern-rooting-an-rc-handle/",
      "date_published": "2018-04-16T00:00:00-04:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "f6e1bdda-278a-4077-8d2f-49417303637f",
      "title": "dust - A more intuitive version of du in Rust",
      "content_text": "Dust is meant to give you an instant overview of which directories are using disk space without requiring sort or head. Dust will print a maximum of 1 'Did not have permissions message'. Dust will list the 15 biggest sub directories or files and will smartly recurse down the tree to find the larger ones. There is no need for a '-d' flag or a '-h' flag. The largest sub directory will have its size shown in red",
      "url": "https://github.com/bootandy/dust",
      "date_published": "2018-04-18T07:26:00+10:00",
      "author": {
        "name": "andy boot",
        "url": "https://github.com/bootandy"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "447b930e-7350-4ef3-80d4-2ec23a4c5708",
      "title": "Implementing multiprocessing.pool.ThreadPool from Python in Rust",
      "content_text": "In this post, we will implement multiprocessing.pool.ThreadPool from Python in Rust. It represents a thread-oriented version of multiprocessing.Pool, which offers a convenient means of parallelizing the execution of a function across multiple input values by distributing the input data across processes. We will use an existing thread-pool implementation and focus on adjusting its interface to match that of multiprocessing.pool.ThreadPool.",
      "url": "https://blog.petrzemek.net/2018/04/16/implementing-multiprocessing-pool-threadpool-from-python-in-rust/",
      "date_published": "2018-04-16T15:14:15+00:00",
      "author": {
        "name": "Petr Zemek",
        "url": "https://blog.petrzemek.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c3057e94-6b2a-4f19-b109-d6f7b17aefbe",
      "title": "A Useful Feature Few Rust Programmers Know About",
      "content_text": "Surprisingly few know about the built-in pretty-printer. In the book, there is only a short passage that mentions {:#?} in passing. It aligns structs and enums based on nested positions and is automatically derived with Debug.",
      "url": "http://rickyhan.com/jekyll/update/2018/04/16/the-best-kept-secret-rust-feature.html",
      "date_published": "2018-04-16T04:00:00+00:00",
      "author": {
        "name": "Ricky Han",
        "url": "http://rickyhan.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ef8bca4e-5627-4bde-a21f-9dae321ac7c0",
      "title": "angle-grinder - Slice and dice log files on the command line",
      "content_text": "Angle-grinder allows you to parse, aggregate, sum, average, percentile, and sort your data. You can see it, live-updating, in your terminal. Angle grinder is designed for when, for whatever reason, you don't have your data in graphite/honeycomb/kibana/sumologic/splunk/etc. but still want to be able to do sophisticated analytics.\n\nAngle grinder can process about a million rows per second, so it's usable for fairly meaty aggregation. The results will live update in your terminal as data is processed. Angle grinder is a bare bones functional programming language coupled with a pretty terminal UI.",
      "url": "https://github.com/rcoh/angle-grinder",
      "date_published": "2018-04-18T07:26:00+10:00",
      "author": {
        "name": "Russell Cohen",
        "url": "https://github.com/rcoh"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "69dd67c0-ef9b-4a6c-9a60-2de96c36113a",
      "title": "How To Optimize JavaScript Code with Rust Part 1",
      "content_text": "In the first part of this Rust series, we‚Äôre going to walk through setting up Rust, writing Rust code, exporting the code, and using the code in our Node environment. By the end of this article, you‚Äôll see how painless marrying Rust with JavaScript is.",
      "url": "https://codeburst.io/how-to-optimize-javascript-code-with-rust-part-1-20f00885608f",
      "date_published": "2018-04-16T12:04:37.323+00:00",
      "author": {
        "name": "Raji Ayinla",
        "url": "https://codeburst.io/@rajiayinla858"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "f4d6ff64-87eb-466f-94a6-fbbaa28fab7d",
      "title": "From Chaos to Order -- Tools and Techniques for Testing TiDB, A Distributed NewSQL Database",
      "content_text": "As an open source distributed NewSQL Hybrid Transactional/Analytical Processing (HTAP) database, TiDB contains the most important asset of our customers--their data. One of the fundamental and foremost requirements of our system is to be fault-tolerant. But how do you ensure fault tolerance in a distributed database? This article covers the top fault injection tools and techniques in Chaos Engineering, as well as how to execute Chaos practices in TiDB.",
      "url": "https://pingcap.com/blog/chaos-practice-in-tidb/",
      "date_published": "2018-04-14T00:00:00+00:00",
      "author": {
        "name": "Siddon Tang",
        "url": "https://pingcap.com/blog"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a38c18ee-88ab-46dd-994c-2c4e4d288d4c",
      "title": "Instance Identity in C++ and Rust",
      "content_text": "A document describing how (in my opinion) C++‚Äôs and Rust‚Äôs definitions of object instance differ.",
      "url": "https://jrvanwhy.github.io/instance-identity/",
      "date_published": "2018-04-10T21:04:09+00:00",
      "author": {
        "name": "Johnathan Van Why",
        "url": "https://jrvanwhy.github.io/instance-identity/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a4be83a4-b126-479a-bfca-81e7d612d2b3",
      "title": "Redox Summer of Code",
      "content_text": "Redox OS is running its own Summer of Code this year, after the Microkernel devroom did not get accepted into GSoC 2018. We are looking for both Students and Sponsors who want to help Redox OS grow. At the moment, Redox OS has $10,800 in donations from various platforms to use to fund students. This will give us three students working for three months, if each student requests $1200 per month on average as described in Payment.\n\nIn order to fund more students, we are looking for sponsors who are willing to fund RSoC. Donations can be made on the Donate page. All donations will be used to fund Redox OS activities, with about 90% of those over the past year currently allocated to RSoC.",
      "url": "https://www.redox-os.org/rsoc/",
      "date_published": "2018-04-14T21:10:05+00:00",
      "author": {
        "name": "Jeremy Soller",
        "url": "https://www.redox-os.org/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "ef7fa499-a585-491d-9700-38962a125092",
      "title": "dalek cryptography",
      "content_text": "A suite of cryptographic libraries and protocol implementations, written in the systems programming language Rust, for creating blazingly-fast, production-quality cryptographic applications.",
      "url": "https://dalek.rs/",
      "date_published": "2018-01-24T00:07:02+00:00",
      "author": {
        "name": "isis agora lovecruft",
        "url": "https://dalek.rs/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "b92200f5-9ac0-4104-9b0d-f444c55aceb8",
      "title": "Rust CLI Survey Results",
      "content_text": "Over the month of March 2018, we've been accepting responses to the Rust CLI Survey. This survey was designed to give us some areas of focus, according to the community, for the CLI Working Group (CLI-WG).\n\nOne of the goals of Rust 2018 is to make writing command line applications in Rust as frictionless (and fun!) as possible. And we are super excited to say: we've received 1,045 responses! The results, while varied, paint a pretty clear picture for tangible goals.",
      "url": "https://github.com/rust-lang-nursery/cli-wg/blob/master/survey-results/Readme.md",
      "date_published": "2018-04-12T22:26:15+00:00",
      "author": {
        "name": "Rust CLI Working Group",
        "url": "https://github.com/rust-lang-nursery/cli-wg"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ba7af9ee-e916-4d65-b7b2-c6afa2477ade",
      "title": "Down a Rusty Rabbit Hole",
      "content_text": "Last week I fell down a rather interesting rabbit hole in Rust, which was basically me discovering a series of quirks of the Rust compiler/language, each one leading to the next when I asked ‚Äúwhy?‚Äù",
      "url": "https://manishearth.github.io/blog/2018/04/12/down-a-rusty-rabbit-hole/",
      "date_published": "2018-04-12T00:00:00+00:00",
      "author": {
        "name": "Manish Goregaokar",
        "url": "https://manishearth.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "7f54a4c5-d312-4b64-9d90-4945dd6d1b72",
      "title": "Writing CloudABI applications in Rust",
      "content_text": "Installing a toolchain for Rust is very easy, as support for CloudABI has been upstreamed into the Rust codebase. Automated builds are performed by the Rust developers. As there hasn‚Äôt been a stable release of Rust to include CloudABI support yet, you must for now make use of Rust‚Äôs nightly track.",
      "url": "https://cloudabi.org/write/rust/",
      "date_published": "2018-04-13T05:18:57+00:00",
      "author": {
        "name": "CloudABI",
        "url": "https://cloudabi.org/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "63444a58-4cbd-4441-b5c3-5f216560e276",
      "title": "New Pop!_OS Testing Release with Rust based Linux installer \"distinst\"",
      "content_text": "Our second iteration of the 18.04 ISO is ready for testing. Testing the new installer and Optimus switching is our priority for this test release. Please test installing on a variety of hardware and provide feedback on any issues you encounter. If you run into any bugs, you can file them at https://github.com/pop-os/pop/issues.",
      "url": "https://system76.com/pop/testing",
      "date_published": "2018-04-13T21:05:51+00:00",
      "author": {
        "name": "System76",
        "url": "https://system76.com/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "d412d980-cc59-4a0b-ab9e-19100f3b8927",
      "title": "Faster Bulletproofs with Ristretto & AVX2",
      "content_text": "A few months ago, B√ºnz, Bootle, Boneh, Poelstra, Wuille, and Maxwell published Bulletproofs, which dramatically improves proof performance both in terms of proof size and verification time. In addition, it allows proving a much wider class of statements than just range proofs.\n\nAt Chain, we (Henry de Valence, Cathie Yun and Oleg Andreev) have been working on a pure-Rust Bulletproofs implementation, whose initial version we are publishing today, together with a set of notes.",
      "url": "https://blog.chain.com/faster-bulletproofs-with-ristretto-avx2-29450b4490cd",
      "date_published": "2018-04-13T19:21:27.639+00:00",
      "author": {
        "name": "Chain",
        "url": "https://blog.chain.com/@chaininc"
      },
      "tags": [
        "Tools and Applications",
        "Performance"
      ]
    },
    {
      "id": "30fe522c-e827-436a-bd52-40314d80e95b",
      "title": "The Challenge of Using C in Safety-Critical Applications [pdf]",
      "content_text": "Software errors in safety-critical systems can have severe consequences: property-loss, environmental devastation, injury, or death. Despite the severity of these risks, software continues to be written for safety-critical applications in languages that permit common classes of failures, such as undefined behavior, state corruption, and unexpected termination. One such language is C. Language standards that define allowable subsets (e.g. MISRA) and static analysis tools are often used in an attempt to ameliorate these failures by detecting them in the program code before they result in a critical issue at runtime. These traditional methods are ultimately insufficient when it comes to providing ahead-of-time assurances about safe runtime behavior for safety-critical applications. Alternative approaches must be considered.",
      "url": "https://polysync.io/s/The-Challenge-of-Using-C-in-Safety-Critical-Applications.pdf",
      "date_published": "2018-04-11T08:54:41.128+00:00",
      "author": {
        "name": "Shea Newton, Nathan Aschbache",
        "url": "https://polysync.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "2238849b-fcc8-4bd4-9828-66637c22f9af",
      "title": "Why would I use divergent functions?",
      "content_text": "Rust has some special syntax for ‚Äòdiverging functions‚Äô, which are functions that do not return.",
      "url": "https://medium.com/@yangnana11/rust-why-would-i-use-divergent-functions-d9dec59071bc",
      "date_published": "2018-04-11T08:54:41.128+00:00",
      "author": {
        "name": "Yang Nana",
        "url": "https://medium.com/@yangnana11"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d65aaebc-e17b-421b-86e8-1cc9c63a0408",
      "title": "Writing An NES Emulator with Rust and WebAssembly",
      "content_text": "I wrote the NES emulator with Rust and WebAssembly to learn Rust. It‚Äôs not perfect and have some audio bugs, but it‚Äôs good enough to play Super Mario bros.",
      "url": "https://medium.com/@bokuweb17/writing-an-nes-emulator-with-rust-and-webassembly-d64de101c49d",
      "date_published": "2018-04-11T14:30:56.719+00:00",
      "author": {
        "name": "bokuweb",
        "url": "https://medium.com/@bokuweb17"
      },
      "tags": [
        "Games and Graphics",
        "Web and Network Services"
      ]
    },
    {
      "id": "cacf27d3-9206-414d-b28f-8745eec00a4a",
      "title": "Taking the long road (Part 2): Rust bindings for a vector similarity search library",
      "content_text": "This is part 2 of a story on taking the long road towards Rust bindings to Faiss. You may wish to read part 1 first for a motivation section and a deeper understanding of how I built a plain C API on top of the C++ library.",
      "url": "https://medium.com/@e_net4/taking-the-load-road-part-2-rust-bindings-for-a-vector-similarity-search-library-914fbc1ec5ed",
      "date_published": "2018-04-12T20:11:12.081+00:00",
      "author": {
        "name": "Eduardo Pinho",
        "url": "https://medium.com/@e_net4"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "fc25e5f3-66d9-429d-8ca8-c1882a5083d6",
      "title": "JavaScript Interop with WebAssembly",
      "content_text": "In my last post I provided an introduction to WebAssembly‚Ää‚Äî‚Ääwhat is it, why do we care, and what does it look like? In this post, I‚Äôd like to explore a little bit of the inner workings of how we can communicate between Rust (wasm) and JavaScript. As I mentioned in the last post, WebAssembly is neither JavaScript nor some strongly-typed dialect. It is a standalone, compiled, portable binary. How you send data into and get data out of that binary involves some subtle nuances about how WebAssembly works.",
      "url": "https://medium.com/@KevinHoffman/javascript-interop-with-webassembly-2c69a3db19e9",
      "date_published": "2018-04-12T14:14:05.684+00:00",
      "author": {
        "name": "Kevin Hoffman",
        "url": "https://medium.com/@KevinHoffman"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "d506eda8-cab3-4046-b0b7-3c16fd1bc53d",
      "title": "Rust all-hands (dev-tools stuff)",
      "content_text": "Last week (sigh, the week before last now) we held an 'all-hands' event in Berlin. It was a great event - fantastic to meet so many Rust people in real life and really energising to see how much is being planned and implemented. In this post I want to summarise some of the important dev-tools stuff that happened. Our planning and notes from some meetings is in the dev-tools team repo.",
      "url": "https://www.ncameron.org/blog/rust-all-hands-dev-tools-stuff/",
      "date_published": "2018-04-11T02:18:18+00:00",
      "author": {
        "name": "Nick Cameron",
        "url": "http://www.ncameron.org/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "68f328f0-50d5-4152-aa9a-f5ab3c69f397",
      "title": "A Shifty Riddle",
      "content_text": "When I finally implemented opportunistic mutations in mutagen, everything seemed fine until my co-maintainer gnieto found a problem. Code failed to compile with the mutagen plugin, something that should never happen as long as the code in question compiles without the plugin. We not only broke the code ‚Äì we broke the build.",
      "url": "http://llogiq.github.io/2018/04/11/shift.html",
      "date_published": "2018-04-11T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e497ecb9-788c-476e-bb28-c1746fbff940",
      "title": "Writing My Final Year Project in Rust",
      "content_text": "As part of my final year in university I have had to undertake a project and then write a twenty page paper on it. I ended up being assigned one on a type of machine learning algorithm called boosting. This wasn't my first choice unfortunately, so I decided I'd try to make it interesting for myself by implementing it in Rust. Rust was, and still is, quite immature when it comes to machine learning - as Are We Learning Yet? confirms. I thought it would be an interesting challenge to write some machine learning algorithms in a language that has yet to be used too much for this field.",
      "url": "http://mattyhall.github.io/posts/writing-my-final-year-project-in-rust.html",
      "date_published": "2018-03-30T23:00:00+00:00",
      "author": {
        "name": "Matthew Hall",
        "url": "http://mattyhall.github.io/blog.html"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a89cb196-c162-4c49-b1d5-642547265f39",
      "title": "The case for deadlines",
      "content_text": "Rust aims to be the foundation of fast and robust software. A thorn in that side is the choice of timeout-centric APIs for I/O and multithreading. I posit this was a bad choice and it needs to be remedied as soon as possible before more APIs proliferate this (possibly accidental) design decision.",
      "url": "https://gist.github.com/alkis/9510a840f1965185ab0a02cb59761dd8",
      "date_published": "2018-04-10T06:28:29+00:00",
      "author": {
        "name": "Alkis Evlogimenos",
        "url": "https://gist.github.com/alkis"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "ed19c2a7-fe9d-465b-b41a-71480e6b978a",
      "title": "QCGPU - Hardware Accelerated Quantum Computer Simulation",
      "content_text": "A software library for high performance and hardware accelerated simulation of Quantum Computers and Algorithms. Written with Rust and OpenCL.",
      "url": "https://qcgpu.github.io/",
      "date_published": "2018-04-11T06:47:00+10:00",
      "author": {
        "name": "QCGPU",
        "url": "https://qcgpu.github.io/"
      },
      "tags": [
        "Computer Science",
        "Tools and Applications"
      ]
    },
    {
      "id": "b93c9682-4e53-4a7f-a39b-79d57b2b4737",
      "title": "New sysinfo version (huge performance improvements!)",
      "content_text": "This new version comes with great performance improvements. We're talking about 3x faster on macos, 2x faster on linux and 3x faster on windows (the benchmarks are at the end of the post).",
      "url": "https://blog.guillaume-gomez.fr/articles/2018-04-09+New+sysinfo+version+%28huge+performance+improvements%21%29",
      "date_published": "2018-04-09T00:00:00+00:00",
      "author": {
        "name": "Guillaume Gomez",
        "url": "https://blog.guillaume-gomez.fr/"
      },
      "tags": [
        "Performance",
        "Tools and Applications"
      ]
    },
    {
      "id": "68ff8b22-500f-4674-b9f0-b70414db12d8",
      "title": "Safe Intrusive Collections with Pinning",
      "content_text": "In my last post, I talked about the new ‚Äúpinned references‚Äù which guarantee that the data at the memory it points to will not, ever, be moved elsewhere. I explained how they enable giving a safe API to code that could previously only be exposed with unsafe, and how one could go about proving such a thing. This post is about another application of pinned references‚Äîanother API whose safety relies on the pinning guarantees: Intrusive collections. It turns out that pinned references can almost be used for this, but not quite. However, this can be fixed by extending the guarantees provided by pinned references, as suggested by @cramertj.",
      "url": "https://www.ralfj.de/blog/2018/04/10/safe-intrusive-collections-with-pinning.html",
      "date_published": "2018-04-10T00:00:00+00:00",
      "author": {
        "name": "Ralf Jung",
        "url": "https://www.ralfj.de/blog/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "1282d538-71c9-4379-a330-820eccf83d22",
      "title": "Sequoia-PGP - a modular OpenPGP implementation",
      "content_text": "Sequoia is a modular OpenPGP implementation in Rust.",
      "url": "https://sequoia-pgp.org/",
      "date_published": "2018-04-11T06:52:00+10:00",
      "author": {
        "name": "p‚â°p foundation",
        "url": "https://sequoia-pgp.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "61846190-2e41-4590-95c0-172d767aacc1",
      "title": "Getting Yew to work with Rust on ‚ÄòBash on Ubuntu on Windows‚Äô",
      "content_text": "Yew is a new web framework written in Rust that takes concepts from React JS and Elm. It takes the two web libraries I love and combines them with the new language I love‚Ää‚Äî‚ÄäRust. I wrote this article because I haven‚Äôt found a lot of documentation online on how to get the Yew examples running, and I‚Äôm sure there will be people that will run into the same problems I did. I wrote this in hopes that it helps someone out there.",
      "url": "https://medium.com/@raymondsiu/getting-yew-to-work-with-rust-on-bash-on-ubuntu-on-windows-in-windows-10-790a006e6805",
      "date_published": "2018-04-08T23:14:01.202+00:00",
      "author": {
        "name": "Raymond Siu",
        "url": "https://medium.com/@raymondsiu"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "66851aee-1bf3-4b18-b1aa-50f79ce773f4",
      "title": "Writing a recursive ascent parser by hand",
      "content_text": "I‚Äôve been exploring various ways to write parsers. For a long time, I‚Äôve used hand-written recursive descent for its straightforwardness, flexibility, and performance. There is another way‚Äîparser generators like Menhir, LALRPOP, or the venerable Bison use the bottom-up LR algorithm. I decided I would try an experiment: write an LR parser by hand, and see how readable I could make it.",
      "url": "https://www.abubalay.com/blog/2018/04/08/recursive-ascent",
      "date_published": "2018-04-08T00:00:00+00:00",
      "author": {
        "name": "Russell Johnston",
        "url": "https://www.abubalay.com/blog"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "d4c2f839-050c-4134-868d-eab325676917",
      "title": "An interactive guide to learning Rust!",
      "content_text": "Fix a series to broken Rust programs to gain a deeper understanding of Rust.",
      "url": "https://github.com/toidiu/learn-rust",
      "date_published": "2018-04-10T06:47:00+10:00",
      "author": {
        "name": "toidiu",
        "url": "https://github.com/toidiu"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "d1d6e382-3b80-431e-ba08-5cbe1ccebce2",
      "title": "Dark Side Of Ergonomics",
      "content_text": "Despite having an experience with wide range of computer languages, including C++ and Haskell (both strong influences to Rusts design), I found Rust hard to learn. Sometimes I grind my teeth about something the compiler doesn‚Äôt let me do. Despite that, I didn‚Äôt put ergonomics as a wish in any poll. In fact, if I was to take a poll right now, I‚Äôd probably be against further ergonomics initiatives.",
      "url": "https://vorner.github.io/2018/04/08/Dark-side-of-ergonomics.html",
      "date_published": "2018-04-08T00:00:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "7b281b2d-246c-4fec-bdf5-6eb92fbb8a34",
      "title": "The State of Game Development in Rust",
      "content_text": "Game Development is one of the fields in which Rust can gain a lot of traction. Let‚Äôs look at the current ecosystem and let‚Äôs see what the community has to offer.",
      "url": "http://www.davideaversa.it/2018/02/state-game-development-rust/",
      "date_published": "2018-02-26T17:37:27+00:00",
      "author": {
        "name": "Davide Aversa",
        "url": "http://www.davideaversa.it/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "5230134e-6bfc-4a88-9cee-7bec1f15e099",
      "title": "Embedded Rust: Why?",
      "content_text": "I will try to publish here a series of articles about my approach to embedded development and how I plan to achieve that in Rust.",
      "url": "http://ithinuel.me/embedded-rust-why/",
      "date_published": "2018-03-30T08:26:00+00:00",
      "author": {
        "name": "Wilfried Chauveau",
        "url": "http://ithinuel.me/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "7fbe9c06-2e4a-4da4-aea0-45b4828f6687",
      "title": "Async & Await in Rust: a full proposal",
      "content_text": "I‚Äôm really excited to announce the culmination of much of our work over the last four months: a pair of RFCs for supporting async & await notation in Rust. This will be very impactful for Rust in the network services space. The change is proposed as two RFCs:\n RFC #2394: which adds async & await notation to the language. RFC #2395: which moves a part of the futures library into std to support that syntax.",
      "url": "https://boats.gitlab.io/blog/post/2018-04-06-async-await-final/",
      "date_published": "2018-04-06T00:00:00+00:00",
      "author": {
        "name": "boats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "9c6d2c06-5031-414d-b743-850c4ddebdc3",
      "title": "Cloudflare Argo Tunnel with Rust+Raspberry Pi",
      "content_text": "Serving content from a Rust web server running on a Raspberry Pi from your home to the world, with a Cloudflare Argo Tunnels.",
      "url": "https://blog.cloudflare.com/cloudflare-argo-tunnel-with-rust-and-raspberry-pi/",
      "date_published": "2018-04-06T14:00:00+00:00",
      "author": {
        "name": "Steven Pack",
        "url": "https://blog.cloudflare.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "e01d9c09-e66d-4fea-94e3-95db24137dd6",
      "title": "Sound and ergonomic specialization for Rust",
      "content_text": "Specialization holds the dubious honor of being among the oldest post-1.0 features remaining in unstable limbo. That‚Äôs for good reason, though: until recently, we did not know how to make it sound.",
      "url": "http://aturon.github.io/2018/04/05/sound-specialization/",
      "date_published": "2018-04-05T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/"
      },
      "tags": [
        "Language",
        "Computer Science"
      ]
    },
    {
      "id": "4812042b-1d2a-4171-9a77-d2f0a0c44b91",
      "title": "Writing the Perfect 'Collect' Trait",
      "content_text": "I‚Äôve been spending some time thinking about garbage collection in rust. I know, shame on me, it‚Äôs a systems language, we hate garbage collection, but‚Ä¶ even in a systems programming language, garbage collection is still pretty damn useful.",
      "url": "https://mtak-blog.github.io/the_perfect_collect_trait",
      "date_published": "2018-04-05T00:00:00+00:00",
      "author": {
        "name": "mtak-blog",
        "url": "https://mtak-blog.github.io/"
      },
      "tags": [
        "Language",
        "Computer Science"
      ]
    },
    {
      "id": "cb113ba3-eaa8-40e1-8ff8-a8b710bf89db",
      "title": "Custom tasks in Cargo",
      "content_text": "One of the big requests from the Domain Working Groups for Rust 2018 is a richer feature set for framework- or domain-specific workflows in Cargo. At the simplest level, that might look like project templates ‚Äì the ability to direct cargo new to start with a custom template defined in crates.io. That‚Äôs already enough to get you cooking with frameworks like QuiCLI, which today involve a fixed set of initial scaffolding that you can fill in.",
      "url": "http://aturon.github.io/2018/04/05/workflows/",
      "date_published": "2018-04-05T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "5eca0d0a-81f6-4804-869f-32ed307adb9f",
      "title": "The Rust Team All Hands in Berlin: a Recap",
      "content_text": "Last week we held an ‚ÄúAll Hands‚Äù event in Berlin, which drew more than 50 people involved in 15 different Rust Teams or Working Groups, with a majority being volunteer contributors. This was the first such event, and its location reflects the current concentration of team members in Europe. The week was a smashing success which we plan to repeat on at least an annual basis.",
      "url": "https://blog.rust-lang.org/2018/04/06/all-hands.html",
      "date_published": "2018-04-06T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "8c1bc2c9-1eeb-4a19-ac6b-d11e2a7c6f63",
      "title": "Welcome to this week in Rust and WebAssembly!",
      "content_text": "Hello and welcome to the first issue of This Week in Rust and WebAssembly! Rust is a systems language pursuing the trifecta: safety, concurrency, and speed. WebAssembly is designed as a portable target for compilation of high-level languages like C, C++, and Rust, enabling deployment on the web for client and server applications. This is a weekly summary of its progress and community.",
      "url": "https://rustwasm.github.io/2018/04/05/welcome-to-this-week-in-rust.html",
      "date_published": "2018-04-05T00:00:00+00:00",
      "author": {
        "name": "Sendil Kumar N",
        "url": "https://rustwasm.github.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "277652ec-bbeb-454c-85da-766438600d47",
      "title": "Cargo, Xargo, and Rustup",
      "content_text": "Another topic of discussion at the Berlin Rust All Hands was the long-term story around Cargo, Xargo, and Rustup. The latter two tools are both involved in managing your Rust toolchain, with Xargo allowing you to build custom stds and Rustup managing pre-built artifacts for mainstream targets. Xargo is most commonly used for cross-compiling to less common platforms, but can also be used to customize the standard library on mainstream platforms.",
      "url": "http://aturon.github.io/2018/04/06/rustup-xargo/",
      "date_published": "2018-04-06T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/"
      },
      "tags": [
        "Embedded",
        "Language"
      ]
    },
    {
      "id": "318f9d08-d86a-4799-ac08-75014d089475",
      "title": "im - Immutable Data Structures for Rust",
      "content_text": "This library implements several of the more commonly useful immutable data structures for Rust. They rely on structural sharing to keep most operations fast without needing to mutate the underlying data store, leading to more predictable code without necessarily sacrificing performance.",
      "url": "https://docs.rs/im/10.0.0/im/",
      "date_published": "2018-04-06T21:06:00+00:00",
      "author": {
        "name": "Bodil Stokke",
        "url": "http://immutable.rs/"
      },
      "tags": [
        "Computer Science",
        "Crates"
      ]
    },
    {
      "id": "0ea6b48d-d3a3-4969-a053-37d6e697de85",
      "title": "Announcing Tower ‚Äî A library for writing robust network services with Rust",
      "content_text": "Tower is a library for writing robust network services with Rust. It is being built in service of the Conduit proxy, which is using the Tokio ecosystem to build the world‚Äôs smallest, fastest, most secure network proxy. Tower will also provide a batteries included experience for implementing HTTP and gRPC services.",
      "url": "https://medium.com/@carllerche/announcing-tower-a-library-for-writing-robust-network-services-with-rust-67273f052c40",
      "date_published": "2018-04-06T19:40:38.816+00:00",
      "author": {
        "name": "Carl Lerche",
        "url": "https://medium.com/@carllerche"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "fc550900-512d-4f82-b40a-25a8ef86d513",
      "title": "Using Rust Modules in JavaScript/Web Development (Part 3/ 3) [NodeJS]",
      "content_text": "Please read the Part 1 of the series here :",
      "url": "https://medium.com/@atulanand94/using-rust-modules-for-javascript-web-development-part-3-3-nodejs-7c71e4ae23fe",
      "date_published": "2018-04-03T14:29:28.389+00:00",
      "author": {
        "name": "Atul",
        "url": "https://medium.com/@atulanand94"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "14922be0-52bc-4711-9fc1-aeec98e39c1d",
      "title": "Making a 100% Statically-Linked, Single-File Web App with React and Rust",
      "content_text": "This tutorial will cover the basics of creating a minimal React app which can be deployed as a statically-linked Rust binary. What this accomplishes is having all of your code, including HTML, JavaScript, CSS, and Rust, packaged into a single file that will run on pretty much any 64-bit Linux system, regardless of the kernel version or installed libraries.",
      "url": "https://anderspitman.net/2018/04/04/static-react-rust-webapp/",
      "date_published": "2018-04-04T21:21:00+00:00",
      "author": {
        "name": "Anders Pitman",
        "url": "https://anderspitman.net/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "37aa0f60-d86c-446d-848c-52b45777ae2c",
      "title": "Using Rust Modules in JavaScript/Web Development (Part 2 / 3) [Webpack]",
      "content_text": "Part 1 of the post was primarily concerned with integrating rust modules with JavaScript with the help of wasm. But that involved a lot of manual procedures. Another more streamlined way is using webpack.",
      "url": "https://medium.com/@atulanand94/using-rust-modules-for-javascript-web-development-part-2-7a86eaec5ee9",
      "date_published": "2018-04-03T10:15:39.331+00:00",
      "author": {
        "name": "Atul",
        "url": "https://medium.com/@atulanand94"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "8379ada9-43de-4764-88b1-aa3d24b114fd",
      "title": "A Formal Look at Pinning",
      "content_text": "Recently, a new API for ‚Äúpinned references‚Äù has landed as a new unstable feature in the standard library. The purpose of these references is to express that the data at the memory it points to will not, ever, be moved elsewhere. Others have written about why this is important in the context of async IO. The purpose of this post is to take a closer, more formal look at that API: We are going to take a stab at extending the RustBelt model of types with support for pinning.",
      "url": "https://www.ralfj.de/blog/2018/04/05/a-formal-look-at-pinning.html",
      "date_published": "2018-04-05T00:00:00+02:00",
      "author": {
        "name": "Ralf Jung",
        "url": "https://www.ralfj.de/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "afc97289-36f8-4acb-ab80-28e7770ea126",
      "title": "MesaLink memory-safe and OpenSSL-compatible TLS library",
      "content_text": "MesaLink is a memory-safe and OpenSSL-compatible TLS library. Since 2014, the industry has seen a huge loss due to memory vulnerabilities in TLS stacks, such as the infamous \"Heartbleed\" bug. MesaLink is created with the goal of eliminating memory vulnerabilities in TLS stacks. MesaLink is written in Rust, a programming language that guarantees memory safety. This significantly reduces the attack surfaces, which facilitates auditing and restricting the remaining attack surfaces. MesaLink is cross-platform and provides OpenSSL-compatible APIs. It works seamlessly in desktop, mobile, and IoT devices. With the growth of the ecosystem, MesaLink would also be adopted in the server environment in the future.",
      "url": "https://github.com/mesalock-linux/mesalink",
      "date_published": "2018-04-06T07:00:00+10:00",
      "author": {
        "name": "MesaLock Linux",
        "url": "https://github.com/mesalock-linux"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "98f65a4a-8501-45e4-bda8-48d5d01306ba",
      "title": "Improving GStreamer performance with tokio",
      "content_text": "For one of our customers at Centricular we were working on a quite interesting project. Their use-case was basically to receive an as-high-as-possible number of audio RTP streams over UDP, transcode them, and then send them out via UDP again. Due to how GStreamer usually works, they were running into some performance issues.\n\nThis blog post will describe the first set of improvements that were implemented for this use-case, together with a minimal benchmark and the results. My colleague Mathieu will follow up with one or two other blog posts with the other improvements and a more full-featured benchmark.\n\nThe short version is that CPU usage decreased by about 65-75%, i.e. allowing 3-4x more streams with the same CPU usage. Also parallelization works better and usage of different CPU cores is more controllable, allowing for better scalability. And a fixed, but configurable number of threads is used, which is independent of the number of streams.",
      "url": "https://coaxion.net/blog/2018/04/improving-gstreamer-performance-on-a-high-number-of-network-streams-by-sharing-threads-between-elements-with-rusts-tokio-crate/",
      "date_published": "2018-04-05T15:21:06+00:00",
      "author": {
        "name": "Sebastian Dr√∂ge",
        "url": "https://coaxion.net/blog/"
      },
      "tags": [
        "Web and Network Services",
        "Performance"
      ]
    },
    {
      "id": "0cb16bc7-daff-4747-81e5-d4455d33fc43",
      "title": "HTTP upgrades with hyper",
      "content_text": "The newest release of hyper includes some lower-level connection APIs for both the server and client. Notably, this allows using hyper send and receive HTTP upgrade requests. The most popular of these is Websockets.",
      "url": "http://seanmonstar.com/post/172531530657/http-upgrades-with-hyper",
      "date_published": "2018-04-02T14:34:53-07:00",
      "author": {
        "name": "Sean McArthur",
        "url": "http://seanmonstar.com/"
      },
      "tags": [
        "Web and Network Services",
        "Crates"
      ]
    },
    {
      "id": "0dd3a72c-b43f-449a-92f3-fd25f164d224",
      "title": "Corner Cutting vs. Productivity",
      "content_text": "I recently got into a discussion with another very knowledgeable Rustacean, who (I paraphrase) claimed that Rust is about adding just enough roadblocks to keep you from cutting corners. This is a nice metaphor because it explains a lot: Rust may feel more cumbersome, because it won‚Äôt let you cut corners. On the other hand, once it compiles, many classes of errors will already have been taken care of, so your code will usually work as expected (or if you‚Äôre new to Rust, unexpectedly well).",
      "url": "https://llogiq.github.io/2018/04/03/corners.html",
      "date_published": "2018-04-03T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "229aab36-08f5-4288-a9df-c804ad6c2b56",
      "title": "Using Rust Modules in JavaScript/Web Development (Part 1 / 3) [Plain JS]",
      "content_text": "One of the promising reasons I started learning rust is that it can be used to build modules for web using web-assembly. This blog post will cover how you can build a rust module and use it as regular package in the JavaScript environment. Remember rust is not meant to replace JS. I see it as complementary add-on to the places where JS is comparatively slower (heavy computations).",
      "url": "https://medium.com/@atulanand94/using-rust-modules-for-javascript-web-development-part-i-e6dec27df7b2",
      "date_published": "2018-04-03T06:22:23.753+00:00",
      "author": {
        "name": "Atul",
        "url": "https://medium.com/@atulanand94"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "b525113d-ce0a-4c11-b4d1-553eb3fef88d",
      "title": "Increasing Rust‚Äôs Reach 2018",
      "content_text": "The Rust team is happy to announce that we‚Äôre running our Increasing Rust‚Äôs Reach program again this year. Increasing Rust‚Äôs Reach is one of several programs run by the project to grow Rust‚Äôs community of project collaborators and leaders.",
      "url": "https://blog.rust-lang.org/2018/04/02/Increasing-Rusts-Reach-2018.html",
      "date_published": "2018-04-02T00:00:00+00:00",
      "author": {
        "name": "Ashley Williams",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "cf92e0a9-88ac-4fa8-9ecd-d61078868f26",
      "title": "A Gentle Introduction to Rust (book)",
      "content_text": "Introduction to the Rust language, standard library and ecosystem",
      "url": "http://stevedonovan.github.io/rust-gentle-intro/",
      "date_published": "2018-04-05T07:00:00+10:00",
      "author": {
        "name": "Steve J Donovan",
        "url": "https://github.com/stevedonovan"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "d110dc0e-7a78-42c3-8326-5b5ec58f8875",
      "title": "JavaScript to Rust and Back Again: A wasm-bindgen Tale",
      "content_text": "Recently we‚Äôve seen how WebAssembly is incredibly fast to compile, speeding up JS libraries, and generating even smaller binaries. We‚Äôve even got a high-level plan for better interoperability between the Rust and JavaScript communities, as well as other web programming languages. As alluded to in that previous post, I‚Äôd like to dive into more detail about a specific component, wasm-bindgen.",
      "url": "https://hacks.mozilla.org/2018/04/javascript-to-rust-and-back-again-a-wasm-bindgen-tale/",
      "date_published": "2018-04-04T14:58:40+00:00",
      "author": {
        "name": " Alex Crichton",
        "url": "https://hacks.mozilla.org/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "6419c6a3-a47d-4ce5-93ef-11f17be5eecd",
      "title": "Building Tiny Rust Binaries for Embedded Linux",
      "content_text": "At the recent 2018 Rust All Hands, I met up with Katharina @spacekookie, who works on an open source project that creates software for Embedded Linux Devices. She had talked with the other engineers on the project about including some Rust components, however with their limited flash storage space (8MB for the whole firmware, including operating system and all other software), she was worried that the Rust binaries wouldn‚Äôt fit. The current webserver component for their project was measured in the 100‚Äôs of KB, while the Rust binary she produced was already multiple MBs, even with a --release build!",
      "url": "https://jamesmunns.com/update/2018/04/01/tinyrocket.html",
      "date_published": "2018-04-01T09:30:00+00:00",
      "author": {
        "name": "James Munns",
        "url": "https://jamesmunns.com/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "5e66cfa3-c153-40ab-8cad-cb8aaf01d178",
      "title": "Getting started with Rust: Enum on steroids!",
      "content_text": "Hello everyone! Today subject was hard to decide on. But as the previous one was pretty tedious, I decided to go a subject more easy to speak of. So, today we are going to talk about enum in Rust!",
      "url": "https://www.mathieu-nivoliez.com/posts/2018-04-01-getting-started-with-rust-enum-on-steroids.html",
      "date_published": "2018-04-01T00:00:00+00:00",
      "author": {
        "name": "Mathieu Nivoliez",
        "url": "https://www.mathieu-nivoliez.com/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "680e9488-98e3-4a44-b462-761cf817ca10",
      "title": "Why We're Betting on Rust",
      "content_text": "Considering how the state of our art is ever changing, I re-evaluate which tools belong in my box of gizmos each year as well. In the past, I‚Äôve employed nginx as a high-performance cache and proxy, but it has been largely edged out by Envoy, which touts a hybrid non-blocking event model and has become wildly successful after being released in 2016. That very same principle, event-driven I/O, is the same reason I chose Node.js for most of the APIs I‚Äôve developed since 2011. Even if practices change, we retain successful engineering models.\n\nBeginning late last year, as I sketched our founding mission and initial product offerings, I also decided to select a new primary language that could handle most of our primary development tasks. After writing mostly JavaScript and compile-to-JS languages for half a decade, I longed for something more.",
      "url": "https://www.uptime.ventures/blog/2018/04/why-were-betting-on-rust/",
      "date_published": "2018-04-02T00:00:00+00:00",
      "author": {
        "name": "Nicholas Young",
        "url": "https://www.uptime.ventures/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d14f3e75-4047-441e-a67b-fc0de042845a",
      "title": "Removing Connection State In mob",
      "content_text": "I started writing mob, an multi-echo server using mio, in 2015. I coded mob into a mostly working state and then left it mostly alone, only updating it to work with the latest stable mio. Recently, I started looking at the code again and had the urge to improve it. In a previous post, I talked about managing the state of connections in mob. In this post, I will walk through what I did to remove the need to track connection state. I wanted to remove the state because the implementation required an O(n) operation every tick of the mio event loop. It also added a fair amount of complexity to the code.",
      "url": "http://hermanradtke.com/2018/03/29/removing-connection-state-from-mob.html",
      "date_published": "2018-03-29T00:00:00+00:00",
      "author": {
        "name": "Herman J. Radtke III",
        "url": "http://hermanradtke.com/"
      },
      "tags": [
        "Language",
        "Web and Network Services"
      ]
    },
    {
      "id": "dac3ce68-bfe5-4774-8b89-fb4351d53445",
      "title": "Reliable Systems Series: Model-Based Testing",
      "content_text": "This is the first article in a series on techniques I‚Äôve found useful for making my projects more reliable. These techniques are used in the distributed systems, database, automotive, embedded, and aerospace fields, but if you build services, user interfaces, or generally anything stateful, I think you will find something useful along the way.",
      "url": "https://medium.com/@tylerneely/reliable-systems-series-model-based-property-testing-e89a433b360",
      "date_published": "2018-03-28T12:52:27.284+00:00",
      "author": {
        "name": "Tyler Neely",
        "url": "https://medium.com/@tylerneely"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "2f7b942d-1a59-40bc-bc92-a1e2e85803ee",
      "title": "Weekly Driver: Using the SGP30 Gas Sensor from Rust",
      "content_text": "After the MCP3425 ADC driver I published last month as part of the the weekly driver initiative, I wrote a second Rust embedded-hal driver, this time for the SGP30. The Sensirion SGP30 is a tiny low-power gas sensor (produced in Switzerland) for indoor air quality applications with good long-term stability. It has an I¬≤C interface with TVOC (Total Volatile Organic Compounds) and CO‚ÇÇ equivalent signals.",
      "url": "https://blog.dbrgn.ch/2018/4/1/rust-sgp30-driver/",
      "date_published": "2018-04-01T00:00:00+02:00",
      "author": {
        "name": "Danilo Bargen",
        "url": "https://blog.dbrgn.ch/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "5941ab41-5269-4401-9978-f6f389922443",
      "title": "Rust: First impressions from a C++ developer",
      "content_text": "I started learning Rust 2 weeks back (yay!!) whenever I got free time. And all the time that I spent  learning it has been worthwhile. This is not going to be a deep technical post, but just my impressions about Rust from where I come from (C++).",
      "url": "http://templated-thoughts.blogspot.com.au/2018/03/rust-first-impressions-from-c-developer.html",
      "date_published": "2018-03-31T00:43:00-07:00",
      "author": {
        "name": "Arun Muralidharan",
        "url": "http://templated-thoughts.blogspot.com.au/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "effc3ea9-0e61-4b47-ad1b-20782addb1bd",
      "title": "Analysing crates.io data",
      "content_text": "I am learning Clojure for the past one year and I thought making open source contributions is a great way to interact with the community. I made a post previously on using Clojars metadata to analyse JDK 9 and Clojure 1.9 issues that helped me file issues to ensure compatibility. I used the same method here to find the modules that were broken on a nightly version of a rustc due to a recent stabilisation.",
      "url": "https://tirkarthi.github.io/rust/2018/03/30/analyzing-crates-data.html",
      "date_published": "2018-03-30T18:30:29+00:00",
      "author": {
        "name": "Karthikeyan",
        "url": "https://tirkarthi.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "980f0166-c073-42bc-a1df-7dab36421e10",
      "title": "You can't Rust that",
      "content_text": "The last year has been fun because I could build a lot for really nice stuff for Sentry in Rust and for the first time the development experience was without bigger roadblocks. While we have been using Rust before it now feels different because the ecosystem is so much more stable and we ran less against language or tooling issues.\n\nHowever talking to people new to Rust (and even brainstorming APIs with coworkers) it's hard to get rid of the feeling that Rust can be a mind bending adventure and that the best way to have a stress free experience is knowing upfront what you cannot (or should not attempt to) do. Knowing that certain things just cannot be done helps putting your mind back back on the right track.\n\nSo here are things not to do in Rust and what to do instead which I think should be better known.",
      "url": "http://lucumr.pocoo.org/2018/3/31/you-cant-rust-that/",
      "date_published": "2018-03-31T00:00:00+00:00",
      "author": {
        "name": "Armin Ronacher",
        "url": "http://lucumr.pocoo.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e5d47646-8715-43d3-a39b-23115255a1fe",
      "title": "Taking the long road (Part 1): bindings for a vector similarity search library",
      "content_text": "Perhaps you have once wondered how search engines such as Google and TinEye enable their users to search for images which are similar to one that you provide, or how they can identify a building from nothing but a picture. Content-based image retrieval (CBIR) is the backbone concept, and provides exciting new ways to search for useful information. While the concept is no longer novel, the requirements imposed on systems for CBIR are ever increasing due to the increasingly larger amounts of data and demand for higher quality of retrieval.",
      "url": "https://medium.com/@e_net4/taking-the-long-road-part-1-97e6e41f6b05",
      "date_published": "2018-03-31T15:45:00.113+00:00",
      "author": {
        "name": "Eduardo Pinho",
        "url": "https://medium.com/@e_net4"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "79ebe691-fe8b-46ea-806c-996919b730ca",
      "title": "I've just learned Rust and I think I'm in love",
      "content_text": "I‚Äôve decided to learn some Rust recently while working on the Stanford‚Äôs experimental course on operating systems. Here‚Äôs a list of things that I think are great about it.",
      "url": "https://rskupnik.github.io/I-learned-rust-and-I-think-Im-in-love",
      "date_published": "2018-03-30T00:00:00+00:00",
      "author": {
        "name": "Rados≈Çaw Skupnik",
        "url": "https://rskupnik.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4a0c4c01-2597-4688-ac99-2726bb1a3505",
      "title": "Thoughts on Rust, a few thousand lines in",
      "content_text": "To say my first foray into Rust was a frustrating struggle would be an understatement. I picked a terrible first project that left me neck deep in Rust‚Äôs trickiest areas right off the bat. I was excited to try again. A few years ago I wrote Sumoshell, a CLI App for log analysis. I‚Äôd wanted to improve it for a while, so porting it to Rust seemed like a nice way to kill two birds with one stone.",
      "url": "https://rcoh.me/posts/things-learned-first-thousand-lines-of-rust/",
      "date_published": "2018-03-24T12:56:00-07:00",
      "author": {
        "name": "Russell Cohen",
        "url": "https://rcoh.me/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "fe337d8c-3b02-4742-bfd0-59ac89d4234f",
      "title": "A geometric Rust¬†adventure",
      "content_text": "The short version is: I have some shapes. I want to find their intersection.\n\nReally, I want more than that: I want to drop them all on a canvas, intersect everything with everything, and pluck out all the resulting polygons. The input is a set of cookie cutters, and I want to press them all down on the same sheet of dough and figure out what all the resulting contiguous pieces are. And I want to know which cookie cutter(s) each piece came from.\n\nBut intersection is a good start.",
      "url": "https://eev.ee/blog/2018/03/30/a-geometric-rust-adventure/",
      "date_published": "2018-03-30T17:17:00-07:00",
      "author": {
        "name": "Eevee",
        "url": "https://eev.ee/blog/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "cca40bed-4eaf-46c6-ae72-1e49ed3ef2ad",
      "title": "New Timer implementation in Tokio",
      "content_text": "To close out a great week, there is a new release of Tokio. This release includes a brand new timer implementation.",
      "url": "https://tokio.rs/blog/2018-03-timers/",
      "date_published": "2018-03-30T00:00:00+00:00",
      "author": {
        "name": "Carl Lerche",
        "url": "https://tokio.rs/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "88175c1a-8150-45f5-a1d8-d390457b9fe2",
      "title": "Announcing personal finance tool 'pfr'",
      "content_text": "pfr is a command-line tool for helping me to manage my personal finances. At the end of each month, I like to sit down and ‚Äúallocate‚Äù funds to cover my expenses for the following month. However, not all of my expenses occur monthly. For example, things like rent are paid weekly, and I think of money spent on food in terms of weeks, so I have to multiply those expenses by 4 (ish). I also have to figure out how much money to put in each account, e.g on my EFTPOS (direct-debit) card or for automatic payments. It‚Äôs not hard, but then again, that‚Äôs why we write programs.",
      "url": "https://kyusscaesar.wordpress.com/2018/03/29/announcing-pfr/",
      "date_published": "2018-03-29T10:10:34+00:00",
      "author": {
        "name": "Antony Southworth",
        "url": "https://kyusscaesar.wordpress.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "dc304d16-2ec3-45b1-833b-a9536c1a7d95",
      "title": "Memory Safety and Lifetimes in Rust",
      "content_text": "A program is memory-safe if in any possible execution of the program , all expressions e in the program that refer to an object of type T resolve to an object of type T that has been initialized and not yet deallocated.\n\nThere are different ways to guarantee memory safety for all programs. One is to restrict the programming language and disallow pointers. But, this forces most programs to make unnecessary copies of data. Another strategy, called garbage collection, embeds a garbage collector with every program. The garbage collector periodically looks for objects in memory that cannot be accessed from the program and reclaims this memory. The drawbacks of this are the overhead of garbage collection and that deallocation of memory is no longer under the control of the programmer.",
      "url": "https://balu.github.io/lifetimes.html",
      "date_published": "2018-02-26T18:52:22+00:00",
      "author": {
        "name": "Balagopal Komarath",
        "url": "https://balu.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "3052579c-dccc-46b8-8d93-bbecfa493992",
      "title": "Speeding Up 'dwarfdump' With Rust",
      "content_text": "Writing a debugger for C++ on Linux, you spend a lot of time examining pretty-printed DWARF debug information using tools like readelf, objdump or dwarfdump. Unfortunately this can be quite slow.\n\nI decided to try to speed dwarfdump up. TL;DR: I reduced the dump time from 506s to 26s by fixing some simple issues and taking advantage of Rust \"fearless parallelism\". I think there are interesting opportunities for speeding up many kinds of command-line tools using Rust and parallelism.",
      "url": "https://robert.ocallahan.org/2018/03/speeding-up-dwarfdump-with-rust.html",
      "date_published": "2018-03-29T14:44:00+13:00",
      "author": {
        "name": "Robert O'Callahan",
        "url": "https://robert.ocallahan.org/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "2cadbd86-48ec-4fab-95bb-5959818d5747",
      "title": "Announcing Rust 1.25",
      "content_text": "The Rust team is happy to announce a new version of Rust, 1.25.0. The last few releases have been relatively minor, but Rust 1.25 contains a bunch of stuff!",
      "url": "https://blog.rust-lang.org/2018/03/29/Rust-1.25.html",
      "date_published": "2018-03-29T00:00:00+00:00",
      "author": {
        "name": "The Rust Core Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "04fdf0c8-05ab-46f3-b72d-c7e88eb6dc9b",
      "title": "Cargo got some new tricks, but is it still correct!?",
      "content_text": "I have been working with @alexcrichton to improve the resolver in Cargo.",
      "url": "https://www.reddit.com/r/rust/comments/87ss76/cargo_got_some_new_tricks_but_is_it_still_correct/",
      "date_published": "2018-03-28T15:25:46+00:00",
      "author": {
        "name": "Eh2406",
        "url": "https://www.reddit.com/user/Eh2406"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "1054cc8a-cbdd-4073-b7f9-2801aaad6fd6",
      "title": "Introducing Click: The Command Line Interactive Controller for Kubernetes",
      "content_text": "Click is an open-source tool that lets you quickly and easily run commands against Kubernetes resources, without copy/pasting all the time, and that easily integrates into your existing command line workflows. This blog introduces its its usage and merits.",
      "url": "https://databricks.com/blog/2018/03/27/introducing-click-the-command-line-interactive-controller-for-kubernetes.html",
      "date_published": "2018-03-27T16:07:56+00:00",
      "author": {
        "name": "Nick Lanham",
        "url": "https://databricks.com/blog/category/engineering"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "07825eb3-aaab-46c5-b7e4-680857d73750",
      "title": "Rust + Node.js are awesome!",
      "content_text": "Blazing fast, low requirements, computationally intensive operations on Node.js using Rust",
      "url": "https://itnext.io/rust-node-js-are-awesome-a50d63411773",
      "date_published": "2018-03-27T21:50:20.148+00:00",
      "author": {
        "name": "Benjam√≠n Calder√≥n",
        "url": "https://itnext.io/@benjcal"
      },
      "tags": [
        "Web and Network Services",
        "Performance"
      ]
    },
    {
      "id": "fe44a6a6-04fd-42f7-a0ee-c816282bac5e",
      "title": "From cobalt.rs to gutenberg",
      "content_text": "I wish I could have the features of both tools, but for now I will use gutenberg over cobalt. A tiny migration and feature comparison story.",
      "url": "https://markentier.tech/posts/2018/03/from-cobalt-to-gutenberg/",
      "date_published": "2018-03-28T00:00:00+00:00",
      "author": {
        "name": "Christoph Grabo (@asaaki)",
        "url": "https://markentier.tech/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "d4574214-e1ca-4fe8-858b-b5c9c64046ab",
      "title": "Closures 101",
      "content_text": "Closures are an interesting CS concept and one that will frequently come up in interviews. I know I've been asked, and have asked, questions about closures for frontend (Javascript) positions numerous times. And in all honesty they're a difficult concept to define, especially when you're under the scrutiny of an interviewer. In this post I'd like to show how Rust leverages the concept of closures and why they might be used. But first, we need to discuss the concept of scope because it is so important for the full understanding of closures.",
      "url": "http://mttyng.com/closures-101/",
      "date_published": "2018-03-25T00:00:00+00:00",
      "author": {
        "name": "Matt",
        "url": "http://mttyng.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "9f012379-d71a-4c45-b9db-12c4871070e7",
      "title": "Touring a Fast, Safe, and Complete(ish) Web Service in Rust",
      "content_text": "For years now, I‚Äôve been having a crisis of faith in interpreted languages. They‚Äôre fast and fun to work in at small scale, but when you have a project that gets big, their attractive veneer quickly washes away. A big Ruby or JavaScript (just to name a few) program in production is a never ending game of whack-a-mock ‚Äì you fix one problem only to find a new one somewhere else. No matter how many tests you write, or how well-disciplined your team, any new development is sure to introduce a stream of bugs that will need to be shored up over the course of months or years.\n\nCentral to the problem are the edges. People will reliably do a good job of building and testing the happy paths, but as humans we‚Äôre terrible at considering the edge conditions, and it‚Äôs those edges and corners that cause trouble over the years that a program is in service.",
      "url": "https://brandur.org/rust-web",
      "date_published": "2018-03-27T14:45:57+00:00",
      "author": {
        "name": "Brandur Leach",
        "url": "https://brandur.org"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "cfc59513-ea0b-4d61-ac46-d7ea2e5bba8b",
      "title": "Designing a fast CLI join tool with rust",
      "content_text": "(or how rust helped me to match the speed of GNU join written by Mike Haertel)",
      "url": "https://milancio42.github.io/blog/2018-03-22-rjoin/",
      "date_published": "2018-03-22T09:27:20+01:00",
      "author": {
        "name": "Milan Opath",
        "url": "https://milancio42.github.io/blog/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "b33165a2-c60c-4431-872d-4528770e42c1",
      "title": "xray Update for March 26, 2018",
      "content_text": "Xray - An experimental next-generation Electron-based text editor. This update covers a revised roadmap, fast file finding, and thoughts on key bindings.",
      "url": "https://github.com/atom/xray/blob/master/docs/updates/2018_03_26.md",
      "date_published": "2018-03-26T00:00:00+00:00",
      "author": {
        "name": "Xray Team",
        "url": "https://github.com/atom/xray"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "eef1f270-fb75-475a-b10c-8e3813990362",
      "title": "Atomics ‚ò¢ and memory ordering",
      "content_text": "Taming multiple threads is a mess. Not only many things can happen all at once, but what you wrote in the code isn‚Äôt exactly what happens in the CPU. To gain some more performance, the compiler cheats if it thinks nobody is watching. It can reorder instructions or throw some of them out if they look useless. The same happens in the hardware. Furthermore, there isn‚Äôt just one RAM, but each memory location can live in different caches at each time and some of them are private to each CPU. It would not make do to publish all the local changes to one‚Äôs cache right away.",
      "url": "https://vorner.github.io/2018/03/25/Atomics.html",
      "date_published": "2018-03-25T00:00:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ad4ba620-3dae-4618-abc7-e245c97369d3",
      "title": "Refactoring some repetitive code to a Rust macro",
      "content_text": "I have started porting the code in librsvg that parses SVG's CSS properties from C to Rust. Many properties have symbolic values. StrokeLinejoin is the first property that I ported. First I had to write a little bunch of machinery to allow CSS properties to be kept in Rust-space instead of the main C structure that holds them (upcoming blog post about that). But for now, I just want to show how this boiled down to a macro after refactoring.",
      "url": "https://people.gnome.org/~federico/blog/refactoring-some-repetitive-code-to-a-macro.html",
      "date_published": "2018-03-23T11:01:30-06:00",
      "author": {
        "name": "Federico Mena Quintero",
        "url": "https://people.gnome.org/~federico/blog/index.html"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "348de5bf-0fa7-48d1-b112-20cd13cfd3f3",
      "title": "Writing A Driver in Rust Using Embedded-Hal Traits for the RN4870 BLE Module",
      "content_text": "This post will document my process and thoughts on writing a driver for a bluetooth module using Rust and the embedded-hal crate. The specific bluetooth device I will be using is the RN4870 BLE castellated module. It features a simple UART interface and handles most of the complexities of BLE itself, making it very easy to get a simple BLE connection up and running.",
      "url": "http://byronwasti.com/post/writing_a_ble_driver_in_rust/",
      "date_published": "2018-03-25T20:15:57+00:00",
      "author": {
        "name": "Byron Wasti",
        "url": "http://byronwasti.com/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "bf2c60f0-b2be-44c4-ba38-dce0f5b2e041",
      "title": "Mutating Rust: Under Cover",
      "content_text": "Any mutation testing tool worth its salt uses coverage to restrict the number of tests to run. mutagen is no exception, of course, so once we had a test runner, we wanted to extend it with coverage-based testing.",
      "url": "https://llogiq.github.io/2018/03/25/cover.html",
      "date_published": "2018-03-25T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a15836bc-6eaf-46c9-8fe8-70bd2fada61e",
      "title": "The tower of hanoi in Rust",
      "content_text": "The tower of hanoi algorithm is practice for recursive function.",
      "url": "https://masahiko-ofgp-notebook.blogspot.com.au/2018/03/the-tower-of-hanoi-by-rust-lang.html?m=1",
      "date_published": "2018-03-25T13:23:00+11:00",
      "author": {
        "name": "masahiko",
        "url": "https://masahiko-ofgp-notebook.blogspot.com.au/?m=1"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "e0dec9da-faee-4dcd-bfd2-8e14dda4f3f6",
      "title": "Compiling Rust + Windows + GTK step-by-step",
      "content_text": "In case you have tried to make a rust program with GUI that would work both on Linux and Windows, you probably may have faced some issues in some point (especially if you are a newcomer). Compiling in Linux is quite easy, but in Windows life gets a bit tricky.\n\nI've pulled together some info from here and there so that no-one else had to fight their way through fire and flames.",
      "url": "https://www.reddit.com/r/rust/comments/86kmhu/compiling_rust_windows_gtk_stepbystep/",
      "date_published": "2018-03-23T13:29:57+00:00",
      "author": {
        "name": "light3rn",
        "url": "https://www.reddit.com/user/light3rn"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "9e02b413-b1dd-42a3-a970-2d7b89354c0c",
      "title": "A look at Tokio: how this asynchronous event handler works (Russian)",
      "content_text": "–ò –¥–ª—è —á–µ–≥–æ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–µ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –±–ª–æ–∫—á–µ–π–Ω–æ–≤ Exonum Tokio ‚Äî —ç—Ç–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ç–µ–≤—ã—Ö –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ Rust,...",
      "url": "https://habrahabr.ru/company/bitfury/blog/351824/",
      "date_published": "2018-03-22T16:46:00+00:00",
      "author": {
        "name": "–ê–ª–∏–Ω–∞ –¢–µ—Å—Ç–æ–≤–∞",
        "url": "https://habrahabr.ru/company/bitfury/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "6cf2d39d-3ea9-4af4-b9c7-a368be610189",
      "title": "Python Idioms in Rust",
      "content_text": "I‚Äôve been going through a period of programming language wanderlust over the past couple months. Recently, I‚Äôve been quite interested in Rust. Coming from Python, I‚Äôve found a lot of Rust‚Äôs language features to be quite powerful.",
      "url": "http://benjamincongdon.me/blog/2018/03/23/Python-Idioms-in-Rust/",
      "date_published": "2018-03-23T12:23:22+00:00",
      "author": {
        "name": "Benjamin Congdon",
        "url": "http://benjamincongdon.me/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "93eaac73-c49e-4d21-8d11-f9ca7e40721c",
      "title": "From python to Go to Rust: an opinionated journey",
      "content_text": "When looking for a new backend language, I naturally went from Python to the new cool kid: Go. But after only one week of Go, I realised that Go was only half of a progress. Better suited to my needs than Python, but too far away from the developer experience I was enjoying when doing Elm in the frontend. So I gave Rust a try.",
      "url": "http://tech.allo-media.net/point/of/view/2018/03/22/from-python-to-go-to-rust.html",
      "date_published": "2018-03-22T09:00:00+01:00",
      "author": {
        "name": "Allo-Media",
        "url": "http://tech.allo-media.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c57dc18b-48b9-453e-b44a-46da4dce6d8e",
      "title": "Safe Peripheral Management",
      "content_text": "This post describes the recently merged PeripheralManager, which helps software ensure it always accesses hardware correctly, and cleans up after it‚Äôs done.",
      "url": "https://www.tockos.org/blog/2018/peripheral-management/",
      "date_published": "2018-03-21T00:00:00+00:00",
      "author": {
        "name": "Pat Pannuto",
        "url": "https://www.tockos.org/blog/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "afdcd322-eab4-4363-be76-cecaa050e867",
      "title": "Async/Await VI: 6 weeks of great progress",
      "content_text": "It‚Äôs hard to believe its been almost 6 weeks since the last post I made about async/await in Rust. So much has happened that these last several weeks have flown by. We‚Äôve made exceptionally good progress on solving the problem laid out in the first post of this series, and I want to document it all for everyone.\nFuture and the pinning API Last month I wrote an RFC called ‚ÄúStandard library API for immovable types‚Äù.",
      "url": "https://boats.gitlab.io/blog/post/2018-03-20-async-vi/",
      "date_published": "2018-03-20T00:00:00+00:00",
      "author": {
        "name": "boats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "73cbd270-d16d-4aec-b38d-9503961891bd",
      "title": "Presentation Manager written in Rust",
      "content_text": "A tool for serving and managing presentation slides.",
      "url": "https://medium.com/@mattdark/presentation-manager-written-in-rustlang-f36b73bb8dd2",
      "date_published": "2018-03-19T23:28:45.107+00:00",
      "author": {
        "name": "Mario Garc√≠a",
        "url": "https://medium.com/@mattdark"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "f860801f-7b99-4fe3-88cc-a6c00ca7d97a",
      "title": "HTS221 Humidity and Temperature Sensor",
      "content_text": "ST Micro‚Äôs HTS221 is a ‚Äúcapacitive digital sensor for relative humidity and temperature‚Äù that can be used over either I¬≤C or SPI. It is factory-calibrated, so there is no end-user calibration to incorporate into your application. The driver provides a simple, high-level API to configure the chip once on startup, then read the temperature and humidity.",
      "url": "https://medium.com/@pdanielgallagher/hts221-humidity-and-temperature-sensor-88056ea9e5fa",
      "date_published": "2018-03-20T04:16:48.453+00:00",
      "author": {
        "name": "Daniel Gallagher",
        "url": "https://medium.com/@pdanielgallagher"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "e32bb679-4afa-48d9-ab51-d589a590348e",
      "title": "Building a Restful CRUD API with Rust",
      "content_text": "Since my initial Node/Rust REST comparison, I‚Äôve wanted to follow up with a comprehensive guide for getting simple CRUD operations up and running in Rust.",
      "url": "https://medium.com/sean3z/building-a-restful-crud-api-with-rust-1867308352d8",
      "date_published": "2018-03-19T04:29:33.114+00:00",
      "author": {
        "name": "Sean Wragg",
        "url": "https://medium.com/@sean3z"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "8bd1d21c-79d1-4470-9d49-907c26ab0057",
      "title": "Type-directed metaprogramming in Rust",
      "content_text": "I explore how to use Rust compiler internals to metaprogram Rust using information from the typechecker, e.g. to automatically insert garbage-collection into Rust code, and discuss the benefits and drawbacks of this approach.",
      "url": "http://willcrichton.net/notes/type-directed-metaprogramming-in-rust/",
      "date_published": "2018-03-18T00:00:00+00:00",
      "author": {
        "name": "Will Crichton",
        "url": "http://willcrichton.net/notes/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "03cf26ef-4e0f-4124-91ec-064467299583",
      "title": "Putting bors on a PIP",
      "content_text": "We have a problem: the average queue of ready-to-test PRs to the main Rust repo has been steadily growing for a year. And at the same time, the likelihood of merge conflicts is also growing, as we include more submodules and Cargo dependencies that require updates to Cargo.lock.",
      "url": "http://aturon.github.io/2018/03/19/bors/",
      "date_published": "2018-03-19T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c5aa834d-c9d6-4e24-8abf-a9db4cb5cf29",
      "title": "Rust ‚Äî Intro and Installation in Ubuntu",
      "content_text": "Rust is a new age programming language that tries to fight our bad practices in coding. It is a Systems Programming Language, which runs‚Ä¶",
      "url": "https://medium.com/aackam/rust-intro-and-installation-in-ubuntu-bd4720a64f31",
      "date_published": "2018-03-19T22:36:52.175+00:00",
      "author": {
        "name": "VIJAYAN N",
        "url": "https://medium.com/@vjn"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "dae19f32-236c-4329-b26d-e6c47b2631d3",
      "title": "Multicasting in Rust",
      "content_text": "A brief post to help others multicast in Rust",
      "url": "https://bluejekyll.github.io/blog/rust/2018/03/18/multicasting-in-rust.html",
      "date_published": "2018-03-18T07:00:00+00:00",
      "author": {
        "name": "Benjamin Fry",
        "url": "https://bluejekyll.github.io/blog/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "908c4bee-bf00-4e80-8136-9282eb8de6f6",
      "title": "Rust Lifetimes or: How I Learned to Stop Free-ing and Love the Borrow",
      "content_text": "To me one of the initial shocks of learning Rust was figuring out lifetimes. As a frontend-by-day developer I don't come face-to-face with the 'Double free' and 'Use after free' problems all that often. Actually, it could be easily argued that my backend-brethren don't really either or, for that matter, anyone who's typically dealing with a garbage collected language. I'm looking over at you JS, Java, and Ruby devs. I'd bet most neckbea.. *cough, excuse me, C developers are comfortable with these issues but alas, I am not. As such, lifetimes were kinda difficult to wrap my head around but I think I get them a little better now so let me try to explain.",
      "url": "http://mttyng.com/rust-lifetimes-or-how-i-learned-to-stop-free-ing-and-love-the-borrow/",
      "date_published": "2018-03-09T00:00:00+00:00",
      "author": {
        "name": "Matt",
        "url": "http://mttyng.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "655ac748-e1e9-4fa4-b12a-2dc7c2e88fa7",
      "title": "Building a fast Electron app with Rust",
      "content_text": "When I built Finda, I wanted it to be fast ‚Äî specifically, to respond to all user input within 16 milliseconds.\n\nGiven this goal, you might be surprised to learn that Finda is built with Electron, a framework that‚Äôs often decried for being the opposite of fast.",
      "url": "https://keminglabs.com/blog/building-a-fast-electron-app-with-rust/",
      "date_published": "2018-03-18T00:00:00+11:00",
      "author": {
        "name": "Kevin J. Lynagh",
        "url": "https://keminglabs.com/blog/"
      },
      "tags": [
        "Tools and Applications",
        "Performance"
      ]
    },
    {
      "id": "1fe95cfd-488a-41a5-adca-a44d8f79c679",
      "title": "What's a where clause?",
      "content_text": "I've been trying to get a hang of some of the more advanced, and weird, concepts of Rust. With any new language it's a little difficult to know where to begin. How do you throw yourself into the deep-end of something without knowing where the deep-end is?",
      "url": "http://mttyng.com/whats-a-where-clause/",
      "date_published": "2018-02-20T00:00:00+00:00",
      "author": {
        "name": "Matt",
        "url": "http://mttyng.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "465a729e-a243-4cd7-bee8-e0c7d5d09fbd",
      "title": "Number Theory using Rust's type system",
      "content_text": "Rust does not have dependent types, or GADTs like Haskell, but with a few tricks, we can use Rust's type system to emulate an Idris-like number system.",
      "url": "https://shingtaklam1324.github.io/number-theory-rust/",
      "date_published": "2018-03-18T00:00:00+11:00",
      "author": {
        "name": "shingtaklam1324",
        "url": "https://shingtaklam1324.github.io/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "17b6e878-388f-40c5-93a0-cf3da64a1078",
      "title": "stencil; abstract stencil calculation",
      "content_text": "I am developing a library for stencil calculation in Rust.",
      "url": "https://dev.to/termoshtt/stencil-abstract-stencil-calculation-i2m",
      "date_published": "2018-03-17T00:00:00+00:00",
      "author": {
        "name": "termoshtt",
        "url": "https://dev.to/termoshtt"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "f1b7c59f-fff8-4000-ac97-2be742b86760",
      "title": "Achieving memory safety without compromise",
      "content_text": "A new generation of safe programming languages is leaving garbage collectors and runtimes behind, delivering memory safety and control.",
      "url": "https://www.embedded.com/electronics-blogs/say-what-/4460422/Achieving-memory-safety-without-compromise",
      "date_published": "2018-03-13T16:32:00+00:00",
      "author": {
        "name": "Adam Foltzer",
        "url": "https://www.embedded.com/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "44e96573-f8b3-4577-8a76-1cbc8a65ec8b",
      "title": "Building a DNS server in Rust",
      "content_text": "With the combined goal of gaining a deep understanding of DNS, of doing something interesting with Rust, and of scratching some of my own itches, I originally set out to implement my own DNS server. This document is not a truthful chronicle of that journey, but rather an idealized version of it, without all the detours I ended up taking. We'll gradually implement a full DNS server, starting from first principles.",
      "url": "https://github.com/EmilHernvall/dnsguide",
      "date_published": "2018-03-16T00:00:00+00:00",
      "author": {
        "name": "Emil Hernvall",
        "url": "https://github.com/EmilHernvall"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "f5ba053a-1bbb-465d-a430-55bd0a1d357a",
      "title": "How Rust Implements Tagged Unions",
      "content_text": "The Rust compiler implements tagged unions, which prevent you from crashing your program by initializing a union with one variant and accessing it with another. Rust uses enum to improve on both C enums and C unions at the same time.",
      "url": "http://patshaughnessy.net/2018/3/15/how-rust-implements-tagged-unions",
      "date_published": "2018-03-15T03:00:00+00:00",
      "author": {
        "name": "Pat Shaughnessy",
        "url": "http://patshaughnessy.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "81e14040-a499-4802-9d1b-c58deeb2be79",
      "title": "Deciding if two types are equal",
      "content_text": "mutagen until recently suffered a bug that rendered both the return input and the interchange arguments mutation inapplicable.\n\nTo explain, the former mutation compares each input type with the return type and allows code to return inputs of the same type, if any, while the latter compares input arguments‚Äô types and exchanges two equally-typed inputs.",
      "url": "https://llogiq.github.io/2018/03/15/types.html",
      "date_published": "2018-03-15T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a4faa45e-f24e-4ce9-822c-5c4623919e17",
      "title": "Tock 1.0 Kernel Released",
      "content_text": "We silently tag our first rolling release of the Tock kernel in February. If you‚Äôre building applications with Tock or porting to a new board, and want to be immune from updating your code everyday, you can work from that tag. We‚Äôll also upload binary kernel images for the supported board sometime soon.",
      "url": "https://www.tockos.org/blog/2018/talking-tock-35/",
      "date_published": "2018-03-06T00:00:00+00:00",
      "author": {
        "name": "Amit Levy",
        "url": "https://www.tockos.org/blog/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "eabc9692-30cf-4511-89f4-9068b46aadd8",
      "title": "A Comparison Between Rust and Erlang",
      "content_text": "This article will focus on a comparison between Erlang and Rust, detailing their similarities and differences. It may be interesting to both Erlang developers looking into Rust and Rust developers looking into Erlang. A final section will detail more about each of the language capabilities and shortcomings and argue for the possibility of leveraging both languages' strengths in the same project.",
      "url": "https://www.infoq.com/articles/rust-erlang-comparison",
      "date_published": "2018-03-13T00:00:00+00:00",
      "author": {
        "name": " Krishna Kumar Thokala",
        "url": "https://www.infoq.com/profile/Krishna-Kumar-Thokala"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "24afdde0-ef13-4e26-b39e-b2f9d52ab901",
      "title": "How to use external crates with macros in Rust",
      "content_text": "A simple approach to use external crates with our macros in Rust.",
      "url": "https://medium.com/@kimond/how-to-use-external-crates-with-our-macros-in-rust-6dfe025351e0",
      "date_published": "2018-03-14T12:45:30.700+00:00",
      "author": {
        "name": "Kim Desrosiers",
        "url": "https://medium.com/@kimond"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "39f186f6-b177-43e6-9b4c-7ffe689926e7",
      "title": "Parc3l: Combining Three.js, Rust, and WebAssembly!",
      "content_text": "WebAssembly has been interesting me lately, specifically the prospect of doing arithmetically-intensive operations with it, not unlike the fantastic physics engine Emscripten port Ammo.js. Compiling something like that is out of the scope of this little post (but should be getting easier!), and I‚Äôve left some links at the bottom so you can clear more about WebAssembly if you‚Äôre interested.",
      "url": "https://medium.com/@cwervo/parc3l-combining-three-js-rust-and-webassembly-c1e643ef7681",
      "date_published": "2018-03-12T14:34:23.064+00:00",
      "author": {
        "name": "Andres Cuervo",
        "url": "https://medium.com/@cwervo"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "bf12d6fd-0aea-4d74-b3a7-02a538d210d3",
      "title": "Making WebAssembly better for Rust & for all languages",
      "content_text": "To be a useful as a web language, Rust needs to work well with the JavaScript ecosystem. We have some work to do to get there, and fortunately that work ...",
      "url": "https://hacks.mozilla.org/2018/03/making-webassembly-better-for-rust-for-all-languages/",
      "date_published": "2018-03-14T15:02:52+00:00",
      "author": {
        "name": "Lin Clark",
        "url": "http://code-cartoons.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "249e8bc3-a836-4b71-89b6-8d7c4d1b0977",
      "title": "Weekly Driver: Using the MCP3425 ADC from Rust",
      "content_text": "Announing the MCP3425 Rust driver.",
      "url": "https://blog.dbrgn.ch/2018/3/13/rust-mcp3425-driver/",
      "date_published": "2018-03-13T00:00:00+01:00",
      "author": {
        "name": "Danilo Bargen",
        "url": "https://blog.dbrgn.ch/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "962abf61-6061-4e8d-90b1-1d3ba90d5e1d",
      "title": "mutagen: Pattern Boldness",
      "content_text": "At the moment, mutagen only considers top-level idents in function arguments (e.g.foo(x: X, y: Y)), but function arguments are actually patterns, so we could have foo((x, y): (X, Y)) or bar(Bar { bla, bazz } : Bar). For now, this means we have no type information for either of those examples.",
      "url": "http://llogiq.github.io/2018/03/13/patterns.html",
      "date_published": "2018-03-13T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a48d8156-7f0f-4731-a17b-e36678b86f5f",
      "title": "Weekly driver 4: ENC28J60, Ethernet for your microcontroller",
      "content_text": "This week I‚Äôm releasing a driver for the ENC28J60, an Ethernet controller with SPI interface. This IC lets you connect your microcontroller, if it has a SPI interface, to a Local Area Network or, with more work, to the internet. Apart from the IC you need a RJ45 connector and a few other components so I‚Äôm using this module which has the ENC28J60 and all the required components on a single board.",
      "url": "http://blog.japaric.io/wd-4-enc28j60/",
      "date_published": "2018-03-13T04:32:18+01:00",
      "author": {
        "name": "Jorge Aparicio",
        "url": "http://blog.japaric.io/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "85524257-1035-4e25-b20b-57737d314b55",
      "title": "Roguelike Tutorial in Rust + tcod",
      "content_text": "Hello! This tutorial will show you how to write a roguelike in the Rust programming language and the libtcod library.",
      "url": "https://tomassedovic.github.io/roguelike-tutorial/",
      "date_published": "2018-03-13T18:54:54+02:00",
      "author": {
        "name": "Tomas Sedovic",
        "url": "https://tomassedovic.github.io/roguelike-tutorial/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "4ed8ee1b-6f71-4ac5-b7e5-142509562231",
      "title": "Rust's 2018 Roadmap",
      "content_text": "Each year the Rust community comes together to set out a roadmap. This year, in addition to the survey, we put out a call for blog posts in December, which resulted in 100 blog posts written over the span of a few weeks. The end result is the recently-merged 2018 roadmap RFC.",
      "url": "https://blog.rust-lang.org/2018/03/12/roadmap.html",
      "date_published": "2018-03-12T00:00:00+00:00",
      "author": {
        "name": "The Rust Core Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4d94c5ba-199d-44c2-9148-7a6bbff699d0",
      "title": "Crashing a Rust Hyper server with a Denial of Service attack",
      "content_text": "I‚Äôm writing a reverse proxy in Rust using Hyper and I want to measure performance a bit to know if I‚Äôm doing something terribly wrong. By doing that I discovered a Denial of Service vulnerability in Hyper when IO errors are not properly handled. Note that a workaround has been released in the meantime in Hyper 0.11.20, more background info can be found in this Hyper issue.",
      "url": "https://klausi.github.io/rustnish/2018/03/11/crashing-a-rust-hyper-server-with-a-denial-of-service-attack.html",
      "date_published": "2018-03-11T00:00:00+00:00",
      "author": {
        "name": "Klaus Purer",
        "url": "https://klausi.github.io/rustnish/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "90d39fbf-c75d-4943-9069-4b65d11b1be9",
      "title": "Should You Learn Rust?",
      "content_text": "Oftentimes, I see a variant of this question posted or asked somewhere. In general, most of the times I think the answer is ‚ÄûYes‚Äú, but maybe for reasons other than you‚Äôd think at first.",
      "url": "https://vorner.github.io/2018/03/11/Should-you-learn-rust.html",
      "date_published": "2018-03-11T00:00:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e03aa0e5-bb05-48f0-a4a4-0796d14d1115",
      "title": "Writing a Simple IPFS Crawler",
      "content_text": "IPFS is a peer-to-peer protocol that allows you to access and publish content in a decentralized fashion. It uses hashes to refer to files. Short of someone posting hashes on a website, discoverability of content is pretty low. In this article, we&rsquo;re going to write a very simple crawler for IPFS.\nIt&rsquo;s challenging to have a traditional search engine in IPFS because content rarely links to each other. But there is another way than just blindly following links like a traditional crawler.",
      "url": "https://gkbrk.com/2018/03/writing-a-simple-ipfs-crawler/",
      "date_published": "2018-03-12T00:00:00+00:00",
      "author": {
        "name": "G√∂kberk Yaltƒ±raklƒ±",
        "url": "https://gkbrk.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "9ecf3a00-a806-4914-a3e2-fd360f7199ed",
      "title": "Rust Tutorial",
      "content_text": "The aim of this tutorial is to take you to a place where you can read and write enough Rust to fully appreciate the excellent learning resources available online, in particular The Book. It‚Äôs an opportunity to try before you buy, and get enough feeling for the power of the language to want to go deeper.",
      "url": "https://slashtutorial.com/rust/",
      "date_published": "2018-03-12T16:23:55+00:00",
      "author": {
        "name": "Slash Tutorial",
        "url": "https://slashtutorial.com/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "bd4b8e12-dd4d-4bf8-b553-f5f912ec4e87",
      "title": "The Union of Parallel Universes",
      "content_text": "Rustdoc has a pretty powerful feature that feels pretty unknown. It doesn‚Äôt help that it‚Äôs currently restricted by a nightly feature gate, but it‚Äôs still cool enough that I want to talk about it.",
      "url": "https://quietmisdreavus.net/code/2018/03/09/the-union-of-parallel-universes/",
      "date_published": "2018-03-09T14:30:00-06:00",
      "author": {
        "name": "QuietMisdreavus",
        "url": "https://quietmisdreavus.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "db7ea4c5-14ae-4a9d-9bf4-a314c20225f7",
      "title": "Exploring Function Overloading",
      "content_text": "Overloading is the ability to create multiple functions of the same name with different implementations.\n\nRust has no traditional overloading, you cannot define two methods with the same name. The compiler will complain that you have a duplicate definition regardless of the different argument types.",
      "url": "http://casualhacks.net/blog/2018-03-10/exploring-function-overloading/",
      "date_published": "2018-03-10T00:00:00+09:00",
      "author": {
        "name": "Casper",
        "url": "http://casualhacks.net/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "f6bf64c8-3a31-4614-ba91-f5c16a0986b5",
      "title": "Writing an OS in Pure Rust",
      "content_text": "Over the past six months we've been working on a second edition of this blog. Our goals for this new version are numerous and we are still not done yet, but today we reached a major milestone: It is now possible to build the OS natively on Windows, macOS, and Linux without any non-Rust dependendencies.",
      "url": "https://os.phil-opp.com/news/2018-03-09-pure-rust/",
      "date_published": "2018-03-09T00:00:00+00:00",
      "author": {
        "name": "Philipp Oppermann",
        "url": "https://os.phil-opp.com/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "44f7fa8d-b23d-47e7-b3dd-f227e8317d49",
      "title": "A Tiny `ls` Clone Written in Rust",
      "content_text": "In my series of useless Unix tools rewritten in Rust, today I'm going to be covering one of my all-time favorites: ls.",
      "url": "https://matthias-endler.de/2018/ls/",
      "date_published": "2018-03-01T00:00:00+00:00",
      "author": {
        "name": "Matthias Endler",
        "url": "https://matthias-endler.de/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "0d2f8636-6f6c-42f3-8159-beac5a856009",
      "title": "Redefining Failure",
      "content_text": "I recently got the chance to redo the error handling in two different crates I help maintain. For liquid, I decided to write the error types by hand rather than use something like error-chain. In the case of assert_cli, I decided to finally give failure a try.",
      "url": "https://epage.github.io/blog/2018/03/redefining-failure/",
      "date_published": "2018-03-09T03:08:23+00:00",
      "author": {
        "name": "Ed Page",
        "url": "https://epage.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "fd8646cf-2689-4bd8-b065-4708388250d2",
      "title": "Announcing the Tokio runtime",
      "content_text": "I‚Äôm happy to announce a new release of Tokio. This release includes the first iteration of the Tokio Runtime.",
      "url": "https://tokio.rs/blog/2018-03-tokio-runtime/",
      "date_published": "2018-03-08T00:00:00+00:00",
      "author": {
        "name": "Carl Lerche",
        "url": "https://tokio.rs/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "64fe2d3c-c0cb-41a2-8faf-08d19e59c439",
      "title": "Get started with the Rust programming language",
      "content_text": "A recent Stack Overflow survey found that almost 80% of respondents loved using or wanted to develop with the Rust language. That's an incredible number! So, what's so good about Rust? This article explores the high points of this C-like language and illustrates why it should be next on your list of languages to learn.",
      "url": "https://www.ibm.com/developerworks/opensource/library/os-developers-know-rust/index.html?ca=drs",
      "date_published": "2018-03-08T00:00:00+00:00",
      "author": {
        "name": "M. Tim Jones",
        "url": "https://www.ibm.com/developerworks/opensource/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "c35de4ff-df45-4774-998f-f56ddb57b5d2",
      "title": "Building and Deploying Rust with VSTS",
      "content_text": "Since I started at Microsoft about 6 months ago, I had to catch up on their (our) tech: Azure, .NET, Visual Studio. Yet as an avid GitHub user I overlooked one thing completely: Visual Studio Team Services! Turns out it‚Äôs quite the hidden gem and after a colleague showed me some of its power, I had to look into it more deeply. Turns out it‚Äôs an easy and free resource for any project. Can it help your project? Yes! How? Find out below üòä",
      "url": "https://blog.x5ff.xyz/blog/rust-ci-cd-vsts/",
      "date_published": "2018-03-02T00:00:00+00:00",
      "author": {
        "name": "Claus",
        "url": "https://blog.x5ff.xyz/blog"
      },
      "tags": [
        "DevOps and Deployment"
      ]
    },
    {
      "id": "dd5790e1-ff4e-4f61-9a8b-05ea774a2e89",
      "title": "Writing servers with Tokio",
      "content_text": "I‚Äôve been writing a small toy project with Tokio in my spare time‚Äôs spare time. I‚Äôll write more about it at a later date. What I‚Äôve found writing it, though, is that there is a specific pattern to writing servers, both UDP and TCP (and presumably others) in Tokio, and it‚Äôs not super obvious at first glance. So here it is.",
      "url": "https://blog.passcod.name/2018/mar/07/writing-servers-with-tokio",
      "date_published": "2018-03-07T09:35:30+00:00",
      "author": {
        "name": "F√©lix Saparelli",
        "url": "https://blog.passcod.name/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "8da41ef1-4c51-4269-bec3-fc377a0f387f",
      "title": "Coping with Mutable State in Multiple Threads with Rust",
      "content_text": "One of the value propositions most frequently lauded by Rust developers is its freedom from data races. The compiler will literally not allow you to build code that could ever produce a situation where two threads can mutate the same data.",
      "url": "https://medium.com/@KevinHoffman/coping-with-mutable-state-in-multiple-threads-with-rust-9059c83b6c01",
      "date_published": "2018-03-05T17:42:58.844+00:00",
      "author": {
        "name": "Kevin Hoffman",
        "url": "https://medium.com/@KevinHoffman"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "79704e4b-5e9f-4366-84a8-53d5a3431e2f",
      "title": "Getting A Handle On Things",
      "content_text": "Today we will take a very simple intrusive linked list written in Rust and make it safe. Kind of, anyway.\n\nBefore we start making something safe we need an unsafe thing to make safe. Let‚Äôs not pretend that what we are doing here is the least bit useful, let us instead do it just for the fun of it. (What we are doing actually is useful, the explanation of which this margin is too narrow to contain.)",
      "url": "https://eno.space/blog/2018/03/Getting-a-handle-on-things",
      "date_published": "2018-03-03T00:00:00+01:00",
      "author": {
        "name": "@u0060",
        "url": "https://eno.space/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "bd7d2caa-818d-4950-9eca-72588b038bed",
      "title": "Getting started with Rust: Reference and Lifetime",
      "content_text": "Hello everyone! You were waiting for it, and now you are going to get it! Ladies and gentlemen, today we are going to talk about reference and lifetime!",
      "url": "https://www.mathieu-nivoliez.com/posts/2018-03-05-getting-started-with-rust-reference-and-lifetime.html",
      "date_published": "2018-03-05T00:00:00+00:00",
      "author": {
        "name": "Mathieu Nivoliez",
        "url": "https://www.mathieu-nivoliez.com/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "5b0beffe-60dc-4ce3-b137-738fb51fd570",
      "title": "Getting Rusty with Vim",
      "content_text": " After dabbing in Go and Crystal, I figured I'd give Rust a try. Of course I used Vim along the way. Here are some notes I compiled after my first session.",
      "url": "https://ddrscott.github.io/blog/2018/getting-rusty-with-vim/",
      "date_published": "2018-03-04T06:30:00-06:00",
      "author": {
        "name": "Scott Pierce",
        "url": "https://ddrscott.github.io/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "0c9a85c5-9017-4922-b07a-050f36b8db84",
      "title": "Compiling Cargo crates natively with Meson",
      "content_text": "Recently we have been having discussions about how Rust and Meson should work together, especially for mixed language projects. One thing which multiple people have told me (over a time span of several years, actually) is that Rust is Special in that everyone uses crates for everything. Thus there is no point in having any sort of Rust support, the only true way is to blindly call Cargo and have it do everything exactly the way it wants to.\n\nThis seems like a reasonable recommendation so I did what every reasonable person would do and accepted this as is.\n\nBut then curiosity takes hold of you and you start to wonder. Is that really the case?",
      "url": "https://nibblestew.blogspot.com.au/2018/03/compiling-cargo-crates-natively-with.html",
      "date_published": "2018-03-04T05:35:00-08:00",
      "author": {
        "name": "Jussi",
        "url": "https://nibblestew.blogspot.com.au/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "776dd5f1-c6d0-48da-8e0a-6fcae00fb923",
      "title": "Writing a Microservice in Rust",
      "content_text": "Let me begin this article on Writing a Microservice in Rust by talking about C++. I‚Äôve been a reasonably active member of the C++ community for quite a while now, attending and contributing talks to conferences, following the development and evangelism of the language‚Äôs more modern features and of course writing lots of it. C++ is a language that gives its users very fine-grained control over all aspects of the program they are writing, at the cost of a steep learning curve and a large body of knowledge required to write effective C++. However, C++ is also a very old language, conceived by Bjarne Stroustrup in 1985, and thus caries a lot of technical debt even into modern standards.",
      "url": "http://www.goldsborough.me/rust/web/tutorial/2018/01/20/17-01-11-writing_a_microservice_in_rust/",
      "date_published": "2018-01-20T00:00:00+00:00",
      "author": {
        "name": "Peter Goldsborough",
        "url": "http://www.goldsborough.me/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "85925a6b-30c1-4c0f-8caf-b6ccd9e3e19c",
      "title": "Encheapening Cernan Internal Metrics",
      "content_text": "In the new 0.7.x series of cernan we stumbled on a neat, cheap approach for making internal metrics available inside a rust codebase, an approach that has legs in other projects, I'd say. This is going to be a quick note describing what cernan is, what we were doing before and how our current approach works.",
      "url": "http://blog.troutwine.us/2017/08/31/encheapening-cernan-internal-metrics/",
      "date_published": "2018-03-04T00:00:00+00:00",
      "author": {
        "name": "Brian L. Troutwine",
        "url": "http://blog.troutwine.us/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c59a9688-62e5-4919-8687-e5ff82c3c5a3",
      "title": "Why Rust Has Macros",
      "content_text": "When I recently told a coworker that Rust has macros, his first reaction was that this was bad. Previously I would have had the same reaction, but a part of what learning Rust has taught me is that macros don‚Äôt need to be bad. This post exists to help explain why that is, by diving into what problems macros solve, with a brief look at their downsides as well. In other words, this post is not a technical deep dive on how macros work, but focuses on the use cases for macros, and doesn‚Äôt require much knowledge about Rust to follow.",
      "url": "https://kasma1990.gitlab.io/2018/03/04/why-rust-has-macros/",
      "date_published": "2018-03-04T00:00:00+00:00",
      "author": {
        "name": "Kasper Andersen",
        "url": "https://kasma1990.gitlab.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "95bd2ff7-1a99-4092-931a-b17d782282d3",
      "title": "Serializing awkward data with serde",
      "content_text": "Recently I‚Äôve been writing Rust code to work with a third-party data source in TOML format. In other languages I‚Äôd just load the data with some standard TOML library and have my program rummage through it, but I‚Äôve been hearing lovely things about the Rust serialization library serde, so I figured I‚Äôd try it out.",
      "url": "http://zork.net/~st/jottings/Serializing_awkward_data_with_serde.html",
      "date_published": "2018-03-04T07:43:09+00:00",
      "author": {
        "name": "Screwtape",
        "url": "http://zork.net/~st/jottings/all_pages.html"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "39d1ac9b-501b-46c3-b2e6-68f2d4aabe1d",
      "title": "Making a Brainf*ck to C Compiler in Rust",
      "content_text": "Let‚Äôs make a tokenizer and code generator to understand the basics behind tiny compilers.",
      "url": "https://medium.com/@CanHasCommunism/making-a-brainf-ck-to-c-compiler-in-rust-10f0c01a282d",
      "date_published": "2018-03-03T18:13:20.377+00:00",
      "author": {
        "name": "Aesl",
        "url": "https://medium.com/@CanHasCommunism"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ae89c8c8-fd8f-4432-9b21-1a2651142869",
      "title": "UniverCity - February Change log",
      "content_text": "UniverCity is a university management game being programmed in the Rust programming language. This month was spent mostly on the business side of things, including going through the steam partner process.",
      "url": "https://thinkof.name/2018/02/28/february-change-log.html",
      "date_published": "2018-02-28T00:00:00+00:00",
      "author": {
        "name": "Matthew Collins",
        "url": "https://thinkof.name/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "2f386775-d0a5-474b-a9de-c14af7453c40",
      "title": "Opportunistic Mutations",
      "content_text": "As you may know, my current mutagen project deals with mutation testing in Rust. However, as I remarked, Rust‚Äôs famed flexibility leaves us little room to do mutations while keeping the type checker happy. For example, other mutation testing frameworks can mutate x + y to x - y.\n\nThis is an interesting mutation, because it‚Äôs so easy to do in languages like Java, which have full type information available at the bytecode level and so hard to do in Rust, because the std::ops traits make everything so hecking flexible.",
      "url": "https://llogiq.github.io/2018/03/03/opportune.html",
      "date_published": "2018-03-03T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "407d3ba2-d0af-4121-b13a-468b1f0f66cd",
      "title": "Stopping a Rust worker",
      "content_text": "This is a small post about a specific pattern for cancellation in the Rust programming language. The pattern is simple and elegant, but it‚Äôs rather difficult to come up with it by yourself.",
      "url": "https://matklad.github.io/2018/03/02/stopping-a-rust-worker.html",
      "date_published": "2018-03-02T20:11:50+00:00",
      "author": {
        "name": "Aleksey Kladov",
        "url": "https://matklad.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4c17c0f4-8148-4408-a54f-733e20c89189",
      "title": "Rust for Java Devs ‚Äì Structs",
      "content_text": "Next up in Rust for Java Devs we have structs. They are used to hold data within a logical unit that can be passed to other functions or execute their own methods on the values that they store. Now this sounds very familiar‚Ä¶ Java objects do the same thing. For example if you took a POJO (Plain Old Java Object) you also pass it to other methods or execute the object‚Äôs own methods. In this nature they are alike, but they do have their differences. In this post we will look into creating structs, retrieving their values, defining their own methods and how to execute them.",
      "url": "https://lankydanblog.com/2018/03/01/rust-for-java-devs-structs/",
      "date_published": "2018-03-01T20:03:54+00:00",
      "author": {
        "name": "Dan Newton",
        "url": "https://lankydanblog.com/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "3907940b-eb06-4f2a-a3ff-6df4ae5ac9ca",
      "title": "Rust on the STMicro Nucleo",
      "content_text": "For the embedded portion of my project, I had two decisions to make: which processors and chips to use, and which language to write the firmware in. Since this personal project is about learning new skills, I decided to use Rust instead of C. I opted to use STMicro‚Äôs Nucleo boards, since their ecosystem has shields that do all of the things I would like (WiFi, BLE, and environmental sensing), and there was also a great Rust tutorial for a similar board. However, since I‚Äôve never really done any embedded development, I decided to start with the old standby: copying code off the internet!",
      "url": "https://medium.com/@pdanielgallagher/rust-on-the-stmicro-nucleo-7a66b97be549",
      "date_published": "2018-03-01T05:50:42.487+00:00",
      "author": {
        "name": "Daniel Gallagher",
        "url": "https://medium.com/@pdanielgallagher"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "ab076ead-649f-47ff-8fa2-a7c243ba3dca",
      "title": "Docker Multi-Stage Build",
      "content_text": "On June 13, 2017 took place the Paris Container Day. They unveiled a new docker feature: multi-stage build. That's the subject of this article.",
      "url": "https://blog.jawg.io/docker-multi-stage-build/",
      "date_published": "2018-03-01T14:00:00+00:00",
      "author": {
        "name": "Jones Magloire",
        "url": "http://blog.jawg.io/"
      },
      "tags": [
        "Language",
        "DevOps and Deployment"
      ]
    },
    {
      "id": "257617e2-c1fe-44c7-9cb9-7c07495b96ec",
      "title": "Object Shadowing for Serialization of Complex Types",
      "content_text": "Presently, I‚Äôm busy writing a capture the flag (CTF) scoreboard, it requires rather complex structures and relationships with other internal objects. Being a security event, I‚Äôd also like to maintain explicit control of user data. While serialization in Rust has come a significant way, leveraging auto-generation presents some issues.",
      "url": "https://commiebstrd.github.io/rustlang/serde/json/2018/03/01/object-shadowing.html",
      "date_published": "2018-03-01T05:00:00+00:00",
      "author": {
        "name": "Spenser Reinhardt",
        "url": "https://commiebstrd.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ca98f7f9-8927-48e9-8028-15e81f20f8a6",
      "title": "Add examples to your Rust¬†libraries",
      "content_text": "When you‚Äôre writing a library for other programs to depend on, it is paramount to think how the developers are going to use it in their code.\n\nThe best way to ensure they have a pleasant experience is to put yourself in their shoes. Forget the internal details of your package, and consider only its outward interface. Then, come up with a realistic use case and just implement it.\n\nIn other words, you should create complete, end-to-end, and (somewhat) usable example applications.",
      "url": "http://xion.io/post/code/rust-examples.html",
      "date_published": "2018-02-28T08:37:00+01:00",
      "author": {
        "name": "Karol Kuczmarski",
        "url": "http://xion.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d377bc0d-a127-456d-81fa-926fe634de0f",
      "title": "Fast Search Through Metric Spaces with Rust and BK Trees",
      "content_text": "In the previous post, pHash helped us to summarize our photo album. Now it‚Äôs time to employ BK-trees and efficiently search through the metric space of perceptual hashes. Let‚Äôs roll up the sleeves; more Rust awaits!",
      "url": "https://www.innoq.com/en/blog/looks-the-same-to-me/",
      "date_published": "2018-03-01T00:00:00+01:00",
      "author": {
        "name": "Jan Stƒôpie≈Ñ",
        "url": "https://www.innoq.com/en/staff/jans/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "0ebef41d-c7b1-424a-a120-ebf1098bbe38",
      "title": "Three Algorithm Optimizations Outside [Place], [Other place]",
      "content_text": "Recently, I came across an ad for a job that had a precondition for application: it required you to first solve a ‚ú®programming challenge‚ú®:",
      "url": "https://medium.com/@urschrei/three-algorithm-optimizations-outside-place-other-place-294de5a68f27",
      "date_published": "2018-02-28T17:12:42.361+00:00",
      "author": {
        "name": "Steph",
        "url": "https://medium.com/@urschrei"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "d001ce02-fbfb-4a08-8389-0f713b09bf72",
      "title": "My Rust Dockerfile",
      "content_text": "Lets deploy small docker images for Rust",
      "url": "https://blog.sedrik.se/posts/my-docker-setup-for-rust/",
      "date_published": "2018-02-26T00:00:00+00:00",
      "author": {
        "name": "Fredrik Park",
        "url": "https://blog.sedrik.se/"
      },
      "tags": [
        "Language",
        "DevOps and Deployment"
      ]
    },
    {
      "id": "067e3ce9-6e69-499c-93f8-a9c4e0f99ce9",
      "title": "Futures 0.2 is nearing release",
      "content_text": "On behalf of the futures-rs team, I‚Äôm very happy to announce that the master branch is now at 0.2: we have a release candidate! Barring any surprises, we expect to publish to crates.io in the next week or two.\n\nYou can peruse the 0.2 API via the hosted crate docs, or dive right in to the master branch. Note that Tokio is not currently compatible with Futures 0.2; see below for more detail.",
      "url": "http://aturon.github.io/2018/02/27/futures-0-2-RC/",
      "date_published": "2018-02-27T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "75898724-f900-46ae-877b-36d87b440ac1",
      "title": "Let's write an embedded-hal-driver",
      "content_text": "Mid January japaric started \"The weekly driver initiative\" with the goal to kick-start releases of platform agnostic embedded-hal based driver crates. In this post we'll build an embedded-hal-driver for the AT24C32-EEPROM chip.",
      "url": "http://zuendmasse.de/blog/2018/02/23/lets-write-an-embedded-hal-driver/",
      "date_published": "2018-02-25T00:00:00+00:00",
      "author": {
        "name": "Sebastian W√∂tzel",
        "url": "http://zuendmasse.de/blog/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "cec6c9fd-a92b-4f5a-8d9b-9b84c263c48f",
      "title": "Writing a doubly linked list in Rust is easy",
      "content_text": "This is a response to the recently submitted blog post titled Why Writing a Linked List in (safe) Rust is So Damned Hard. The post on Reddit was even more dramatic: Why Writing a Linked List in Rust is Basically Impossible.\n\nI see exaggarated claims like these very often - and strongly disagree. Writing a doubly linked list in Rust is not hard - in fact, it's fairly easy! The best strategy, in my opinion, is creating a vector for allocating nodes and using indices instead of pointers. This strategy is often overlooked, getting a 'honorauble mention' at best.",
      "url": "https://www.reddit.com/r/rust/comments/7zsy72/writing_a_doubly_linked_list_in_rust_is_easy/",
      "date_published": "2018-02-24T00:35:43+00:00",
      "author": {
        "name": "/u/stjepang",
        "url": "https://www.reddit.com/user/stjepang"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "0cb6b35f-0d4f-4e71-bcae-66d4cd115d41",
      "title": "Discovery: Discover the world of microcontrollers through Rust! - 2018 edition",
      "content_text": "This is an mdbook I wrote more than a year ago for a workshop and it's an introductory course to embedded systems that uses Rust as the teaching language. I just updated the starter code to use the latest versions of everything so it's now easier to jump from the book to use the latest developments in the Cortex-M ecosystem; there's no new content, though -- the exercises remain unchanged in terms of goals; just the code has changed.",
      "url": "https://www.reddit.com/r/rust/comments/80doqg/discovery_discover_the_world_of_microcontrollers/",
      "date_published": "2018-02-26T15:12:44+00:00",
      "author": {
        "name": "Jorge Aparicio",
        "url": "http://blog.japaric.io/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "5e572868-98d0-4944-b897-14cca13a39a4",
      "title": "Reasoning with Types in Rust",
      "content_text": "Rust is a modern programming language which is marketed primarily on the basis of its very nice type system, and I‚Äôd like to tell you about how you can use this type system to reason about your programs in interesting ways. Most of the time when its type system is discussed, the focus is on its guarantee of data race freedom and ability to enable so-called fearless concurrency (and rightfully so‚Äîthis is a place where Rust truly shines!). Today, I have a different focus in mind, characterized perhaps most succinctly as follows:",
      "url": "https://aaronweiss.us/posts/2018-02-26-reasoning-with-types-in-rust.html",
      "date_published": "2018-02-26T00:00:00+00:00",
      "author": {
        "name": "Aaron Weiss",
        "url": "https://aaronweiss.us/archive.html"
      },
      "tags": [
        "Language",
        "Computer Science"
      ]
    },
    {
      "id": "26bc7432-d561-4e1f-8cf2-2c30b8ac63ab",
      "title": "Speed Without Wizardry",
      "content_text": "Vyacheslav Egorov, who goes by mraleph on the Web, wrote a response to my article ‚ÄúOxidizing Source Maps with Rust and WebAssembly‚Äù titled ‚ÄúMaybe you don‚Äôt need Rust and WASM to speed up your JS‚Äù.\n\nThe ‚ÄúOxidizing‚Äù article recounts my experience integrating Rust (compiled to WebAssembly) into the source-map JavaScript library. Although the JavaScript implementation was originally authored in idiomatic JavaScript style, as we profiled and implemented speed improvements, the code became hard to read and maintain. With Rust and its zero-cost abstractions, we found that there was no trade-off between performance and clean code.",
      "url": "http://fitzgeraldnick.com/2018/02/26/speed-without-wizardry.html",
      "date_published": "2018-02-26T00:00:00-08:00",
      "author": {
        "name": "Nick Fitzgerald",
        "url": "http://fitzgeraldnick.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "504ed65c-1efe-4cbd-b655-b17e89110936",
      "title": "Transcript: Should you Rust in embedded yet?",
      "content_text": "This is a transcript of a talk I gave at the Vilnius Rust meetup.\n\nIt would not be an exaggeration to say that embedded is omnipresent. You can find embedded firmware everywhere from fridges, microwaves and personal computers to safety-critical applications in automotive, medical fields, etc.\n\nMost of this software is still written in C or C++, and neither of these, given their non-ideal track record in relation to security critical software, are the most confidence inspiring choice for safety-critical systems.\n\nIn my experience, bugs occurring in embedded firmware tend to be fairly similar to those commonly found in the user-space software.",
      "url": "https://kazlauskas.me/entries/rust-embedded-ready.html",
      "date_published": "2018-02-24T20:09:27+00:00",
      "author": {
        "name": "Simonas Kazlauskas",
        "url": "https://kazlauskas.me/index.html"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "34ee0b77-cabd-47a8-bb6c-00e8a34046c7",
      "title": "An introduction to writing platform agnostic drivers in Rust using the MCP3008",
      "content_text": "Here is how a device like an accelerometer works: you send the device commands over a serial interface (SPI, I2C), say something like: ‚Äúget me the X-axis reading‚Äù; the device responds by sending back some data.\n\nThe way the SPI/I2C/GPIO (and other) interfaces are programmed is very much dependent on the specific microcontroller family. But the actions you need to perform to interface with a device like a temperature sensor / accelerometer etc depend only on the device and are independent of the controller being used. What if you can write a generic accelerometer driver and use it on any microcontroller platform - right from low-end ARM Cortex-M, AVR, MSP430 etc to complex Embedded Linux platforms like the Raspberry Pi? What if you can distribute these drivers on crates.io so that you only have to include one line in your Cargo.toml to use it in your code?",
      "url": "http://pramode.in/2018/02/24/an-introduction-to-writing-embedded-hal-based-drivers-in-rust/",
      "date_published": "2018-02-24T00:00:00-05:00",
      "author": {
        "name": "Pramode C.E",
        "url": "http://pramode.in/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "0493daa3-4abb-46eb-82de-e75daea4bbac",
      "title": "Pushing Rust To 2019",
      "content_text": "Some of these suggestions are not entirely new and have been added as posts/ comments on /r/rust, Github threads. But I believe better listing down all in a one place, because now we are in the correct time even I am bit late.",
      "url": "https://medium.com/@dumindu/pushing-rust-to-2019-9616d82172d3",
      "date_published": "2018-02-23T15:44:16.399+00:00",
      "author": {
        "name": "Dumindu Madunuwan",
        "url": "https://medium.com/@dumindu"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "516e4eaf-1ce1-49be-a457-a471e9f97329",
      "title": "How doctests get made",
      "content_text": "One of rustdoc‚Äôs greatest features is the ability to take code samples within your documentation and run them like tests. This ensures that all your samples stay up to date with your library‚Äôs API changes. However, there are some steps that need to happen to massage these ‚Äúdoctests‚Äù into something that can be compiled and run like a regular program.",
      "url": "https://quietmisdreavus.net/code/2018/02/23/how-the-doctests-get-made/",
      "date_published": "2018-02-23T16:00:00-06:00",
      "author": {
        "name": "QuietMisdreavus",
        "url": "https://quietmisdreavus.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "b079d66f-d08e-4593-80cc-e0060133d12e",
      "title": "Failure 1.0.0 on March 15",
      "content_text": "I‚Äôm planning to release a 1.0.0 version of failure on March 15. Once this happens, I don‚Äôt plan to release any further breaking changes to the failure crate (though maybe someday in the distant future).\nBreaking changes in 1.0 failure is in a somewhat unique position as being a significant part of the public API of other libraries that depend on it. Whether they use the Error struct or derive Fail for a custom error type, this becomes a part of the API they expose to other users.",
      "url": "https://boats.gitlab.io/blog/post/2018-02-22-failure-1.0/",
      "date_published": "2018-02-22T00:00:00+00:00",
      "author": {
        "name": "boats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "22d134e6-ddc6-4571-965c-4b6e72a544eb",
      "title": "Recently, for a Rusty Web",
      "content_text": "It‚Äôs been a few months since I shifted my focus full time to Rust, and in that time, we‚Äôve gotten a lot of work done! I wanted to update you here what all that is, since it‚Äôs spread around on multiple repositories.",
      "url": "http://seanmonstar.com/post/171170905822/recently-for-a-rusty-web",
      "date_published": "2018-02-22T00:00:00+00:00",
      "author": {
        "name": "Sean McArthur",
        "url": "http://seanmonstar.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "450ba7fc-c3ea-4af5-bda4-06842f062de8",
      "title": "Rust Typestates",
      "content_text": "A long time ago, the Rust language was a language with typestate. Officially, typestates were dropped long before Rust 1.0. In this entry, I‚Äôll get you in on the worst kept secret of the Rust community: Rust still has typestates.",
      "url": "https://yoric.github.io/post/rust-typestate/",
      "date_published": "2018-02-22T15:15:55+01:00",
      "author": {
        "name": "David Teller",
        "url": "https://yoric.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c5a101b5-e749-4e99-9e08-54de2cf0a2c1",
      "title": "Oxidizing Fedora: Try Rust and its applications today",
      "content_text": "In recent years, it has become increasingly important to develop software that minimizes security vulnerabilities. Memory management bugs are a common cause of these vulnerabilities. To that end, the Mozilla community has spent the last several years building the Rust language and ecosystem which focuses primarily on eliminating those bugs. And Rust is available in Fedora today, along with a few applications in Fedora 27 and higher, as seen below.",
      "url": "https://fedoramagazine.org/oxidizing-fedora-try-rust-applications-today/",
      "date_published": "2018-02-21T08:00:23+00:00",
      "author": {
        "name": "Igor Gnatenko and Neal Gompa",
        "url": "https://fedoramagazine.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "0d46d60e-49c7-44ce-8f0c-48b94501b1ca",
      "title": "How to write GStreamer Elements in Rust Part 2: A raw audio sine wave source",
      "content_text": "A bit later than anticipated, this is now part two of the blog post series about writing GStreamer elements in Rust. Part one can be found here, and I‚Äôll assume that everything written there is known already. In this part, a raw audio sine wave source element is going to be written. It will be similar to the one Mathieu was writing in his blog post about writing such a GStreamer element in Python. Various details will be different though, but more about that later.",
      "url": "https://coaxion.net/blog/2018/02/how-to-write-gstreamer-elements-in-rust-part-2-a-raw-audio-sine-wave-source/",
      "date_published": "2018-02-21T15:05:22+00:00",
      "author": {
        "name": "Sebastian Dr√∂ge",
        "url": "https://coaxion.net/blog/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "45772a5b-1f22-4db9-9eee-f888c0c82660",
      "title": "Why Writing a Linked List in Rust is Basically Impossible [in safe Rust]",
      "content_text": "Before I start this post, let me preface it by saying that I‚Äôm not an experienced Rustacean by any means. Errata and corrections are appreciated. This post is aimed at helping other fledgling rust-learners avoid my mistake. First, by helping Rust learners pick good introductory projects that will fit naturally in idiomatic rust. Second, by helping Rust learners start building Rust-friendly design intuition. I‚Äôd heard about Rust and it‚Äôs inscrutable borrow checker for years, but after reading a few blog posts about compiler error improvements, I figured it might be user-friendly enough to give it a try.",
      "url": "https://rcoh.me/posts/rust-linked-list-basically-impossible/",
      "date_published": "2018-02-20T08:55:56-08:00",
      "author": {
        "name": "Russell Cohen",
        "url": "https://rcoh.me/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "3dc17991-d359-4205-917a-80b37a564b37",
      "title": "Rust for Cross-Language System Libraries",
      "content_text": "We have been building libpasta as a simple, usable solution to password hashing and migration. The goal for libpasta is to be a cross-platform, cross-language system library. libpasta is written in Rust, exports a C-style API, and builds to a static/shared library. Most languages support calling external libraries through foreign function interfaces (FFIs), and the end result can be seen in the documentation where each language has access to the libpasta functionality.",
      "url": "https://libpasta.github.io/blog/bindings/",
      "date_published": "2018-02-21T00:00:00+00:00",
      "author": {
        "name": "libpasta",
        "url": "https://libpasta.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "8e33c7c4-2788-418b-8e47-ca8990ae0d38",
      "title": "Snips Uses Rust to Build an Embedded Voice Assistant",
      "content_text": "The team at Paris-based Snips has created a voice assistant that can be embedded in a single device or used in a home network to control lights, thermostat, music, and more. You can build a home hub on a Raspberry Pi and ask it for a weather report, to play your favorite song, or to brew up a double espresso. Manufacturers like Keecker are adding Snips‚Äô technology to products like multimedia home robots. And Snips works closely with leaders across the value chain, like NVIDIA, EBV, and Analog Devices, in order to voice-enable an increasingly wider range of device types, from speakers to home automation systems to cars.",
      "url": "https://blog.mozilla.org/blog/2018/02/21/snips-uses-rust-build-embedded-voice-assistant/",
      "date_published": "2018-02-21T12:34:56-08:00",
      "author": {
        "name": "Judy DeMocker",
        "url": "https://blog.mozilla.org/blog/author/jdemockermozilla-com/"
      },
      "tags": [
        "Language",
        "Tools and Applications"
      ]
    },
    {
      "id": "b2eb24c3-d7ee-438c-b041-0446dd551abe",
      "title": "I decided to make an 1980's Home Computer in Rust - Part 1",
      "content_text": "My first attempt at Rust programming was the stellaris-launchpad crate. This has a few demos that either blink the LED or roll it through an RGB rainbow using the PWM timers. Recently I've started a new version of the lm4f120 crate called tm4c123x-hal. The name change reflects TI's new name for basically the exact same part, while the -hal indicates that it's based upon the output of svd2rust and @japaric's new Embedded Hal crate. At the same time, I was watching videos on Youtube about a new wave of 1980's style 'retro' computing boards - text output, BASIC interpreter, etc. An idea started to form that I could put all three of these things together.",
      "url": "http://railwayelectronics.blogspot.com.au/2018/02/i-decided-to-make-1980s-home-computer.html?m=1",
      "date_published": "2018-02-20T22:16:00+00:00",
      "author": {
        "name": "theJPster",
        "url": "http://railwayelectronics.blogspot.com.au/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "f2bf66c3-52bf-4a3c-b508-96bbd3385e8d",
      "title": "Programming an ARM microcontroller in Rust at four different levels of abstraction",
      "content_text": "Covering: Why Rust on Microcontrollers, Level 1: Direct register access in an unsafe block, Level 2: No unsafe blocks, use the API provided by svd2rust, A problem, Level 3: The embedded HAL to the rescue, Level 4: Use a board support crate.",
      "url": "http://pramode.in/2018/02/20/programming-a-microcontroller-in-rust-at-four-levels-of-abstraction/",
      "date_published": "2018-02-20T00:00:00-05:00",
      "author": {
        "name": "Pramode C.E",
        "url": "http://pramode.in/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "c078b1d0-a902-42c5-84d0-5d262146e64c",
      "title": "Using macro to generate generic docs?",
      "content_text": "We were recently able to finally make the docs for integer primitive types much more accurate (thanks to @antoyo!). Now, the code examples match the type for which they're written. No more i32 examples for i128 (I think you got the idea at this point)! Now, I think a few people might be interested by the method we used to achieve such a result so let's talk about it.",
      "url": "https://blog.guillaume-gomez.fr/articles/2018-02-19+Using+macro+to+generate+generic+docs%3F",
      "date_published": "2018-02-19T00:00:00+00:00",
      "author": {
        "name": "Guillaume Gomez",
        "url": "https://blog.guillaume-gomez.fr/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "9b97498f-3ffb-4c89-8973-c2beb5e0140e",
      "title": "Porting Rust to WebAssembly",
      "content_text": "I recently spent some effort trying to make reproto run in a browser. Here I want to outline the problems I encountered and how I worked around them. I will also provide a number of suggestions for how things might be improved for future porters.",
      "url": "https://udoprog.github.io/rust/2018-02-19/porting-rust-to-wasm.html",
      "date_published": "2018-02-19T00:00:00+00:00",
      "author": {
        "name": "John-John Tedro",
        "url": "https://udoprog.github.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "25d98aac-94a1-4cda-bbdb-7b22b76ed032",
      "title": "Weekly driver 1 & 2: L3GD20, LSM303DLHC and Madgwick - Embedded in Rust",
      "content_text": "Oh, time flies. It‚Äôs already week 8 and we have zero weekly driver posts out there ‚Äì don‚Äôt worry though because there‚Äôs plenty of drivers and embedded-hal implementations in the works. To play catch up in this post I‚Äôll cover two embedded-hal drivers: the l3gd20 and the lsm303dlhc. The L3GD20 is an IC that contains a gyroscope and exposes I2C and SPI interfaces; the LSM303DLHC is an IC that contains an accelerometer and a magnetometer, and exposes an I2C interface. You can find these two ICs on the STM32F3DISCOVERY board.",
      "url": "http://blog.japaric.io/wd-1-2-l3gd20-lsm303dlhc-madgwick/",
      "date_published": "2018-02-19T15:57:59+01:00",
      "author": {
        "name": "Jorge Aparicio",
        "url": "http://blog.japaric.io/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "5ecd2c77-20dd-4fd5-84a7-6c8e2364ebde",
      "title": "Ferrous Oxide For Jaguars And Incremented Crocodiles",
      "content_text": "Caveat lector: the primary purpose of the article is to introduce a reader proficient in one of the popular object-oriented languages how not to program in Rust. While each feature of the language will be briefly introduced where it is used, no great efforts will be made to explain the feature in detail. Links to the Rust book should provide that.",
      "url": "https://eno.space/blog/2018/02/Ferrous-oxide-for-jaguars-and-incremented-crocodiles",
      "date_published": "2018-02-15T00:00:00+01:00",
      "author": {
        "name": "@u0060",
        "url": "https://eno.space/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e5f704af-b1ed-4757-b96d-80402ba3e601",
      "title": "Rust for Java Devs ‚Äì Creating functions",
      "content_text": "In this post of Rust for Java Devs we will look at creating functions in Rust. Functions in Rust do not differ that much from Java methods but there are a few little differences. There is also the topic of Rust‚Äôs lifetimes compared to Java‚Äôs garbage collection that one could argue separates the two from each other a bit more, but for this post I will focus on the structure of writing a function in Rust. Due to the similarities between the two, I believe most Java developers will have no problem in figuring out what arguments a Rust function takes, what it outputs and where the output is returned from.",
      "url": "https://lankydanblog.com/2018/02/18/rust-for-java-devs-creating-functions/",
      "date_published": "2018-02-18T18:28:19+00:00",
      "author": {
        "name": "Dan Newton",
        "url": "https://lankydanblog.com/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "6d0e61c5-087e-48dc-abd8-ded4f3e43a8a",
      "title": "Rust things I miss in C",
      "content_text": "Librsvg feels like it is reaching a tipping point, where suddenly it seems like it would be easier to just port some major parts from C to Rust than to just add accessors for them. Also, more and more of the meat of the library is in Rust now. I'm switching back and forth a lot between C and Rust these days, and C feels very, very primitive these days.",
      "url": "https://people.gnome.org/~federico/blog/rust-things-i-miss-in-c.html",
      "date_published": "2018-02-18T21:26:04-06:00",
      "author": {
        "name": "Federico Mena Quintero",
        "url": "https://people.gnome.org/~federico/blog/index.html"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "44ef6094-b3df-4a2c-9cd9-429feecff6bc",
      "title": "Spectra gets Rust scripting!",
      "content_text": "spectra is a crate I‚Äôve been maintaining for a few months / years now. It‚Äôs a crate that I mainly use for demoscene productions (I released two with it, C√©leri R√©moulade and Outline Invitation) but I also use it to play around and experiment new rendering, animation and video game techniques.",
      "url": "http://phaazon.net/blog/spectra_plugins",
      "date_published": "2018-02-19T02:57:00+00:00",
      "author": {
        "name": "Dimitri Sabadie",
        "url": "http://phaazon.net/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "f77cc701-eca9-4b85-a450-dd10c1766966",
      "title": "Sorting in Rust: Selection, Insertion, and Counting Sort",
      "content_text": "Sorting is an invaluable skill and often covered early in a computer science curriculum. Have you ever tried to look up a friends phone number in an unsorted list!? You‚Äôd have to look at every single entry. Sorting creates all sorts of ways to access data quicker.",
      "url": "https://medium.com/@spyr1014/sorting-in-rust-selection-insertion-and-counting-sort-2c4d3575e364",
      "date_published": "2018-02-18T23:57:10.254+00:00",
      "author": {
        "name": "Andrew Jakubowicz",
        "url": "https://medium.com/@spyr1014"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ff94e8a6-c203-4cbe-af46-8f99e2896dd8",
      "title": "Borrow cycles in Rust: arenas v.s. drop-checking",
      "content_text": "Ownership and borrowing are the fundamentals of data structures in Rust. However, both taking owneship of a value (moving it) or taking a reference to it can only happen after the value was created. This ordering seems to prevent having any cycle in a data structure, even though that‚Äôs sometimes useful or necessary. For example in a web page‚Äôs content tree, from any DOM node, one can easily access (if any) its first and last child, previous and next sibling, (so children of a node form a doubly-linked list) and parent. Some other applications might need to manipulate arbitrary graphs in their full generality.",
      "url": "https://exyr.org/2018/rust-arenas-vs-dropck/",
      "date_published": "2018-02-17T00:00:00+00:00",
      "author": {
        "name": "Simon Sapin",
        "url": "https://exyr.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4abf1536-2c82-411a-be74-e85d2155af5a",
      "title": "Setting up Windows 10 for programming (in Rust)",
      "content_text": "Lately I‚Äôve been working with Windows-specific APIs, so I needed to get a Windows dev environment. I‚Äôve mostly used Linux for many years now, so for me programming on Windows feels very foreign. Getting to a point where I started being productive took a number of steps, so here they are, if only for me to find them next time.",
      "url": "https://exyr.org/2018/windows/",
      "date_published": "2018-01-31T00:00:00+00:00",
      "author": {
        "name": "Simon Sapin",
        "url": "https://exyr.org/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "45c32609-24ef-4288-b361-57ca8b5a34cd",
      "title": "Zero cost stack overflow protection for ARM Cortex-M devices",
      "content_text": "One of the core features of Rust is memory safety. Whenever possible the compiler enforces memory safety at compile. One example of this is the borrow checker which prevents data races, iterator invalidation, pointer invalidation and other issues at compile time. Other memory problems like buffer overflows can‚Äôt be prevented at compile time. In those cases the compiler inserts runtime checks, bounds checks in this case, to enforce memory safety at runtime. What about stack overflows? For quite a long time Rust didn‚Äôt have stack overflow checking but that wasn‚Äôt much of a problem on tier 1 platforms since these platforms have an OS and a MMU (Memory Management Unit) that prevents stack overflows from wreaking havoc.",
      "url": "http://blog.japaric.io/stack-overflow-protection/",
      "date_published": "2018-02-17T18:16:39+01:00",
      "author": {
        "name": "Jorge Aparicio",
        "url": "http://blog.japaric.io/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "a2946d73-a2c7-4d2a-899c-080258552b07",
      "title": "Mutation Testing Rust in Earnest",
      "content_text": "It‚Äôs been a while since I last suggested Mutation Testing in Rust, almost two years ago. Since then I got sidetracked a lot, and later lost interest. Just one more cool project I couldn‚Äôt afford to take on. But as things go, my interest in mutation testing was rekindled, and I decided to give it a shot and do more than blogging about it.",
      "url": "http://llogiq.github.io/2018/02/14/mutagen.html",
      "date_published": "2018-02-14T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "c780f270-e190-4987-aff1-ff20ebe108bf",
      "title": "Improved User Interface 0.2.0 Released!",
      "content_text": "iui, the Improved User Interface crate, has just gotten its 0.2 release. Improved User Interface is a set of safe, idiomatic Rust bindings to platform native GUI libraries (Win32API, Cocoa, and GTK+) via libui and ui-sys. Highlights of this release include: Correct, semantic use of mutability, GTK+ theme application per window, and menu bars and file open/create modal support.",
      "url": "https://www.patreon.com/posts/17016887",
      "date_published": "2018-02-16T04:16:00+00:00",
      "author": {
        "name": "Leo Tindall",
        "url": "https://www.patreon.com/leotindall"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "6a1644f0-2b9e-4c82-9ccd-ef69815f560f",
      "title": "Bincode 1.0.0, fast binary serialization with Serde",
      "content_text": "Bincode is a serializer implementation for Serde. If you stick a #[derive(Deserialize, Serialize)] on your struct, Bincode can efficiently serialize and deserialize those structs to and from bytes. Bincode is unique in that it‚Äôs a format that was built specifically for the Rust serialization ecosystem. Tight coupling with Serde allows Bincode to be very fast and serialize to very small payloads.",
      "url": "http://tyoverby.com/posts/bincode_release.html",
      "date_published": "2018-02-15T18:49:27+00:00",
      "author": {
        "name": "Ty Overby",
        "url": "http://tyoverby.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "938457b4-8905-4954-9007-88c80a2c24d6",
      "title": "\"The Expressive C++17 Coding Challenge (in Rust)\" Revisited",
      "content_text": "In October of last year, I wrote a post, ‚ÄúThe Expressive C++17 Coding Challenge (in Rust)‚Äù. For various reasons, it got brought up again in the D world, and seb has written a new post. It‚Äôs good, you should check it out! However, it links to my gist, not my blog post. As I said back then: I held myself to the same constraints as the original contest; no external packages is a bit painful in Rust, but it‚Äôs not too bad. Mostly it would let me eliminate boilerplate while also improving correctness, and making the code a bit shorter. So, that got me thinking: What would this look like if I could use external packages? I took about an hour, and knocked it out. I have two versions to show you today, one where I pay no attention to allocations, and one where it‚Äôs zero-allocation.",
      "url": "http://words.steveklabnik.com/the-expressive-c-17-coding-challenge-in-rust-revisited",
      "date_published": "2018-02-14T10:12:15-08:00",
      "author": {
        "name": "Steve Klabnik",
        "url": "http://words.steveklabnik.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "0af4c90e-74b2-438d-aaed-798c9f6e900a",
      "title": "Fanta: An opinionated framework for web development in rust",
      "content_text": "Fanta is a web framework that aims for developers to be productive and consistent across projects and teams. Its goals are to be: Opinionated, Fast, and Intuitive. Based heavily off of the work here: https://github.com/tokio-rs/tokio-minihttp",
      "url": "https://github.com/trezm/Fanta",
      "date_published": "2018-02-14T18:44:00+11:00",
      "author": {
        "name": "Peter Mertz",
        "url": "https://github.com/trezm"
      },
      "tags": [
        "Tools and Applications",
        "Web and Network Services"
      ]
    },
    {
      "id": "1694fd36-21ca-4e3f-8654-9291c3ba4de7",
      "title": "comm is a peer-to-peer instant messaging protocol designed to be resilient to censorship",
      "content_text": "comm is a peer-to-peer instant messaging protocol designed to be resilient to censorship. comm-gtk is a GUI client built on the comm library. To try it out, start the app. In the configuration window, enter a secret phrase, a bootstrap node (IP:port pair), and a local port to listen on (e.g. 6669). For a bootstrap node, try 165.227.114.200:6667 (or any other node's IP address if you know one). Click connect to join the network.",
      "url": "https://github.com/zacstewart/comm-gtk",
      "date_published": "2018-02-13T23:02:31-06:00",
      "author": {
        "name": "Zac Stewart",
        "url": "https://github.com/zacstewart"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "86b2dfcd-a01d-47e1-acb8-2ddbca20db62",
      "title": "Gameland intro, reimplemented in Rust for WebAssembly",
      "content_text": "My nice brother Johannes Ridderstedt sent me some old files a few weeks ago (in late 2017), stuff that he had preserved from an age-old computer of ours. One of these was the file named gameland.zip (not published yet, but I might put it up here some day.) I managed to get this running, and liked what I saw (you'll find the YouTube link to it further down on this page.) Around this time I was reading a bit about WebAssembly which I think will redefine and help reshape the web as we see it today. I was also looking at the Hello, Rust web page, and the \"FizzleFade effect using a Feistel network\" page in particular.",
      "url": "http://perlun.eu.org/en/programming/gameland/",
      "date_published": "2018-02-13T07:44:00+11:00",
      "author": {
        "name": "Per Lundberg",
        "url": "http://perlun.eu.org/en/"
      },
      "tags": [
        "Games and Graphics",
        "Web and Network Services"
      ]
    },
    {
      "id": "bbc46982-1321-4e4e-8d9f-344963341c21",
      "title": "Event Sourcing with Aggregates in Rust",
      "content_text": "Everyone loves event sourcing, right up until the moment they have to implement it. At that moment all the wonderful whiteboard drawings‚Ä¶",
      "url": "https://medium.com/@KevinHoffman/event-sourcing-with-aggregates-in-rust-4022af41cf67",
      "date_published": "2018-02-12T15:11:08.708+00:00",
      "author": {
        "name": "Kevin Hoffman",
        "url": "https://medium.com/@KevinHoffman"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "35c70f95-6097-47df-a470-bb92e99b27e5",
      "title": "First release of TQL: the easy-to-use ORM for Rust",
      "content_text": "After a couple of weeks of work, I'm now happy to release the first version of tql, the easy-to-use ORM for Rust. While the focus was to make tql work on the stable version of the compiler, I also added some new features. The most notable new feature is the support for SQLite: now tql supports SQLite as well as PostgreSQL. The support for SQLite is almost as complete as the one for PostgreSQL: the only missing function is not implemented because the backend (SQLite) does not support it.",
      "url": "http://tql-rs.ml/first-release/",
      "date_published": "2018-02-10T00:00:00+00:00",
      "author": {
        "name": "Antoni",
        "url": "http://tql-rs.ml/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "2b698c99-99e0-4fad-8716-b58dbd9c255c",
      "title": "Deploying A Rust Server to Google App Engine with Travis CI & Docker",
      "content_text": "I woke up this morning with one goal: to convert my website (morgangallant.com) into a Rust web server. I have been a long time fan of‚Ä¶",
      "url": "https://medium.com/@gallantmrgn/deploying-rust-server-to-google-app-engine-with-travis-ci-docker-b80acfce2ce5",
      "date_published": "2018-02-11T00:07:43.579+00:00",
      "author": {
        "name": "Morgan A. Gallant",
        "url": "https://medium.com/@gallantmrgn"
      },
      "tags": [
        "Web and Network Services",
        "DevOps and Deployment"
      ]
    },
    {
      "id": "751253b7-494d-4930-9586-40c18cab9280",
      "title": "tealdeer - A very fast implementation of tldr in Rust.",
      "content_text": "A fast command line client for tldr: A collection of simplified and community-driven man pages.",
      "url": "https://github.com/dbrgn/tealdeer",
      "date_published": "2018-02-12T07:46:00+11:00",
      "author": {
        "name": "Danilo Bargen",
        "url": "https://github.com/dbrgn"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "49ad5651-12e0-4374-9586-d9a86291c165",
      "title": "Practical Rust: Installation & Hello World",
      "content_text": "Recently, a new language called Rust has come into the spotlight, aiming to be a ‚Äòblazingly fast‚Äô language meant for systems programming‚Ä¶",
      "url": "https://medium.com/@gallantmrgn/practical-rust-installation-hello-world-d1e52aac1f9",
      "date_published": "2018-02-02T18:08:04.292+00:00",
      "author": {
        "name": "Morgan A. Gallant",
        "url": "https://medium.com/@gallantmrgn"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "019b1da3-b979-478b-89ed-7824c75df122",
      "title": "Corona: If you want to get async out out of your way",
      "content_text": "For some time now I develop a Rust library for asynchronous programming with coroutines, called Corona (note there‚Äôs a version 0.4.0-pre.1, but Crates prefer the ‚Äûstable‚Äú 0.3.1). I believe it is starting to be useful, so I wrote this description to show what it is good for and how it fits into the big picture of Rust. There‚Äôll be some more changes, though, at least because Tokio just released a new version (and Futures plan to do so soon), so Corona will have to adapt.",
      "url": "https://vorner.github.io/corona-04.html",
      "date_published": "2018-02-11T19:51:00+11:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "b8e85b25-1d33-4b69-a3ba-b2cbac2bf62e",
      "title": "RLSL (Rust -> SPIR-V compiler) Progress report",
      "content_text": "This is a follow up post. RLSL is a Rust to SPIR-V compiler. SPIR-V is the shading language for Vulkan, similar to other shading languages like GLSL, HLSL but more low level. OpenGL, DX9/11/12, Vulkan, Metal are all graphic APIs that are able to use the GPU to draw pixels on the screen. Those APIs have certain stages that can be controlled by the developer by using the correct shading language.",
      "url": "https://maikklein.github.io/rlsl-progress-report/",
      "date_published": "2018-02-09T00:00:00+00:00",
      "author": {
        "name": "Maik Klein",
        "url": "https://maikklein.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "28ce1b60-8837-4443-87fb-669bf176db9b",
      "title": "Reflecting on ppbert",
      "content_text": "I had an itch: I was pretty-printing the BERT-encoded terms that we use in a production system at work and it was very slow. The Erlang shell took more than two minutes to dump the largest file. (It took about 0.1 second to read and parse the file; the rest was spent in io:format.) I decided to scratch that itch: I wrote ppbert, a command-line utility that reads BERT-encoded values and pretty-prints them. I‚Äôve worked sporadically on ppbert for almost a year now, I use it daily at work, I‚Äôm happy with it, and I want to write about some of the things I learned during that journey.",
      "url": "https://vfoley.xyz/ppbert/",
      "date_published": "2018-02-09T00:00:00+00:00",
      "author": {
        "name": "Vincent Foley",
        "url": "http://vfoley.xyz/"
      },
      "tags": [
        "Tools and Applications",
        "Language"
      ]
    },
    {
      "id": "c7a9c9d2-8858-4f47-afa3-19ec1f2f6b86",
      "title": "Maximally minimal specialization: always applicable impls",
      "content_text": "So aturon wrote this beautiful post about what a good week it has been. In there, they wrote: \"Breakthrough #2: @nikomatsakis had a eureka moment and figured out a path to make specialization sound, while still supporting its most important use cases (blog post forthcoming!). Again, this suddenly puts specialization on the map for Rust Epoch 2018\". Sheesh I wish they hadn‚Äôt written that! Now the pressure is on. Well, here goes nothing =).",
      "url": "http://smallcultfollowing.com/babysteps/blog/2018/02/09/maximally-minimal-specialization-always-applicable-impls/",
      "date_published": "2018-02-09T00:00:00-05:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "325af8a8-af88-4a07-9c8f-16d2865f01f3",
      "title": "Closing out an incredible week in Rust",
      "content_text": "This week has been so amazing that I just had to write about it. Here‚Äôs a quick list of some of what went down in one week:",
      "url": "http://aturon.github.io/2018/02/09/amazing-week/",
      "date_published": "2018-02-09T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "6b542e90-1f02-4368-90e4-a1931ccf1935",
      "title": "A Wee Allocator for WebAssembly",
      "content_text": "Introducing wee_alloc. wee_alloc is a work-in-progress memory allocator designed for WebAssembly. It has a tiny code size footprint, compiling down to only a kilobyte of .wasm code.",
      "url": "http://fitzgeraldnick.com/2018/02/09/wee-alloc.html",
      "date_published": "2018-02-09T00:00:00-08:00",
      "author": {
        "name": "Nick Fitzgerald",
        "url": "http://fitzgeraldnick.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "b7290658-fff8-4ee5-b8e5-eceefdc6beb6",
      "title": "Memory safe DMA transfers - Embedded in Rust",
      "content_text": "A blog about Rust and embedded stuff",
      "url": "http://blog.japaric.io/safe-dma/",
      "date_published": "2018-02-09T11:47:30+01:00",
      "author": {
        "name": "Jorge Aparicio",
        "url": "http://blog.japaric.io/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "4924a3b4-b71f-4a15-ae2d-0a77bcb30e98",
      "title": "Async/Await V: Getting back to the futures",
      "content_text": "Two posts ago I proposed a particular interface for shipping self-referential generators this year. Immediately after that, eddyb showed me a better interface, which I described in the next post. Now, to tie everything together, its time to talk about how we can integrate this into the futures ecosystem. Starting point: this Generator API To begin, I want to document the generator API I‚Äôll be using in this post, which is roughly what followed from my previous post:",
      "url": "https://boats.gitlab.io/blog/post/2018-02-08-async-v-getting-back-to-the-futures/",
      "date_published": "2018-02-08T00:00:00+00:00",
      "author": {
        "name": "boats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "29eb1ede-d551-4b8d-aeec-c673aafb7e8f",
      "title": "Combine 3 - Partial parsing in Rust",
      "content_text": "Combine is a parser combinator library for the Rust programming language. I first announced version 3 of Combine back in August and back then I definitely expected to have a stable version by now. However other projects (cough gluon cough) got in the way and Combine fell to the wayside. It didn‚Äôt help that I didn‚Äôt have a killer feature for 3.0 either, user-defined error types make it possible to define parsers usable in #[no_std] crates which is great when you need it but it is still a fairly niche use-case.",
      "url": "https://marwes.github.io/2018/02/08/combine-3.html",
      "date_published": "2018-02-08T00:00:00+00:00",
      "author": {
        "name": "Markus Westerlind",
        "url": "https://marwes.github.io/"
      },
      "tags": [
        "Crates",
        "Computer Science"
      ]
    },
    {
      "id": "e6347974-c84a-438a-924a-52ef37f6c99a",
      "title": "I rewrote a Nintendo emulator with Rust / WebAssembly (Japanese)",
      "content_text": "Ê¶ÇË¶Å ‰ª•Ââç„ÄÅJS„ÅßÊõ∏„ÅÑ„Åü(„Éï„Ç°„Éü„Ç≥„É≥„ÅÆ„Ç®„Éü„É•„É¨„Éº„Çø„ÇíÊõ∏„ÅÑ„Åü - undefined)„Éï„Ç°„Éü„Ç≥„É≥„ÅÆ„Ç®„Éü„É•„É¨„Éº„Çø„ÇíRust„ÅßÊõ∏„ÅçÁõ¥„Åó„Å¶„Åø„Åü„ÄÇ „Åæ„Åü„ÄÅÊäÄË°ìÁöÑ„Å™ÂÜÖÂÆπ„ÅØQiita„ÅÆÊñπ„Å´„ÇÇÊõ∏„ÅÑ„Å¶„ÅÑ„Çã„ÅÆ„ÅßËààÂë≥„ÅÆ„ÅÇ„ÇãÊñπ„ÅØÂèÇÁÖß„Åó„Å¶„Åø„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ(„Åæ„Å† Hello, World!„Åæ„Åß„Åó„ÅãÊõ∏„Åë„Å¶„Åæ„Åõ„Çì„Åå„ÄÇ) qiita.com „ÇÇ„Å®„ÇÇ„Å®„Éï„Ç°„Éü„Ç≥„É≥„ÅÆ„Ç®„Éü„É•„É¨„Éº„Çø„Å£„Å¶Êñ∞„Åó„ÅÑË®ÄË™û„ÇíÁøíÂæó„Åô„Çã„ÅÆ„Å´„Å°„Çá„ÅÜ„Å©„ÅÑ„ÅÑÈ°åÊùê„Å†„Å£„Åü„Çä„Åô„Çã„ÅÆ„Åß„ÅØ„ÄÅ„Å£„Å¶Ë©±„Åó„Åã„Çâ„Çπ„Çø„Éº„Éà„Åó„Å¶„Å¶„ÄÅ„Çà„Åè„Çè„Åã„Çâ„Å™„ÅÑ„ÅÆ„ÅßJS„ÅßÊõ∏„ÅÑ„Å¶„Åø„Å¶„ÄÅ„Çà„ÅÜ„ÇÑ„ÅèRust„Åß‰∏ÄÈÄö„Çä„ÅØÂÆüË£Ö„Åß„Åç„ÅüÊÑü„Åò„ÄÇ„Åæ„Å†„Éê„Ç∞„ÇÑÊú™ÂÆüË£ÖÔºàÈü≥Â£∞Âë®„Çä„ÇÑ„Éû„ÉÉ„Éë„ÉºÔºâ„ÇÇÂ§ö„ÅÑ„Çì„Åß„Åô„Åå„ÄÅ„Å≤„Å®„Åæ„Åö„ÅØ„ÅäËÖπ„ÅÑ„Å£„Å±„ÅÑ„Å™ÊÑü„Åò„ÄÇ ÊàêÊûú‚Ä¶",
      "url": "http://blog.bokuweb.me/entry/2018/02/08/101522",
      "date_published": "2018-02-08T10:15:22+09:00",
      "author": {
        "name": "bokuweb",
        "url": "http://blog.bokuweb.me/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "94324d77-490d-4897-bfd7-5a5b7c4c0cfb",
      "title": "6 months into Rust: what was good in 2017 and what will be better in 2018?",
      "content_text": "Last summer, I finally decided to start learning Rust. I published my first blog post about Rust in September, I then attended my first Rust conference to learn more about the language, and started three Rust projects on GitHub. I now have more experience about the Rust ecosystem, and I want to share some feedback. The call for community blog posts by the Rust team comes right in time!",
      "url": "https://gendignoux.com/blog/2018/02/05/rust-best-features-of-2017-and-beyond.html",
      "date_published": "2018-02-05T22:24:30+01:00",
      "author": {
        "name": "Guillaume Endignoux",
        "url": "https://gendignoux.com/blog/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "b0a2bc9c-effa-4859-b804-cbe839060855",
      "title": "Tokio Reform is Shipped and the Road to 0.2",
      "content_text": "I'm happy to announce that today, the changes proposed in the reform RFC have been released to crates.io as tokio 0.1. The primary changes are: Add a default global event loop, eliminating the need for setting up and managing your own event loop in the vast majority of cases, and decouple all task execution functionality from Tokio.",
      "url": "https://tokio.rs/blog/2018-02-tokio-reform-shipped/",
      "date_published": "2018-02-07T00:00:00+00:00",
      "author": {
        "name": "Carl Lerche",
        "url": "https://tokio.rs/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "ac0c5546-f21b-4b47-b4a4-950464472aad",
      "title": "Async/Await IV: An Even Better Proposal",
      "content_text": "I did not plan to write this blog post. I thought that the fourth post in my series would explain how we could go from the generator API in my previous post to a futures API in which you don‚Äôt have to heap allocate every async call. But eddyb surprised me, and now I have to revisit the API in the previous post, because we can implement everything we need from immovability with a safe interface afterall.",
      "url": "https://boats.gitlab.io/blog/post/2018-02-07-async-iv-an-even-better-proposal/",
      "date_published": "2018-02-07T00:00:00+00:00",
      "author": {
        "name": "boats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "60238a1c-95ee-46d8-bf5c-e70fed87a103",
      "title": "Guitar Effects in Rust",
      "content_text": "In an effort to experiment with dsp, I wrote a guitar/bass effects processor this past weekend. The end result works very well (to my pleasant surprise). It doesn‚Äôt have 90% of the functionalities of any of rakarrack, guitar rig, garage band but overall it was a fun weekend hack.",
      "url": "http://rickyhan.com/jekyll/update/2018/02/06/rust-guitar-pedal-effects-dsp.html",
      "date_published": "2018-02-06T04:00:00+00:00",
      "author": {
        "name": "Ricky Han",
        "url": "http://rickyhan.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "6e3c698d-7f42-43d4-9c08-2ee084945e5c",
      "title": "A vision for portability in Rust",
      "content_text": "TL;DR: This post proposes to deprecate the std facade, instead having a unified std that uses target- and capability-based cfgs to control API availability. Leave comments on internals!",
      "url": "http://aturon.github.io/2018/02/06/portability-vision/",
      "date_published": "2018-02-06T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "5e5df82f-aba3-4832-bbe6-e995b2e544ef",
      "title": "Criterion.rs v0.2 - a statistics-driven benchmarking library for Rust",
      "content_text": "Criterion.rs is a statistics-driven benchmarking library for Rust. It provides precise measurements of changes in the performance of benchmarked code, and gives strong statistical confidence that apparent performance changes are real and not simply noise. Clear output, a simple API and reasonable defaults make it easy to use even for developers without a background in statistics. Unlike the benchmarking harness provided by Rust, Criterion.rs can be used with stable versions of the compiler.",
      "url": "https://bheisler.github.io/post/criterion-rs-0-2/",
      "date_published": "2018-02-05T07:00:00-06:00",
      "author": {
        "name": "Brook Heisler",
        "url": "https://bheisler.github.io/"
      },
      "tags": [
        "Performance",
        "Crates"
      ]
    },
    {
      "id": "c0b3d7ad-673f-4eb9-aa54-45447d1eafb0",
      "title": "Rust Lifetimes for the Uninitialised",
      "content_text": "Lifetimes are a interesting subject: a lot of people seem to gain a day-to-day familiarity with them, without fully understanding what they are. Maybe, they are truly Rust's Monads. Let's talk about what they are, where you encounter them and then how to get competent with them.",
      "url": "http://asquera.de/blog/2018-01-29/rust-lifetimes-for-the-uninitialised/",
      "date_published": "2018-01-29T15:30:00+01:00",
      "author": {
        "name": "Florian Gilcher",
        "url": "http://asquera.de/blog"
      },
      "tags": [
        "Language",
        "Getting Started"
      ]
    },
    {
      "id": "92664a59-08e0-4185-aab2-cd0a29f303f8",
      "title": "Writing eBPF tracing tools in Rust",
      "content_text": "Writing eBPF tracing tools in Rust",
      "url": "https://jvns.ca/blog/2018/02/05/rust-bcc/",
      "date_published": "2018-02-05T10:23:44+00:00",
      "author": {
        "name": "Julia Evans",
        "url": "https://jvns.ca/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "f4e99fe5-2dab-418d-9256-813a75036164",
      "title": "Introduction to Procedural Macros",
      "content_text": "As a newcomer to Rust, I heard the phrase ‚Äúprocedural macro‚Äù thrown around a lot without really understanding what it meant. I figured that I would learn about them if I ever needed them. Well, I‚Äôm working on the guts of relm, and a large chunk of it is procedural macros. I‚Äôve learned enough about procedural macros to be dangerous, so I thought I would pass on some knowledge.",
      "url": "https://tinkering.xyz/posts/introduction-to-proc-macros/",
      "date_published": "2018-02-03T19:36:37-05:00",
      "author": {
        "name": "Zach Mitchell",
        "url": "https://tinkering.xyz/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "25060712-7d38-4492-991d-a52a9111891c",
      "title": "Async/Await III: Moving Forward with Something Shippable",
      "content_text": "In the first post, we looked at the relationship between generators and a more general notion of self-references. In the second post, we narrowed down exactly what problem we need to solve to make generators work, and talked about some solutions that we‚Äôve considered but don‚Äôt feel like we could ship in the near future.\nIn the original post, I promised that I would have a near term solution by the end of this series.",
      "url": "https://boats.gitlab.io/blog/post/2018-01-30-async-iii-moving-forward/",
      "date_published": "2018-02-04T00:00:00+00:00",
      "author": {
        "name": "boats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "434c400b-b4ac-49c9-87fa-db2a8b5f1ba7",
      "title": "DataFusion: Big Data Platform for Rust",
      "content_text": "DataFusion is an open-source Big Data platform implemented in the Rust programming language with a similar programming style to Apache Spark.",
      "url": "https://www.datafusion.rs/",
      "date_published": "2018-02-04T16:51:47+00:00",
      "author": {
        "name": "Andy Grove",
        "url": "https://www.datafusion.rs/"
      },
      "tags": [
        "Tools and Applications",
        "Web and Network Services"
      ]
    },
    {
      "id": "303b0429-9b0c-46f8-a555-fbab8c2bdf90",
      "title": "retrobasic - A BASIC interpreter written in Rust",
      "content_text": "retrobasic is a BASIC interpreter written in Rust. It is based on the original BASIC '64 implementation, and modified as needed to make it more compatible with some of the classic BASIC games.",
      "url": "https://github.com/seasalim/retrobasic",
      "date_published": "2018-02-04T17:21:55+00:00",
      "author": {
        "name": "seasalim",
        "url": "https://github.com/seasalim"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "b4def99b-cdec-46c6-9816-a6c85c999ae9",
      "title": "Beginner Bites: A taste of Rust, a safe, concurrent and practical language!",
      "content_text": "Experience a sampler of Rust. You‚Äôll get set up, then solve the first Project Euler problem in Rust. This is a language you can‚Äôt miss.",
      "url": "https://hackernoon.com/a-taste-of-rust-6d8fc60e050",
      "date_published": "2018-02-04T11:01:00.900+00:00",
      "author": {
        "name": "Andrew Jakubowicz",
        "url": "https://hackernoon.com/@spyr1014"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "c73d7d0b-4f7a-4448-acee-d98dbb499461",
      "title": "Adventures in Rust: A Basic 2D Game",
      "content_text": "In an effort to do more fun side projects, I‚Äôve been learning Rust, a wonderful systems programming language developed by the Mozilla Foundation. It‚Äôs been a while since I‚Äôve touched a compiled language as my day-to-day often deals with Python and Javascript variants. I was inspired after seeing a lot of interesting articles about Rust usage and decided to dive into learning Rust by creating a very basic 2D game, inspired by the classic Defender arcade game.",
      "url": "https://a5huynh.github.io/2018/02/02/adventures-in-rust.html",
      "date_published": "2018-02-02T00:00:00+00:00",
      "author": {
        "name": "Andrew Huynh",
        "url": "https://a5huynh.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "4aeb0aa5-6a72-41c9-87bc-a2e24b5e33d3",
      "title": "Writing a command-line program in Rust - Federico's Blog",
      "content_text": "As a library writer, it feels a bit strange, but refreshing, to write a program that actually has a main() function. My experience with Rust so far has been threefold:",
      "url": "https://people.gnome.org/~federico/blog/writing-a-command-line-program-in-rust.html",
      "date_published": "2018-02-03T11:41:20-06:00",
      "author": {
        "name": "Federico Mena Quintero",
        "url": "https://people.gnome.org/~federico/blog/index.html"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "b8c9dfda-526c-453c-a93b-5c96a207643e",
      "title": "Hairy Stuff",
      "content_text": "Last month I was working on a lot of new test scenes for my Rust implementation of the PBRT renderer. But a big chunk of my time went into implementing the curve shape needed for the geometry of hair, and a material, which implements a hair scattering model.",
      "url": "https://www.janwalter.org/jekyll/rendering/pbrt/2018/02/01/hairy-stuff.html",
      "date_published": "2018-02-01T13:30:00+01:00",
      "author": {
        "name": "Jan Walter",
        "url": "https://www.janwalter.org/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "444386e2-51fc-488e-ac19-0aa71a4d89a3",
      "title": "PoC: compiling to eBPF from Rust",
      "content_text": "I have been playing with eBPF (extended Berkeley Packet Filters), a neat feature present in recent Linux versions (it evolved from the much older BPF filters). It is a virtual machine running in th‚Ä¶",
      "url": "https://unhandledexpression.com/2018/02/02/poc-compiling-to-ebpf-from-rust/",
      "date_published": "2018-02-02T20:33:08+00:00",
      "author": {
        "name": "Geoffroy Couprie",
        "url": "https://unhandledexpression.com/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "93d7f09d-e1eb-4d6a-a792-5765326730be",
      "title": "Make your own make",
      "content_text": "An obvious idea is to use Rust for task automation. Originally, I have proposed creating a special Cargo subcommand to execute build tasks, implemented as Rust programs, in this thread. However, since then I realized that there are built-in tools in Cargo which allow one to get a pretty ergonomic solution. Namely, the combination of workspaces, aliases and ability to define binaries seems to do the trick.",
      "url": "https://matklad.github.io/2018/01/03/make-your-own-make.html",
      "date_published": "2018-01-03T10:52:50+00:00",
      "author": {
        "name": "Aleksey Kladov",
        "url": "https://matklad.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "d2fc34d4-c1ec-4c3d-8e39-b420b8f20fe8",
      "title": "Memory Safety in Rust: A Case Study with C",
      "content_text": "To demonstrate the value of Rust's memory safety rules, I contrast the implementation of a simple vector library in C and Rust, highlighting where and how Rust's static analysis can prevent tricky memory errors.",
      "url": "http://willcrichton.net/notes/rust-memory-safety/",
      "date_published": "2018-02-02T00:00:00+00:00",
      "author": {
        "name": "Will Crichton",
        "url": "http://willcrichton.net/notes/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "1ccb8993-1118-4eb4-a1fb-0c6146948662",
      "title": "Benchmark of different Async approaches in Rust",
      "content_text": "The story about Rust‚Äôs async is still a bit in flux. There‚Äôs a bunch of libraries with their pros and cons and different approaches. Even I‚Äôm a bit to blame for that, as I‚Äôm writing one of my own, called Corona.",
      "url": "https://vorner.github.io/async-bench.html",
      "date_published": "2018-02-03T11:16:55+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "0cced83f-3736-4917-87a0-408fb4d9f6bb",
      "title": "Introduction to lyon: 2D vector graphics rendering on the GPU in Rust",
      "content_text": "Lyon is a side-project that I have been working on for quite a while. The goal is to play with rendering 2D vector graphics on the GPU, and it's been a lot of fun so far. I haven't talked a lot about it online (except for a couple of reddit threads a year or two ago) so I figured it would be a good topic to get this blog started.",
      "url": "https://nical.github.io/posts/lyon-intro.html",
      "date_published": "2018-01-22T00:00:00+01:00",
      "author": {
        "name": "Nical",
        "url": "https://nical.github.io/index.html"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "5c8f0581-5b1d-485b-852c-83c0deef73d5",
      "title": "Rust and WebAssembly with Turtle - /var/blog",
      "content_text": "In this post, I'll walk through a few of the highlights of getting Turtle, a Rust library for creating animated drawings, to run in the browser with WebAssembly.",
      "url": "https://varblog.org/blog/2018/01/08/rust-and-webassembly-with-turtle/",
      "date_published": "2018-01-08T09:54:00-06:00",
      "author": {
        "name": "Marshall Pierce",
        "url": "https://varblog.org/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "2168f429-844d-4629-97da-c149e9026cfd",
      "title": "mdcat - Cat for markdown: Show markdown documents in TTYs",
      "content_text": "Cat for markdown: Show markdown documents in TTYs",
      "url": "https://github.com/lunaryorn/mdcat",
      "date_published": "2018-02-03T18:23:00+11:00",
      "author": {
        "name": "Sebastian Wiesner",
        "url": "https://swsnr.de/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "e1a29851-ab4c-4739-a41f-56e9c783f5e4",
      "title": "Faster Progress Report 2",
      "content_text": "faster began as a yak shave, created to aid baseüíØ in its quest to become the fastest meme on Github. Writing an explicit AVX2-accelerated version of baseüíØ's encoder and decoder, then realizing I'd have to do the same thing again to see the speedups on my Ivy Bridge desktop, pushed me to make this library. Months later, it has blossomed into its own project, and has eclipsed baseüíØ in both popularity and promise.",
      "url": "https://adamniederer.com/blog/faster-pr-2.html",
      "date_published": "2018-01-28T22:14:41+00:00",
      "author": {
        "name": "Adam Niederer",
        "url": "https://adamniederer.com/blog/blog.html"
      },
      "tags": [
        "Performance",
        "Crates"
      ]
    },
    {
      "id": "d4191312-2442-4eb8-b313-67ba224829b6",
      "title": "Experimenting with the New I/O Framework (in Rust) for embedded systems",
      "content_text": "Notes on Code, by Pramode C.E",
      "url": "http://pramode.in/2018/01/31/ti-launchpad-with-rust-new-io/",
      "date_published": "2018-01-31T00:00:00-05:00",
      "author": {
        "name": "Pramode C.E",
        "url": "http://pramode.in/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "fb492342-c776-4f9a-8792-d82efebf109f",
      "title": "Thoughts on Rust",
      "content_text": "I‚Äôve been working on some rust projects recently and I really really love this language. I‚Äôd love it if one day I could get paid just to write rust! Until then, I‚Äôll make do with ‚Ä¶",
      "url": "https://barel.la/blog/2018/01/thoughts-on-rust/",
      "date_published": "2018-02-01T04:39:06+00:00",
      "author": {
        "name": "Dan Barella",
        "url": "https://barel.la/blog/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "99cd44d4-1722-4d1e-a002-693fac055af1",
      "title": "Rust should be an excellent open source citizen #rust2018",
      "content_text": "Here‚Äôs my late #rust2018 post. I contribute code to a lot of projects in a lot of different languages. I think it‚Äôs really important not to think about Rust in isolation, but in the context of the greater open source world. Here area few specific ways I think about this:",
      "url": "http://kamalmarhubi.com/blog/2018/01/31/rust2018/",
      "date_published": "2018-01-31T00:00:00-05:00",
      "author": {
        "name": "Kamal Marhubi",
        "url": "http://kamalmarhubi.com/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "cdf001ee-aea6-47e3-be58-527a3b7fdc08",
      "title": "Rust 2018: Libraries in the 2018 Epoch",
      "content_text": "The call for community blog posts has inspired lots of great responses. Most of the things that I feel are important have already been said. This post is a collection of thoughts on what I feel is important for Rust to flourish in the future. It is perhaps a bit late in the process, but it may add some new perspectives.",
      "url": "https://blog.zayenz.se/post/rust-2018/",
      "date_published": "2018-01-23T00:00:00+00:00",
      "author": {
        "name": "Zayenz",
        "url": "https://blog.zayenz.se/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "c752755c-985e-44d4-a15f-1dac8fffa86c",
      "title": "Rust is for Big Data (#rust2018)",
      "content_text": "This blog post isn‚Äôt so much about what I want from the Rust language in 2018, but more about where I see an opportunity for Rust to gain more widespread use in 2018.",
      "url": "https://andygrove.io/rust-is-for-big-data/",
      "date_published": "2018-01-29T06:07:21+11:00",
      "author": {
        "name": "Andy Grove",
        "url": "https://andygrove.io/blog"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "b02d9dda-9c01-481b-8111-0241bf8e99d4",
      "title": "Rust2018 - A year of talks",
      "content_text": "Before I address my hopes for Rust in 2018, I thought I'd look back at a year of meet ups that we've organised for London's Rust user group.",
      "url": "https://booyaa.wtf/2018/rust2018-a-year-of-talks/",
      "date_published": "2018-01-28T19:49:54+00:00",
      "author": {
        "name": "@booyaa",
        "url": "https://github.com/booyaa"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "e200a902-0b10-41fa-99ce-241d38311eea",
      "title": "On Safety, and How Rust Can Help",
      "content_text": "I‚Äôll first talk about my opinions about safety as an abstract concept and my experiences with practicing safety in various environments; I‚Äôll then talk about my experiences programming at work in C and Ruby; then I‚Äôll draw upon these to talk about what Rust can currently offer my work and what I believe it still needs in order for it to strengthen its utility and efficacy in our contexts.",
      "url": "https://myrrlyn.net/blog/misc/rust-2018",
      "date_published": "2018-01-28T07:25:16+00:00",
      "author": {
        "name": "Alexander Payne",
        "url": "https://myrrlyn.net/blog"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "9de23e26-5e53-4569-afb2-0576494c75f5",
      "title": "#Rust2018: no need to panic. ‚Ä¢ r/rust",
      "content_text": "Since you asked for blog posts, and I already read many of them that didn't share my concerns, here is my take. # What I did in 2017 (and also a...",
      "url": "https://www.reddit.com/r/rust/comments/7tcyh1/rust2018_no_need_to_panic/",
      "date_published": "2018-01-27T14:24:20+00:00",
      "author": {
        "name": "SelfDistinction",
        "url": "https://www.reddit.com/user/SelfDistinction"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "9a9ed680-6525-4c70-ae8a-c4c8f6941cf1",
      "title": "Thoughts about #Rust2018",
      "content_text": "I like the concepts behind rust. I haven't had as much chance to use it as I'd like - it isn't one of the approved languages at work, and ...",
      "url": "https://lliwynd.blogspot.com.au/2018/01/thoughts-about-rust2018.html",
      "date_published": "2018-01-27T14:35:00+11:00",
      "author": {
        "name": "William Uther",
        "url": "https://lliwynd.blogspot.com.au/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "d2189bca-0b13-451d-b70c-70ec43f7a207",
      "title": "Rust 2018: Improving Safety and Ergonomics for Low-Level Programming - Bobbin Blog",
      "content_text": "There‚Äôs been a lot written about what can be done to make Rust‚Äôs tooling, libraries and infrastructure better for embedded programming, but I‚Äôd like to cover a slightly different topic: what can be done to make Rust the language itself safer and easier to use for low-level programming?",
      "url": "http://www.bobbin.io/blog/post/rust_2018_low_level/",
      "date_published": "2018-01-26T14:00:00-04:00",
      "author": {
        "name": "Jonathan Soo",
        "url": "http://www.bobbin.io/blog/"
      },
      "tags": [
        "Rust 2018",
        "Embedded"
      ]
    },
    {
      "id": "a9de17fb-57cf-442a-988c-8ab1ec79b3db",
      "title": "Crate Management for #rust2018",
      "content_text": "When I started with Rust, I was planning on blogging about my experience. As I learned though, I found most of the documentation I needed was in blog posts that, though helpful, would give different suggestions without a hint as to why they solved the problems differently. This is frustrating for someone new because you just want to get your task done and not have to first research a whole other area. I realized that the more valuable route for me would be in improving documentation and tooling to serve as living documentation.",
      "url": "https://epage.github.io/blog/2018/01/crate-management/",
      "date_published": "2018-01-26T04:20:00+00:00",
      "author": {
        "name": "Ed Page",
        "url": "https://epage.github.io/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "ae85973e-7540-4027-b53a-ee41a249d124",
      "title": "Rust 2018: Core, Embedded+SIMD, Intermesiate documenation, Async ‚Ä¢ r/rust",
      "content_text": "Hi there! I'm Nico, and I've been lurking around these parts for about a year now. I thought I'd give my 2 cents on Rust's 2018 plans. Note: this...",
      "url": "https://www.reddit.com/r/rust/comments/7syxw4/rust_2018_core_embeddedsimd_intermesiate/",
      "date_published": "2018-01-25T20:12:01+00:00",
      "author": {
        "name": "Nico",
        "url": "https://www.reddit.com/user/nicoburns"
      },
      "tags": [
        "Rust 2018",
        "Embedded"
      ]
    },
    {
      "id": "35094e1a-b385-47a6-a93f-67f8842992d6",
      "title": "My #Rust2018 wishlist ‚Ä¢ r/rust",
      "content_text": "This addition to std could significantly change how people use rust. \"Secretly\" it requires some advanced features though. impl<T, const C:...",
      "url": "https://www.reddit.com/r/rust/comments/7sx6s9/my_rust2018_wishlist/",
      "date_published": "2018-01-25T16:22:17+00:00",
      "author": {
        "name": "Epicat Supercell",
        "url": "https://www.reddit.com/user/EpicatSupercell"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "1151cad4-ce36-4944-96d3-e6062f1daf97",
      "title": "The Job Advertising Story of Rust ‚Äì Vignesh Sankaran ‚Äì Medium",
      "content_text": "Note: This is the first blog post that I‚Äôve ever written. Feedback is much appreciated :).",
      "url": "https://medium.com/@vign_esh/the-job-advertising-story-of-rust-5c6394e8ecab",
      "date_published": "2018-01-22T10:44:36.238+00:00",
      "author": {
        "name": "Vignesh Sankaran",
        "url": "https://medium.com/@vign_esh"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "a59a299c-28d1-4c41-9563-47faea69a0b7",
      "title": "Embedded Rust in 2018 - Embedded in Rust",
      "content_text": "A blog about Rust and embedded stuff",
      "url": "http://blog.japaric.io/embedded-rust-in-2018/",
      "date_published": "2018-01-21T22:10:38+01:00",
      "author": {
        "name": "Jorge Aparicio",
        "url": "http://blog.japaric.io/"
      },
      "tags": [
        "Rust 2018",
        "Embedded"
      ]
    },
    {
      "id": "e2276407-cab7-48f6-8a4e-b981fbed0417",
      "title": "Rust and its stance in data science ‚Äì Eduardo Pinho ‚Äì Medium",
      "content_text": "This isn‚Äôt something that I would do very often, but a call was made, and I would like to take that chance to fill in some ideas with‚Ä¶",
      "url": "https://medium.com/@e_net4/rust-and-its-stance-in-data-science-76d2c5ad2363",
      "date_published": "2018-01-20T16:55:44.934+00:00",
      "author": {
        "name": "Eduardo Pinho",
        "url": "https://medium.com/@e_net4"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "268f9a5c-3a44-4ca8-b500-68fd045a2d47",
      "title": "Making Rust more awesome in 2018 - My wishlist¬∑ creativcoder's blog",
      "content_text": "Rustaceans may already be familiar with Read Rust 2018. Its really awesome to see all blog posts by other people. I‚Äôm yet to finish reading all of them :P\nAdding to the chain of wishlist and suggestions for Rust‚Äôs roadmap for 2018, here‚Äôs my Wishlist:",
      "url": "https://creativcoder.github.io/post/rust-2018/",
      "date_published": "2018-01-20T18:22:00+00:00",
      "author": {
        "name": "Rahul Sharma",
        "url": "https://creativcoder.github.io/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "0c26d758-55c5-4591-9c4f-5f0d2a6cc347",
      "title": "Rust 2018",
      "content_text": "What has gotten really, really good in rust-land as I remember this year:",
      "url": "http://techne.btbytes.com/2018/01/20/rust2018.html",
      "date_published": "2018-01-20T19:57:35-05:00",
      "author": {
        "name": "Pradeep Gowda",
        "url": "http://techne.btbytes.com/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "ce30f9ab-eef4-47c0-84e9-ffb704317314",
      "title": "Rust 2018 - Growing in elegance and responsibility",
      "content_text": "First; I have the utmost respect for the fact that I'm mostly sitting here wishing, while other people do the actual work. But since you asked...",
      "url": "https://gist.github.com/diwic/6aa9da5d088c09e2fc93858928878b48",
      "date_published": "2018-01-11T07:41:14+00:00",
      "author": {
        "name": "Diwic",
        "url": "https://github.com/diwic"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "3f3b1ba5-ee90-4ece-b303-2c083010602e",
      "title": "Rust in 2018, another point of view",
      "content_text": "I wanted to write a post laying down my thoughts about Rust for a long time, and it seems like the perfect time to do so. Most of the things I've said have been touched upon recently, and probably more aptly, but here it is nonetheless!",
      "url": "https://kelseasy.github.io/001-Rust2018.html",
      "date_published": "2018-01-19T22:57:00+00:00",
      "author": {
        "name": "Kelsey Zapata",
        "url": "https://kelseasy.github.io/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "329c3ef3-1602-477e-9a38-e5becaf2aab1",
      "title": "Rust2018 And The Great Cli Awakening",
      "content_text": "This is a response to the #Rust2018 call for blog posts with a little bit of my experience and how I see the 2018 year mo...",
      "url": "http://vitiral.github.io/2018/01/17/rust2018-and-the-great-cli-awakening.html",
      "date_published": "2018-01-17T00:00:00+00:00",
      "author": {
        "name": "Garrett Berg",
        "url": "http://vitiral.github.io/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "a1e767fe-7557-4092-8f54-2071617c89b3",
      "title": "How can I help Stabilize Things?",
      "content_text": "A friend and I are working on adding Rust support to Metaparticle. We did a simple search for ‚Äúdecorators in Rust‚Äù and found this repo, which seemed promising. My friend added it, but s‚Ä¶",
      "url": "https://willmurphyscode.net/2018/01/18/how-can-i-help-stabilize-things/",
      "date_published": "2018-01-18T12:23:55+00:00",
      "author": {
        "name": "willmurphyscode",
        "url": "https://willmurphyscode.net/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "41624f5a-61da-4a5b-a347-5918dccfe3a9",
      "title": "Technical Debt",
      "content_text": "I have to 100% agree with @nrc's post. I feel like Rust has a lot of great things in the pipeline, but it worries me that there are so many open tracking issues and open issues in general (over 3100 at time of writing).\n\nA lot has been written already about this, so instead I will focus on a few areas of technical debt that I see as particularly high-impact.",
      "url": "https://gist.github.com/mark-i-m/5bccf4dd7d97751eba542fea84b41a9d",
      "date_published": "2018-01-18T00:58:22+00:00",
      "author": {
        "name": "mark-i-m",
        "url": "https://github.com/mark-i-m"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "56bc0e93-0a95-40ce-b60e-7f50c6e41560",
      "title": "matraszek.net - Rust 2018",
      "content_text": "I am pretty amazed that the Rust team always tries to get information about Rust usage from its users. Having a great vision is important, but it may not be enough to succeed. It is crucial to convince people to use Rust, and to know how to do that, we must take the perspective of the people who DO NOT use Rust.",
      "url": "http://matraszek.net/posts/rust-2018.html",
      "date_published": "2018-01-16T23:31:00+01:00",
      "author": {
        "name": "Jakub Matraszek",
        "url": "http://matraszek.net/posts/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "db216954-cdc9-4253-a155-6e9c7a25cd39",
      "title": "Retooling the Rust Libs Team team for 2018 ¬∑ Aaron Turon",
      "content_text": "The Libs Team met today to discuss a weighty topic: what is its mission as a team, and are we set up to achieve it?\n\nAs team lead, I took the liberty of proposing a mission statement:\n\nTo improve the quality of the crate ecosystem, as a product.",
      "url": "http://aturon.github.io/blog/2018/01/16/libs-mission/",
      "date_published": "2018-01-16T00:00:00-08:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/blog/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "b82f509d-28c8-4859-afe4-a9d4e47538d0",
      "title": "Rust 2018 - Just 2 \"little things\" ‚Ä¢ r/rust",
      "content_text": "Well. Just two \"minor\" points: 1. Game Development Libraries 2. Rust idomatic GUI Frameworks",
      "url": "https://www.reddit.com/r/rust/comments/7qv1gu/rust_2018_just_2_little_things/",
      "date_published": "2018-01-16T19:58:55+00:00",
      "author": {
        "name": "CodingChris",
        "url": "https://www.reddit.com/user/CodingChris"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "9b240369-ee8e-4d0d-8914-92bbb0145411",
      "title": "Fortanix Blog | Secure by design:  Rust and Runtime Encryption",
      "content_text": "At Fortanix, we are big proponents of deterministic security.  Designing in security from the get-go by using secure programming principles is a big part of that.",
      "url": "https://www.fortanix.com/blog/2018/01/secure-by-design-rust-and-runtime-encryption/",
      "date_published": "2018-01-16T00:00:00+00:00",
      "author": {
        "name": "Jethro Beekman",
        "url": "https://www.fortanix.com/blog/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "35c2903a-687a-448d-b594-c46ee423989d",
      "title": "Using static typing to protect against code injection attacks",
      "content_text": "Code injection attack is a method of taking advantage of a flaw where an application can be tricked to relay malicious code from a system‚Ä¶",
      "url": "https://medium.com/sensorfu/using-static-typing-to-protect-against-code-injection-attacks-353002ca6f2b",
      "date_published": "2018-01-16T12:33:25.545+00:00",
      "author": {
        "name": "Ossi Herrala",
        "url": "https://medium.com/@oherrala"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "11b9b0c3-6cde-450a-91b8-41e4bfc0a514",
      "title": "Rust 2018 - Sergey Potapov",
      "content_text": "With this post, I would like to give my feedback to the rust community in the\nscope of A Call for Community Blogposts. This article is structured in ‚Ä¶",
      "url": "http://greyblake.com/blog/2018/01/16/rust-2018/",
      "date_published": "2018-01-16T00:08:00+01:00",
      "author": {
        "name": "Sergey Potapov",
        "url": "http://greyblake.com/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "5fdd7918-2122-4ff3-875c-0facf2bcd1f1",
      "title": "#Rust2018 - Exploring New Contribution and Feedback Models",
      "content_text": "Since I'm coming pretty late to the #Rust2018 party, most of the things I wanted to say have already been said! Ashley's kick-off post was kind of a meta-#Rust2018 for me, calling for us to experiment with new ways to get community feedback in Rust. I personally really enjoyed",
      "url": "http://yehudakatz.com/2018/01/15/rust-2018/",
      "date_published": "2018-01-15T20:40:51+00:00",
      "author": {
        "name": "Yehuda Katz",
        "url": "http://www.yehudakatz.com/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "40d80139-ee61-4eb1-9a66-eb3fba32430f",
      "title": "Rust in 2018: Let‚Äôs fix where the bullet holes aren‚Äôt",
      "content_text": "Although I‚Äôm a rust beginner, I‚Äôve thoroughly enjoyed reading all the Rust 2018 blogposts lately. And as a systems engineer who leans‚Ä¶",
      "url": "https://medium.com/@cevans3326/rust-in-2018-lets-fix-where-the-bullet-holes-aren-t-7e94cea0bd53",
      "date_published": "2018-01-16T05:49:36.867+00:00",
      "author": {
        "name": "Chris Evans",
        "url": "https://medium.com/@cevans3326"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "3936cf7f-ef74-4203-9302-bcce349e9ca5",
      "title": "A Year with Rust Game Dev",
      "content_text": "Never Slow Down.",
      "url": "http://druerridge.com/?p=536",
      "date_published": "2018-01-14T00:00:00+00:00",
      "author": {
        "name": "Dru Erridge",
        "url": "http://druerridge.com/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "c7becfa2-4e61-490a-838c-7b207956e21f",
      "title": "Rust MMXVIII, but, like, from a casual perspective ‚Äì Yoshua Wuyts ‚Äì Medium",
      "content_text": "*ring ring*",
      "url": "https://medium.com/@yoshuawuyts/rust-mmxviii-but-like-from-my-perspective-6363f485ab2b",
      "date_published": "2018-01-14T14:46:43.092+00:00",
      "author": {
        "name": "Yoshua Wuyts",
        "url": "https://medium.com/@yoshuawuyts"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "e7a79828-6bc7-4b09-ac5a-4be76f4a18d4",
      "title": "My Rust hopes for 2018 ‚Ä¢ r/rust",
      "content_text": "There are plenty of exciting language features which should land in 2018, I'd love to see further reductions in compile times, and there are a lot...",
      "url": "https://www.reddit.com/r/rust/comments/7qd725/my_rust_hopes_for_2018/",
      "date_published": "2018-01-14T17:32:16+00:00",
      "author": {
        "name": "theotherphil",
        "url": "https://www.reddit.com/user/theotherphil"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "87cb487b-6922-4675-b3d9-9a6767bb5a1c",
      "title": "Rust in 2018 ‚Äì Dirkjan Ochtman",
      "content_text": "In a call for blog posts, the Rust community team asked community members to write up their vision for what the Rust community should focus on this year. I've wanted to contribute my thoughts and have been thinking about what to write ever since. I've been able to benefit from the many people who already posted their thoughts to sharpen my own thinking. I came up with 5 categories:",
      "url": "https://dirkjan.ochtman.nl/writing/2018/01/14/rust-in-2018.html",
      "date_published": "2018-01-14T00:00:00+01:00",
      "author": {
        "name": "Dirkjan Ochtman",
        "url": "https://dirkjan.ochtman.nl/writing"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "4bf00d31-d65c-43fc-b95a-5caa3df0ac4b",
      "title": "Rust2018 ‚Äì Doug Tangren ‚Äì Medium",
      "content_text": "Rust, in no small way, has captured quite a bit of my imagination in the last 4 and a half years. The language and community has a lot of‚Ä¶",
      "url": "https://medium.com/@softprops/rust2018-75393b4a086f",
      "date_published": "2018-01-14T22:07:16.240+00:00",
      "author": {
        "name": "Doug Tangren",
        "url": "https://medium.com/@softprops"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "f3f500d5-d108-4f83-808e-e15ad520cce7",
      "title": "Embedded Rust in 2018",
      "content_text": "I recently picked up an embedded project that I hadn't touched for a few months, so I could add some new features. I was disappointed to not...",
      "url": "http://railwayelectronics.blogspot.com.au/2018/01/i-recently-picked-up-embedded-project.html",
      "date_published": "2018-01-14T00:00:00+00:00",
      "author": {
        "name": "theJPster",
        "url": "http://railwayelectronics.blogspot.com.au/"
      },
      "tags": [
        "Rust 2018",
        "Embedded"
      ]
    },
    {
      "id": "4d4b233f-fba3-4e3e-9e80-fe79603a38b0",
      "title": "#Rust2018: A Neon Wish List",
      "content_text": "While I‚Äôve been thoroughly enjoying the Rust community‚Äôs spirited #Rust2018 blog-fest, I wasn‚Äôt really thinking of participating myself until Julia Evans pointed out the leadership wants to hear from everyone‚Äîeven if I might not have anything especially new to add. So here‚Äôs my little wish list for Rust in 2018. Since I‚Äôm not in Rust‚Äôs leadership, I don‚Äôt have to worry about synthesizing some grand narrative for the whole of Rust. So I‚Äôll just focus on a few things that would be personally useful to me. In particular, I‚Äôll stick to topics that would be helpful for my Neon project, a set of bindings for writing native Node extension modules in Rust.",
      "url": "http://calculist.org/blog/2018/01/13/rust-2018-a-neon-wish-list/",
      "date_published": "2018-01-13T17:45:00-08:00",
      "author": {
        "name": "David Herman",
        "url": "http://calculist.org/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "6b8e7f04-ece2-4dd1-9256-4ce6881d3c11",
      "title": "Most desired from Rust in 2018",
      "content_text": "Recently there was a call for community blog posts themed about ideas and expectation for Rust in the coming year. I definitely can't count myself as part of community yet as my experience with Rust so far has been purely about experimenting and research but it feels like a great opportunity to share my thoughts so far.",
      "url": "https://blog.mist.global/articles/Most_desired_from_Rust_in_2018.html",
      "date_published": "2018-01-14T12:17:42+00:00",
      "author": {
        "name": "Mihails Strasuns",
        "url": "https://blog.mist.global/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "2a2b7699-5a1a-4379-8a33-3faf4badd512",
      "title": "2018: The year we learn Rust 1.0",
      "content_text": "This is my reply to Rusts call for community blog posts.\n\nI‚Äôm known for being quite happy with Rust as is. Indeed, my first post on focusing on stable Rust was more than 2 years ago ;).\n\nAlso, note that I‚Äôve been interested (and practically involved) in the growing and adoption of programming languages since around 2004, which was when I started doing users support for Ruby in Germany.",
      "url": "http://yakshav.es/rust-2018/",
      "date_published": "2018-01-12T11:33:54+00:00",
      "author": {
        "name": "Florian Gilcher",
        "url": "http://yakshav.es/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "59a502dd-84c7-4ad1-9a78-7d042495a25b",
      "title": "Rust - My wish list for 2018  ¬∑ Murali's Blog ",
      "content_text": "I am excited about Rust after spending a little time with it last year. Here are my thoughts on how it can improve in 2018.",
      "url": "http://www.mmrath.com/post/rust-my-wish-list-for-2018/",
      "date_published": "2018-01-06T00:00:00+00:00",
      "author": {
        "name": "Murali Mohan Rath",
        "url": "http://www.mmrath.com/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "79f7ee1c-a798-4241-bc2a-902f8a16c548",
      "title": "Rust 2018 - machine learning perspective ‚Ä¢ r/rust",
      "content_text": "Since we have this January blogging stream, I would like to talk about using Rust for machine learning. First, I would like to point out, that I...",
      "url": "https://www.reddit.com/r/rust/comments/7p6rpw/rust_2018_machine_learning_perspective/",
      "date_published": "2018-01-09T12:26:35+00:00",
      "author": {
        "name": "osamc",
        "url": "https://www.reddit.com/user/osamc"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "072421d7-7def-43b7-b3f8-441d735cba8c",
      "title": "Happy New Year 2018",
      "content_text": "For me it's also a chance to do a review of the year 2017. Most of it I spend on a Rust implementation of PBRT (beside working for The Mill and making sure we can deliver our moving images, rendered most of the time with Arnold).",
      "url": "https://www.janwalter.org/jekyll/review/2017/2018/01/01/happy-new-year-2018.html",
      "date_published": "2018-01-01T00:00:00+00:00",
      "author": {
        "name": "Jan Walter",
        "url": "https://www.janwalter.org/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "92c745cd-26fa-41e0-8b1b-a9827873af6e",
      "title": "Rust 2018",
      "content_text": "There‚Äôs a call for the community to write what they‚Äôd like to see in Rust in the following year. So, here it goes. And yes, this is a bit personal, what I would like to see in Rust ‚Äí I fully respect that others have different needs and that not my every wish need to be granted, because someone else will have a better idea for sure.",
      "url": "https://vorner.github.io/rust-2018.html",
      "date_published": "2018-01-08T21:40:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "afadc638-f50b-42a3-a058-a475109ce9a7",
      "title": "Rust 2018: maybe don‚Äôt be too stable",
      "content_text": "I initially did not want to write a post with what I want and foresee for Rust in 2018, because I‚Äôm already very happy with it! I have spent more than 4 years tinkering with the language, exp‚Ä¶",
      "url": "https://unhandledexpression.com/2018/01/10/rust-2018-maybe-dont-be-too-stable/",
      "date_published": "2018-01-10T18:25:14+00:00",
      "author": {
        "name": "Geoffroy Couprie",
        "url": "https://unhandledexpression.com/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "4a40cb13-61ed-461e-9117-57e3a530ab61",
      "title": "Snips big wish for #Rust2018: libraries or portability, pick two",
      "content_text": "Snips engineering team works on shipping vocal assistants to mobile platforms (iOS and android) and a growing diversity of single board‚Ä¶",
      "url": "https://medium.com/snips-ai/snips-big-wish-for-rust2018-libraries-or-portability-pick-two-814d104586d9",
      "date_published": "2018-01-09T17:38:31.679+00:00",
      "author": {
        "name": "Mathieu Poumeyrol",
        "url": "https://medium.com/@mathieu.poumeyrol"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "9bd09566-0ba0-47a2-9400-a01a0e218e51",
      "title": "Rust incremental-difficulty tutorial series ‚Äì Theodore Keloglou ‚Äì Medium",
      "content_text": "A response to Rust‚Äôs Call for Community Blogposts #Rust2018",
      "url": "https://medium.com/@sirodoht/rust-incremental-difficulty-tutorial-series-8c09ecdd38e7",
      "date_published": "2018-01-03T23:16:35.588+00:00",
      "author": {
        "name": "Theodore Keloglou",
        "url": "https://medium.com/@sirodoht"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "6aea5335-d3b5-4c36-be35-8461d9206149",
      "title": "Rust and crate of wishes for 2018 ‚Äì Nabeel Ali Memon ‚Äì Medium",
      "content_text": "I appreciate the great community effort being fostered by Mozilla‚Äôs Rust team and the cool Rust community outside that have been helpful in‚Ä¶",
      "url": "https://medium.com/@nimtiazm/rust-and-crate-of-wishes-for-2018-1258f6977d42",
      "date_published": "2018-01-13T09:14:15.330+00:00",
      "author": {
        "name": "Nabeel Ali Memon",
        "url": "https://medium.com/@nimtiazm"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "28b10d91-030e-4828-b02e-4d173b8cfab9",
      "title": "Rust in 2018 ‚Äì Black Djikstra ‚Äì Medium",
      "content_text": "As a beginner in rust, it has been the gateway to so many interesting concepts.",
      "url": "https://medium.com/@blackdjikstra/rust-in-2018-d6c0be87cba8",
      "date_published": "2018-01-12T23:05:58.997+00:00",
      "author": {
        "name": "Black Djikstra",
        "url": "https://medium.com/@blackdjikstra"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "914dd414-184a-4d72-adfe-cea12e7a9fe4",
      "title": "What Rust Needs in 2018 to Succeed ‚Äî Llogiq on stuff",
      "content_text": "In the spirit of the current Rust blog post extravaganza, here are my 2¬¢ on the most important work to make Rust win big",
      "url": "https://llogiq.github.io/2018/01/09/rust.html",
      "date_published": "2018-01-09T00:00:00+00:00",
      "author": {
        "name": "llogiq",
        "url": "https://llogiq.github.io/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "0304d95e-71f7-47c8-b415-5d6d2ffb5e85",
      "title": "Looking in on Rust in 2018",
      "content_text": "With the call for #Rust2018 blog posts on how this year‚Äôs roadmap should look, I figured I‚Äôd chime in with a few items. Now, I‚Äôm not using Rust in any shape or form in my day-to-day life (though I‚Äôd like to!), but I follow along with the community because so many exciting things happen, and I find Rust itself to be a breath of fresh air. In other words, my view is shaped mostly by my role as observer (rather than active participant), and the primary need I want to address is to make it easier to convince coworkers and higher-ups to give Rust a shot.",
      "url": "https://kasma1990.gitlab.io/2018/01/07/looking-in-on-rust-in-2018/",
      "date_published": "2018-01-07T00:00:00+00:00",
      "author": {
        "name": "Kasper Andersen",
        "url": "https://kasma1990.gitlab.io/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "f281d4cb-864b-4afa-98be-67a773a5bbf5",
      "title": "My desired features for a Rust debugger",
      "content_text": "Backward stepping Most debuggers provide the following commands: Step into the next function (reaching its beginning-point) Hop over the next function call Jump to the end of the current function R‚Ä¶",
      "url": "https://carlomilanesi.wordpress.com/2018/01/04/my-desired-features-for-a-rust-debugger/",
      "date_published": "2018-01-04T02:36:54+00:00",
      "author": {
        "name": "Carlo Milanesi",
        "url": "https://carlomilanesi.wordpress.com/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "547cd24b-800d-406a-8608-62197c4a23f2",
      "title": "Rust in 2018: feature polish and notes on abstraction",
      "content_text": "Despite the overwhelming success of the impl period, many of the features tackled are massive undertakings which could not possibly have been polished in suc...",
      "url": "https://byte.observer/posts/2018/01/12/rust-2018",
      "date_published": "2018-01-12T04:11:49+00:00",
      "author": {
        "name": "Noah Weninger",
        "url": "https://byte.observer/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "92a3a3bb-1858-49c7-9a91-7750060fdedf",
      "title": "2017 in Rust",
      "content_text": "Inspired by the Call for Community Blogposts I want to summarize my experiences and thoughts on Rust in 2017 and what I am excited about for 2018.\nReflecting 2017 2017 was an amazing year for Rust. We got 8 releases of rust itself! We got basic procedural macros allowing custom derive (also known as ‚Äúmacros 1.1‚Äù) in the first release last year (1.15.0). This made serde 1.0 possible, if I‚Äôm not mistaken?",
      "url": "https://beyermatthias.de/blog/2018/01/05/2017-in-rust/",
      "date_published": "2018-01-05T19:00:00+00:00",
      "author": {
        "name": "Matthias Beyer",
        "url": "https://beyermatthias.de/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "fa1c0f13-5a61-40d8-8ac5-0c702578abd8",
      "title": "What I‚Äôd Like To See In Rust",
      "content_text": "blog post on thoughts for rust 2018",
      "url": "https://austinstig.github.io/rs2018/post",
      "date_published": "2018-01-04T15:59:54+00:00",
      "author": {
        "name": "austinstig",
        "url": "https://github.com/austinstig"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "75ae624e-fe9b-4705-9bc2-99066deeb214",
      "title": "Rusting as a student - ",
      "content_text": "At the request of the Rust team, the community was tasked with writing blog posts talking about the future and history of rust as it would pertain to improving the language in 2018. I thought I'd take the opportunity to finally begin writing, since it seems like blogging is all the rage nowadays.",
      "url": "http://samuelresendez.me/scribbles/sophomore_rust.html",
      "date_published": "2018-01-13T04:04:26+00:00",
      "author": {
        "name": "samuelresendez",
        "url": "http://samuelresendez.me/scribbles/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "e769013d-619e-4180-8ca7-3960e1440ea1",
      "title": "Fast Rust in 2018",
      "content_text": "Rust is already a fast language, but there are still many opportunities to make it the fast language. While many people will rightfully focus on usability, tooling, and community goals for 2018, I will focus on some exciting changes which will make Rust the star of HPC.",
      "url": "https://adamniederer.com/blog/rust-2018.html",
      "date_published": "2018-01-12T07:07:37+00:00",
      "author": {
        "name": "Adam Niederer",
        "url": "https://adamniederer.com/blog/blog.html"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "cb089afe-f076-4527-bb9a-342be41414e1",
      "title": "Rust in 2018: it's way easier to use! - Julia Evans",
      "content_text": "Rust in 2018: it's way easier to use!",
      "url": "https://jvns.ca/blog/2018/01/13/rust-in-2018--way-easier-to-use/",
      "date_published": "2018-01-14T06:05:00+00:00",
      "author": {
        "name": "Julia Evans",
        "url": "https://jvns.ca/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "8a17aa75-d002-4e09-bfdf-d5d38241950c",
      "title": "rust2018.md",
      "content_text": "First a few words about me. I was and still am a student, and most of my coding is for learning and because it is fun. Also, coding is a great excuse for procrastinating something more important :). Having contributed to open source codebases has helped me determine that I want to do this in a day job once I'm done with my studies.",
      "url": "https://gist.github.com/est31/c063704716b6880fd74ce2ba11b11298",
      "date_published": "2018-01-08T02:42:14+00:00",
      "author": {
        "name": "est31",
        "url": "https://github.com/est31"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "1cc61fb9-22bb-476d-b133-c1c38d2e9f64",
      "title": "Goals and Directions for Rust in 2018 - WezM.net by Wesley Moore",
      "content_text": "Reflecting on Rust in 2017 and what might be worth focussing on in 2018.",
      "url": "http://www.wezm.net/technical/2018/01/goals-directions-rust-2018/",
      "date_published": "2018-01-07T13:07:00+11:00",
      "author": {
        "name": "Wesley Moore",
        "url": "http://www.wezm.net/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "438424a8-c55f-49c7-9860-683e805bc36e",
      "title": "#Rust2018 goals for 2018 ‚Ä¢ r/rust",
      "content_text": "My 2 cents: Totally agree with people who say we need an \"impl year\", but also I would love to see wasm become a first class platform. I think...",
      "url": "https://www.reddit.com/r/rust/comments/7oyj9j/rust2018_goals_for_2018/",
      "date_published": "2018-01-08T13:35:48+00:00",
      "author": {
        "name": "richhyd",
        "url": "https://www.reddit.com/user/richhyd"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "91e2a724-3253-43ec-8b62-bd6285d7895c",
      "title": "Rust2018: back to the roots ‚Ä¢ r/rust",
      "content_text": "I can think of many goals for Rust in 2018, but for me at least 2017 went through pretty quickly, so I asked myself the question: If I could...",
      "url": "https://www.reddit.com/r/rust/comments/7p6n90/rust2018_back_to_the_roots/",
      "date_published": "2018-01-09T11:59:53+00:00",
      "author": {
        "name": "0b_0101_001_1010",
        "url": "https://www.reddit.com/user/0b_0101_001_1010"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "9415f407-45c8-430e-b4e2-a6947848acaf",
      "title": "A traveller's journey into Rust 2017, 2018",
      "content_text": "A Year Of Rust",
      "url": "https://blog.x5ff.xyz/blog/a-journey-into-rust-2018/",
      "date_published": "2018-01-08T00:00:00+00:00",
      "author": {
        "name": "Claus",
        "url": "https://blog.x5ff.xyz/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "c6752215-9ccb-4c67-b512-bd2cfdcaae86",
      "title": "Rust2018 Wishpost: Better Debug derive ‚Ä¢ r/rust",
      "content_text": "It was asked that everyone talk about what they want to see happen with Rust in 2018, and I'm sure a lot of folks will be saying a lot of things....",
      "url": "https://www.reddit.com/r/rust/comments/7p4imw/rust2018_wishpost_better_debug_derive/",
      "date_published": "2018-01-09T04:05:10+00:00",
      "author": {
        "name": "Lokathor",
        "url": "https://www.reddit.com/user/Lokathor"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "f114d011-5554-4169-8cca-d01512308bab",
      "title": "Rust in 2018 - In Pursuit of Laziness",
      "content_text": "A week ago we put out a call for blog posts for what folks think Rust should do in 2018. This is mine. Overall focus I think 2017 was a great year ‚Ä¶",
      "url": "https://manishearth.github.io/blog/2018/01/10/rust-in-2018/",
      "date_published": "2018-01-10T00:00:00+00:00",
      "author": {
        "name": "Manish Goregaokar",
        "url": "https://manishearth.github.io/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "9f51e626-4330-4ddd-984a-34e3b582b171",
      "title": "#Rust2018 FtW (For the Web) ‚Ä¢ r/rust",
      "content_text": "*below post is going to update quite often accordingly* This idea is actually something i got from someone else - \"now that Rust is getting...",
      "url": "https://www.reddit.com/r/rust/comments/7q53d6/rust2018_ftw_for_the_web/",
      "date_published": "2018-01-13T15:36:28+00:00",
      "author": {
        "name": "tuxmanexe",
        "url": "https://www.reddit.com/user/tuxmanexe"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "ae0144fa-a8c5-416f-8c2c-02ae2ad11c79",
      "title": "A libz blitz retrospective",
      "content_text": "This post is my personal retrospective of the libz blitz and my part in it. It's also a loose response to the #Rust2018 call for blog posts and a chance to show off my amazingly poor drawing skills. For the part most relevant to #Rust2018, see the last section.",
      "url": "https://gist.github.com/KodrAus/953e8182e81d8d9147cd32822748665f#a-libz-blitz-retrospective",
      "date_published": "2018-01-13T23:50:22+00:00",
      "author": {
        "name": "Ashley Mannix",
        "url": "https://github.com/KodrAus"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "b1a7569d-c5e6-41d9-99ea-18c4b7e9105e",
      "title": "Rust in 2018: Streamline Collaboration and Empower Intermediate Users",
      "content_text": "I wrote about the ...",
      "url": "https://matthias-endler.de/2018/rust-2018/",
      "date_published": "2018-01-09T00:00:00+00:00",
      "author": {
        "name": "Matthias Endler",
        "url": "https://matthias-endler.de/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "c506e8b8-69f1-4f39-803a-6e3a34c06145",
      "title": "Pollen Robotics call for #Rust2018: toward stability on embedded systems",
      "content_text": "Robotics developers face two main problems:",
      "url": "https://medium.com/pollenrobotics/rust-for-robotics-and-embedded-systems-in-2018-96e9be8464",
      "date_published": "2018-01-12T13:32:49.383+00:00",
      "author": {
        "name": "Pierre Rouanet",
        "url": "https://medium.com/@pierre.rouanet"
      },
      "tags": [
        "Rust 2018",
        "Embedded"
      ]
    },
    {
      "id": "067c467f-3922-40d0-a0e6-f35eafeaffc7",
      "title": "Next for Rust",
      "content_text": "Next for Rust in 2018",
      "url": "http://gilescope.ninja/rust/2018/01/11/Next-for_Rust.html",
      "date_published": "2018-01-11T16:33:12+00:00",
      "author": {
        "name": "gilescope",
        "url": "http://gilescope.ninja/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "681f1733-be53-4798-9198-6a1562783fd5",
      "title": "Branchless #Rust2018",
      "content_text": "About an oportunity for Rust, as part of the #Rust2018 request",
      "url": "https://bluejekyll.github.io/blog/rust/2018/01/10/branchless-rust.html",
      "date_published": "2018-01-10T07:00:00+00:00",
      "author": {
        "name": "Benjamin Fry",
        "url": "https://bluejekyll.github.io/blog/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "bea672e3-d5bb-4008-9439-76fe914f46a7",
      "title": "#Rust2018",
      "content_text": "I don‚Äôt have a wish list of Rust features that don‚Äôt already exist. Rather, I mainly wish that in 2018, Rust committed to certain things that already work in nightly Rust and have worked for a couple of years now.",
      "url": "https://hsivonen.fi/rust2018/",
      "date_published": "2018-01-11T00:00:00+00:00",
      "author": {
        "name": "Henri Sivonen",
        "url": "https://hsivonen.fi/author/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "80e6cc62-73cd-4b55-bcbf-5770348ed843",
      "title": "#rust2018 - cross compiling? ‚Ä¢ r/rust",
      "content_text": "I don‚Äôt have a blog or anything, I just wanted to mention an aspect of rust that could use some love this year - cross compiling. Right now...",
      "url": "https://www.reddit.com/r/rust/comments/7phh1l/rust2018_cross_compiling/",
      "date_published": "2018-01-10T18:16:51+00:00",
      "author": {
        "name": "lurebat",
        "url": "https://www.reddit.com/user/lurebat"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "df1ee60b-5fb1-49a4-a0e8-1f05961ed250",
      "title": "Rust In 2018",
      "content_text": "Rust in 2018 This short post is a reflection on Rust in 2017 and some ideas I would love to see in 2018 written in the spirit of this blog post. I will keep things brief and try not to repeat what others have already shared. There have been many wonderful ideas that makes me even more enthusiastic about Rust so I hope that I can add to the excitement with a few of my own.",
      "url": "https://gsquire.github.io/static/post/rust-in-2018/",
      "date_published": "2018-01-10T19:05:55-08:00",
      "author": {
        "name": "Garrett Squire",
        "url": "https://gsquire.github.io/static/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "8104012c-3de8-4824-b11f-9bbaafff2408",
      "title": "Refutable Let and Rust in 2018",
      "content_text": "Examining RFC 1303 Add a `let...else` expression",
      "url": "https://dev.to/cad97/refutable-let-and-rust-in-2018-4l3k",
      "date_published": "2018-01-11T00:00:00+00:00",
      "author": {
        "name": "Christopher Durham",
        "url": "https://dev.to/cad97"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "19c0f10d-e9a9-4f53-9f6f-08a106809a30",
      "title": "Rust 2018",
      "content_text": "Instead of fire flowers,this year the Rust Team made a public call for blogposts, asking the community to write posts thatreflect on Rust in 2017 and what they wish for Rust in 2018. What follows are some of the things I personally see as important,and that I‚Äôd love to prioritize on in the following months.",
      "url": "https://deterministic.space/rust-2018.html",
      "date_published": "2018-01-10T00:00:00+01:00",
      "author": {
        "name": "Pascal Hertleif",
        "url": "https://deterministic.space/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "818cfee5-06f3-4d25-b4b9-cafb65a57697",
      "title": "#Rust2018 ‚Äî Aimlessly Going Forward",
      "content_text": "I use Rust to write simple computer games as a hobby. I'm not a professional or even an experienced game developer. The reason I picked up Rust is because I wanted something that...",
      "url": "https://aimlesslygoingforward.com/blog/2018/01/10/rust-2018/",
      "date_published": "2018-01-10T00:00:00+00:00",
      "author": {
        "name": "Tomas Sedovic",
        "url": "https://aimlesslygoingforward.com/blog/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "60351f3f-c088-42df-819e-a3ad0c44772a",
      "title": "Rust in 2018: a people perspective ¬∑ Aaron Turon",
      "content_text": "The call for #Rust2018 blog posts has generated a fantastic set of responses so far, and there‚Äôs already an emerging consensus around much of the technical focus for the year. Since I largely agree with what others have said on that front, I want to focus my post on the people side of things: what kind of impact do we want to make on people, both contributors and customers, in 2018?",
      "url": "http://aturon.github.io/blog/2018/01/09/rust-2018/",
      "date_published": "2018-01-09T00:00:00-08:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/blog/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "b17769a4-33cf-476a-ab72-88760bf8e8ec",
      "title": "Talking about how we talk about Rust in 2018",
      "content_text": "In this post, I want to talk about how we talk about Rust in 2018. I think there are some ways we can change what we‚Äôre saying and how we‚Äôre saying it. These changes will help Rust be more approachable for beginners and an even nicer place in general.",
      "url": "http://www.jonathanturner.org/2018/01/how-we-talk-about-rust-in-2018.html",
      "date_published": "2018-01-10T00:00:00+00:00",
      "author": {
        "name": "Jonathan Turner",
        "url": "http://www.jonathanturner.org/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "bd4a7ce1-c702-4965-b9c4-01e0ffca352b",
      "title": "My Goals for Rust in 2018",
      "content_text": "The Rust project has requested blog posts about the project‚Äôs goals for 2018. I found myself in pretty much complete agreement with Nick Cameron‚Äôs post, so I thought instead I would write about my own personal goals for Rust in 2018. I am fortunate enough to work on Rust full-time; modulated by the work that needs to get done to accomplish larger team goals, these are some things that I‚Äôm individually very motivated to make progress on in 2018.",
      "url": "https://boats.gitlab.io/blog/post/2018-01-08-goals-for-rust/",
      "date_published": "2018-01-09T00:00:00+00:00",
      "author": {
        "name": "withoutboats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "8595c82d-ae75-4e7c-8e19-e7458849d61b",
      "title": "Looking back at Rust in 2018 ‚Ä¢ Steve Klabnik",
      "content_text": "A careful reader will note the date of this post; it‚Äôs fundamentally in response to this call for blog posts, with a rhetorical device of looking backwards as if my personal plans for Rust came true. If you‚Äôre reading this in 2019 or beyond, this... | Steve Klabnik | &ldquo;The most violent element in society is ignorance.&rdquo; - Emma Goldman",
      "url": "http://words.steveklabnik.com/looking-back-at-rust-in-2018",
      "date_published": "2018-01-09T00:00:00+00:00",
      "author": {
        "name": "Steve Klabnik",
        "url": "http://words.steveklabnik.com/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "fa46df66-4a9e-4500-8d64-270c723b1071",
      "title": "#Rust2018",
      "content_text": "As part of #Rust2018, I thought I would try to writeup my own (current) perspective. I‚Äôll try to keep things brief. First and foremost, I think that this yea...",
      "url": "http://smallcultfollowing.com/babysteps/blog/2018/01/09/rust2018/",
      "date_published": "2018-01-09T00:00:00+01:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "8c52a558-78c4-4c5a-b06b-7d254af78db3",
      "title": "#Rust2018 : Don‚Äôt be the new Haskell ‚Äì Hacker Noon",
      "content_text": "TLDR: Big companies adoption determine the success of the language, not the quality of the language. Let‚Äôs target big companies / projects‚Ä¶",
      "url": "https://hackernoon.com/rust-2018-dont-be-the-new-haskell-a383dbd74481",
      "date_published": "2018-01-09T03:02:35.835+00:00",
      "author": {
        "name": "Tibo Delor",
        "url": "https://hackernoon.com/@tibotz"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "de1fbb2e-47e5-4477-8b2c-533a82b479aa",
      "title": "Why Rust? A Two Year Retrospective",
      "content_text": "Why Rust? That was a question I asked exactly two years ago when I started Way Cooler (by the way, happy 2nd birthday Way Cooler!).",
      "url": "http://way-cooler.org/blog/2018/01/09/way-cooler-turns-two.html",
      "date_published": "2018-01-09T00:00:00+00:00",
      "author": {
        "name": "Preston Carpenter",
        "url": "https://timidger.github.io/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "342a3884-6f24-4d2e-8a60-11d9ec06f5ee",
      "title": "Adding Superheroes to the Rust Brazilian Community ‚Äì Mozilla Brasil",
      "content_text": "In December, Mozilla Brazil in partnership with the Rust Lang BR community launched a project that brings together Rust programmers and community leaders from regions all over Brazil to advance ...",
      "url": "https://mozillabr.org/2018/01/adding-superheroes-to-the-rust-brazilian-community/",
      "date_published": "2018-01-08T18:16:39-02:00",
      "author": {
        "name": "Geraldo Barros",
        "url": "https://mozillabr.org/author/geraldobarros/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "36658802-1c32-4af9-b41f-f2ce2adca813",
      "title": "Rust 2018: Use Relentless Positivity",
      "content_text": "Rust is a fantastic programming language, but I believe that adoption is held back largely due to a reputation for being difficult to learn. Let's fix that....",
      "url": "http://always-learning.timmcnamara.co.nz/2018/01/08/rust-2018/",
      "date_published": "2018-01-08T09:29:29.468+00:00",
      "author": {
        "name": "Tim McNamara",
        "url": "http://always-learning.timmcnamara.co.nz/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "87167446-604f-4bda-b1b1-2f13ea712655",
      "title": "New faces for our lovely bots in #Rust2018 [Totoroot]",
      "content_text": "A blog about programming and stuff. I'm in love with Rust, so most of my programming related posts are about that language.\n",
      "url": "https://lukaskalbertodt.github.io/2018/01/07/new-faces-for-bots-rust2018.html",
      "date_published": "2018-01-07T00:00:00+00:00",
      "author": {
        "name": "Lukas Kalbertodt",
        "url": "http://lukaskalbertodt.github.io/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "6b64ad00-dbd7-4974-8e82-503c2faa9798",
      "title": "Rust in 2018",
      "content_text": "The Rust project is soliciting wishlists for 2018. Rather than list big things that everybody wants like NLL or a more stable tokio, I‚Äôm going to list some things that I think are small and could be...",
      "url": "http://blog.kylehuey.com/post/169445545152/rust-in-2018",
      "date_published": "2018-01-07T00:00:00+00:00",
      "author": {
        "name": "Kyle Huey",
        "url": "http://blog.kylehuey.com/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "3b88c9f8-870f-4b97-a9e3-34cf5fc5f118",
      "title": "the new wave of rust | quiet misdreavus miniblog",
      "content_text": "I‚Äôm generally terrible at big-picture planning, so instead I‚Äôd like to talk about what I want to accomplish in the Rust world in 2018. Whether this slots into anyone else‚Äôs planning is another matter, but I‚Äôll leave that as an exercise for the reader.",
      "url": "https://quietmisdreavus.net/code/2018/01/07/the-new-wave-of-rust/",
      "date_published": "2018-01-07T00:00:00+00:00",
      "author": {
        "name": "QuietMisdreavus",
        "url": "https://quietmisdreavus.net/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "52d67205-01cc-4100-aee3-646795db6b95",
      "title": "Rust and the web in 2018 ‚Äì Rasmus.krats.se",
      "content_text": "My wish for Rust in 2018 is a nice and convenient web service framework that runs on stable rust and gets maintenance and regular updates for many years to come. My intent for 2018 is to continue to maintain and improve ructe (and rsass), and try to integrate it with the best such framework i can find.",
      "url": "https://rasmus.krats.se/2018/rustweb.en",
      "date_published": "2018-01-07T22:50:00+00:00",
      "author": {
        "name": "Rasmus Kaj",
        "url": "https://rasmus.krats.se/en"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "9d6a825b-75f7-4e63-8ada-4fa21202f843",
      "title": "Rust 2018",
      "content_text": "I want 2018 to be boring. I don't want it to be slow, I want lots of work to happen, but I want it to be 'boring' work. We got lots of big new things in 2017 and it felt...",
      "url": "https://www.ncameron.org/blog/rust-2018/",
      "date_published": "2018-01-07T22:39:37.752+00:00",
      "author": {
        "name": "Nick Cameron",
        "url": "http://www.ncameron.org/blog/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "80b271ae-2668-4577-9512-f7562e651253",
      "title": "Rust 2018 - Suspect Semantics",
      "content_text": "In this post I share a few small thoughts on what Rust should do in 2018, and more broadly about the current direction of the language. Tooling A ‚Ä¶",
      "url": "http://www.suspectsemantics.com/blog/2018/01/07/rust-2018/",
      "date_published": "2018-01-07T13:34:15-08:00",
      "author": {
        "name": "Andrew Brinker",
        "url": "http://www.suspectsemantics.com/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "6e9f2101-5cff-4356-95ea-43146f207fc5",
      "title": "Rust 2018 ¬∑ Matthew Mayer's tech blog",
      "content_text": "Per the call for blog posts, I‚Äôve got thoughts and ideas on where Rust can go in the upcoming year. My wants haven‚Äôt changed much over the last year or so: give me non-embarassing compilation speed! üòÅ\n\nBefore getting started, I‚Äôm very appreciative of the hard work put into the overall Rust community and ecosystem, including the behind-the-scenes work. It‚Äôs difficult to understate just how much time and energy people volunteer in pursuit of a better, Rust-ier world.",
      "url": "https://matthewkmayer.github.io/blag/public/post/rust-2018/",
      "date_published": "2018-01-07T00:00:00+00:00",
      "author": {
        "name": "Matthew Mayer",
        "url": "https://matthewkmayer.github.io/blag/public"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "dbe7f7e3-229a-4d77-8d9f-7d857c051b54",
      "title": "#Rust2018 blog post",
      "content_text": "#Rust2018 blog post",
      "url": "https://gist.github.com/cessen/394829673855e56157f63b4447f91e67",
      "date_published": "2018-01-07T06:23:37+00:00",
      "author": {
        "name": "Nathan Vegdahl",
        "url": "https://github.com/cessen"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "4880546f-66a5-461b-a3b0-c0e31379b23d",
      "title": "Improving how we improve Rust in 2018",
      "content_text": "The past few years, I‚Äôve been lucky to be part of the Rust community survey process. In 2016, this data helped show the need to improve usability. We had good foundations, but they were too hard to get at. In 2017, we saw a renewed need to reach out to companies, to improve documentation, and a continued importance of pushing to making Rust more usable.",
      "url": "http://www.jonathanturner.org/2018/01/rust2018-and-data.html",
      "date_published": "2018-01-07T00:00:00+00:00",
      "author": {
        "name": "Jonathan Turner",
        "url": "http://www.jonathanturner.org/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "2fae2fb9-686e-4b6e-a4e9-7cc28275bf44",
      "title": "Rust, Looking Forward in 2018",
      "content_text": "This past year I was pretty well a full-time Rust developer working on a handful of key projects: postmates/cernan postmates/hopper postmates/quantiles Each of these saw a non-trivial amount of work poured into them by myself and others. I wrote some ‚Äì¬†but not enough ‚Äì about the work that",
      "url": "http://blog.troutwine.us/2018/01/06/rust-looking-forward-in-2018/",
      "date_published": "2018-01-06T02:09:25+00:00",
      "author": {
        "name": "Brian L. Troutwine",
        "url": "http://blog.troutwine.us/author/blt/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "88162fa2-6b84-4c3e-82e8-9e4443cb11c0",
      "title": "More Rust in 2018",
      "content_text": "Recently, the Rust teams put out a call for community thoughts on what Rust‚Äôs 2018 goals shouldbe, andwe‚Äôd like to weigh in from our perspective as a Rust-fo...",
      "url": "http://integer32.com/2018/01/05/more-rust-in-2018.html",
      "date_published": "2018-01-05T00:00:00+00:00",
      "author": {
        "name": "Carol Nichols",
        "url": "http://integer32.com/blog/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "3f34d83f-f520-4bfa-a6a8-f08e3a0bea9d",
      "title": "Rust„Å´‰Ωï„ÅåÊ¨≤„Åó„ÅÑ„Å†„Çç„ÅÜ | Œ∫een„ÅÆHappy HacŒ∫ing Blog",
      "content_text": "Œ∫een„Åß„Åô„ÄÇNew Year‚Äôs Rust: A Call for Community Blogposts„ÅÆ‰∏ÄÁí∞„ÅÆ„Å§„ÇÇ„Çä„Åß„Åô„ÄÇ ÊÅê„Çâ„ÅèËã±Ë™û„ÅÆË®ò‰∫ã„ÅåÊúõ„Åæ„Çå„Å¶„Çã„Çì„Å†„Çç„ÅÜ„Å™„Å®ÊÄù„ÅÑ„Å§„Å§„ÇÇË©¶„Åó„Å´Êó•Êú¨„Åã„ÇâÂ£∞„Çí‰∏ä„Åí„Å¶„Åø„Åæ„Åô„ÄÇ ÁßÅ„ÅØRust„ÅØ1.0ÂâçÂæå„ÅÆÈ†É„Åã„ÇâËß¶„Å£„Å¶„ÅÑ„Å¶„ÄÅ„Éâ„Ç≠„É•„É°„É≥„Éà„ÅÆÁøªË®≥„Çí„Åó„Åü„Çä„Åì„Åì1Âπ¥„Åè„Çâ„ÅÑ„ÅØIdein Inc.„Åß„ÅÆÊ•≠Âãô„Åß„ÇÇ‰Ωø„Å£„Å¶„ÅÑ„Åæ„Åô„ÄÇ\n\n1Âπ¥„Åª„Å©‰Ωø„Å£„Å¶„Åø„Å¶‰Ωï„ÅåË∂≥„Çä„Å™„ÅÑ„ÅãËÄÉ„Åà„Å¶„Åø„Åæ„Åô„ÄÇ",
      "url": "https://keens.github.io/blog/2018/01/05/rustninanigahoshiidarou/",
      "date_published": "2018-01-05T00:00:00+00:00",
      "author": {
        "name": "Œ∫een",
        "url": "https://keens.github.io/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "56870365-7dc4-4449-9f18-19caa0414b6b",
      "title": "My journey with Rust in 2017 ‚Äî The good, the bad, the weird",
      "content_text": "Note: This post is not only about Rust, but rather my experiences, problems and solutions throughout 2017.",
      "url": "https://codeburst.io/my-journey-with-rust-in-2017-the-good-the-bad-the-weird-f07aa918f4f8",
      "date_published": "2018-01-04T00:31:28.519+00:00",
      "author": {
        "name": "Felix Sch√ºtt",
        "url": "https://codeburst.io/@fschutt"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "6d59f1d8-c073-47db-b3f5-0001878fd372",
      "title": "New Year's Rust: A Call for Community Blogposts - The Rust Programming Language Blog",
      "content_text": "Starting today and running until the end of January we‚Äôd like to ask the community to write blogposts reflecting on Rust in 2017 and proposing goals and directions for Rust in 2018.",
      "url": "https://blog.rust-lang.org/2018/01/03/new-years-rust-a-call-for-community-blogposts.html",
      "date_published": "2018-01-03T00:00:00+00:00",
      "author": {
        "name": "Rust Blog",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Rust 2018"
      ]
    }
  ]
}
