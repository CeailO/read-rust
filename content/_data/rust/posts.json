{
  "version": "https://jsonfeed.org/version/1",
  "title": "Read Rust",
  "home_page_url": "https://readrust.net/",
  "feed_url": "https://readrust.net/all/feed.json",
  "description": "Rust related posts from around the internet.",
  "author": {
    "name": "Wesley Moore",
    "url": "http://www.wezm.net/"
  },
  "items": [
    {
      "id": "e808921f-a270-4d4b-a897-d856dbd4a5ab",
      "title": "Coding nRF52 with Rust and Apache Mynewt on Visual Studio Code",
      "content_text": "The nRF52 Microcontroller by Nordic Semiconductor is an awesome gadget with powerful Bluetooth Low Energy networking capability. It’s affordable too… For under $8, I can buy an EBYTE E73-TBB Development Board with onboard nRF52. Powered by an Arm Cortex-M4 CPU (hardware floating-point) with 64 KB of RAM and 512 KB of Flash ROM, the nRF52 has plenty of capacity to run modern embedded platforms… Like Apache Mynewt realtime OS and Embedded Rust!",
      "url": "https://medium.com/@ly.lee/coding-nrf52-with-rust-and-apache-mynewt-on-visual-studio-code-9521bcba6004",
      "date_published": "2019-10-07T12:15:40.507+00:00",
      "author": {
        "name": "Lup Yuen Lee",
        "url": "https://medium.com/@ly.lee"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "0932500c-62e0-4379-9e09-eb5ed61d826a",
      "title": "Mun Programming Language",
      "content_text": "The idea to create Mun originated out of frustration with the Lua dynamic scripting language that is extensively used for game development at Abbey Games.\n\nLua's hot reloading capabilities and LuaJIT's performance make it a great language for rapid prototyping of real-time applications - such as games - on PC. However, the language has performance issues on some mobile and console platforms - to which LuaJIT cannot deploy, the language lacks refactoring functionality, and does not scale well with modern technology.\n\nMun tries to take the best of both worlds to create a more robust, highly iterative, productive, and performant programming language.",
      "url": "https://mun-lang.org/",
      "tweet_url": "https://twitter.com/wodannson/status/1178408744239161345?s=20",
      "date_published": "2019-10-10T06:38:30+00:00",
      "author": {
        "name": "Mun Developers",
        "url": "https://mun-lang.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "6597a1f3-2858-46de-ab2b-fb2c639759b5",
      "title": "Spotify TUI: Spotify for the terminal written in Rust",
      "content_text": "Spotify TUI: Spotify for the terminal written in Rust.",
      "url": "https://github.com/Rigellute/spotify-tui",
      "date_published": "2019-10-07T00:00:00+00:00",
      "author": {
        "name": "Alexander Keliris",
        "url": "https://github.com/Rigellute"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "ab31d896-cb5c-40a9-bb9f-a496a672239b",
      "title": "OxidizeBot - The high octane Twitch bot",
      "content_text": "OxidizeBot as an open source Twitch Bot empowering you to focus on what's important. It allows for a richer interaction between you and your chat. From a song request system, to groundbreaking game modes where your viewers can interact directly with you and your game.",
      "url": "https://setbac.tv/",
      "date_published": "2019-10-10T00:00:00+00:00",
      "author": {
        "name": "John-John Tedro",
        "url": "https://github.com/udoprog"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "409c73c3-8c32-4c3a-97a9-30f700237fe8",
      "title": "Designing a COM library for Rust",
      "content_text": "I interned with Microsoft as a Software Engineering Intern in the MSRC UK team in Cheltenham this past summer. I worked in the Safe Systems Programming Language (SSPL) group, which explores safe programming languages as a proactive measure against memory-safety related vulnerabilities.\n\nThis blog post describes the project that I have been working on under the mentorship of the SSPL team. Hopefully, this provides additional insight into the work Microsoft interns do! My goal was to build an open-sourced Rust library that will allow developers to both consume and produce in-process Component Object Model (COM) components in an idiomatic manner.",
      "url": "https://msrc-blog.microsoft.com/2019/10/08/designing-a-com-library-for-rust/",
      "tweet_url": "https://twitter.com/msftsecresponse/status/1181634135636316162?s=20",
      "date_published": "2019-10-08T17:00:03+00:00",
      "author": {
        "name": "Hadrian Wei Heng Lim",
        "url": "https://msrc-blog.microsoft.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "79f41426-ad58-4eac-9adb-88b27c2a63ba",
      "title": "How I handle errors in Rust",
      "content_text": "derive_more is a crate which has many proc macros, amongst which is a macro for deriving From for structs, enums, and newtypes. From is the basic mechanism for using ? ergonomically in a function which returns Result<T, Error>. Almost everything I write has the derive_more crate as a dependency, and the following pattern for handling errors.",
      "url": "https://blog.kiani.io/blog/how-i-handle-errors-in-rust/",
      "date_published": "2019-10-09T00:00:00+00:00",
      "author": {
        "name": "Ashkan Kiani",
        "url": "https://blog.kiani.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e131911e-9ccb-4b6f-9c05-f95611cb66d2",
      "title": "The Node Experiment - Exploring Async Basics with Rust",
      "content_text": "After originally researching the history and discussions about Rusts Async story, I realized I needed a better understanding of async basics and the result is this book. It's published it as a gitbook to make this journey easier for the next person (hopefully).",
      "url": "https://cfsamson.github.io/book-exploring-async-basics/",
      "date_published": "2019-10-10T00:00:00+00:00",
      "author": {
        "name": "Carl Fredrik Samson",
        "url": "https://github.com/cfsamson"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "6712ac58-9b5c-43de-bcf5-79548cb8c59d",
      "title": "Making a RISC-V Operating System using Rust",
      "content_text": " RISC-V (\"risk five\") and the Rust programming language both start with an R, so naturally they fit together. In this blog, we will write an operating system targeting the RISC-V architecture in Rust (mostly). If you have a sane development environment for RISC-V, you can skip the setup parts right to bootloading. Otherwise, it'll be fairly difficult to get started.\n\nThis tutorial will progressively build an operating system from start to something that you can show your friends or parents -- if they're significantly young enough. Since I'm rather new at this I decided to make it a \"feature\" that each blog post will mature as time goes on. More details will be added and some will be clarified.",
      "url": "http://osblog.stephenmarz.com/index.html",
      "date_published": "2019-09-26T00:00:00+00:00",
      "author": {
        "name": "Stephen Marz",
        "url": "https://www.patreon.com/pavehawk2007"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "33fc22f5-6021-4395-b8ab-7f5f25ec2384",
      "title": "reqwest alpha.await",
      "content_text": "reqwest alpha.await reqwest is a higher-level HTTP client for Rust. I’m delighted to announce the first alpha release that brings async/await support!",
      "url": "https://seanmonstar.com/post/188220739932/reqwest-alphaawait",
      "tweet_url": "https://twitter.com/seanmonstar/status/1181677715436363776?s=20",
      "date_published": "2019-10-08T00:00:00+00:00",
      "author": {
        "name": "Sean McArthur",
        "url": "http://seanmonstar.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "66b4c1e7-68e4-4006-bdb8-f53129822773",
      "title": "Rust on the Sipeed Longan Nano, an inexpensive RISC-V dev board",
      "content_text": "The Sipeed Longan Nano is a $5 development board based on a new RISC-V processor from Gigadevices. The processor and the dev board are properly documented in English. If you are a RISC-V enthusiast, I believe this is the best option you have at the moment for learning and experimentation. I was able to run Rust code on this board by making small changes to the riscv/rust PicoSoc example.",
      "url": "https://pramode.in/2019/10/07/rust-on-riscv-board-sipeed-longan-nano/",
      "tweet_url": "https://twitter.com/pramode_ce/status/1181247092519342082?s=20",
      "date_published": "2019-10-07T00:00:00+00:00",
      "author": {
        "name": "Pramode C.E",
        "url": "http://pramode.in/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "f7d6bffe-ea86-4fbc-9aa6-4ba15b3929a5",
      "title": "Building the Azure IoT Edge Security Daemon in Rust",
      "content_text": "Azure IoT Edge is an open source, cross platform software project from the Azure IoT team at Microsoft that seeks to solve the problem of managing distribution of compute to the edge of your on-premise network from the cloud. This post explains some of the rationale behind our choice of Rust as the implementation programming language for the Security Daemon component in the product.",
      "url": "https://msrc-blog.microsoft.com/2019/09/30/building-the-azure-iot-edge-security-daemon-in-rust/",
      "tweet_url": "https://twitter.com/msftsecresponse/status/1178713218107097088?s=20",
      "date_published": "2019-09-30T16:45:48+00:00",
      "author": {
        "name": "Raj Vengalil",
        "url": "https://msrc-blog.microsoft.com/"
      },
      "tags": [
        "Security",
        "Language"
      ]
    },
    {
      "id": "dcbe1901-b9b1-4eec-a44e-d6be0dcdd958",
      "title": "Sample REST API in Rust and Go",
      "content_text": "Over the summer, I prototyped a bunch of web apps whose ideas had been floating in my mind for a long time. I spent quite a bit of time learning about REST APIs and, as part of these exercises, implemented skeletons of REST servers in both Go and Rust. The app prototypes have gone nowhere but I thought of sharing the skeletons I built if only to serve as templates for myself in future work. Thus, in this post, I will cover these skeleton demos and I will compare them.",
      "url": "https://jmmv.dev/2019/09/rest-api-rust-go.html",
      "tweet_url": "https://twitter.com/jmmv/status/1177606272293703680?s=20",
      "date_published": "2019-09-27T06:45:40+05:00",
      "author": {
        "name": "Julio Merino",
        "url": "https://jmmv.dev/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "51a1a155-fccb-426f-b0e5-f4670be28e9d",
      "title": "Figthting The Async Fragmentation",
      "content_text": "Sometimes, I get this nudging feeling that something is not exactly right and that I have to go out and save the world and fix it (even though it’s usually something minor or doesn’t need fixing at all). I guess everyone has days like these. It’s part what drives me to invest my free time to writing software.\n\nThis is about some dead ends when trying to fix the problem of Rust’s async networking fragmentation. I haven’t been successful, but I can at least share what I tried and discovered, maybe someone else is having the same bugging feeling so they don’t have to repeat them. Or just maybe some of the approaches would work for some other problems. And because we have a bunch of success stories out there, having some failure stories to balance it doesn’t hurt.",
      "url": "https://vorner.github.io/2019/09/29/figthting-the-async-fragmentation.html",
      "date_published": "2019-09-29T00:00:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "87600fb3-40d3-403e-87b7-25a3a2eacdcf",
      "title": "Binary Format Shootout",
      "content_text": "Cap'n Proto vs. Flatbuffers vs. Simple Binary Encoding",
      "url": "https://speice.io/2019/09/binary-format-shootout.html",
      "date_published": "2019-09-28T00:00:00+00:00",
      "author": {
        "name": "Bradlee Speice",
        "url": "https://speice.io/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "3fc0a35d-5eab-4143-98d5-7325738364e4",
      "title": "Riker - a framework for building modern, concurrent and resilient systems using the Rust language using the actor model",
      "content_text": "Riker is a framework for building modern, concurrent and resilient systems using the Rust language. Riker aims to make working with state and behavior in concurrent systems as easy and scalable as possible. The Actor Model has been chosen to realize this because of the familiar and inherent simplicity it provides while also providing strong guarantees that are easy to reason about. The Actor Model also provides a firm foundation for resilient systems through the use of the actor hierarchy and actor supervision.",
      "url": "https://riker.rs/",
      "date_published": "2019-10-08T00:00:00+00:00",
      "author": {
        "name": "Riker",
        "url": "https://riker.rs/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "5d8d151f-18fd-4aa2-8a3d-eb5620394f36",
      "title": "Picking Rust for web",
      "content_text": "I’ve been staring at this energy efficiency across programming languages table for days. It can’t be right (why is typescript so much worse than javascript?) but a lot of it tracks with things I’ve observed from using these languages IRL. Also this web framework benchmarks project. Bottom line: I’m thinking about using rust as the backend for a small one-person web project. Here’s everything I said to myself while researching reasons not to.",
      "url": "https://abe-winter.github.io/wisdom/2019/08/26/rust-for-web.html",
      "date_published": "2019-08-26T00:00:00+00:00",
      "author": {
        "name": "Abe Winter",
        "url": "https://abe-winter.github.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "d7a12b5f-ab52-4e4b-b752-7d857e9f86bf",
      "title": "Of bitpacking, with or without SSE3",
      "content_text": "This blog post might interest three type of readers: people interested in tantivy: You’ll learn how tantivy uses SIMD instructions to decode posting lists, and what happens on platform where the relevant instruction set is not available.  rustaceans who would like to hear a good SIMD in rust story. lucene core devs (yeah it is a very select club) who might be interested in a possible (unconfirmed) optimization opportunity.",
      "url": "https://fulmicoton.com/posts/bitpacking/",
      "date_published": "2019-09-20T00:00:00+00:00",
      "author": {
        "name": "Paul Masurel",
        "url": "https://fulmicoton.com/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "e3c786d5-955b-422a-b426-fcc3639d92c3",
      "title": "Roguelike Tutorial: Up-to-date and Literate",
      "content_text": "This tutorial will show you how to write a roguelike in the Rust programming language and the libtcod library. In this update the Asciidoctor documents were changed to allow generating the final source files at the end of each chapter directly from the tutorial text.",
      "url": "https://aimlesslygoingforward.com/blog/2019/10/02/roguelike-tutorial-up-to-date-and-literate/",
      "tweet_url": "https://twitter.com/TomasSedovic/status/1179520613360291840?s=20",
      "date_published": "2019-10-02T00:00:00+00:00",
      "author": {
        "name": "Tomas Sedovic",
        "url": "https://aimlesslygoingforward.com/blog/"
      },
      "tags": [
        "Getting Started",
        "Games and Graphics"
      ]
    },
    {
      "id": "55e7a635-29bd-4a2d-aaac-b0d599006ff7",
      "title": "The \"Inside Rust\" Blog",
      "content_text": "This is the \"Inside Rust\" blog. This blog is aimed at those who wish to follow along with Rust development. The various Rust teams and working groups use this blog to post status updates, calls for help, and other similar announcements.",
      "url": "https://blog.rust-lang.org/inside-rust/",
      "tweet_url": "https://twitter.com/nikomatsakis/status/1179777836388950016?s=20",
      "date_published": "2019-10-04T01:18:00+00:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "https://blog.rust-lang.org/inside-rust/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c793ec07-09a1-4b5d-b3e6-f8b146178fbc",
      "title": "Build an NB-IoT GPS Tracker on STM32 L476 with Apache Mynewt and Embedded Rust",
      "content_text": "Let’s build an NB-IoT GPS Tracker! A simple gadget that determines its current location based on received GPS signals… And transmits the location to a server via NB-IoT. We shall take an existing Apache Mynewt Embedded OS + Embedded Rust project from the article “Rust Rocks NB-IoT! STM32 Blue Pill with Quectel BC95-G on Apache Mynewt”… And extend it with a GPS module: Quectel L70-R.",
      "url": "https://medium.com/@ly.lee/build-an-nb-iot-gps-tracker-on-stm32-l476-with-apache-mynewt-and-embedded-rust-8c095a925546",
      "date_published": "2019-09-22T12:24:41.202+00:00",
      "author": {
        "name": "Lup Yuen Lee",
        "url": "https://medium.com/@ly.lee"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "abac05ba-47c5-4454-8363-2f823ff9c573",
      "title": "Rust on the ESP32",
      "content_text": "In March of 2019, Espressif released their first run at an llvm fork to support the xtensa architecure. Shortly after I got to work bootstrapping Rust to use this newly created fork. Prior to this project, I'd had no experience with the compiler, fortunately I came across the RISCV PR which gave me a rough idea of what was required. After many build attempts I finally got it working; I was now able to generate xtensa assembly from Rust source code!",
      "url": "https://mabez.dev/blog/posts/esp32-rust/",
      "date_published": "2019-09-10T00:00:00+00:00",
      "author": {
        "name": "Scott Mabin",
        "url": "https://mabez.dev/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "258e95ec-03a2-47b2-b577-cf45ad96924e",
      "title": "Async Builders",
      "content_text": "Last month we introduced Surf, an async cross-platform streaming HTTP client for Rust. It was met with a great reception, and people generally seem to be really enjoying it. A common piece of feedback we've gotten is how much people enjoy the interface, in particular how little code it requires to create HTTP requests. In this post we'll cover a pattern at the heart of Surf's ergonomics stjepang came up with: the \"async finalizer\".",
      "url": "https://blog.yoshuawuyts.com/async-finalizers/",
      "tweet_url": "https://twitter.com/yoshuawuyts/status/1175396968224448513?s=20",
      "date_published": "2019-09-21T00:00:00+00:00",
      "author": {
        "name": "Yoshua Wuyts",
        "url": "https://blog.yoshuawuyts.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "b2b15138-1280-44d7-95a0-9e5954a14b9a",
      "title": "Announcing Bastion 0.2.0!",
      "content_text": "Bastion is a fault-tolerant runtime for Rust applications. After receiving plenty of good feedback from the community and a long-running development stage, now Bastion is 0.2.0!",
      "url": "https://www.reddit.com/r/rust/comments/day85g/announcing_bastion_020/",
      "tweet_url": "https://twitter.com/vertexclique/status/1178372873922269184?s=20",
      "date_published": "2019-10-06T04:16:30+00:00",
      "author": {
        "name": "Mahmut Bulut",
        "url": "https://twitter.com/vertexclique"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "f449d35d-98c7-4460-9d42-d6641415e542",
      "title": "Nushell 0.3.0",
      "content_text": "Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines. We’re happy to announce that today we’re releasing Nushell 0.3.0. Nu has seen numerous bugfixes, performance improvements, and features added since its initial public release (which was only a few weeks ago!)",
      "url": "http://www.jonathanturner.org/2019/09/nushell_0_3_0.html",
      "date_published": "2019-09-24T00:00:00+00:00",
      "author": {
        "name": "Jonathan Turner",
        "url": "http://www.jonathanturner.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "7a86a452-ec34-4489-b209-f91aecdd6d98",
      "title": "Plugins in Rust",
      "content_text": "Imagine you are implementing a calculator application and want users to be able to extend the application with their own functionality. For example, imagine a user wants to provide a random() function that generates true random numbers using random.org instead of the pseudo-random numbers that a crate like rand would provide.\n\nThe Rust language gives you a lot of really powerful tools for adding flexibility and extensibility to your applications (e.g. traits, enums, macros), but all of these happen at compile time. Unfortunately, to get the flexibility that we’re looking we’ll need to be able to add new functionalty at runtime. This can be achieved using a technique called Dynamic Loading.",
      "url": "http://adventures.michaelfbryan.com/posts/plugins-in-rust/",
      "date_published": "2019-09-30T22:04:58+08:00",
      "author": {
        "name": "Michael-F-Bryan",
        "url": "http://adventures.michaelfbryan.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "b909cef2-cf3b-4db8-b567-c230036a7adf",
      "title": "Happy First Birthday, Ferrous!",
      "content_text": "Ferrous Systems GmbH was fully incorporated in Berlin, on October 1st, 2018; which makes today Ferrous' first birthday! It's been a busy year (or really more than a year) for us, full of ups, downs, growth, challenges, stress, and opportunities, and it finally feels like the right time to write a bit more about it from a personal perspective.",
      "url": "https://ferrous-systems.com/blog/happy-birthday-ferrous/",
      "tweet_url": "https://twitter.com/bitshiftmask/status/1179074213413638144?s=20",
      "date_published": "2019-10-01T00:00:00+00:00",
      "author": {
        "name": "James Munns",
        "url": "https://ferrous-systems.com/blog"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "17460b05-a9d9-4c79-801c-2a2e54c5132f",
      "title": "Project update",
      "content_text": "gfx-rs is a Rust project aiming to make low-level GPU programming portable with low overhead. It’s a single Vulkan-like Rust API with multiple backends that implement it: Direct3D 12/11, Metal, Vulkan, and even OpenGL. wgpu-rs is a Rust project on top of gfx-rs that provides safety, accessibility, and even stronger portability. This is an update that is not aligned to any dates or releases. We just want to share about some of the exciting work that landed recently, which will make it to the next release cycle.",
      "url": "https://gfx-rs.github.io/2019/10/01/update.html",
      "date_published": "2019-10-01T00:00:00+00:00",
      "author": {
        "name": "gfx-rs",
        "url": "https://gfx-rs.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "e2d3a9d7-cc8b-4cd5-8d5b-3bb986487601",
      "title": "Static Assertions 1.0",
      "content_text": "static_assertions is a library designed to enable users to perform various checks at compile-time. It allows for finding errors quickly and early when it comes to ensuring certain features or aspects of a codebase. The macros it provides are especially important when exposing a public API that requires types to be the same size or implement certain traits.",
      "url": "https://nikolaivazquez.com/posts/programming/rust-static-assertions-1_0/",
      "tweet_url": "https://twitter.com/NikolaiVazquez/status/1179460155001335808?s=20",
      "date_published": "2019-10-02T00:00:00+00:00",
      "author": {
        "name": "Nikolai Vazquez",
        "url": "https://nikolaivazquez.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "230003fc-89e8-4108-97d1-45f2d8b30dd8",
      "title": "The Embedded Working Group Newsletter - 19",
      "content_text": "This is the 19th newsletter of the Embedded WG where we highlight new progress, celebrate cool projects, thank the community, and advertise projects that need help!",
      "url": "https://rust-embedded.github.io/blog/newsletter-19/",
      "tweet_url": "https://twitter.com/rustembedded/status/1179902902116241410?s=20",
      "date_published": "2019-10-03T00:00:00+00:00",
      "author": {
        "name": "The Embedded Working Group",
        "url": "https://rust-embedded.github.io/blog"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "63fb93a7-e179-491f-83b9-84a7e284fe48",
      "title": "Is This Magic!? Ferris Explores Rustc!",
      "content_text": "A companion to the RustConf 2019 talk with the same name; an introduction to making your first contribution to the Rust compiler.",
      "url": "https://quietmisdreavus.net/code/2019/08/23/is-this-magic-ferris-explores-rustc/",
      "date_published": "2019-08-23T11:00:00-05:00",
      "author": {
        "name": "QuietMisdreavus",
        "url": "https://quietmisdreavus.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d9b796b1-aacb-4a2f-ad7b-05ce22cc3ec1",
      "title": "Announcing Rust 1.38.0",
      "content_text": "The highlight of this release is pipelined compilation. The release also includes linting of some incorrect uses of mem::{uninitialized, zeroed}, #[deprecated] macros, std::any::type_name, and more.",
      "url": "https://blog.rust-lang.org/2019/09/26/Rust-1.38.0.html",
      "tweet_url": "https://twitter.com/rustlang/status/1177225709279793153?s=20",
      "date_published": "2019-09-26T00:00:00+00:00",
      "author": {
        "name": "The Rust Release Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "fbf09d15-52c8-4ab6-a6bf-22c0b238aedb",
      "title": "Async-await hits beta!",
      "content_text": "Big news! As of this writing, syntactic support for async-await is available in the Rust beta channel! It will be available in the 1.39 release, which is expected to be released on November 7th, 2019. Once async-await hits stable, that will mark the culmination of a multi-year effort to enable efficient and ergonomic asynchronous I/O in Rust. It will not, however, mark the end of the road: there is still more work to do, both in terms of polish (some of the error messages we get today are, um, not great) and in terms of feature set (async fn in traits, anyone?).",
      "url": "https://blog.rust-lang.org/2019/09/30/Async-await-hits-beta.html",
      "date_published": "2019-09-30T00:00:00+00:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language",
        "async"
      ]
    },
    {
      "id": "d821223f-0e0c-4bbf-a248-7191d0c0c1da",
      "title": "Futures Concurrency",
      "content_text": "In a previous post we've looked at Rust streams. In this post we're going to discuss another problem in the async space: futures concurrency combinators. We're going to cover the different forms of concurrency that can be expressed with Futures, and cover both fallible and infallible variants.",
      "url": "https://blog.yoshuawuyts.com/futures-concurrency/",
      "tweet_url": "https://twitter.com/yoshuawuyts/status/1171013043754536961?s=20",
      "date_published": "2019-09-02T00:00:00+00:00",
      "author": {
        "name": "Yoshua Wuyts",
        "url": "https://blog.yoshuawuyts.com/"
      },
      "tags": [
        "Language",
        "async"
      ]
    },
    {
      "id": "a8b46d95-5e16-4348-abfe-b54bc46da590",
      "title": "Improvement to the compile time of a crate",
      "content_text": "For one of my projects, I need to use LLVM so I tried this cool inkwell crate that provides a mostly safe wrapper over LLVM. To my dismay, though, compiling this crate takes… a lot of time: Debug build: 1m 05s Release build: 3m 34s. By the way, I write this article for the sole purpose of trying to fix some problems there is in the crate ecosystem and by no mean I want to incriminate the author of this crate (or any other). I’ve been guilty of doing the same mistakes, but I learned from them and want other people to learn from them as well.",
      "url": "http://antoyo.ml/compilation-time-dependencies",
      "date_published": "2019-09-07T00:00:00+00:00",
      "author": {
        "name": "Antoni Boucher",
        "url": "http://antoyo.ml/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "518da2d7-644e-4028-95a2-388b2cb5fc0f",
      "title": "Async Stack Traces in Rust",
      "content_text": "One neat result of Rust’s futures and async/await design is that all of the async callers are on the stack below the async callees. In most other languages, only the youngest async callee is on the stack, and none of the async callers. Because the youngest frame is most often not where a bug’s root cause lies, this extra context makes debugging async code easier in Rust.",
      "url": "http://fitzgeraldnick.com/2019/08/27/async-stacks-in-rust.html",
      "tweet_url": "https://twitter.com/fitzgen/status/1166476069941071872?s=20",
      "date_published": "2019-08-27T00:00:00-07:00",
      "author": {
        "name": "Nick Fitzgerald",
        "url": "http://fitzgeraldnick.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "8ae2d3d4-bbd0-4e9b-8bb8-f1ff4703b0cf",
      "title": "Writing Linux Kernel Module in Rust",
      "content_text": "We designed a framework to help developers to quickly build device drivers in Rust. We also utilized Rust’s security features to provide several useful infrastructures for developers so that they can easily handle kernel memory allocation and concurrency management, at the same time, some common bugs (e.g. use-after-free) can be alleviated.\n\nWe demonstrate the generality of our framework by implementing a real-world device driver on Raspberry Pi 3, and our evaluation shows that device drivers generated by our framework have acceptable binary size for canonical embedded systems and the runtime overhead is negligible.",
      "url": "https://github.com/lizhuohua/linux-kernel-module-rust",
      "tweet_url": "https://twitter.com/MingshenSun/status/1162099421057712128?s=20",
      "date_published": "2019-09-09T06:31:16+00:00",
      "author": {
        "name": "Li Zhuohua",
        "url": "https://github.com/lizhuohua"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "5e44948a-fa5d-4dbb-a7e7-7e4838fbaa80",
      "title": "Linux.Fe2O3: a Rust virus",
      "content_text": "Everytime I try to learn a new programming language, I try by port my prependers (Linux.Zariche, Linux.Liora, Linux.Cephei). Despite the code simplicity , it gives me the chance to understand very useful things in a language, like error handling, file i/o, encryption, memory and a few of its core libraries.\n\nThis time, Rust is the language and I must say that I was impressed by its compiler and error handling, but the syntax is still not 100% clear to me (as you can see from my rudimentar code in Linux.Fe2O3) and I wish it had a built-in random library too. This code was written in less than 2 days, of course its not pretty, has lots of .unwrap() (already got great input from some people on Reddit to help me with that, will be addressed) so I apologise in advance.",
      "url": "https://www.guitmz.com/linux-fe2o3-rust-virus/",
      "date_published": "2019-09-06T13:35:51+00:00",
      "author": {
        "name": "Guilherme Thomazi",
        "url": "https://www.guitmz.com/"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "c7b37ead-766f-4ca9-b816-eb99a0c01b33",
      "title": "Diagnostics with Tracing",
      "content_text": "Effectively developing systems and operating them in production requires visibility into their behavior at runtime. While conventional logging can provide some of this visibility, asynchronous software &mdash; like applications using the Tokio runtime &mdash; introduces new challenges.\n\ntracing is a collection of libraries that provide a framework for instrumenting Rust programs to collect structured, context-aware, event driven diagnostics. Note that tracing was originally released under the name tokio-trace; the name was changed to reflect that, although it is part of the Tokio project, the tokio runtime is not required to use tracing.",
      "url": "https://tokio.rs/blog/2019-08-tracing/",
      "tweet_url": "https://twitter.com/mycoliza/status/1161679730304643073?s=20",
      "date_published": "2019-08-14T00:00:00+00:00",
      "author": {
        "name": "Eliza Weisman",
        "url": "https://www.elizas.website/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "7304ebe7-ee28-48a9-b88c-dd03e2605a10",
      "title": "How Rust optimizes async/await II: Program analysis",
      "content_text": "In Part 1, we covered how async fns in Rust are compiled to state machines. We saw that the internal compiler implementation uses generators and the yield statement to facilitate this transformation. In this post, we'll go over some subtleties that the compiler implementation must consider when optimizing generators. We'll look at two different kinds of analysis, liveness analysis and storage conflict detection.",
      "url": "https://tmandry.gitlab.io/blog/posts/optimizing-await-2/",
      "tweet_url": "https://twitter.com/tmandry/status/1169285945209712640?s=20",
      "date_published": "2019-09-02T00:00:00+00:00",
      "author": {
        "name": "Tyler Mandry",
        "url": "https://tmandry.gitlab.io/blog/"
      },
      "tags": [
        "Performance",
        "Language"
      ]
    },
    {
      "id": "e2f780ad-41db-499a-999c-321f0e8f556e",
      "title": "We want smaller, faster, more secure native apps",
      "content_text": "Introducing Tauri-Apps, an open-source project to help you make native apps with any framework with the power of Rust.",
      "url": "https://medium.com/tauri-apps/we-want-smaller-faster-more-secure-native-apps-77222f590c64",
      "date_published": "2019-09-05T20:57:20.829+00:00",
      "author": {
        "name": "nothingismagick",
        "url": "https://medium.com/@drthompsonsmagickindustries"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "e21ad158-7d23-47c3-82a4-0f76f651c6d9",
      "title": "Rustacean Terminal Chat App in Rust",
      "content_text": "Build a basic chat app with the Rust Programming Language.",
      "url": "https://www.pubnub.com/blog/build-realtime-rust-chat-app-cursive-tui/",
      "tweet_url": "https://twitter.com/sambajahlo/status/1159895521474961408?s=20",
      "date_published": "2019-08-09T17:31:52+00:00",
      "author": {
        "name": "Samba Diallo",
        "url": "https://www.pubnub.com/blog/author/samba_diallo/"
      },
      "tags": [
        "Web and Network Services",
        "Getting Started"
      ]
    },
    {
      "id": "eb9194f2-85b1-412c-aa0b-0218529bf163",
      "title": "Wrapping Unsafe C Libraries in Rust",
      "content_text": "In this article, we will explore how to wrap those functions and make them safe for normal use. We’ll go over how to define a wrapper struct that handles initialization and cleanup, and describe some traits that describe how application developers can safely use your library with threads. We’ll also talk a bit about how to turn a function’s random integer return into an ergonomic, type-checked Result, how to translate strings and arrays to and from the world of C, and how to turn raw pointers returned from C into scoped objects with inherited lifetimes.\n\nThe overall goal of this step is to dig into the C library’s documentation and make each function’s internal assumptions explicit.",
      "url": "https://medium.com/dwelo-r-d/wrapping-unsafe-c-libraries-in-rust-d75aeb283c65",
      "date_published": "2019-08-24T07:09:28.812+00:00",
      "author": {
        "name": "Jeff Hiner",
        "url": "https://medium.com/@jhiner"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4bf39b49-7652-4132-8a42-c12c7d922ab9",
      "title": "Understanding Futures in Rust -- Part 2",
      "content_text": "If you're familiar with promises in JavaScript and followed the last blog post you may have been confused about where the familiar combinators (then, catch, and finally) were in the previous post. You will find their equivalents in this post, and, by the end, the following code will compile. You will also gain an understanding of the types, traits, and underling concepts that make futures work.",
      "url": "https://www.viget.com/articles/understanding-futures-is-rust-part-2/",
      "date_published": "2019-08-15T00:00:00+00:00",
      "author": {
        "name": "Joe Jackson",
        "url": "https://www.viget.com/about/team/jjackson"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "16a7b9b5-ad78-4644-93f1-fb81e3f6419b",
      "title": "Learning Rust: Working with threads",
      "content_text": "I used to live in the single-thread JavaScript happy-land where the closest thing to working with threads I ever did was communicating between a website and a Chrome extension. So when people talked about the difficulties of parallelism and concurrency, I never truly got what the fuss was about.\n\nAs you may have read before, I started learning Rust a few weeks ago, re-writing a text-based game I previously made with Vue. It's a survival game in which you must gather and craft items to eat and drink. It has no winning condition other than trying to survive as many days as possible. I managed to get most of the game features working, but there was an annoying bug: if the user left the game idle for hours, it didn't check for the stats until the user interacted again. You could live for hundreds of days without doing nothing!\n\nI knew this could be solved with threads, so I finally gathered the courage and read the chapter Fearless Concurrency of The Rust Programming Language.",
      "url": "https://www.codegram.com/blog/learning-rust-threads/",
      "tweet_url": "https://twitter.com/codegram/status/1160866187405905926?s=20",
      "date_published": "2019-08-12T00:00:00+00:00",
      "author": {
        "name": "Núria Soriano",
        "url": "https://www.codegram.com/blog/author/nuria-soriano"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "0b1d562c-94e0-49fd-be04-15ea918ed05d",
      "title": "Photo mosaics with Rust",
      "content_text": "As I've been learning the Rust programming language lately I thought creating a photo-mosaic generator could be a fun project. I knew a generator like this would require a large set of tile images to sample from. The original plan was for it to only create mosaics from emoji which is how it got it's name emosaic (emoji + mosaic = emosaic) but as I progressed it made more sense to keep in generic and let the user provide their own pool of tile images.",
      "url": "https://willdady.com/photo-mosaics-with-rust/",
      "tweet_url": "https://twitter.com/WillDady/status/1160331003887378432?s=20",
      "date_published": "2019-08-10T00:00:00+00:00",
      "author": {
        "name": "Will Dady",
        "url": "https://willdady.com/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "2938c850-88bc-4bec-b0fb-f2561f4a0b17",
      "title": "Runtime Configuration Reloading",
      "content_text": "A lot of programs need to read some kind of configuration at startup. But the challenge doesn’t end here. Some programs ‒ certainly not all, but some ‒ are long running. For these, restarting them to change configuration isn’t something you’d want to do. The unix daemon convention is to send a SIGHUP signal to the process.",
      "url": "https://vorner.github.io/2019/08/11/runtime-configuration-reloading.html",
      "date_published": "2019-08-11T00:00:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "60559491-c207-46d3-8ca1-0f9b1615975f",
      "title": "Amethyst game engine activity Report - July 2019",
      "content_text": "If you’re new to Amethyst, now is a great time to get better acquainted with our project, developed by a global collective numbering in the double digits. The engine is settling into more frequent releases, making it easier for gamedevs to keep up with our incremental improvements. We’ve added a second showcase game to teach by example whilst demonstrating what Amethyst is currently capable of. And best of all for the newcomers, we’ve introduced the “2D quickstarter”, a simple game template that gets you up and running with a working Amethyst game as quickly as possible.",
      "url": "https://amethyst.rs/posts/activity-report-july-2019",
      "tweet_url": "https://twitter.com/AmethystEngine/status/1160156611417190400?s=20",
      "date_published": "2019-08-10T00:00:00+00:00",
      "author": {
        "name": "Erlend Sogge Heggen",
        "url": "https://amethyst.rs/news"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "695ee455-42ad-432f-88a0-00deb73361d3",
      "title": "Low Power NB-IoT on STM32 Blue Pill with Apache Mynewt and Embedded Rust",
      "content_text": "In this article we’ll learn to optimise the power consumption of the NB-IoT Sensor Application in the previous tutorial from this jagged power-hungry mess… To these well-disciplined bars… It’s a simple application (coded in Embedded Rust) that polls Blue Pill’s internal temperature sensor and transmits the sensor data to a server over NB-IoT.",
      "url": "https://medium.com/@ly.lee/low-power-nb-iot-on-stm32-blue-pill-with-apache-mynewt-and-embedded-rust-cef5a3ecdd90",
      "date_published": "2019-09-04T01:25:15.966+00:00",
      "author": {
        "name": "Lup Yuen Lee",
        "url": "https://medium.com/@ly.lee"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "8e664490-3dfb-419b-8281-61ea737dd762",
      "title": "Announcing actix-raft: Raft distributed consensus implemented using Actix",
      "content_text": "An implementation of the Raft distributed consensus protocol using the Actix actor framework. Blazing fast Rust, a modern consensus protocol, an outstanding actor framework. This project intends to provide a backbone for the next generation of distributed data storage systems (SQL, NoSQL, KV, Streaming &c) built with Rust.",
      "url": "https://railgun-rs.github.io/actix-raft/overview.html",
      "date_published": "2019-08-28T00:00:00+00:00",
      "author": {
        "name": "Anthony Dodd",
        "url": "https://railgun-rs.github.io/actix-raft/overview.html"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "86fe455b-cfd7-472b-860b-2d969a8cd5ba",
      "title": "Using C Libraries in Rust",
      "content_text": "Today I want to dig into one of the difficulties we ran into while trying to rewrite our IoT Python code in Rust: specifically FFI, or the “Foreign Function Interface” — the bit that allows Rust to interact with other languages. When I tried to write Rust code to integrate with C libraries a year ago, the existing documents and guides often gave conflicting advice, and I had to stumble through the process on my own. This guide is intended to help future Rustaceans work through the process of porting C libraries to Rust, and familiarize the reader with the most common problems we encountered while doing the same.",
      "url": "https://medium.com/dwelo-r-d/using-c-libraries-in-rust-13961948c72a",
      "date_published": "2019-08-17T00:22:36.987+00:00",
      "author": {
        "name": "Jeff Hiner",
        "url": "https://medium.com/@jhiner"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4da678ba-45e7-444f-b5da-20e2893bb4d6",
      "title": "How to use routers in Rust Frontend",
      "content_text": "In the previous post How to use a modal in Rust, we learnt how to write a simple image modal with Rust frontend. We could find that we can build components visible only in specific conditions. In this post, we will learn how to use routers in Rust frontend with Yew. You will find that it is easy with an example.",
      "url": "https://www.steadylearner.com/blog/read/How-to-use-routers-in-Rust-Frontend",
      "tweet_url": "https://twitter.com/steadylearner_p/status/1156561705708806144?s=20",
      "date_published": "2019-08-27T23:46:31+00:00",
      "author": {
        "name": "Steadylearner",
        "url": "https://www.steadylearner.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "f40bd89a-d036-4bfd-819a-9f7c128707d9",
      "title": "Animate code with awoo!",
      "content_text": "Lately, I’ve been wanting to re-write demoscene-like applications. Not in the same mood and way as I usually did, though. Instead, I want to build small things for people to play with. A bit like small and easy to use audiovisual experiences (it can be seen as small video games for instance, but focused on the artistic expression as some games do).\n\nThe thing is, the kind of program we want generates its own inputs based on, mostly, the speed at which the hardware it’s running on is able to render a complete frame. The faster the more accurate we sample from that continuous function. That is actually quite logical: more FPS means, literally, more images to sample. The difference between two images will get less and less noticeable as the number of FPS rises. That gives you smooth images.\n\nThe “challenge” here is to write code to schedule those images. Instead of taking a parameter like the time on the command-line and rendering the corresponding image, we will generate a stream of images and will do different things at different times. Especially in demoscene productions, we want to synchronize what’s on the screen with what’s playing on the audio device.",
      "url": "https://phaazon.net/blog/introducing-awoo",
      "date_published": "2019-07-28T11:00:00+00:00",
      "author": {
        "name": "Dimitri Sabadie",
        "url": "http://phaazon.net/"
      },
      "tags": [
        "Games and Graphics",
        "Crates"
      ]
    },
    {
      "id": "c50ebb87-7e8f-4d08-bc8c-ebe51377faf4",
      "title": "Join Your Threads",
      "content_text": "This is a note on how to make multithreaded programs more robust. It’s not really specific to Rust, but I get to advertise my new jod-thread micro-crate :)",
      "url": "https://matklad.github.io/2019/08/23/join-your-threads.html",
      "date_published": "2019-08-23T00:00:00+00:00",
      "author": {
        "name": "Aleksey Kladov",
        "url": "https://matklad.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "b577a6bb-429a-454b-8d2b-77175dba68c8",
      "title": "Building with async/await in Rust",
      "content_text": "As you might have heard, async/await is coming to Rust soon. This is a big deal. Rust has already has popular crates (tokio, actix) that provide asynchronous concurrency, but the async syntax coming to stable in 1.39 is much, much more approachable. My experience has been that you can produce and reason about application flow much more easily, which has made me significantly more productive when dealing with highly concurrent systems. To kick the tires of this new syntax I dug into the nightly branch, and built a high-performance TCP client called clobber. In this post I'll talk about why I think async/await in Rust is a big deal, and walk you some of the code in clobber.",
      "url": "https://ragona.com/posts/clobber_async_await",
      "date_published": "2019-08-21T00:00:00+00:00",
      "author": {
        "name": "Ryan Ragona",
        "url": "https://ragona.com/"
      },
      "tags": [
        "Web and Network Services",
        "Performance"
      ]
    },
    {
      "id": "a4736472-659a-4d2a-9dc4-d4d12d342963",
      "title": "Understanding Rust Through AVL Trees",
      "content_text": "From<Elixir>, Into<Rust>. I loved learning the Elixir language and how its pragmatic supervision trees and process model taught me the value fault tolerance as a quality of code than of infrastructure. Having safety and failure recovery as an idiomatic culture and mindset of the language made me a better thinker and developer. As a personal preference then in selecting new languages to learn, I look for potentially new perspectives and insights that it ascribes to its pilgrims. In general, a good learning curve is a good indicator since it has much to teach.",
      "url": "https://francismurillo.github.io/2019-07-31-Understanding-Rust-Through-AVL-Trees/",
      "date_published": "2019-07-31T00:00:00+00:00",
      "author": {
        "name": "Francis Murillo",
        "url": "https://francismurillo.github.io/"
      },
      "tags": [
        "Getting Started",
        "Computer Science"
      ]
    },
    {
      "id": "9ce993e1-4fda-4f75-9d26-9b15c084d07c",
      "title": "This month in rustsim #7 (June − July 2019)",
      "content_text": "Welcome to the seventh edition of _This month in rustsim_! This monthly newsletter will provide you with a",
      "url": "https://www.rustsim.org/blog/2019/08/01/this-month-in-rustsim/",
      "date_published": "2019-08-01T00:00:00+00:00",
      "author": {
        "name": "Sébastien Crozet",
        "url": "https://www.rustsim.org/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "2439dd44-0bd5-437e-bb60-f7b24b4f02f2",
      "title": "Codenano, a tool for designing DNA nanostructures",
      "content_text": "We are proud to announce the release of our software codenano, available at https://dna.hamilton.ie/codenano/. Here, we give an introduction to what codenano can and can not do. The source code for codenano is hosted on a github repository: https://github.com/thenlevy/codenano, along with a short tutorial.\n\nCodenano allows one to design and visualise DNA nanostructures specified using code, all in your browser. Codenano also has the ability to compute some simple interactions between DNA bases in order to help the user design DNA nanostructures that are feasible according to some simple criteria. ",
      "url": "https://dna.hamilton.ie/2019-07-18-codenano.html",
      "date_published": "2019-07-18T00:00:00+00:00",
      "author": {
        "name": "Nicolas Levy, Pierre-Étienne Meunier and Damien Woods",
        "url": "https://dna.hamilton.ie/codenano/"
      },
      "tags": [
        "Computer Science",
        "Crates"
      ]
    },
    {
      "id": "f0cc3e18-ac97-474b-b8f1-416a9e11aadc",
      "title": "Implementing Lempel-Ziv Jaccard Distance (LZJD) in Rust",
      "content_text": "One of our clients helps companies in becoming GDPR-compliant. A goal is to recognize sensitive pieces of user data in a big pile of registrations, receipts, emails, and transcripts, and mark them to be checked out later. As more and more data is collected by companies, finding and eliminating sensitive data becomes harder and harder, to the point where it is no longer possible for mere human employees to keep up without assistance.",
      "url": "https://tweedegolf.nl/blog/33/implementing-lempel-ziv-jaccard-distance-lzjd-in-rust",
      "date_published": "2019-08-06T00:00:00+00:00",
      "author": {
        "name": "Henk Dieter",
        "url": "https://tweedegolf.nl/blog"
      },
      "tags": [
        "Computer Science",
        "Crates"
      ]
    },
    {
      "id": "a998ed84-202b-48ad-b8ca-829ae5f387ef",
      "title": "Using Tree-sitter Parsers in Rust",
      "content_text": "Tree-sitter is a parser generator tool and parsing library. It generates portable parsers that can be used in several languages including Rust. Tree-sitter grammars are available for several languages. This is a game changer because it lowers the barrier to entry for writing language tooling. You no longer need to write your own parser. With Tree-sitter, you can now simply use an existing parser.",
      "url": "https://rfdonnelly.github.io/posts/using-tree-sitter-parsers-in-rust/",
      "date_published": "2019-08-07T11:20:33-07:00",
      "author": {
        "name": "Rob Donnelly",
        "url": "https://rfdonnelly.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "5ab7b4e5-a7ab-470c-be66-ec1a8354a782",
      "title": "Actually Using Crev, Or, The Problem Of Trusting Software Dependencies",
      "content_text": "Currently the only implementation of crev is cargo-crev, which ties into the Rust language package manager, cargo. However, none of this is Rust-specific apart from the implementation, the basic concept and code review format should work for any language or package system. Code reviews (“proofs”) are just YAML files, and they can be shared around however you feel like – the method currently seems to be by putting proofs in git repositories, and cargo-crev has support for this. crev already has a pretty good getting started guide that covers much of the same ground as this, but I wanted to write something similar that comes from a random user, not the system’s creator.",
      "url": "https://wiki.alopex.li/ActuallyUsingCrev",
      "date_published": "2019-08-25T00:00:00+00:00",
      "author": {
        "name": "Simon Heath",
        "url": "https://wiki.alopex.li/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "0df32177-8f6b-48ec-a896-5555337110fa",
      "title": "Introduction to C2Rust",
      "content_text": "Our goal is to build useful tools that make it easier to take existing Rust code and get up and running with Rust. We aim to automate much of the translation and rewriting process so that migrating legacy systems is practical and scalable with minimal manual effort.\n\nWe’re excited to announce that a milestone long in the making is finally here! You can now install C2Rust from crates.io with a simple cargo install on Linux and OS X. We’ve been hard at work improving C2Rust, so go install and give it a spin! You can find the necessary prerequisites in the C2Rust README.",
      "url": "https://immunant.com/blog/2019/08/introduction-to-c2rust/",
      "tweet_url": "https://twitter.com/rinon/status/1164703068430032896?s=20",
      "date_published": "2019-08-23T00:00:00+00:00",
      "author": {
        "name": "Immunant, Inc",
        "url": "https://immunant.com/blog"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "c5ced679-f825-47f6-b97e-11199ed40973",
      "title": "6 months of game development in Rust",
      "content_text": "If you made it here you might have already read my previous post 24 hours of game development in Rust, but if you haven't, it was basically a short summary of how I started learning rust and decided to make a game with it. I started with a classical OOP/trait architecture that was taking me nowhere really fast, so I switched to ECS and got a minimal prototype working. Fast forward 6 months, I wanted to catch you folks up on where I am and what I've learnt so far.",
      "url": "https://iolivia.me/posts/6-months-of-rust-game-dev/",
      "tweet_url": "https://twitter.com/oliviff/status/1164460622186274817?s=20",
      "date_published": "2019-08-21T00:00:00+00:00",
      "author": {
        "name": "Olivia Ifrim",
        "url": "http://iolivia.me/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "91dd315b-376c-4411-a87a-7ff4995f0ef4",
      "title": "Polsim - a case study for small-scale scientific computing in Rust",
      "content_text": "The motivation for this post is to recount my experiences developing a scientific tool written in Rust in the context of someone with a scientific background2. I'll explain why I made certain choices, and I'll document the things that I struggled with along the way.",
      "url": "https://tinkering.xyz/polsim/",
      "date_published": "2019-06-06T11:33:37-05:00",
      "author": {
        "name": "Zach Mitchell",
        "url": "https://tinkering.xyz/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "a14dd34c-7e7d-4040-9b8f-e8708df5447d",
      "title": "Rsoc: Improving Ion's UX, week 5 and 6",
      "content_text": "The Redox official website",
      "url": "https://www.redox-os.org/news/rsoc-ion-ux-4-5/",
      "date_published": "2019-08-18T00:00:00+00:00",
      "author": {
        "name": "AdminXVII",
        "url": "https://www.redox-os.org/news/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "adf5ec47-1ec7-4b47-9d89-122b4efdd8f9",
      "title": "Introducing nushell",
      "content_text": "Today, we’re introducing a new shell, written in Rust. It draws inspiration from the classic Unix philosophy of pipelines, the structured data approach of PowerShell, functional programming, systems programming, and more.",
      "url": "http://www.jonathanturner.org/2019/08/introducing-nushell.html",
      "tweet_url": "https://twitter.com/nu_shell/status/1165015039503261696?s=20",
      "date_published": "2019-08-23T00:00:00+00:00",
      "author": {
        "name": "Jonathan Turner, Yehuda Katz, and Andrés Robalino, with contributions from Odin Dutton",
        "url": "https://book.nushell.sh/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "ce52dbf1-c1be-4db1-bdb9-c2ac79ed9b1d",
      "title": "rx — a minimalist and extensible pixel editor",
      "content_text": "rx is an extensible, modern and minimalist pixel editor implemented in Rust. It's designed to have as little UI as possible, and instead takes inspiration from vi's modal nature and command mode. Compared to other pixel editors, rx aims to be smaller, yet more configurable and extendable. `rx` takes a different approach when it comes to animation as well, which is done with *strips*.",
      "url": "http://cloudhead.io/rx/",
      "tweet_url": "https://twitter.com/cloudhead/status/1165566684293472257?s=20",
      "date_published": "2019-08-26T20:08:25+00:00",
      "author": {
        "name": "Alexis Sellier",
        "url": "http://cloudhead.io/"
      },
      "tags": [
        "Tools and Applications",
        "Games and Graphics"
      ]
    },
    {
      "id": "315ad655-56d7-48d4-b68a-434cbabf710a",
      "title": "pastel - A command-line tool to generate, analyze, convert and manipulate colors",
      "content_text": "pastel is a command-line tool to generate, analyze, convert and manipulate colors. It supports many different color formats and color spaces like RGB, HSL, CIELAB, CIELCh as well as ANSI 8-bit and 24-bit representations.",
      "url": "https://github.com/sharkdp/pastel",
      "tweet_url": "https://twitter.com/sharkdp86/status/1165636099630424064?s=20",
      "date_published": "2019-08-26T00:00:00+00:00",
      "author": {
        "name": "David Peter",
        "url": "https://github.com/sharkdp"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "dac15914-213c-4397-8485-eb2156b0e88b",
      "title": "Updating to Async/Await",
      "content_text": "We’re pleased to announce the release of the first Tokio alpha with async & await support. This includes updating all of the Tokio crates to use std::future instead of futures 0.1. It also includes adding async fn versions of the APIs.",
      "url": "https://leshow.github.io/post/async_await/",
      "date_published": "2019-08-12T09:30:08-04:00",
      "author": {
        "name": "Evan Cameron",
        "url": "https://leshow.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "1e20c763-7a28-429e-9d68-e3628dcc2edd",
      "title": "Artichoke is a Ruby made with Rust",
      "content_text": "Artichoke is a platform for building MRI-compatible Ruby implementations. Artichoke provides a Ruby runtime implemented in Rust that can be loaded into many VM backends.",
      "url": "https://github.com/artichoke/artichoke",
      "date_published": "2019-08-23T00:00:00+00:00",
      "author": {
        "name": "Ryan Lopopolo",
        "url": "https://github.com/lopopolo"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "398562a1-3ec5-4277-8a7c-5c3388fed5ba",
      "title": "Rust: safe and unsafe as theorems and axioms",
      "content_text": "There is a fair amount of confusion about what unsafe means in Rust, as well as debate about how one should think about it. Recently I’ve seen several blog posts like What is Rust’s unsafe?, The Temptation of Unsafe and Unsafe as a Human-Assisted Type System. I’m not really attempting to explain what is considered unsafe in Rust, which is explained by the reference. Nor am I going to try to answer the question of precisely when unsafe should be used and how often. My basic suggestion: we can think of unsafe in terms of mathematical axioms and theorems. This understanding is somewhere in between actual mathematical rigour and an analogy.",
      "url": "https://iandouglasscott.com/2019/07/26/rust-safe-and-unsafe-as-theorems-and-axioms/",
      "date_published": "2019-07-26T15:37:00-07:00",
      "author": {
        "name": "Ian Douglas Scott",
        "url": "https://iandouglasscott.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c4f23f51-7f72-4671-aec3-de6849639309",
      "title": "A little Rust program for the C major scale",
      "content_text": "Well I am a professional programmer for over a decade now, so my brain is trained to remember algorithmic thinking. But it's not trained to retain music theory. Which leads me to my beginning life-hack of music theory .... write a music theory shell application in rust to help me understanding the underlying mathematical structures by implementing them. I will try to make this an ongoing regular exercise to combine of my two currently favorite things: Rust and Guitar playing / Music.",
      "url": "https://chilimatic.hashnode.dev/a-little-rust-program-for-the-c-major-scale-cjyhc96hv001kvcs1heos8grg",
      "date_published": "2019-07-24T14:23:00+00:00",
      "author": {
        "name": "j",
        "url": "https://chilimatic.hashnode.dev/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "fd4779eb-f9f4-4c63-98c9-d7fe21fb6bac",
      "title": "Rust for OOP - Closures",
      "content_text": "Turning functions into first-class citizens in our programming languages is one of the major changes of the decade. Well, kind of. The concept, also known as lambda, is far from new. Functional programming languages had it from the very start, during the late ’50s. Even some of the object-oriented languages like Python had it quite early, back in 1994. However it became an official part of C++ only in 2011, and Java brought it even later in 2014. And with those two languages and many others, it became the norm, even for non-functional programming. As first-class citizens, functions can be saved as variables or transfer as arguments to functions easily.",
      "url": "https://oribenshir.github.io/afternoon_rusting/blog/closures",
      "tweet_url": "https://twitter.com/oribenshir/status/1152316489757798400?s=20",
      "date_published": "2019-07-19T00:00:00+00:00",
      "author": {
        "name": "Ori Ben-Shir",
        "url": "https://oribenshir.github.io/afternoon_rusting/index.html"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "01b4afb8-222b-4d4f-ad09-443d48231e3f",
      "title": "Introducing the Rust Game Development Working Group",
      "content_text": "Rust’s combination of low-level control, excellent performance and modern build tools makes it an exciting choice for game developers. The idea of a working group to support this burgeoning community has been proposed many times over the years, and we’re excited to announce that a group has finally been formed!",
      "url": "https://rust-gamedev.github.io/2019/08/18/introducing-the-rust-game-development-working-group",
      "tweet_url": "https://twitter.com/rust_gamedev/status/1163137574812209152?s=20",
      "date_published": "2019-08-18T00:00:00+00:00",
      "author": {
        "name": "Rust GameDev",
        "url": "https://rust-gamedev.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "9e2dbb14-ceba-4562-a577-a218c1e652f8",
      "title": "The New Firmware Manager: Updating firmware across Linux distributions",
      "content_text": "Over the past few months, System76 has been developing a simple, easy-to-use tool for updating firmware on Pop!_OS and System76 hardware. Today, we’re excited to announce that you can now check and update firmware through Settings on Pop!_OS, and through the firmware manager GTK application on System76 hardware running other Debian-based distributions.",
      "url": "https://blog.system76.com/post/187072707563/the-new-firmware-manager-updating-firmware-across",
      "date_published": "2019-08-17T00:00:00+00:00",
      "author": {
        "name": "System76",
        "url": "https://blog.system76.com/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "0045c68b-1c6b-4aee-9704-5471d5dd9758",
      "title": "RSoC: Improving Ion's UX, week 4 - Autocompleting under 1ms",
      "content_text": "The Redox official website",
      "url": "https://www.redox-os.org/news/rsoc-ion-ux-3/",
      "date_published": "2019-07-28T00:00:00+00:00",
      "author": {
        "name": "AdminXVII",
        "url": "https://www.redox-os.org/news/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "c0401410-c335-43a2-a9f3-342909efdb3f",
      "title": "How Rust optimizes async/await: Part 1",
      "content_text": "The issue to stabilize an initial version of async/await in Rust has left final comment period. The feature looks slated to stabilize in an upcoming release, most likely 1.39. One of the blockers mentioned in the RFC is the size of the state machines emitted by async fn. I’ve spent the last few months tackling this problem, and wanted to give people a window into the process of writing these optimizations, with all the intricacies involved.",
      "url": "https://tmandry.gitlab.io/blog/posts/optimizing-await-1/",
      "tweet_url": "https://twitter.com/tmandry/status/1163481057619873792?s=20",
      "date_published": "2019-08-18T00:00:00+00:00",
      "author": {
        "name": "Tyler Mandry",
        "url": "https://tmandry.gitlab.io/blog/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "1a249517-dab9-4195-abad-c76c79fd0560",
      "title": "Rust vs GUI",
      "content_text": "Implications of Rust's borrow checking and memory ownership on GUI development (simple case)",
      "url": "https://turbomack.github.io/posts/2019-07-28-rust-vs-gui.html",
      "tweet_url": "https://twitter.com/turbo_MaCk/status/1155610971311882245?s=20",
      "date_published": "2019-07-28T00:00:00+00:00",
      "author": {
        "name": "Marek Fajkus",
        "url": "https://turbomack.github.io/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "09df4bbd-96fe-49af-8811-407f98c3108e",
      "title": "Practical Networked Applications in Rust, Part 2: Networked Key-Value Store",
      "content_text": "Welcome to the second installation in my series on taking the Practical Networked Applications in Rust course, kindly provided by the PingCAP company, where you develop a networked and multithreaded/asynchronous key-value store in the amazing Rust language. In the previous, and initial, post I implemented the course module of making the fundamental key-value store functionality, based around the Bitcask algorithm, which would only allow for local usage on your own computer. In the second module of my course work, I add networking functionality, dividing the application into a client/server architecture so that clients can connect to servers across the network.",
      "url": "https://arveknudsen.com/posts/practical-networked-applications-in-rust/module-2/",
      "tweet_url": "https://twitter.com/hochgenuss/status/1157795856122359808?s=20",
      "date_published": "2019-08-04T01:00:00+02:00",
      "author": {
        "name": "Arve Knudsen",
        "url": "https://arveknudsen.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "902d33e4-a66a-479e-8758-f543083da639",
      "title": "Await a minute, why bother?",
      "content_text": "Recently I have been retooling some core Rust libraries at $work to play nicely with native async/await syntax. This note covers my thoughts on why this feature is so important to our async codebase if it's \"just\" syntax sugar for a job that could just be done using raw Futures instead.",
      "url": "https://docs.rs/dtolnay/0.0.5/dtolnay/macro._01__await_a_minute.html",
      "date_published": "2019-08-08T00:00:00+00:00",
      "author": {
        "name": "David Tolnay",
        "url": "https://docs.rs/dtolnay/0.0.5/dtolnay/index.html"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "2d8f15c2-34f2-4bc2-a1b2-aef6744a9691",
      "title": "surf",
      "content_text": "Today we're happy to announce Surf, an asynchronous cross-platform streaming HTTP client for Rust. This project was a collaboration between Kat Marchán (Entropic / Microsoft), Stjepan Glavina (Ferrous Systems), and myself (Yoshua Wuyts). Surf is a friendly HTTP client built for casual Rustaceans and veterans alike. ",
      "url": "https://blog.yoshuawuyts.com/surf/",
      "tweet_url": "https://twitter.com/yoshuawuyts/status/1161996959550492672?s=20",
      "date_published": "2019-08-14T00:00:00+00:00",
      "author": {
        "name": "Yoshua Wuyts",
        "url": "https://blog.yoshuawuyts.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "5b9044be-428f-48ff-b1f3-b9f0e6b63732",
      "title": "Thoughts on Rust bloat",
      "content_text": "I’m about to accept a PR that will increase druid’s compile time about 3x and its executable size almost 2x. In this case, I think the tradeoff is worth it (without localization, a GUI toolkit is strictly a toy), but the bloat makes me unhappy and I think there is room for improvement in the Rust ecosystem.",
      "url": "https://raphlinus.github.io/rust/2019/08/21/rust-bloat.html",
      "date_published": "2019-08-21T17:17:42+00:00",
      "author": {
        "name": "Raph Levien",
        "url": "https://raphlinus.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "05f496a4-b42b-43f3-b0f8-90edcdb52bee",
      "title": "Visual Embedded Rust Programming with Visual Studio Code",
      "content_text": "Create and edit Embedded Rust programs for STM32 Blue Pill and Apache Mynewt… By dragging and dropping blocks!",
      "url": "https://medium.com/@ly.lee/visual-embedded-rust-programming-with-visual-studio-code-1bc1262e398c",
      "date_published": "2019-08-19T00:08:33.064+00:00",
      "author": {
        "name": "Lup Yuen Lee",
        "url": "https://medium.com/@ly.lee"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "94dd1a96-2b38-4556-bb32-5064f803e5b6",
      "title": "Low-level TCP server in Rust with MIO",
      "content_text": "It is time to get acquainted with Metal IO, low-level cross-platform abstraction over epoll/kqueue written in Rust. In this article I will show and explain how to write simple single-threaded asynchronous TCP server, then teach it to mock HTTP protocol, and then benchmark it with ab/wrk. The results are about to be impressive.",
      "url": "https://sergey-melnychuk.github.io/2019/08/01/rust-mio-tcp-server/",
      "date_published": "2019-08-01T22:25:42+00:00",
      "author": {
        "name": "Sergey Melnychuk",
        "url": "https://sergey-melnychuk.github.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "5b6c323e-57a0-4281-86ee-67c3a4bf6173",
      "title": "Announcing async-std",
      "content_text": "We are excited to announce a beta release of async-std with the intent to publish version 1.0 by September 26th, 2019. async-std is a library that looks and feels like the Rust standard library, except everything in it is made to work with async/await exactly as you would expect it to. The library comes with a book and polished API documentation, and will soon provide a stable interface to base your async libraries and applications on. While we don't promise API stability before our 1.0 release, we also don't expect to make any breaking changes.",
      "url": "https://async.rs/blog/announcing-async-std/",
      "tweet_url": "https://twitter.com/asyncrs/status/1162393714209280001",
      "date_published": "2019-08-16T00:00:00+00:00",
      "author": {
        "name": "Stjepan Glavin",
        "url": "https://async.rs/blog"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "13003d78-0993-49fe-ae7e-0b0263a77353",
      "title": "C vs Rust vs Go: performance analysis",
      "content_text": "In one of my previous jobs I got a task: “For given image find popular colors in that image, so users can browse images by it’s colors”. This is where three languages comes to play. I have implemented histogram algorithm in C, Rust and Go.",
      "url": "https://medium.com/@marek.michalik/c-vs-rust-vs-go-performance-analysis-945ab749056c",
      "date_published": "2019-07-18T20:54:01.576+00:00",
      "author": {
        "name": "Marek Michalik",
        "url": "https://medium.com/@marek.michalik"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "fb9caad4-9aa0-4996-92d6-93fd75509dcf",
      "title": "CPU atomics and orderings explained",
      "content_text": "Sometimes the question comes up about how CPU memory orderings work, and what they do. I hope this post explains it in a really accessible way.",
      "url": "https://fy.blackhats.net.au/blog/html/2019/07/16/cpu_atomics_and_orderings_explained.html",
      "date_published": "2019-07-16T00:00:00+00:00",
      "author": {
        "name": "Firstyear",
        "url": "https://fy.blackhats.net.au/blog/html/index.html"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "76cefd5b-2344-4629-84fb-5bf5c45c0ce0",
      "title": "Announcing Rust 1.37.0",
      "content_text": "The highlights of Rust 1.37.0 include referring to enum variants through type aliases, built-in cargo vendor, unnamed const items, profile-guided optimization, a default-run key in Cargo, and #[repr(align(N))] on enums. Read on for a few highlights, or see the detailed release notes for additional information.",
      "url": "https://blog.rust-lang.org/2019/08/15/Rust-1.37.0.html",
      "tweet_url": "https://twitter.com/rustlang/status/1162007614013751297",
      "date_published": "2019-08-15T00:00:00+00:00",
      "author": {
        "name": "The Rust Release Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "5f582def-af9d-44cb-9a18-648bff14bd67",
      "title": "Introducing glam and mathbench",
      "content_text": "glam is a simple and fast Rust linear algebra library for games and graphics. mathbench is a set of unit tests and benchmarks comparing the performance of glam with the popular Rust linear algebra libraries cgmath and nalgebra. The following is a table of benchmarks produced by mathbench comparing glam performance to cgmath and nalgebra on f32 data.",
      "url": "http://bitshifter.github.io/2019/07/10/introducing-glam-and-mathbench/",
      "tweet_url": "https://twitter.com/bitshifternz/status/1148920317944819712?s=20",
      "date_published": "2019-07-10T00:00:00+00:00",
      "author": {
        "name": "Cameron Hart",
        "url": "https://bitshifter.github.io/"
      },
      "tags": [
        "Performance",
        "Crates"
      ]
    },
    {
      "id": "98583b20-bd88-4cad-8a18-5e375c6c369f",
      "title": "Unsafe as a Human-Assisted Type System",
      "content_text": "This is a short note about yet another way to look at Rust’s unsafe. Today, an interesting bug was found in rustc, which made me aware just how useful unsafe is for making code maintainable. The story begins a couple of months ago, when I was casually browsing through recent pull requests for rust-lang/rust. I was probably waiting for my code to compile at that moment :] Anyway, a pull request caught my attention, and, while I was reading the diff, I noticed a usage of unsafe.",
      "url": "https://matklad.github.io/2019/07/25/unsafe-as-a-type-system.html",
      "date_published": "2019-07-25T00:00:00+03:00",
      "author": {
        "name": "Aleksey Kladov",
        "url": "https://matklad.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "1f02eefe-da84-472d-8df4-039766538e7f",
      "title": "Baseball Coding with Rust – Part 2",
      "content_text": "In Part 1, we introduced Rust and built a little program that allowed us to get all the GameDay links for a particular day. Today, we’ll dive right into code and begin the process of building out a complete game from the xml files. As much as possible, I’ll try to explain important concepts along the way as we build out the application. My goal is to deliver a crash course into baseball-centric programming in Rust, complete with code, theory and practical use, without getting too much into the weeds.",
      "url": "https://tht.fangraphs.com/baseball-coding-with-rust-part-2/",
      "date_published": "2019-07-24T00:00:00+00:00",
      "author": {
        "name": "Eli Ben-Porat",
        "url": "https://tht.fangraphs.com/author/ebpbaseball/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "6f824da5-4033-40da-994f-581a7909e50e",
      "title": "Introduction",
      "content_text": "A home for compiler team planning documents, meeting minutes, and other such things. If you’re interested in learning about how rustc works – as well as advice on building the compiler, preparing a PR, and other similar topics – check out the rustc-guide.",
      "url": "https://rust-lang.github.io/compiler-team/",
      "tweet_url": "https://twitter.com/spastorino/status/1154096554527137792?s=20",
      "date_published": "2019-08-18T04:30:25+00:00",
      "author": {
        "name": "Rust Lang Compiler Team",
        "url": "https://rust-lang.github.io/compiler-team"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "faca5f20-8895-4d5b-850c-d2a8b4149876",
      "title": "Practical Networked Applications in Rust, Part 1: Non-Networked Key-Value Store",
      "content_text": "The PingCAP company, makers of the TiDB NewSQL database and the TiKV key-value store, have kindly made publicly available, as well as open-sourced, a set of training courses that they call the \"PingCAP Talent Plan\". These courses train programmers in writing distributed systems in the Go and Rust languages. They are originally intended by PingCAP to train students, new employees and new contributors to TiDB and TiKV and focus as such on subjects relevant to those projects, but are still appropriate to anyone with an interest in learning to make distributed systems in Go and/or Rust.",
      "url": "https://arveknudsen.com/posts/practical-networked-applications-in-rust/module-1/",
      "tweet_url": "https://twitter.com/hochgenuss/status/1153688058295926786?s=20",
      "date_published": "2019-07-23T13:00:00+02:00",
      "author": {
        "name": "Arve Knudsen",
        "url": "https://arveknudsen.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "b958f8b9-38f2-42e9-8cb9-9b7c59f7b875",
      "title": "Tokio alpha release with async & await",
      "content_text": "We’re pleased to announce the release of the first Tokio alpha with async & await support. This includes updating all of the Tokio crates to use std::future instead of futures 0.1. It also includes adding async fn versions of the APIs.",
      "url": "https://tokio.rs/blog/2019-08-alphas/",
      "tweet_url": "https://twitter.com/tokio_rs/status/1159570806847860736?s=20",
      "date_published": "2019-08-08T00:00:00+00:00",
      "author": {
        "name": "Tokio",
        "url": "https://tokio.rs/blog/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "2a87f758-3eaf-4971-a00f-02f3175d0db5",
      "title": "Follow-up to Method on Emulating Higher-Kinded Types (HKTs) in Rust",
      "content_text": "First off, thanks for all the comments and kind words on the original writeup; I've been meaning to follow up on some of the suggestions and write about the different ways to represent monads (and functors, HKTs, etc) that now exist, but a month of being busy has kind of gotten in the way (mainly with three new kittens!).\n\nAnd for sure, I do not expect (nor do I want) this to become the norm for production-level Rust: rather, I hope that this can contribute to the foundations of programming with higher-level abstractions in Rust, somewhat like how early template metaprogramming in C++ and typeclass-constraint-unification metaprogramming in Haskell have contributed, perhaps indirectly, to later innovations in their respective languages and ecosystems that were much more reasoned, sound and usable.",
      "url": "https://gist.github.com/edmundsmith/e09d5f473172066c0023ef84ee830cad",
      "date_published": "2019-08-08T11:44:35+00:00",
      "author": {
        "name": "Edmund Smith",
        "url": "https://gist.github.com/edmundsmith"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "27ce3b2b-a0fc-4cf2-ade4-1d4bcd1dabf7",
      "title": "My First Three Months With Rust",
      "content_text": "I’ve used C++ professionally in games and simulations for over 10 years, and in the past few years I’ve also used C# to build distributed backend systems. Lately, I’ve been exploring Rust.",
      "url": "https://blog.aclysma.com/my-first-three-months-with-rust/",
      "date_published": "2019-08-07T19:13:41+00:00",
      "author": {
        "name": "Philip Degarmo",
        "url": "https://blog.aclysma.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ac36b146-f880-46e7-9f3f-819ab9daefa8",
      "title": "My Thoughts on Rust's Future: A Positive Outlook",
      "content_text": "I'm feeling really positive about Rust's prospects of popularity and wide-spread adoption in the future. I've been a part of the Rust community for three years now, and it feels like the stars are starting to align in order to let Rust jump into a position of dominance in the programming language world. There are several different, wide-spread, and mostly unrelated trends that I've noticed are all coming together with positive implications for Rust.",
      "url": "https://cprimozic.net/blog/my-thoughts-on-rusts-future/",
      "date_published": "2019-08-03T00:00:00+00:00",
      "author": {
        "name": "Casey Primozic",
        "url": "https://cprimozic.net/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "674ac0a5-a4cc-46f3-84c5-2eb3bdfde2f3",
      "title": "Javelin project",
      "content_text": "We are having fun moving the gfx-rs project forward thanks to the power provided by the Rust language. We are building rich abstractions which expand beyond the gfx-hal API itself and into the internal layers of the backends, structured to be modular and maintainable. We are building high-performance graphics and compute infrastructure that deeply interacts with OS and drivers, thanks to the Rust’s FFI capabilities and the lack of runtime. We do all of this while requiring only a portion of our developers’ time and attention, who work on gfx-rs mostly as a side project. Rust allows us to move forward confidently and quickly, experiment with features as well as land production-quality code.",
      "url": "https://gfx-rs.github.io/2019/07/13/javelin.html",
      "date_published": "2019-07-13T00:00:00+00:00",
      "author": {
        "name": "gfx-rs",
        "url": "https://gfx-rs.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "771ffeb1-3f31-43b3-9f4b-17b114e326c2",
      "title": "The Rust compiler is still getting faster",
      "content_text": "I previously wrote about one period of improvement in Rust compiler speed. How are things going in 2019?",
      "url": "https://blog.mozilla.org/nnethercote/2019/07/25/the-rust-compiler-is-still-getting-faster/",
      "tweet_url": "https://twitter.com/nnethercote/status/1154239762229682176?s=20",
      "date_published": "2019-07-25T03:56:24+00:00",
      "author": {
        "name": "Nicholas Nethercote",
        "url": "https://blog.mozilla.org/nnethercote/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "ab2b1d95-83c2-4541-9f2d-bb5224d0b713",
      "title": "HOWTO: Replace mem::uninitialized with mem::MaybeUninit",
      "content_text": "The recent 1.36.0 release of Rust has brought a mem::MaybeUninit union that allows safer handling of possibly uninitialized data. MaybeUninit is a replacement of mem::uninitialized. Why? Because using mem::uninitialized it is damn easy to shoot yourself in the foot.",
      "url": "https://www.reddit.com/r/rust/comments/cefgec/howto_replace_memuninitialized_with_memmaybeuninit/",
      "date_published": "2019-07-19T10:59:18+00:00",
      "author": {
        "name": "Roman Proskuryakov",
        "url": "https://www.reddit.com/user/rproskuryakov/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "2e787744-947c-488d-a7b0-06f5e8ed34f3",
      "title": "Rust Rocks NB-IoT! STM32 Blue Pill with Quectel BC95-G on Apache Mynewt",
      "content_text": "We’re back in 2019… Hardly anyone writes embedded programs in Rust for microcontrollers (like STM32 Blue Pill), we all use C. But we really should switch to Rust! Moon Base One has given us 2 key reasons…",
      "url": "https://medium.com/@ly.lee/rust-rocks-nb-iot-stm32-blue-pill-with-quectel-bc95-g-on-apache-mynewt-ef62a7e28f7e",
      "tweet_url": "https://twitter.com/MisterTechBlog/status/1158040351472414720?s=20",
      "date_published": "2019-08-07T04:44:39.876+00:00",
      "author": {
        "name": "Lup Yuen Lee",
        "url": "https://medium.com/@ly.lee"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "ca7ab50b-0ea0-4d8f-9f38-74945bc33900",
      "title": "How to write Full Stack Rust code",
      "content_text": "In the previous post How to modulize your Rust Frontend, we learnt how to use impl, functions and Yew components. They help you to find errors and organize your Rust frontend project. In this post, we will include server side code with ws-rs. It will help us to build complete Rust Full Stack chat app similar to what we made at How to start Rust Chat App.",
      "url": "https://www.steadylearner.com/blog/read/How-to-write-Full-Stack-Rust-code",
      "tweet_url": "https://twitter.com/steadylearner_p/status/1153286541273391104",
      "date_published": "2019-07-22T00:00:00+00:00",
      "author": {
        "name": "Steadylearner",
        "url": "https://www.steadylearner.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "94badc73-4b58-487c-88de-ce68562f9f19",
      "title": "RSoC: Implementing ptrace for Redox OS - part 5",
      "content_text": "This week I’ve decided to skip trying to get GDB working for now (there are so many issues it’ll take forever to solve them), and instead decided to finally give focus to the final concerns I had about ptrace. Most changes this week was related to getting decent behavior of child processes, although the design feels… suboptimal, somehow (not sure why), so I feel I must be able to improve it better later.\n\nAnother change was security: Tracers running as a non-root user can now in addition to only tracing processes running as the same user, only trace processes that are directly or indirectly children of the tracer. In the future this can easily be allowed with some kind of capability, but currently in Redox there isn’t a capability-like system other than the simple (but really powerful) namespacing system which sadly I don’t think can be used for this.",
      "url": "https://www.redox-os.org/news/rsoc-ptrace-5/",
      "date_published": "2019-07-22T00:00:00+00:00",
      "author": {
        "name": "jD91mZM2",
        "url": "https://www.redox-os.org/news/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "c8522e50-6845-428d-b2c4-84b9dcfddaa4",
      "title": "Here be (owned) books: Rust ownership explained with books",
      "content_text": "One of the biggest Rust’s pros is unique ownership system. Unfortunately, it is also one of the hardest thing to learn. In this article I will try to explain it the same way I had learnt it and how I introduce people to one.",
      "url": "https://hauleth.dev/post/eli5-ownership/",
      "date_published": "2019-07-14T17:38:48+01:00",
      "author": {
        "name": "Łukasz Jan Niemier",
        "url": "https://hauleth.dev/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "14ef4b09-79cc-424c-88bd-97a5d40ec957",
      "title": "cHTTP 0.5 and the Journey Ahead",
      "content_text": "One of my more recent projects that I have been putting a lot of effort into is a Rust HTTP client called cHTTP, which I introduced on this blog over 18 months ago. Here I want to share an update on the direction of the project, and also give some detail on what months of late evenings and weekends produced in version 0.5 just published today.",
      "url": "https://stephencoakley.com/2019/07/22/chttp-0.5-and-the-journey-ahead",
      "date_published": "2019-07-22T05:00:00+00:00",
      "author": {
        "name": "Stephen Coakley",
        "url": "https://stephencoakley.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "348fb7dc-00c7-4587-8276-f11b482576db",
      "title": "Models of Generics and Metaprogramming: Go, Rust, Swift, D and More",
      "content_text": "In some domains of programming it’s common to want to write a data structure or algorithm that can work with elements of many different types, such as a generic list or a sorting algorithm that only needs a comparison function. Different programming languages have come up with all sorts of solutions to this problem: From just pointing people to existing general features that can be useful for the purpose (e.g C, Go) to generics systems so powerful they become Turing-complete (e.g. Rust, C++). In this post I’m going to take you on a tour of the generics systems in many different languages and how they are implemented. I’ll start from how languages without a special generics system like C solve the problem and then I’ll show how gradually adding extensions in different directions leads to the systems found in other languages.",
      "url": "http://thume.ca/2019/07/14/a-tour-of-metaprogramming-models-for-generics/",
      "tweet_url": "https://twitter.com/trishume/status/1152729386950496257",
      "date_published": "2019-07-14T00:00:00+00:00",
      "author": {
        "name": "Tristan Hume",
        "url": "http://thume.ca/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "4e8c0915-f401-40a1-b6b6-6120583484d1",
      "title": "Bit vectors and variable-length encoding",
      "content_text": "This is the first post on what is supposed to be an small series about writing compression algoritms in Rust, please take into account that I am no expert in compression so this is the perspective of a learner, if you think there is some improvements or corrections to be done, let me know.\n\nYou might be wondering why bit vectors are relevant for compression and so was I until I started reading a little bit about it. So, let's talk about compression.",
      "url": "https://christianpoveda.github.io/blog/bit-vectors/",
      "tweet_url": "https://twitter.com/chrisncrackers/status/1152396087417802752",
      "date_published": "2019-07-19T00:00:00+00:00",
      "author": {
        "name": "Christian Poveda",
        "url": "https://christianpoveda.github.io/blog"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "5784cd2f-f28c-4746-8c85-c39ee718c4a0",
      "title": "How to modulize your Rust Frontend",
      "content_text": "In the previous post How to use markdown with Rust Frontend, we learnt how to render markdown in Rust frontend and include CSS files from your previous frontend project. You can use a text, image, video, markdown or any HTML elements you want for your Rust frontend. In this post, we will learn how to modulize your Rust Yew frontend app. It will be easy after you learn how to use impl, function, and components for that.",
      "url": "https://www.steadylearner.com/blog/read/How-to-modulize-your-Rust-Frontend",
      "tweet_url": "https://twitter.com/steadylearner_p/status/1152238257012428801",
      "date_published": "2019-07-19T00:00:00+00:00",
      "author": {
        "name": "Steadylearner",
        "url": "https://www.steadylearner.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "461ba118-af83-41c6-8afc-42b1d320a826",
      "title": "Understanding Lifetimes",
      "content_text": "In this post, I want to describe the Lifetimes in a different way that what I’m learned from the RFC. Audience: You may already have read the Rust Book. Nice if you took a compiler course.",
      "url": "https://rniczh.github.io/blog/lifetimes-intro/",
      "date_published": "2019-06-05T00:00:00+00:00",
      "author": {
        "name": "Hong-Sheng Zheng",
        "url": "https://rniczh.github.io/"
      },
      "tags": [
        "Computer Science",
        "Language"
      ]
    },
    {
      "id": "3ded792f-b573-465c-a4bf-00a241bc7cbc",
      "title": "Siderophile: Expose your Crate’s Unsafety",
      "content_text": "Today we released a tool, siderophile, that helps Rust developers find fuzzing targets in their codebases. Siderophile trawls your crate’s dependencies and attempts to finds every unsafe function, expression, trait method, etc. It then traces these up the callgraph until it finds the function in your crate that uses the unsafety. It ranks the functions it finds in your crate by badness—the more unsafety a function makes use of, the higher its badness rating.",
      "url": "https://blog.trailofbits.com/2019/07/01/siderophile-expose-your-crates-unsafety/",
      "date_published": "2019-07-01T15:30:06+00:00",
      "author": {
        "name": "Trail of Bits",
        "url": "https://blog.trailofbits.com/"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "48855ece-4f3a-44aa-80a1-b86a03cc9538",
      "title": "Baseball Coding with Rust – Intro",
      "content_text": "From time to time, major league teams will post job offers on FanGraphs. Most of these postings, if not all of them, ask for a level of proficiency in Python or R. While these languages have built up tremendous ecosystems, especially for data science, they are limited in the amount of data they can handle.\n\nThis is not a flaw in either language, rather a design choice. Without getting into the weeds too much about language theory, each language plants itself somewhere on the performance/ease-of-use spectrum. Nothing in today’s piece should be construed as a critique of Python or R. Quite the contrary. Python and R are the bedrock languages of the data science worlds.\n\nToday, I would like to introduce you to Rust, a modern systems programming language that aims to be, in their words, “A language empowering everyone to build reliable and efficient software.” I can personally attest to this being the case.",
      "url": "https://tht.fangraphs.com/baseball-coding-with-rust-intro/",
      "tweet_url": "https://twitter.com/EliBenPorat/status/1153644229777920000",
      "date_published": "2019-07-23T10:00:52+00:00",
      "author": {
        "name": "Eli Ben-Porat",
        "url": "https://tht.fangraphs.com/author/ebpbaseball/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "153bc34f-6b3a-4103-8fed-55ed99da9e36",
      "title": "Why Rust for safe systems programming",
      "content_text": "In this series, we have explored the need for proactive measures to eliminate a class of vulnerabilities and walked through some examples of memory safety issues we’ve found in Microsoft code that could have been avoided with a different language. Now we’ll peek at why we think that Rust represents the best alternative to C and C++ currently available.",
      "url": "https://msrc-blog.microsoft.com/2019/07/22/why-rust-for-safe-systems-programming/",
      "tweet_url": "https://twitter.com/msftsecresponse/status/1153384625391058945",
      "date_published": "2019-07-22T19:19:19+00:00",
      "author": {
        "name": "Ryan Levick",
        "url": "https://msrc-blog.microsoft.com/"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "c91d6ec8-c734-495e-89ad-e63da5825eb0",
      "title": "Announcing heim: async library for system information fetching",
      "content_text": "If you are familiar with Python ecosystem, probably you had heard about psutil package — a cross-platform library for retrieving information about system processes and system utilization (CPU, memory, disks, network and so on). It is very popular and actively used package, which has analogs in other languages: gopsutil for Golang, oshi for Java, you name it. Rust, of course, is not an exception here: we do have psutil, sysinfo, sys-info and systemstat crates.\n\nNow, despite the tremendous work that had been done already by the authors of these crates, I’m excited to announce what I’ve been working on for the past three months: “heim” project — library for system information fetching.",
      "url": "https://svartalf.info/posts/2019-07-17-announcing-heim-project/",
      "tweet_url": "https://twitter.com/svartalf/status/1151479518378549250",
      "date_published": "2019-07-17T00:00:00+00:00",
      "author": {
        "name": "Nikita Kuznetsov",
        "url": "https://svartalf.info/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "f47a9bfe-394d-44b0-a4b1-683976a2cee2",
      "title": "Announcing Ballista - Distributed Compute with Rust, Apache Arrow, and Kubernetes",
      "content_text": "After taking a break from working on Arrow and DataFusion for a couple of months to focus on some deliverables at work, I have now started a new PoC project to have a second attempt at building a distributed platform with Rust, and this time around I have the advantage of already having some foundational pieces in place, namely Arrow and DataFusion. I have also been gaining experience with Kubernetes recently and I could clearly see how this would simplify the creation of a distributed platform. The pieces really are starting to fall into place.\n\nThe new project is called Ballista and is a fast moving PoC taking a top down approach to building a distributed platform.",
      "url": "https://andygrove.io/2019/07/announcing-ballista/",
      "tweet_url": "https://twitter.com/andygrove73/status/1151334404393852928",
      "date_published": "2019-07-16T00:00:00+00:00",
      "author": {
        "name": "Andy Grove",
        "url": "https://andygrove.io/blog"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "52f43349-8161-4996-95ad-138528adcf21",
      "title": "Localizing the Rust Website to Traditional Chinese",
      "content_text": "I am glad to announce that the Traditional Chinese (正體中文) version of the Rust official website has been launched. Thanks to all contributors in the community. This article records our experience to achieve the work.",
      "url": "https://medium.com/coding-neutrino-blog/localize-the-rust-website-to-traditional-chinese-473413f44d21",
      "date_published": "2019-07-19T16:38:55.762+00:00",
      "author": {
        "name": "Liu An Chi (tigercosmos)",
        "url": "https://medium.com/@tigercosmos"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "4f959a60-5f69-4997-b6d8-6cf6e8311e1f",
      "title": "How to use Torch in Rust with tch-rs",
      "content_text": "Thanks to the diligent work of Laurent Mazare on his tch-rs crate, the Rust community can now enjoy an easy access to the powerful Torch neural net framework. Being personally an avid user of both Rust and Torch, stumbling on this repo has been nothing but a belated birthday present. In this post, I would like to dive into two examples to present its most fundamental functionalities.",
      "url": "http://vegapit.com/article/how-to-use-torch-in-rust-with-tch-rs",
      "tweet_url": "https://twitter.com/vegapit_blog/status/1152195228390055937",
      "date_published": "2019-07-19T13:18:00+01:00",
      "author": {
        "name": "Vegapit",
        "url": "http://vegapit.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "9ec74f93-14a2-47ec-8572-24b9efe51a62",
      "title": "Introducing Abscissa: iqlusion's security-oriented Rust application framework",
      "content_text": "Earlier this month we released Abscissa: our security-oriented Rust application framework. After releasing v0.1, we’ve spent the past few weeks further polishing it up in tandem with this blog post, and just released a follow-up v0.2.",
      "url": "https://iqlusion.blog/introducing-abscissa-rust-application-framework",
      "tweet_url": "https://twitter.com/iqlusioninc/status/1151866986558656512",
      "date_published": "2019-07-18T07:00:51-07:00",
      "author": {
        "name": "Tony Arcieri",
        "url": "http://iqlusion.blog/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "cc336a90-bbf5-49c3-94b7-e3c4454cbc53",
      "title": "Fuzz rising: how fuzz testing is making memory unsafe languages untenable",
      "content_text": "Go and read the excellent blog post from Cloudflare on their recent outage if you haven’t already. I am not going to talk about most of it, just a few small points that especially interest me right now, which are definitely not the most important things from the outage point of view. This post got a bit long so I split it up, so this is part one.",
      "url": "https://www.cloudatomiclab.com/fuzz/",
      "tweet_url": "https://twitter.com/justincormack/status/1153060402495991808",
      "date_published": "2019-07-21T20:52:00+00:00",
      "author": {
        "name": "Justin Cormack",
        "url": "https://www.cloudatomiclab.com/"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "a0f3d2bb-e52e-440b-809f-169497494769",
      "title": "The Temptation of Unsafe",
      "content_text": "Recently, another round of discussion concerning the use of Rust’s unsafe features in the Actix web framework happened, or rather erupted, on Reddit, even more heated and acrimonious than the first time around. (I am not linking to any of the threads, as I believe that they don’t need any more exposure. Use your favorite search engine.) This proves, if more proof is needed, that people hold passionate beliefs about the matter.",
      "url": "https://inejge.github.io/blog/2019/07/18/The-Temptation-of-Unsafe.html",
      "date_published": "2019-07-18T00:00:00+00:00",
      "author": {
        "name": "inejge",
        "url": "https://inejge.github.io/blog"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "85b61a6b-91ab-4194-a236-43a690cc3f2f",
      "title": "Perils of Constructors",
      "content_text": "One of my favorite blog posts about Rust is Things Rust Shipped Without by Graydon Hoare. To me, footguns that don’t exist in a language are usually more important than expressiveness. In this slightly philosophical essay, I want to tell about a missing Rust feature I especially like: constructors.",
      "url": "https://matklad.github.io/2019/07/16/perils-of-constructors.html",
      "date_published": "2019-07-16T00:00:00+03:00",
      "author": {
        "name": "Aleksey Kladov",
        "url": "https://matklad.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4136ae31-0128-4937-9c8b-91f064c0d8d6",
      "title": "Gotham - From Start to Heroku",
      "content_text": "In this article, we’ll implement and deploy a Gotham full-stack web framework using the Tera template system, Webpack for a complete front-end asset management, a minimal VueJS and CoffeeScript web app and deploy to Heroku. Gotham is a Rust framework which is focused on safety, speed, concurrency and async everything. Webpack is a NodeJS website asset preprocessor and bundler which can let you use any of your favorite front end technologies. Combining these technologies allow for a small footprint on the server, which means saving money on infrastructure, very fast performance in page load for higher visitor retention and the full flexibility of client side code available to you for web design without limitations.",
      "url": "https://blog.codeship.com/gotham-from-start-to-heroku/",
      "tweet_url": "https://twitter.com/6ftdan/status/1151471986738106369",
      "date_published": "2019-04-30T15:15:20+00:00",
      "author": {
        "name": "Daniel P. Clark",
        "url": "https://blog.codeship.com/author/danielclark/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "69f76932-86e3-4ee1-b2ee-f9d986b25389",
      "title": "New tools for 2D game development in Amethyst",
      "content_text": "Are you looking to build 2D games with Amethyst? Well, we've got some great news for you! Getting started just became a whole lot easier. There's been 2 recent project releases that we want to tell you more about; encourage you to use them, give us feedback and maybe even contribute!",
      "url": "https://amethyst.rs/posts/tools-for-2d-games",
      "tweet_url": "https://twitter.com/AmethystEngine/status/1151771597566566400",
      "date_published": "2019-07-16T00:00:00+00:00",
      "author": {
        "name": "happens",
        "url": "https://github.com/happenslol"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "44e12e0f-4572-479e-a63c-c4539b2c9ae8",
      "title": "cedarwood: Efficiently-Updatable Double Array Trie in Rust",
      "content_text": "Cedarwood is an effort to speed up jieba-rs, an efficient implementation of trie is needed in order to satisfying the following needs.",
      "url": "https://blog.paulme.ng/posts/2019-07-14-cedarwood:-efficiently-updatable-double-array-trie-in-rust.html",
      "date_published": "2019-07-14T00:00:00+00:00",
      "author": {
        "name": "Paul Meng",
        "url": "https://blog.paulme.ng/"
      },
      "tags": [
        "Computer Science",
        "Performance"
      ]
    },
    {
      "id": "688a7c2c-4cb7-4da6-a9d5-3cf4d5f7571a",
      "title": "How to speed up the Rust compiler in 2019",
      "content_text": "I have written previously about my efforts to speed up the Rust compiler in 2016 (part 1, part 2) and 2018 (part 1, part 2, NLL edition). It’s time for an update on the first half of 2019.",
      "url": "https://blog.mozilla.org/nnethercote/2019/07/17/how-to-speed-up-the-rust-compiler-in-2019/",
      "tweet_url": "https://twitter.com/nnethercote/status/1151324763651862528",
      "date_published": "2019-07-17T02:54:57+00:00",
      "author": {
        "name": "Nicholas Nethercote",
        "url": "https://blog.mozilla.org/nnethercote/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "15701ed9-bc70-4c65-bd7b-616363d7d3d4",
      "title": "RPG Name Generation",
      "content_text": "Role-playing and adventure games often require a considerably high number of names to describe characters, locations, items, events, abilities, etc. Humans are very awful generators of randomness, especially upon request. Writers and designers can come up with a handful of well devised names for important identifiers, but having a human generate 100 character names will likely result in many duplicates or boring derivatives. There are a few approaches to this problem: Pattern substitution of a data set with explicit rule-based probability. Using Markov chains to synthesize new results from a data set. Training a neural network to synthesize new results from a data set.",
      "url": "https://www.wihlidal.com/blog/general/2019-07-14-name-generation/",
      "tweet_url": "https://twitter.com/gwihlidal/status/1150659058589937665",
      "date_published": "2019-07-14T00:00:00+00:00",
      "author": {
        "name": "Graham Wihlidal",
        "url": "https://www.wihlidal.com/blog/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "342aba54-6554-4ec9-9d92-cd93edfbc8a2",
      "title": "Rust as the new C. Part 1: building and combining native libs into C API",
      "content_text": "In this blog series, I will experiment with Rust as a safer and simpler C/C++ replacement. The idea is to combine a couple of C dependencies in Rust, to do some work using the dependencies in Rust and to expose a final API from a Rust library via C ABI. Then I will consume the same exported Rust methods from a number of modern languages/platforms such as C#, Python, Java, Nodejs, R, Go and even back from C/C++.",
      "url": "http://hotforknowledge.com/2019/07/14/6-rust-the-new-c/",
      "tweet_url": "https://twitter.com/GapryYuen/status/1150946459656679424",
      "date_published": "2019-07-14T16:12:00+03:00",
      "author": {
        "name": "Victor Baybekov",
        "url": "http://hotforknowledge.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "0026c42e-9e3b-4a14-96dc-1fe3609e8957",
      "title": "Rust in one of the biggest music festival Atlas Weekend 2019",
      "content_text": "I'm happy to announce, that we've just finished one of the biggest European music festival Atlas Weekend which took place in Kyiv, Ukraine. As a year ago, backend for technical purposes of festival is written with Rust: Tickets exchange, entrance control, powerful user management with distributed configurable permissions, backstage pass, control of security workers, their work time, cars entrance, warehouse system for rfid bracelets with full history and control of each rfid. This year we registered more than 6000 workers, each of them has full info tied to bracelet: name, phone, photo, available permissions, time to access festival.",
      "url": "https://www.reddit.com/r/rust/comments/cdg5b4/rust_in_the_on_of_the_biggest_music_festival/",
      "date_published": "2019-07-15T00:00:00+00:00",
      "author": {
        "name": "/u/maxfrai",
        "url": "https://www.reddit.com/user/maxfrai"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "4979dc89-2295-48da-ae2b-cb84dc37fd8c",
      "title": "How to use NPM packages with Rust Frontend",
      "content_text": "In the previous post full-stack Rust with Yew, we learnt how to prepare minimal files to build a full stack Rust web app. You can do whatever Rust allows with it.",
      "url": "https://www.steadylearner.com/blog/read/How-to-use-NPM-packages-with-Rust-Frontend",
      "tweet_url": "https://twitter.com/steadylearner_p/status/1150422698000097280",
      "date_published": "2019-07-14T00:00:00+00:00",
      "author": {
        "name": "Steadylearner",
        "url": "https://www.steadylearner.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "c7551d1c-be90-4dd7-be38-5fcb78c51ef0",
      "title": "RSoC: Implementing ptrace for Redox OS - part 4",
      "content_text": "Once again, last weeks action was merged, which means the full ptrace feature was merged, and it’s time to start tackling the final issues which I have delayed for so long. But, before that, I decided to try to get some basic ptrace compatibility in relibc, so we could see just how far away software like gdb is from being ported, and what concerns I haven’t thought about yet. redox-nix update: That said, I took a little break from the madness, to instead lay my focus on another interesting problem: Newer redoxer couldn’t be compiled using carnix, because of some dependency that used a cargo feature carnix didn’t support. Let me first explain what carnix is, and why this is a problem.",
      "url": "https://www.redox-os.org/news/rsoc-ptrace-4/",
      "date_published": "2019-07-13T00:00:00+00:00",
      "author": {
        "name": "jD91mZM2",
        "url": "https://www.redox-os.org/news/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "f1fef443-d169-4ff1-a74e-262d273c9b9d",
      "title": "Cactus Harvesting: Cycle-Aware Reference Counting in Rust",
      "content_text": "🌵 CactusRef is a single-threaded, cycle-aware, reference counting smart pointer [docs] [code]. CactusRef is nearly a drop-in replacement for std::rc1 from the Rust standard library.",
      "url": "https://hyperbo.la/w/cactus-harvesting/",
      "date_published": "2019-07-15T00:00:00+00:00",
      "author": {
        "name": "Ryan Lopopolo",
        "url": "https://hyperbo.la/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "5d130478-b1c5-46b7-af4b-9e217dd138b2",
      "title": "Rust Questions from Beginners, Including Me",
      "content_text": "Information overload and I’m still trying to find a bigger project I can work on that interests me. I have the Interpreter to work on still, and that will take some serious work! But I’m also thinking of going back to small systems of my programming past and playing with writing them in Rust. In the meantime, I thought I’d sneak around the Rust #beginners channel on Discord and give everyone a peak at some questions (and hopefully some answers) that beginners are asking about their early Rust code.",
      "url": "https://rust.graystorm.com/2019/07/11/rust-questions-from-beginners-including-me/",
      "tweet_url": "https://twitter.com/jculverhouse/status/1149465545588137984",
      "date_published": "2019-07-11T23:48:17+00:00",
      "author": {
        "name": "Jeff Culverhouse",
        "url": "https://rust.graystorm.com/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "649aefcc-0d0c-4e1c-b2d2-337d3110c606",
      "title": "Rust vs C++ - Implementing a Neural Network",
      "content_text": "I first learned Rust back in 2014, before it was stable. Rust is definitely a very interesting language so I have decided to revisit it by programming a simple neural network. For comparison, I also implemented the network in C++, the language I'm looking to replace.",
      "url": "http://nicktasios.nl/posts/rust-vs-c%2B%2B-implementing-a-neural-network.html",
      "tweet_url": "https://twitter.com/Karyuutensei/status/1150910270530826242",
      "date_published": "2019-07-06T19:18:48+02:00",
      "author": {
        "name": "Nick Tasios",
        "url": "http://nicktasios.nl/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "20553a37-476d-45bb-8180-3de54aa932cd",
      "title": "Testable Component Design in Rust",
      "content_text": "I consider myself an advanced beginner in Rust. There is still much I’m wrapping my head around–and I still get caught off guard by the “move” and “mutability” rules Rust enforces. However, in keeping with my personal emphasis, I’ve devoted my efforts to learning how to create automated tests in Rust. The below guidelines are not exhaustive, but represent my learning so far. Feedback is welcome!",
      "url": "http://iextendable.com/2019/07/12/testable-component-design-in-rust/",
      "tweet_url": "https://twitter.com/ISuperGeek/status/1149679080880529408",
      "date_published": "2019-07-12T13:57:01+00:00",
      "author": {
        "name": "Chris McKenzie",
        "url": "http://iextendable.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "dc58ea4c-1cea-4142-b9e7-00e066527e35",
      "title": "RSoC: Implementing ptrace for Redox OS - part 3",
      "content_text": "Before I dive in to this week’s actions, I am pleased to announce that all the last weeks’ work is merged! This merge means you can now experiment with basic ptrace functionality using only basic registers and PTRACE_SYSCALL/PTRACE_SINGLESTEP. I have already opened the second PR in the batch: Ptrace memory reading and floating point registers support which will supply the “final bits” of the initial implementation, before all the nitpicking of final concerns can start (not to underestimate the importance and difficulty of these nitpicks - there are some areas of ptrace that aren’t even thought about yet and those will need tending to)! I will comment on these changes in this blog post, as there are some interesting things going on!",
      "url": "https://www.redox-os.org/news/rsoc-ptrace-3/",
      "date_published": "2019-07-07T00:00:00+00:00",
      "author": {
        "name": "jD91mZM2",
        "url": "https://www.redox-os.org/news/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "3161bc30-9df4-4273-8ff7-301ea0426d9f",
      "title": "\"What The Hardware Does\" is not What Your Program Does: Uninitialized Memory",
      "content_text": "This post is about uninitialized memory, but also about the semantics of highly optimized “low-level” languages in general. I will try to convince you that reasoning by “what the hardware does” is inherently flawed when talking about languages such as Rust, C or C++. These are not low-level languages. I have made this point before in the context of pointers; this time it is going to be about uninitialized memory.",
      "url": "https://www.ralfj.de/blog/2019/07/14/uninit.html",
      "date_published": "2019-07-14T00:00:00+00:00",
      "author": {
        "name": "Ralf Jung",
        "url": "https://www.ralfj.de/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a05e51b1-ea5d-4365-949c-80c0c3e48d54",
      "title": "What Is Rust's unsafe?",
      "content_text": "I’ve seen a lot of misconceptions around what the unsafe keyword means for the utility and validity of Rust and its marketing as a “safe systems language”. The truth is a lot more complicated than a single pithy tweet can possibly sum up, unfortunately; here it is as I see it.\n\nBasically, the unsafe keyword does not turn off the advanced type system that keeps Rust code honest. It only allows a few select “superpowers”, like dereferencing raw pointers. It is used to implement safe abstractions over a fundamentally unsafe world so that the majority of Rust code can use those abstractions and avoid memory unsafety.",
      "url": "https://nora.codes/post/what-is-rusts-unsafe/",
      "date_published": "2019-07-12T10:00:00-07:00",
      "author": {
        "name": "Leonora Tindall",
        "url": "https://nora.codes/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "55481592-1914-40bc-a2be-f7be9702c5c7",
      "title": "Method for Emulating Higher-Kinded Types in Rust",
      "content_text": "I've been fiddling about with an idea lately, looking at how higher-kinded types can be represented in such a way that we can reason with them in Rust here and now, without having to wait a couple years for what would be a significant change to the language and compiler.\n\nThere have been multiple discussions on introducing higher-ranked polymorphism into Rust, using Haskell-style Higher-Kinded Types (HKTs) or Scala-looking Generalised Associated Types (GATs). The benefit of higher-ranked polymorphism is to allow higher-level, richer abstractions and pattern expression than just the rank-1 polymorphism we have today.",
      "url": "https://gist.github.com/edmundsmith/855fcf0cb35dd467c29a9350481f0ecf",
      "date_published": "2019-07-07T20:47:09+00:00",
      "author": {
        "name": "Edmund Smith",
        "url": "https://gist.github.com/edmundsmith"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "815aa1ce-d98e-484c-8dbf-a91fce9a4167",
      "title": "Async-await status report #2",
      "content_text": "I wanted to give an update on the status of the “async-await foundations” working group. This post aims to cover three things: the “async await MVP” that we are currently targeting; how that fits into the bigger picture; and how you can help, if you’re so inclined;",
      "url": "http://smallcultfollowing.com/babysteps/blog/2019/07/08/async-await-status-report-2/",
      "tweet_url": "https://twitter.com/nikomatsakis/status/1148389250934673413",
      "date_published": "2019-07-08T00:00:00-04:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "84e8a302-326a-4c95-a6ae-78d4e8fa1029",
      "title": "Migrating a crate from futures 0.1 to 0.3",
      "content_text": "I recently migrated a small/medium-sized crate from Futures 0.1 to 0.3. It was fairly easy, but there were some tricky bits and some things that were not well documented, so I think it is worth me writing up my experience.",
      "url": "https://www.ncameron.org/blog/migrating-a-crate-from-futures-0-1-to-0-3/",
      "tweet_url": "https://twitter.com/nick_r_cameron/status/1148342675843604480",
      "date_published": "2019-07-08T21:24:28+00:00",
      "author": {
        "name": "Nick Cameron",
        "url": "http://www.ncameron.org/blog/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "28d2b0b9-8bfb-4541-b2f5-f84ed2670d56",
      "title": "Fullstack Rust with Yew",
      "content_text": "In the previous post How to use Rust Yew, we learnt how to prepare minimal files to build webassembly files with Yew for Rust frontend. We will advance it with some Rust server side code and write a bash file to automate the process.",
      "url": "https://www.steadylearner.com/blog/read/Fullstack-Rust-with-Yew",
      "tweet_url": "https://twitter.com/steadylearner_p/status/1149409441428754433",
      "date_published": "2019-07-11T00:00:00+00:00",
      "author": {
        "name": "Steadylearner",
        "url": "https://www.steadylearner.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "907a2ee8-f215-4259-8179-bc4d542a7647",
      "title": "Stream combinators implemented using for await syntax",
      "content_text": " I am a big fan of simplifying the existent code in futures-rs using async/await syntax. My goal was to rewrite the combinators in such a way that even a newbie can understand what was going on. However I met several issues with Stream combinators because it was a little bit hard to construct an impl Stream without defining a struct with a ::poll_next method. So I used Stream::unfold that can create streams from a closure.",
      "url": "https://www.reddit.com/r/rust/comments/cbvhq9/stream_combinators_implemented_using_for_await/",
      "date_published": "2019-07-11T00:00:00+00:00",
      "author": {
        "name": "Roman Proskuryakov",
        "url": "https://www.reddit.com/user/rproskuryakov/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "22d99aab-bb46-4d9b-9cf5-1e977c639f16",
      "title": "Visual Programming with Embedded Rust? Yes we can with Apache Mynewt and Google Blockly!",
      "content_text": "I gotta admit — Embedded Programs are getting darned hard to code on modern microcontrollers, sensors and networks. Faced with the ultra-daunting task of coding a readable, reusable, open-source NB-IoT application for STM32, I asked myself… Could Visual Programming with Embedded Rust solve this problem? Like this…",
      "url": "https://medium.com/@ly.lee/visual-programming-with-embedded-rust-yes-we-can-with-apache-mynewt-and-google-blockly-8b67ef7412d7",
      "date_published": "2019-07-12T21:52:53.533+00:00",
      "author": {
        "name": "Lup Yuen Lee 李立源",
        "url": "https://medium.com/@ly.lee"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "eecb5f26-323a-4d45-8a03-4fef1b0943e0",
      "title": "timetill.rs: highlighting all the Rust conferences around the world",
      "content_text": "timetill.rs is a community project focused on highlighting all the Rust conferences around the world. Timetill.rs is an open project that anyone in the community can contribute to.",
      "url": "https://timetill.rs/",
      "date_published": "2019-07-11T00:00:00+00:00",
      "author": {
        "name": "XAMPPRocky",
        "url": "https://github.com/XAMPPRocky"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "6d02baa8-8fcd-45fa-9f96-d36a635a2379",
      "title": "AiC: Unbounded queues and lang design",
      "content_text": "I have been thinking about how language feature development works in Rust1. I wanted to write a post about what I see as one of the key problems: too much concurrency in our design process, without any kind of “back-pressure” to help keep the number of “open efforts” under control. This setup does enable us to get a lot of things done sometimes, but I believe it also leads to a number of problems.\n\nAlthough I don’t make any proposals in this post, I am basically advocating for changes to our process that can help us to stay focused on a few active things at a time. Basically, incorporating a notion of capacity such that, if we want to start something new, we either have to finish up with something or else find a way to grow our capacity.",
      "url": "http://smallcultfollowing.com/babysteps/blog/2019/07/10/aic-unbounded-queues-and-lang-design/",
      "tweet_url": "https://twitter.com/nikomatsakis/status/1149007905154318336",
      "date_published": "2019-07-10T00:00:00-04:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "7a2ae69b-3b31-45da-855b-592a86d96a6b",
      "title": "CHIP-8 Emulator Rust Port",
      "content_text": "I thought it would be a nice start to just take existing code and try to see how well it would translate from C++. I simply took my previous CHIP-8 emu and started to chip at it with the help of the docs. If you want to dive right in, here’s the code on GitHub. Anyway, it was my first go at Rust so go easy on me! =)",
      "url": "https://ryp.github.io/emu/rust/chip8/2019/07/09/chip8-emulator-rust/",
      "date_published": "2019-07-09T15:00:00+00:00",
      "author": {
        "name": "Ryp",
        "url": "https://ryp.github.io/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "07e226de-482b-4f51-af76-adb65b4a35dc",
      "title": "The Computer Language Benachmarks Game: Rust ranks #1 for n-body",
      "content_text": "The Computer Language Benchmarks Game is a free software project for comparing how a given subset of simple algorithms can be implemented in various popular programming languages. I converted the fastest (dating early 2019) n-body C-implementation (#4) to Rust (#7) in a one-to-one fashion, gaining a performance encreasement by factor 1.6 to my own surprise.",
      "url": "https://frehberg.com/2019/07/the-computer-language-benachmarks-game-rust-ranks-1-for-n-body/",
      "date_published": "2019-07-09T16:53:57+00:00",
      "author": {
        "name": "Frank Rehberger",
        "url": "https://frehberg.com/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "66342269-5693-4c70-a15c-917b7818dc07",
      "title": "Collecting broadcast UDP packets using async networking in Rust",
      "content_text": "Creating a simple console application in Rust for fun and profit, including some nice tricks to push async programming to the limits.",
      "url": "https://medium.com/tresorit-engineering/collecting-broadcast-udp-packets-using-async-networking-in-rust-7fd93a631eac",
      "date_published": "2019-07-08T10:39:21.932+00:00",
      "author": {
        "name": "Péter Budai",
        "url": "https://medium.com/@peterbudai"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "3d786e81-3097-48f1-aea9-9a86473f6957",
      "title": "Functional Programming Jargon in Rust",
      "content_text": "Github Repository: https://github.com/JasonShin/functional-programming-jargon.rsFunctional programming (FP) provides many advantages, and its popula...",
      "url": "https://functional.works-hub.com/learn/functional-programming-jargon-in-rust-1b555",
      "tweet_url": "https://twitter.com/Functionalworks/status/1148584469470863361",
      "date_published": "2019-07-05T00:00:00+00:00",
      "author": {
        "name": "Jason Shin",
        "url": "https://functional.works-hub.com/learn/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ff6ab953-5b21-4852-b0e5-058c730767f5",
      "title": "Rust, a Raspberry Pi and Addressable LED's",
      "content_text": "I'd been playing around with a couple of LED matrices bought from AliExpress. The LED's on one of the matrices were the very popular WS2812b variant. These panels are made up of addressable RGB LED's soldered to a flexible PCB, giving you three wires out the back -- data, 5V, and ground.\n\nAfter not being able to find a Rust library which supported these things at the time (a few have popped up since), I decided I would instead learn the protocol and try to fiddle with it myself. This is a brief overview of that experience.",
      "url": "https://blog.tomarrell.com/post/rust_and_leds",
      "date_published": "2019-07-09T00:00:00+00:00",
      "author": {
        "name": "Tom Arrell",
        "url": "https://blog.tomarrell.com/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "05694ac8-0c6b-413c-9853-a487c3d25652",
      "title": "Drawing in GTK in Rust (part 1)",
      "content_text": "It’s a double challenge: I’m learning Rust (but I can say I more or less know the language by now), and I’m trying to use GTK in Rust. I’m a complete beginner in GTK, and even if I know Rust, it does not mean I can use it properly. So I’ll learn a huge library (written in C) by using it in a complex and hard language I just learned. Well, well, good luck, me.",
      "url": "https://medium.com/journey-to-rust/drawing-in-gtk-in-rust-part-1-4a401eecc4e0",
      "date_published": "2019-07-08T07:10:41.840+00:00",
      "author": {
        "name": "George Shuklin",
        "url": "https://medium.com/@george.shuklin"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "6b3f54a7-e579-456f-8ee8-7753db3f7ee4",
      "title": "RSoC: Ion as a Library, week 5",
      "content_text": "Wrapping up the Ion as a library project. It is now possible to embed Ion in any Rust application. Ion takes any Read instance and can execute it (so yes, it is possible to run Ion without ever collecting the script’s binary stream). It takes care of expanding the input and managing the running applications in an efficient manner, with a comprehensive set of errors. Ion is now the rust-based, pipe-oriented liblua alternative.",
      "url": "https://www.redox-os.org/news/rsoc-ion-lib-4/",
      "tweet_url": "https://twitter.com/redox_os/status/1148053643905523713",
      "date_published": "2019-07-07T00:00:00+00:00",
      "author": {
        "name": "AdminXVII",
        "url": "https://www.redox-os.org/news/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "cfa3bc39-5cbc-4544-ae37-488a111411ef",
      "title": "Safer, Simpler Embedded Rust with Apache Mynewt on STM32 Blue Pill",
      "content_text": "Declarative and Procedural Macros (plus bindgen and tips for Visual Studio Code) to protect Embedded Rust coders from stumbling into embedded traps.",
      "url": "https://medium.com/@ly.lee/safer-simpler-embedded-rust-with-apache-mynewt-on-stm32-blue-pill-d8fcb41969ac",
      "date_published": "2019-07-07T04:58:53.320+00:00",
      "author": {
        "name": "Lup Yuen Lee",
        "url": "https://medium.com/@ly.lee"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "a0b1cf6f-32c6-43dc-bfc4-fb86068d84fa",
      "title": "pre-alpha release - meli terminal mail client",
      "content_text": "An early release with basic features and only Maildir support has been published in meli’s git repositories. meli is a new experimental mail client for the terminal. It’s a from-scratch implementation in order to experiment with ideas I had about a client’s design.",
      "url": "https://meli.delivery/posts/2019-06-15-pre-alpha.html",
      "date_published": "2019-06-15T00:00:00+00:00",
      "author": {
        "name": "epilys",
        "url": "https://meli.delivery/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "e716273a-01bd-4a08-a120-09a0511c71a3",
      "title": "The Embedded Working Group Newsletter - 18",
      "content_text": "This is the eighteenth newsletter of the Embedded WG where we highlight new progress, celebrate cool projects, thank the community, and advertise projects that need help!",
      "url": "https://rust-embedded.github.io/blog/newsletter-18/",
      "date_published": "2019-07-02T00:00:00+00:00",
      "author": {
        "name": "The Embedded Working Group",
        "url": "https://rust-embedded.github.io/blog"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "75040309-d3a6-4941-a8d1-28c6f8bdfc19",
      "title": "Announcing Rust 1.36.0",
      "content_text": "This release brings many changes, including the stabilization of the Future trait, the alloc crate, the MaybeUninit<T> type, NLL for Rust 2015, a new HashMap<K, V> implementation, and --offline support in Cargo. Read on for a few highlights, or see the detailed release notes for additional information.",
      "url": "https://blog.rust-lang.org/2019/07/04/Rust-1.36.0.html",
      "tweet_url": "https://twitter.com/rustlang/status/1146778068746416130",
      "date_published": "2019-07-04T00:00:00+00:00",
      "author": {
        "name": "The Rust Release Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4ab235dc-fc27-4dfe-aefc-1bcc16a23199",
      "title": "Cargo --offline ✈️",
      "content_text": "Rust 1.36 is released on the 4th July and includes a bunch of new stuff. This blog post is about one newly stable feature in Cargo: --offline.",
      "url": "https://www.ncameron.org/blog/cargo-offline/",
      "tweet_url": "https://twitter.com/nick_r_cameron/status/1146879841184051200",
      "date_published": "2019-07-04T08:13:57+00:00",
      "author": {
        "name": "Nick Cameron",
        "url": "http://www.ncameron.org/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "b5b706cb-863b-4856-843d-6a894a7fc280",
      "title": "Create Dev's offline page with Rust and WebAssembly 🦄💡✨",
      "content_text": "Dev's offline page is fun. Can we do that with Rust and WebAssembly? The answer is yes. Let us do it.",
      "url": "https://dev.to/sendilkumarn/create-dev-s-offline-page-with-rust-and-webassembly-21gn",
      "date_published": "2019-07-03T23:14:51+00:00",
      "author": {
        "name": "Sendil Kumar N",
        "url": "https://dev.to/sendilkumarn"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "a11e4440-7ad1-4e28-95d7-db6cc8a4544b",
      "title": "Rust std study series: alloc",
      "content_text": "Let’s get deep into std::alloc! The very basic need for any program to compile and execute is having access to either physical memory or virtual memory. An allocator is responsible for providing such an access. You can think of an allocator as a service, taking some sort of requests and either giving back a (pointer) to block of memory or some errors. In Rust, a request is a Layout i.e. some meta-data about how the memory we want is supposed to take up the space.",
      "url": "https://ehsanmkermani.com/2019/07/03/rust-std-study-series-alloc/",
      "date_published": "2019-07-04T00:20:38+00:00",
      "author": {
        "name": "Ehsan M. Kermani",
        "url": "https://ehsanmkermani.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "04a62a1c-2acd-4ee3-8d83-eac3e9bcbca7",
      "title": "Speedy Desktop Apps With GTK and Rust",
      "content_text": "The web platform is the delivery mechanism of choice for a ton of software these days, either through the web browser itself or through Electron, but that doesn’t mean there isn’t a place for a good old fashioned straight-up desktop application in the picture.\n\nFortunately, it’s easier than ever to write a usable, pretty, and performant desktop app, using my language of choice (Rust) and the wildly successful cross-platform GUI framework GTK. In this blog post, we’ll walk through the source code of gDiceRoller. In future posts, I’ll explain how I packaged it for different systems.",
      "url": "https://nora.codes/tutorial/speedy-desktop-apps-with-gtk-and-rust/",
      "date_published": "2019-07-05T14:00:00-07:00",
      "author": {
        "name": "Leonora Tindall",
        "url": "https://nora.codes/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "ec53084d-522d-4916-90b2-c8adda4b75f2",
      "title": "Rust modules vs files",
      "content_text": "A while back, I asked on Twitter what people found confusing in Rust, and one of the top topics was “how the module system maps to files”. I remember struggling with that a lot when I first started Rust, so I’ll try to explain it in a way that makes sense to me.",
      "url": "https://amos.me/blog/2019/rust-modules-vs-files/",
      "tweet_url": "https://twitter.com/fasterthanlime/status/1145662405936128000",
      "date_published": "2019-07-01T00:00:00+00:00",
      "author": {
        "name": "amos",
        "url": "https://amos.me/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ead392a4-baff-4c08-9820-8fd74ef14200",
      "title": "TLS performance: rustls versus OpenSSL",
      "content_text": "There are quite a few dimensions to how performance can vary between TLS libraries such as handshake performance and bulk performance. This series of blog posts measures and compares the performance of rustls (a TLS library in rust) and OpenSSL.",
      "url": "https://jbp.io/2019/07/01/rustls-vs-openssl-performance.html",
      "tweet_url": "https://twitter.com/jpixton/status/1146158233297543171",
      "date_published": "2019-07-01T00:00:00+00:00",
      "author": {
        "name": "Joseph Birr-Pixton",
        "url": "https://jbp.io/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "db9d60ca-f153-4abf-9654-ac53ec91472e",
      "title": "How to use Rust Yew",
      "content_text": "In this post, we will prepare development environment for Rust Yew. Then, we will write minimal code with it and learn how to deploy it in your website also.",
      "url": "https://www.steadylearner.com/blog/read/How-to-use-Rust-Yew",
      "tweet_url": "https://twitter.com/steadylearner_p/status/1145427019460685824",
      "date_published": "2019-06-30T00:00:00+00:00",
      "author": {
        "name": "Steadylearner",
        "url": "https://www.steadylearner.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "6e2a2811-942b-4e62-b173-6d2b0d3e0acd",
      "title": "Writing a small ray tracer in Rust and Zig",
      "content_text": "The two languages that I spent most of my time daydreaming about writing code in are Rust and Zig. Would the lack of features in Zig make me more or less productive than with Rust’s feature overload? Which language is more enjoyable to use for writing a small, self-contained computer graphics project?  To find out, I decided to implement the same simple project in both languages: a small ray tracer, following the book Ray Tracing in One Weekend.",
      "url": "https://nelari.us/post/raytracer_with_rust_and_zig/",
      "tweet_url": "https://twitter.com/nelarius/status/1145234609581543424",
      "date_published": "2019-06-27T20:00:00+02:00",
      "author": {
        "name": "Johann Muszynski",
        "url": "https://nelari.us/"
      },
      "tags": [
        "Language",
        "Performance"
      ]
    },
    {
      "id": "a7b2c09d-06ca-4ae2-89c2-70bf78282396",
      "title": "One Program Written in Python, Go, and Rust",
      "content_text": "This is a subjective, primarily developer-ergonomics-based comparison of the three languages from the perspective of a Python developer, but you can skip the prose and go to the code samples, the performance comparison if you want some hard numbers, the takeaway for the tl;dr, or the Python, Go, and Rust diffimg implementations.",
      "url": "http://www.nicolas-hahn.com/python/go/rust/programming/2019/07/01/program-in-python-go-rust/",
      "tweet_url": "https://twitter.com/Hahn_Cholo/status/1145720554646843399",
      "date_published": "2019-07-01T00:00:00+00:00",
      "author": {
        "name": "Nicolas Hahn",
        "url": "http://www.nicolas-hahn.com/"
      },
      "tags": [
        "Language",
        "Performance"
      ]
    },
    {
      "id": "faa1d1ec-2bcd-4363-832a-2e03e35d8124",
      "title": "Increase Rust and WebAssembly performance",
      "content_text": "What are we gonna do? Create a WebAssembly application that takes a string in markdown format and converts that into HTML.",
      "url": "https://dev.to/sendilkumarn/increase-rust-and-webassembly-performance-382h",
      "tweet_url": "https://twitter.com/WebTrendsBot1/status/1145982706561499136",
      "date_published": "2019-07-02T00:40:25+00:00",
      "author": {
        "name": "Sendil Kumar N",
        "url": "https://dev.to/sendilkumarn"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "fdaab910-4937-451e-9fe4-3cfd693069b8",
      "title": "Building crates so they look like C(ABI) Libraries",
      "content_text": "How to write a well behaved C-API library in Rust.",
      "url": "https://dev.to/luzero/building-crates-so-they-look-like-c-abi-libraries-1ibn",
      "date_published": "2019-07-01T19:40:21+00:00",
      "author": {
        "name": "Luca Barbato",
        "url": "https://dev.to/luzero"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "38abc54a-6b27-48ec-8789-363ead337d8a",
      "title": "Sharing references between Python and Rust",
      "content_text": "In 2018, the Mercurial project decided to use Rust to improve performance and maintainability of previous high-performance code. We have faced some interesting challenges when bridging the Python implementation with the new Rust code, and this is one that I have not found any literature about.",
      "url": "https://raphaelgomes.dev/blog/articles/2019-07-01-sharing-references-between-python-and-rust.html",
      "date_published": "2019-07-01T00:00:00+00:00",
      "author": {
        "name": "Raphaël Gomès",
        "url": "https://raphaelgomes.dev/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "09564ee8-19af-4b03-95c4-b231ffd7f24f",
      "title": "Status of rust-analyzer: Achievements and Open Collective",
      "content_text": "rust-analyzer is an experimental compiler frontend for the Rust programming language. The ultimate goal for this project is to provide the perfect IDE experience for Rust, with all IDE features working flawlessly while editing code. This post talks about what happened to rust-analyzer in between the all-hands and today, discusses future plans, and also announces the rust-analyzer Open Collective.",
      "url": "https://ferrous-systems.com/blog/rust-analyzer-status-opencollective/",
      "tweet_url": "https://twitter.com/FerrousSystems/status/1146044887919398912",
      "date_published": "2019-07-01T22:00:00+00:00",
      "author": {
        "name": "Aleksey Kladov",
        "url": "https://ferrous-systems.com/blog"
      },
      "tags": [
        "Language",
        "Community"
      ]
    },
    {
      "id": "c7f25b3a-3d76-4b05-85df-6bf59fb5c92a",
      "title": "Aelve Codesearch: Regex-based search across all of crates.io",
      "content_text": "Search the code of all crates published to crates.io.",
      "url": "https://codesearch.aelve.com/rust",
      "date_published": "2019-07-01T00:00:00+00:00",
      "author": {
        "name": "Aelve",
        "url": "https://aelve.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "247efda7-549d-4c38-8af1-733755fc4aa7",
      "title": "Rust WebAssembly Hello World - Deep Dive with wasm-bindgen and wasm2wat",
      "content_text": "In this article we are going to create a WebAssembly Hello World program with Rust. You might be thinking that a WebAssembly Hello World tutorial could be found almost everywhere, including one on Mozilla website and rustwasm.github.io.",
      "url": "https://www.webassemblyman.com/rust_webassembly_hello_world.html",
      "date_published": "2019-07-02T00:00:00+00:00",
      "author": {
        "name": "nicole",
        "url": "https://www.webassemblyman.com/index.html"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "9618e311-ec84-431c-97ab-c9f010c3c65c",
      "title": "Optimizing jieba-rs to be 33% faster than cppjieba",
      "content_text": "This blog post is mainly to share my experience on taking an emerging programming language’s ecosystem seriously and evaluating it by working on a serious project, and see how far we can go in terms of performance and development experience. The project I chose as mentioned in the title is jieba-rs, the rust implementation of a popular Chinese word segmentation library: Jieba.",
      "url": "https://blog.paulme.ng/posts/2019-06-30-optimizing-jieba-rs-to-be-33percents-faster-than-cppjieba.html",
      "date_published": "2019-06-30T00:00:00+00:00",
      "author": {
        "name": "Paul Meng",
        "url": "https://blog.paulme.ng/archive.html"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "bce3d472-5591-44cc-b52a-2573bf8d9f55",
      "title": "Compiling Rust Apps for Termux with nix-shell",
      "content_text": "I've been building a program to track how I spend my time, and a couple of the requirements are an interface on my phone, and sync between multiple devices. Since I haven't built an android app in forever, I decided to target termux, at least initially. This will allow me to use the app and test out the synchronization protocol without a ton of upfront effort into building a graphical user interface.",
      "url": "https://blog.geemili.xyz/blog/rust-app-on-termux-with-nix/",
      "date_published": "2019-06-29T06:54:28-05:00",
      "author": {
        "name": "LeRoyce Pearson",
        "url": "https://geemili.xyz/blog/"
      },
      "tags": [
        "DevOps and Deployment"
      ]
    },
    {
      "id": "a3749f41-8d22-4fa8-9f5d-bb1e699f333c",
      "title": "RSoC: Implementing ptrace for Redox OS - part 2",
      "content_text": "The next step in the journey of ptrace was to bite the bullet (or at least I thought) and implement system-call tracing. Since the kernel must be able to handle system-calls of processes, it’s quite obvious that the way to set a breakpoint should involve the kernel, running in the context of the tracee, should notify the tracer and wait. So the biggest challenge would be to figure out how kernel synchronization worked.",
      "url": "https://www.redox-os.org/news/rsoc-ptrace-2/",
      "date_published": "2019-06-30T00:00:00+00:00",
      "author": {
        "name": "jD91mZM2",
        "url": "https://www.redox-os.org/news/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "cb4c2736-6856-435e-a605-8d7b2155a1c3",
      "title": "My iterator is returning a reference to a reference",
      "content_text": "Sometimes you mean it. Other times you really don't. It can be a bit of a headscratcher, but is not a particularly complicated situation, just easy to stumble into on a tired afternoon. In the end it all comes down to the ensuring you're being purposeful about what you're iterating over. I'll take a relatively brief dive into what can cause this, and how you can get back to iterating over what you want to iterate over.",
      "url": "https://blog.tawhidhannan.co.uk/rust/tidbits/rust-double-ref",
      "date_published": "2019-06-23T00:00:00+00:00",
      "author": {
        "name": "Tawhid Hannan",
        "url": "https://blog.tawhidhannan.co.uk/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "876033ef-0f64-4108-89c6-8ce8d6536ac7",
      "title": "RESS (Rusty EcmaScript Scanner) 0.7.0 bring large performance improvements",
      "content_text": "A blog about learning computer science concepts with practical projects",
      "url": "https://wiredforge.com/blog/ress-7/",
      "date_published": "2019-06-26T00:00:00+00:00",
      "author": {
        "name": "Robert Masen",
        "url": "https://wiredforge.com/"
      },
      "tags": [
        "Crates",
        "Performance"
      ]
    },
    {
      "id": "c39c6210-76a8-46f1-ab2d-b6f1be909232",
      "title": "Understanding Closures in Rust",
      "content_text": "Summary: Closures are a combination of a function pointer (fn) and a context. A closure with no context is just a function pointer. A closure which has an immutable context belongs to Fn. A closure which has a mutable context belongs to FnMut. A closure that owns its context belongs to FnOnce.",
      "url": "https://medium.com/swlh/understanding-closures-in-rust-21f286ed1759",
      "date_published": "2019-06-26T10:27:58.447+00:00",
      "author": {
        "name": "Andrew Pritchard",
        "url": "https://medium.com/@andrewjpritchard"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "1ea200e9-2dda-4cad-9190-7aec92439026",
      "title": "Winit 0.20, the state of windowing in Rust, and a request for help",
      "content_text": "I’m one of the maintainers of Winit, the main pure-Rust window creation library. Even if you haven’t used it directly, you’ve probably heard of projects that depend on it - Servo and Alacritty being the best-known applications that depend on our codebase. If you’ve done any graphics programming in Rust using Glutin (or dependent projects including gfx-rs, Glium, and Amethyst) we’ve been the ones making the windows actually show up on your desktop.\n\nThis announcement details the major changes since Winit 0.19. Also, we are looking for new contributors! If you are interested in working on the foundations of Rust’s GUI story, now is a great time to join the project.",
      "url": "https://users.rust-lang.org/t/winit-0-20-the-state-of-windowing-in-rust-and-a-request-for-help/29485",
      "date_published": "2019-06-21T16:16:03+00:00",
      "author": {
        "name": "Osspial",
        "url": "https://users.rust-lang.org/u/osspial/summary"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "f6b00396-a786-403b-b392-16e784f32241",
      "title": "Rust Creator Graydon Hoare Talks About Security, History, and Rust",
      "content_text": "We’re approaching the 9th anniversary of the day Graydon Hoare (and numerous contributors) first revealed to the world the newly-designed Rust programming language. So we thought it’d be a good time to assess our current landscape.\n\nHoare graciously agreed, sharing his thoughts on everything from the state of systems programming, to the difficulty of defining safety on ever-more complex systems — and whether we’re truly more secure today, or confronting an inherited software mess that will take decades to clean up.",
      "url": "https://thenewstack.io/rust-creator-graydon-hoare-talks-about-security-history-and-rust/",
      "date_published": "2019-06-18T13:00:49+00:00",
      "author": {
        "name": "David Cassel",
        "url": "https://thenewstack.io/author/destiny/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ca449299-1f7d-493f-9857-b1954e1f371d",
      "title": "Rust std study series: Interior mutability",
      "content_text": "Continuing the standard library study, it’s time for Cell<T>!",
      "url": "https://ehsanmkermani.com/2019/06/18/rust-std-study-series-interior-mutability/",
      "date_published": "2019-06-18T20:27:25+00:00",
      "author": {
        "name": "Ehsan M. Kermani",
        "url": "https://ehsanmkermani.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c0a8ed1e-1273-49c3-b260-a700b475ada5",
      "title": "Rust Regex Playground",
      "content_text": "Web tool to evaluate rust regular expressions.",
      "url": "https://2fd.github.io/rust-regex-playground/#method=find&regex=%5Cw+&text=abc",
      "date_published": "2019-06-11T00:00:00+00:00",
      "author": {
        "name": "Fede Ramirez",
        "url": "https://github.com/2fd"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "ed6c2d09-739d-476b-b46f-441a1eefc6e3",
      "title": "A Journey Through Rust Lifetimes",
      "content_text": "I wanted to write an article about one aspect of Rust I really put off for a long while — lifetimes. They are one of the hardest parts about Rust to wrap one’s brain around. Many of us are simply not used to a compiler with a paradigm around memory ownership where such things are needed.\n\nLifetimes help the compiler make your code safer (i.e. less prone to crashing by using unexpected places in memory). Even if we don’t write them in our code, the compiler is smart enough to figure out your lifetimes without you under the covers. They are often times your secret allies, so let's learn a bit about them.",
      "url": "https://medium.com/@richardanaya/a-journey-through-rust-lifetimes-5a08782c7091",
      "date_published": "2019-06-13T00:09:47.932+00:00",
      "author": {
        "name": "Richard Anaya",
        "url": "https://medium.com/@richardanaya"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "f545777e-e75d-40c5-af12-a6c8b2d962f4",
      "title": "How to Emulate a Game Boy: The Book",
      "content_text": "DMG-01 is a guide for how to emulate a Game Boy. Together, we'll explore the insides of one of the world's most beloved computers.",
      "url": "https://blog.ryanlevick.com/DMG-01/",
      "date_published": "2019-06-29T00:00:00+00:00",
      "author": {
        "name": "Ryan Levick",
        "url": "https://blog.ryanlevick.com/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "d682ecb5-9935-4073-8865-f5a66f2a65f5",
      "title": "Non-Lexical Lifetimes arrives for everyone",
      "content_text": "It has been literally years since I last posted to this blog. I have been doing a bunch of Rust compiler work. One big feature has been deployed: Non-Lexical Lifetimes (hereafter denoted “NLL”).\n\nThe motivation for this blog post: The next version of Rust, 1.36, is going to have NLL turned on for the 2015 edition. Going forward, all editions of Rust will now use NLL.",
      "url": "http://blog.pnkfx.org/blog/2019/06/26/breaking-news-non-lexical-lifetimes-arrives-for-everyone/",
      "date_published": "2019-06-26T12:54:29+02:00",
      "author": {
        "name": "Felix S. Klock II",
        "url": "http://blog.pnkfx.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "f85b4664-304e-4eeb-a93b-2377b74263cd",
      "title": "async log",
      "content_text": "Today we'd like to introduce async-log, a general-purpose crate that extends the standard log crate with asynchronous metadata. This is a first step in introducing full-fledged asynchronous tracing capabilities to Rust.",
      "url": "https://blog.yoshuawuyts.com/async-log/",
      "tweet_url": "https://twitter.com/yoshuawuyts/status/1144750481631301632",
      "date_published": "2019-06-29T00:00:00+00:00",
      "author": {
        "name": "Yoshua Wuyts",
        "url": "https://blog.yoshuawuyts.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "ae8feddf-191a-444f-9423-e7a3e0b4b356",
      "title": "Writing a proxy in Rust and why it is the language of the future",
      "content_text": "It’s been a year since I wrote a little proxy with Rust, it is one of my first projects with this language and I learned a lot writing it. To sum up a bit, the main goal of this proxy is to be really simple to use and easy to extend with middlewares. It targets HTTP APIs and can be used in front of a lot of services. This proxy has been used in multiple projects, with microservices architecture and so on…",
      "url": "https://medium.com/swlh/writing-a-proxy-in-rust-and-why-it-is-the-language-of-the-future-265d8bf7c6d2",
      "date_published": "2019-06-25T14:43:21.855+00:00",
      "author": {
        "name": "Terry Raimondo",
        "url": "https://medium.com/@terry.raimondo"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "f0491f48-a0cd-4f35-a781-a8907f277e8a",
      "title": "std time",
      "content_text": "Over the past month we've been hard at work to add time support to the Runtime crate. One of the things we've had to think about has been examples. Which means we've had a chance to become intimately familiar with the good and less good parts of the std::time API.\n\nIn this post we'll look at the std::time API, and some of the proposed changes to smooth things out a bit. Also disclaimer: I've been involved with these proposals, hehe.",
      "url": "https://blog.yoshuawuyts.com/std-time/",
      "tweet_url": "https://twitter.com/yoshuawuyts/status/1143538486164819968",
      "date_published": "2019-06-25T00:00:00+00:00",
      "author": {
        "name": "Yoshua Wuyts",
        "url": "https://blog.yoshuawuyts.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ea3f2d4d-b907-4611-9aaf-d5f6311863a2",
      "title": "Fuzzing rust code: cargo-fuzz and honggfuzz",
      "content_text": "This post explains how to test Rust code using fuzzers. Parsers are good target for fuzzers, especially because they usually are functions that only takes bytes as input.",
      "url": "https://www.wzdftpd.net/blog/rust-fuzzers.html",
      "date_published": "2019-06-19T00:00:00+02:00",
      "author": {
        "name": "Pollux",
        "url": "https://www.wzdftpd.net/"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "a47585b4-821e-445c-84dd-003d3b449f7f",
      "title": "Way of Rhea’s Entity System",
      "content_text": "Entity systems won by a long shot, so that’s what I’m going to be writing about today. In particular, I’m going to outline the process that lead me to Way of Rhea’s current entity system. Way of Rhea is being built in a custom engine and scripting language written in Rust, but the ideas described should still be applicable elsewhere. Hopefully this writeup will be found helpful, or at least interesting. :)",
      "url": "https://www.anthropicstudios.com/2019/06/05/entity-systems/",
      "date_published": "2019-06-05T00:00:00+00:00",
      "author": {
        "name": "Mason Remaley",
        "url": "https://www.anthropicstudios.com/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "9f8dfcb3-e67c-456d-94d5-76ea84f8caa8",
      "title": "termimad: A library to display rich (Markdown) snippets and texts in a Rust terminal application",
      "content_text": "A simple tool to display static or dynamic Markdown snippets in the terminal, with skin isolation. Based on crossterm so works on most terminals (even on windows).",
      "url": "https://github.com/Canop/termimad",
      "date_published": "2019-06-27T00:00:00+00:00",
      "author": {
        "name": "Canop",
        "url": "https://github.com/Canop"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "0924bbc6-ebd8-428e-aec2-3ea31077bf2f",
      "title": "Writing a Raytracer in Rust: part 3",
      "content_text": "At long last we get to the point of tracing rays - not entirely as we want.",
      "url": "https://canmom.github.io/programming/graphics/raytracer/rust-raytracer-part-3",
      "tweet_url": "https://twitter.com/CanonicMomentum/status/1134991298811899906",
      "date_published": "2019-06-01T00:00:00+00:00",
      "author": {
        "name": "bryn dickinson",
        "url": "https://canmom.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "cd714c38-04f4-4e7c-a98e-4af4eb7d7464",
      "title": "Writing an OS in Rust: Heap Allocation",
      "content_text": "This post adds support for heap allocation to our kernel. First, it gives an introduction to dynamic memory and shows how the borrow checker prevents common allocation errors. It then implements the basic allocation interface of Rust, creates a heap memory region, and sets up an allocator crate. At the end of this post all the allocation and collection types of the built-in alloc crate will be available to our kernel.",
      "url": "https://os.phil-opp.com/heap-allocation/",
      "date_published": "2019-06-26T00:00:00+00:00",
      "author": {
        "name": "Philipp Oppermann",
        "url": "https://os.phil-opp.com/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "2c73c05a-7fb3-494d-8fb3-896cf3a343b3",
      "title": "Wasm By Example",
      "content_text": "A hands-on introduction into WebAssembly ( Wasm ). Containing simple examples and tutorials on how to implement concepts and various tasks using Wasm.",
      "url": "https://wasmbyexample.dev/",
      "tweet_url": "https://twitter.com/torch2424/status/1143571589142740992",
      "date_published": "2019-06-26T03:28:00+00:00",
      "author": {
        "name": "Aaron Turner",
        "url": "https://twitter.com/torch2424"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "6a4e1bf9-728a-4c25-919d-05ae4664366c",
      "title": "Building Standalone Python Applications with PyOxidizer",
      "content_text": "Today, I'm excited to announce the first release of PyOxidizer (project, documentation), an open source utility that aims to solve the Python application distribution problem! (The installation instructions are in the docs.) PyOxidizer's marquee feature is that it can produce a single file executable containing a fully-featured Python interpreter, its extensions, standard library, and your application's modules and resources.",
      "url": "https://gregoryszorc.com/blog/2019/06/24/building-standalone-python-applications-with-pyoxidizer/",
      "date_published": "2019-06-24T09:00:00+00:00",
      "author": {
        "name": "Gregory Szorc",
        "url": "https://gregoryszorc.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "0770f016-861d-4bc1-9ce0-cad6b6e374f2",
      "title": "Implementing HTSP in Rust",
      "content_text": "As with most hobby projects, my htsp-rs implementation became a side-side-side project, and it will probably stay that way. Another property of those hobby projects is that I now-and-then pick them up again, and htsp-rs has come to that point now. The reason for picking it up again is different from the reason of its existence though, and that’s a good thing: it means I have multiple reasons for the crate’s existence. Initially, I wanted it as a back-end for a livestreaming app on SailfishOS. Today, I want it as back-end for mpd’s TVHeadend support.",
      "url": "https://www.rubdos.be/rust/async/programming/2019/06/22/implementing-htsp-in-rust.html",
      "date_published": "2019-06-22T00:00:00+00:00",
      "author": {
        "name": "Ruben De Smet",
        "url": "https://www.rubdos.be/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "b9742776-a64f-4358-beff-fabdf075d65d",
      "title": "Rustexp: A Rust regular expression editor & tester",
      "content_text": "A Rust regular expression editor & tester inspired by Rubular.",
      "url": "https://rustexp.lpil.uk/",
      "date_published": "2019-06-25T00:00:00+00:00",
      "author": {
        "name": "Louis Pilfold",
        "url": "http://lpil.uk/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "4b9faf2d-145a-4deb-909d-ac58ea05bdc8",
      "title": "Rust type language - journey to rust",
      "content_text": "Disclaimer: If you are learning Rust, take this with grain of salt. I’m learning Rust too and I may be utterly wrong in my guesses. The more I read and do Rust, the more I realize, that Rust consists of two (three, if macros counts) languages.",
      "url": "https://medium.com/journey-to-rust/rust-type-language-48e1c43b1ef4",
      "date_published": "2019-06-25T14:10:43.359+00:00",
      "author": {
        "name": "George Shuklin",
        "url": "https://medium.com/@george.shuklin"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "170dcb20-7011-4222-afe7-e3eb2298a661",
      "title": "How macros make your Rust life easier and generally better",
      "content_text": "Let’s explore a topic that has been quite foreign to me for a long time: macros.",
      "url": "https://blog.x5ff.xyz/blog/easy-programming-with-rust-macros/",
      "date_published": "2019-06-07T00:00:00+00:00",
      "author": {
        "name": "Claus",
        "url": "https://blog.x5ff.xyz/blog"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "10bad307-4122-4dd4-a0b2-4347b1da1a12",
      "title": "rga: ripgrep, but also search in PDFs, E-Books, Office documents, zip, tar.gz, etc.",
      "content_text": "rga is a line-oriented search tool that allows you to look for a regex in a multitude of file types. rga wraps the awesome ripgrep and enables it to search in pdf, docx, sqlite, jpg, zip, tar.*, movie subtitles (mkv, mp4), etc.",
      "url": "https://phiresky.github.io/blog/2019/rga--ripgrep-for-zip-targz-docx-odt-epub-jpg/",
      "date_published": "2019-06-16T00:00:00+00:00",
      "author": {
        "name": "phiresky",
        "url": "https://phiresky.github.io/blog/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "91f9b804-7782-4a78-ade2-e4d8008923cf",
      "title": "Why we're using Rust for cloud rendering",
      "content_text": "We initially began replacing a small component of our stack using Rust, but it quickly became clear that a larger effort would allow a great reduction in complexity. In the end, all the C, C++, and Python components of the service were rebuilt, with Rust used from task loading through to dispatching GPU operations.",
      "url": "https://www.digitalbridge.com/blog/why-were-using-rust-for-cloud-rendering",
      "date_published": "2019-06-24T12:07:47+00:00",
      "author": {
        "name": "Iain MacIver",
        "url": "https://www.digitalbridge.com/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c274055b-d2a2-43f1-9ef3-a9fc15521878",
      "title": "swym: Are we lock-free yet?",
      "content_text": "swym is a transactional memory library that prioritizes performance. It’s not lock-free, but it does have progress guarantees. This post will explore some of the recent work on swym’s progress promises, as well as some comparisons with non-blocking algorithms. I’m not an expert on schedulers or OS’s, so please correct me if anything is wrong. It might benefit swym!",
      "url": "https://mtak-blog.github.io/are-we-lock-free-yet",
      "date_published": "2019-06-24T00:00:00+00:00",
      "author": {
        "name": "mtak-",
        "url": "https://github.com/mtak-"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "24f33796-8ad9-4162-b8a1-1048ab285062",
      "title": "The Rust Module System and Useful Crates for CLI Apps",
      "content_text": "Today I’ll be continuing my series of posts on the rust implementation of the Mercurial version control system I’ve been working on. In this post I’ll be focusing on what I learned this week about the rust module system as well as a few helpful crates I discovered to aid in command-line argument parsing and error handling.",
      "url": "https://ngoldbaum.github.io/posts/helpful-rust-cli-crates/",
      "date_published": "2019-06-12T10:06:24-04:00",
      "author": {
        "name": "Nathan Goldbaum",
        "url": "https://ngoldbaum.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "7fc0def8-20e5-4923-922d-33732b5fc86c",
      "title": "On public API and private implementation",
      "content_text": "In this blog article, I want to explore a problem I’ve been facing from time to time in luminance. The manual dispatch problem. The idea is simple: you are writing a crate and want to expose an API to people. You want them to know which type they can use with a given operation (let’s call it update). However, the actual implementation of this update function is not performed directly by your API but is deferred to a backend implementation. Some people usually like to do that with several crates; in my case, I really don’t care and let’s think in terms of types / modules instead.",
      "url": "https://phaazon.net/blog/public-api-private-implementation",
      "date_published": "2019-06-13T17:05:00+00:00",
      "author": {
        "name": "Dimitri Sabadie",
        "url": "http://phaazon.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "db087996-8806-49fc-8d6e-78f4158cf0f6",
      "title": "Help Wanted Solving Our BLE Stack Problem",
      "content_text": "Jonas Schievink and I have been working on a Bluetooth Low Energy stack in Rust, Rubble. It is now in a state where hard-coded services can be created and used, with all lower layers of the stack functioning.\n\nThe next step is designing and implementing both an interface for managing Services and Characteristics, as well as a system for notifications when a value is changed. This is fairly complex, with no clear or obvious solution hence the call for help.",
      "url": "https://mckeogh.tech/help-wanted-ble/",
      "date_published": "2019-06-13T00:00:00+00:00",
      "author": {
        "name": "Ferdia McKeogh",
        "url": "https://mckeogh.tech/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "fde2b9f7-5ee2-4743-8887-0ae941fc2217",
      "title": "Comparing the Same Project in Rust, Haskell, C++, Python, Scala and OCaml",
      "content_text": "During my final term at UWaterloo I took the CS444 compilers class with a project to write a compiler from a substantial subset of Java to x86, in teams of up to three people with a language of the group’s choice. This was a rare opportunity to compare implementations of large programs that all did the same thing, written by friends I knew were highly competent, and have a fairly pure opportunity to see what difference design and language choices could make. I gained a lot of useful insights from this. It’s rare to encounter such a controlled comparison of languages, it’s not perfect but it’s much better than most anecdotes people use as the basis for their opinions on programming languages.",
      "url": "http://thume.ca/2019/04/29/comparing-compilers-in-rust-haskell-c-and-python/",
      "tweet_url": "https://twitter.com/trishume/status/1140027512283652096",
      "date_published": "2019-04-29T00:00:00+00:00",
      "author": {
        "name": "Tristan Hume",
        "url": "http://thume.ca/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "98e8bcf7-00d1-4f6d-ba28-ea41f2d7b705",
      "title": "Experiment with streams, reading files with futures",
      "content_text": "We were experimenting with streams and I wanted to play around with them as well. There are some tokio implementations for async file reading futuers, but since linux filesystems before kernel 5.1 do not really support non blocking file operations. I thought lets have fun breaking things ourselves. As I mentioned this is not really non blocking I/O esp. since there are two ways to view futures in their current state. ",
      "url": "https://chilimatic.hashnode.dev/experiment-with-streams-reading-files-with-futures-cjx1q0gmo001eurs1pt0c27kz",
      "tweet_url": "https://twitter.com/shadowdroid/status/1140959328381415424",
      "date_published": "2019-06-18T00:00:00+00:00",
      "author": {
        "name": "j",
        "url": "https://chilimatic.hashnode.dev/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "f6a2f624-a597-4ae7-b89a-e621ebb50c55",
      "title": "nom, the Rust parser combinators library, is now available at version 5",
      "content_text": "nom, the Rust parser combinators library, is now available at version 5. This is the most mature version of nom. This is the one that feels “done”. This is the parser library that I wanted when I started nom 5 years ago. It’s here at last. nom 5 is a complete rewrite of the internal architecture, to use functions instead of macros, while keeping backward compatibility with existing macros based parsers, and making the error type completely generic.",
      "url": "http://unhandledexpression.com/general/2019/06/17/nom-5-is-here.html",
      "tweet_url": "https://twitter.com/gcouprie/status/1143141682487205889",
      "date_published": "2019-06-24T00:00:00+00:00",
      "author": {
        "name": "Geoffroy Couprie",
        "url": "https://unhandledexpression.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "c03bd61e-3c2d-4e4d-a081-ffa0e3b641ed",
      "title": "Getting Started with Rust: Working with Files and Doing File I/O",
      "content_text": "This article demonstrates how to perform basic file and file I/O operations in Rust, and also introduces Rust's ownership concept and the Cargo tool. If you are seeing Rust code for the first time, this article should provide a pretty good idea of how Rust deals with files and file I/O, and if you've used Rust before, you still will appreciate the code examples in this article. ",
      "url": "https://www.linuxjournal.com/content/getting-started-rust-working-files-and-doing-file-io",
      "tweet_url": "https://twitter.com/linuxjournal/status/1141736722822311938",
      "date_published": "2019-06-20T00:00:00+00:00",
      "author": {
        "name": "Mihalis Tsoukalos",
        "url": "https://www.linuxjournal.com/users/mihalis-tsoukalos"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "0f371197-7406-4f9f-8460-b8a9e951ec27",
      "title": "Rust for OOP - Enums & Pattern Matching - Part 2",
      "content_text": "We will continue the previous post with two complementary examples. Both will demonstrate the capability of enums to push various language constructs and states into the type system. As an example for it, imagine we could create a type which represents an if statement, and then hand over instances of it around our program. Enums tends to work better than using the underlying concepts for various reason, starting from the complexity of the borrow checkers and lifetimes, through the powerful type system in Rust. And not less important, allowing you to code common patterns as functions, in a way otherwise wouldn’t be available to you. We will see all of this today. Later in the series, we will revisit those examples, and we will demonstrate how well they can compose with other code we can write.",
      "url": "https://oribenshir.github.io/afternoon_rusting//blog/enum-and-pattern-matching-part-2",
      "tweet_url": "https://twitter.com/oribenshir/status/1142431503261032448",
      "date_published": "2019-06-22T00:00:00+00:00",
      "author": {
        "name": "Ori Ben-Shir",
        "url": "https://oribenshir.github.io/afternoon_rusting/index.html"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "25660960-3e2c-44ba-a511-2dd73afc6a32",
      "title": "RSoC: Implementing ptrace for Redox OS - part 1",
      "content_text": "After having a pretty clear goal to meet specified by the RFC, time to get things moving. I started with what I thought would be low hanging fruit: Reading the registers of another process. It ended up being more difficult than I thought, but it ended up being really interesting and I want to share it with you :)",
      "url": "https://www.redox-os.org/news/rsoc-ptrace-1/",
      "date_published": "2019-06-22T00:00:00+00:00",
      "author": {
        "name": "jD91mZM2",
        "url": "https://www.redox-os.org/news/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "fafe9330-b614-4ea0-a2eb-1958d77fc8f4",
      "title": "Real Time For the Masses goes multi-core",
      "content_text": "v0.5.0 of Real Time For the Masses (RTFM), the embedded concurrency framework, is coming out soon-ish – some time after Rust 1.36 is released – and will include experimental support for homogeneous and heterogeneous multi-core Cortex-M devices. This blog post covers the upcoming multi-core API and includes a refresher on the single-core API.",
      "url": "https://blog.japaric.io/multicore-rtfm/",
      "tweet_url": "https://twitter.com/japaricious/status/1142830987631648768",
      "date_published": "2019-06-23T00:00:00+00:00",
      "author": {
        "name": "Jorge Aparicio",
        "url": "http://blog.japaric.io/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "0904d040-f6c1-4b6a-a9ee-328a5ed55d2d",
      "title": "Orkhon: ML Inference Framework and Server Runtime",
      "content_text": "Orkhon is Rust framework for Machine Learning to run/use inference/prediction code written in Python, frozen models and process unseen data. It is mainly focused on serving models and processing unseen data in a performant manner. Instead of using Python directly and having scalability problems for servers this framework tries to solve them with built-in async API.",
      "url": "https://docs.rs/orkhon/0.1.0/orkhon/",
      "date_published": "2019-05-29T21:32:00+00:00",
      "author": {
        "name": "Mahmut Bulut",
        "url": "https://github.com/vertexclique"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "5150f924-ef3f-4327-a3ba-c5f16076a22b",
      "title": "Auth Web Microservice with rust using Actix-Web 1.0 - Complete Tutorial",
      "content_text": "We are going to create a web-server in rust that only deals with user registration and authentication. I will be explaining the steps in each file as we go. The complete project code is here repo. Please take all this with a pinch of salt as I’m a still a noob to rust 😉.",
      "url": "https://gill.net.in/posts/auth-microservice-rust-actix-web1.0-diesel-complete-tutorial/",
      "date_published": "2019-06-09T00:00:00+00:00",
      "author": {
        "name": "Harry Gill",
        "url": "https://gill.net.in/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "6ca39c1c-1424-4f6f-86c0-8e93f84718c0",
      "title": "How do you impl Display for Vec?",
      "content_text": "Or, more generally, how do you implement any trait that is outside of your crate, for a type that is also outside of your crate? Lets create a micro app that helps us explore the problem. We’ll create a simple struct, implement Display for that, then try to implement Display for a Vec of that struct. Once we understand the problem we’ll discuss a simple solution and how to make that solution more idiomatic.",
      "url": "https://medium.com/apolitical-engineering/how-do-you-impl-display-for-vec-b8dbb21d814f",
      "date_published": "2019-06-10T14:03:02.038+00:00",
      "author": {
        "name": "Daniel Mason",
        "url": "https://medium.com/@Gisleburt"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "0f224e61-b4f3-40f2-b99a-431cf41ec5d8",
      "title": "Gtk-rs: New release - more complete, safer",
      "content_text": "Welcome everyone to this whole new gtk-rs release! Time to check what was added/updated in this new version.",
      "url": "https://gtk-rs.org/blog/2019/06/22/new-release.html",
      "date_published": "2019-06-22T00:00:00+00:00",
      "author": {
        "name": "Gtk-rs Developers",
        "url": "https://gtk-rs.org/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "13cf6e76-809f-4987-997d-4cb45a26114d",
      "title": "Amethyst 0.11.0 has been released!",
      "content_text": "Amethyst 0.11.0 comes packed with the Rendy integration & many small additions throughout the engine.",
      "url": "https://amethyst.rs/posts/release-0-11",
      "tweet_url": "https://twitter.com/AmethystEngine/status/1140265649207488514",
      "date_published": "2019-06-17T00:31:00+00:00",
      "author": {
        "name": "Thomas Schaller",
        "url": "https://amethyst.rs/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "dd7226ff-eb20-4edf-b420-9e6bdecf4ddc",
      "title": "Automating Rust and NodeJS deployment on AWS Lambda using layers",
      "content_text": "Part of our stack at Clevy is written in Rust, and we use Neon to ease the bindings with other parts of the stack written in NodeJS. Recently, we needed to deploy this stack on AWS Lambda, which runs a very specific NodeJS runtime, not cross-compatible with our existing stack. Since we struggled a little bit with getting Lambda/Rust/Node to play nicely together, I figured I would post a short how-to of what we found worked well for us. You can of course take this as a base and change it to your liking!",
      "url": "https://medium.com/clevyio/automating-rust-and-nodejs-deployment-on-aws-lambda-using-layers-2d47d129a6bc",
      "date_published": "2019-06-06T11:28:57.140+00:00",
      "author": {
        "name": "Francois Falala-Sechet",
        "url": "https://medium.com/@frsechet"
      },
      "tags": [
        "DevOps and Deployment"
      ]
    },
    {
      "id": "a5730863-ff70-4122-8595-81c11ee59697",
      "title": "Asyncifying an Actix Web App and Upgrading it to 1.0 - zupzup",
      "content_text": "In a previous post, we created an Actix 0.7 Web App, which was not fully non-blocking. In this post, we'll become fully non-blocking and upgrade the app to Actix 1.0",
      "url": "https://zupzup.org/asyncify-rust-webapp/",
      "date_published": "2019-06-20T00:00:00+00:00",
      "author": {
        "name": "Mario Zupan",
        "url": "https://zupzup.org/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "d0496592-58c8-4e56-8cfb-890df49f7b6c",
      "title": "A simple plugin interface for the Rust FFI",
      "content_text": "I present a straight-forward design of a plugin interface using the Rust FFI.",
      "url": "http://kmdouglass.github.io/posts/a-simple-plugin-interface-for-the-rust-ffi/",
      "tweet_url": "https://twitter.com/kmdouglass/status/1140191569833865217",
      "date_published": "2019-06-16T07:33:33+00:00",
      "author": {
        "name": "Kyle M. Douglass",
        "url": "http://kmdouglass.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "b26fcca3-2a79-4340-88fd-80c6f70c95d1",
      "title": "On Memoization in Rust",
      "content_text": "A detailed walk through how to memoize function calls in Rust.",
      "url": "https://medium.com/swlh/on-memoization-291fd1dd924",
      "date_published": "2019-06-17T12:30:14.793+00:00",
      "author": {
        "name": "Andrew Pritchard",
        "url": "https://medium.com/@andrewjpritchard"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "54d40e7f-c5c5-4c69-86e2-9913c6a88200",
      "title": "Collaborative Editor in Rust",
      "content_text": "I've been experimenting with techniques for collaborative editing in Rust recently and I'd like to share my first functional prototype with you. The demo uses Rust and WebAssembly, and I implemented it using a conflict-free replicated data type (CRDT) based on LOGOOT, which I modified to work with variable-sized strings rather than individual characters or lines.",
      "url": "https://caolan.org/posts/collaborative_editor_in_rust.html",
      "date_published": "2019-06-21T00:00:00+00:00",
      "author": {
        "name": "Caolan McMahon",
        "url": "https://caolan.org/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "e7bf2504-b854-4a1d-b946-38075e83e97a",
      "title": "Rust for OOP - Enums & Pattern Matching - Part 1",
      "content_text": "We continue our series “Rust for OOP” with Enums & Pattern Matching, one of my preferred features of Rust. I didn’t hear about it before getting into the language, yet immediately fell in love with it. Enums are simple, expressive, reducing code bloat, enable encapsulation, easy to understand, and reason with. It also enables many useful design pattern. ",
      "url": "https://oribenshir.github.io/afternoon_rusting/blog/enum-and-pattern-matching-part-1",
      "tweet_url": "https://twitter.com/oribenshir/status/1140698365082198017",
      "date_published": "2019-06-17T00:00:00+00:00",
      "author": {
        "name": "Ori Ben-Shir",
        "url": "https://oribenshir.github.io/afternoon_rusting/index.html"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "1898399d-d60a-46fc-a3e0-cb8a73fb546e",
      "title": "The smooth resize test",
      "content_text": "Today is an exciting point in the evolution of native GUI in Rust. There is much exploration, and a number of promising projects, but I also think we don’t yet know the recipe to make GUI truly great. As I develop my own vision in this space, druid, I hope more that the efforts will learn from each other and that an excellent synthesis will emerge, more so than simply hoping that druid will win.\n\nIn my work, I have come across a problem that is as seemingly simple, yet as difficult to get right, as making decent tea: handling smooth window resizing. Very few GUI toolkits get it perfect, with some failing spectacularly. This is true across platforms, though Windows poses special challenges. It’s also pretty easy to test (as opposed to requiring sophisticated latency measurements, which I also plan to develop). I suggest it become one of the basic tests to evaluate a GUI toolkit.",
      "url": "https://raphlinus.github.io/rust/gui/2019/06/21/smooth-resize-test.html",
      "tweet_url": "https://twitter.com/raphlinus/status/1142529186008928256",
      "date_published": "2019-06-21T19:50:42+00:00",
      "author": {
        "name": "Raph Levien",
        "url": "https://raphlinus.github.io/"
      },
      "tags": [
        "Games and Graphics",
        "Performance"
      ]
    },
    {
      "id": "7602cf1d-bae1-41bb-bfb8-4d7967af1704",
      "title": "A Detailed Look at Rust Streams",
      "content_text": "As Rust's async story is evolving, so is Rust's streaming story. In this post we'll take a look at how Rust's streaming model works, how to use it effectively, and where things are heading in the future.",
      "url": "https://blog.yoshuawuyts.com/rust-streams/",
      "tweet_url": "https://twitter.com/yoshuawuyts/status/1141825585162964992",
      "date_published": "2019-06-20T00:00:00+00:00",
      "author": {
        "name": "Yoshua Wuyts",
        "url": "https://blog.yoshuawuyts.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "f756eb13-90c3-407a-a304-66e198248d3b",
      "title": "Distributed Systems Training in Rust and Go",
      "content_text": "PingCAP is creating a series of training courses on writing distributed systems in Rust and Go. These courses consist of:\n\nPractical Networked Applications in Rust. A series of projects that incrementally develop a single Rust project from the ground up into a high-performance, networked, parallel and asynchronous key/value store. Along the way various real-world and practical Rust development subject matter are explored and discussed.\n\nDistributed Systems in Rust. Adapted from the MIT 6.824 distributed systems coursework, this course focuses on implementing important distributed algorithms, including the Raft consensus algorithm, and the Percolator distributed transaction protocol.",
      "url": "https://tikv.org/blog/talent-training/",
      "tweet_url": "https://twitter.com/tikvproject/status/1141561678644989954",
      "date_published": "2019-06-20T00:00:00+00:00",
      "author": {
        "name": "Brian Anderson",
        "url": "https://tikv.org/blog"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "f1697ece-4d5e-46b8-88b5-d5a2e729ae96",
      "title": "Rust crates – frehberg’s annotated catalogue",
      "content_text": "The base of Rust users and contributors is growing steadily. The amount of libraries (aka crates) at http://crates.io is growing quickly; the overall “noise” is increasing. Some libraries might not be maintained any longer 🙁\n\nThis annotated catalogue shall help the Rust-users to find specific, popular, mature Rust crates. This list is WIP (Work In Progress), reflecting my personal shortlist. The ordering in the table top-down doesn’t express any preference.",
      "url": "https://frehberg.com/2019/06/rust-crates-frehbergs-annotated-catalogue/",
      "date_published": "2019-06-19T19:13:23+00:00",
      "author": {
        "name": "Frank Rehberger",
        "url": "https://frehberg.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "87fc989d-1a0d-47ce-9663-105f4e93a217",
      "title": "Green Threads Explained in 200 Lines of Rust",
      "content_text": "This book aims to explain green threads by using a small example where we implement a simple but working program where we use our own green threads to execute code.",
      "url": "https://cfsamson.gitbook.io/green-threads-explained-in-200-lines-of-rust/",
      "date_published": "2019-06-12T00:00:00+00:00",
      "author": {
        "name": "cfsamson",
        "url": "https://github.com/cfsamson"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "38752604-badd-4d11-a3e3-92b6091d2153",
      "title": "Rust on the ESP and how to get started",
      "content_text": "Read about a simple quickstart with Rust on the ESP, using a ready-to-run container setup that should make this as easy as possible.",
      "url": "https://dentrassi.de/2019/06/16/rust-on-the-esp-and-how-to-get-started/?pk_campaign=twitter",
      "tweet_url": "https://twitter.com/ctron/status/1140558962158448640",
      "date_published": "2019-06-16T14:18:55+00:00",
      "author": {
        "name": "Jens Reimann",
        "url": "https://dentrassi.de/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "56e998a6-89d0-4a99-b11c-a541d35dc9a1",
      "title": "Debugging with and without parameter in Rust",
      "content_text": "Rust 1.32.0 introduced a macro dbg! for quick and dirty debugging with which you can inspect the value of a given expression. Rust 1.35.0 announced an improvement in this macro to make it more usable for Rustaceans. Now you can trace any fine and line number using this macro without passing any parameter.",
      "url": "https://blog.knoldus.com/debugging-with-and-without-parameter-in-rust/",
      "tweet_url": "https://twitter.com/ayushmishra2005/status/1133954934221656064",
      "date_published": "2019-05-30T04:33:10+00:00",
      "author": {
        "name": "Ayush Mishra",
        "url": "https://blog.knoldus.com/author/ayushmishra2005/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "42c2c580-96cc-4fc8-9485-b29364da6144",
      "title": "Release Notes for v0.6.0",
      "content_text": "The biggest change for this release is that I started writing a parser for binary Blender files. There is a blog post, where I talk a bit about that, how to explore binary Blender files, and basically how to reconstruct useful information from their DNA.",
      "url": "https://www.rs-pbrt.org/blog/v0-6-0-release-notes/",
      "date_published": "2019-06-07T00:00:00+00:00",
      "author": {
        "name": "Jan Douglas Bert Walter",
        "url": "https://www.rs-pbrt.org/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "e3be782c-4057-4e64-9c1a-0ff81761d5d7",
      "title": "Speed Up Your JavaScript With Rust",
      "content_text": "For a recent personal project, I had only needed a fairly simple node.js server to do exponential and costly computing tasks. To be honest, I could have switched the entire tech stack, but I estimated that the development time of such a choice wasn’t worth it… Still, I had some functions taking ages to compute. So I had a look around, and decided to let that task be handled by a more appropriate language, in this case Rust.",
      "url": "https://medium.com/paloit/speed-up-your-javascript-with-rust-7661922562fa",
      "date_published": "2019-06-06T01:54:49.483+00:00",
      "author": {
        "name": "Johan Paasche",
        "url": "https://medium.com/@Rainbow.Dash"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "7d1887a3-55d1-448d-8643-2a520bfddc41",
      "title": "The Typestate Pattern in Rust",
      "content_text": "The typestate pattern is an API design pattern that encodes information about an object's run-time state in its compile-time type. This pattern is so easy in Rust that it's almost obvious, to the point that you may have already written code that uses it, perhaps without realizing it. I haven't seen a detailed examination of the nuances of this pattern, so here's my contribution.",
      "url": "http://cliffle.com/blog/rust-typestate/",
      "date_published": "2019-06-05T00:00:00+00:00",
      "author": {
        "name": "Cliff L. Biffle",
        "url": "http://cliffle.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "81657ee0-b628-449d-b5c3-3258a0219756",
      "title": "Hagrid: A New Verifying Key Server Built on Sequoia",
      "content_text": "On Wednesday, Vincent launched a new key server at keys.openpgp.org! What makes this launch special is that keys.openpgp.org is running Hagrid —“The Keeper of Keys”—a new verifying key server, which is written in Rust and based on Sequoia. Even though the launch didn’t receive much media attention, 700 people have already verified their keys in the 48 hours since the announcement.",
      "url": "https://sequoia-pgp.org/blog/2019/06/14/20190614-hagrid/",
      "date_published": "2019-06-14T14:21:35+02:00",
      "author": {
        "name": "Neal",
        "url": "https://sequoia-pgp.org/"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "922ec00d-8aa7-48eb-9344-c1d1eacc44ec",
      "title": "Threads in rust",
      "content_text": "In our regular hacksession, the current season ;), we are focusing on threading. Concurrency/Multithreading is a really hard topic it has a lot of very specific nomenclature and there are different 'levels' of concurrency one might say. I will start with the nomenclature starting from the programmers / OS perspective.",
      "url": "https://chilimatic.hashnode.dev/threads-in-rust-cjwmbxw9e003pzjs19n7pa0bt",
      "date_published": "2019-06-07T00:00:00+00:00",
      "author": {
        "name": "j",
        "url": "https://chilimatic.hashnode.dev/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "87146592-5c10-431e-8655-5272eec53ed9",
      "title": "Makepad, a live Rust authoring tool for 2D vector design, shaders and animation",
      "content_text": "The vision is to build a livecoding / design hybrid program, where procedural design and code are fused in one environment. If you have missed 'learnable programming' please check this out: http://worrydream.com/LearnableProgramming/ Makepad aims to fulfill (some) of these ideas using a completely from-scratch renderstack built on the GPU and Rust. It will be like an IDE meets a vector designtool, and had offspring. Direct manipulation of the vectors modifies the code, the code modifies the vectors.\n\nHowever before we can make this awesome application, we need to build a UI stack. The aim of this toolkit is to be our stepping stone into building a livecoding IDE and designtools that don't suck or fall to pieces along the way.",
      "url": "https://github.com/makepad/makepad",
      "date_published": "2019-06-17T00:00:00+00:00",
      "author": {
        "name": "makepad",
        "url": "https://github.com/makepad"
      },
      "tags": [
        "Web and Network Services",
        "Tools and Applications"
      ]
    },
    {
      "id": "5d2b3bb3-b939-4e5a-851f-31963f805af4",
      "title": "5 Year Anniversary",
      "content_text": "gfx-rs project started with a simple idea: separate the API-specific logic of interaction with the graphic driver from a Rust application. That idea was brewing in the heads of @kvark and @bjz precisely 5 years ago, when they realized the common goal and kicked off the project. The Rust game dev community at the time consisted of a few prominent projects (like kiss3d, claymore, and q3) driven by individuals. They used gl-rs for rendering with no strong separation between higher levels, built as mostly monolithic systems. Because GL was known to keep the CPU occupied on the owning thread, we wanted to provide a separate thread dedicated to talking to the GPU. We had a lot to learn, some great contributors to meet, and hoped to eventually make Rust ecosystem a better place.",
      "url": "https://gfx-rs.github.io/2019/06/12/anniversary-5.html",
      "date_published": "2019-06-12T00:00:00+00:00",
      "author": {
        "name": "gfx-rs",
        "url": "https://gfx-rs.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "05531a2c-35fc-4e51-ad25-77b362b99e03",
      "title": "Bzip2 in Rust: porting the randomization table",
      "content_text": "Here is a straightforward port of some easy code. randtable.c has a lookup table with seemingly-random numbers. This table is used by the following macros in bzlib_private.h",
      "url": "https://people.gnome.org/~federico/blog/bzip2-in-rust-randomization-table.html",
      "date_published": "2019-06-11T14:30:17-05:00",
      "author": {
        "name": "Federico Mena Quintero",
        "url": "https://people.gnome.org/~federico/blog/index.html"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c4166c18-6984-4c64-bda0-68d98d5b3ae7",
      "title": "Determining if a Rust Vector has all equal elements",
      "content_text": "Earlier today, I tooted out a Rust question: How would you write a function to determine if a Vector of integers are all the same, or not. Anyway, the Fediverse is wonderful and full of helpful Rust friends – I ended up getting about a dozen solutions (none exactly the same I don’t think?)",
      "url": "https://sts10.github.io/2019/06/06/is-all-equal-function.html",
      "date_published": "2019-06-06T22:11:00+00:00",
      "author": {
        "name": "Sam Schlinkert",
        "url": "https://sts10.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "30deb171-6751-4af4-9f56-202fe6a78110",
      "title": "Solutions to the first 20 project euler problems",
      "content_text": "I’m getting more and more used to thinking about Rust code in an idiomatic way, but I don’t think I’m comfortable enough to call myself a rustacean yet. To further my goal of oxidizing my brain with rust knowledge, I decided to start working through project euler problems sequentially. I’ve recently finished the first 20 problems and I though I’d share the highlights of what I learned about rust along the way.",
      "url": "https://ngoldbaum.github.io/posts/project-euler/",
      "date_published": "2019-06-06T10:23:45-04:00",
      "author": {
        "name": "Nathan Goldbaum",
        "url": "https://ngoldbaum.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "7d2d904d-78a6-42be-8c41-c1934b975516",
      "title": "Tutorial: Use FlatBuffers in Rust",
      "content_text": "The FlatBuffers project is an extremely efficient schema-versioned serialization library. In this tutorial, you’ll learn how to use it in Rust.",
      "url": "https://rwinslow.com/posts/use-flatbuffers-in-rust/",
      "date_published": "2019-05-17T00:00:00+00:00",
      "author": {
        "name": "Robert Winslow",
        "url": "https://rwinslow.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c26ac9a2-3fbe-4cb3-b845-58e08b05502c",
      "title": "A generic kubernetes client",
      "content_text": "It’s been about a month since we released kube, a new rust client library for kubernetes. We covered the initial release, but it was full of naive optimism and uncertainty. Would the generic setup work with native objects? How far would it extend? Non-standard objects? Patch handling? Event handling? Surely, it’d be a fools errand to write an entire client library?",
      "url": "https://clux.github.io/probes/post/2019-06-04-towards-a-generic-kube-client/",
      "date_published": "2019-06-04T00:00:00+00:00",
      "author": {
        "name": "clux",
        "url": "https://clux.github.io/"
      },
      "tags": [
        "DevOps and Deployment"
      ]
    },
    {
      "id": "37400230-0f89-41d9-a9e4-a0d7460217ab",
      "title": "Overlapping blanket impls",
      "content_text": "Rust doesn’t allow multiple impls of a trait on the same type. This rule keeps resolution transparent and reliable. It also has an ugly side effect, that for every trait there can be only 1 blanket impl. Compiler is completely distrustful here. What if somebody somewhere created a structure that implemented both ToString and Clone? Should such combination suddenly be forbidden? What about String and u32? This rule prevents type hierarchy from sliding into minefield of odd rules and breakages on every other dependency update.",
      "url": "https://codesandwich.github.io/overlapping_blanket_impls/",
      "date_published": "2019-06-05T12:00:00+00:00",
      "author": {
        "name": "CodeSandwich",
        "url": "https://codesandwich.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "f6902c1c-3975-454f-891e-d39b071d66d4",
      "title": "Introducing Lightbeam: An Optimising Streaming WebAssembly Compiler",
      "content_text": "Lightbeam is a new streaming compiler for WebAssembly, designed to produce the best possible assembly while still being fast enough to produce assembly faster than the WebAssembly is received over the wire.",
      "url": "http://troubles.md/posts/lightbeam/",
      "date_published": "2019-05-04T10:10:34+01:00",
      "author": {
        "name": "troubles.md",
        "url": "http://troubles.md/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "55e1be8d-4aae-4753-8bc6-9a52a6401722",
      "title": "Introducing flat-manager",
      "content_text": "A long time ago I wrote a blog post about how to maintain a Flatpak repository. It is still a nice, mostly up to date, description of how Flatpak repositories work. However, it doesn’t really have a great answer to the issue called syncing updates in the post. In other words, it really is more about how to maintain a repository on one machine.\n\nTo support this I’ve been working on a side project called flat-manager. It is a service written in rust that manages Flatpak repositories. Recently we migrated Flathub to use it, and its seems to work quite well.",
      "url": "https://blogs.gnome.org/alexl/2019/03/19/introducing-flat-manager/",
      "date_published": "2019-03-19T13:20:25+00:00",
      "author": {
        "name": "Alexander Larsson",
        "url": "https://blogs.gnome.org/alexl/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "0f7e8d0a-81fa-4f1a-aa4d-418554873fe6",
      "title": "Nannou Update - Vulkan, LASERs and more!",
      "content_text": "Nannou is an open source, creative coding framework for Rust. Today marks one of the biggest milestones for the project since its launch - the release of version 0.9. This version is particularly special for our community as it lands the last eight months of progress into master and onto crates.io. While some of us have already been using the work-in-progress 0.9 branch in our personal and commercial work over the past few months, it is a relief to finally be able to land and share the progress with the wider world!",
      "url": "https://nannou.cc/posts/nannou_v0.9",
      "tweet_url": "https://twitter.com/Joshua_Batty/status/1138112266870697984",
      "date_published": "2019-06-09T00:00:00+00:00",
      "author": {
        "name": "Nannou team",
        "url": "https://nannou.cc/posts"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "3fab26a6-a1c1-4107-a0c0-c69f2c297342",
      "title": "Emu - GPU programming language for Rust",
      "content_text": "Emu is a language for programming GPUs from Rust. Emu provides the emu! macro for compiling functions written in the Emu language to an intermediate code which gets stored in the EMU global constant. You can then run your code using a binding to OpenCL such as ocl or rust-opencl or use the build! macro which generates Rust functions that can be called to run your Emu functions.",
      "url": "https://calebwin.github.io/emu/",
      "date_published": "2019-06-13T00:00:00+00:00",
      "author": {
        "name": "Caleb Winston",
        "url": "https://github.com/calebwin"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "b3f6b505-fb93-4330-a039-d97e148e80d5",
      "title": "Sealed Rust",
      "content_text": "This is the first post in a series detailing Ferrous System's plan to qualify the Rust Language and Compiler for use in the Safety Critical domain. We call this effort Sealed Rust.",
      "url": "https://ferrous-systems.com/blog/sealed-rust-the-pitch/",
      "tweet_url": "https://twitter.com/bitshiftmask/status/1136307041797115906",
      "date_published": "2019-06-06T02:21:00+00:00",
      "author": {
        "name": "James Munns",
        "url": "https://ferrous-systems.com/blog"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "ae6027ab-b71f-4bce-9ab8-e1853aa24030",
      "title": "Actix - Actor System and Web Framework for Rust",
      "content_text": "Actix web 1.0.0 is released - a small, pragmatic, and extremely fast web framework.",
      "url": "https://actix.rs/",
      "tweet_url": "https://twitter.com/fafhrd91/status/1136145202094231552",
      "date_published": "2019-06-05T15:38:00+00:00",
      "author": {
        "name": "Nikolay Kim",
        "url": "https://twitter.com/fafhrd91"
      },
      "tags": [
        "Web and Network Services",
        "Crates"
      ]
    },
    {
      "id": "c12ced69-039d-4d8a-99f3-ed518947537a",
      "title": "The design and implementation of a lock-free ring-buffer with contiguous reservations",
      "content_text": "Berlin based technology consultancy specialising in the rust programming language and related services.",
      "url": "https://ferrous-systems.com/blog/lock-free-ring-buffer/",
      "tweet_url": "https://twitter.com/FerrousSystems/status/1135954894794448896",
      "date_published": "2019-06-05T03:02:00+00:00",
      "author": {
        "name": "Andrea Lattuada and James Munns",
        "url": "https://ferrous-systems.com/blog"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "f9c3c42b-87f8-4edf-820b-aad48a409482",
      "title": "essential rust tools",
      "content_text": "Rust has a “community of developers empowered by their tools and each other” (via Katharina Fey in “An async story“). The Rust community helps each other through effective narrative documentation and attention to error messages, and the robust tooling around Rust drives momentum, overcoming some of the natural hurdles when diving into a new language.\n\nHere’s my list of essential rust tools (so far).",
      "url": "https://www.ultrasaurus.com/2019/06/essential-rust-tools/",
      "tweet_url": "https://twitter.com/ultrasaurus/status/1135552305057505280",
      "date_published": "2019-06-03T14:19:23+00:00",
      "author": {
        "name": "Sarah Allen",
        "url": "https://www.ultrasaurus.com/code/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "aea12212-4a3a-4c00-baa5-313f5c998977",
      "title": "Announcing our Verifiable Random Function (VRF) Rust library",
      "content_text": "Recently Gorka Irazoqui Apecechea and me proudly published a VRF crate as an open source project under the MIT license. The library is a fast, flexible and general-purpose Verifiable Random Function (VRF) library written in Rust, which follows the IETF standard draft written by Sharon Goldberg, Moni Naor, Dimitris Papadopoulos, Leonid Reyzin, and Jan Včelák.",
      "url": "https://medium.com/witnet/announcing-our-verifiable-random-function-vrf-rust-library-2e042c29a4f7",
      "tweet_url": "https://twitter.com/witnet_io/status/1135565714788638720",
      "date_published": "2019-06-03T15:03:50.164+00:00",
      "author": {
        "name": "Mario Cao",
        "url": "https://medium.com/@mariocao"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "d6200716-96c2-4c9c-890d-0047906b7c72",
      "title": "Rust's custom derives in a hexagonal architecture: Incompatible ideas?",
      "content_text": "This blog post is a manifestation of a problem that has been floating around in my head for quite a while now. It is about the seemingly incompatible idea of fully embracing Rust's custom derive system in an application that puts a strong focus on a hexagonal architecture.\n\nTo discuss this problem, I am going to first write about both concepts individually. Feel free to skip over those sections if you are already familiar with the topics. The blog post finishes off with some ideas on how Rust could be extended to better support these kind of usecases.",
      "url": "https://blog.eizinger.io/5835/rust-s-custom-derives-in-a-hexagonal-architecture-incompatible-ideas",
      "tweet_url": "https://twitter.com/oetzn/status/1134705608035188737",
      "date_published": "2019-05-30T00:00:00+00:00",
      "author": {
        "name": "Thomas Eizinger",
        "url": "https://blog.eizinger.io/@thomas_eizinger"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4676f66e-29a0-4d5d-9da8-34c09f104ca2",
      "title": "Hosting Embedded Rust apps on Apache Mynewt with STM32 Blue Pill",
      "content_text": "Today’s microcontrollers (like the STM32 Blue Pill) pack so many features in a tiny package… yet few embedded programmers are capable of exploiting the full potential of modern microcontrollers. Many of us (my IoT students included) seem to be stuck in the 1980s — painstakingly writing C programs for small computers.\n\nIt’s time to drop our legacy programming practices and adopt smarter, safer ways to exploit these microcontrollers… starting with Apache Mynewt and Rust.",
      "url": "https://medium.com/@ly.lee/hosting-embedded-rust-apps-on-apache-mynewt-with-stm32-blue-pill-c86b119fe5f?sk=f58f4cf6c608fded4b354063e474a93b",
      "date_published": "2019-06-09T14:47:44.025+00:00",
      "author": {
        "name": "Lup Yuen Lee 李立源",
        "url": "https://medium.com/@ly.lee"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "aaa397b7-d0b2-43d0-af75-0934ac4bfe73",
      "title": "Announcing Contrie: concurrent maps and sets",
      "content_text": "This is partly an announcement of a new crate folks might find useful, partly a call for participation and help and partly a journal like story how the crate came to being. Read on (or not) or skip to the parts that seem interesting to you.",
      "url": "https://vorner.github.io/2019/06/09/announcing-contrie.html",
      "date_published": "2019-06-09T00:00:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "b1731301-ca91-4f8c-a66a-48320013705b",
      "title": "Evoli - an official Amethyst showcase game",
      "content_text": "Today marks the first stable release of Evoli, an evolution-inspired simulation game made in Amethyst. We’ve successfully completed the MVP spec (and then some) as it was laid out back in February.",
      "url": "https://amethyst.rs/posts/evoli-an-official-amethyst-showcase-game",
      "tweet_url": "https://twitter.com/AmethystEngine/status/1135285103771471873",
      "date_published": "2019-06-02T00:00:00+00:00",
      "author": {
        "name": "Erlend Sogge Heggen",
        "url": "https://amethyst.rs/news"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "91ae37e0-3d4f-4c78-879d-47e635f8fbda",
      "title": "Gopher Server in Rust",
      "content_text": "I find Gopher really cool. I think it’s a really nice way to organize information into trees and hierarchies, and as we all know programmers can’t resist trees. So recently I took an interest in Gopher and started writing my own server.\n\nBut recently it’s been gaining traction; so we should provide a decent landscape for new gophers, full of oxidised servers. Since I started using Gopher more often, it’s beneficial for me if there’s more content out there. So I’m writing this blog post to walk you through how to write your own server. We’ll be doing this in Rust.",
      "url": "https://gkbrk.com/2019/06/gopher-server/",
      "date_published": "2019-06-02T01:00:00+01:00",
      "author": {
        "name": "Gokberk Yaltirakli",
        "url": "https://gkbrk.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "d937feae-59ca-4312-bd40-dc77317e441a",
      "title": "Rust for Machine Learning: SIMD, BLAS, and Lapack",
      "content_text": "I love Rust. But, as a data scientist, it’s still hard to use Rust on a daily basis. 90% of my programming these days is in Python.\n\nMy interest in Rust-based machine learning sparked several months ago. But, the key limitation I found was the lack of an ergonomic linear algebra library. There’s nalgebra and ndarray and a few others. Yet, I found none of them at the time ergonomic to work with, nor fast in comparison to writing the lower-level SIMD, BLAS, and Lapack code (I have picked up ndarray more in recent weeks and months).\n\nWhile inconvenient, a few months later, I’m glad I had to take things a step further. Rust is great for writing performant code. The resources for writing quite low-level mathematics operations in Rust are quite good. Using blas-src and lapack-src, as well as Rust’s built in SIMD functions, we can write fast and surprisingly portable Rust code. You can even run Rust on the GPU using, at least, the same underlying code.",
      "url": "https://www.erikpartridge.com/2019-03/rust-ml-simd-blas-lapack",
      "date_published": "2019-03-16T00:00:00+00:00",
      "author": {
        "name": "Erik Partridge",
        "url": "https://www.erikpartridge.com/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "5503b5d1-aef0-4bb5-8d51-c050b3d4fb1e",
      "title": "Writing a Raytracer in Rust: part 2",
      "content_text": "After I posted the previous post, one of my friends remarked, \"i like the way there is no raytracing in the first post its just faffing to get a window\". This is an entirely accurate diagnosis. But, right now, have a representation of a frame buffer as a container (probably a vector) of pixels, which we can pass to the window to render a frame. Now we need to figure out what we’re drawing to it!\n\nThere are a couple of tweaks I need to make to this - a representation of the framebuffer in linear float space, for example. But let’s come back to that. I want to trace rays.",
      "url": "https://canmom.github.io/programming/graphics/raytracer/rust-raytracer-part-2",
      "tweet_url": "https://twitter.com/CanonicMomentum/status/1134574213128491010",
      "date_published": "2019-05-27T00:00:00+00:00",
      "author": {
        "name": "bryn dickinson",
        "url": "https://canmom.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "2c6b8329-385a-4e19-ba91-4c84b1ebf4bc",
      "title": "How to Package Rust Applications Into Minimal Docker Containers",
      "content_text": "In the Go world, it is common to use docker’s multi-stage build feature to produce the app’s docker image in two stages. The first stage uses the golang image and is where we build the application into a statically-linked binary. Once built, we copy the binary into a scratch container in the second stage. The result is a rather small image that has nothing other than the application.\n\nI was looking to do the same thing for my Rust application. While I was at it, I also wanted to leverage the docker build cache to avoid having to download crates on every docker build.",
      "url": "https://alexbrand.dev/post/how-to-package-rust-applications-into-minimal-docker-containers/",
      "tweet_url": "https://twitter.com/alexbrand/status/1134825079131578369",
      "date_published": "2019-06-01T09:00:00-04:00",
      "author": {
        "name": "Alexander Brand",
        "url": "https://alexbrand.dev/"
      },
      "tags": [
        "DevOps and Deployment"
      ]
    },
    {
      "id": "6abeffb3-1d06-4642-9a7d-9c089fd1a030",
      "title": "Rust's Bindgen + Fuse in 2019",
      "content_text": "I will quickly show how I got bindgen (https://rust-lang.github.io/rust-bindgen) to generate the bindings to Fuse (libfuse) with the current stable1 release of Rust. By doing so, this should demonstrate how to bootstrap writing your own Fuse file system in Rust.\n\nI do realise that there are some crates that already exist that aid in making Fuse drivers in Rust, but this was more or less an excuse to also try out bindgen, which I don't believe those existing libraries utilise.",
      "url": "https://dev.to/kdrakon/rust-s-bindgen-fuse-in-2019-2e8l",
      "date_published": "2019-05-23T03:56:28+00:00",
      "author": {
        "name": "Sean Policarpio",
        "url": "https://dev.to/kdrakon"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "254cd239-bad6-4331-ad8e-fe00edfb834d",
      "title": "Announcing The Triage WG",
      "content_text": "The Release team is pleased to announce the triage working group , which will assume responsibility from the release team for triaging issues and pull requests in the rust-lang repositories as well as for diagnosing failures in Crater runs.",
      "url": "https://users.rust-lang.org/t/announcing-the-triage-wg/28909",
      "date_published": "2019-06-03T16:15:03+00:00",
      "author": {
        "name": "Dylan DPC",
        "url": "https://users.rust-lang.org/u/dylan.dpc"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "d325b708-16d9-45b7-a1d8-6f9e5a331da5",
      "title": "The Governance WG is going public",
      "content_text": "Hey all! Today we're happy to announce the Governance Working Group is going public. We've been spending the last couple weeks finding our bearings and structuring the working group.",
      "url": "https://blog.rust-lang.org/2019/06/03/governance-wg-announcement.html",
      "tweet_url": "https://twitter.com/rustlang/status/1135482908054106112",
      "date_published": "2019-06-03T00:00:00+00:00",
      "author": {
        "name": "The Rust Governance WG",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "f6a4f101-2fc4-4bb8-827c-c1e54d5dc877",
      "title": "Toward Piston 1.0",
      "content_text": "The Piston core is a set of libraries that defines a core abstraction for user inputs, window and event loop. If you take a look at the dependency graph in the README, it might look a bit scary: In this post I will go through each library, explain what it does and describe the status of stability.",
      "url": "http://blog.piston.rs/2019/06/01/toward-piston-1.0/",
      "date_published": "2019-06-01T00:00:00+00:00",
      "author": {
        "name": "Sven Nilsen",
        "url": "http://blog.piston.rs/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "2ebb2e7a-9b56-4fe3-8605-91c8deb394a9",
      "title": "dua: Disk Usage Analyzer",
      "content_text": "dua (-> Disk Usage Analyzer) is a tool to conveniently learn about the usage of disk space of a given directory. It's parallel by default and will max out your SSD, providing relevant information as fast as possible.",
      "url": "https://github.com/Byron/dua-cli",
      "date_published": "2019-06-01T00:00:00+00:00",
      "author": {
        "name": "Sebastian Thiel",
        "url": "https://github.com/Byron-TW"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "332be129-192f-46d1-aefc-c3765e5b1b56",
      "title": "Bzip2 in Rust - Basic infrastructure and CRC32 computation",
      "content_text": "I have started a little experiment in porting bits of the widely-used bzip2/bzlib to Rust. I hope this can serve to refresh bzip2, which had its last release in 2010 and has been nominally unmaintained for years.\n\nI hope to make several posts detailing how this port is done. In this post, I'll talk about setting up a Rust infrastructure for bzip2 and my experiments in replacing the C code that does CRC32 computations.",
      "url": "https://people.gnome.org/~federico/blog/bzip2-in-rust-basic-infra.html",
      "date_published": "2019-05-30T10:36:19-05:00",
      "author": {
        "name": "Federico Mena Quintero",
        "url": "https://people.gnome.org/~federico/blog/index.html"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "da8a8064-82b9-4b6f-a37e-d8560a353283",
      "title": "Poking the macOS IO Kit with Rust",
      "content_text": "How to fetch batteries information from the macOS APIs with Rust",
      "url": "https://svartalf.info/posts/2019-05-31-poking-the-macos-io-kit-with-rust/",
      "date_published": "2019-05-31T00:00:00+00:00",
      "author": {
        "name": "Nikita Kuznetsov",
        "url": "https://svartalf.info/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "d4eee998-344f-4863-9402-c8636ff8afc0",
      "title": "LambdaCore Programming Language",
      "content_text": "An interpreted language written in Rust inspired by the Lisp family of languages.",
      "url": "https://sites.google.com/view/lcore",
      "date_published": "2019-06-01T00:00:00+00:00",
      "author": {
        "name": "Pebaz",
        "url": "https://github.com/Pebaz"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "f94980b0-dfbb-421b-b861-16e158c7c0c2",
      "title": "Announcing j4rs",
      "content_text": "j4rs stands for “Java for Rust” and allows effortless calls to Java code, from Rust. Some time ago, on a need to call Java code from Rust, I started the j4rs project. The main idea was to implement a crate that would give the ability to its users to make calls to Java easily, so that they can benefit from the huge Java ecosystem.",
      "url": "https://astonbitecode.github.io/blog/post/j4rs_0.6.0/",
      "date_published": "2019-05-24T00:10:10+00:00",
      "author": {
        "name": "Aston",
        "url": "https://astonbitecode.github.io/blog"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "51cdd7b5-fed9-439c-b6f8-c50ee7f93ea2",
      "title": "Creating a 'paged' Vec in Rust",
      "content_text": "In this post I'll show you some code I wrote for paginating over a Vec collection in Rust. I needed this for a CLI tool I wrote which was meant to display all the vector entries retrieved from a remote server. In most cases, I expected to receive a lot of results, so to display them in a terminal efficiently, I couldn't reasonably render them all. I decided I would page the results.",
      "url": "https://dev.to/kdrakon/creating-a-paged-vec-in-rust-193l",
      "date_published": "2019-05-24T06:36:49+00:00",
      "author": {
        "name": "Sean Policarpio",
        "url": "https://dev.to/kdrakon"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c8b3f39e-8427-42db-93fa-ea196b956607",
      "title": "[blend_info] Rust and Blender",
      "content_text": "To explore a bit the Blender binary file format and provide tools to read and use them I started a new repository on Codeberg. Finally I want to read Blender files directly, and render them with my own renderer. But on my way to develop such a thing, there are many other possibilities, e.g. one could convert Blender files to a new file format, which does not only work for Blender and one single renderer, but would allow any Digital Content Creation (DCC) tool to save to, and any renderer to read from. Anyway, that's a complicated topic and let's start far simpler, by exploring Blender's file format. You get the source code of Blender for reverse engineering (create a debug version and single step through file related code with a debugger) and some Rust code (provided by me) to see what I have figured out so far...",
      "url": "https://www.janwalter.org/jekyll/blender/rust/blendinfo/2019/05/28/blend_info.html",
      "date_published": "2019-05-28T00:00:00+00:00",
      "author": {
        "name": "Jan Walter",
        "url": "https://www.janwalter.org/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "834cc4e5-1dd6-446d-966e-8a869ff45f79",
      "title": "battop: top for your laptop battery",
      "content_text": "battop is an interactive viewer, similar to top, htop and other *top utilities, but about batteries installed in your notebook.",
      "url": "https://github.com/svartalf/rust-battop",
      "date_published": "2019-05-30T00:00:00+00:00",
      "author": {
        "name": "Nikita Kuznetsov",
        "url": "https://svartalf.info/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "b3ca84bd-3574-43f7-aef3-988cbc6389a4",
      "title": "Update on await syntax",
      "content_text": "In my previous post I said that the lang team would be making our final decision about the syntax of the await operator in the May 23 meeting. That was last Thursday, and we did reach a decision. In brief, we decided to go forward with the preliminary proposal I outlined earlier: a postfix dot syntax, future.await. For more background, in addition the previous post on my blog, you can read this write up about some of the trade offs from April.",
      "url": "https://boats.gitlab.io/blog/post/await-decision-ii/",
      "tweet_url": "https://twitter.com/withoutboats/status/1133379255390179330",
      "date_published": "2019-05-28T00:00:00+00:00",
      "author": {
        "name": "boats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ec3d6230-6b29-4459-8a62-c40a8ef08430",
      "title": "Calling a Go Library from Rust: A Case Study with SQIP",
      "content_text": "A brief run-down of how to wrap a Go library in a CGO FFI to enable its functions to be called by Rust.",
      "url": "https://blog.arranfrance.com/post/cgo-sqip-rust/",
      "tweet_url": "https://twitter.com/arranf/status/1133390003789324288",
      "date_published": "2019-05-27T00:00:00+00:00",
      "author": {
        "name": "Arran France",
        "url": "https://blog.arranfrance.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "cbb3c7f8-1ff0-4a30-b924-08c79542c259",
      "title": "Eight million pixels and counting – A look at pathfinder",
      "content_text": "This post is about pathfinder, a GPU vector graphics renderer written in Rust by Patrick Walton as part of his work in the emerging technologies team at Mozilla. Pathfinder can be used to render glyph atlases and larger scenes such as SVG paths. The two use cases are handled a bit differently and in this post I will be focusing on the latter.",
      "url": "https://nical.github.io/posts/a-look-at-pathfinder.html",
      "tweet_url": "https://twitter.com/nicalsilva/status/1133663927064244224",
      "date_published": "2019-05-28T00:00:00+00:00",
      "author": {
        "name": "Nical",
        "url": "https://nical.github.io/index.html"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "4e723122-0527-43dc-b95b-ff4fd5cd5d28",
      "title": "Creating a Static HTTP Server with Rust – Part 2",
      "content_text": "In this series, we are creating a basic static HTTP 1.0 server with Rust. If you haven’t seen Part 1 yet, go do that first. At the end of Part 2, our server will do the following: Read and serve files from a predefined directory on the host server, Generate appropriate HTTP responses to incoming requests, Log information about the response to standard output.",
      "url": "http://concisecoder.io/2019/05/27/creating-a-static-http-server-with-rust-part-2/",
      "tweet_url": "https://twitter.com/concisecoder/status/1133001304383606787",
      "date_published": "2019-05-27T13:25:29+00:00",
      "author": {
        "name": "Levi Payne",
        "url": "http://concisecoder.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "4d542211-c76e-41b8-b9fd-d008c06ed937",
      "title": "Hawk-Rust Series: Actuation of Raspberry Pi Camera",
      "content_text": "In this project, we have used Raspberry Pi and its camera to authenticate whether the RFID card is punched by the card’s owner or not. HAWK is a Rust based Image Recognition project, which implements a two-factor authentication by using the RFID card for user identification and Image for user validation. In this blog, I’ll show you how to trigger RPi’s camera using Rust Programming Language. To know more about HAWK click here",
      "url": "https://blog.knoldus.com/hawk-rust-series-actuation-of-raspberry-pi-camera/",
      "tweet_url": "https://twitter.com/pawanbisht62/status/1132874137536348167",
      "date_published": "2019-05-23T08:51:49+00:00",
      "author": {
        "name": "Pawan Bisht",
        "url": "https://blog.knoldus.com/author/bishtpawan/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "0cc7297b-a14f-443d-a02a-073685c663a3",
      "title": "Programming Servo: Zen and the art of removing blocks from your system",
      "content_text": "It all started with a simple issue, a “quick fix”, or so I thought.",
      "url": "https://medium.com/@polyglot_factotum/programming-servo-zen-and-the-art-of-removing-blocks-from-your-system-51c1b7d404e3",
      "date_published": "2019-05-26T09:41:02.544+00:00",
      "author": {
        "name": "Gregory Terzian",
        "url": "https://medium.com/@polyglot_factotum"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "fe48ce77-ad77-4983-a08d-1fb9cf951bb1",
      "title": "Blockchain-Flavored WASI",
      "content_text": "General purpose computation on the blockchain using Web Assembly System Interface (WASI).",
      "url": "https://medium.com/oasislabs/blockchain-flavored-wasi-50e3612b8eba",
      "date_published": "2019-05-23T04:07:55.019+00:00",
      "author": {
        "name": "Nick Hynes",
        "url": "https://medium.com/@nhynes_"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "61255817-6eef-43ce-9eea-24a8aedbd9f2",
      "title": "Writing a Compiler in Rust",
      "content_text": "During my final term at UWaterloo I took the CS444 compilers class with a project to write a compiler from a substantial subset of Java to x86, with a language and two teammates of your choice. My group of three chose to write our compiler in Rust and it was a fun experience. We spent time coming to design decisions that worked out really well and used Rust’s strengths. Our compiler ended up being around 6800 lines of Rust and I personally put in around 60 hours of solid coding and more on code review and design. In this post I’ll go over some of the design decisions we made and some thoughts on what it was like using Rust.",
      "url": "http://thume.ca/2019/04/18/writing-a-compiler-in-rust/",
      "tweet_url": "https://twitter.com/trishume/status/1131324986361372673",
      "date_published": "2019-04-18T00:00:00+00:00",
      "author": {
        "name": "Tristan Hume",
        "url": "http://thume.ca/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "ecccd5a6-53e0-4e7a-9ece-f02450f3eb2f",
      "title": "Rebuffing the Attack of the Clones",
      "content_text": "I left a comment on HN about how I teach new users not to clone, and someone asked me if I’d written more, so here we go!\n\nWhen new users are writing Rust code, it’s reasonably common to “fight with the borrow checker”. I personally find this to be quite a misnomer, as it is not a fight so much as a misunderstanding of the nature of Rust’s semantics. In an attempt to make the errors go away, users will understandably take the path of least resistance, according to the docs they’ve got. They dutifully read up, and eventually land on the clone method. This makes the errors go away! Great! Except if you were my newbie, in the code review I’d tell you clone is banned unless you can tell me why you need it.",
      "url": "https://thenewwazoo.github.io/clone.html",
      "date_published": "2019-05-21T00:00:00+00:00",
      "author": {
        "name": "Brandon Matthews",
        "url": "https://thenewwazoo.github.io/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "53c0e6e9-a95e-4509-b70a-74e945e74e92",
      "title": "Announcing Rust 1.35.0",
      "content_text": "The highlight of this release is the implementation of the FnOnce, FnMut, and Fn closure traits for Box<dyn FnOnce>, Box<dyn FnMut>, and Box<dyn Fn> respectively. Additionally, closures may now be coerced to unsafe function pointers. The dbg! macro introduced in Rust 1.32.0 can now also be called without arguments. Moreover, there were a number of standard library stabilizations. Read on for a few highlights, or see the detailed release notes for additional information.",
      "url": "https://blog.rust-lang.org/2019/05/23/Rust-1.35.0.html",
      "tweet_url": "https://twitter.com/rustlang/status/1131658946111000576",
      "date_published": "2019-05-23T00:00:00+00:00",
      "author": {
        "name": "The Rust Release Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "635d3c1f-b71e-4883-b72e-52efe1ab01d0",
      "title": "Announcing Mockiato - A strict, yet friendly mocking library for Rust 2018",
      "content_text": "We’re proud to announce mockiato! For the last few months, we tackled the issue of creating a usable mocking library. Our primary goals were: Ease of use: The mocks are written in idiomatic Rust and don’t rely on custom macro syntax. Maintainability: The entire code base strives to follow the rules of Clean Code and Clean Architecture as specified by Robert C. Martin.  Strict expectation enforcement: Mockiato catches unexpected behavior as soon as it happens instead of returning default values.",
      "url": "https://blog.myelin.ch/2019/05/24/mockiato-announcement.html",
      "date_published": "2019-05-24T00:00:00+00:00",
      "author": {
        "name": "Jeremy, Ruben, Jan, Mathias",
        "url": "https://blog.myelin.ch/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "c12cd1dc-8523-4caf-add8-4ba0322a3cb6",
      "title": "Putting the stack back into Stacked Borrows",
      "content_text": "Less than a month ago, I announced Stacked Borrows 2. In particular, I hoped that that version would bring us closer to proper support for two-phase borrows. Turns out I was a bit too optimistic! Last week, @Manishearth asked on Zulip why Miri rejected a certain program, and it turned out that the issue was related to two-phase borrows: in combination with interior mutability, behavior wasn’t always what we wanted it to be. So, I went back to the drawing board and tried to adjust Stacked Borrows.\n\nIn the end, I decided to give up on “proper” support for two-phase borrows for now, which I explained here. But I also made some tweaks to Stacked Borrows that affect all accesses (not just two-phase borrows), and that’s what this post is about. I am referring to this as “Stacked Borrows 2.1”.",
      "url": "https://www.ralfj.de/blog/2019/05/21/stacked-borrows-2.1.html",
      "date_published": "2019-05-21T00:00:00+00:00",
      "author": {
        "name": "Ralf Jung",
        "url": "https://www.ralfj.de/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "63fcd49a-f8d8-46f4-92dd-58cb8d77082c",
      "title": "Speeding up Ruby MRI with Rust",
      "content_text": "Let me start by saying I really like Ruby. I tend to agree with the statement saying Ruby is optimized for developer happiness. However, nothing comes for free. Programming ecstasy is a double-edged sword and writing slow Ruby is as easy as it is pleasant.",
      "url": "https://medium.com/@flixdescteaux/speeding-up-ruby-mri-with-rust-a7c914d2f9d0",
      "date_published": "2019-05-21T13:58:31.362+00:00",
      "author": {
        "name": "Félix Descôteaux",
        "url": "https://medium.com/@flixdescteaux"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "bab17ec7-d45f-40fa-963b-10c3085fa7bf",
      "title": "Here's My Type, So Initialize Me Maybe (mem::uninitialized is deprecated)",
      "content_text": "Rust's infamous mem::uninitialized method has been deprecated in today's nightly build. Its replacement, MaybeUninit, has been stabilized. If you are using the former, you should migrate to using the latter as soon as possible (probably when it hits stable in 6 weeks). This was done because it was determined that mem::uninitialized was fundamentally broken, and could not be made to work.",
      "url": "https://gankro.github.io/blah/initialize-me-maybe/",
      "tweet_url": "https://twitter.com/Gankro/status/1130914262631821312",
      "date_published": "2019-05-21T00:00:00+00:00",
      "author": {
        "name": "Alexis Beingessner",
        "url": "https://gankro.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4dfd194e-9cc6-4b75-b2f4-8900d8fdebcd",
      "title": "dtolnay/case-studies: Analysis of various tricky Rust code",
      "content_text": "This repository showcases some examples of tricky Rust code that I have encountered during my years working with a variety of advanced macro libraries in Rust (my own and others').",
      "url": "https://github.com/dtolnay/case-studies",
      "date_published": "2019-05-21T00:00:00+00:00",
      "author": {
        "name": "David Tolnay",
        "url": "https://github.com/dtolnay"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "db12537e-42d3-4bba-9c68-7adc1afec917",
      "title": "mini-aio: the new async IO library for Rust",
      "content_text": "During my work at Adgear, I’ve been working for a while on an async IO library for Rust. This post will present this new library. This library takes a very different approach than most other async IO libraries in Rust: it is actually inspired by the Pony programming language. So, it does not use futures, it does not use async/await: it just provides simple trait",
      "url": "http://antoyo.ml/mini-aio-new-async-io-library",
      "date_published": "2019-05-20T00:00:00+00:00",
      "author": {
        "name": "Antoni Boucher",
        "url": "http://antoyo.ml/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "812b46b0-ec10-45f3-9fc6-4aaa2ae2534e",
      "title": "Polyglot Projects",
      "content_text": "An exploration of how I wrote a C++ binding API for my Rust library.",
      "url": "https://myrrlyn.net/blog/misc/polyglot-projects",
      "date_published": "2019-05-20T00:00:00+00:00",
      "author": {
        "name": "Alexander Payne",
        "url": "https://myrrlyn.net/blog"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "5c93aa16-acee-46d1-8a08-462d9ce7c09f",
      "title": "The 2019 Rust Event Lineup",
      "content_text": "We're excited for the 2019 conference season, which we're actually late in writing up. Some incredible events have already happened! Read on to learn more about all the events occurring around the world, past and future.",
      "url": "https://blog.rust-lang.org/2019/05/20/The-2019-Rust-Event-Lineup.html",
      "date_published": "2019-05-20T00:00:00+00:00",
      "author": {
        "name": "Rust Community Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "feed408e-361c-4a9c-9432-5729aed1e789",
      "title": "powerset-enum - anonymous enum and a PoC for how that feature can be used to improve Rust's error handling",
      "content_text": "My crate offers a powerset enum - an enum that can be parametrized to any subset of it's variants. I also included a macro for doing this parametrization by providing the types of the variants - so for example Error![std::io::Error, serde_json::Error] would generate a subset of the enum that can only have IO and JSON parsing errors.",
      "url": "https://www.reddit.com/r/rust/comments/bqn9e6/announcing_the_powersetenum_crate_a_poor_mans/",
      "date_published": "2019-05-20T08:50:00+10:00",
      "author": {
        "name": "someboddy",
        "url": "https://www.reddit.com/user/somebodddy/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "d6fe8e42-6394-4db9-858e-e572740e0915",
      "title": "Scala Developer Journey into Rust - Part 5: Domain Models",
      "content_text": "Rust is one of the major programming languages that’s been getting popular in recent years. It has many advanced high level language features like Scala. This made me interested to learn Rust. So in this next series of blogs I will share my experience with Rust from a Scala developer point of view. I would like to explore how these two language approach things. I would like to explore the similarities and their differences.\n\nThis is fifth post in the series. In this post, I will be talking about domain models.",
      "url": "http://blog.madhukaraphatak.com/rust-scala-part-5/",
      "tweet_url": "https://twitter.com/madhukaraphatak/status/1130166912615215109",
      "date_published": "2019-05-19T00:00:00+00:00",
      "author": {
        "name": "Madhukara Phatak",
        "url": "http://madhukaraphatak.com/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "eedb81ef-265f-4dc2-a1d9-559d2d68594d",
      "title": "Rust In Avast",
      "content_text": "When I joined Avast about a year and a half ago, I did it because of two things:  I wanted to work on interesting problems and I wanted to share the Wisdom of Rust with few more people.\n\nOriginally, I was hired because of my experience with writing software for „bigger embedded“ (think a home router or Raspberry PI ‒ it runs Linux kernel, has a shell, but the file system is a bad joke, your libc has bunch of weird bugs features, you really need to think twice not to waste RAM needlessly and you have to cross-compile), low-level networking knowledge and C++.\n\nBut I don’t enjoy writing C++ (not speaking about the libc features). And I have other skills I like to practice too. So I would drop an occasional comment about how this or that would be better done in Rust. I’ve done internal courses and workshops about Rust for whoever was interested, in the hope more people would start asking to be allowed to do stuff in Rust and I could participate in such projects.",
      "url": "https://vorner.github.io/2019/05/19/rust-in-avast.html",
      "date_published": "2019-05-19T00:00:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e8a7784f-8334-4e7a-b912-a6c3cfbb5522",
      "title": "Rust for OOP - Project Management",
      "content_text": "The basics of Rust project layout are simple, and common to many other languages. You have the artifacts of your project. The basics artifacts are executables(binaries) and libraries. You use binaries whenever you want to produce a runnable application. For reusable code, use libraries. Nothing remarkable in Rust. In my projects, I prefer to write almost everything inside libraries, as one can never know when he will reuse a piece of code. Usually, I want my executable to be a thin wrapper around my libraries. Rust has a uniform name for a single library or binary: crate. Meaning crate is either an executable or a library. Creating either a library or a binary crate is straightforward.",
      "url": "https://oribenshir.github.io/afternoon_rusting/blog/project-management",
      "tweet_url": "https://twitter.com/oribenshir/status/1130168955732148224",
      "date_published": "2019-05-18T00:00:00+00:00",
      "author": {
        "name": "Ori Ben-Shir",
        "url": "https://oribenshir.github.io/afternoon_rusting/index.html"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "fdf7f732-0af5-4031-9135-4b1db1ebfc28",
      "title": "Shell Completions in Pure Rust",
      "content_text": "Custom completion behavior is configured using a special bash built-in called complete. complete can be used to designate either a bash function or any other command as the completion script for a particular command. When the user requests completions for a command, complete will run specified code, passing in as args information about what the user has already typed, and expecting as output the completion suggestions. Typically these completion scripts are written in bash, but we’ll look at how it is possible to write them in Rust.",
      "url": "https://www.joshmcguigan.com/blog/shell-completions-pure-rust/",
      "date_published": "2019-05-12T00:00:00+00:00",
      "author": {
        "name": "Josh Mcguigan",
        "url": "https://www.joshmcguigan.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "ef3c5cdb-f130-4211-83a1-1550ea15d73f",
      "title": "Running WebAssembly on the Kernel",
      "content_text": "This is the story of our journey running Wasmer on the Linux kernel.",
      "url": "https://medium.com/wasmer/running-webassembly-on-the-kernel-8e04761f1d8e",
      "date_published": "2019-05-16T22:37:36.924+00:00",
      "author": {
        "name": "Heyang Zhou",
        "url": "https://medium.com/@losfair"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "568fdc54-427f-47be-8849-dd040bafe8dd",
      "title": "Momo · Get Back Some Compile Time From Monomorphization",
      "content_text": "Monomorphization has one problem (apart from being a ridiculous word that I’ll probably spell wrong every time): It generates rather a lot of code, bloating binary size and potentially pessimizing execution cache usage. Often, generics aren’t really needed for speed, but for ergonomics: Library code might want to present an easy-to-use generic interface that will automate some conversions. However, this often means that almost each user gets their own version of the code, leading to the aforementioned bloat (case in point: Earlier clap versions were notorious for adding hundreds of kilobytes to the binary size – for a simple command line parser).",
      "url": "https://llogiq.github.io/2019/05/18/momo.html",
      "tweet_url": "https://twitter.com/llogiq/status/1129509086674989057",
      "date_published": "2019-05-18T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "a534602d-8f20-4c12-800d-adbab4f62ca0",
      "title": "My Project to Write Embedded OS in Rust",
      "content_text": "My experience writing embedded OS in Rust. The target architecture is Arm Cortex-M series. My application is running on Nucleo-F4291ZI board and QEMU. Currently, I implemented those functionality: Round-robin scheduler to schedule processes running in Thread mode, SVC interfaces to call kernel function for user processes (e.g. print messages using USART, sleep to wait for interrupts), Move to sleep mode to wait for interrupt when there is no executable processes. There are only a few functionality yet, but the core structure is being completed, I think.",
      "url": "https://medium.com/@garasubo/my-project-to-write-embedded-os-in-rust-eadf83f5ee37",
      "date_published": "2019-05-17T23:01:00.842+00:00",
      "author": {
        "name": "garasubo (ガラスボー)",
        "url": "https://medium.com/@garasubo"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "1c9745cb-ea4b-4d95-81b4-c51c4a217602",
      "title": "Image processing experiments (1)",
      "content_text": "I implemented an image processing experiment in Rust and was positively surprised.",
      "url": "https://toswak.net/blog/image-processing-experiments-1-rust/",
      "tweet_url": "https://twitter.com/Spitzfaust/status/1129854593968562177",
      "date_published": "2019-05-18T00:00:00+00:00",
      "author": {
        "name": "Tobias Watzek",
        "url": "https://toswak.net/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "2d643e8c-a753-49c4-b18a-3323bb783259",
      "title": "Using Rust to Scale Elixir for 11 Million Concurrent Discord Users",
      "content_text": "Over the last year, the Backend Infrastructure team at Discord was hard at work improving the scalability and performance of our core real-time communications infrastructure. One big project we undertook was changing how we update the Member List.",
      "url": "https://blog.discordapp.com/using-rust-to-scale-elixir-for-11-million-concurrent-users-c6f19fc029d3",
      "date_published": "2019-05-17T15:42:16.633+00:00",
      "author": {
        "name": "Matt Nowack",
        "url": "https://blog.discordapp.com/@discord.matt"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "009c05c5-89b2-4519-9133-c46988d45a17",
      "title": "Rust – Arrays? Make chains, not concat!",
      "content_text": "f your application needs to iterate over a bunch of items from different sources or arrays, someone with C/C++ background might copy all items into a single vector and iterate this vector. This strategy will cause high costs in terms of allocating heap memory for the consecutive vector buffer. Instead, keep the data where it is, and chain it together to form an iterator over a virtual array. The following Rust code demonstrates the chaining of multiple arrays, forming a single itertator, without any additional allocation of vector buffer in heap. ",
      "url": "https://frehberg.com/2019/05/rust-arrays-make-chains-no-concat/",
      "date_published": "2019-05-16T16:59:10+00:00",
      "author": {
        "name": "Frank Rehberger",
        "url": "https://frehberg.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "64f26c72-e208-4900-90b5-cd1c61ec450b",
      "title": "Evaluating pipelined rustc compilation",
      "content_text": "Recently landed in nightly is the ability for Cargo to execute rustc in a “pipelined” fashion which has the promise of faster build times across the ecosystem. This support is turned off by default and the Cargo team is interested to gather more data and information about this feature, and that’s where you come in! If you’re interested in faster compiles, we’re interested in getting your feedback on this feature!",
      "url": "https://internals.rust-lang.org/t/evaluating-pipelined-rustc-compilation/10199",
      "tweet_url": "https://twitter.com/nikomatsakis/status/1129420748043554821",
      "date_published": "2019-05-17T16:09:30+00:00",
      "author": {
        "name": "Alex Crichton",
        "url": "https://internals.rust-lang.org/u/alexcrichton"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "0369c538-0c12-4b33-9211-fd410b2c38da",
      "title": "Zero Cost Abstractions",
      "content_text": "The idea of a zero cost abstraction is very important to certain programming languages, like Rust and C++, which intend to enable users to write programs with excellent performance profiles with relatively little effort. Since this idea is fundamental to the design of Rust and my work, I want to investigate, for a moment, what exactly a zero cost abstraction even is.",
      "url": "https://boats.gitlab.io/blog/post/zero-cost-abstractions/",
      "tweet_url": "https://twitter.com/withoutboats/status/1129058386845339648",
      "date_published": "2019-05-16T00:00:00+00:00",
      "author": {
        "name": "boats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "27b12f19-d9cb-4ac4-b150-14398ad2f7da",
      "title": "Terraform: generate 3-d models of geographic terrain",
      "content_text": "I just spent the past two weeks building a GUI Rust app to help you generate a 3-d model of terrain from around the world, that can then be used for 3-d printing, rendering, or whatever you like.",
      "url": "https://jaredforsyth.com/posts/intoducing-terraform/",
      "tweet_url": "https://twitter.com/jaredforsyth/status/1129040515440238593",
      "date_published": "2019-05-16T00:00:00+00:00",
      "author": {
        "name": "Jared Forsyth",
        "url": "https://jaredforsyth.com/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "e25cac18-f4ca-4872-babe-c4614327e076",
      "title": "How to start a Rust Chat App",
      "content_text": "In this post, we will learn how to build simple chat app in your local machine with Rust and simple JavaScript.",
      "url": "https://www.steadylearner.com/blog/read/How-to-start-Rust-Chat-App",
      "date_published": "2019-05-16T00:00:00+00:00",
      "author": {
        "name": "Steadylearner",
        "url": "https://www.steadylearner.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "3f754573-640a-4f2c-8c98-bcb1d2727bf9",
      "title": "Cross compiling and statically linking against Rust libraries",
      "content_text": "A few years ago, mainly due to performance reasons, we started rewriting specific back-end services from Python to Rust, with great success. Now, for the sake of ease of development and testing, we are exploring the idea of moving parts of our C/C++ code base to Rust, too.\n\nIn order to do so, instead of re-writing everything in one swoop, we decided to try integrating Rust into our existing code base.\n\nFollowing is a summary of our experiments, and a skeleton for writing a Rust library and calling it from a C/C++ application.",
      "url": "https://medium.com/csis-techblog/cross-compiling-and-statically-linking-against-rust-libraries-2c02ee2c01af",
      "date_published": "2019-05-16T10:29:25.251+00:00",
      "author": {
        "name": "Tiago Seco",
        "url": "https://medium.com/@TiagoSeco"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e50d6f14-3323-48d5-b85b-e8302eddce92",
      "title": "Build Rust environment for ESP32",
      "content_text": "What is it? Recently I heard that LLVM for xtensa is working, so I tried to build Rust for ESP32.",
      "url": "http://quickhack.net/nom/blog/2019-05-14-build-rust-environment-for-esp32.html",
      "tweet_url": "https://twitter.com/nom4476/status/1128839960914583558",
      "date_published": "2019-05-14T00:00:00+09:00",
      "author": {
        "name": "Yoshinari Nomura",
        "url": "http://quickhack.net/nom/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "93fbaebd-c627-46f3-89ea-1469e58ecd22",
      "title": "Papers on Rust",
      "content_text": "With these crates in a basic but usable state, I went to write papers, Rust code to gather data from the above sources, and inject them into Wikidata. I wrote a Rust trait to represent a generic source, and then wrote adapter structs for each of the sources. Finally, I added some wrapper code to take a list of adapters, query them about a paper, and update Wikidata accordingly.",
      "url": "http://magnusmanske.de/wordpress/?p=617",
      "tweet_url": "https://twitter.com/MagnusManske/status/1128949996584361984",
      "date_published": "2019-05-16T10:06:00+00:00",
      "author": {
        "name": "Magnus Manske",
        "url": "http://blog.magnusmanske.de/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "e710999e-81b7-433e-a2cd-d1968a619567",
      "title": "Rust - 4+ years later",
      "content_text": "A quick tour through my 4+ years with Rust.",
      "url": "https://fnordig.de/2019/05/15/rust-4-years-later/",
      "tweet_url": "https://twitter.com/badboy_/status/1128632116277927936",
      "date_published": "2019-05-15T00:00:00+00:00",
      "author": {
        "name": "Jan-Erik Rediger",
        "url": "https://fnordig.de/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "1bda7394-787a-42d1-9733-2b503a611ffb",
      "title": "4 years of Rust",
      "content_text": "On May 15th, 2015, Rust was released to the world! After 5 years of open development (and a couple of years of sketching before that), we finally hit the button on making the attempt to create a new systems programming language a serious effort!",
      "url": "https://blog.rust-lang.org/2019/05/15/4-Years-Of-Rust.html",
      "tweet_url": "https://twitter.com/rustlang/status/1128665720819212291",
      "date_published": "2019-05-15T00:00:00+00:00",
      "author": {
        "name": "The Rust Core Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "0e504089-5eaf-4cb5-a22d-04bb587e54f9",
      "title": "Rust – Handling Executables and their Debug-Symbols",
      "content_text": "This post is about compiling Rust-code, the executables, the handling of the corresponding debug symbols and core-files. It highlights the importance of debug-symbols for debugging and how to split them of the binary before shipping to customer.",
      "url": "https://frehberg.com/2019/05/rust-handling-executables-and-their-debug-symbols/",
      "date_published": "2019-05-14T22:24:55+00:00",
      "author": {
        "name": "Frank Rehberger",
        "url": "https://frehberg.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "6715c2d9-9049-40c2-bc29-cca235bde059",
      "title": "Creating C/C++ APIs in Rust",
      "content_text": "Rust is an amazing language with an even better ecosystem. Many design decisions of Rust make it a great fit to add new functionality to existing C/C++ systems or gradually replace parts of those systems!\n\nWhen I tried to make a C++ API for a Rust library, I found that binding from C/C++ to Rust is better documented and has a smoother experience than binding from Rust to C/C++.",
      "url": "https://karroffel.gitlab.io/post/2019-05-15-rust/",
      "tweet_url": "https://twitter.com/karroffel/status/1128727938432688130",
      "date_published": "2019-05-15T00:00:00+00:00",
      "author": {
        "name": "Thomas Herzog",
        "url": "https://karroffel.gitlab.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "88afb6a5-3414-407a-9ecc-4e0179e1295f",
      "title": "Rust for OOP - Series Introduction",
      "content_text": "While working on my simple chat program, I’ve identified some aspects of Rust, which mastering them will probably turn my code to be more idiomatic. These aspects will turn into a blog series. I’m far from mastering those aspects of Rust, but I’ll share what I’ve learned so far. And how I’ve used it in my chat project.",
      "url": "https://oribenshir.github.io/afternoon_rusting/blog/rust-for-oop",
      "tweet_url": "https://twitter.com/oribenshir/status/1128730024926904320",
      "date_published": "2019-05-15T00:00:00+00:00",
      "author": {
        "name": "Ori Ben-Shir",
        "url": "https://oribenshir.github.io/afternoon_rusting/index.html"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "3eb814d5-d467-4e34-ba31-e0a55da4da36",
      "title": "Introducing Packem: a super fast experimental bundler written in Rust",
      "content_text": "Packem is an experimental precompiled JavaScript module bundler primarily implemented in Rust. It can also handle a variety of other file types like YAML/TOML, fragment shader files and a lot more.",
      "url": "https://medium.freecodecamp.org/introducing-packem-a-super-fast-experimental-bundler-written-in-rust-e981af875517",
      "date_published": "2019-05-15T16:36:27.451+00:00",
      "author": {
        "name": "Bukhari Muhammad",
        "url": "https://medium.freecodecamp.org/@bukharim96"
      },
      "tags": [
        "Web and Network Services",
        "Tools and Applications"
      ]
    },
    {
      "id": "ad13d235-c5b0-454f-b35c-891006484207",
      "title": "Rust+GNOME Hackfest #5",
      "content_text": "Last week, I went to the fifth Rust+GNOME hackfest which was in Berlin again. My goal for this hackfest was to fix this issue I opened nearly three years ago. The problem is that sometimes you want to create a widget or an object and set some properties at construction time. This might be needed when you want to set construct-only properties. For instance, you might want to create a webkit2gtk::WebView with a WebContext and a UserContentManager at the same time. That’s why a constructor was manually written for this use case.",
      "url": "http://antoyo.ml/rust-gnome-hackfest-berlin",
      "date_published": "2019-05-14T00:00:00+00:00",
      "author": {
        "name": "Antoni Boucher",
        "url": "http://antoyo.ml/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "294ff4dd-a217-4d15-a378-a2ef10f6aae8",
      "title": "Announcing Rust 1.34.2",
      "content_text": "The Error::type_id method was recently stabilized as part of Rust 1.34.0. This point release destabilizes it, preventing any code on the stable and beta channels to implement or use it, awaiting future plans that will be discussed in issue #60784.",
      "url": "https://blog.rust-lang.org/2019/05/14/Rust-1.34.2.html",
      "tweet_url": "https://twitter.com/rustlang/status/1128296767169138690",
      "date_published": "2019-05-14T00:00:00+00:00",
      "author": {
        "name": "The Rust Release Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "5d09aa3e-28c5-4535-9d07-cc3cafbb2ca2",
      "title": "State of Machine Learning in Rust",
      "content_text": "Every once in a while this topic comes up on a social media or Rust user channel. I’d like to describe briefly the way I see where things are going by a little bit of history as well as some information about existing flux of Machine Learning/Deep Learning frameworks and major recent trends.",
      "url": "https://ehsanmkermani.com/2019/05/13/state-of-machine-learning-in-rust/",
      "tweet_url": "https://twitter.com/ehsanmok/status/1128106240943374336",
      "date_published": "2019-05-14T00:48:37+00:00",
      "author": {
        "name": "Ehsan M. Kermani",
        "url": "https://ehsanmkermani.com/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "593aaa73-c49a-4b38-99c7-ce2a1070723d",
      "title": "Security advisory for the standard library",
      "content_text": "The Rust team was recently notified of a security vulnerability affecting manual implementations of Error::type_id and their interaction with the Error::downcast family of functions in the standard library. If your code does not manually implement Error::type_id your code is not affected.",
      "url": "https://blog.rust-lang.org/2019/05/13/Security-advisory.html",
      "tweet_url": "https://twitter.com/rustlang/status/1127961617289875458",
      "date_published": "2019-05-13T00:00:00+00:00",
      "author": {
        "name": "The Rust Core Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "8922aaed-cc0e-482a-8422-d7dceec6dac3",
      "title": "Zemeroth v0.5: ggez, WASM, itch.io, visuals, AI, campaign, tests",
      "content_text": "Zemeroth is a turn-based hexagonal tactical game written in Rust. You can download precompiled v0.5 binaries for Windows, Linux, and macOS. Also, now you can play an online version (read more about it in the \"WebAssembly version\" section).",
      "url": "https://ozkriff.github.io/2019-05-13--devlog-zemeroth-v0-5/",
      "tweet_url": "https://twitter.com/ozkriff/status/1127977478746669056",
      "date_published": "2019-05-13T00:00:00+00:00",
      "author": {
        "name": "Andrey Lesnikov",
        "url": "https://ozkriff.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "0650fe18-12a0-40f4-916f-1a5c2464b9d5",
      "title": "Manticore Operating System",
      "content_text": "Manticore is a research operating system, written in Rust, with the aim of exploring the parakernel OS architecture.\n\nThe OS is increasingly a bottleneck for server applications that want to take maximum advantage of the hardware. Many traditional kernel interfaces (such as in POSIX) were designed when I/O was significantly slower than the CPU. However, today I/O is getting faster, but single-threaded CPU performance has stagnated. For example, a 40 GbE NIC can receive a cache-line sized packet faster than the CPU can access its last-level cache (LLC), which makes it tricky for an OS to keep up with packets arriving from the network. Similarly, non-volatile memory (NVM) access speed is getting closer to DRAM speeds, which challenges OS abstractions for storage.\n\nTo address this OS bottleneck, server applications are increasingly adopting kernel-bypass techniques. For example, the Seastar framework is an OS implemented in userspace, which implements its own CPU and I/O scheduler, and bypasses the Linux kernel as much as it can. Parakernel is an OS architecture that eliminates many OS abstractions (similar to exokernels) and partitions hardware resources (similar to multikernels) to facilitate high-performance server application with increased application-level parallelism and predictable tail latency.",
      "url": "https://github.com/manticoreos/manticore",
      "date_published": "2019-05-13T00:00:00+00:00",
      "author": {
        "name": "Pekka Enberg",
        "url": "https://github.com/manticoreos"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "a0770f01-6980-48bd-bd23-cdee98b5c16a",
      "title": "Optional parameters in Rust",
      "content_text": "Many languages feature “optional” parameters to function arguments: if you provide a value, it will be used, but if you don’t, a default value will be used instead. How to do that in Rust? Well, in Rust you have to provide all the parameters a function requests. You can, however, use “Option”s to do two things: make their usage not mandatory, provide a default value.",
      "url": "http://blog.keiruaprod.fr/2019/05/11/optional-parameters-in-rust/",
      "tweet_url": "https://twitter.com/clemkeirua/status/1127291507554308096",
      "date_published": "2019-05-11T19:16:47+00:00",
      "author": {
        "name": "Clement Keirua",
        "url": "http://www.keiruaprod.fr/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a0a1c63f-18d2-440f-8568-0cdd5899afe3",
      "title": "Generating a GNOME library using gir crate",
      "content_text": "In this tutorial, we’ll see how to generate a GNOME library using the gir crate. A few things to note first: It only works on GObject-based libraries.  You need .gir files.\n\nA little explanation about those requirements: the gir crate needs .gir files to generate the library API. You can generally find them alongside the library header files (as you can see here for example, look for “.gir”).\n\nThe .gir files “describes” the library API (objects, arguments, even ownership!). This is where the gir crate comes in: it reads those .gir files and generates the Rust crates from them. You can learn more about the GIR format here.",
      "url": "https://gtk-rs.org/docs-src/tutorial/gir_tutorial",
      "date_published": "2019-05-11T00:00:00+00:00",
      "author": {
        "name": "Gtk-rs",
        "url": "https://gtk-rs.org/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "154c7165-f0e5-46e1-96e7-c8338485549f",
      "title": "What’s the best IDE for developing in Rust?",
      "content_text": "A curation of opinions and facts on a variety of Rust IDEs.",
      "url": "https://medium.com/cloud-native-the-gathering/whats-the-best-ide-for-developing-in-rust-5087d46006f5",
      "date_published": "2019-05-13T06:43:35.907+00:00",
      "author": {
        "name": "Tremaine Eto",
        "url": "https://medium.com/@tremaineeto"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "09931418-a93c-4b3f-ab7a-de486a0373fd",
      "title": "Paw",
      "content_text": "Today we're announcing paw, a first step by the CLI Working Group to make command line applications more first class in Rust.\n\nWe introduce a procedural macro paw::main that allows passing arguments to fn main, and a new trait ParseArgs that must be implemented by the arguments to main. This allows passing not only the classic std::env::Args to main but also, for example, structopt instances.",
      "url": "https://blog.yoshuawuyts.com/paw/",
      "tweet_url": "https://twitter.com/yoshuawuyts/status/1126840804104986624",
      "date_published": "2019-05-06T00:00:00+00:00",
      "author": {
        "name": "Yoshua Wuyts",
        "url": "https://blog.yoshuawuyts.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "507fcf49-a4cd-445d-8df1-82eaaad35188",
      "title": "μAMP: Asymmetric Multi-Processing on microcontrollers",
      "content_text": "microamp (styled as μAMP) is a framework (library plus cargo subcommand) for building bare-metal applications that target AMP systems. This blog post is a deep dive into this framework which serves as the core foundation of the multi-core version of Real Time For the Masses (RTFM), which I’ll cover in the next blog post.",
      "url": "https://blog.japaric.io/microamp/",
      "tweet_url": "https://twitter.com/japaricious/status/1126845464169656320",
      "date_published": "2019-05-10T00:00:00+00:00",
      "author": {
        "name": "Jorge Aparicio",
        "url": "http://blog.japaric.io/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "0cbe8a85-0ad7-49b7-b266-db068f4cef8d",
      "title": "Snips Open Sources Tract",
      "content_text": "After open sourcing Snips-NLU a year ago, Snips now shares Tract, a new piece of its embedded voice platform. Tract is Snips’ neural network inference engine.",
      "url": "https://medium.com/snips-ai/snips-open-sources-tract-cdc50f437ef2",
      "tweet_url": "https://twitter.com/randhindi/status/1126862817339035649",
      "date_published": "2019-05-10T13:59:02.567+00:00",
      "author": {
        "name": "Mathieu Poumeyrol",
        "url": "https://medium.com/@mathieu.poumeyrol"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "03308e2f-7a8e-4162-8c4e-4bffd1138c51",
      "title": "rust-hypervisor-firmware",
      "content_text": "This repository contains a simple KVM firmware that is designed to be launched from anything that supports loading ELF binaries and running them with the Linux kernel loading standard. The ultimate goal is to be able to use this \"firmware\" to be able to load a bootloader from within a disk image.",
      "url": "https://github.com/intel/rust-hypervisor-firmware/blob/master/README.md",
      "date_published": "2019-05-11T00:00:00+00:00",
      "author": {
        "name": "Intel",
        "url": "https://github.com/intel"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "25d9490f-05e3-4f5c-a407-19d78b0fb6d4",
      "title": "Creating a Static HTTP Server with Rust - Part 1",
      "content_text": "In this series, we will create a basic static HTTP 1.0 server with Rust. At the end of Part 1 of this tutorial, our server will do the following: Listen for and handle TCP connections on a specific port, Accept HTTP 1.0 GET requests, Parse and validate requests for further use, Log incoming requests. We will avoid using libraries that make this trivial (i.e. the http crate) and focus on the fundamentals of how a server works.",
      "url": "http://concisecoder.io/2019/05/11/creating-a-static-http-server-with-rust-part-1/",
      "tweet_url": "https://twitter.com/concisecoder/status/1127261552913129478",
      "date_published": "2019-05-11T17:17:46+00:00",
      "author": {
        "name": "Levi Payne",
        "url": "http://concisecoder.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "6c334d13-f697-4774-8820-3665687ec7a4",
      "title": "Some Thoughts on Rust's Async/Await Debate",
      "content_text": "This post will be an extension of the debates found in the Rust forums, specifically here and here. A lot is being said in those threads and there's a certain amount of duplicated posts that are drowning out potentially valuable information and perspectives. I've written several comments in those debates",
      "url": "https://whitfin.io/some-thoughts-on-rusts-async-await-proposals/",
      "date_published": "2019-05-09T18:41:38+00:00",
      "author": {
        "name": "Isaac Whitfield",
        "url": "https://whitfin.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "7d5b4554-d4eb-45b4-9d90-a562f36a4f88",
      "title": "Recursive iterators in Rust",
      "content_text": "I’ve been looking for this blog post everywhere, but it doesn’t exist, so I guess it’s my turn to write about Some Fun with Rust. Let’s say you have a recursive, acyclic data structure. Now let’s say you want to iterate over the values of the root node and all its children, recursively, so that you get the sequence [1, 2, 3, 4, 5, 6, 7].",
      "url": "https://amos.me/blog/2019/recursive-iterators-rust/",
      "tweet_url": "https://twitter.com/fasterthanlime/status/1126595613850836997",
      "date_published": "2019-05-08T00:00:00+00:00",
      "author": {
        "name": "amos",
        "url": "https://amos.me/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "b5691501-490d-4eef-a8cc-2728e42774d2",
      "title": "Learn Rust: Parsing command line arguments with StructOpt",
      "content_text": "A beginners guide to using StructOpt for parsing command line arguments.",
      "url": "https://www.tenderisthebyte.com/blog/2019/05/08/parsing-cli-args-with-structopt/",
      "tweet_url": "https://twitter.com/TenderIsTheByte/status/1126511203944153088",
      "date_published": "2019-05-08T00:00:00+00:00",
      "author": {
        "name": "Ryan Moore",
        "url": "https://www.tenderisthebyte.com/"
      },
      "tags": [
        "Crates",
        "Getting Started"
      ]
    },
    {
      "id": "8914cc92-515c-4902-ae43-b247924a0191",
      "title": "Learning Rust while solving Advent of Code puzzles (a post mortem)",
      "content_text": "I wanted to learn Rust for some time, but wasn't motivated enough. Finally, there was an opportunity: Every year in December, there is a coding challenge called Advent of Code. So I decided I will use edition 2018 as a motivator to learn new programming language.",
      "url": "https://andrzej.pragacz.pl/blog/2019/05/learning-rust-while-solving-advent-of-code/",
      "tweet_url": "https://twitter.com/apragacz/status/1126585037133176834",
      "date_published": "2019-05-03T00:00:00+00:00",
      "author": {
        "name": "Andrzej Pragacz",
        "url": "https://andrzej.pragacz.pl/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "3ce37cbb-5bdc-4340-a83f-9f402616cd58",
      "title": "2D Graphics on Modern GPU",
      "content_text": "Is the traditional 2D imaging model nearing the end of its usefulness, or does it have a shiny future in the “modern graphics” world? I spent a week on a research retreat in a cottage in the woods to answer this question, as it shapes the future of UI toolkits. Performant UI must use GPU effectively, and it’s increasingly common to write UI directly in terms of GPU rendering, without a 2D graphics API as in the intermediate layer. Is that the future, or perhaps a mistake?",
      "url": "https://raphlinus.github.io/rust/graphics/gpu/2019/05/08/modern-2d.html",
      "tweet_url": "https://twitter.com/raphlinus/status/1126226722444140544",
      "date_published": "2019-05-08T20:40:42+00:00",
      "author": {
        "name": "Raph Levien",
        "url": "https://raphlinus.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "577c30e3-f6b8-4c6f-98a5-020962df3df3",
      "title": "Rust Patterns: Enums Instead Of Booleans",
      "content_text": "As I’ve been writing Rust code more, I’ve noticed how few boolean types I’m using in my code. Instead, I’m using Rust’s powerful enums in 90% of cases where I would have reached for a boolean in another language.",
      "url": "http://blakesmith.me/2019/05/07/rust-patterns-enums-instead-of-booleans.html",
      "date_published": "2019-05-07T00:00:00+00:00",
      "author": {
        "name": "Blake Smith",
        "url": "http://blakesmith.me/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "10bffdde-a5d9-4066-971b-0c155ba8ce2d",
      "title": "How and why await should be a method afterall",
      "content_text": "Explains in which way the planned `await` resembles a function call and provides reasoning how apparent contradictions in this model can be dispelled.",
      "url": "https://www.hardmo.de/article/2019-05-06-await-method-afterall.md",
      "date_published": "2019-05-06T00:00:00+00:00",
      "author": {
        "name": "Andreas Molzer",
        "url": "https://www.hardmo.de/blog"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "35a812e7-75c8-4ffe-98b0-0dee390a5a51",
      "title": "Implementing a Interpreted Language in Rust Part 1",
      "content_text": "We live in a great era for language design. Within the last 5-10 years, several innovative languages have come out and won over the hearts of many developers with a newfound focus on memory safety (Rust), runtime interoperability (JVM: Kotlin, V8: Typescript, BEAM: Elixir), first class concurrency (Go, Pony), dependent types (Idris), Language oriented Programming (Racket) and many more inspired features. In this spirit, I have decided to throw my hat into the ring as well and create my own language for fun.",
      "url": "http://nedellis.com/2019/05/08/esta_1/",
      "date_published": "2019-05-08T00:00:00+00:00",
      "author": {
        "name": "Ned Ellis",
        "url": "http://nedellis.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "89a6ce72-79b9-477d-a5e5-bd1e6407c3f5",
      "title": "World's First Private Cargo Registry",
      "content_text": "If you're interested in the possibilities that hosting your own private or internal crates brings, then this is incredibly good news for you: Cloudsmith are proud to provide the World's first commercially available public and private Cargo registry hosting, with ultra-fast and secure delivery of your Rust packages, alongside all of the usual Enterprise-grade features that we provide.",
      "url": "https://blog.cloudsmith.io/2019/05/01/worlds-first-private-cargo-registry/",
      "tweet_url": "https://twitter.com/cloudsmith/status/1123597194970435584",
      "date_published": "2019-05-01T12:06:47+00:00",
      "author": {
        "name": "Patrick Carey",
        "url": "https://blog.cloudsmith.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d9831a1a-f79f-4c0b-af9e-b4c5b65cd74f",
      "title": "A Practical Analysis of Rust's Concurrency Story",
      "content_text": "Rust is a recent programming language from Mozilla that attempts to solve these intertwined issues by detecting data-races at compile time. Rust's type system encodes a data-structure's ability to be shared between threads in the type system, which in turn allows the compiler to reject programs where threads directly mutate shared state without locks or other protection mechanisms. In this work, we examine how this aspect of Rust's type system impacts the development and refinement of a concurrent data structure, as well as its ability to adapt to situations where correctness is guaranteed by lower-level invariants (e.g., in lock-free algorithms) that are not directly expressible in the type system itself. We detail the implementation of a concurrent lock-free hashmap in order to describe these traits of the Rust language.",
      "url": "https://arxiv.org/abs/1904.12210",
      "date_published": "2019-04-27T00:00:00+00:00",
      "author": {
        "name": "Aditya Saligrama, Andrew Shen, Jon Gjengset",
        "url": "https://arxiv.org/list/cs/recent"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "ffeaa8e5-849b-4924-9c9f-1ac6adc15a8e",
      "title": "Unit testing Rust using Chrome",
      "content_text": "Stretch is a cross-platform Flexbox engine written in Rust. At Visly we are building a design tool for front-end engineers and we needed to ensure components looked the same across web, iOS, and Android without making use of WebViews. This meant replicating the web layout system on mobile.\n\nIn this post, I’ll cover the test setup we use in Stretch, how and why we need to generate unit dynamically. I’ll also cover an example of contributing another test to Stretch, and finally I’ll walk through how we also make use of this system for benchmarking.",
      "url": "https://medium.com/visly/unit-testing-rust-using-chrome-b8b93572a91d",
      "date_published": "2019-05-06T16:25:41.951+00:00",
      "author": {
        "name": "Emil Sjölander",
        "url": "https://medium.com/@emilsj"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "b7f70811-6fa2-4bab-b9e2-be4107ec221b",
      "title": "A final proposal for await syntax",
      "content_text": "This is an announcement regarding the resolution of the syntax for the await operator in Rust. This is one of the last major unresolved questions blocking the stabilization of the async/await feature, a feature which will enable many more people to write non-blocking network services in Rust. This post contains information about the timeline for the final decision, a proposal from the language team which is the most likely syntax to be adopted, and the justification for this decision.",
      "url": "https://boats.gitlab.io/blog/post/await-decision/",
      "tweet_url": "https://twitter.com/withoutboats/status/1125412141006192640",
      "date_published": "2019-05-06T00:00:00+00:00",
      "author": {
        "name": "withoutboats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "7d2c4d88-ce3c-4794-8093-80d1dd15395c",
      "title": "Racing sed with Rust",
      "content_text": "As part of a project I’m working on, I sometimes find myself having to deal with quite large X12 files. What I’d really like is a small, self-contained tool that I can pass an X12 file to and rely on it to Do The Right Thing™ without any unnecessary incantations. Since I’m dealing with large source files it would also be nice if it was at least as fast as standard tools like sed. Sounds like a job for…",
      "url": "https://www.lambdafunctions.com/articles/racing-sed-with-rust",
      "date_published": "2019-05-07T00:00:00+00:00",
      "author": {
        "name": "Mike Clarke",
        "url": "https://www.lambdafunctions.com/articles"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "e6de297c-e3b3-40ab-af40-922f95e71444",
      "title": "Rust and glibc version",
      "content_text": "The rust compiler dynamically link the executable against the glibc in the system. Hence if you compile your software against a newer version of glibc (say 2.19) that the one available where you run the executable (say in the host is available 2.14) it may not work.\n\nThe cleanest one is to don’t dynamically link against glib, indeed is possible to compile a rust binary statically linking musl, to do so is sufficient to compile against the correct target, usually using cargo build --target x86_64-unknown-linux-musl.\n\nAnother possibility is to compile in an environment with an “old-enough” version of glibc, this is usually done using docker and indeed there is a whole project that aim to create a set “zero setup” docker images. ",
      "url": "http://redbeardlab.com/2019/05/07/rust-and-glibc-version/",
      "date_published": "2019-05-07T16:33:59+00:00",
      "author": {
        "name": "Simone Mosciatti",
        "url": "http://redbeardlab.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "350dfd1b-e2c5-4a2b-9b2d-015d933e7a78",
      "title": "Rust caching on CircleCI using sccache",
      "content_text": "If you are working in a team that’s writing Rust code and your crates have a good amount of dependencies, you have probably noticed that the Rust compilation phase takes a non-trivial amount of time in comparison to actually running your tests: it is indeed one of the top recurring complains that gets reported to the language team.\n\nIn a CI environment, it gets worse as the testing container starts building pretty much from scratch and everything gets recompiled. One way to alleviate that problem is to cache Rust compiled intermediate objects",
      "url": "https://medium.com/@edouard.oger/rust-caching-on-circleci-using-sccache-c996344f0115",
      "date_published": "2019-05-03T21:42:28.171+00:00",
      "author": {
        "name": "Edouard Oger",
        "url": "https://medium.com/@edouard.oger"
      },
      "tags": [
        "DevOps and Deployment"
      ]
    },
    {
      "id": "48eed32e-7fd2-4d16-9a34-97c9289cc72c",
      "title": "Handmade Rust Part 4: Generating Vulkan bindings",
      "content_text": "Vulkan is a C API so we’ll need some kind of bindings to be able to use it in Rust. The API is defined in a XML file distributed by Khronos. This file describes the structs, enums, constants, and functions for each version of the API, and all published extensions. The functions can then be loaded from the Vulkan dynamic library and other functions from the API.\n\nHowever using a raw C API isn’t easy in Rust because it requires using a lot of unsafe code. This is why we’ll also generate builders for all structs so we can for instance fill in pointer/size pairs using slices, but we’ll also generate methods that return Rust’s Results and take in Rust-friendly types like references instead of raw C types. Finally we’ll also generate loaders so we don’t have to manually load the function we need.",
      "url": "http://stevenlr.com/posts/handmade-rust-4-vulkan-bindings/",
      "date_published": "2019-05-04T18:33:36+02:00",
      "author": {
        "name": "Steven Le Rouzic",
        "url": "http://stevenlr.com/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "5cea79c2-18d1-470d-b0a4-8647f0e2e5ca",
      "title": "Rust concurrency patterns: Communicate by sharing your sender(re-visited)",
      "content_text": "Since I last wrote about this topic, just only about a year ago select as used in the standard-library channel, has been deprecated. So it’s a good time to re-visit some of the concepts in that article, this time in the context of using crossbeam channels, and instead of using a made-up example, let’s dig into some real “production” code, as found in Servo. Let’s continue our exploration of Rust concurrency…",
      "url": "https://medium.com/@polyglot_factotum/rust-concurrency-patterns-communicate-by-sharing-your-sender-re-visited-9d42e6dfecfa",
      "date_published": "2019-05-05T06:18:08.433+00:00",
      "author": {
        "name": "Gregory Terzian",
        "url": "https://medium.com/@polyglot_factotum"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "e0804329-7f79-4ee4-9087-8aa2e8c0b672",
      "title": "Structured Greping Of Structured Logging",
      "content_text": "Why I created a command-line JSON processor.",
      "url": "https://gidi.io/2019/03/01/structured-greping-of-structured-logging-using-grep-for-json.html",
      "tweet_url": "https://twitter.com/chekofif/status/1124413072737820678",
      "date_published": "2019-03-01T21:16:08+00:00",
      "author": {
        "name": "Gidi Meir Morris",
        "url": "https://gidi.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "728cc414-7e29-41ce-86af-0181095c3ec6",
      "title": "Building Simple APIs with Hyper and Usher",
      "content_text": "When writing a web service, I often lean towards using tools that are as minimal as possible. One pretty obvious reason for this is the avoidance of dependencies you either don't want or don't need in your project. Whilst I'm not someone who goes out of their way to avoid dependencies, this is a pain point particularly in Rust because of the cost of building them repeatedly rather than shipping extra interpreted files around (especially if you use \"pure\" build environments).",
      "url": "https://whitfin.io/building-simple-apis-with-hyper-and-usher/",
      "tweet_url": "https://twitter.com/_whitfin/status/1124359200144887808",
      "date_published": "2019-05-03T16:56:26+00:00",
      "author": {
        "name": "Isaac Whitfield",
        "url": "https://whitfin.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "db1287e6-d66c-486a-812b-87ba2b37d423",
      "title": "phrase: A tool for learning significant phrase/term models, and efficiently labeling with them",
      "content_text": "In general, using phrase falls into 3 steps: Counting n-grams, Exporting scored models, Significant term/phrase extraction/transform N-gram counting is done continuously, providing batches of documents as they come in. Model export reads all n-gram counts so far and calculates mutual information-based collocations - you can then deploy the models by shipping the binary and data/scores_* files to a server. Labeling (identifying all significant terms and phrases in text) or transforming (eager replace of longest found phrases in text) can be done either via the CLI or the web server. Providing labels for documents is not necessary for learning phrases, but does help, and allows for significant term labeling also.",
      "url": "https://github.com/soaxelbrooke/phrase",
      "date_published": "2019-05-06T00:00:00+00:00",
      "author": {
        "name": "Stuart Axelbrooke",
        "url": "https://github.com/soaxelbrooke"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "e3fadb7b-df84-47a1-b6ca-47186b2b9418",
      "title": "WebAssembly -Part II.A | Wasm with Rust",
      "content_text": "This article is more of a how-to on getting up and running with a production-grade web project which incorporates Rust (or any other language for that matter) and WebAssembly into your web pages.",
      "url": "https://medium.com/tech-lah/webassembly-part-ii-a-wasm-with-rust-2356dbc6526e",
      "date_published": "2019-05-05T13:27:01.003+00:00",
      "author": {
        "name": "Francisco Vilches",
        "url": "https://medium.com/@franciscov"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "433737c5-300e-4095-82c3-2ca05e51b029",
      "title": "Compile-time coprocessor codegen, with Rust macros",
      "content_text": "Motivation: The Nintendo 3DS uses an ARM standard peripheral, the CoreLink DMA engine, for copying memory among DRAM and memory-mapped peripherals.\n\nThis DMA engine, unlike most other IO devices on the 3DS, actually has its own instruction set where the CPU merely uploads a stream of instructions for the peripheral to execute (other examples of this, on the 3DS, are the DSP audio processor and the PICA graphics chip).\n\nI’d like to compile and run DMA instructions in Rust, in a hopefully ergonomic manner, without needing to use any dynamic memory allocation. This imposes a particular constraint that I need to know the number of instruction bytes at compile time so I can use an appropriately-sized array.",
      "url": "https://guiand.xyz/blog-posts/macro-assembly-codegen.html",
      "date_published": "2019-05-03T00:00:00+00:00",
      "author": {
        "name": "Gui Andrade",
        "url": "https://guiand.xyz/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "63ae6a45-4e07-49c9-914d-b9be320cf7a9",
      "title": "Making Sandspiel",
      "content_text": "Sandspiel is a falling sand game I built in late 2018. I really enjoyed writing this game, and wanted to put into writing some of my goals, design decisions, and learnings from that process.",
      "url": "https://maxbittker.com/making-sandspiel",
      "tweet_url": "https://twitter.com/MaxBittker/status/1123323351940812800",
      "date_published": "2019-04-30T00:00:00+00:00",
      "author": {
        "name": "Max Bittker",
        "url": "https://maxbittker.com/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "0bc705c5-726c-4967-84cc-264f7a6338df",
      "title": "How XV uses Panics",
      "content_text": "XV is a terminal hex viewer that I am working on. It is the first “real” Rust project that I am working on, coming from a Java background.\n\nJava has exceptions. Both checked exceptions, identified by having the Exception class as a parent class, and unchecked exceptions, which have RuntimeException as a parent class.\n\nRust does not have exceptions. Rust has panics, which, depending on build-time configurations, are either catch-able when they unwind the stack, or only produce a backtrace, or just immediately aborts the process. This is controlled by the “panic” setting in the “profile” sections of your Cargo.toml file.",
      "url": "https://medium.com/@chrisvest/how-xv-uses-panics-ba22bd6152a5",
      "tweet_url": "https://twitter.com/chvest/status/1123987418934325249",
      "date_published": "2019-05-02T16:26:24.329+00:00",
      "author": {
        "name": "Chris Vest",
        "url": "https://medium.com/@chrisvest"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "f759c500-da13-4765-81f1-dd59918b09d1",
      "title": "Extending Python with Rust",
      "content_text": "Python is a great programming language but sometimes it can be a bit of slowcoach when it comes to performing certain tasks. That’s why developers have been building C/C++ extensions and integrating them with Python to speed up the performance. However, writing these extensions is a bit difficult because these low-level languages are not type-safe, so doesn’t guarantee a defined behavior. This tends to introduce bugs with respect to memory management. Rust ensures memory safety and hence can easily prevent these kinds of bugs.",
      "url": "https://medium.com/@p_chhetri/extending-python-with-rust-84e9299d34c1",
      "date_published": "2019-05-01T17:37:44.829+00:00",
      "author": {
        "name": "Pradeep Chhetri",
        "url": "https://medium.com/@p_chhetri"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "bd254733-37d6-4ef1-959d-67ca2ccfc2ca",
      "title": "Rust: How to build a Docker image with private Cargo dependencies",
      "content_text": "In this article, I’m going to show you how to fetch private Cargo dependencies and source them when building a Docker image. This solves a key issue with Docker of not copying over SSH keys when building an image.",
      "url": "https://medium.com/@c_ameron/rust-how-to-build-a-docker-image-with-private-cargo-dependencies-ab91c25c4301",
      "date_published": "2019-05-01T04:08:50.966+00:00",
      "author": {
        "name": "Cameron",
        "url": "https://medium.com/@c_ameron"
      },
      "tags": [
        "DevOps and Deployment"
      ]
    },
    {
      "id": "de6a9110-16fb-47df-a80d-f63af3033589",
      "title": "✩ The RustBridge Roadmap for 2019",
      "content_text": "This is less a specific roadmap and more of a rough braindump of where I think the project currently stands and where I would personally like it to head in 2019 and beyond. With that, let's get started: The main thing I would like to focus on this year is clearing community debt. I don't actually know what you would call this, but it's sort of like technical debt, just manifested within communities.",
      "url": "https://marisa.cloud/phame/live/1/post/1/the_rustbridge_roadmap_for_2019/",
      "tweet_url": "https://twitter.com/faint_visions/status/1123979020847108096",
      "date_published": "2019-05-02T10:19:00+00:00",
      "author": {
        "name": "olivia",
        "url": "https://marisa.cloud/phame/live/1/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "facd2bd5-bb49-449e-b8d9-c9f353545c32",
      "title": "Rustacean Hat Pattern",
      "content_text": "Making a Ferris the Rustacean hat.",
      "url": "http://edunham.net/2019/04/06/rustacean_hat_pattern.html",
      "tweet_url": "https://twitter.com/QEDunham/status/1124016756232740864",
      "date_published": "2019-04-06T00:00:00+00:00",
      "author": {
        "name": "E. Dunham",
        "url": "http://edunham.net/index.html"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "9152c867-9b24-49d0-ac2c-d85775162eb4",
      "title": "Explained: Futures in Rust for Web Development",
      "content_text": "If you are coming from NodeJS, Futures in Rust don't make much sense. In NodeJS, everything happens asynchronously. Therefore for you to be able to say \"Hey, I really need to wait for the answer for this GET HTTP call\", you are putting.then() on a Promise, so you can make sure you just execute the code inside the .then() when the HTTP call is finished.\n\nIn Rust, everything is blocking and synchronous by default, so you might ask yourself: \"Why bothering with the complexity, that's exactly what I wanted in the first place!\"",
      "url": "https://dev.to/gruberb/explained-rust-futures-for-web-development-a10",
      "tweet_url": "https://twitter.com/byteadventures/status/1123887163022688258",
      "date_published": "2019-05-02T00:00:00+00:00",
      "author": {
        "name": "Bastian Gruber",
        "url": "https://dev.to/gruberb"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "329ef1a1-d5e3-49df-87e6-b4f40038d4d8",
      "title": "Rust parallelism for non-C/C++ developers",
      "content_text": "Majority of the people coming to Rust have C/C++ background which allows them to easily transition into Rust parallelism since it is so similar. However, for many people coming from other languages, it is a challenge. In this post, we will walk through the standard Rust parallelism tools as well as the motivation behind them. This will require a hardware deep dive at the beginning, followed by an explanation of the low-level tools, like atomics, and ending with an explanation of high-level tools like Mutex. Finally, we will explain how Rust guarantees safety in multi-threaded applications.",
      "url": "https://medium.com/nearprotocol/rust-parallelism-for-non-c-c-developers-ec23f48b7e56",
      "date_published": "2019-05-02T21:32:53.684+00:00",
      "author": {
        "name": "Maksym Zavershynskyi",
        "url": "https://medium.com/@zaver.max"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "4ce6618d-d773-4260-85c6-639aaf6ec7fc",
      "title": "Risp (Lisp (in (Rust)))",
      "content_text": "Many years ago, Peter Norvig wrote a beautiful article about creating a lisp interpreter in Python. It’s the most fun tutorial I’ve seen, not just because it teaches you about my favorite language family (Lisp), but because it cuts through to the essence of interpreters, is fun to follow and quick to finish.\n\nRecently, I had some time and wanted to learn Rust. It’s a beautiful systems language, and I’ve seen some great work come out from those who adopt it. I thought, what better way to learn Rust, than to create a lisp interpreter in it?\n\nHence, Risp — a lisp in rust — was born. In this essay you and I will follow along with Norvig’s Lispy, but instead of Python, we’ll do it in Rust 🙂.",
      "url": "https://m.stopa.io/risp-lisp-in-rust-90a0dad5b116",
      "tweet_url": "https://twitter.com/stopachka/status/1124007857429647365",
      "date_published": "2019-05-02T17:44:37.154+00:00",
      "author": {
        "name": "Stepan Parunashvili",
        "url": "https://m.stopa.io/@stepan"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ae1f3c27-6a45-4b49-ac3c-e081adfe52c9",
      "title": "Cargo in 2019",
      "content_text": "I recently published a post detailing a vision for the next few years (hah! Not so recently now, this took a lot longer than expected). Here I'll get into more detail about 2019.",
      "url": "https://www.ncameron.org/blog/cargo-in-2019/",
      "tweet_url": "https://twitter.com/nick_r_cameron/status/1123718404760834049",
      "date_published": "2019-05-01T22:37:35+00:00",
      "author": {
        "name": "Nick Cameron",
        "url": "http://www.ncameron.org/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4cc7ac88-4ef9-40fd-b235-bee8151e059d",
      "title": "Rolling your own Router with Smithy v0.0.3",
      "content_text": "Build a WebAssembly application with a hash router using Smithy.",
      "url": "https://medium.com/@robert.balicki_2494/rolling-your-own-router-with-smithy-v0-0-3-2de17cdbb49",
      "date_published": "2019-04-29T15:25:25.504+00:00",
      "author": {
        "name": "Robert Balicki",
        "url": "https://medium.com/@robert.balicki_2494"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "4b134136-1041-4976-ba52-7e64e767ea89",
      "title": "gptman: A CLI tool and library for managing GUID partition tables",
      "content_text": "A CLI tool for Linux that allows you to copy a partition from one disk to another and more. A library that allows managing GUID partition tables. Features include: Read/Write GPT from 512 and 4096 bytes sector size disks, Create a new GPT on a disk, Insert/delete a partition in the table, Align partitions automatically, Resize a partition, Copy/clone a partition from one disk and insert it to another, Change partition type, Fix partitions order, Change disk GUID, Change partition name, Change partition GUID, Toggle legacy BIOS bootable, Toggle no block IO protocol, Toggle required partition flag, Toggle attributes, Customize columns to print, Print raw data of disklabel, Swap partition indexes, Randomize disk's GUID and all partition's GUID, Copy/clone all partitions from one disk and insert it to another.",
      "url": "https://crates.io/crates/gptman",
      "tweet_url": "https://twitter.com/CecileTonglet/status/1123611519869235201",
      "date_published": "2019-05-02T01:33:00+00:00",
      "author": {
        "name": "Cecile Tonglet",
        "url": "https://twitter.com/CecileTonglet"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "37ea8a58-93a1-4e5c-b125-d98a250e601c",
      "title": "Chess vocabulary in Rust",
      "content_text": "Recently I've been using Rust to build a server for the new 7-piece Syzygy endgame tablebases. Using Rust was quite enjoyable and I plan to use it for many future projects. This series is intended to order and share my thoughts, and as a primer to discuss some open questions I have.",
      "url": "https://backscattering.de/chess/vocabulary/",
      "date_published": "2019-04-14T00:00:00+00:00",
      "author": {
        "name": "Niklas Fiekas",
        "url": "https://backscattering.de/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "16c5eef8-5844-4408-8ab5-42319757ecef",
      "title": "Using Wasmer for Plugins Part 4",
      "content_text": "In the last three posts of this series we covered all of the things we would need to use Wasmer as the base for a plugin system. In part one we went over the basics of passing simple data in and out of a web assembly module, in part two we dug deeper into how you might do the same with more complicated data. In the last part we eased the experience of plugin developers by encapsulating all of our work into a library that exports a procedural macro. In this post we are going to explore what it would take to extend an existing plugin system to allow for wasm plugins.",
      "url": "https://wiredforge.com/blog/wasmer-plugin-pt-4/index.html",
      "tweet_url": "https://twitter.com/FreeMasen/status/1123665701858942976",
      "date_published": "2019-05-01T00:00:00+00:00",
      "author": {
        "name": "Robert Masen",
        "url": "https://wiredforge.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "dd64813c-9380-4cd5-b689-ae31cd1c0405",
      "title": "Hawk: Image Recognition Application using Rust and AWS Services",
      "content_text": "Rust is one of the newest kid on the block in the modern programming languages. We tried to take advantage of its great features by using it in an Image Recognition blueprint project. This project can be traded with any existing security system deployed at any organization. Hawk uses AWS services integrated with Rust.",
      "url": "https://blog.knoldus.com/hawk-image-recognition-project-using-rust-and-aws-services/",
      "tweet_url": "https://twitter.com/muditchhabra1/status/1123549138430246913",
      "date_published": "2019-05-01T11:14:44+00:00",
      "author": {
        "name": "muditchhabra6125",
        "url": "https://blog.knoldus.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "7ee0306d-50cc-4b2a-8573-ff0c59c02b3f",
      "title": "Rust for Frontend Developers: Modules",
      "content_text": "Not that long ago I decided to start learning Rust. While it has a lot of useful resources online and a very friendly community there's still things that are weird to me. That's because Rust is a very different mental model than the frontend mental model I'm used to.\n\nThat means that things that are obvious to a lot of people are not obvious to me. So I'll try to document some of these things from the perspective of a frontend developer. This time on using modules.",
      "url": "https://www.kennethlarsen.org/rust-for-frontend-developers-modules/",
      "tweet_url": "https://twitter.com/kennethlarsen/status/1123164651716583426",
      "date_published": "2019-04-30T09:57:24+00:00",
      "author": {
        "name": "Kenneth Larsen",
        "url": "https://www.kennethlarsen.org/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "55cb403b-5cda-4f80-8708-f55a3dc66e95",
      "title": "A Guide to Rust Graphics Libraries in 2019",
      "content_text": "People on the gamedev channel of the Unofficial Rust Discord were talking about graphics API’s and what goes where and what does what, people were contradicting and correcting each other, the rain of acronyms was falling hard and fast, and it was all getting a bit muddled. So I’m here to attempt to set the record straight. This is intended to provide context for people who want to get into writing graphics stuff (video games, animations, cool visualizations, etc) in Rust and don’t know where to start.",
      "url": "https://wiki.alopex.li/AGuideToRustGraphicsLibraries2019",
      "date_published": "2019-05-02T00:00:00+00:00",
      "author": {
        "name": "Simon Heath",
        "url": "http://patreon.com/icefox"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "00aea687-4bba-48e5-8568-000ef44a419e",
      "title": "A close touch with Rust community",
      "content_text": "About RustCon Asia 2019：There was definitely a little bit of everything for everyone attended. It was heartwarming to see people enjoying their experience from talks and at the same time meeting new and old friends. The portion of the attendees was just beginning with Rust benefited from talks such as Olivia’s RustBridge for beginners, Nick’s thinking in Rust and Alex’s How to learn Rust efficiently.",
      "url": "https://medium.com/@Aimeedeer/a-close-touch-with-rust-community-4a8507b756d9",
      "date_published": "2019-04-29T11:49:07.850+00:00",
      "author": {
        "name": "Aimee Z",
        "url": "https://medium.com/@Aimeedeer"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "10ce619a-7183-49cf-91c8-99e0f085a272",
      "title": "RustPlayground: Quickly test Rust code on macOS.",
      "content_text": "Rust Playground for MacOS is a standalone native mac application that allows quickly editing and testing rust snippets.",
      "url": "https://github.com/cmyr/RustPlayground",
      "tweet_url": "https://twitter.com/cmyr/status/1122923394503196672",
      "date_published": "2019-04-30T03:59:00+00:00",
      "author": {
        "name": "colin rofls",
        "url": "https://github.com/cmyr"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "b4cd814f-2f84-4e4d-b3a1-bba98d6a24f2",
      "title": "Kubernetes operators in Rust",
      "content_text": "Writing light weight cloud services without Go.",
      "url": "https://clux.github.io/probes/post/2019-04-29-rust-on-kubernetes/",
      "date_published": "2019-04-29T00:00:00+00:00",
      "author": {
        "name": "clux",
        "url": "https://clux.github.io/probes/"
      },
      "tags": [
        "DevOps and Deployment"
      ]
    },
    {
      "id": "f2a55dcd-b163-42ac-8660-311e1cc384d0",
      "title": "Stacked Borrows 2",
      "content_text": "Recently, I have significantly updated Stacked Borrows in order to fix some issues with the handling of shared references that were uncovered in the previous version. In this post, I will describe what the new version looks like and how it differs from Stacked Borrows 1. I assume some familiarity with the prior version and will not explain everything from scratch.",
      "url": "https://www.ralfj.de/blog/2019/04/30/stacked-borrows-2.html",
      "date_published": "2019-04-30T00:00:00+00:00",
      "author": {
        "name": "Ralf Jung",
        "url": "https://www.ralfj.de/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "094e167c-f023-449e-9976-247d314fd269",
      "title": "My Key Learnings after 30,000 LOC in Rust",
      "content_text": "For me, Rust takes a stroll over the memory lane above and picks and drives home the best experiences from all those languages — which is a",
      "url": "https://medium.com/@jondot/my-key-learnings-after-30-000-loc-in-rust-a553e6403c19",
      "tweet_url": "https://twitter.com/jondot/status/1122923363708678151",
      "date_published": "2019-04-29T17:57:26.520+00:00",
      "author": {
        "name": "Dotan Nahum",
        "url": "https://medium.com/@jondot"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "b7836b84-068e-4db1-9c0c-2dea0652626d",
      "title": "Building a pub/sub server with Sonr (part 2)",
      "content_text": "This is the second part in a two part series on writing a pub/sub server in Rust using Sonr. We will jump straight in building the publisher. This is the biggest piece of code so far in this project.",
      "url": "https://hagsteel.com/posts/building-a-pub-sub-with-sonr-part-2/",
      "date_published": "2019-04-11T01:00:00+01:00",
      "author": {
        "name": "Jonas",
        "url": "https://hagsteel.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "5af81963-5163-49f3-bd47-27b91d6dbd34",
      "title": "Monitoring AWS Batch Jobs with Rust",
      "content_text": "At Pixability my team and I recently created a pretty neat AWS Batch driven system. AWS Batch can can handle almost any task seamlessly and it’s pretty easy to manage with the console. This is great already, but I was curious to see what it would look like to monitor Batch with Rust. Watchrs was inspired by this question and currently provides basic functionality to do so. In this post we will be briefly going over how the main components of watchrs were built and how to use them all together.",
      "url": "https://medium.com/rusted/monitoring-aws-batch-jobs-with-rust-8f1ef6115871",
      "tweet_url": "https://twitter.com/_itsHabib/status/1120857488125984768",
      "date_published": "2019-04-24T01:05:46.511+00:00",
      "author": {
        "name": "Michael Habib",
        "url": "https://medium.com/@itsHabib"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "767bc80b-e61f-4e0f-8cbb-82655b7aa767",
      "title": "Reviewing Sled: Part III",
      "content_text": "Unusually for me, I had a bit of a pause in reviewing Sled. As a reminder, Sled is an embedded database engine written in Rust. I last stopped looking at the buffer management, but I still don’t really have a good grasp of what is going on. The next file is the iterator. It looks like it translates between segments and messages in these segments.",
      "url": "https://ayende.com/blog/187073-C/reviewing-sled-part-iii",
      "date_published": "2019-04-23T00:00:00+00:00",
      "author": {
        "name": "Ayende Rahien",
        "url": "https://ayende.com/blog/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "95e18b0c-0a6c-42dd-80c8-cb5dbbe906e3",
      "title": "Modules in Rust Programming Language",
      "content_text": "Modules are one of the better ways to organize your code and reuse it wherever it is necessary. Rust module system is completely different from what I've used in Languages like JavaScript, GoLang and Python. When I started to learn this pattern, I didn't really like it but, after using them for sometime, now I really like the way it works.",
      "url": "https://dev.to/saiumesh/modules-in-rust-programming-language-495m",
      "tweet_url": "https://twitter.com/saiumesh/status/1121117813941268480",
      "date_published": "2019-04-25T04:24:00+00:00",
      "author": {
        "name": "sai umesh",
        "url": "https://dev.to/saiumesh"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "8ff4000f-f8c6-41b9-a91b-c0bd9d23ca69",
      "title": "Pre luminance-1.0.0 and random thoughts",
      "content_text": "Hello people. It’s been weeks I have started to work on luminance-1.0.0. For a brief recap, luminance is a graphics crate that I originally created in Haskell, when I ripped it off from a demoscene engine called quaazar in order to make and maintain tiner packages. The Rust port was my first Rust project and it became quickly the default language I would develop graphics applications in.",
      "url": "https://phaazon.net/blog/pre-luminance-n-random-thoughts",
      "date_published": "2019-04-26T22:30:00+00:00",
      "author": {
        "name": "Dimitri Sabadie",
        "url": "http://phaazon.net/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "e25d035f-9121-4cd6-b0ac-f98db53fb3e5",
      "title": "DataFusion 0.13.0 Benchmarks",
      "content_text": "Over the past couple weeks I’ve been working on a couple different efforts around parallel query execution with DataFusion: 1. Benchmarking parallel query execution by manually creating one execution context per parquet partition and running on a thread, just to get an idea of expected performance, and comparing results to Apache Spark (running in local mode). 2. Creating a PoC of actual parallel query execution in the Arrow/DataFusion repository. This post is mostly about the first effort.",
      "url": "https://andygrove.io/2019/04/datafusion-0.13.0-benchmarks/",
      "tweet_url": "https://twitter.com/andygrove73/status/1122567028370317312",
      "date_published": "2019-04-28T00:00:00+00:00",
      "author": {
        "name": "Andy Grove",
        "url": "https://andygrove.io/blog"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "675a435e-aadf-4ded-b3d1-50d6a8afaced",
      "title": "emacs-module-rs provides high-level Rust binding and tools to write Emacs's dynamic modules.",
      "content_text": "This provides a high-level binding to emacs-module, Emacs's support for dynamic modules.",
      "url": "https://ubolonton.github.io/emacs-module-rs/0.8.0/",
      "date_published": "2019-04-20T11:11:45+00:00",
      "author": {
        "name": "Tuấn-Anh Nguyễn",
        "url": "https://github.com/ubolonton"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "2766c75e-b1e0-4ae9-9cc2-8c3a8476bb57",
      "title": "Writing an OS in Rust: Testing",
      "content_text": "This post explores unit and integration testing in no_std executables. We will use Rust's support for custom test frameworks to execute test functions inside our kernel. To report the results out of QEMU, we will use different features of QEMU and the bootimage tool.",
      "url": "https://os.phil-opp.com/testing/",
      "tweet_url": "https://twitter.com/phil_opp/status/1122124227295969280",
      "date_published": "2019-04-27T23:03:00+00:00",
      "author": {
        "name": "Philipp Oppermann",
        "url": "https://os.phil-opp.com/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "a436e872-4c6f-4b9a-a311-eb7658d23cb2",
      "title": "Design Space Map",
      "content_text": "The Rust community currently appears to reconfigure its design process. There is some discussion around RFCs. A topic that comes up is shared summaries. I think this is a great idea and want to share my 2¢ here.",
      "url": "https://llogiq.github.io/2019/04/23/map.html",
      "tweet_url": "https://twitter.com/llogiq/status/1120731463073370118",
      "date_published": "2019-04-23T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "c9e2beae-20d5-4c7a-b8de-01f52b18aec1",
      "title": "Simple Chat using Sonr-extras",
      "content_text": "Using sonr-extras to build a very basic chat using the provided connection handling objects.",
      "url": "https://hagsteel.com/posts/simple-chat/",
      "date_published": "2019-04-24T00:00:00+02:00",
      "author": {
        "name": "Jonas",
        "url": "https://hagsteel.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "47f0e720-8b24-41d0-8f3a-97683b5f03b3",
      "title": "Implementing tile encoding in rav1e",
      "content_text": "During the last few months at Videolabs, I added support for tile encoding in rav1e (a Rust AV1 Encoder). AV1 is an open and royalty-free video coding format, concurrent with HEVC (H.265). Rav1e is an encoder written in Rust, developped by Mozilla/Xiph. As such, it takes an input video and encodes it to produce a valid AV1 bitstream. Tile encoding consists in splitting video frames into tiles that can be encoded and decoded independently in parallel (to use several CPUs), at the cost of a small loss in compression efficiency. This speeds up encoding and increases decoding frame rate.",
      "url": "https://blog.rom1v.com/2019/04/implementing-tile-encoding-in-rav1e/",
      "date_published": "2019-04-25T00:00:00+00:00",
      "author": {
        "name": "Romain Vimont",
        "url": "https://blog.rom1v.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "9f8e4402-c90a-4e59-90c2-ca34bf6c2689",
      "title": "Writing Mails from Rust (3/3): Example usage with explanations",
      "content_text": "After the previous two posts this post will go step by step through how the mail crate can be used to create mails based on a handlebars template and send them to a Mail Submission Agent (MSA).",
      "url": "https://blog.1aim.com/post/004-mail-3-example/",
      "date_published": "2019-02-28T00:00:00+00:00",
      "author": {
        "name": "Philipp Korber",
        "url": "https://blog.1aim.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "e2e96d6e-78ce-43fe-a9b7-95fce36b169c",
      "title": "Hello world in morse code",
      "content_text": "I do love working with Rust. I deliberately create excuses to work on mini projects that ultimately involves coding in Rust. Recently, I have bought a blue pill which is a little board that costs about 1$. Although, I have zero experience in embedded programming I always wanted to give it a try with Rust which, in my case, boils down to blinking a LED on the board. I know there are excellent materials about embedded programming with Rust out there, but things do change very rapidly.",
      "url": "https://idursun.com/posts/hello_world_in_morse_code/",
      "tweet_url": "https://twitter.com/idursun/status/1121756119062458369",
      "date_published": "2019-04-25T19:29:42+01:00",
      "author": {
        "name": "Ibrahim Dursun",
        "url": "https://idursun.com/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "28c59573-37da-46b6-92c0-f6fbb4a5e613",
      "title": "Creating cross-platform Rust terminal apps",
      "content_text": "I’ve been wanting to play around with the cool spinning Pikachu demo everyone was talking about. Sadly, it used termion to do its magic, which meant that unfortunately it wouldn’t work for me. Termion has been a boon for Rust, with lots of folks using it to create terminal applications. Unfortunately, as a Windows user, I know there’s a good chance that if the crate depends on termion that’s the end of the line for me, as termion apps just don’t work in Windows. Surely, I thought, there must be a better way, but I never managed to find one. Enter crossterm.",
      "url": "http://www.jonathanturner.org/2019/04/porting-the-pikachu.html",
      "tweet_url": "https://twitter.com/jntrnr/status/1121911927301558272",
      "date_published": "2019-04-27T00:00:00+00:00",
      "author": {
        "name": "Jonathan Turner",
        "url": "http://www.jonathanturner.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "0d66bab5-b38a-4f8a-8c6f-2c7c2cd41fab",
      "title": "Refactoring Varisat 5: Incremental Solving and Proofs",
      "content_text": "This is the fifth and final post in my series about refactoring varisat. In the last post varisat gained the heuristics needed to solve some non-trivial instances. In this post we’ll add incremental solving and proof generation. This brings varisat to feature parity with the old version.",
      "url": "https://jix.one/refactoring-varisat-5-incremental-solving-and-proofs/",
      "date_published": "2019-04-26T16:12:54+02:00",
      "author": {
        "name": "Jannis Harder",
        "url": "https://jix.one/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "a3598959-4fde-42aa-9fcf-4310741caa5e",
      "title": "The XV Hex Viewer",
      "content_text": "XV is a terminal hex viewer with a text user interface, written in 100% safe Rust. Licensed under the Apache-2.0 software license. Get it from crates.io by running cargo install xv in your terminal.",
      "url": "https://chrisvest.github.io/xv/",
      "tweet_url": "https://twitter.com/chvest/status/1120780842257850368",
      "date_published": "2019-04-24T10:34:15+02:00",
      "author": {
        "name": "Chris Vest",
        "url": "https://twitter.com/chvest"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "ad39fd8f-6ca7-499e-bebb-f8a35d3d0a66",
      "title": "Introducing @now/rust",
      "content_text": "ZEIT is proud to announce official support for Rust on Now through `@now/rust`. Our mission at ZEIT is to make cloud computing accessible for all. Rust has seen rapid growth in its adoption, and we're proud to be able to support the community.",
      "url": "https://zeit.co/blog/introducing-now-rust",
      "tweet_url": "https://twitter.com/zeithq/status/1105157012340432897",
      "date_published": "2019-03-12T00:00:00+00:00",
      "author": {
        "name": "ZEIT",
        "url": "https://zeit.co/blog"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "2d3bd098-bf1d-451b-bef0-b2e84678b4e3",
      "title": "Terminal Redox: Some Developer Tools Written in Rust",
      "content_text": "In my very slow and not very steady quest to learn the Rust programming language, I’ve come across a few projects written in the language that I use everyday. I thought I’d write a quick post about them, with some configuration tricks that I’ve made to make them suit my needs.\n\nWhy prefer tools built with Rust? Rust is a very fast language that also works to ensure safety from a group of bugs and pitfalls. It’s also the four-time-running most loved programming language, according to a yearly Stack Overflow survey. Also, since Rust is only a few years old, any program written in Rust is by definition new. Of course newer doesn’t always mean better, but as a non-professional developer I can afford to be on the edge a bit.",
      "url": "https://sts10.github.io//2019/04/08/terminal-redox-alacritty.html",
      "date_published": "2019-04-08T22:11:00+00:00",
      "author": {
        "name": "Sam Schlinkert",
        "url": "https://sts10.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "3ac75258-fb50-4341-9a2a-e5a90def4a55",
      "title": "Writing Mails from Rust (2/3): The mail crate",
      "content_text": "The mail crate is a modular Rust library for creating, modifying and then encoding mails. It also has bindings to our new crate new-tokio-smtp to allow sending mails asynchronously, as well as bindings to handlebars for creating mails from templates. It currently does not support parsing mails, but is designed in a way that decoding capabilities could be easily added in the future (contact me if that is something you'd be interested in working on!). At 1aim, we are already using mail in production.",
      "url": "https://blog.1aim.com/post/003-mail-2-crate/",
      "date_published": "2019-01-29T00:00:00+00:00",
      "author": {
        "name": "Philipp Korber",
        "url": "https://blog.1aim.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "f995f40c-77a1-4091-8c38-7ec9c848e3f7",
      "title": "Sonic: a minimalist  alternative to Elasticsearch written in Rust",
      "content_text": "I always end up using Elasticsearch to index documents, to generate autocompletes and for geolocation. Sonic doesn’t solve all three problems but it is a good tool to solve the first two. I have not yet used it in production, but it seems like a good lightweight alternative to Elasticsearch.\n\nSince we love databases and we are trying to focus on Rust projects, Amin Arria and I decided to interview Sonic’s creator, Valerian Saliou, who generously agreed.",
      "url": "https://notamonadtutorial.com/sonic-a-minimalist-alternative-to-elasticsearch-written-in-rust-7f3612ecb47b",
      "tweet_url": "https://twitter.com/unbalancedparen/status/1113115428992286720",
      "date_published": "2019-04-02T16:15:58.458+00:00",
      "author": {
        "name": "unbalancedparentheses",
        "url": "https://notamonadtutorial.com/@unbalancedparen"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "9197a635-8114-4c33-ae94-226af2147624",
      "title": "How to Write Better Compilation Error Message In Rust",
      "content_text": "While exploring Rust's standard libraries, I came across a beautiful feature of Rust - compile_error.",
      "url": "https://blog.knoldus.com/how-to-write-better-compilation-error-message-in-rust/",
      "date_published": "2019-03-31T14:08:04+00:00",
      "author": {
        "name": "Ayush Mishra",
        "url": "https://blog.knoldus.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "8c6f2335-8fba-4cb5-9da1-2baba7f59159",
      "title": "for await loops (Part I)",
      "content_text": "The biggest unresolved question regarding the async/await syntax is the final syntax for the await operator. There’s been an enormous amount of discussion on this question so far; a summary of the present status of that discussion and the positions within the language team is coming soon. Right now I want to separately focus on one question which impacts that decision but hasn’t been considered very much yet: for loops which process streams.",
      "url": "https://boats.gitlab.io/blog/post/for-await-i/",
      "tweet_url": "https://twitter.com/withoutboats/status/1117830397457502208",
      "date_published": "2019-04-15T00:00:00+00:00",
      "author": {
        "name": "withoutboats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "91b5c36e-a3f8-4cbd-ad0e-cd796ee6ea24",
      "title": "How Rust Solved Dependency Hell",
      "content_text": "Every once in a while I'll be involved in a conversation about dependency management and versions, often at work, in which the subject of “dependency hell” will come up. If you're not familiar with the term, then I encourage you to look it up. A brief summary might be: \"The frustration that comes from dealing with application dependency versions and dependency conflicts\". With that in mind, let's get a little technical about dependency resolution.",
      "url": "https://stephencoakley.com/2019/04/24/how-rust-solved-dependency-hell",
      "tweet_url": "https://twitter.com/sagebind/status/1121212154726756352",
      "date_published": "2019-04-24T05:00:00+00:00",
      "author": {
        "name": "Stephen Coakley",
        "url": "https://stephencoakley.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ef4b2e3e-406a-4553-9c49-3676c83eae96",
      "title": "Leveraging Travis-CI for Continuous Deployment to Publish Compiled Binaries to GitHub",
      "content_text": "Recently I wrote a binary called \"Watchdog\" in Rust on my Mac that I wanted to take with me to Linux systems I frequent, but I couldn't bring a Rust compiler to these systems for unrelated reasons. This meant I had to cross-compile my application and ship just the binary.",
      "url": "https://dev.to/hawkinjs/leveraging-travis-ci-for-continuous-deployment-to-publish-compiled-binaries-to-github-2k06",
      "tweet_url": "https://twitter.com/hawkinjs/status/1121249432727621632",
      "date_published": "2019-04-25T00:00:00+00:00",
      "author": {
        "name": "Josh Hawkins",
        "url": "https://dev.to/hawkinjs"
      },
      "tags": [
        "DevOps and Deployment"
      ]
    },
    {
      "id": "ce78473f-6f58-428d-ba3e-cbbbfc778345",
      "title": "Announcing Rust 1.34.1",
      "content_text": "This patch release fixes two false positives and a panic when checking macros in Clippy. Clippy is a tool which provides a collection of lints to catch common mistakes and improve your Rust code.",
      "url": "https://blog.rust-lang.org/2019/04/25/Rust-1.34.1.html",
      "tweet_url": "https://twitter.com/rustlang/status/1121454622898622464",
      "date_published": "2019-04-25T00:00:00+00:00",
      "author": {
        "name": "The Rust Release Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "aeb77fc8-4dba-424f-b119-aa77300b683d",
      "title": "Reviewing Sled: Part II",
      "content_text": "Sled is an embedded database engine written in Rust. It takes a very different approach for how to store data, which I’m really excited to see. And with that, let’s be about it. In stopped in my last post when getting to the flusher, which simply sleep and call flush on the iobufs.",
      "url": "https://ayende.com/blog/186785-A/reviewing-sled-part-ii?Key=d48f04ae-25dc-428e-992a-ff38587a7c72",
      "date_published": "2019-04-01T00:00:00+00:00",
      "author": {
        "name": "Ayende Rahien",
        "url": "https://ayende.com/blog/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "88bf7467-0164-4b01-a0fc-1b33ffe55f45",
      "title": "Non-lexical lifetimes in Rust",
      "content_text": "This blog is for new Rustacean, who's just started exploring Rust. Demonstrating a scenario that is possible because of the Non-lexical lifetimes feature. This feature was introduced in Rust 2018 edition. Earlier than, in Rust 2015, it was not possible.",
      "url": "https://blog.knoldus.com/non-lexical-lifetimes-in-rust/",
      "tweet_url": "https://twitter.com/ayushmishra2005/status/1118766787753959424",
      "date_published": "2019-04-18T06:39:28+00:00",
      "author": {
        "name": "Ayush Mishra",
        "url": "https://blog.knoldus.com/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "b35d346f-7773-44c5-8db5-4cbe95fb3749",
      "title": "More than coders",
      "content_text": "Lately, the compiler team has been changing up the way that we work. Our goal is to make it easier for people to track what we are doing and – hopefully – get involved. This is an ongoing effort, but one thing that has become clear immediately is this: the compiler team needs more than coders.",
      "url": "http://smallcultfollowing.com/babysteps/blog/2019/04/15/more-than-coders/",
      "tweet_url": "https://twitter.com/nikomatsakis/status/1117830408119492608",
      "date_published": "2019-04-15T00:00:00-04:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e335233d-84ab-4f50-9cc0-5e401a6b5363",
      "title": "AiC: Collaborative summary documents",
      "content_text": "One of the challenges I see with how we often do design is that this “solution space” is actually quite implicit. We are exploring it through comments, but each comment is only tracing out one path through the terrain. I wanted to see if we could try to represent the solution space explicitly. This post is a kind of “experience report” on one such experiment, what I am calling a collaborative summary document (in contrast to the more standard summary comment that we often do).",
      "url": "http://smallcultfollowing.com/babysteps/blog/2019/04/22/aic-collaborative-summary-documents/",
      "tweet_url": "https://twitter.com/nikomatsakis/status/1120433840558878720",
      "date_published": "2019-04-22T00:00:00-04:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "8fbc326e-e356-480c-8708-c6b4d8d66719",
      "title": "Things I Enjoy in Rust: Error Handling",
      "content_text": "I’ve already talked about how I like how enums are used in Rust. They make it easy to express multiple states and the state’s related data. One place this is excellently utilized is error handling.",
      "url": "https://blog.jonstodle.com/things-i-enjoy-in-rust-error-handling/",
      "tweet_url": "https://twitter.com/jonstodle/status/1119909430928334850",
      "date_published": "2019-04-21T12:00:00+02:00",
      "author": {
        "name": "Jon Grythe Stødle",
        "url": "https://blog.jonstodle.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "adc39c05-2876-4ef4-b071-b4133c96c8ca",
      "title": "Futures 0.1 Compatibility Layer",
      "content_text": "Rust’s futures ecosystem is currently split in two: On the one hand we have the vibrant ecosystem built around futures@0.1 with its many libraries working on stable Rust and on the other hand there’s the unstable std::future ecosystem with support for the ergonomic and powerful async/await language feature. To bridge the gap between these two worlds we have introduced a compatibility layer as part of the futures@0.3 extension to std::future. This blog post aims to give an overview over how to use it.",
      "url": "https://rust-lang-nursery.github.io/futures-rs/blog/2019/04/18/compatibility-layer.html",
      "date_published": "2019-04-18T00:00:00+00:00",
      "author": {
        "name": "Josef Brandl",
        "url": "https://rust-lang-nursery.github.io/futures-rs/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "fc88b6c6-cf80-4546-b03a-94bcdebf6232",
      "title": "Using DMA to transfer data with Embedded Rust",
      "content_text": "In this article you will learn how to use the Direct Memory Access (DMA) controller to transfer data from memory to the built-in Digital to Analog Converter (DAC) on the STM32F3DISCOVERY board.",
      "url": "https://flowdsp.io/blog/stm32f3-02-dac-dma/",
      "tweet_url": "https://twitter.com/antvangelder/status/1120660171028615169",
      "date_published": "2019-04-23T00:00:00+00:00",
      "author": {
        "name": "Antoine van Gelder",
        "url": "https://flowdsp.io/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "c66e7e63-ea76-4d35-a15b-0bf56a905b07",
      "title": "Rust's 2019 roadmap",
      "content_text": "Each year the Rust community comes together to set out a roadmap. This year, in addition to the survey, we put out a call for blog posts in December, which resulted in 73 blog posts written over the span of a few weeks. The end result is the recently-merged 2019 roadmap RFC. To get all of the details, please give it a read, but this post lays out some of the highlights.",
      "url": "https://blog.rust-lang.org/2019/04/23/roadmap.html",
      "tweet_url": "https://twitter.com/rustlang/status/1120729307905609728",
      "date_published": "2019-04-23T00:00:00+00:00",
      "author": {
        "name": "The Rust Core Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "bd3e3e37-90f2-4941-ba7c-00fdae65bdac",
      "title": "Using Wasmer for Plugins Part 3",
      "content_text": "In the last two posts of this series we covered all of the things we would need to use Wasmer as the base for a plugin system. In part one we went over the basics of passing simple data in and out of a web assembly module, in part two we dug deeper into how you might do the same with more complicated data. In this part we are going to explore how we might ease the experience for people developing plugins for our application.",
      "url": "https://wiredforge.com/blog/wasmer-plugin-pt-3/index.html",
      "tweet_url": "https://twitter.com/FreeMasen/status/1120654794027339783",
      "date_published": "2019-04-22T00:00:00+00:00",
      "author": {
        "name": "Robert Masen",
        "url": "https://wiredforge.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "3e1e598a-b186-40d1-b03c-bae1444a6ee7",
      "title": "What I learned from my failed attempt of writing baremetal android in Rust",
      "content_text": "Every year I define a super ambitious goal for my learning process to keep myself motivated on the way. This year I defined my goal as writing a bootable kernel image for my old HTC One X android smartphone. I knew it was going to be hard but I never thought I’d fail in the end. It was clearly the Dunning–Kruger effect that made me think that I can achieve what I want to do with my limited knowledge/experience on the subject.",
      "url": "https://onatm.dev/2019/04/22/what-i-learned-from-my-failed-attempt-of-writing-baremetal-android-in-rust/",
      "tweet_url": "https://twitter.com/onatm/status/1120291086335971333",
      "date_published": "2019-04-22T12:35:34+00:00",
      "author": {
        "name": "Onat Mercan",
        "url": "https://onatm.dev/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "675975c8-b21a-4d87-8ac3-7e8c74fd8897",
      "title": "Things I Enjoy in Rust: Enums",
      "content_text": "I’ve been diving into Rust for the last couple of months, after my colleague started talking about it. I’ve been wanting to learn a lower level language, but C++ or something of the like have always seemed too daunting for me to even start.\n\nI’d heard of Rust before, and great things too, but hadn’t set apart time to look into it. I finally took the dive. And boy, am I glad I did.\n\nA lot of people talk about the borrowing system of Rust, or how fast it, or the strict type system. All of which are great things, but it’s not what I’m going to write about here. I’m excited about enums.",
      "url": "https://blog.jonstodle.com/things-i-enjoy-in-rust-enums/",
      "tweet_url": "https://twitter.com/jonstodle/status/1118931281822257153",
      "date_published": "2019-04-18T18:00:00+02:00",
      "author": {
        "name": "Jon Grythe Stødle",
        "url": "https://blog.jonstodle.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "9a01af1b-fcfa-464e-817f-9a6ea54cf9b7",
      "title": "Building an ASCII image renderer",
      "content_text": "Although I’m a beginner in Rust, I would like to share the process behind a toy application that I developed recently. It’s a very simple command line tool that prints an image file using ASCII symbols directly to your terminal. ",
      "url": "https://medium.com/carwow-product-engineering/getting-a-bit-rusty-1285c49e520e",
      "date_published": "2019-04-18T12:54:32.732+00:00",
      "author": {
        "name": "Stepan Khodzhaian",
        "url": "https://medium.com/@mightykho.dev"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "2c21dd65-6a7c-4ce6-97c6-f7a383c331bf",
      "title": "Hangman Game Development Tutorial",
      "content_text": "This tutorial was part of a whorkshop which took place at the Rust Community Stuttgart on April, 17th 2019. We will develop a Hangman text based console game within this tutorial.",
      "url": "https://github.com/rusticus-io/hangman",
      "tweet_url": "https://twitter.com/thinkrapido/status/1118833143845408768",
      "date_published": "2019-04-17T00:00:00+00:00",
      "author": {
        "name": "Romeo Disca",
        "url": "https://github.com/thinkrapido"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "0cc3f8b6-7cd9-423f-96f2-569b660e2bf3",
      "title": "Lessons moving from iOS delegates to Rust async",
      "content_text": "The majority of my async programming experience is on iOS and let me tell you, life is good. You can easily dispatch work to background threads. You can bring work back to the main thread. You can mark your classes as delegates and when you need to handle some event the OS will use a magic pre-existing thread pool to invoke your method and you can do whatever you like. It works perfectly almost all the time, except for when it doesn’t because of race conditions or it crashes due to concurrency. Life is good.\n\nRust is less tolerant about the crashing part. While I agree that crashing is bad in principle, avoiding it has significant ramifications for how you can write async code at all. Recently I’ve been finding out what the differences are. Obviously this means I’m more of a noob than an expert, but I’m currently in a good position to point out what the confusing parts are and what the Rust solutions seem to be. (But I’m a noob so take it with a grain of salt.)",
      "url": "https://thomask.sdf.org/blog/2019/04/19/lessons-moving-from-ios-delegates-to-rust-async.html",
      "tweet_url": "https://twitter.com/teek_eh/status/1119197978898518017",
      "date_published": "2019-04-19T19:30:00+10:00",
      "author": {
        "name": "Thomas Karpiniec",
        "url": "https://thomask.sdf.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "bda9c409-db67-4283-aadc-ffb54c3ad00d",
      "title": "Elements of Rust: style and philosophy",
      "content_text": "A collection of software engineering techniques for effectively expressing intent with Rust.",
      "url": "https://github.com/ferrous-systems/elements-of-rust",
      "date_published": "2019-04-22T00:00:00+00:00",
      "author": {
        "name": "Ferrous Systems ",
        "url": "https://github.com/ferrous-systems"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4450a6c3-3baa-4485-853b-910969aa0119",
      "title": "Rust, dudect and constant-time crypto in debug mode",
      "content_text": "The following are observations from when I started testing my own pure-Rust crypto library, including its dependencies, for constant-time execution. Starting with a short introduction to dudect and how it can be used to test code for timing-based side-channel vulnerabilities. Then discussing the process of discovering a short-circuit that resulted in variable-time execution, in dalek-cryptography’s subtle library and how this seems to relate to Rust codegen option opt-level.",
      "url": "https://brycx.github.io/2019/04/21/rust-dudect-constant-time-crypto.html",
      "date_published": "2019-04-21T00:00:00+00:00",
      "author": {
        "name": "brycx",
        "url": "https://brycx.github.io/"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "50725324-0ca7-4137-8e95-9d5e023881f8",
      "title": "splines-1.0.0 and first release candidate",
      "content_text": "today, I’m going to talk about the splines crate. And more specifically, the splines-1.0.0-rc.1 release candidate I uploaded today on crates.io. Maybe you’re wondering what a spline is, in the first place. A spline is a mathematic curve that is defined by several polynomials. You can picture them mentally by several small and simple curves combined to each others, giving the curve an interesting shape and properties. Now why we want splines is easy to understand: imagine a curve, something smooth and a bit complex (maybe even with loops). Now, imagine you want to make an object move along that curve. How do you represent that curve and how to you “make something advance along it?”",
      "url": "https://phaazon.net/blog/splines-1.0.0-rc.1",
      "date_published": "2019-04-22T01:10:00+00:00",
      "author": {
        "name": "Dimitri Sabadie",
        "url": "http://phaazon.net/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "899be7d9-392f-4467-aa75-85b2d3e913f7",
      "title": "Using Wasmer for Plugins Part 2",
      "content_text": "In this post we are going to cover how we could pass more complicated data from the wasm module back to the runner.",
      "url": "https://wiredforge.com/blog/wasmer-plugin-pt-2",
      "date_published": "2019-04-20T00:00:00+00:00",
      "author": {
        "name": "Robert Masen",
        "url": "https://wiredforge.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "036c9563-3d69-4cf8-a59a-718976fded92",
      "title": "Generic returns in Rust",
      "content_text": "After casting around for a new platform to learn recently, I’ve decided to dive into Rust. Being mostly familiar with untyped languages like Ruby and JavaScript, it’s interesting to learn a statically typed language and see how it changes how one writes programs. There’s a common misconception amongst dynamic typing fans that static typing means you write the same programs, they’re just more verbose and come with more restrictions. And while there is certainly a cost to only being allowed to write type-safe programs, a good type system actually lets you write programs you cannot write in dynamic languages. In Rust, generic return values are a good example of this.",
      "url": "https://blog.jcoglan.com/2019/04/22/generic-returns-in-rust/",
      "tweet_url": "https://twitter.com/mountain_ghosts/status/1120389671924715520",
      "date_published": "2019-04-22T00:00:00+00:00",
      "author": {
        "name": "James Coglan",
        "url": "https://blog.jcoglan.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "3d03c657-cc87-4a01-9547-a583e6ec355f",
      "title": "Rust & The Machine",
      "content_text": "The intended audience is newly started Rust users, especially if you have been using mostly garbage collection to manage memory recently. The explanation is very machine-oriented, but I promise this way is faster than fighting the answers out of the compiler case-by-case. (Elaboration on this and other choices is at the end.)\n\nRust’s memory management is slick enough to barely notice you’re doing any. It can make explaining compiler errors very opaque. If you are already familiar with or willing to learn bare-minimum microarchitecture, just the basics of function execution and memory usage, this article is an efficient crash course for finding the low resistance paths to writing natural Rust.",
      "url": "https://medium.com/@orbitalK/why-the-machine-b9803a77fa29",
      "date_published": "2019-03-27T06:52:47.011+00:00",
      "author": {
        "name": "Prolific K",
        "url": "https://medium.com/@orbitalK"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "11088ce0-5efd-4232-8541-dcb76a8ed72e",
      "title": "Rust for Python Developers: Ownership and Borrowing",
      "content_text": "Following the previous post, here I am going to introduce the key concepts of Rust — Ownership and Borrowing.",
      "url": "https://medium.com/@rajasekar3eg/rust-for-python-developers-ownership-and-borrowing-cd85fc10cae4",
      "date_published": "2019-04-09T21:14:25.078+00:00",
      "author": {
        "name": "Raja Sekar",
        "url": "https://medium.com/@rajasekar3eg"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "da05eb25-52b2-48f6-9008-944a9a95ccaa",
      "title": "An interview with the creator of Gleam: an ML like language for the Erlang VM with a compiler written in Rust",
      "content_text": "An interesting thing about Gleam is that its compiler is written in Rust. I think that Rust is a sort of ML + C language. I like C since the developer is at the driver seat driving with manual transmission. I can’t explain very well but I have always seen C as a simple and powerful language but I have always disliked C++. Knowing that I like ML and C you might understand why I find Rust an interesting language. To sum up we (me and Juan Bono) decided to do this interview with Louis Pilfold not only because of what it is, but also because it is implemented in Rust.",
      "url": "https://notamonadtutorial.com/an-interview-with-the-creator-of-gleam-an-ml-like-language-for-the-erlang-vm-with-a-compiler-e94775f60dc7",
      "date_published": "2019-04-01T16:30:35.129+00:00",
      "author": {
        "name": "unbalancedparentheses",
        "url": "https://notamonadtutorial.com/@unbalancedparen"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a085423c-ec98-4fff-ba66-7c23926175d9",
      "title": "Learning Parser Combinators With Rust",
      "content_text": "This article teaches the fundamentals of parser combinators to people who are already Rust programmers. It assumes no other knowledge, and will explain everything that isn't directly related to Rust, as well as a few of the more unexpected aspects of using Rust for this purpose. It will not teach you Rust if you don't already know it, and, if so, it probably also won't teach you parser combinators very well.",
      "url": "https://bodil.lol/parser-combinators/",
      "tweet_url": "https://twitter.com/bodil/status/1118946325377245184",
      "date_published": "2019-04-18T00:00:00+00:00",
      "author": {
        "name": "Bodil Stokke",
        "url": "https://bodil.lol/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "3d938fcd-0108-499a-9929-841d1999db4b",
      "title": "Plume: Federated blogging application",
      "content_text": "Plume is a federated blogging engine, based on ActivityPub. It uses the Rocket framework, and Diesel to interact with the database.",
      "url": "https://github.com/Plume-org/Plume",
      "date_published": "2019-04-22T00:00:00+00:00",
      "author": {
        "name": "Plume Developers",
        "url": "https://joinplu.me/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "00b32f85-009b-464f-8e31-c9930a0b67f3",
      "title": "AiC: Adventures in consensus",
      "content_text": "In the talk I gave at Rust LATAM, I said that the Rust project has always emphasized finding the best solution, rather than winning the argument. I think this is one of our deepest values. It’s also one of the hardest for us to uphold.\n\nLet’s face it – when you’re having a conversation, it’s easy to get attached to specific proposals. It’s easy to have those proposals change from “Option A” vs “Option B” to “my option” and “their option”. Once this happens, it can be very hard to let them “win” – even if you know that both options are quite reasonable.\n\nThis is a problem I’ve been thinking a lot about lately. So I wanted to start an irregular series of blog posts entitled “Adventures in consensus”, or AiC for short. These posts are my way of exploring the topic, and hopefully getting some feedback from all of you while I’m at it.\n\nThis first post dives into what a phrase like “finding the best solution” even means (is there a best?) as well as the mechanics of how one might go about deciding if you really have the “best” solution. Along the way, we’ll see a few places where I think our current process could do better.",
      "url": "http://smallcultfollowing.com/babysteps/blog/2019/04/19/aic-adventures-in-consensus/",
      "tweet_url": "https://twitter.com/nikomatsakis/status/1119197163999911936",
      "date_published": "2019-04-19T00:00:00-04:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "b8b79bb1-c176-43e8-bad9-943285e361c6",
      "title": "12 Killer Rust Libraries You Should Try",
      "content_text": "I’ve just crossed a 20K LOC in one of my bigger Rust projects, and thought about pausing for a moment and sharing some great Rust libraries that I’ve used.",
      "url": "https://medium.com/@jondot/12-killer-rust-libraries-you-should-know-c60bab07624f",
      "tweet_url": "https://twitter.com/jondot/status/1119260550985285632",
      "date_published": "2019-04-19T15:21:32.205+00:00",
      "author": {
        "name": "Dotan Nahum",
        "url": "https://medium.com/@jondot"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "d11c58e5-419a-4c3e-923d-b2bac810d445",
      "title": "Using Wasmer for Plugins Part 1",
      "content_text": "A few months ago, the Wasmer team announced a Web Assembly (aka wasm) interpreter that could be embedded into rust programs. This is particularly exciting for anyone looking to add plugins to their project and since Rust provides a way to directly compile programs to wasm, it seems like a perfect option. In this series of blog posts we are going to investigate what building a plugin system using wasmer and rust would take.",
      "url": "https://wiredforge.com/blog/wasmer-plugin-pt-1",
      "tweet_url": "https://twitter.com/FreeMasen/status/1119652926048415745",
      "date_published": "2019-04-19T00:00:00+00:00",
      "author": {
        "name": "Robert Masen",
        "url": "https://wiredforge.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "49f9c596-e61c-402d-a2de-21c8350ccac6",
      "title": "LeftWM - A tiling window manager for Adventurers",
      "content_text": "A tiling window manager written in Rust for stability and performance. The core of left is designed to do one thing and one thing well. Be a window manager. Because you probably want more than just a black screen LeftWM is built around the concept of theming. With themes you can choose between different bar / compositor / background / colors, whatever makes you happy. LeftWM has been built from the very beginning to support multiple screens and has been built around ultrawide monitors. You will see this with the default key bindings",
      "url": "http://leftwm.org/",
      "date_published": "2019-04-22T00:00:00+00:00",
      "author": {
        "name": "lex148",
        "url": "https://github.com/lex148"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "b2657146-974b-41b9-ba31-8aae62c25f7d",
      "title": "6 useful Rust macros that you might not have seen before",
      "content_text": "Below are 6 Rust macros that are worth taking a look at to improve your project. Rust macros are a great feature that can reduce code boilerplate and be a time saver for programmers. They also offer flexibility for developers to use metaprogramming to add new features to the language and package them in a way that is easy to integrate into code. They are one of the more powerful features of the language and this led me to search github and cargo to see what was out there. Below are some interest macros that are not as well known.",
      "url": "https://medium.com/@benmcdonald_11671/6-useful-rust-macros-that-you-might-not-have-seen-before-59d1386f7bc5",
      "date_published": "2019-04-22T02:00:39.198+00:00",
      "author": {
        "name": "Ben McDonald",
        "url": "https://medium.com/@benmcdonald_11671"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "f2b4f953-be42-4454-b073-1804aa4a8bb6",
      "title": "Web Development with Rust — 03/x: Create a REST API",
      "content_text": "The most common pattern for creating APIs is REST. We will discover how we can build an API in Rust which conforms with the REST pattern.",
      "url": "https://dev.to/gruberb/web-development-with-rust-03-x-create-a-rest-api-3i82",
      "tweet_url": "https://twitter.com/byteadventures/status/1117713358273351681",
      "date_published": "2019-04-15T00:00:00+00:00",
      "author": {
        "name": "Bastian Gruber",
        "url": "https://dev.to/gruberb"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "77c8e0ed-ccb6-4f29-8ab7-1e8c3cd5d39d",
      "title": "Rust Associated Type",
      "content_text": "Associated Types in Rust are similar to Generic Types; however, Associated Types limit the types of things a user can do, which consequently facilitates code management. Among the Generic Types of traits, types that depend on the type of trait implementation can be expressed by using the Associated Type syntax. By comparing the Associated and Generic Types, you can get a better understanding of Associated Types.",
      "url": "https://medium.com/codechain/rust-associated-type-b0193c22eacd",
      "tweet_url": "https://twitter.com/kwangyulseo/status/1118109763579961344",
      "date_published": "2019-04-16T10:08:09.783+00:00",
      "author": {
        "name": "Park Juhyung",
        "url": "https://medium.com/@majecty"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "53c58e52-158a-40e1-b59d-3a9ad1a92edb",
      "title": "Runtime",
      "content_text": "The vision of the Async Ecosystem WG is to refine the async Rust experience until it matches the quality and ease of working with today's std. There are a lot of components in that vision, including async/await syntax and borrow checker integration. Today, though, we'd like to introduce another component: Runtime, a crate that makes working with async code feel closer to working with std, and a stepping stone toward ecosystem standardization.",
      "url": "https://blog.yoshuawuyts.com/runtime/",
      "tweet_url": "https://twitter.com/yoshuawuyts/status/1118205470106378241",
      "date_published": "2019-04-16T00:00:00+00:00",
      "author": {
        "name": "Yoshua Wuyts",
        "url": "https://blog.yoshuawuyts.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "8770e0f9-eca2-4f58-b2f4-7761dbcf81bb",
      "title": "Rust: beyond the typechecker",
      "content_text": "This post will be different from the previous ones, since I’m going to present some of the early results of my work as a PhD student at the Prosecco team in ...",
      "url": "https://blog.merigoux.ovh/en/2019/04/16/verifying-rust.html",
      "date_published": "2019-04-16T00:00:00+00:00",
      "author": {
        "name": "Denis Merigoux",
        "url": "https://blog.merigoux.ovh/en/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "524e6489-33da-4635-977c-9d86e839d185",
      "title": "Proper Notation for Scalar Multiplication in Rust: Dispatching on the Right-Hand Side of Operators and Rusts's Orphan Rule",
      "content_text": "The scalar multiplication in a vector space is written kv in math, where k is a scalar value (e.g. a number) and v is a vector. It would be nice to write k * v in programming languages, to stay close to the familiar notation. Object-oriented languages typically only support calling methods on the first argument. But the scalar normally doesn't know about vectors, so it can't easily do that.",
      "url": "https://www.jstuber.net/2019/04/17/scalar-multiplication-in-rust/",
      "tweet_url": "https://twitter.com/anystring/status/1118499557988556800",
      "date_published": "2019-04-17T00:00:00+00:00",
      "author": {
        "name": "Jürgen Stuber",
        "url": "https://www.jstuber.net/index.html"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d171d946-7117-4e2a-bfae-0a4089cdfa9d",
      "title": "Complex data types and the Rust FFI",
      "content_text": "There are a few good resources on the internet about using the Rust FFI to expose functions written in Rust to other languages. However, I found little information about passing data types between languages. To help remedy this situation, I describe in this post a simple Rust library that I wrote to explore how to pass complex data types from Rust to C.",
      "url": "http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/",
      "tweet_url": "https://twitter.com/kmdouglass/status/1113863925542551553",
      "date_published": "2019-04-04T17:51:55+00:00",
      "author": {
        "name": "Kyle M. Douglass",
        "url": "http://kmdouglass.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "8042dc34-344d-452f-818c-bebe0f6cf573",
      "title": "Building a pub/sub server with Sonr (part 1)",
      "content_text": "This is the first part in a two part series where we explore Sonr by writing a pubsub server in Rust using Sonr.",
      "url": "https://hagsteel.com/posts/building-a-pub-sub-with-sonr-part-1/",
      "date_published": "2019-04-10T00:00:00+01:00",
      "author": {
        "name": "Jonas",
        "url": "https://hagsteel.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ad1e9e94-37b0-4328-93d5-216cb58cd905",
      "title": "Using Rust Generics to Enforce DB Record State",
      "content_text": "I’m currently working on a (private in 2019, public in july 2019) project which is a NoSQL database writting in Rust. To help us manage the correctness and lifecycle of database entries, I have been using advice from the Rust Embedded Group’s Book. As I have mentioned in the past, state machines are a great way to design code, so let’s plot out the state machine we have for Entries",
      "url": "https://fy.blackhats.net.au/blog/html/2019/04/13/using_rust_generics_to_enforce_db_record_state.html",
      "tweet_url": "https://twitter.com/Erstejahre/status/1116877081395073024",
      "date_published": "2019-04-13T00:00:00+00:00",
      "author": {
        "name": "Firstyear",
        "url": "https://fy.blackhats.net.au/blog/html/index.html"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c652e06d-95e4-4da0-8ce8-a94c007587d7",
      "title": "Announcing Rust 1.34.0",
      "content_text": "The largest feature in this release is the introduction of alternative cargo registries. The release also includes support for ? in documentation tests, some improvements for #[attribute(..)]s, as well as the stabilization of TryFrom. Read on for a few highlights, or see the detailed release notes for additional information.",
      "url": "https://blog.rust-lang.org/2019/04/11/Rust-1.34.0.html",
      "tweet_url": "https://twitter.com/rustlang/status/1116398059775234048",
      "date_published": "2019-04-11T00:00:00+00:00",
      "author": {
        "name": "The Rust Release Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ea434653-4ba2-47c0-bc91-ba9c521dc419",
      "title": "Face Detection with Actix Web",
      "content_text": "Last article I wrote about how to use tensorflow with rust. This time we're going to take what we've built on, and serve it as an HTTP API call. As Actix Web is nearing its inevitable 1.0 release, I thought it would be a great time to build something with it.",
      "url": "https://cetra3.github.io/blog/face-detection-with-actix-web/",
      "date_published": "2019-04-11T00:00:00+00:00",
      "author": {
        "name": "cetra3",
        "url": "https://github.com/cetra3/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "e57004c9-8a39-47af-bd60-b97fbcd07e7a",
      "title": "cargo-call-stack, part 2: getting call graph information from rustc",
      "content_text": "In a previous post I described the current implementation of cargo-call-stack, a static stack usage analysis tool. In the second part of that post I described the problems the tool runs into when dealing with indirect function calls (both function pointer calls and dynamic dispatch) and proposed improving the output of the tool by having rustc inject type information in the LLVM IR it produces.\n\nWhile discussing that idea with rustc developers they noted that the compiler could emit information that’s more relevant to call graph analysis than just the signatures of functions and trait methods. In this post I’ll describe the call graph metadata I’m currently implementing in rustc and how it will help tools like cargo-call-stack. By the way, I have a feature branch of cargo-call-stack that uses this upcoming rustc feature if you want to try it out but you’ll need to build a custom rustc.",
      "url": "https://blog.japaric.io/stack-analysis-2/",
      "tweet_url": "https://twitter.com/japaricious/status/1117078171613061121",
      "date_published": "2019-04-13T00:00:00+00:00",
      "author": {
        "name": "Jorge Aparicio",
        "url": "http://blog.japaric.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "45b386b4-5b90-42a7-b17b-00aeb72cde34",
      "title": "Keeping Rust projects' README.md code examples up-to-date",
      "content_text": "Because keeping documentation up-to-date is very important (and should be a must have!), we need to check if the examples are still valid after every new updates. Luckily, rustdoc already makes such things very easy. But now, let's say you have examples outside of your Rust code. How can they be tested?",
      "url": "https://blog.guillaume-gomez.fr/articles/2019-04-13+Keeping+Rust+projects%27+README.md+code+examples+up-to-date",
      "tweet_url": "https://twitter.com/imperioworld_/status/1117002899496808448",
      "date_published": "2019-04-13T01:00:00+00:00",
      "author": {
        "name": "Guillaume Gomez",
        "url": "https://blog.guillaume-gomez.fr/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "c16ea768-9518-4a40-b51d-9c5e978994a2",
      "title": "Neat new feature in Rust: iter::from_fn",
      "content_text": "Recently Rust has introduced a couple of new features, and the one that caught my eye in particular was std::iter::from_fn, which let’s you make an iterator from a function, which is most of what that macro was trying to do, so I thought I would try to convert the various places I was using the macro to use the new function instead…",
      "url": "https://weblog.latte.ca/blake/tech/rust/makingiterators.html",
      "tweet_url": "https://twitter.com/bwinton/status/1117178003920957440",
      "date_published": "2019-04-13T20:49:00+00:00",
      "author": {
        "name": "Blake Winton",
        "url": "https://weblog.latte.ca/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "30a32647-13d1-4d87-89c0-804ef7d456e6",
      "title": "Tricks In Arc Swap",
      "content_text": "This is a continuation of the Making Arc more atomic post. In short, ArcSwap is a place where you can atomically store and load an Arc, similar to RwLock<Arc<T>> but without the locking. It’s a good tool if you have some data that is very frequently read but infrequently modified, like configuration or an in-memory database that answers millions of queries per second, but is replaced only every 5 minutes. The canonical example for this is routing tables ‒ you want to read them with every passing packet, but you change them only when routing changes.",
      "url": "https://vorner.github.io/2019/04/06/tricks-in-arc-swap.html",
      "date_published": "2019-04-06T00:00:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ebf00798-d92a-4f61-8b2b-8ffceb2c09a9",
      "title": "Protocols in Tokio (i3 IPC)",
      "content_text": "There’s a dearth of blog posts online that cover the details of implementing a custom protocol in tokio, at least that I’ve found. I’m going to cover some of the steps I went through in implementing an async version i3wm’s IPC.",
      "url": "https://leshow.github.io/post/impl_proto_tokio/",
      "date_published": "2019-04-08T18:53:18-04:00",
      "author": {
        "name": "Evan Cameron",
        "url": "https://leshow.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "afbe8437-4dca-40c1-b6ab-034fbd57c9cd",
      "title": "Mysteriously Low Hanging Fruit: A Big Improvement To LLD For Rust Debug Builds",
      "content_text": "LLD is generally much faster than the GNU ld.bfd and ld.gold linkers, so you would think it has been pretty well optimised. You might then be surprised to discover that a 36-line patch dramatically speeds up linking of Rust debug builds, while also shrinking the generated binaries dramatically, both in simple examples and large real-world projects.",
      "url": "https://robert.ocallahan.org/2019/04/mysteriously-low-hanging-fruit-big.html",
      "tweet_url": "https://twitter.com/rustlang/status/1116122615393988613",
      "date_published": "2019-04-11T00:00:00+00:00",
      "author": {
        "name": "Robert O'Callahan",
        "url": "https://robert.ocallahan.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "914d12c5-ea4a-49f4-8466-1f15a9c3340a",
      "title": "Using rav1e - from your own code",
      "content_text": "AV1 is a modern video codec brought to you by an alliance of many different bigger and smaller players in the multimedia field. rav1e: The safest and fastest AV1 encoder, built by many volunteers and Mozilla/Xiph developers. crav1e: A companion crate, written by yours truly, that provides a C-API, so the encoder can be used by C libraries and programs. This article will just give a quick overview of the API available right now and it is mainly to help people start using it and hopefully report issues and problem.",
      "url": "https://dev.to/luzero/using-rav1e-from-your-own-code-2ie0",
      "date_published": "2019-04-09T00:00:00+00:00",
      "author": {
        "name": "Luca Barbato",
        "url": "https://dev.to/luzero"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "99bfc2e1-cc1f-4047-941f-627f7e222d75",
      "title": "Writing UEFI application in Rust from scratch",
      "content_text": "Recently, x86_64-unknown-uefi target was added into Rust mainline (https://github.com/rust-lang/rust/pull/56769). So, I tried to write UEFI application with this update. There exists an awesome crate, uefi-rs, which provides Rust interface for UEFI application. However, this is my first time to write UEFI application, so to understand what happens in it, I didn’t use any existing crate.",
      "url": "https://medium.com/garasubo/writing-uefi-application-in-rust-from-scratch-882bf35a4d63",
      "date_published": "2019-03-31T08:31:22.455+00:00",
      "author": {
        "name": "garasubo (ガラスボー)",
        "url": "https://medium.com/@garasubo"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "700e8697-e3f3-49ff-bf87-03cfb598ff0d",
      "title": "Alacritty Version 0.3.0",
      "content_text": " Alacritty is a terminal emulator with a strong focus on simplicity and performance. With such a strong focus on performance, included features are carefully considered and you can always expect Alacritty to be blazingly fast. By making sane choices for defaults, Alacritty requires no additional setup. However, it does allow configuration of many aspects of the terminal. With this release, Alacritty has officially entered the beta stage – there are still a few missing features and bugs to be fixed, but it is already used by many as a daily driver.",
      "url": "https://blog.christianduerr.com/alacritty_030_announcement",
      "date_published": "2019-04-07T00:00:00+00:00",
      "author": {
        "name": "Christian Duerr",
        "url": "https://blog.christianduerr.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "54d19ed4-0cb7-4ab9-939e-5afcdf8b0ca5",
      "title": "How to Mock Time in Rust Tests and Cargo Gotchas We Met",
      "content_text": "I'm working in a team developing a big Rust project recently. The project has some features depending on time. We, the developers, want to be able to mock the time in test. In this post, I'll talk about the problems we have met, mostly related to Cargo.",
      "url": "https://blog.iany.me/2019/03/how-to-mock-time-in-rust-tests-and-cargo-gotchas-we-met",
      "tweet_url": "https://twitter.com/doitian/status/1112329448119066624",
      "date_published": "2019-03-31T00:00:00+00:00",
      "author": {
        "name": "Ian Yang",
        "url": "https://blog.iany.me"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "f0be7972-25a7-4ff9-af00-904780465c8f",
      "title": "A Story of Rust",
      "content_text": "Introducing Rust in an Enterprise Environment...",
      "url": "https://jobs.zalando.com/tech/blog/story-rust/",
      "tweet_url": "https://twitter.com/ZalandoTech/status/1111547079929856000",
      "date_published": "2019-03-28T00:00:00+00:00",
      "author": {
        "name": "Christian Douven",
        "url": "https://jobs.zalando.com/tech/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "5643e56a-6a6f-435e-8625-b58ebb5dca22",
      "title": "The Wrangler CLI: Deploying Rust with WASM on Cloudflare Workers",
      "content_text": "Today, we're open sourcing and announcing wrangler, a CLI tool for building, previewing, and publishing Rust and WebAssembly Cloudflare Workers. If that sounds like some word salad to you, that's a reasonable reaction.",
      "url": "https://blog.cloudflare.com/introducing-wrangler-cli/",
      "tweet_url": "https://twitter.com/Cloudflare/status/1111299645546758145",
      "date_published": "2019-03-28T16:08:45+00:00",
      "author": {
        "name": "Ashley Williams",
        "url": "https://blog.cloudflare.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "5826453d-6731-41d9-a4f5-f5dbce6ef1df",
      "title": "Arraigning a Statement, vol. 2",
      "content_text": "Last time we defined a minimum viable implementation for mutagen statement removal: Remove only function call statements whose results are not returned from the surrounding block and whose AST do not contain any Assign expressions.",
      "url": "https://llogiq.github.io/2019/03/14/stmt2.html",
      "tweet_url": "https://twitter.com/llogiq/status/1106099031825092608",
      "date_published": "2019-03-14T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "c702047e-47c7-493a-b73e-55a4394eb6da",
      "title": "hunter: ranger-like file browser written in Rust",
      "content_text": "hunter is a fast and lag-free file browser/manager for the terminal. It features a heavily asynchronous and multi-threaded design and all disk IO happens off the main thread in a non-blocking fashion, so that hunter will always stay responsive, even under heavy load on a slow spinning rust disk, even with all the previews enabled.",
      "url": "https://github.com/rabite0/hunter",
      "tweet_url": "https://twitter.com/wezm/status/1114687460506607616",
      "date_published": "2019-04-07T00:00:00+00:00",
      "author": {
        "name": "rabite0",
        "url": "https://github.com/rabite0"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "dcd70897-0b31-4930-b57d-3fc567e64c98",
      "title": "A Basic Web Application with Rust and Actix-web",
      "content_text": "As a first little project in Rust I thought I'd do something familiar, so I created a small web application, which we'll check out in this post.",
      "url": "https://zupzup.org/rust-webapp/",
      "date_published": "2019-04-07T00:00:00+00:00",
      "author": {
        "name": "Mario Zupan",
        "url": "https://zupzup.org/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "63c81ff0-ee39-437f-a299-70173f639777",
      "title": "Javascript evaluator part 2: Parser and Basic evaluator",
      "content_text": "This is the second part of writing Javascript evaluator series. I’m going to talk about my project developing Javascript evaluator in Rust. This post is going to briefly introduce Parsing that’s build on top of the results from Lexer in the first post. Then I will cover elements of evaluation of abstract syntax tree (AST).",
      "url": "https://medium.com/@retep007/javascript-evaluator-part-2-parser-and-basic-evaluator-d306ff1aec83",
      "date_published": "2019-04-08T06:39:05.543+00:00",
      "author": {
        "name": "Peter Hrvola",
        "url": "https://medium.com/@retep007"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "749e48bb-50e5-4e7e-8e17-9dd73e1776f2",
      "title": "A Love Letter to Rust Macros",
      "content_text": "It’s no secret to people who know me that I’m a huge fan of the Rust programming language. I could talk for hours about the brilliance of the ownership system, my irrational longing for natively compiled languages without garbage collection, or the welcoming community that finally moved me to take a more active part in open source projects. But for a start, I just want to highlight one of my favourite features: Macros.",
      "url": "https://happens.lol/posts/a-love-letter-to-rust-macros/",
      "date_published": "2019-04-09T00:00:00+00:00",
      "author": {
        "name": "Hilmar Wiegand",
        "url": "https://happens.lol/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "98a6bda4-dcb1-419a-bf9a-6be8f4b88b8b",
      "title": "Rust Actix Web + Magic link authentication",
      "content_text": "In this tutorial, we'll create web app using the Rust actix-web framework and implement magic link authentication powered by ApproveAPI's Rust library.",
      "url": "https://blog.approveapi.com/tutorials/rust-actix-web-approveapi-magic-login-link/",
      "tweet_url": "https://twitter.com/AlexGrinman/status/1115732969447141377",
      "date_published": "2019-04-09T00:00:00+00:00",
      "author": {
        "name": "Alex Grinman",
        "url": "https://blog.approveapi.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "0ee4dffd-3f5f-4c26-9a66-5a2c94db3ace",
      "title": "Javascript evaluator part 1: Lexing",
      "content_text": "In this post I will describe my latest findings from writing my own Javascript lexer in Rust-lang. I will start by briefly describing what lexing is. Then, I will continue explaining how to implement state machines in Rust-lang. Next, I talk about how to use state machines for Javascript lexing. Last but not least, I cover further performance optimizations of my lexer.",
      "url": "https://medium.com/@retep007/javascript-lexing-for-high-performance-f9a800ec930d",
      "date_published": "2019-04-02T06:08:32.573+00:00",
      "author": {
        "name": "Peter Hrvola",
        "url": "https://medium.com/@retep007"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "881b9dbf-f50a-4a3d-9992-de8c093250bf",
      "title": "Explained: How does async work in Rust?",
      "content_text": "This article will outline an overview of the why and how async exists in Rust.",
      "url": "https://dev.to/gruberb/explained-how-does-async-work-in-rust-46f8",
      "tweet_url": "https://twitter.com/byteadventures/status/1113025925409640448",
      "date_published": "2019-04-02T00:00:00+00:00",
      "author": {
        "name": "Bastian Gruber",
        "url": "https://dev.to/gruberb"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "02cf2c55-f306-4c76-a340-15148b8b1886",
      "title": "Making a Case: Rust for Python developers",
      "content_text": "Python developers encompass a huge variety of developers. I am going to target use cases for a particular set of python developers: Machine Learning developers. But for others too, it might prove to be useful.",
      "url": "https://medium.com/@rajasekar3eg/making-a-case-rust-for-python-developers-1a114e2d89f4",
      "date_published": "2019-03-10T08:58:53.078+00:00",
      "author": {
        "name": "Raja Sekar",
        "url": "https://medium.com/@rajasekar3eg"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "5af2fc94-f73d-498a-99b8-15400fad948e",
      "title": "Arenas vs. Indices",
      "content_text": "When optimizing code, one thing I’m always looking for is memory layout and access patterns. One such pattern is an arena: Reserve some sufficiently large space to put your objects in, then allocate by incrementing a pointer. If your objects are of a uniform type, you can basically simplify this to a Vec of that type.",
      "url": "https://llogiq.github.io/2019/04/06/arena.html",
      "tweet_url": "https://twitter.com/llogiq/status/1114309625027997696",
      "date_published": "2019-04-06T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "410c0a3f-026f-4e8c-9910-40745122a369",
      "title": "Zola 0.6.0: start of multi-lingual sites",
      "content_text": "Zola gets the beginning of multi-lingual support and perf improvements.",
      "url": "https://www.vincentprouillet.com/blog/releasing-zola-0-6-0/",
      "date_published": "2019-03-25T00:00:00+00:00",
      "author": {
        "name": "Vincent Prouillet",
        "url": "https://www.vincentprouillet.com/blog/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "cbaf5407-81db-4367-9b58-ff9cc668b1a3",
      "title": "Linkerd v2: How Lessons from Production Adoption Resulted in a Rewrite of the Service Mesh",
      "content_text": "Linkerd 2.0 introduced a substantial rewrite of the widely adopted service mesh, using a split between Go and Rust. In this article, we discuss the lessons learned in the \"cauldron of production adoption\", and how those lessons became the basis of Linkerd 2.x’s philosophy, design, and implementation.",
      "url": "https://www.infoq.com/articles/linkerd-v2-production-adoption",
      "tweet_url": "https://twitter.com/wm/status/1114201709960548354",
      "date_published": "2019-04-05T00:00:00+00:00",
      "author": {
        "name": "William Morgan",
        "url": "https://www.infoq.com/profile/William-Morgan"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "7e90b841-ce0c-47f1-b6ab-420aa7d7bb35",
      "title": "Our journey from nightly to stable Rust",
      "content_text": "When we shipped Seq 5.0 back in November, our new storage engine was compiled against Rust's unstable nightly channel. As of Seq 5.1, we can instead use the supported stable channel. That feels like a bit of a milestone so I'd like to share a few details about our journey from nightly to stable, and celebrate the progress the community has made on the language, libraries, and tooling over the last twelve months that made that journey painless for us.",
      "url": "https://blog.datalust.co/our-journey-from-rust-nightly-to-stable/",
      "tweet_url": "https://twitter.com/KodrAus/status/1113951521748606976",
      "date_published": "2019-04-04T23:44:23+00:00",
      "author": {
        "name": "Ashley Mannix",
        "url": "https://kodraus.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "6af41799-4171-46ca-ab1f-572b8669da6e",
      "title": "Using the IOMMU for Safe and Secure User Space Network Drivers",
      "content_text": "Commonly used user space network drivers such as DPDK or Snabb currently have effectivelyfull access to the main memory via the unrestricted Direct Memory Access (DMA) capabilities of the PCI Express (PCIe) device they are controlling. This can be a security issue, as the driver can use the PCIe devices DMA access to read and / or write to main memory. In this thesis, support for using the IOMMU via the vfio-pci driver from the Linux kernel for the user space network driver ixy was implemented in C and Rust and the IOMMU and its impact on the drivers were investigated.",
      "url": "https://www.net.in.tum.de/members/emmericp/",
      "date_published": "2019-03-26T00:00:00+00:00",
      "author": {
        "name": "Stefan Huber",
        "url": "https://www.net.in.tum.de/"
      },
      "tags": [
        "Computer Science",
        "Security"
      ]
    },
    {
      "id": "3046fc78-93d2-4298-a8ae-134f2fbd29b9",
      "title": "Crossing the Rust FFI frontier with Protocol Buffers",
      "content_text": "The Firefox Application Services engineering team made the decision to use Rust to build cross-platform components for Firefox Sync, powering Firefox Accounts across many devices. They are implementing core business logic using Rust and wrapping it in a thin platform-native layer, such as Kotlin for Android and Swift for iOS.",
      "url": "https://hacks.mozilla.org/2019/04/crossing-the-rust-ffi-frontier-with-protocol-buffers/",
      "tweet_url": "https://twitter.com/mozhacks/status/1113095181669150721",
      "date_published": "2019-04-02T14:42:47+00:00",
      "author": {
        "name": "Edouard Oger",
        "url": "https://hacks.mozilla.org/author/eogermozilla-com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "9c952180-dba4-4a50-8104-4d185ce7ac4b",
      "title": "Reviewing Sled: Part I",
      "content_text": "The Sled project is an embedded database written in Rust. I run into it a few times recently and given my day job, I decided to take a peek and understand how it works. The project talks about being Log Structure Merge (and also exposing this to the client) with B+Tree read performance. The last time I read an LSM codebase was quite some time ago, so this is going to be quite interesting, I hope.",
      "url": "https://ayende.com/blog/186753-A/reviewing-sled-part-i",
      "date_published": "2019-03-28T00:00:00+00:00",
      "author": {
        "name": "Ayende Rahien",
        "url": "https://ayende.com/blog/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "a1396ee1-4c3f-47c5-b99c-d7af8ea455a0",
      "title": "Introducing Smithy — WebAssembly framework for Rust",
      "content_text": "I’m extremely excited to announce the 0.0.2 release of Smithy, a web development framework for Rust! While it is a very pre-alpha version, it should be functional enough for others to start playing around with. Please, get your feet wet and provide feedback.",
      "url": "https://medium.com/@robert.balicki_2494/introducing-smithy-webassembly-framework-for-rust-679d8fe9c16",
      "tweet_url": "https://twitter.com/StatisticsFTW/status/1111394852120551428",
      "date_published": "2019-03-28T22:28:07.745+00:00",
      "author": {
        "name": "Robert Balicki",
        "url": "https://medium.com/@robert.balicki_2494"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "900ee12b-4a68-4987-a635-980b9105da76",
      "title": "Announcing Lucet: Fastly’s native WebAssembly compiler and runtime",
      "content_text": "Today, we are thrilled to announce the open sourcing of Lucet, Fastly’s native WebAssembly compiler and runtime. WebAssembly is a technology created to enable web browsers to safely execute programs at near-native speeds. It has been shipping in the four major browsers since early 2017.",
      "url": "https://www.fastly.com/blog/announcing-lucet-fastly-native-webassembly-compiler-runtime",
      "tweet_url": "https://twitter.com/fastly/status/1111315867541925889",
      "date_published": "2019-03-28T16:00:00+00:00",
      "author": {
        "name": "Pat Hickey",
        "url": "https://www.fastly.com/blog"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "eb668d47-71e6-4379-a39c-3abeadd136b3",
      "title": "RaptorQ (RFC6330) and performance optimization in Rust",
      "content_text": "I recently decided to learn more about Rust, and wrote a high performance RaptorQ (RFC6330) library. RaptorQ is a fountain code, and the core of the algorithm is a lot of matrix math over GF(256) – which translates into lots of XORs and reads from lookup tables. After getting the initial implementation working, I set about optimizing it. Below is a journal of the steps I took to profile and optimize the implementation.",
      "url": "https://www.cberner.com/2019/03/30/raptorq-rfc6330-rust-optimization/",
      "date_published": "2019-03-30T02:11:47+00:00",
      "author": {
        "name": "Christopher Berner",
        "url": "https://www.cberner.com/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "6d648c86-cd0a-4f11-ac22-af2fe977f6d6",
      "title": "WASI example using Rust and Lucet",
      "content_text": "Lucet is Fastly’s native WebAssembly compiler and runtime. Using the Lucet runtime and Rust’s wasm32-unknown-wasi target, we can create a WASM program that runs on the server.",
      "url": "https://hermanradtke.com/2019/04/01/wasi-example-using-rust-and-lucet.html",
      "tweet_url": "https://twitter.com/hermanradtke/status/1112747908640604163",
      "date_published": "2019-04-01T00:00:00+00:00",
      "author": {
        "name": "Herman J. Radtke III",
        "url": "https://hermanradtke.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "94f04f9a-9a74-4e3c-9d96-02fec8e01229",
      "title": "Moving on from Rails and what's next",
      "content_text": "It’s been more than 6 years since my first commit to Ruby on Rails. I had just gotten my first full time Ruby position, was excited to move away from PHP, and wanted to give back. Since then I made 1452 commits to the project. Today, I am finally ready to move on from Rails.",
      "url": "https://blog.seantheprogrammer.com/moving-on-from-rails-and-whats-next",
      "tweet_url": "https://twitter.com/sgrif/status/1113150283809525760",
      "date_published": "2019-04-02T11:43:23-07:00",
      "author": {
        "name": "Sean Griffin",
        "url": "https://blog.seantheprogrammer.com/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "9ea71842-a6ca-41c6-8384-89c6a05d17cb",
      "title": "Gloo Update: Onion Layers, Timers, and Events",
      "content_text": "About two weeks ago, we kicked off our effort to collectively build Gloo, a modular toolkit for building fast and reliable Web apps and libraries with Rust and Wasm. We knew we wanted to explicitly cultivate the Rust and Wasm library ecosystem by spinning out reusable, standalone libraries: things that would help you out whether you were writing a green-field Web app in pure-Rust, building your own framework, or surgically inserting some Rust-generated Wasm into an existing JavaScript project. What was still fuzzy, and which we didn’t know yet, was how we were going design and expose these reusable bits.",
      "url": "https://rustwasm.github.io/2019/03/26/gloo-onion-layers.html",
      "tweet_url": "https://twitter.com/rustwasm/status/1110932283337273344",
      "date_published": "2019-03-26T00:00:00+00:00",
      "author": {
        "name": "Nick Fitzgerald",
        "url": "https://rustwasm.github.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "f1c4efc6-6cb3-4b03-a445-6ee32bd804b7",
      "title": "Noise Explorer",
      "content_text": "Noise Explorer is an online engine for reasoning about Noise Protocol Framework Handshake Patterns. Noise Explorer allows you to design and validate Noise Handshake Patterns, to generate cryptographic models for formal verification and to explore a compendium of formal verification results for the most popular and relevant Noise Handshake Patterns in use today.",
      "url": "https://noiseexplorer.com/",
      "tweet_url": "https://twitter.com/georgionic/status/1111264250645893121",
      "date_published": "2019-03-29T00:50:00+00:00",
      "author": {
        "name": "georgio",
        "url": "https://noiseexplorer.com/"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "d10fabc1-ddeb-4ac3-ab03-824bff125807",
      "title": "Face Detection with Tensorflow Rust",
      "content_text": "One of the promises of machine learning is to be able to use it for object recognition in photos. This includes being able to pick out features such as animals, buildings and even faces. This article will step you through using some existing models to accomplish face detection using rust and tensorflow.",
      "url": "https://cetra3.github.io/blog/face-detection-with-tensorflow-rust/",
      "date_published": "2019-03-28T00:00:00+00:00",
      "author": {
        "name": "cetra3",
        "url": "https://github.com/cetra3/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "5b355e5c-bc78-4134-91a2-c383b350d5f8",
      "title": "Mocking in Rust with conditional compilation",
      "content_text": "When writing automated unit tests for your application you will probably need to use mocks at some point. Classical object-oriented programming languages such as PHP solve this with reflection where mock object types are created during test runtime. The code under test expects a certain interface or class and the test code passes mock objects that implement the interface or are a subclass.",
      "url": "https://klausi.github.io/rustnish/2019/03/31/mocking-in-rust-with-conditional-compilation.html",
      "tweet_url": "https://twitter.com/_klausi_/status/1112464691555651587",
      "date_published": "2019-03-31T00:00:00+00:00",
      "author": {
        "name": "klausi",
        "url": "https://klausi.github.io/rustnish/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4fb7d3bc-05c5-4c23-abaa-70294fa23715",
      "title": "Ocypod: Redis-backed job queue server with an easy to use HTTP interface",
      "content_text": "Ocypod is a language-agnostic, Redis-backed job queue server with an easy to use HTTP interface. Its focus is on handling and monitoring long running jobs.",
      "url": "https://ocypod.readthedocs.io/",
      "date_published": "2019-04-03T00:00:00+00:00",
      "author": {
        "name": "Dave Challis",
        "url": "https://ocypod.readthedocs.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "865d719c-3067-49d0-8bfc-361bfe91d257",
      "title": "Summary: What are the Allocation Rules?",
      "content_text": "While there’s a lot of interesting detail captured in this series, it’s often helpful to have a document that answers some “yes/no” questions. You may not care about what an Iterator looks like in assembly, you just need to know whether it allocates an object on the heap or not. And while Rust will prioritize the fastest behavior it can, here are the rules for each memory type",
      "url": "https://speice.io/2019/02/summary.html",
      "date_published": "2019-02-09T00:00:00-05:00",
      "author": {
        "name": "Bradlee Speice",
        "url": "https://speice.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "f59796ce-77bb-4c3e-b11a-161df3bde835",
      "title": "Your first CLI tool with Rust",
      "content_text": "We will go through on how we can build command line tools with Rust, and maybe have fun along the way.",
      "url": "https://www.demainilpleut.fr/your-first-cli-tool-with-rust/",
      "tweet_url": "https://twitter.com/jveillet/status/1109138679606456321",
      "date_published": "2019-03-22T00:00:00+00:00",
      "author": {
        "name": "Jérémie Veillet",
        "url": "https://www.demainilpleut.fr/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "86c50475-46ad-47b1-83b7-a3d63fecbb4f",
      "title": "Five Super Helpful Rust Things That Nobody Told You About",
      "content_text": "Pretty-print debug, unimplemented!, ”..” struct literal operator, Pattern match guards, and Padding format operator.",
      "url": "https://saghm.github.io/five-rust-things/",
      "tweet_url": "https://twitter.com/rustlang/status/1111754820522819587",
      "date_published": "2019-03-30T09:19:00+00:00",
      "author": {
        "name": "Saghm Rossi",
        "url": "https://github.com/saghm"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "9a041284-284c-472d-97c0-0e0cd407bb44",
      "title": "tarssh: An async Rust SSH tarpit",
      "content_text": "tarssh is an SSH tarpit — a server that trickles an endlessly repeating introductory banner to clients for as long as it remains connected, in order to expend the resources of attackers. It's based on the same concept as Chris Wellons' Endlessh, a similar service written in C.",
      "url": "https://hur.st/projects/tarssh/",
      "date_published": "2019-03-25T00:00:00+00:00",
      "author": {
        "name": "Thomas Hurst",
        "url": "https://hur.st/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "a9c1b96b-5e31-432e-bbb8-c18a943d03b9",
      "title": "Inko Programming Language",
      "content_text": "Concurrent and safe object-oriented programming, without the headaches.",
      "url": "https://inko-lang.org/",
      "date_published": "2019-04-03T00:00:00+00:00",
      "author": {
        "name": "Yorick Peterse",
        "url": "https://inko-lang.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "b6fc1bbd-26d3-4334-86cc-3485ec7f4dc4",
      "title": "Guidelines on Benchmarking and Rust",
      "content_text": "This post covers: Benchmark reports for contributors, Benchmark reports for users, Profiling with valgrind / kcachegrind, Reproducible benchmarks and graphics, and Tips for benchmark behavior and benchmarking other languages.",
      "url": "https://nbsoftsolutions.com/blog/guidelines-on-benchmarking-and-rust",
      "date_published": "2019-01-27T00:00:00+00:00",
      "author": {
        "name": "Nick Babcock",
        "url": "https://nbsoftsolutions.com/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "8d10af6d-6142-4201-87d6-32148ac9079c",
      "title": "Writing an OS in Rust - Paging Implementation",
      "content_text": "This post shows how to implement paging support in our kernel. It first explores different techniques to make the physical page table frames accessible to the kernel and discusses their respective advantages and drawbacks. It then implements an address translation function and a function to create a new mapping.",
      "url": "https://os.phil-opp.com/paging-implementation/",
      "tweet_url": "https://twitter.com/phil_opp/status/1106133686930599936",
      "date_published": "2019-03-14T21:03:00+00:00",
      "author": {
        "name": "Philipp Oppermann",
        "url": "https://os.phil-opp.com/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "e216ede8-5599-48f4-a458-770944ef44f2",
      "title": "Arraigning a Statement, vol. 1",
      "content_text": "This time in our “Mutating Rust” series, we want to tackle the most complex mutation so far: Statement removal. Now why do I think this is complex? It’s just removing the statement (or, as we bake our mutations into the code, activating at runtime, putting it behind an if), right?",
      "url": "https://llogiq.github.io/2019/03/11/stmt.html",
      "tweet_url": "https://twitter.com/llogiq/status/1105022120491388928",
      "date_published": "2019-03-11T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "de32ac99-9bcf-4744-ab65-3f22398433d7",
      "title": "BoringTun, a userspace WireGuard implementation in Rust",
      "content_text": "Today we are happy to release the source code of a project we’ve been working on for the past few months. It is called BoringTun, and is a userspace implementation of the WireGuard® protocol written in Rust.",
      "url": "https://blog.cloudflare.com/boringtun-userspace-wireguard-rust/",
      "tweet_url": "https://twitter.com/Cloudflare/status/1110948853958750208",
      "date_published": "2019-03-27T13:43:27+00:00",
      "author": {
        "name": "Vlad Krasnov",
        "url": "https://blog.cloudflare.com/"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "b78c276e-61fa-41c0-90db-b706fe5864e3",
      "title": "Generalizing Seqlocks",
      "content_text": "swym is a very performant Software Transactional Memory (STM) library. It uses a variation on the per-object Transactional Locking II algorithm. The paper does an excellent job explaining the algorithm, but it is not required reading for this article. swym is a generalization of seqlocks - one the TL2 paper almost achieves, but does not for whatever reason.",
      "url": "https://mtak-blog.github.io/generalizing-seqlocks",
      "date_published": "2019-03-24T00:00:00+00:00",
      "author": {
        "name": "mtak-",
        "url": "https://github.com/mtak-"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "4984adf8-b660-4433-a888-8bd84d669dc0",
      "title": "Compiler Optimizations: What It's Done Lately",
      "content_text": "Throughout the series so far, we’ve put a handicap on the code. In the name of consistent and understandable results, we’ve asked the compiler to pretty please leave the training wheels on. Now is the time where we throw out all the rules and take off the kid gloves. As it turns out, both the Rust compiler and the LLVM optimizers are incredibly sophisticated, and we’ll step back and let them do their job.\n\nSimilar to “What Has My Compiler Done For Me Lately?”, we’re focusing on interesting things the Rust language (and LLVM!) can do with memory management.",
      "url": "https://speice.io/2019/02/compiler-optimizations.html",
      "date_published": "2019-02-08T00:00:00-05:00",
      "author": {
        "name": "Bradlee Speice",
        "url": "https://speice.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "42678207-257f-4a9c-868a-ab556d18f9d1",
      "title": "Idiomatic monads in Rust",
      "content_text": "A pragmatic new design for high-level abstractions In this post, I’m going to describe a new approach to express monads in Rust. It is the most minimal design I have seen proposed and is, in my eyes, the first plausible design for such abstractions — those commonly known as “higher-kinded types”. This approach depends on a very minimal extension to Rust’s type system. In particular, this approach avoids the need for either higher-kinded types (e.g. as in this design) or full abstraction over traits (e.g. “traits for traits”). Most of the design challenges are tackled directly using existing features.",
      "url": "https://varkor.github.io/blog/2019/03/28/idiomatic-monads-in-rust.html",
      "date_published": "2019-03-28T00:00:28+00:00",
      "author": {
        "name": "varkor",
        "url": "https://varkor.github.io/blog/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "ff71674c-714c-4d6d-adde-bca7a03d697e",
      "title": "Miri available as rustup component",
      "content_text": "Running your unsafe code test suite in Miri has just gotten even easier: Miri is now available as a rustup component!",
      "url": "https://www.ralfj.de/blog/2019/03/26/miri-as-rustup-component.html",
      "date_published": "2019-03-26T00:00:00+00:00",
      "author": {
        "name": "Ralf Jung",
        "url": "https://www.ralfj.de/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "2da4fac1-5cb0-463b-9654-427f70d25255",
      "title": "Seed: A frontend framework for Rust, via WebAssembly",
      "content_text": "I'm distinguishing Seed through clear examples and documentation, and using wasm-bindgen/web-sys internally. I started this project after being unable to get existing frameworks working due to lack of documented examples, and inconsistency between documentation and published versions. My intent is for anyone who's proficient in a frontend framework to get a standalone app working in the browser within a few minutes, using just the quickstart guide.\n\nSeed's different approach to view syntax also distinguishes it: rather than use an HTML-like markup similar to JSX, it uses Rust builtin types, thinly-wrapped by macros that allow flexible composition. This decision will not appeal to everyone, but I think it integrates more naturally with the language.",
      "url": "https://seed-rs.org/",
      "date_published": "2019-03-26T00:00:00+00:00",
      "author": {
        "name": "David O'Connor",
        "url": "https://seed-rs.org/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "a82e8094-4499-4915-9b77-0d40cce84878",
      "title": "Cross Compiling Rust for FreeBSD With Docker",
      "content_text": "For a little side project I’m working on I want to be able to produce pre-compiled binaries for a variety of platforms, including FreeBSD. With a bit of trial and error I have been able to successfully build working FreeBSD binaries from a Docker container, without using (slow) emulation/virtual machines. This post describes how it works and how to add it to your own Rust project.",
      "url": "https://www.wezm.net/technical/2019/03/cross-compile-freebsd-rust-binary-with-docker/",
      "tweet_url": "https://twitter.com/wezm/status/1110049444181901312",
      "date_published": "2019-03-25T04:45:00+00:00",
      "author": {
        "name": "Wesley Moore",
        "url": "http://www.wezm.net/"
      },
      "tags": [
        "DevOps and Deployment"
      ]
    },
    {
      "id": "ee2c7f86-323c-49fe-a707-afc505088445",
      "title": "Variance in Rust: An intuitive explanation",
      "content_text": "Recently I made a presentation about subtyping and variance in Rust for our local Vancouver Rust meetup, but I still think intuition was rather lost in the formalism, so here’s my shot at explaining it as intuitively as I can.",
      "url": "https://ehsanmkermani.com/2019/03/16/variance-in-rust-an-intuitive-explanation/",
      "tweet_url": "https://twitter.com/ehsanmok/status/1110405489903296513",
      "date_published": "2019-03-17T03:24:05+00:00",
      "author": {
        "name": "Ehsan M. Kermani",
        "url": "https://ehsanmkermani.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "7f497632-cdeb-48fc-b03b-8abe30f7ac6e",
      "title": "Refactoring Varisat: 4. Heuristics",
      "content_text": "This is the fourth post in my series about refactoring varisat. In the last post we saw how conflict driven clause learning works, in this post we’re going to make it fast. To get there we add several smaller features that were already present in varisat 0.1. While there are still some things missing that varisat 0.1 supports, these are features like proof generation or incremental solving that don’t affect the solving performance.",
      "url": "https://jix.one/refactoring-varisat-4-heuristics/",
      "date_published": "2019-03-21T11:46:30+01:00",
      "author": {
        "name": "Jannis Harder",
        "url": "https://jix.one/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "8c2f780c-fde4-4064-b179-ddc7deaedc98",
      "title": "Iterated Function System fractal visualizer in Rust",
      "content_text": "This is a toy program to render Iterated Function System fractals with Rust and OpenGL. Glium is used for OpenGL and the GUI is provided by imgui-rs.",
      "url": "https://github.com/jherman3/ifs_fractal/blob/master/README.md",
      "date_published": "2019-03-27T00:00:00+11:00",
      "author": {
        "name": "jherman3",
        "url": "https://github.com/jherman3"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "5ee0634e-47e9-4354-982f-fdbfdd60a3b1",
      "title": "Rust Basics: the Add Trait",
      "content_text": "In my journey for better understanding of anything I tend to always return to the basics.\nTo often we base our assumptions on blind 'guess-timations' where we don't understand why something is actually happening but we observed that certain patterns ...",
      "url": "https://chilimatic.hashnode.dev/rust-basics-the-add-trait-cjtoke4yh002t8hs1c61p82mz",
      "tweet_url": "https://twitter.com/shadowdroid/status/1110218766238011392",
      "date_published": "2019-03-25T16:27:00+00:00",
      "author": {
        "name": "j",
        "url": "https://chilimatic.hashnode.dev/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "03a41715-2772-48f5-8a75-bd0d4d1d04c7",
      "title": "Understanding Futures In Rust - Part 1",
      "content_text": "Futures make async programming in Rust easy and readable. Learn how to use futures by building them from scratch.",
      "url": "https://www.viget.com/articles/understanding-futures-in-rust-part-1/",
      "date_published": "2019-03-26T00:00:00+00:00",
      "author": {
        "name": "Joe Jackson",
        "url": "https://www.viget.com/about/team/jjackson"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ed083e12-489d-4720-8e59-eea15c03c3f8",
      "title": "MeiliES - Event sourcing in Rust",
      "content_text": "MeiliES is an Event Sourcing database that uses the RESP (REdis Serialization Protocol) to communicate. We use the Redis protocol to simplify clients implementation. The portability problematics are resolved by using a full Rust implementation (we are using Sled as internal storage).",
      "url": "https://blog.meilisearch.com/meilies-release/",
      "tweet_url": "https://twitter.com/Kerollmops/status/1110568321664065536",
      "date_published": "2019-03-25T14:16:32+00:00",
      "author": {
        "name": "Thomas Payet",
        "url": "https://blog.meilisearch.com/author/thomas/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "3afe3b54-7b4e-46a5-90c5-b6a23b5d803f",
      "title": "Making a basic game UI with imgui and ggez",
      "content_text": "In this post I'll walk you through how you can create game user interface with imgui and ggez. I spent a lot of time trying to make this work for my game (which you can read more about here) and suffered greatly because of the lack of documentation, so I'm writing this so you don't have to!",
      "url": "http://iolivia.me/posts/imgui-ggez/",
      "tweet_url": "https://twitter.com/oliviff/status/1105599613585768454",
      "date_published": "2019-03-11T00:00:00+00:00",
      "author": {
        "name": "Olivia Ifrim",
        "url": "http://iolivia.me/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "80cba812-a035-4486-8ec8-14c34c637cfe",
      "title": "Entity Component Systems in Rust",
      "content_text": "I realised early on that the heart of the game (engine) was going to be the ECS, and while there are many good Rust written crates for an ECS implementation available, I wanted to write my own as an exercise. And so getting it right (for some definition of right) early on would save me a lot of headaches later on down the track. In this post I'll explain the what/where/how/why and some of the intricacies of using Rust for it.",
      "url": "https://ljcode.org/blog/ecs/",
      "date_published": "2019-03-26T00:00:00+00:00",
      "author": {
        "name": "Luke Jones",
        "url": "https://ljcode.org/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "e69005a8-5193-4715-b906-f7a1a71db4f0",
      "title": "Dynamic Memory: A Heaping Helping",
      "content_text": "Managing dynamic memory is hard. Some languages assume users will do it themselves (C, C++), and some languages go to extreme lengths to protect users from themselves (Java, Python). In Rust, how the language uses dynamic memory (also referred to as the heap) is a system called ownership. And as the docs mention, ownership is Rust’s most unique feature.",
      "url": "https://speice.io/2019/02/a-heaping-helping.html",
      "date_published": "2019-02-07T00:00:00-05:00",
      "author": {
        "name": "Bradlee Speice",
        "url": "https://speice.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "6ed35d04-359f-4971-9cf6-19d824cdcf72",
      "title": "Handmade Rust Part 3: Containers",
      "content_text": "The most commonly used kinds of containers are arrays and maps. Pretty much any other container type can be built using those two, so that’s what we’ll build today! Of course, just like for Unq, we won’t be making simple replacements, instead we’ll be making the most minimal containers necessary for now and add features later as needed, but we’ll be make them allocator aware.",
      "url": "http://stevenlr.com/posts/handmade-rust-3-containers/",
      "tweet_url": "https://twitter.com/steven_lr/status/1109520498558410752",
      "date_published": "2019-03-23T17:12:54+01:00",
      "author": {
        "name": "Steven Le Rouzic",
        "url": "http://stevenlr.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c24a6d4f-b367-4b18-ad85-52fe59b7e6b3",
      "title": "The Phantom Builder",
      "content_text": "Recently on twitter, someone asked fora a practical explainer for PhantomData and while I don't have that I did want to share one place I have found PhantomData to be useful. This blog post is an overview of how I ended up using PhantomData in my builder patterns that require a generic type argument.",
      "url": "https://wiredforge.com/blog/phantom-builder/index.html",
      "date_published": "2019-03-24T00:00:00+00:00",
      "author": {
        "name": "Robert Masen",
        "url": "https://wiredforge.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "710b4e1e-9882-413b-bf2d-9fc746502ede",
      "title": "clap v3 Update: No More Strings",
      "content_text": "This is the second post in a series detailing the issues, progress, and design decisions used in clap v3. This post details removing the \"stringly typed\" nature of clap.",
      "url": "https://kbknapp.dev/clap-v3-update-no-more-strings/",
      "date_published": "2019-03-08T00:00:00+00:00",
      "author": {
        "name": "Kevin K.",
        "url": "https://kbknapp.dev/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "29538906-a949-430f-a129-f9c8dca4eb54",
      "title": "Kickstarting a database working group",
      "content_text": "I posted the idea of a database WG on twitter recently and it was met with a lot of excitement. Also there was a post on reddit recently that proposed the same idea, taken from examples of where using Rust with databases is currently a painful experience. I would as part of this also want to work out a base charter to start the WG as well as setting up when and how to have regular meetings to discuss roadmaps and current projects that are being worked on.",
      "url": "https://internals.rust-lang.org/t/kickstarting-a-database-wg/9696",
      "date_published": "2019-03-25T09:53:26+00:00",
      "author": {
        "name": "Katharina Fey",
        "url": "https://internals.rust-lang.org/u/spacekookie"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "166e7e9f-de17-4abb-b2f4-08169793f3dd",
      "title": "How to Debug Rust with Visual Studio Code",
      "content_text": "A step-by-step guide for debugging Rust with Visual Studio Code.",
      "url": "https://www.forrestthewoods.com/blog/how-to-debug-rust-with-visual-studio-code/",
      "date_published": "2019-02-03T20:01:00+00:00",
      "author": {
        "name": "Forrest Smith",
        "url": "https://www.forrestthewoods.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "44856ee1-451a-44b6-8cc1-5afd881bb57d",
      "title": "Fixed Memory: Stacking Up",
      "content_text": "const and static are perfectly fine, but it’s relatively rare that we know at compile-time about either values or references that will be the same for the duration of our program. Put another way, it’s not often the case that either you or your compiler knows how much memory your entire program will ever need.",
      "url": "https://speice.io/2019/02/stacking-up.html",
      "date_published": "2019-02-06T00:00:00-05:00",
      "author": {
        "name": "Bradlee Speice",
        "url": "https://speice.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "59ecea36-40a2-4b3a-aaf5-2d156d885d24",
      "title": "Handmade Rust Part 2: Unq, an allocator-aware Box",
      "content_text": "In the Rust standard library, Box is a RAII wrapper for an object on the heap. It’s actually a special type that’s not implemented purely in the library, but also use special features called lang items. It uses the global allocator to allocate its memory. We want a similar type that also has an allocator associated to it. We’ll call it Unq, which mirror C++’s unique_ptr.",
      "url": "http://stevenlr.com/posts/handmade-rust-2-unq/",
      "tweet_url": "https://twitter.com/steven_lr/status/1094680385643073536",
      "date_published": "2019-02-10T16:30:21+01:00",
      "author": {
        "name": "Steven Le Rouzic",
        "url": "http://stevenlr.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "da7566eb-9da3-4f88-9c13-743fd67037a3",
      "title": "Rust + Gtk = Wow",
      "content_text": "As I’ve been experimenting with writing Rust apps, I attempted to create a small little GUI application. At first I attempted to setup everything with Qt, but C++/Qt interoperability with Rust is painful. Very, very painful. I experimented with some more radical UI frameworks such as Azul and Conrad. These have a lot of promise going forward. However for the here and now, I recommend looking at gtk-rs, Rust binding for Gtk.",
      "url": "https://dorianpula.ca/2019/03/22/rust-gtk-wow/",
      "date_published": "2019-03-22T21:54:08+00:00",
      "author": {
        "name": "Dorian Pula",
        "url": "https://dorianpula.ca/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "0dbd06f7-147e-404c-81ce-360e61e087e5",
      "title": "Sonic: Fast, lightweight & schema-less search backend",
      "content_text": "Sonic is a fast, lightweight and schema-less search backend. It ingests search texts and identifier tuples that can then be queried against in a microsecond's time.",
      "url": "https://github.com/valeriansaliou/sonic",
      "date_published": "2019-03-24T00:00:00+00:00",
      "author": {
        "name": "Valerian Saliou",
        "url": "https://github.com/valeriansaliou"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "c3e2f0b2-713e-4ab5-9126-103233acb271",
      "title": "Redox OS 0.5.0",
      "content_text": "It has been one year and four days since the last release of Redox OS! In this time, we have been hard at work improving the Redox ecosystem. Much of this work was related to relibc, a new C library written in Rust and maintained by the Redox OS project, and adding new packages to the cookbook. We are proud to report that we have now far exceeded the capabilities of newlib, which we were using as our system C library before. We have added many important libraries and programs, which you can see listed below.",
      "url": "https://www.redox-os.org/news/release-0.5.0/",
      "tweet_url": "https://twitter.com/redox_os/status/1109921288758288384",
      "date_published": "2019-03-24T00:00:00+00:00",
      "author": {
        "name": "Jeremy Soller",
        "url": "https://www.redox-os.org/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "98e50b2b-889a-49d1-9973-f1d39c9cc389",
      "title": "My First 3 Weeks of Professional Rust",
      "content_text": "For the last 15 years as a professional programmer I have worked mostly with dynamic languages. First Perl, then Python, and for the last 10 years or so, Ruby. I’ve also been writing Rust on the side for personal projects for nearly four years. Recently I started a new job and for the first time I’m writing Rust professionally. Rust represents quite a shift in language features, development process and tooling. I thought it would be interesting to reflect on that experience so far.",
      "url": "https://www.wezm.net/technical/2019/03/first-3-weeks-of-professional-rust/",
      "tweet_url": "https://twitter.com/wezm/status/1109645058540658688",
      "date_published": "2019-03-23T22:45:00+00:00",
      "author": {
        "name": "Wesley Moore",
        "url": "http://www.wezm.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "3f8f60fc-a917-4f77-98fb-f3d263cda7b3",
      "title": "Sequoia-PGP: State of the Seedling",
      "content_text": "I’d like to inform you about the recent progress on your favorite OpenPGP implementation. The Sequoia project made their first release at RustConf Rome during Neal’s talk (video, slides) about our experiences with Rust. The release includes only the low-level openpgp crate, which we renamed to sequoia-openpgp to avoid a namespace collision. In the weeks prior to the release, we moved a lot of code around, and refined our API. For example, we introduced a crypto module and moved all low-level crypto primitives there.",
      "url": "https://sequoia-pgp.org/blog/2018/12/10/state-of-the-seedling-in-december/",
      "date_published": "2018-12-10T13:50:35+01:00",
      "author": {
        "name": "Justus Winter",
        "url": "https://sequoia-pgp.org/"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "6450a97d-c96a-47df-b999-a865defe34ae",
      "title": "Rust All Hands 2019: Array iterators, Rayon, and more",
      "content_text": "A few weeks ago, I had the pleasure of attending the second annual Rust All Hands meeting, hosted by Mozilla at their Berlin office. The attendees were a mix of volunteers and corporate employees covering the full range of Rust development, including the compiler, language, libraries, docs, tools, operations, and community. Although I’m sure there will be an official summary of the meeting (like last year’s), in this article, I’ll cover a few things I was directly involved in. First, I’ll look at a feature many developers have wanted for a long time…",
      "url": "https://developers.redhat.com/blog/2019/03/22/rust-all-hands-2019-array-iterators-rayon-and-more/",
      "tweet_url": "https://twitter.com/rhdevelopers/status/1109224237670322177",
      "date_published": "2019-03-22T07:05:51+00:00",
      "author": {
        "name": "Josh Stone",
        "url": "https://developers.redhat.com/blog/author/jistoneredhat-com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "1f1562d2-b784-4bda-84d4-a0dc68178793",
      "title": "Helix: Improve the Performance of Rails with Rust",
      "content_text": "With Rust, you can do low-level number-crunching and bit-by-bit processing, while enjoying memory safety and concurrency features. With Helix, you can use your Rust code inside of a Rails project.",
      "url": "https://headway.io/blog/helix-improve-the-performance-of-rails-with-rust/",
      "date_published": "2019-03-22T00:00:00+00:00",
      "author": {
        "name": "Raphael Spencer",
        "url": "https://headway.io/about/raphael-spencer"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "0b65aa06-68c5-4d0b-9160-6edb0ca35f34",
      "title": "Portability benchmark of Dolphin Emulator on MacOS",
      "content_text": "gfx-rs is a Rust project aiming to make graphics programming more accessible and portable, focusing on exposing a universal Vulkan-like API. It’s a single Rust API with multiple backends that implement it: Direct3D 12/11, Metal, Vulkan, and even OpenGL. We are also building a Vulkan Portability implementation based on it, which allows non-Rust applications using Vulkan to run everywhere. This post is focused on the Metal backend only.\n\nPreviously, we benchmarked Dota2 and were able to run many other applications and engines successfully, including Dolphin Emulator. For Dolphin, we previously focused on visual correctness. After games appeared to render correctly, we shifted our focus to performance to ensure they also render quickly.",
      "url": "https://gfx-rs.github.io/2019/03/22/dolphin-macos-performance.html",
      "date_published": "2019-03-22T00:00:00+00:00",
      "author": {
        "name": "gfx-rs",
        "url": "https://gfx-rs.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "9082061f-b4a4-4aed-81e6-71a0c7e49b1a",
      "title": "Packaging up a Rust Binary for Linux",
      "content_text": "How does one package a Rust app? I would check out creating a snap package (https://t.co/UYibrbPN7c). It worked alright for me, even though the format encourages sandboxing of apps which takes a bit to wrap your mind a bit. Or create a deb using cargo-deb and use the alien utility to transform that to a rpm.",
      "url": "https://dorianpula.ca/2019/03/15/packaging-up-a-rust-binary-for-linux/",
      "date_published": "2019-03-15T21:48:17+00:00",
      "author": {
        "name": "Dorian Pula",
        "url": "https://dorianpula.ca/"
      },
      "tags": [
        "DevOps and Deployment"
      ]
    },
    {
      "id": "5190b436-eaa3-4067-a6a0-fec861ea8316",
      "title": "Handmade Rust Part 1: Introduction & Allocators",
      "content_text": "Welcome to Handmade Rust, a series (hopefully) where I will be developing a Vulkan rendering engine in Rust the Handmade way. By this, I mean using no external libraries, not even the Rust standard library, only the core lib. I am doing this mainly for my own enjoyment but also because I want to get better at writing Rust, and sometimes the best way to really understand something is to just do it yourself. The project will be available on GitHub at stevenlr/HandmadeRust.\n\nThe first step will be to build a foundation library for memory allocation, containers, and other utilities that are not provided by the core lib.",
      "url": "http://stevenlr.com/posts/handmade-rust-1-allocators/",
      "tweet_url": "https://twitter.com/steven_lr/status/1094562446436691969",
      "date_published": "2019-02-10T00:50:11+01:00",
      "author": {
        "name": "Steven Le Rouzic",
        "url": "http://stevenlr.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "108f009d-94b1-43c6-8598-43088175772e",
      "title": "Global Memory Usage: The Whole World",
      "content_text": "The first memory type we’ll look at is pretty special: when Rust can prove that a value is fixed for the life of a program (const), and when a reference is unique for the life of a program (static as a declaration, not 'static as a lifetime), we can make use of global memory. This special section of data is embedded directly in the program binary so that variables are ready to go once the program loads; no additional computation is necessary.",
      "url": "https://speice.io/2019/02/the-whole-world.html",
      "date_published": "2019-02-05T00:00:00-05:00",
      "author": {
        "name": "Bradlee Speice",
        "url": "https://speice.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ba471387-4b93-4e46-8846-c89beddf6916",
      "title": "Allocations in Rust",
      "content_text": "There’s an alchemy of distilling complex technical topics into articles and videos that change the way programmers see the tools they interact with on a regular basis. I knew what a linker was, but there’s a staggering amount of complexity in between the OS and main(). Rust programmers use the Box type all the time, but there’s a rich history of the Rust language itself wrapped up in how special it is.\n\nIn a similar vein, this series attempts to look at code and understand how memory is used; the complex choreography of operating system, compiler, and program that frees you to focus on functionality far-flung from frivolous book-keeping. The Rust compiler relieves a great deal of the cognitive burden associated with memory management, but we’re going to step into its world for a while.\n\nLet’s learn a bit about memory in Rust.",
      "url": "https://speice.io/2019/02/understanding-allocations-in-rust.html",
      "date_published": "2019-02-04T00:00:00-05:00",
      "author": {
        "name": "Bradlee Speice",
        "url": "https://speice.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "1e324360-c349-474e-b091-7c5250958ffc",
      "title": "Custom Exit Status Codes with ? in main",
      "content_text": "Rust 1.26 introduced the ability to return a Result from the main method, which was a great ergonomics improvement especially for small CLI applications. If your application returns an Ok, Rust reports a success exit status code to the operating system. Likewise if your application returns an Err, Rust reports an error exit status code.\n\nBut what if you want to return a custom exit status error code for each possible error type in your application, to provide some additional feedback to your user? This leads into an exploration of the Termination and Try traits, and is the topic of this post.",
      "url": "https://www.joshmcguigan.com/blog/custom-exit-status-codes-rust/",
      "date_published": "2019-02-09T00:00:00+00:00",
      "author": {
        "name": "Josh Mcguigan",
        "url": "https://www.joshmcguigan.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "784ce8bf-55af-48fc-9893-23f28a38c999",
      "title": "Hands-on IoT applications with OpenWhisk and Rust",
      "content_text": "In this article, we’ll explore Apache OpenWhisk (which we’ll refer to simply as OpenWhisk), an open-source, distributed serverless platform that allows us to execute functions in response to events. OpenWhisk supports a lot of languages out of the box and can be extended to use other languages. In our case, we are going to use Rust as our main primary language.",
      "url": "https://medium.com/the-theam-journey/hands-on-iot-applications-with-openwhisk-and-rust-acb9ef5bc166",
      "tweet_url": "https://twitter.com/theagilemonkeys/status/1109118516089835520",
      "date_published": "2019-03-22T13:41:31.677+00:00",
      "author": {
        "name": "Roberto Díaz",
        "url": "https://medium.com/@roberto_85185"
      },
      "tags": [
        "DevOps and Deployment"
      ]
    },
    {
      "id": "d226973e-f9e9-46e7-8395-d63272cd6f61",
      "title": "The Embedded Working Group Newsletter - 17",
      "content_text": "This week's highlights: The Embedded Rust Showcase, Oxidize speakers announced, docs on interrupts, and Life before Main!",
      "url": "https://rust-embedded.github.io/blog/newsletter-17/",
      "tweet_url": "https://twitter.com/rustembedded/status/1109141455510097922",
      "date_published": "2019-03-22T00:00:00+00:00",
      "author": {
        "name": "The Embedded Working Group",
        "url": "https://rust-embedded.github.io/blog"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "554b2733-697f-41c7-b91b-0261acc1aa24",
      "title": "barrel.rs: a powerful schema migration builder's 0.5.0 release",
      "content_text": "barrel makes writing migrations for different databases as easy as possible. It provides you with a common API over SQL, with certain features only provided for database specific implementations. This way you can focus on your Rust code, and stop worrying about SQL.",
      "url": "https://rust-db.github.io/barrel/blog/releasing-050/",
      "tweet_url": "https://twitter.com/spacekookie/status/1108832951003987968",
      "date_published": "2019-03-21T00:00:00+00:00",
      "author": {
        "name": "Squirrel People",
        "url": "https://rust-db.github.io/barrel/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "ea9c3fbe-c681-4b42-a0ef-3699a1612972",
      "title": "Are we Database Yet?",
      "content_text": "I'm giving a talk next month at our Rust Meetup about using Rust in production. I've been reflecting on my last few months using Rust after learning the language about a year ago. One of my most frustrating experiences tends to always be around the futures ecosystem, as that's where I oft-fruitless labour for hours before giving up on what I'm doing.\n\nI do data engineering and software development work professionally, and these 2 areas are where I often find a lot of pain with using the language.\n\nA few weeks ago I wanted to write something that takes csv files and writes them to a database. I used Apache Arrow's Rust library (which I've started contributing to this year) to do that. The idea was simple, Arrow has a CSV reader that can infer schema, so I map the schema's data types to a database's types, and then I sequentially write records in batches to the database.\n\nI found the exercise quite painful, so I'd like to talk about databases and Rust.",
      "url": "https://www.reddit.com/r/rust/comments/b463rg/are_we_database_yet/",
      "date_published": "2019-03-23T02:02:56+11:00",
      "author": {
        "name": "nevi-me",
        "url": "https://www.reddit.com/user/nevi-me"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "28a325bb-994b-4dad-9d6f-e92393b5eae0",
      "title": "Building an Embedded Futures Executor II",
      "content_text": "Part 2 of my embedded executor journey! Part 1 ended up getting a little long, so I cut it short while still missing some key features like more flexible task spawning and putting the executor to sleep when there's nothing needing to be polled. This time, we'll fill in those gaps!",
      "url": "https://josh.robsonchase.com/embedded-executor-2/",
      "date_published": "2019-01-27T15:00:00-05:00",
      "author": {
        "name": "Josh Robson Chase",
        "url": "https://josh.robsonchase.com/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "3755147e-f87f-4bc8-ac54-2a75b8f55f11",
      "title": "Learning Rust in 2019",
      "content_text": "I spent the month of January playing with Rust in my free time. In this article I'm going to share some quick notes on some of the mistakes I made while learning, the resources I used to get unblocked, and what I took away from the experience. My hope is that I can save other Rust newcomers a bit of time by documenting some of the things that I banged my head into. Now, it's worth noting that I'm still a Rust beginner, so if I got something wrong please let me know so that I can update it.",
      "url": "https://www.ragona.com/posts/learning_rust_2019",
      "date_published": "2019-01-31T00:00:00+00:00",
      "author": {
        "name": "Ryan Ragona",
        "url": "https://ragona.com/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "806cf62c-14c8-4a7e-afa8-f99843d634f2",
      "title": "New cargo subcommand: sync-readme",
      "content_text": "cargo sync-readme synchronizes your README (the file specified by the readme key in your Cargo.toml, or just README.md by default) with the entrypoint of your library or binary crate (by default, lib.rs or main.rs, or what is defined at the path key in your manifest).",
      "url": "https://phaazon.net/blog/cargo-sync-readme",
      "date_published": "2019-02-25T18:50:00+00:00",
      "author": {
        "name": "Dimitri Sabadie",
        "url": "http://phaazon.net/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "eed8a936-e3c7-45b5-bc50-3e1b95ffb767",
      "title": "In nightly Rust, 'await!' may never return (dropping futures)",
      "content_text": "I've been using the proposed await! and Future features in nightly Rust, and overall, I really like the design. But I did run into one surprise: await! may never return, and this has consequences I didn't fully understand. Let's take a look.",
      "url": "http://www.randomhacks.net/2019/03/09/in-nightly-rust-await-may-never-return/",
      "date_published": "2019-03-09T15:11:20-05:00",
      "author": {
        "name": "Eric Kidd",
        "url": "http://www.randomhacks.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "34dfeb70-4900-4ef3-b6d5-674d3caf376d",
      "title": "Learning Rust With Entirely Too Many Linked Lists",
      "content_text": "I fairly frequently get asked how to implement a linked list in Rust. The answer honestly depends on what your requirements are, and it's obviously not super easy to answer the question on the spot. As such I've decided to write this book to comprehensively answer the question once and for all. In this series I will teach you basic and advanced Rust programming entirely by having you implement 6 linked lists.",
      "url": "https://rust-unofficial.github.io/too-many-lists/",
      "tweet_url": "https://twitter.com/Gankro/status/1108809200229064705",
      "date_published": "2019-03-22T00:00:00+00:00",
      "author": {
        "name": "Alexis Beingessner",
        "url": "https://gankro.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "88233a0c-3917-4ec2-b2c5-bcfd322a9662",
      "title": "Chaining Functions Without Returning Self",
      "content_text": "It’s a common pattern in the Rust ecosystem to have a function return self at the end in order to enable method chaining. This approach is often used in combination with the builder pattern, though it can also be applied to a wide variety of other situations. The example demonstrates the most straightforward of these cases (i.e. initializing and modifying an object in a single statement), but, as I’m going to demonstrate, this approach quickly breaks down when applied to a wider variety of use cases.",
      "url": "https://randompoison.github.io/posts/returning-self/",
      "date_published": "2019-03-21T00:00:00+00:00",
      "author": {
        "name": "David LeGare",
        "url": "https://randompoison.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "677c24c1-719c-4744-acb3-46eb5e21f991",
      "title": "The last two months in rustsim #4 (January - February 2019)",
      "content_text": "Welcome to the fourth edition of This month in rustsim. This monthly newsletter will provide you with a summary of important update that occurred within the rustsim community. This includes in particular updates about the nphysics, ncollide, nalgebra, and alga crate.",
      "url": "https://www.rustsim.org/blog/2019/03/01/this-month-in-rustsim/",
      "date_published": "2019-03-01T00:00:00+00:00",
      "author": {
        "name": "Sébastien Crozet",
        "url": "https://www.rustsim.org/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "3ad2e4d8-ffb5-4dcc-870e-e5c8dae3ca2a",
      "title": "Resize images from S3 with AWS Lambda and Rust",
      "content_text": "Using Rust and AWS Lambda to thumbnail images, cheaply, relablity, and quickly.",
      "url": "https://matsimitsu.com/blog/2019-03-09-resize-images-from-s3-with-aws-lambda-and-rust/",
      "tweet_url": "https://twitter.com/Matsimitsu/status/1104425786323468288",
      "date_published": "2019-03-09T00:00:00+00:00",
      "author": {
        "name": "Robert Beekman",
        "url": "https://matsimitsu.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "d10fac5d-46ac-49b4-a8e0-517cb3cdfcba",
      "title": "Procedural macro in Rust 101",
      "content_text": "How to pick a function and make it a macro with added superpowers.",
      "url": "https://dev.to/naufraghi/procedural-macro-in-rust-101-k3f",
      "date_published": "2019-03-17T00:00:00+00:00",
      "author": {
        "name": "Matteo Bertini",
        "url": "https://dev.to/naufraghi"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "dad7fd3a-4891-4ddc-bf77-81668ffd5ea7",
      "title": "Rust: The Hard Parts - Part One: References and borrowing",
      "content_text": "Rust has a perception of being a very difficult language to learn. I had a similar experience, but just as I was told, there is a point where things start to get a lot easier. This post aims to describe the hard parts that I had to get through in order to start being productive with Rust in the belief that this may help others get over the hill to that sweet spot of infinite bliss and productivity. In this post, I’m going to cover references and borrowing.",
      "url": "https://naftuli.wtf/2019/03/20/rust-the-hard-parts/",
      "tweet_url": "https://twitter.com/naftulikay/status/1108510996052627456",
      "date_published": "2019-03-20T00:00:00+00:00",
      "author": {
        "name": "Naftuli Kay",
        "url": "https://naftuli.wtf/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "5afc518c-63b7-4b76-96f2-659de41359d9",
      "title": "rustdoc in 2019",
      "content_text": "A recap of the 2019 Rust All-Hands from a rustdoc perspective; and the 2019 roadmap for the Rustdoc Team.",
      "url": "https://quietmisdreavus.net/code/2019/02/19/rustdoc-in-2019/",
      "tweet_url": "https://twitter.com/QuietMisdreavus/status/1097998697311469569",
      "date_published": "2019-02-19T12:00:00-06:00",
      "author": {
        "name": "QuietMisdreavus",
        "url": "https://quietmisdreavus.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "09e6b7ba-69f9-4256-9ce5-c75ea253c3ec",
      "title": "Should Rust channels panic on send if nobody's listening?",
      "content_text": "Lately, I've been working on several real-world systems using Rust's async and tokio. As you can see on the areweasyncyet.rs site, this requires using nightly Rust and the experimental tokio-async-await library. I hope to talk more about these experiences soon! But today, I want to talk about channel APIs in Rust. A question was raised by @matklad on GitHub, \"I've migrated rust-analyzer to crossbeam-channel 0.3, and the thing I've noticed is that every .send is followed by .unwrap. Perhaps we should make this unwrapping behavior the default, and introduce a separate checked_send which returns a Result?\".",
      "url": "http://www.randomhacks.net/2019/03/08/should-rust-channels-panic-on-send/",
      "date_published": "2019-03-08T16:42:27-05:00",
      "author": {
        "name": "Eric Kidd",
        "url": "http://www.randomhacks.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "b86ab49d-2104-43d3-86c2-3bbf740f08f2",
      "title": "Async, futures, and tokio - Rust Crash Course lesson 7",
      "content_text": "Unlike languages like Haskell, Erlang, and Go, Rust does not have a runtime system providing green threads and asynchronous I/O. However, for many real world use cases, async I/O is strongly desired, if not a hard requirement. The de facto standard library for handling this in Rust is tokio. This post is part of a series based on teaching Rust at FP Complete.",
      "url": "https://www.snoyman.com/blog/2018/12/rust-crash-course-07-async-futures-tokio",
      "date_published": "2018-12-03T00:00:00+00:00",
      "author": {
        "name": "Michael Snoyman",
        "url": "https://www.snoyman.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "6cab1c1c-68f3-4f20-b239-85009d4d563a",
      "title": "How to document Rust's macro invocation",
      "content_text": "You can easily document your Rust items like functions by putting three slashes ///. However, if you want to document each separate invocation of your amazing! macro, it is not that straightfoward.",
      "url": "https://amanjeev.com/blog/rust-document-macro-invocations/",
      "tweet_url": "https://twitter.com/amanjeev/status/1098761574607667200",
      "date_published": "2019-02-21T00:00:00+00:00",
      "author": {
        "name": "Amanjeev Sethi",
        "url": "https://amanjeev.com/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "6d82f826-46bb-4cb3-ba49-3a18c736f5ab",
      "title": "Web Development with Rust: Deploy your first App",
      "content_text": "If you learn something new, always have an updated version of your project in production. It keeps you motivated. We cover the most common options of how to do this in and with Rust.",
      "url": "https://dev.to/gruberb/web-programming-in-rust-02x-deploy-your-first-app-1k05",
      "tweet_url": "https://twitter.com/byteadventures/status/1107933188612124672",
      "date_published": "2019-03-19T20:13:00+00:00",
      "author": {
        "name": "Bastian Gruber",
        "url": "https://dev.to/gruberb"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "54f59df5-bf2f-46e5-a817-0a31878f7cda",
      "title": "Implementing a NES Emulator in Rust",
      "content_text": "Recently, I made an emulator for the Nintendo Entertainment Console(NES) - a game console first released in 1983. In this article, I’ll talk about how I used Rust to develop the emulator. I’ll cover questions like: What features does the emulator support? What games can it play? How did I approach the problem of emulating the NES? Did Rust’s type system or borrow checker interfere? Were there performance issues?",
      "url": "http://www.michaelburge.us/2019/03/18/nes-design.html",
      "tweet_url": "https://twitter.com/TheMichaelBurge/status/1107995144911900672",
      "date_published": "2019-03-18T13:34:00+00:00",
      "author": {
        "name": "Michael Burge",
        "url": "http://www.michaelburge.us/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "da916659-e0c2-4c4c-a793-b4f7273dcd1f",
      "title": "Refactoring Varisat: 3. Conflict Driven Clause Learning",
      "content_text": "This is the third post in my series about refactoring varisat. In this post the new code base turns into a working SAT solver. While you can use the command line tool or the library to solve some small and easy SAT problems now, there is still a lot ahead to gain feature and performance parity with varisat 0.1.\n\nIn the last post we saw how unit propagation is implemented. When some variables are known, unit propagation allows us to derive the values of new variables or finds a clause that cannot be satisfied. Unit propagation alone isn’t enough though, as there is no guarantee to make progress. To continue the search for a satisfying solution after propagating all assignments, it is necessary to make a guess. A natural way to handle this would be recursion and backtracking. This would give us a variant of the DPLL algorithm from which conflict driven clause learning evolved.",
      "url": "https://jix.one/refactoring-varisat-3-cdcl/",
      "date_published": "2019-03-18T20:00:53+01:00",
      "author": {
        "name": "Jannis Harder",
        "url": "https://jix.one/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "187cf7df-3448-4699-86f6-28e90a1a025f",
      "title": "Implementing a Hidden Markov Model in Rust",
      "content_text": "Over the past few months, I’ve implemented hmmm, a Rust library for Hidden Markov Models (HMMs). HMMs are a well-established statistical machine learning technique for modeling sequences of data. They have been applied to problems like speech recognition and bioinformatics. They are called “hidden” because each discrete time step is associated with a hidden state. Below, I’ll briefly discuss some challenges that I ran into while implementing this library.",
      "url": "https://paulkernfeld.com/2019/03/17/hmmm.html",
      "tweet_url": "https://twitter.com/occupy_paul_st/status/1107350612079980549",
      "date_published": "2019-03-17T00:00:00+00:00",
      "author": {
        "name": "Paul Kernfeld",
        "url": "https://paulkernfeld.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "4ba1b199-045c-4ba4-80e2-6741bc648f06",
      "title": "Programming GPIO Interrupts in Rust",
      "content_text": "Using Embedded Rust to configure and service a hardware interrupt on the STM32F3 Discovery board.",
      "url": "https://flowdsp.io/blog/stm32f3-01-interrupts/",
      "tweet_url": "https://twitter.com/antvangelder/status/1107571105026453504",
      "date_published": "2019-03-17T00:00:00+00:00",
      "author": {
        "name": "Antoine van Gelder",
        "url": "https://flowdsp.io/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "208250d2-7529-4548-b658-0b76353e05de",
      "title": "Building and augmenting libraries by calling Rust from JavaScript",
      "content_text": "Explore how to use WebAssembly (Wasm) to embed Rust inside JavaScript.",
      "url": "https://opensource.com/article/19/3/calling-rust-javascript",
      "tweet_url": "https://twitter.com/ryan_levick/status/1107612070411993089",
      "date_published": "2019-03-18T03:02:00-04:00",
      "author": {
        "name": "Ryan Levick",
        "url": "https://opensource.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "04f2e112-c86d-4468-9b75-d74f84429d69",
      "title": "A Rust API for librsvg",
      "content_text": "After the librsvg team finished the rustification of librsvg's main library, I wanted to start porting the high-level test suite to Rust. This is mainly to be able to run tests in parallel, which cargo test does automatically in order to reduce test times. However, this meant that librsvg needed a Rust API that would exercise the same code paths as the C entry points. At the same time, I wanted the Rust API to make it impossible to misuse the library.",
      "url": "https://people.gnome.org/~federico/blog/a-rust-api-for-librsvg.html",
      "date_published": "2019-03-15T13:36:47-06:00",
      "author": {
        "name": "Federico Mena Quintero",
        "url": "https://people.gnome.org/~federico/blog/index.html"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "b1715412-8fc8-4882-9230-71e2b95c4b55",
      "title": "Introducing cargo-instruments: zero-hassle profiling on macOS",
      "content_text": "cargo-instruments (github) is a cargo plugin that makes it easy to profile rust binaries on macOS.  tl;dr: cargo-instruments is a shim between cargo and Xcode's very powerful dtrace-backed diagnostic suite, Instruments. Out of the box, this lets you track cpu / thread usage, allocations, context switches, and a bunch of other stuff.",
      "url": "https://www.reddit.com/r/rust/comments/b20eca/introducing_cargoinstruments_zerohassle_profiling/",
      "date_published": "2019-03-17T13:18:32+11:00",
      "author": {
        "name": "cmyr",
        "url": "https://www.reddit.com/user/cmyr/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "38a15a60-b3e5-49c5-9036-3af3d6bc43ff",
      "title": "Why Hashbrown Does A Double-Lookup",
      "content_text": "I recently finished a detailed review of hashbrown, which will likely become the new implementation for rust's std::collections::HashMap. One of the most surprising things I found was in the implementation of insert. It was doing something that was so offensive to people who care about collection performance that we had designed an entire API to help people avoid it: it did two lookups in the map. However, after some more discussion and review, I concluded that this implementation was reasonable. This post will try to cover why that is.",
      "url": "https://gankro.github.io/blah/hashbrown-insert/",
      "tweet_url": "https://twitter.com/Gankro/status/1108232734076518400",
      "date_published": "2019-03-20T00:00:00+00:00",
      "author": {
        "name": "Alexis Beingessner",
        "url": "https://gankro.github.io/"
      },
      "tags": [
        "Language",
        "Performance"
      ]
    },
    {
      "id": "dc9cf1b6-7814-4a3a-9e3e-adcd17835a81",
      "title": "Governance Working Group announcement",
      "content_text": "I’m very excited to announce the formation of the Governance working group, an offspring of the Core team. The high-level goal of the group is making the workings of the Rust project more predictable and transparent. The working group will examine, document, and propose improvements to some of the policies and procedures that we use to run the project. To that end, the Governance WG will take multiple viewpoints and investigate our current modes of working under the perspective of community members and project members alike. Our aim is to make the project more transparent and also make it easier for interested community members to give effective feedback and stay close to the project.",
      "url": "https://internals.rust-lang.org/t/governance-working-group-announcement/9637",
      "tweet_url": "https://twitter.com/rustlang/status/1107677774968426496",
      "date_published": "2019-03-18T16:01:23+00:00",
      "author": {
        "name": "Florian Gilcher",
        "url": "https://internals.rust-lang.org/u/skade"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "c3575790-8873-4860-bc2a-15ba5f636a42",
      "title": "Persy: an attempt to write a transactional storage engine in Rust",
      "content_text": "Persy is a single file storage engine, all the data, referencing structures and logs are kept in a single file. Persy support read-committed transactions, using copy on write to guarantee high concurrency and isolation, the data consistency is guaranteed by a transaction log that recover the operations in case of crash. Persy provide segments to organize records of different kinds and allow the scan on a single segment. Persy provide index implementation that can be used to associate any simple value to another value or a record reference. In Persy a record is a simple Vec<u8>, the content of the record is ignored by Persy, is just stored and retrieved on request.",
      "url": "http://persy.rs/posts/persy-0.4.html",
      "date_published": "2019-03-15T00:00:00+00:00",
      "author": {
        "name": "tglman",
        "url": "https://gitlab.com/tglman"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "ec8871ce-7c85-42a8-bd0c-e85c09a2f04d",
      "title": "ActivityWatch automatic time-tracking software switches to Rust",
      "content_text": "While Python is a great language to quickly build new features in, it’s not great for performance or deploying to multiple platforms (especially Android). So @johan-bjareholt took on the tremendous task of reimplementing aw-server in the highly performant and secure programming language Rust. Since Rust compiles to Android we have built a library for use on Android, letting us avoid reimplement all of ActivityWatch to Android devices specifically (and vastly decreases the time to port future features like sync to Android).",
      "url": "https://forum.activitywatch.net/t/development-update-march-2019/189",
      "date_published": "2019-03-12T12:06:19+00:00",
      "author": {
        "name": "Erik Bjäreholt",
        "url": "https://forum.activitywatch.net/u/ErikBjare"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "0c70dd5f-51e6-4f07-8707-6783ca471d0c",
      "title": "Remote Development and Debugging of Rust with CLion",
      "content_text": "Most in our team use CLion for Rust development which is especially great for local debugging, alas it is not free. Since we are developing a blockchain it requires careful orchestration of the nodes running on separate machines, and occasionally we need to debug some corner case on a remotely running node. CLion and other JetBrains products have great support of the remote development and debugging. However, unfortunately, Rust is not a primary language of CLion which makes configuration tricky. In this post we walk through the configuration of CLion for remote Rust development and debugging.",
      "url": "https://medium.com/nearprotocol/remote-development-and-debugging-of-rust-with-clion-39c38ced7cc1",
      "tweet_url": "https://twitter.com/NEARProtocol/status/1105574155024384000",
      "date_published": "2019-03-11T01:18:15.454+00:00",
      "author": {
        "name": "Maksym Zavershynskyi",
        "url": "https://medium.com/@zaver.max"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "31d81292-5ae5-4462-8f26-ca156d625f40",
      "title": "Refactoring Varisat: 2. Clause Storage and Unit Propagation",
      "content_text": "This is the second post in my series about refactoring varisat. Since the last post I started implementing some of the core data structures and algorithms of a CDCL based SAT solver: clause storage and unit propagation. In this post I will explain how the these parts work and the rationale behind some of the decisions I made.",
      "url": "https://jix.one/refactoring-varisat-2-clause-storage-and-unit-propagation/",
      "date_published": "2019-03-02T18:18:04+01:00",
      "author": {
        "name": "Jannis Harder",
        "url": "https://jix.one/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "e448a9b1-396d-4b48-8cba-40419fc3cce6",
      "title": "Scientific computing: a Rust adventure [Part 1 - Zero-cost abstractions]",
      "content_text": "We left, at the end of the previous episode, with an intuitive understanding of Rust’s ownership system: we worked with vectors of integers, Vec<i32>, and we came up with a naive - but surprisingly fast! - scalar product implementation followed by a very simple sort function using the bubble sort algorithm.\n\nIn this episode we will implement a generic version of the same scalar product routine. This will require the introduction of several key concepts concerning Rust’s type system: generics, traits, operators, associated types, Copy.",
      "url": "https://www.lpalmieri.com/posts/2019-03-12-scientific-computing-a-rust-adventure-part-1-zero-cost-abstractions/",
      "date_published": "2019-03-12T00:00:00+00:00",
      "author": {
        "name": "Luca Palmieri",
        "url": "https://www.lpalmieri.com/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "23efff3a-8be9-443e-bc32-9de200d2e173",
      "title": "Fast, Bump-Allocated Virtual DOMs with Rust and Wasm",
      "content_text": "Dodrio is a virtual DOM library written in Rust and WebAssembly. It takes advantage of both Wasm’s linear memory and Rust’s low-level control by designing virtual DOM rendering around bump allocation. Preliminary benchmark results suggest it has best-in-class performance.",
      "url": "https://hacks.mozilla.org/2019/03/fast-bump-allocated-virtual-doms-with-rust-and-wasm/",
      "tweet_url": "https://twitter.com/fitzgen/status/1106238920046444545",
      "date_published": "2019-03-14T16:54:44+00:00",
      "author": {
        "name": "Nick Fitzgerald",
        "url": "https://hacks.mozilla.org/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "ad1ab029-a374-4fde-8f62-6100bf699da2",
      "title": "Pulldown_cmark 0.3 release announcement",
      "content_text": "pulldown_cmark, a fast pull parser for the CommonMark markdown standard written in Rust, has just seen its 0.3 release. It marks a milestone for renewed CommonMark test compliance and performance. In this blog post, we'll have a quick look at the goals of the rewrite, how they were achieved and what's next for the crate.",
      "url": "https://fullyfaithful.eu/pulldown-cmark/",
      "tweet_url": "https://twitter.com/raphlinus/status/1106303917455896576",
      "date_published": "2019-03-15T08:19:00+00:00",
      "author": {
        "name": "Marcus Klaas de Vries",
        "url": "https://fullyfaithful.eu/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "eac014e1-98a8-4913-9050-5e7a073b8611",
      "title": "Oxide: The Essence of Rust",
      "content_text": "Rust is a major advancement in industrial programming languages due in large part to its success in bridging the gap between low-level systems programming and high-level application programming. This success has ultimately empowered programmers to more easily build reliable and efficient software, and at its heart lies a novel approach to ownership that balances type system expressivity with usability.\n\nIn this work, we set out to capture the essence of this model of ownership by developing a type systems account of Rust's borrow checker. To that end, we present Oxide, a formalized programming language close to source-level Rust (but with fully-annotated types). This presentation takes a new view of lifetimes as approximate provenances of references, and our type system is able to automatically compute this information through a flow-sensitive substructural typing judgment for which we prove syntactic type safety using progress and preservation. The result is a simpler formulation of borrow checking - including recent features such as non-lexical lifetimes - that we hope researchers will be able to use as the basis for work on Rust.",
      "url": "https://arxiv.org/abs/1903.00982",
      "date_published": "2019-03-03T20:22:37+00:00",
      "author": {
        "name": "Aaron Weiss, Daniel Patterson, Nicholas D. Matsakis, Amal Ahmed",
        "url": "https://arxiv.org/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "356cc6f0-1e2a-4060-8b81-df1d1d6cd911",
      "title": "WASP, a Lisp dialect for performant, concise Web Assembly modules",
      "content_text": "WASP is ‘a LISP programming language for extremely performant and concise web assembly modules.’ That means that you can use WASP to generate WASM modules.",
      "url": "https://medium.com/@nbaltunian/wasp-a-lisp-dialect-for-performant-concise-web-assembly-modules-29f5f7282b6a",
      "tweet_url": "https://twitter.com/iAm__Noah/status/1104238651532369925",
      "date_published": "2019-03-09T04:24:29.408+00:00",
      "author": {
        "name": "Noah",
        "url": "https://medium.com/@nbaltunian"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "7da6de6b-bbf8-4587-ab48-615ee988d899",
      "title": "Up and Running with React + Rust + Wasm",
      "content_text": "I’m super excited about WebAssembly! It’s fast, (can be) small, and extremely portable. In fact, I wouldn’t be surprised if in the near future most web developers write code that eventually gets compiled to Wasm.\n\nBut currently there’s not a huge selection of resources showing how to get started with WebAssembly, and I couldn’t find any tutorials that worked with create-react-app. Most focus on writing and compiling a module, but rush over the details of actually using Wasm code. What follows is a basic setup for a React app using WebAssembly that should serve as a good foundation for more complex applications.",
      "url": "https://prestonrichey.com/blog/react-rust-wasm/",
      "date_published": "2019-02-25T00:00:00+00:00",
      "author": {
        "name": "Preston Richey",
        "url": "https://prestonrichey.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "c4806dc1-431a-46e2-a950-8f29194a87b1",
      "title": "Typetag: Serde serializable and deserializable trait objects",
      "content_text": "Serde serializable and deserializable trait objects. This crate provides a macro for painless serialization of &dyn Trait trait objects and serialization + deserialization of Box<dyn Trait> trait objects.",
      "url": "https://github.com/dtolnay/typetag/blob/master/README.md",
      "date_published": "2019-01-24T01:13:57+00:00",
      "author": {
        "name": "David Tolnay",
        "url": "https://github.com/dtolnay"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "569a6623-bebb-48a6-8946-57b158a4a9b8",
      "title": "Mod player in Rust - part 4. Finally some music",
      "content_text": "In this post we will finally have some music. I will spend some time discussing how the Amiga sound hardware worked. The original mod file format and how it is played back is intimately linked with the Amiga hardware.",
      "url": "https://www.codeslow.com/2019/02/in-this-post-we-will-finally-have-some.html",
      "date_published": "2019-02-17T03:50:00-08:00",
      "author": {
        "name": "Jani Peltonen",
        "url": "https://www.codeslow.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "349a5a06-2dd8-475d-9911-4d777ca6250f",
      "title": "Implementing a static stack usage analysis tool",
      "content_text": "This blog covers the implementation details of cargo-call-stack v0.1.2. So, why would you ever want to analyze the stack usage of your program at compile time? The obvious answer is when you want to know if your application can stack overflow at runtime without actually running your program. This is important for embedded applications where stack overflows can corrupt memory, and it’s actually a hard requirement for certifying the functional safety of embedded applications.",
      "url": "https://blog.japaric.io/stack-analysis/",
      "tweet_url": "https://twitter.com/japaricious/status/1105910686956294146",
      "date_published": "2019-03-13T00:00:00+00:00",
      "author": {
        "name": "Jorge Aparicio",
        "url": "http://blog.japaric.io/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "0febede4-eee9-43df-bd74-dd2a44dcb4fb",
      "title": "A Coding Retreat and Getting Embedded Rust Running on a SensorTag",
      "content_text": "This past long weekend some friends on I went on a coding retreat inspired by John Carmack doing similar in 2018. During the weekend I worked on adding support for the Texas Instruments SensorTag to the embedded Rust ecosystem. This post is a summary of the weekend and what I was able to achieve code wise.",
      "url": "https://www.wezm.net/technical/2019/03/sensortag-embedded-rust-coding-retreat/",
      "tweet_url": "https://twitter.com/wezm/status/1105768615545004034",
      "date_published": "2019-03-12T08:45:00+00:00",
      "author": {
        "name": "Wesley Moore",
        "url": "http://www.wezm.net/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "d3f4b805-773f-499e-84c8-b79fcb40631f",
      "title": "Building the virtualization stack of the future with rust-vmm",
      "content_text": "rust-vmm facilitates sharing core virtualization components between Rust Virtual Machine Monitors.",
      "url": "https://opensource.com/article/19/3/rust-virtual-machine",
      "tweet_url": "https://twitter.com/opensourceway/status/1105092009608577024",
      "date_published": "2019-03-11T00:00:00+00:00",
      "author": {
        "name": "Andreea Florescu",
        "url": "https://opensource.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "5288ae7c-b0a5-4e98-b6ad-512af05f04e4",
      "title": "Azure Pipelines for Rust Projects",
      "content_text": "In this post I will detail why I believe that Azure Pipelines can be a great CI / CD platform for open source Rust projects on Github. The catch is that there are some rough spots on Azure Pipelines and in the rust ecosystem, but everything can be worked around. In writing this post, I hope to detail examples one can copy and paste into their projects.",
      "url": "https://nbsoftsolutions.com/blog/azure-pipelines-for-rust-projects",
      "date_published": "2019-02-28T00:00:00+00:00",
      "author": {
        "name": "Nick Babcock",
        "url": "https://nbsoftsolutions.com/"
      },
      "tags": [
        "DevOps and Deployment"
      ]
    },
    {
      "id": "58a0a3ec-5b93-4e53-bcd0-d8df56d02848",
      "title": "Intro to web programming in Rust for NodeJS developers",
      "content_text": "Rust is different. You can pick up Python or Ruby over the weekend, create a first CRUD application and be happy with the results. With Rust… with Rust you will struggle to pass a String to a different method, change and return it. You then will order the Rust book, see its size, *sigh* and get started. After a few weeks fighting through the book after work, you give up and wait until someone else creates an easy-to-follow tutorial. Here is your “easy” tutorial.",
      "url": "https://medium.com/@gruberbastian/intro-to-web-programming-in-rust-for-nodejs-developers-1a9c048c4de1",
      "tweet_url": "https://twitter.com/byteadventures/status/1104697298813177856",
      "date_published": "2019-03-10T10:53:02.197+00:00",
      "author": {
        "name": "Bastian Gruber",
        "url": "https://medium.com/@gruberbastian"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "ae65ad4b-c966-483f-a57a-965ab7ba7d28",
      "title": "Hardware Debugging a Raspberry Pi using JTAG",
      "content_text": "Functionally, this tutorial is the same as the previous one, where we reset or power down the RPi. Around that, we add infrastructure for JTAG debugging.",
      "url": "https://github.com/rust-embedded/rust-raspi3-OS-tutorials/tree/master/0B_hw_debug_JTAG",
      "date_published": "2019-03-10T13:59:01+00:00",
      "author": {
        "name": "Andre Richter",
        "url": "https://github.com/andre-richter"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "e2a2559d-5bf2-45b6-ba62-a3af84913c3a",
      "title": "rust-audit: Know exact library versions used to build your Rust executable",
      "content_text": "Know exact library versions used to build your Rust executable. Audit binaries for known bugs or security vulnerabilities in production, at scale, with zero bookkeeping.",
      "url": "https://github.com/Shnatsel/rust-audit",
      "date_published": "2019-03-02T20:02:25+00:00",
      "author": {
        "name": "Sergey \"Shnatsel\" Davidoff",
        "url": "https://github.com/Shnatsel"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "23fcf66c-3fff-4894-836d-32a880171b46",
      "title": "How productive is Rust?",
      "content_text": "We often get the question how productive working with Rust is. “We know that it is awesome, but isn’t it hard to learn? Don’t you struggle with the borrow checker?”. Well, we put it to the test in Google’s Hash Code 2019 programming competition.",
      "url": "https://medium.com/@woutergeraedts/how-productive-is-rust-e2260db28f09",
      "tweet_url": "https://twitter.com/jonkers_erik/status/1104024081194799105",
      "date_published": "2019-03-08T12:59:39.723+00:00",
      "author": {
        "name": "Wouter Geraedts",
        "url": "https://medium.com/@woutergeraedts"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "48cd5e22-48f6-4711-a1d2-e9ce7338ef0d",
      "title": "Enjoy Compile time function evaluation using 'const fn' in Rust",
      "content_text": "A few days ago, I was exploring Rust’s Unstable Book and found pretty much same feature in Rust, which is const_fn. I started exploring this feature more after the recent Rust release 1.33.0, in which Rust team has announced major improvements in const fn. The idea of using const fn is to compute result at compile time so that time can be saved when code is run.",
      "url": "https://blog.knoldus.com/no-more-run-time-enjoy-compile-time-function-evaluation-using-const-fn-in-rust/",
      "date_published": "2019-03-04T15:26:43+00:00",
      "author": {
        "name": "Ayush Mishra",
        "url": "https://blog.knoldus.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "04aedaf8-e7fe-4b54-8b6c-9fb77e31f739",
      "title": "Rust benchmarking with Criterion on Travis CI",
      "content_text": "Criterion allows you to benchmark against Rust stable, but it’s also providing a set of awesome features: Statistics: Statistical analysis detects if, and by how much, performance has changed since the last benchmark run. Charts: Uses gnuplot to generate detailed graphs of benchmark results. Stable-compatible: Benchmark your code without installing nightly Rust.",
      "url": "https://medium.com/@yamafaktory/rust-benchmarking-with-criterion-on-travis-ci-%EF%B8%8F-8b54d321e05",
      "tweet_url": "https://twitter.com/yamafaktory/status/1089648630729007104",
      "date_published": "2019-01-27T22:14:12.147+00:00",
      "author": {
        "name": "Davy Duperron",
        "url": "https://medium.com/@yamafaktory"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "977952df-eb7d-43eb-82e2-3e53b7e00a72",
      "title": "Torchbear - a fast and complete interpreter for the new Speakeasy langauge",
      "content_text": "Torchbear is a new programming environment currently available for Windows, Android, MacOS, and Linux. With it, you get Rust's great library ecosystem, but you don't need to recompile with each change to how you use those libraries. Since you express your domain logic in a higher level scripting language and your system logic in Rust's language, you get the best of both worlds!",
      "url": "https://github.com/foundpatterns/torchbear",
      "date_published": "2019-03-06T13:17:44+11:00",
      "author": {
        "name": "Mitchell Tannenbaum",
        "url": "https://github.com/foundpatterns"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "861a769a-5c77-4afb-bb9d-b0e05cd3855e",
      "title": "The rise of wgpu: Native WebGPU implementation based on gfx-hal",
      "content_text": "WebGPU is a new graphics/compute API developed by the browser vendors (and Intel) within W3C: The goal is to design a new Web API that exposes these modern technologies in a performant, powerful and safe manner.\n\nDon’t be confused by the “Web” part here - both us (gfx-rs team) and Google are trying to make it feasible to run on native platforms as well. Typically, the Web as a platform has different priorities from native: a lot of focus is placed on the security and portability (in a wider and stronger sense). Coincidentally, these are qualities we are currently missing in the gfx-rs ecosystem: security means safety (in the Rust sense), and portability means that people can use it and run everywhere, without worrying about thousands of potential configurations at run-time, or diverging behavior between platforms due to timing differences or loosely defined behavior.\n\nWith these goals in mind, we’d like to announce our new project: wgpu-rs.",
      "url": "https://gfx-rs.github.io/2019/03/06/wgpu.html",
      "date_published": "2019-03-06T00:00:00+00:00",
      "author": {
        "name": "gfx-rs",
        "url": "https://gfx-rs.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "25b303a5-4e11-416b-a5a5-db8f7d35db8c",
      "title": "Embedded Graphics 0.4.7 and TinyBMP 0.1.0",
      "content_text": "Embedded graphics 0.4.7 has been released, along with a new sister crate, tinybmp! TinyBMP aims to parse BMP-format image data using no dynamic allocations. It targets embedded environments but can be used in any place a small BMP parser is required. Thanks to TinyBMP, Embedded Graphics now supports loading this simple image format. The header photo was made using Embedded Graphics and the SSD1331 driver in pure Rust. In this post, I’ll talk through how the BMP file is parsed in no_std environments with nom and how to get BMP images working with embedded_graphics.",
      "url": "https://wapl.es/rust/2019/03/04/embedded-graphics-0.4.7-bmp-support.html",
      "tweet_url": "https://twitter.com/jam_waffles/status/1102688065850667010",
      "date_published": "2019-03-05T08:51:11+00:00",
      "author": {
        "name": "James Waples",
        "url": "https://wapl.es/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "c2a5636f-d083-4e22-94d7-5b26df1b173d",
      "title": "The Embedded Working Group Newsletter - 16",
      "content_text": "This is the sixteenth newsletter of the Embedded WG where we highlight new progress, celebrate cool projects, thank the community, and advertise projects that need help!",
      "url": "https://rust-embedded.github.io/blog/newsletter-16/",
      "tweet_url": "https://twitter.com/rustembedded/status/1103416332786302977",
      "date_published": "2019-03-06T00:00:00+00:00",
      "author": {
        "name": "The Embedded Working Group",
        "url": "https://rust-embedded.github.io/blog"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "ca80053b-f874-4631-9f13-c8ffaf6dabd6",
      "title": "From 48s to 5s - optimizing a 350 line pathtracer in Rust",
      "content_text": "In this post I’ll talk about how to port a short raytracer written in C#/C++ codebase to Rust, then applying some simple optimizations by leveraging some features in Rust.",
      "url": "https://medium.com/@cfsamson/from-48s-to-5s-optimizing-a-350-line-pathtracer-in-rust-191ab4a1a412",
      "date_published": "2019-03-04T23:03:25.223+00:00",
      "author": {
        "name": "Carl Fredrik Samson",
        "url": "https://medium.com/@cfsamson"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "fee5c201-613a-4b03-832a-369ceb788400",
      "title": "Mod player in Rust - part 3. Audio and threads",
      "content_text": "I finished my last post with having a fully parsed mod file in memory and ready to be played. By the end of this post I want to get the code into a state where the main thread lets the user pick instruments from the mod file and play them back on the audio thread.",
      "url": "https://www.codeslow.com/2019/02/mod-player-in-rust-part-3-audio-and.html",
      "date_published": "2019-02-04T14:42:00-08:00",
      "author": {
        "name": "Jani Peltonen",
        "url": "https://www.codeslow.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "df193fd9-bd7c-45bc-bc27-27ba8dee5bbb",
      "title": "Entity component system (ECS) explained with tennis players and courts",
      "content_text": "In the last post  I talked about a small game I built in Rust and roughly how far I got in 24 hours. One of the biggest challenges I had was…",
      "url": "http://iolivia.me/posts/entity-component-system-explained/",
      "date_published": "2019-03-03T00:00:00+00:00",
      "author": {
        "name": "Olivia Ifrim",
        "url": "http://iolivia.me/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "aa9ed2af-2308-4ae8-a009-caf772f96e3b",
      "title": "Part 4: Line IDs in toy version control system, oji",
      "content_text": "I’ve written quite a bit about the theory of patches and merging, but nothing yet about how to actually implement anything efficiently. That will be the subject of this post, and probably some future posts too.",
      "url": "https://jneem.github.io/ids/",
      "date_published": "2019-02-25T00:00:00+00:00",
      "author": {
        "name": "Joe Neeman",
        "url": "https://jneem.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "f333987d-a697-4e1c-8667-7d6bd4e765de",
      "title": "Rust EDP: Build SGX enclaves in Rust",
      "content_text": "Secure enclaves provide an operating environment for code which is secure from interference by outside parties, including root users, malware, and the OS. This environment is built on three key pillars: Fully isolated execution, Sealing, Remote attestation. The Fortanix Enclave Development platform lets you write complete applications inside an enclave. The Fortanix EDP is fully integrated with the Rust compiler. Rust code that doesn't link to native libraries and that doesn't use processes or files should compile out of the box.",
      "url": "https://edp.fortanix.com/",
      "tweet_url": "https://twitter.com/JethroGB/status/1090335181750206464",
      "date_published": "2019-01-30T06:45:00+00:00",
      "author": {
        "name": "Jethro Beekman",
        "url": "https://twitter.com/JethroGB"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "e0caaf97-6980-4421-afbe-3fca31872c73",
      "title": "Releasing rust_gpiozero v0.2.0",
      "content_text": "A new version packed with new features and improvements: Blink leds without blocking main thread and adjust brightness. ⚙️ Work with servo motors and adjust motor speed. 〜 Work with software PWM.",
      "url": "https://rahul-thakoor.github.io/releasing-rust_gpiozero-v0.2.0/",
      "tweet_url": "https://twitter.com/rahulthakoor/status/1100791415561469952",
      "date_published": "2019-02-27T17:43:48+04:00",
      "author": {
        "name": "Rahul Thakoor",
        "url": "https://rahul-thakoor.github.io/"
      },
      "tags": [
        "Crates",
        "Embedded"
      ]
    },
    {
      "id": "28f6c857-f8f6-4ff3-8a21-12c894a7dbb8",
      "title": "JavaFX UI in Rust",
      "content_text": "In this post, I would like to share the way how we can implement a Rust application that has a User Interface written in JavaFX.",
      "url": "https://astonbitecode.github.io/blog/post/rust-javafx/",
      "date_published": "2019-02-28T00:05:58+00:00",
      "author": {
        "name": "Aston",
        "url": "https://astonbitecode.github.io/blog"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a1899a77-1a12-49f3-92e2-5e353491c8ae",
      "title": "Forge: A scripting language for Rust gamedev inspired by JS, Rust and Python",
      "content_text": "Forge is a dynamically-typed language written in Rust. It is inspired by JavaScript, Rust, Python and Rhai. In the future, you'll be able to use Forge as a general-purpose lightweight scripting language in your applications.",
      "url": "https://github.com/zesterer/forge",
      "tweet_url": "https://twitter.com/rust_gamedev/status/1100445678650691587",
      "date_published": "2019-02-27T04:21:00+00:00",
      "author": {
        "name": "Joshua Barretto",
        "url": "https://github.com/zesterer"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "fe2180a3-53fb-4b12-b6b2-722c19587b39",
      "title": "100x improvement on startup time in Wasmer 0.2.0",
      "content_text": "We’ve been working steadily to get Wasmer to execute WebAssembly modules on the server-side as fast as possible. TL;DR — We got 100x improvement on startup time on Wasmer 0.2.0.",
      "url": "https://medium.com/wasmer/running-webassembly-100x-faster-%EF%B8%8F-a8237e9a372d",
      "date_published": "2019-02-25T22:04:55.331+00:00",
      "author": {
        "name": "Syrus Akbary",
        "url": "https://medium.com/@syrusakbary"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "53d60351-cb50-4f9f-83d7-e6c8d94ab025",
      "title": "Part 3: Graggles can have cycles",
      "content_text": "Almost two years ago, I promised a series of three posts about version control. The first two (here and here) introduced a new (at the time) framework for version control. The third post, which I never finished, was going to talk about the datastructures and algorithms used in pijul, a version control system built around that new framework. The problem is that pijul is a complex piece of software, and so I had lots of trouble wrapping my head around it.\n\nTwo years later, I’m finally ready to continue with this series of posts (but having learned from my earlier mistakes, I’m not going to predict the total number of posts ahead of time). In the meantime, I’ve written my own toy version control system (VCS) to help me understand what’s going on. It’s called ojo, and it’s extremely primitive: to start with, it can only track a single file. However, it is (just barely) sophisticated enough to demonstrate the important ideas. I’m also doing my best to make the code is clear and well-documented.",
      "url": "https://jneem.github.io/cycles/",
      "date_published": "2019-02-19T00:00:00+00:00",
      "author": {
        "name": "Joe Neeman",
        "url": "https://jneem.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "650d3646-0583-473d-bb43-a2f22f2e8e7d",
      "title": "Rust Lifetime Visualization Ideas",
      "content_text": "Many people have had the idea that there should be a way to visualize lifetimes in Rust. Indeed, the Rust Book used to include ASCII diagrams of lifetimes in some code examples. When fighting the borrow checker, it would be great if the IDE or editor could automatically provide a visualization of the lifetimes in your code.",
      "url": "https://blog.adamant-lang.org/2019/rust-lifetime-visualization-ideas/",
      "date_published": "2019-02-18T00:00:00+00:00",
      "author": {
        "name": "Jeff Walker",
        "url": "https://blog.adamant-lang.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "b72bfa37-94f9-4758-9028-225ce6f93877",
      "title": "Safe Way to access private fields in Rust",
      "content_text": "Do you want your fields to be private but got stuck in accessing them from other module. Then this blog let you know the ways to access the private fields as well as which one is safer way.",
      "url": "https://blog.knoldus.com/safe-way-to-access-private-fields-in-rust/",
      "date_published": "2019-03-04T06:04:58+00:00",
      "author": {
        "name": "Amita Yadav",
        "url": "https://blog.knoldus.com/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "c921449d-2331-49fc-b265-9219380330ed",
      "title": "Mod player in Rust - part 2",
      "content_text": "My last article finished with reading the pattern tables from the mode files. In this post I want to finish parsing the entire file so we can move onto playing it. First we need to work out where the pattern data is and how long it is.",
      "url": "https://www.codeslow.com/2019/01/mod-player-in-rust-part-2.html",
      "date_published": "2019-01-26T03:39:00-08:00",
      "author": {
        "name": "Jani Peltonen",
        "url": "https://www.codeslow.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "38d6b47d-bd95-4566-af44-c30769c1e149",
      "title": "24 hours of game development in Rust",
      "content_text": "In this post I'll talk about a small game I've been developing in about 24 hours in total (mostly in a few hour blocks during evenings or weekends). The game is far from finished, but I thought I'd write up about my experience so far, what I've learnt and some interesting observations about building a game from scratch-ish and doing it in Rust.",
      "url": "http://iolivia.me/posts/24-hours-of-rust-game-dev/",
      "tweet_url": "https://twitter.com/oliviff/status/1101546144436498437",
      "date_published": "2019-03-01T00:00:00+00:00",
      "author": {
        "name": "Olivia Ifrim",
        "url": "http://iolivia.me/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "e9d10b77-3f54-4479-b685-26efa74f67ce",
      "title": "Getting started with Rust FFI",
      "content_text": "The memory models of Rust and C can often cause a lot of friction. This guide is born out of my own personal struggles writing transmission-sys a wrapper for the Transmission BitTorrent client. Though in this guide we will go over the much simpler example of writing a wrapper for libevent-sys.",
      "url": "https://rushsteve1.us/wp/getting-started-with-rust-ffi/",
      "date_published": "2019-02-15T03:00:32+00:00",
      "author": {
        "name": "Rushsteve1",
        "url": "https://rushsteve1.us/wp/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c838f89e-80f8-4146-b26e-622020ff2653",
      "title": "Async-await status report",
      "content_text": "I wanted to post a quick update on the status of the async-await effort. The short version is that we’re in the home stretch for some kind of stabilization, but there remain some significant questions to overcome.",
      "url": "http://smallcultfollowing.com/babysteps/blog/2019/03/01/async-await-status-report/",
      "tweet_url": "https://twitter.com/nikomatsakis/status/1101591018686869506",
      "date_published": "2019-03-01T00:00:00-05:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4a9fd96a-fd25-48dd-a97e-511e023b35f8",
      "title": "Proposal: New channels for Rust’s standard library",
      "content_text": "In this blog post, I’m proposing we also replace the guts of mpsc with crossbeam-channel for some more performance wins. However, unlike with mutexes and hash maps, this change will also enable oft-requested new features that make it tempting to deprecate mpsc altogether and introduce better channels designed from scratch.",
      "url": "https://stjepang.github.io/2019/03/02/new-channels.html",
      "tweet_url": "https://twitter.com/stjepang/status/1101818131482398720",
      "date_published": "2019-03-02T00:00:00+00:00",
      "author": {
        "name": "Stjepan Glavina",
        "url": "https://stjepang.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "7fa900ce-52d1-494e-b770-ed5ef64aea61",
      "title": "Building fast interpreters in Rust",
      "content_text": "we created a configurable Rust library for writing and executing Wireshark®-like filters in different parts of our stack written in Go, Lua, C, C++ and JavaScript Workers. We have now open-sourced this library under our Github account: https://github.com/cloudflare/wirefilter. This post will dive into its design, explain why we didn’t use a parser generator and how our execution engine balances security, runtime performance and compilation cost for the generated filters.",
      "url": "https://blog.cloudflare.com/building-fast-interpreters-in-rust/",
      "tweet_url": "https://twitter.com/RReverser/status/1102603707584315393",
      "date_published": "2019-03-04T16:00:00+00:00",
      "author": {
        "name": "Ingvar Stepanyan",
        "url": "https://blog.cloudflare.com/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "a540ae81-ddbb-4279-a507-b7faf43e5b19",
      "title": "Pedal to the metal: dynamic templates with Ramhorns",
      "content_text": "I have a problem. I don't know what to call it, but there is this itch I have when I find something that can obviously be made more efficient. The way I get about scratching that itch these days is by writing some Rust. I just got such an itch when looking at static site generators for this blog, Hugo (written in Go) is pretty much state-of-the art. In Rust land we have Zola, which is feature-rich, mature (for v0.5), and definitely fast enough for most users, and yet it is not as fast as it could be. Being written in Rust is, by itself, not a guarantee of top performance. The implementation matters. After some looking around I've narrowed down a problem I want to tackle (for now) to one area: template engines.",
      "url": "https://maciej.codes/2019-03-03-ramhorns.html",
      "tweet_url": "https://twitter.com/MaciejHirsz/status/1102289289671516163",
      "date_published": "2019-03-03T00:00:00+00:00",
      "author": {
        "name": "Maciej Hirsz",
        "url": "https://maciej.codes/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "ce110dd7-46c1-4f12-880f-1c0bbf3a6726",
      "title": "Starling, the Binary Indexed Merkle Tree (Or Merkle-BIT)",
      "content_text": "Hey rustaceans! With a little help from your feedback just a few hours ago, I'm proud to present to you all Starling, a Binary Indexed Merkle tree! I've been working on this data structure for the last few months, and I think it is ready now for the community to have a look. Let me explain what it is and why it might be useful for your project.",
      "url": "https://www.reddit.com/r/rust/comments/aww097/starling_the_binary_indexed_merkle_tree_or/",
      "date_published": "2019-03-04T04:12:50+11:00",
      "author": {
        "name": "ChosunOne",
        "url": "https://www.reddit.com/user/ChosunOne"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "17e95b5e-6cd8-4f98-8030-c923e69897cb",
      "title": "luster: An experimental Lua VM implemented in pure Rust",
      "content_text": " What I want to talk about though (and what I will eventually write a blog post about) is the technique that I'm using in luster for safe garbage collection. Inside luster are two libraries called \"gc-arena\" and \"gc-sequence\", and they represent a new (I believe novel?) system for safe garbage collection in Rust. There have been several attempts here before such as rust-gc and shifgrethor, and this represents another attempt with... different? limitations more appropriate for implementing language runtimes like Lua.",
      "url": "https://www.reddit.com/r/rust/comments/awx9cy/github_kyrenluster_an_experimental_lua_vm/",
      "date_published": "2019-03-04T06:26:29+11:00",
      "author": {
        "name": "Catherine West",
        "url": "https://kyren.github.io/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "2c0b32cc-51a7-4e6f-a729-92c6cedcd7b1",
      "title": "Our first Rust crate: decrypting ansible vaults",
      "content_text": "We encrypt these secrets in so-called ansible vaults. Kuberwave also has the need to access these secrets. Because our staff is already comfortable with using these vaults, we’ve decided to also employ them for our Kubernetes setup. For this I created ansible-vault-rs, a library that can decrypt ansible vaults. Note that it can not create or edit vaults, because I have no need (yet) for this functionality.",
      "url": "https://medium.com/@woutergeraedts/our-first-rust-crate-decrypting-ansible-vaults-25f2f3a9a674",
      "date_published": "2019-02-22T08:12:26.080+00:00",
      "author": {
        "name": "Wouter Geraedts",
        "url": "https://medium.com/@woutergeraedts"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "fae48adb-0406-4124-b06d-6b9d7a667d85",
      "title": "Zero knowledge proofs using Bulletproofs",
      "content_text": "I will show how to create various zero knowledge proofs using the Bulletproofs implementation from dalek-cryptography. The examples will be i) proving knowledge of factors of a given number without revealing the factors, ii) a range proof, i.e. prove that you know a value x such that a ≤ x ≤ b without revealing x, iii) prove that the value you have is non-zero without revealing it (without using above range proof), iv) Set membership, i.e given a set S, prove that you know an element contained in the set without revealing the element, v) Similarly, set non-membership without revealing the value of the absent element. The examples can be adapted with little effort such that they can be used in ZK-SNARK implementations like libsnark or bellman.",
      "url": "https://medium.com/coinmonks/zero-knowledge-proofs-using-bulletproofs-4a8e2579fc82",
      "date_published": "2019-02-23T20:38:04.316+00:00",
      "author": {
        "name": "Lovesh Harchandani",
        "url": "https://medium.com/@loveshharchandani"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "7ace680c-a527-42f6-9eeb-dc4fd680aa53",
      "title": "What is Happening in Piston 7",
      "content_text": "This blog post is a brief summary of what happened the past 8 months in the Piston project.",
      "url": "http://blog.piston.rs/2019/02/08/what-is-happening-7/",
      "tweet_url": "https://twitter.com/PistonDeveloper/status/1093976386669301766",
      "date_published": "2019-02-08T00:00:00+00:00",
      "author": {
        "name": "Sven Nilsen",
        "url": "http://blog.piston.rs/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "1ffc5388-6476-4542-90c1-398c561a2c43",
      "title": "Implications of Rewriting a Browser Component in Rust",
      "content_text": "Since our first release in 2002, there have been 69 security bugs in Firefox’s style component. If we'd had a time machine and could have written this component in Rust from the start, 51% wouldn't have happened. That said, Rust is not foolproof. Developers still need to be aware of correctness bugs and data leakage attacks.",
      "url": "https://hacks.mozilla.org/2019/02/rewriting-a-browser-component-in-rust/",
      "tweet_url": "https://twitter.com/avadacatavra/status/1101153297048719360",
      "date_published": "2019-02-28T14:10:27+00:00",
      "author": {
        "name": "Diane Hosfelt",
        "url": "https://hacks.mozilla.org/"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "e6376cd5-713f-4a8e-8792-2329772feee5",
      "title": "Announcing Rust 1.33.0",
      "content_text": "The Rust team is happy to announce a new version of Rust, 1.33.0. The two largest features in this release are significant improvements to const fns, and the stabilization of a new concept: \"pinning.\"",
      "url": "https://blog.rust-lang.org/2019/02/28/Rust-1.33.0.html",
      "tweet_url": "https://twitter.com/rustlang/status/1101200862679056385",
      "date_published": "2019-02-28T00:00:00+00:00",
      "author": {
        "name": "The Rust Release Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a6483426-5600-4cf0-a514-c532946abda3",
      "title": "Bid adieu to tarpaulin, HTML reports are here for Rust",
      "content_text": "Kcov is a code coverage tool for Binaries, Shell scripts as well as Python scripts. It generates an HTML file for most of the languages. But we will focus mainly on Rust language.",
      "url": "https://blog.knoldus.com/bid-adieu-to-tarpaulin-html-reports-are-here-for-rust/",
      "tweet_url": "https://twitter.com/muditchhabra1/status/1100297216210751493",
      "date_published": "2019-02-26T06:41:19+00:00",
      "author": {
        "name": "Mudit Chhabra",
        "url": "https://blog.knoldus.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c8769017-9667-4bad-82c6-e43ec7391182",
      "title": "This Week in Pop!_OS 1",
      "content_text": "This will be the first in a series of weekly updates on progress made in the development of Pop!_OS. Thus, this will only contain content pertaining specifically to Pop!_OS, though at times there may be some overlap with the hardware side of System76.",
      "url": "https://pop-planet.info/2019/02/this-week-in-pop/",
      "date_published": "2019-02-28T00:20:54+00:00",
      "author": {
        "name": "Michael Murphy",
        "url": "https://pop-planet.info/author/mmstickmangmail-com/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "70a94e2b-dbd2-4f66-ada8-5886b5c51fab",
      "title": "Low level text layout kickoff",
      "content_text": "This post is to announce a new Rust library for low-level text layout, called “skribo” (the Esperanto word for “writing”). This has been a major gap in the Rust ecosystem, and I hope the new crate can improve text handling across the board.",
      "url": "https://raphlinus.github.io/rust/skribo/text/2019/02/27/text-layout-kickoff.html",
      "tweet_url": "https://twitter.com/raphlinus/status/1100889936322912256",
      "date_published": "2019-02-27T18:16:42+00:00",
      "author": {
        "name": "Raph Levien",
        "url": "https://raphlinus.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "f93cc38e-4380-4174-8f53-b5c6674772da",
      "title": "Rust build scripts vs. Meson",
      "content_text": "One of the pain points in trying to make the Meson build system work with Rust and Cargo is Cargo's use of build scripts, i.e. the build.rs that many Rust programs use for doing things before the main build. This post is about my exploration of what build.rs does.",
      "url": "https://people.gnome.org/~federico/blog/rust-build-scripts.html",
      "date_published": "2019-02-27T12:14:12-06:00",
      "author": {
        "name": "Federico Mena Quintero",
        "url": "https://people.gnome.org/~federico/blog/index.html"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "756d2f52-51dd-4408-ae79-3b17c02849e3",
      "title": "Comparing C and Rust network protocol exercises - Ayende @ Rahien",
      "content_text": "Almost by accident, it turned out that I implemented a pretty simple, but non trivial task in both C and Rust and blogged about them. Now that I’m done with both of them, I thought it would be interesting to talk about the differences in the experiences. The Rust version clocks at exactly 400 lines of code and uses 12 external crates. The C version has 911 lines of C code and another 140 lines in headers and depends on libuv and openssl.",
      "url": "https://ayende.com/blog/185859-A/comparing-c-and-rust-network-protocol-exercises?Key=bd1ba87d-6e7e-4739-824d-0ca6fc232b05",
      "date_published": "2019-02-05T00:00:00+00:00",
      "author": {
        "name": "Ayende Rahien",
        "url": "https://ayende.com/blog/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "03e057c7-1da0-4468-b0f8-3aaedde6b241",
      "title": "Combine Results for Improved Rust Validation Logic",
      "content_text": "The error handling features within Rust are some of my favorite things about the language. This system works great when you are in a function which returns a Result and you want to exit at the first error you come to. However, it can be challenging if your goal is to try a few failure-prone things and return each of the errors, rather than just the first error. This is the problem multi_try attempts to solve. ",
      "url": "https://www.joshmcguigan.com/blog/multi-try-improved-validation-logic-rust/",
      "date_published": "2019-02-23T00:00:00+00:00",
      "author": {
        "name": "Josh Mcguigan",
        "url": "https://www.joshmcguigan.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "a40e4318-64e5-4929-800f-4308c242b49c",
      "title": "You can live without Exceptions, if you are using Rust",
      "content_text": "If you are coming from Java background, where you have used Exception Handling extensively and you have started working on new language like Rust, which doesn’t support Exception Handling then you will be forced to think that does such kind of world really exists?",
      "url": "https://blog.knoldus.com/you-can-live-without-exceptions-if-you-are-using-rust/",
      "tweet_url": "https://twitter.com/ayushmishra2005/status/1097411491978973186",
      "date_published": "2019-02-18T08:18:34+00:00",
      "author": {
        "name": "Ayush Mishra",
        "url": "https://blog.knoldus.com/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "12b9edfa-c917-436a-b001-76305b65eb0d",
      "title": "Working with Command Line Arguments in Rust",
      "content_text": "Command Line Arguments are used to control program from outside instead of hard-coding those values inside the code and supplied to program when it is invoked. In this blog, I’ll demystify you how to use Command Line Arguments in the Rust Programming Language.",
      "url": "https://blog.knoldus.com/working-with-command-line-arguments-in-rust/",
      "tweet_url": "https://twitter.com/pawanbisht62/status/1100297380895719424",
      "date_published": "2019-02-26T07:05:40+00:00",
      "author": {
        "name": "Pawan Bisht",
        "url": "https://blog.knoldus.com/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "e7d75d4a-b84d-41fd-a164-016bb9e9d99c",
      "title": "The Embedded Working Group Newsletter - 15",
      "content_text": "This is the fifteenth newsletter of the Embedded WG where we highlight new progress, celebrate cool projects, thank the community, and advertise projects that need help!",
      "url": "https://rust-embedded.github.io/blog/newsletter-15/",
      "tweet_url": "https://twitter.com/rustembedded/status/1098218372469268480",
      "date_published": "2019-02-20T00:00:00+00:00",
      "author": {
        "name": "The Embedded Working Group",
        "url": "https://rust-embedded.github.io/blog"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "ddee0856-44f0-4b27-a925-8c7b39904a35",
      "title": "Mod player in Rust - part 1",
      "content_text": "For my next Rust project I want to try something a bit more challenging than the Sudoku solver. I want to write a mod player in Rust.",
      "url": "https://www.codeslow.com/2019/01/mod-player-in-rust-part-1.html",
      "date_published": "2019-01-19T12:43:00.001-08:00",
      "author": {
        "name": "Jani Peltonen",
        "url": "https://www.codeslow.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "dfa770cf-7919-4344-b9ef-6ad7b5e0a084",
      "title": "Rust 2019: Rust Audio",
      "content_text": "Howdy y'all. This is a super late 2019 goal post but I drank too much coffee this morning and wanted to get some thoughts out. I'd love to see 2019 be a great year for progressing the environment for developing audio applications in Rust. I'm not saying that there aren't already some good libraries out there, but in comparison with the defacto C++ offerings, we have a long way to go. Basically, I'd love to see an alternative to JUCE in Rust, and that is very ambitious because JUCE is an amazing library!",
      "url": "https://www.reddit.com/r/rust/comments/aua2tb/rust_2019_rust_audio/?st=JSJEXJDY&sh=497b171c",
      "date_published": "2019-02-25T04:21:15+11:00",
      "author": {
        "name": "u/engid",
        "url": "https://www.reddit.com/user/engid"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "8d4c090f-e6e3-4975-abe7-385479579cfa",
      "title": "Scientific computing: a Rust adventure [Part 0 - Vectors]",
      "content_text": "My daily work revolves around building Machine Learning applications, while a lot of my evenings have been spent experimenting with Rust, getting more and more fascinated and in love with the language.\n\nIt couldn’t be helped: I started to have a look at what the Rust ecosystem had to offer for Machine Learning, Big Data and scientific computing at large. I quickly found out that there is a lot to be done and a lot of potential (see here or here). It got me really fired up 🔥",
      "url": "https://www.lpalmieri.com/posts/2019-02-23-scientific-computing-a-rust-adventure-part-0-vectors/",
      "date_published": "2019-02-23T00:00:00+00:00",
      "author": {
        "name": "Luca Palmieri",
        "url": "https://www.lpalmieri.com/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "e513ef63-5727-4db5-8830-08606838d1e3",
      "title": "Introducing battery crate",
      "content_text": "My new pet project for reading batteries information in Rust.",
      "url": "https://svartalf.info/posts/2019-02-25-introducing-battery-crate/",
      "date_published": "2019-02-25T00:00:00+00:00",
      "author": {
        "name": "Nikita Kuznetsov",
        "url": "https://svartalf.info/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "34d09d33-17ae-4799-9026-f41fc6d95fe4",
      "title": "Firmware examples that make use of the jnet embedded TCP/IP crate",
      "content_text": "[Experiment] JNeT: japaric's network thingies.",
      "url": "https://github.com/japaric/jnet/tree/master/firmware",
      "tweet_url": "https://twitter.com/japaricious/status/1100086803955150848",
      "date_published": "2019-02-26T04:35:00+00:00",
      "author": {
        "name": "Jorge Aparicio",
        "url": "http://blog.japaric.io/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "938a7c8a-5c3d-4adb-82e0-caf416396075",
      "title": "Fearless concurrency: how Clojure, Rust, Pony, Erlang and Dart let you achieve that",
      "content_text": "several models that make it easier to reason about concurrent programs have been envisioned over time. In this article, we'll have a quick look at a few of them, from new to not-so-new languages. I don't intend to give an extensive analysis of each solution, or make a formal comparison between them. My intention is to simply explain the basics of each solution and how they can be used in practice (with code samples that show off what the result of using the models might look like), so that other developers may have an easier time understanding them and deciding which solution, or language, might be better applicable to their particular problems.",
      "url": "https://sites.google.com/a/athaydes.com/renato-athaydes/posts/fearlessconcurrencyhowclojurerustponyerlanganddartletyouachievethat",
      "date_published": "2019-02-24T09:13:00+00:00",
      "author": {
        "name": "Renato Athaydes",
        "url": "https://sites.google.com/a/athaydes.com/renato-athaydes/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "b149b575-39a9-4136-8749-29e04c5cf0b3",
      "title": "Rust Case Study: Community makes Rust an easy choice for npm [pdf]",
      "content_text": "Learn how npm uses Rust",
      "url": "https://www.rust-lang.org/static/pdfs/Rust-npm-Whitepaper.pdf",
      "tweet_url": "https://twitter.com/rustlang/status/1100431955697590274",
      "date_published": "2019-02-27T03:26:00+00:00",
      "author": {
        "name": "The Rust Core Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "3efffa85-74d0-41d1-8d14-c5933470cf0a",
      "title": "Building an Embedded Futures Executor",
      "content_text": "After discovering that the embedded-hal ecosystem wasn't quite what I wanted it to be, I set out to build the abstractions that I wanted to use, namely: async-first and core::future compatible. The first thing on the list? A way to run the Futures of course!",
      "url": "https://josh.robsonchase.com/embedded-executor/",
      "date_published": "2019-01-26T22:00:00-05:00",
      "author": {
        "name": "Josh Robson Chase",
        "url": "https://josh.robsonchase.com/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "2c0fbe82-0ef4-455a-94f9-886472559fdb",
      "title": "MPSC Channel API for painless usage of threads with GTK in Rust",
      "content_text": "A very common question that comes up on IRC or elsewhere by people trying to use the gtk-rs GTK bindings in Rust is how to modify UI state, or more specifically GTK widgets, from another thread. I’ll take this opportunity to also explain why it’s not so trivial in Rust first and also explain another solution.",
      "url": "https://coaxion.net/blog/2019/02/mpsc-channel-api-for-painless-usage-of-threads-with-gtk-in-rust/",
      "tweet_url": "https://twitter.com/sdroege_/status/1094227943595872256",
      "date_published": "2019-02-09T13:25:55+00:00",
      "author": {
        "name": "Sebastian Dröge",
        "url": "https://coaxion.net/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "df83e971-50b8-474a-8ecf-dd9a2b213972",
      "title": "Writing a Rust Roguelike for the Desktop and the Web",
      "content_text": "I want to participate in this year's 7 Day Roguelike Challenge. If you've looked around this blog, you know the language is going to be Rust. But for the 7DRL, I'd really love if people could play it in the browser. What follows is a little guide to get you to a small playable proof of concept that can build native Windows, macOS and Linux executables but also runs in the browser via WebAssembly.",
      "url": "https://aimlesslygoingforward.com/blog/2019/02/09/writing-a-rust-roguelike-for-the-desktop-and-the-web/",
      "tweet_url": "https://twitter.com/TomasSedovic/status/1094558910760079361",
      "date_published": "2019-02-09T18:13:52+00:00",
      "author": {
        "name": "Tomas Sedovic",
        "url": "https://aimlesslygoingforward.com/blog/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "295b15d9-04eb-420c-bc3e-8b3c12a81882",
      "title": "Visualizing your Rust code using graphviz",
      "content_text": "In a previous post I mentioned that the Rust compiler allows you to output interesting intermediate languages/formats in a number of different ways. hir, mir and even flowgraphs! In this post I will be giving a brief overview of the flowgraph format and also instructions on how to generate images from your code.",
      "url": "https://jonathansteyfkens.com/posts/visualizing-rust.html",
      "tweet_url": "https://twitter.com/Jonathansty/status/1097152933106515970",
      "date_published": "2019-02-17T00:00:00+00:00",
      "author": {
        "name": "Jonathan Steyfkens",
        "url": "https://jonathansteyfkens.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "16bded10-81dc-4ef1-bf04-83a8ab584308",
      "title": "A Quick Look at Trait Objects in Rust",
      "content_text": "One of the things that baffled me for quite a long time are Rust’s “trait objects”: they felt like an odd part of the language and I was never quite sure whether I was using them or not, even when I wanted to be. Since I’ve recently had cause to look into them in more detail, I thought it might be helpful to write a few things down, in case anyone else finds my explanation useful. The first part of this blog post covers the basics and the second part takes a look at the performance implications of the way trait objects are implemented in Rust.",
      "url": "https://tratt.net/laurie/blog/entries/a_quick_look_at_trait_objects_in_rust.html",
      "tweet_url": "https://twitter.com/laurencetratt/status/1095290801754648577",
      "date_published": "2019-02-12T00:00:00+00:00",
      "author": {
        "name": "Laurence Tratt",
        "url": "https://tratt.net/laurie/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "3a45d462-3f13-451b-8b15-03d07069c3f3",
      "title": "git req | switch branches, not context",
      "content_text": "Check out git branches by their pull (or merge) request ID",
      "url": "https://arusahni.github.io/git-req/",
      "tweet_url": "https://twitter.com/IAmAru/status/1098360729898496000",
      "date_published": "2019-02-21T10:16:00+00:00",
      "author": {
        "name": "Aru Sahni",
        "url": "https://arusahni.net/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "7a149bc9-7e87-40cb-b3ef-da277059f897",
      "title": "New Gtk-rs release finally happened!",
      "content_text": "It’s time for a new release! Main adds/changes this time are: We added the generation of the Atk crate. We now generate functions taking callback as parameters. We improved the channels handling in GLib. The whole new GString type! The minimum Rust version supported is now the 1.31. The minimum version of all libraries has been changed to GNOME 3.14. The maximum version of all libraries has been upgraded to GNOME 3.30. Added subclassing support in GLib. Even more bindings generated. Let’s see those in details.",
      "url": "https://gtk-rs.org/blog/2019/02/21/new-release.html",
      "tweet_url": "https://twitter.com/imperioworld_/status/1098732671163863040",
      "date_published": "2019-02-21T00:00:00+00:00",
      "author": {
        "name": "Gtk-rs",
        "url": "http://gtk-rs.org/blog"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "2471466d-74a1-4d19-82d7-6909e10178cd",
      "title": "Changes in the core team",
      "content_text": "Just a quick update: You may have noticed that, in the last month or so, a number of Rust core team members have changed their jobs and/or their roles in the project.",
      "url": "https://blog.rust-lang.org/2019/02/22/Core-team-changes.html",
      "tweet_url": "https://twitter.com/rustlang/status/1099029201653559296",
      "date_published": "2019-02-22T00:00:00+00:00",
      "author": {
        "name": "The Rust Core Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "2c967b7c-6987-45ae-96b1-776ee6c51011",
      "title": "Procedural Generation with Wave Function Collapse",
      "content_text": "Wave Function Collapse is a procedural generation algorithm which produces images by arranging a collection of tiles according to rules about which tiles may be adjacent to each other tile, and relatively how frequently each tile should appear. The algorithm maintains, for each pixel of the output image, a probability distribution of the tiles which may be placed there. It repeatedly chooses a pixel to “collapse” - choosing a tile to use for that pixel based on its distribution. WFC gets its name from quantum physics. The goal of this post is to build an intuition for how and why the WFC algorithm works.",
      "url": "https://gridbugs.org/wave-function-collapse/",
      "date_published": "2019-02-21T00:00:00+00:00",
      "author": {
        "name": "Stephen Sherratt",
        "url": "https://gridbugs.org/"
      },
      "tags": [
        "Games and Graphics",
        "Computer Science"
      ]
    },
    {
      "id": "0d3ca45d-85aa-40ab-95f0-40ec5abaa75f",
      "title": "Rust lang team working groups",
      "content_text": "Now that the Rust 2018 edition has shipped, the language design team has been thinking a lot about what to do in 2019 and over the next few years. I think we’ve got a lot of exciting stuff on the horizon, and I wanted to write about it.",
      "url": "http://smallcultfollowing.com/babysteps/blog/2019/02/22/rust-lang-team-working-groups/",
      "tweet_url": "https://twitter.com/nikomatsakis/status/1099069423535734784",
      "date_published": "2019-02-22T00:00:00-05:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "1184c74a-bcbf-4aee-ae13-70dd37a6d68a",
      "title": "Bootstrapping My Embedded Rust Development Environment",
      "content_text": "After watching James Munns' Something for Nothing talk at RustConf about all of the cool things in the embedded Rust world that have been going on, I decided to take a crack at some embedded work. I built an ErgoDox a while back and already had some basic understanding of how its keyboard controller operates, so I thought \"why not design my own keyboard?\"",
      "url": "https://josh.robsonchase.com/embedded-bootstrapping/",
      "date_published": "2018-11-25T22:15:00-05:00",
      "author": {
        "name": "Josh Robson Chase",
        "url": "https://josh.robsonchase.com/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "84b2eb06-712b-4d63-b899-c91e16e1b0ee",
      "title": "Manage security vulnerabilities in embedded IoT devices with Rust",
      "content_text": "The Rust programming language’s rich type system and ownership model guarantee memory-safety and thread-safety — and eliminate many classes of bugs and security vulnerabilities at compile-time.",
      "url": "https://medium.com/@flundstrom2/manage-security-vulnerabilities-in-embedded-iot-devices-with-rust-14aeabada68b",
      "date_published": "2019-01-23T12:18:11.800+00:00",
      "author": {
        "name": "Fredrik Lundström",
        "url": "https://medium.com/@flundstrom2"
      },
      "tags": [
        "Security",
        "Embedded"
      ]
    },
    {
      "id": "94fdb740-ae30-402f-9dc5-3f98b6a2753a",
      "title": "Embedding WebAssembly in your Rust application",
      "content_text": "Wasmer is a WebAssembly runtime designed to run both standalone and embedded. The crate wasmer-runtime exposes an easy to use and safe api for compiling, creating imports, and calling WebAssembly from your own library. This tutorial goes over how to make a simple wasm application and run it using the wasmer-runtime!",
      "url": "https://medium.com/wasmer/executing-webassembly-in-your-rust-application-d5cd32e8ce46",
      "date_published": "2019-01-24T17:20:46.602+00:00",
      "author": {
        "name": "Brandon Fish and Lachlan Sneff",
        "url": "https://medium.com/@fish0398"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "ba72d3fb-8f1e-4802-a55b-15dd8584046f",
      "title": "Medic: A Rust CLI that checks the passwords of a KeePass database",
      "content_text": "After the recent breach, I was curious to check my passwords against the list, but I’m a bit paranoid, so, rather than paste my passwords into the Have I Been Pwned website, I wanted to download the big text file and check my passwords against it offline, nice and safely.\n\nI use a password manager called KeePassXC, so all of my passwords are stored in an encrypted file – a KeePass database – and I use a program called KeePassXC, a free and open-source password manager, to manage them (I wrote a beginner’s user guide to KeePassXC a while back if you’re interested!). So ideally, to check my passwords against the big list, I’d have a tool that checks all the passwords in a given KeePass database against the entire HaveIBeenPwned list of passwords, preferably against the downloaded file (i.e. “offline”), rather than the API. In other words something similar to 1Password’s Watchtower feature, but preferably offline.\n\nAfter poking around a bit I decided to write it myself in Rust, with this script and this crate as useful references. Medic is a Rust CLI that can perform a variety of “health” checks on a KeePass database.",
      "url": "https://sts10.github.io/2019/02/01/medic.html",
      "tweet_url": "https://twitter.com/sts10/status/1091744933243994113",
      "date_published": "2019-02-01T01:15:00+00:00",
      "author": {
        "name": "Sam Schlinkert",
        "url": "https://sts10.github.io/"
      },
      "tags": [
        "Tools and Applications",
        "Security"
      ]
    },
    {
      "id": "115896de-7fb5-4c2e-b969-1c63550669e1",
      "title": "Learning Rust in 2019",
      "content_text": "If you have made up your mind to learn this modern programming language in 2019, this is a small attempt for new learners to have an unofficial learning path for getting to know and mastering Rust. I am still learning Rust and I will update post as and when required. This is iteration 1.",
      "url": "https://medium.com/rustadventures/learning-rust-in-2019-768ac560ba0",
      "date_published": "2019-01-18T04:41:29.876+00:00",
      "author": {
        "name": "Sumit Agrawal",
        "url": "https://medium.com/@arustacean"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "365d8318-a9d3-4c1e-9f2a-73c4c5d812ee",
      "title": "Hindsight on Advent of Code 2018",
      "content_text": "On the 1st of December 2018, I decided to give it a try to Advent of Code. AoC is, basically, a programming challenge website where you get two puzzles unlocked every day of December from 1st to 25th – hence the name. It has a ranking system which scores are based on the absolute time you took to solve the puzzles – i.e. spent time as soon as the puzzles got unlocked. As a French living in Paris, I find this a bit unfair (we get puzzles unlocked at around 5:00 AM!) and then I just realized I could do the puzzles for fun only.\n\nThis blog post sums up what I did with AoC#18, my thoughts about the puzzles and even a meta-discussion about programming challenges. I used Haskell for most challenges and switched to Rust for no specific reason. Just fun.",
      "url": "https://phaazon.net/blog/aoc-18-hindsight",
      "date_published": "2019-01-12T00:20:00+00:00",
      "author": {
        "name": "Dimitri Sabadie",
        "url": "http://phaazon.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a3541593-fc72-40c3-a4b8-7fdad4cab8fe",
      "title": "Introducing swc (speedy web compiler) 1.0",
      "content_text": "swc(speedy web compiler) is a super-fast javascript to javascript compiler. It can transpile typescript / jsx / ecmascript 2019 to browser-compatible javascript. It's 16x - 20x faster than babel even on single-core synchronous benchmark. Note that actual performance gap is larger because swc works on worker thread while babel works on event loop thread.",
      "url": "https://swc-project.github.io/blog/2019/02/08/Introducing-swc-1.0",
      "date_published": "2019-02-08T00:00:00+00:00",
      "author": {
        "name": "DongYoon Kang",
        "url": "https://swc-project.github.io/"
      },
      "tags": [
        "Web and Network Services",
        "Tools and Applications"
      ]
    },
    {
      "id": "7405fc44-d31f-49f8-a260-b837ff0e3f12",
      "title": "Rutie: “The Tie Between Ruby and Rust.”",
      "content_text": "Integrate Ruby with your Rust application. Or integrate Rust with your Ruby application. This project allows you to do either with relative ease.",
      "url": "https://github.com/danielpclark/rutie/blob/master/README.md",
      "date_published": "2019-01-10T15:23:58+00:00",
      "author": {
        "name": "Daniel P. Clark",
        "url": "http://www.6ftdan.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "2c43b8ca-4c87-4138-adfc-2e32660061a2",
      "title": "Generators II: The Question Mark Problem",
      "content_text": "This is my second post on the design of generators. In the first post, I outlined what an MVP of the feature would look like. In this post, I want to take a look at the first design issue for the feature: how it integrates with the ? operator.",
      "url": "https://boats.gitlab.io/blog/post/generators-ii/",
      "tweet_url": "https://twitter.com/withoutboats/status/1097518316808269824",
      "date_published": "2019-02-18T00:00:00+00:00",
      "author": {
        "name": "withoutboats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ea353a56-0b7b-4025-a410-0e479c39950a",
      "title": "Updates about my work on native-Rust GUI, text layout, splines, markdown parsing, and more",
      "content_text": "This post is actually a collection of updates about pretty big things, but the writeup is small. Several will be expanded into larger blog posts - if there are any that you are especially eager to see, please tweet at me and I’ll give the topic priority.",
      "url": "https://raphlinus.github.io/personal/2019/02/20/more-small-updates.html",
      "tweet_url": "https://twitter.com/raphlinus/status/1098315361437474816",
      "date_published": "2019-02-20T17:02:42+00:00",
      "author": {
        "name": "Raph Levien",
        "url": "https://raphlinus.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "a4e3cb9f-0d9d-4a47-98cd-2b51d39b7eb6",
      "title": "A Very Relatable Database: Part 1",
      "content_text": "I like to find ways to fill up my free time over winter breaks. Since I’m not in school for a month, I usually take the time to do some self-study on a topic I find interesting. This past month, it was building a database. Unfortunately, I had only a casual understanding of how a database actually works under the hood, and no idea how to get started. Additionally, I decided to write the database in Rust, since I knew there would be complicated management of data, and I wanted to avoid headaches involving invalid data. Finally, rust’s static garbage collector meant I wouldn’t have to rely on a runtime to guarantee this.\n\nThat was a month ago. While I’m not too far along (mostly due to being busier than expected during the break), I still have things I think are worth sharing.",
      "url": "https://natelincoln.com/a-very-relatable-database/part-1/",
      "tweet_url": "https://twitter.com/lincolnnathan21/status/1086728923449315328",
      "date_published": "2019-01-19T00:00:00+00:00",
      "author": {
        "name": "Nate Lincoln",
        "url": "https://natelincoln.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "08743d28-0fe1-42f6-ac4a-50f3698891a0",
      "title": "Structure your data in Rust",
      "content_text": "Structuring of data in the correct way is very important. In java and C++, we use Class & Object. In C, we use structures, unions, and enums. We know that Rust adopts some features of functional programming and OOPs. Class and object is the main weapon of OOPs but how does Rust provide that functionality?",
      "url": "https://blog.knoldus.com/structure-your-data-in-rust/",
      "date_published": "2019-02-11T08:44:09+00:00",
      "author": {
        "name": "Amita Yadav",
        "url": "https://blog.knoldus.com/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "fb473ea5-9d84-4c2d-9926-282c55dcbf18",
      "title": "My experience with Rust",
      "content_text": "I started learning Rust in 2018. I completed my work in an open source project and was thinking about learning a new programming language. My motive was to learn a language that allows you to control the lower level of a high-level programming language. I considered learning Golang, but, in most of the online articles I learned that Rust (being a system programming language) gives you more control than Go, however, the learning curve is far steeper than Go. I had no worries about deadlines or time, therefore I chose Rust.",
      "url": "http://subhojit777.in/rust-language-experience/",
      "tweet_url": "https://twitter.com/_subhojit_paul/status/1098080953828851719",
      "date_published": "2019-02-20T00:00:00+00:00",
      "author": {
        "name": "Subhojit Paul",
        "url": "http://subhojit777.in/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "2c73855c-6079-427a-b075-4c07ed3cec23",
      "title": "Cross-compiling Rust code to Minix",
      "content_text": "I’ve decided to take a look at Minix, which is an interesting microkernel OS. Naturally after building Minix from git, the first thing I decided to try was porting Rust’s std to Minix so I could cross-compile Rust programs from Linux to run under Minix. Okay, I suppose I could have started with something else, but porting Rust software and modifying the platform-depending part of std is something I have experience with from working on Redox OS. And Rust really isn’t that hard to port.",
      "url": "https://iandouglasscott.com/2019/02/18/cross-compiling-rust-code-to-minix/",
      "date_published": "2019-02-18T13:00:00-08:00",
      "author": {
        "name": "Ian Douglas Scott",
        "url": "https://iandouglasscott.com/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "5e9e06ae-e22f-4798-b921-d8cb96bf451e",
      "title": "Fearless Security: Thread Safety",
      "content_text": "Multithreading allows programs to do more faster, but adds synchronization bugs and attacks. From a security standpoint, why do we care about thread safety?",
      "url": "https://hacks.mozilla.org/2019/02/fearless-security-thread-safety/",
      "tweet_url": "https://twitter.com/avadacatavra/status/1096079909225676800",
      "date_published": "2019-02-14T15:48:10+00:00",
      "author": {
        "name": "Diane Hosfelt",
        "url": "https://hacks.mozilla.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "7c13bc47-79a3-408a-bfc0-d67639f4f359",
      "title": "DOS: the final frontier...",
      "content_text": "In our crusade to oxidize platform after platform, I've been working to bring Rust to yet another target: MS-DOS. I don't know if this has been done before, but I couldn't find any information about it on the web, so I had to rely on information about using GCC to compile MS-DOS programs (not all of which carried over), and it took quite a bit of fiddling with the target specification to get things just right. In the end, I've managed to produce COM executables that can call DOS interrupts and interface with hardware such as the PC speaker, and presumably the rest of the hardware, given the right code.",
      "url": "https://www.reddit.com/r/rust/comments/ask2v5/dos_the_final_frontier/",
      "date_published": "2019-02-20T15:47:21+11:00",
      "author": {
        "name": "u/serentty",
        "url": "https://www.reddit.com/user/serentty"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "fe990782-d611-46a2-a6c1-4048707e61df",
      "title": "Introducing embedded-sdmmc - a pure-Rust #[no_std] SD card and FAT16/FAT32 library",
      "content_text": "161 votes and 6 comments so far on Reddit",
      "url": "https://www.reddit.com/r/rust/comments/ascvls/introducing_embeddedsdmmc_a_purerust_no_std_sd/",
      "tweet_url": "https://twitter.com/therealjpster/status/1097911700869779456",
      "date_published": "2019-02-20T04:32:00+00:00",
      "author": {
        "name": "Jonathan Pallant",
        "url": "http://railwayelectronics.blogspot.com.au/"
      },
      "tags": [
        "Embedded",
        "Crates"
      ]
    },
    {
      "id": "82089039-8f19-4e01-8d91-d0ef468bbab8",
      "title": "Exploring Rust",
      "content_text": "Rust provides a lot of language constructs to enable and empower the user to write memory safe and correct code. But what happens behind these constructs? In this post I will outline ways of exploring rust and it’s compiler.\n\nLast weekend I went to fosdem 2019. This is where I had the chance to attend a talk given by Matthias Endler. In his talk he explained how rust has got a lot of syntactic sugar to help the programmers in writing safe and correct code, part of his talk was explaining cargo-inspect to analyse this syntax and see what’s happening behind the scenes. This inspired me to dig a bit deeper and try out other tools.",
      "url": "https://jonathansteyfkens.com/posts/explore-rust.html",
      "tweet_url": "https://twitter.com/Jonathansty/status/1094205063181021190",
      "date_published": "2019-02-09T00:00:00+00:00",
      "author": {
        "name": "Jonathan Steyfkens",
        "url": "https://jonathansteyfkens.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "9cb7faf6-a9cb-4bf5-9549-96ee7e80dd12",
      "title": "One Hundred Rust PRs later",
      "content_text": "It’s hard for me to believe but it’s already been over a year since I seriously committed to learning Rust and I have now reached my initial goal of 100 open source contributions to the Rust ecosystem. You can see the full list here. I want to use this blog post to review the work I’ve done, talk about the challenges I’ve come across and how I’ve tried to deal with them. I’m afraid I haven’t blogged in a long time and this is a bit longer than usual.",
      "url": "https://phansch.net/2019/02/18/onehundred-rust-prs/",
      "tweet_url": "https://twitter.com/phansch/status/1097133526439415809",
      "date_published": "2019-02-18T00:00:00+00:00",
      "author": {
        "name": "Philipp Hansch",
        "url": "https://phansch.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e87f2464-ee95-4e9a-8d8c-4ccbba6b165c",
      "title": "Reflections on Learning Rust By Building Punchtop",
      "content_text": "To learn Rust, I implemented an audio game. There were some things I liked and some things I didn't. Some things were easy and some were hard. And there were plenty of libraries that were a joy to use.",
      "url": "https://hyperbo.la/w/reflections-on-learning-rust/",
      "date_published": "2019-01-27T00:00:00+00:00",
      "author": {
        "name": "Ryan Lopopolo",
        "url": "https://hyperbo.la/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "52b68916-b65b-4a28-9bac-e8c8038c6194",
      "title": "The Builder Pattern in Rust",
      "content_text": "For the very first coding blog, I think it is appropriate to start with building objects. This post is about the Builder Pattern in Rust, and how it taught me I couldn’t write everything the way I want. Yes, strong typing prevents you from common pitfalls, and C++ can go quite far in this direction (as many JS/Python enthusiastic will gladly testify). It is often easy to forget how it sometimes prevents you from writing a completely legal and safe code, due to rules being too “protective”. And as Rust takes the code safety to a whole new level, sometimes a trivial code can’t be written, and without the proper knowledge, it might seem entirely arbitrary. It was a subtle restriction in the builder pattern that took me by surprise first.",
      "url": "https://oribenshir.github.io/afternoon_rusting/blog/building-rust",
      "tweet_url": "https://twitter.com/oribenshir/status/1093905527321624577",
      "date_published": "2019-02-08T00:00:00+00:00",
      "author": {
        "name": "Ori Ben-Shir",
        "url": "https://oribenshir.github.io/afternoon_rusting/index.html"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "9494ac41-95c6-43e8-86ef-660443465886",
      "title": "Rewriting stackcollapse-xdebug in Rust",
      "content_text": "A week or so ago, I saw the inferno project mentioned on the Rust subreddit. It was a rewrite of the great FlameGraph library into Rust. All of the work was being livestreamed by Jon Gjengset. I ended up watching some of the livestreams and had the idea of porting the stackcollapse-xdebug.php file to Rust, potentially so it could be included in the project in the future.",
      "url": "https://daniellockyer.com/rewriting-stackcollapse-xdebug/",
      "tweet_url": "https://twitter.com/DanielLockyer/status/1094605231155900416",
      "date_published": "2019-02-08T00:00:00+00:00",
      "author": {
        "name": "Daniel Lockyer",
        "url": "https://daniellockyer.com/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "821ecfae-acd8-4a50-907e-77c394807c86",
      "title": "syswall: a firewall for syscalls",
      "content_text": "A while back I started thinking about software and how it does what it does. Perhaps even more importantly, I started thinking about how we can know what software does, without relying on the software's marketing pitch.",
      "url": "https://www.polaris64.net/blog/programming/2019/syswall-a-firewall-for-syscalls",
      "date_published": "2019-02-16T22:07:25+00:00",
      "author": {
        "name": "Simon Pugnet",
        "url": "https://www.polaris64.net/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "a22c0b8e-ed54-4502-8130-a03913b6ff67",
      "title": "Generators I: Toward a minimum viable product",
      "content_text": "We’re still not finished with the design of async/await, but it’s already become clear that it’s time to get the next phases of the feature into the pipeline. There are two extensions to the minimal async/await feature we’ve currently got that seem like the clear high priority:\n Async methods: allowing async fn to be used in traits. Generators: allowing imperative control flow to create Iterators and Streams the same way async fn allows imperative control flow to create a Future.",
      "url": "https://boats.gitlab.io/blog/post/generators-i/",
      "tweet_url": "https://twitter.com/withoutboats/status/1095000355514052610",
      "date_published": "2019-02-11T00:00:00+00:00",
      "author": {
        "name": "withoutboats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "81e00756-52f6-48fe-839e-28c88b690aef",
      "title": "Shipping Rust Binaries with GoReleaser",
      "content_text": "Although GoReleaser supports building just Go projects, it does so much more in the packaging and distribution department that it is extremely hard to ignore.",
      "url": "https://medium.com/@jondot/shipping-rust-binaries-with-goreleaser-d5aa42a46be0",
      "date_published": "2019-02-16T17:47:00.522+00:00",
      "author": {
        "name": "Dotan Nahum",
        "url": "https://medium.com/@jondot"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "2810bb3d-7b68-42f0-ba5f-5c7a5956caf7",
      "title": "Enjoy a slice of QUIC, and Rust!",
      "content_text": "During last year’s Birthday Week we announced early support for QUIC, the next generation encrypted-by-default network transport protocol designed to secure and accelerate web traffic on the Internet.\n\nWe are not quite ready to make this feature available to every Cloudflare customer yet, but while you wait we thought you might enjoy a slice of quiche, our own open-source implementation of the QUIC protocol written in Rust.",
      "url": "https://blog.cloudflare.com/enjoy-a-slice-of-quic-and-rust/",
      "tweet_url": "https://twitter.com/Cloudflare/status/1089342729195347969",
      "date_published": "2019-01-22T16:26:07+00:00",
      "author": {
        "name": "Alessandro Ghedini",
        "url": "https://blog.cloudflare.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "e89d9e3f-1400-40ca-9e1c-d90817daf41e",
      "title": "Fearless Security: Memory Safety",
      "content_text": "Memory safety violations can cause programs to crash unexpectedly and can be exploited to alter intended behavior--languages can manage this multiple ways.",
      "url": "https://hacks.mozilla.org/2019/01/fearless-security-memory-safety/",
      "tweet_url": "https://twitter.com/mozhacks/status/1088118455734362112",
      "date_published": "2019-01-23T15:00:57+00:00",
      "author": {
        "name": "Diane Hosfelt",
        "url": "https://hacks.mozilla.org/"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "6881b0f3-53e8-4fbf-bca2-9e108792bf29",
      "title": "Rust: The story of closures",
      "content_text": "The Rust programming language introduced many leading concepts in the programming language design landscape. The most famous features are the borrow checker, the ownership management and the trait system.\n\nHowever, the fantastic expressiveness of the closures is generally underestimated. Yes, from the day Javascript introduces closures to main stream programming languages, these days closures become one of the basic features for almost all modern languages. However, Rust’s ownership rules result in some brand-new observations to closures and its position in programming. Let’s start the journey now.",
      "url": "https://medium.com/@earthengine/rust-the-story-of-closures-8f8e5af7ea1c",
      "date_published": "2019-01-27T03:12:11.943+00:00",
      "author": {
        "name": "Earth Engine",
        "url": "https://medium.com/@earthengine"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "7d5bbb25-d599-43d5-82cb-1a4dcdf47286",
      "title": "Lock-free Rust: Crossbeam in 2019",
      "content_text": "This is a follow-up post to Lock-freedom without garbage collection from 2015, which introduced Crossbeam, a Rust library that implements efficient lock-free data structures without relying on a tracing garbage collector.",
      "url": "https://stjepang.github.io/2019/01/29/lock-free-rust-crossbeam-in-2019.html",
      "date_published": "2019-01-29T00:00:00+00:00",
      "author": {
        "name": "Stjepan Glavina",
        "url": "https://stjepang.github.io/"
      },
      "tags": [
        "Crates",
        "Performance"
      ]
    },
    {
      "id": "d430867d-388e-4cfb-9e42-698d80876f1c",
      "title": "Announcing OOProxy, a reverse OpenID and OAuth2 proxy",
      "content_text": "At HAL24K, we benefit a lot from open source software. That is why, to contribute back, we’ve started an internal program to open source some of the internal tools and libraries we’ve used to build our platform and machine learning solutions, starting with OOProxy. OOProxy is a reverse OpenID and OAuth2 proxy that we use to protect our HTTP-based machine learning APIs.",
      "url": "https://medium.com/hal24k-techblog/announcing-ooproxy-b041bab2bc85",
      "date_published": "2019-01-30T14:10:08.484+00:00",
      "author": {
        "name": "Tim Stokman",
        "url": "https://medium.com/@timstokman"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "d7fe7d63-d2c8-4bfc-834b-a93155c10dcb",
      "title": "Rust: A unique perspective",
      "content_text": "In which I try to explain the reasoning behind Rust’s memory-safety mechanisms.",
      "url": "https://limpet.net/mbrubeck/2019/02/07/rust-a-unique-perspective.html",
      "tweet_url": "https://twitter.com/mbrubeck/status/1093645826453233665",
      "date_published": "2019-02-07T00:00:00+00:00",
      "author": {
        "name": "Matt Brubeck",
        "url": "https://limpet.net/mbrubeck/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "0a429d63-c63c-4161-8960-c83915c01b26",
      "title": "Lyon in 2018",
      "content_text": "In 2018 my activity on the project has varied depending on the time and energy I have had left after work and other activities. As it turns out, working on getting WebRender shipped in Firefox is at the same time amazing and very demanding, and what's left of my brain after a good day of work isn't always up to some of the ambitions I have planned for lyon. Fortunately I am not the only one who contributed to the project, and while progress was slow on the most ambitious plans, I did spend some time on smaller features and polish.\n\nI'll get to these big plans towards the end of this post. In the mean time let's look at some of the highlights of what changed in lyon in 2018.",
      "url": "https://nical.github.io/posts/lyon-2018.html",
      "tweet_url": "https://twitter.com/nicalsilva/status/1097096561748779010",
      "date_published": "2019-02-17T00:00:00+01:00",
      "author": {
        "name": "Nical",
        "url": "https://nical.github.io/index.html"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "d1d825d3-b864-466c-9909-287ae17591a9",
      "title": "Moving from Ruby to Rust",
      "content_text": "How we migrated our Tier 1 service from Ruby to Rust and didn’t break production.",
      "url": "https://deliveroo.engineering/2019/02/14/moving-from-ruby-to-rust.html",
      "tweet_url": "https://twitter.com/DeliverooEng/status/1096080567043612673",
      "date_published": "2019-02-14T00:00:00+00:00",
      "author": {
        "name": "Andrii Dmytrenko",
        "url": "https://deliveroo.engineering/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "09067d7b-54fc-4555-9e1f-a6622ea5e390",
      "title": "Replacing a hot path in your app's JavaScript with WebAssembly",
      "content_text": "In my previous articles I talked about how WebAssembly allows you to bring the library ecosystem of C/C++ to the web. One app that makes extensive use of C/C++ libraries is squoosh, our web app that allows you compress images with a variety of codecs that have been compiled from C++ to WebAssembly.\n\nIn my experience, most performance problems on the web are caused by forced layout and excessive paint but every now and then an app needs to do a computationally expensive task that takes a lot of time. WebAssembly can help here.",
      "url": "https://developers.google.com/web/updates/2019/02/hotpath-with-wasm",
      "tweet_url": "https://twitter.com/DasSurma/status/1096146648152059907",
      "date_published": "2019-02-15T07:38:00+00:00",
      "author": {
        "name": "Surma",
        "url": "https://developers.google.com/web/resources/contributors/surma"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "9700147a-735e-4903-b9fb-f91d6de54fe0",
      "title": "A brief introduction to Rust",
      "content_text": "I heard of Rust back in 2015 at a meetup. I have since spent time with Rust on and off. In 2018, I had more time to explore Rust. Thinking of using blogging as a learning tool while going further down the rabbit hole of Rust, I setup this blog. In this post, I would like to briefly walk through some important features of the language.",
      "url": "https://odetorust.com/a-brief-introduction-to-rust/",
      "tweet_url": "https://twitter.com/thannyinyi/status/1095977366684225536",
      "date_published": "2019-02-14T20:25:00+00:00",
      "author": {
        "name": "Nyi Nyi Than",
        "url": "https://odetorust.com/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "9496d523-3ad4-42ac-a6eb-183ed3d55713",
      "title": "Why should you use Rust in WebAssembly?",
      "content_text": "WebAssembly (Wasm) is a technology that has the chance to reshape how we build apps for the browser. Not only will it allow us to build whole new classes of web applications, but it will also allow us to make existing apps written in JavaScript even more performant.\n\nIn this article about the state of the Rust and Wasm ecosystem, I'll try to explain why Rust is the language that can unlock the true potential of WebAssembly.",
      "url": "https://opensource.com/article/19/2/why-use-rust-webassembly",
      "tweet_url": "https://twitter.com/ryan_levick/status/1096423003808825345",
      "date_published": "2019-02-15T03:01:00-05:00",
      "author": {
        "name": "Ryan Levick",
        "url": "https://opensource.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "da140d7b-47bf-4d63-a3e1-75ade64bed2f",
      "title": "MonkeyType: type inference for transpiling Python to Rust",
      "content_text": "In my previous post about Python to Rust transpiler I’ve said, that one of the biggest problems is absence of types in python and inability to infer them for functions. But it turns out there is a solution to this problem. Guys from Instagram have developed an incredible tool for runtime type inference called MonkeyType. It monitors what types functions accept and return while running a program. This approach works quite nicely so I want to share with you how it’s done.",
      "url": "https://medium.com/@konchunas/monkeytype-type-inference-for-transpiling-python-to-rust-64fa5a9eb966",
      "date_published": "2019-02-15T22:25:31.687+00:00",
      "author": {
        "name": "Julian Konchunas",
        "url": "https://medium.com/@konchunas"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "54a69419-caf9-408f-bd41-ab6ee7897b92",
      "title": "My Tour of Rust – Day 4 – Ray Tracing Part 2",
      "content_text": "Learning Rust through the porting of the code from Peter Shirley's Ray Tracing in a Weekend. Focused on Polymorphism, Ownership and Traits in Rust.",
      "url": "https://rushtonality.com/2019/02/15/my-tour-of-rust-day-4-ray-tracing-part-2/",
      "tweet_url": "https://twitter.com/rushtonality/status/1096504457314136072",
      "date_published": "2019-02-15T20:13:45+00:00",
      "author": {
        "name": "Stephen Rushton",
        "url": "https://rushtonality.com/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "66563fe6-008a-475e-9337-42ee770d649c",
      "title": "Rust Governance: Scaling Empathy",
      "content_text": "There’s been a lot of talk about improving Rust’s governance model lately. As we decompress from last year’s hectic edition work, we’re slowly starting to look at all the bits of debt we accumulated, and organizational debt is high on that list.\n\nI’ve been talking in private with people about a bunch of these things for quite a while now, and I felt it worthwhile to write down as much of my thoughts as I can before the Rust All Hands in Berlin this week.",
      "url": "https://manishearth.github.io/blog/2019/02/04/rust-governance-scaling-empathy/",
      "tweet_url": "https://twitter.com/ManishEarth/status/1092345438202675201",
      "date_published": "2019-02-04T00:00:00+00:00",
      "author": {
        "name": "Manish Goregaokar",
        "url": "https://manishearth.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e412275c-f2ce-4748-bf3d-c53375ff5693",
      "title": "Cross compiling Rust from Linux to macOS",
      "content_text": "I’ve recently been working on a Rust project at work which requires compiling for Linux (GNU), Linux (musl - for Alpine Linux) and macOS. I use Linux Mint nearly all the time, so building for macOS targets has required asking very nicely to borrow a spare Macbook Air. This is naturally a bit crap, so I set out to find a Linux-only solution to cross compile for macOS using osxcross. A weekend of pain later, and I have the following post. Hopefully it spares you a weekend of your own pain.",
      "url": "https://wapl.es/rust/2019/02/17/rust-cross-compile-linux-to-macos.html",
      "tweet_url": "https://twitter.com/jam_waffles/status/1097151811549609984",
      "date_published": "2019-02-17T00:00:00+00:00",
      "author": {
        "name": "James Waples",
        "url": "https://wapl.es/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "6b4003d7-f0ce-4105-8ed5-f4bea94f77b9",
      "title": "Metered-rs: fast, ergonomic metrics for Rust",
      "content_text": "I’m pleased to announce the release of metered-rs, a crate that helps live measurements of code, inspired by Coda Hale’s Java metrics, with the philosophy that measuring program performance at runtime is valuable, and independent from benchmarking.",
      "url": "https://users.rust-lang.org/t/metered-rs-fast-ergonomic-metrics-for-rust/25061",
      "tweet_url": "https://twitter.com/simach/status/1093578132517519360",
      "date_published": "2019-02-07T18:14:21+00:00",
      "author": {
        "name": "Simon Chemouil",
        "url": "https://twitter.com/simach"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "f2388917-1b08-4e6d-9051-daa496814ab1",
      "title": "Hello, sandboxfs 0.1.0",
      "content_text": "I am pleased to announce that the first release of sandboxfs, 0.1.0, is finally here! You can download the sources and prebuilt binaries from the 0.1.0 release page and you can read the installation instructions for more details.\n\nThe journey to this first release has been a long one. sandboxfs was first conceived over two years ago, was first announced in August 2017, showed its first promising results in April 2018, and has been undergoing a rewrite from Go to Rust.",
      "url": "http://julio.meroh.net/2019/02/hello-sandboxfs-0.1.0.html",
      "tweet_url": "https://twitter.com/jmmv/status/1092791441074647040",
      "date_published": "2019-02-05T09:00:00-05:00",
      "author": {
        "name": "Julio Merino",
        "url": "http://julio.meroh.net/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "2b4a2862-e8ba-427b-aa27-c206356f5700",
      "title": "Creating 🌊 web-server .deb binary with Rust",
      "content_text": "We are going to make a demo linux web-server with systemd, config file and installable .deb binary in Rust.",
      "url": "https://gill.net.in/posts/creating-web-server-deb-binary-with-rust/",
      "date_published": "2019-01-29T00:00:00+00:00",
      "author": {
        "name": "Harry Gill",
        "url": "https://gill.net.in/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "b6ca1619-6bdb-4efc-a043-ea73ed0e8336",
      "title": "Auditing Rust Crypto: The First Hours",
      "content_text": "Checklists are a simple yet effective component of security and safety procedures in various fields, from flight safety and surgery to network security, and of course cryptography. So here’s a couple of things you want to check when starting the audit of a crypto software written in Rust.",
      "url": "https://research.kudelskisecurity.com/2019/02/07/auditing-rust-crypto-the-first-hours/",
      "date_published": "2019-02-07T14:00:15+00:00",
      "author": {
        "name": "https://research.kudelskisecurity.com/",
        "url": "JP Aumasson"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "5e8e4feb-2bb8-4337-bfba-a71003c797ed",
      "title": "First release of ieee802154 crate - Partial implementation of the IEEE 802.15.4 standard",
      "content_text": "I’ve released the ieee802154 crate, a partial implementation of the IEEE 802.15.4 standard, earlier this week.  IEEE 802.15.4 is a standard for low-rate wireless personal area networks. It is used as the basis for higher-level protocols like 6LoWPAN, Zigbee, or Thread. The ieee802154 crate is only a partial implementation of this standard, but I hope it can be used as a basis for future work by extending it as required.",
      "url": "https://users.rust-lang.org/t/first-release-of-ieee802154-0-1-partial-implementation-of-the-ieee-802-15-4-standard/25094",
      "date_published": "2019-02-08T14:24:56+00:00",
      "author": {
        "name": "Hanno Braun",
        "url": "https://users.rust-lang.org/u/hannobraun"
      },
      "tags": [
        "Crates",
        "Embedded"
      ]
    },
    {
      "id": "a552df74-7e67-4b0a-9e12-a75afc9235b8",
      "title": "Be part of ANSSI’s new « Guide to develop secure applications with Rust »",
      "content_text": "Rust is an open source programming language which combines security, modernity and performance. As well, it is gradually being adopted in a large number of projects. To support developers, ANSSI offers a new \"Guide to develop secure applications with Rust\". This guide is intended to be a living document and it’s open to all contributions from the community. The object of this document is to provide hints and recommendations for secure applications development using the Rust programming language, that allow users to benefits of the good level of trust the Rust language already provides.",
      "url": "https://www.ssi.gouv.fr/en/actualite/be-part-of-anssis-new-guide-to-develop-secure-applications-with-rust/",
      "tweet_url": "https://twitter.com/ANSSI_FR/status/1093909770376040449",
      "date_published": "2019-02-09T03:29:00+00:00",
      "author": {
        "name": "ANSSI",
        "url": "https://www.ssi.gouv.fr/en/"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "1c46694b-ae67-4596-9f46-0e9fd419f585",
      "title": "No, the problem isn’t “bad coders”",
      "content_text": "A recent blog article discussed the fact that 70% of all security bugs in Microsoft products are due to memory safety vulnerabilities. A lot of the comments I’ve seen on social media boil down to “The problem isn’t the use of a memory unsafe language, but that the programmers who wrote this code are bad.”\n\nIn this article, I’m going to look at a recent bug that was caught by the Rust compiler, which I think shows that not only is this assertion unreasonable but virtually impossible for reasons I haven’t seen discussed. While the example I’m going to give is about thread safety rather than memory safety, the arguments I’m going to present can be applied to both.",
      "url": "https://medium.com/@sgrif/no-the-problem-isnt-bad-coders-ed4347810270",
      "tweet_url": "https://twitter.com/sgrif/status/1095355375757520901",
      "date_published": "2019-02-12T16:13:55.539+00:00",
      "author": {
        "name": "Sean Griffin",
        "url": "https://medium.com/@sgrif"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "56014abd-0fd0-4b8c-91ba-734e4f16ddac",
      "title": "Gtk-rs: how to have mutable object in a closure?",
      "content_text": "I wanted, was to start the Gtk application with already generated image of the prime numbers spiral (contained in gtk::Image widget) and then be able to re-generate the image when user changed something. It could be \"Generate\" click action for instance to show image in different resolution or color. The problem with the button closure was that when I added the Gtk image to the box_vert container, the next time the button was pressed, the code was supposed to remove existing image and add new one, but it didn't.",
      "url": "http://sireliah.com/niusy/gtk_rust_mutable_object_in_closure/",
      "tweet_url": "https://twitter.com/sir_eliah/status/1095456240417861633",
      "date_published": "2019-02-12T21:58:00+00:00",
      "author": {
        "name": "Piotr Gołąb",
        "url": "http://sireliah.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "03bb4da4-48ab-4e1a-a092-be737761fd6f",
      "title": "All-Hands 2019 Recap",
      "content_text": "Last week, I was in Berlin at the Rust All-Hands 2019. It was great! I will miss nerding out in discussions about type theory and having every question answered by just going to the person who’s the expert in that area, and asking them. In this post, I am summarizing the progress we made in my main areas of interest and the discussions I was involved in—this is obviously just a small slice of all the things that happened.",
      "url": "https://www.ralfj.de/blog/2019/02/12/all-hands-recap.html",
      "date_published": "2019-02-12T00:00:00+00:00",
      "author": {
        "name": "Ralf Jung",
        "url": "https://www.ralfj.de/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "3c0e89db-b8b3-44bc-a952-4cf406146fae",
      "title": "Are you still using `println` in Rust for debugging?",
      "content_text": "In this blog, I will explain about new debugging macro dbg, added in Rust 1.32.0. This is a macro for quick and dirty debugging with which you can inspect the value of a given expression.",
      "url": "https://blog.knoldus.com/are-you-still-using-println-in-rust-for-debugging/",
      "tweet_url": "https://twitter.com/ayushmishra2005/status/1094814808656891904",
      "date_published": "2019-02-11T04:20:21+00:00",
      "author": {
        "name": "Ayush Mishra",
        "url": "https://blog.knoldus.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "7bbec28c-a388-4372-92d9-4d2082454d67",
      "title": "Rust powered CLI apk decompiler",
      "content_text": "Lately I’ve been needing to reverse engineer some apks and I’ve been manually using some third-party tools to do so. But, how could we speed up the process? A little bit of Rust can be very helpful!",
      "url": "https://robertohuertas.com/2019/02/03/rust_cli_apk_decompiler/",
      "tweet_url": "https://twitter.com/robertohuertasm/status/1092114442983272448",
      "date_published": "2019-02-03T00:00:00+00:00",
      "author": {
        "name": "Roberto Huertas",
        "url": "https://robertohuertas.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "e1fdb8ec-e1f8-4718-ba5d-bb3bdf897506",
      "title": "Rust for Node developers",
      "content_text": "An introduction to the Rust programming language for Node developers.",
      "url": "https://github.com/Mercateo/rust-for-node-developers",
      "tweet_url": "https://twitter.com/PipoPeperoni/status/1090957828473479168",
      "date_published": "2019-01-31T23:59:00+00:00",
      "author": {
        "name": "Donald Pipowitch",
        "url": "https://github.com/Mercateo"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "30602bae-8957-4b3a-92d2-eec9e6f2fddd",
      "title": "Salsa: Incremental recompilation",
      "content_text": "So for the last couple of months or so, I’ve been hacking in my spare time on this library named salsa, along with a number of awesome other folks. Salsa basically extracts the incremental recompilation techniques that we built for rustc into a general-purpose framework that can be used by other programs. Salsa is developing quickly: with the publishing of v0.10.0, we saw a big step up in the overall ergonomics, and I think the current interface is starting to feel very nice.",
      "url": "http://smallcultfollowing.com/babysteps/blog/2019/01/29/salsa-incremental-recompilation/",
      "tweet_url": "https://twitter.com/nikomatsakis/status/1090341441371549696",
      "date_published": "2019-01-29T00:00:00-05:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4a6ed1c0-83d7-4392-9d2a-9b749a5433fe",
      "title": "Rust: regret-less concurrency",
      "content_text": "Rust offers the promise of “fearless concurrency”, and delivers on it through memory safety. Yet this safety doesn’t guarantee code that is easy to maintain. If one is not “fearful” of complexity, concurrency can easily become a story of regrets. Can we get a “regret-less” kind of concurrency?",
      "url": "https://medium.com/@polyglot_factotum/rust-regret-less-concurrency-2238b9e53333",
      "date_published": "2019-02-02T12:15:32.811+00:00",
      "author": {
        "name": "Polyglot Factotum",
        "url": "https://medium.com/@polyglot_factotum"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "2eb82c9e-d427-4beb-9a07-e2fc2f5bb9df",
      "title": "A Python Interpreter written in Rust",
      "content_text": "Goals: Full Python-3 environment entirely in Rust (not CPython bindings). A clean implementation without compatibility hacks",
      "url": "https://github.com/RustPython/RustPython",
      "date_published": "2019-02-06T00:00:00+00:00",
      "author": {
        "name": "RustPython",
        "url": "https://github.com/RustPython/RustPython"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "7028c8de-9b0d-4f0f-a74e-0e07126cd80e",
      "title": "Killing unwrap()",
      "content_text": "A collection of snippets to avoid unnecessary calls to unwrap() in Rust.",
      "url": "https://dmerej.info/blog/post/killing-unwrap/",
      "date_published": "2019-01-30T19:11:26+00:00",
      "author": {
        "name": "Dimitri Merejkowsky",
        "url": "https://dmerej.info/blog/humans.txt"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "5b4334f5-08f9-450c-88cf-20fe91993cdc",
      "title": "Writing Mails from Rust (1/3): Mail in general",
      "content_text": "This is the first part in a three part blog post about (e-)mails and how to create, encode and send them using the mail crate (a library).",
      "url": "https://blog.1aim.com/post/002-mail-1-intro/",
      "date_published": "2019-01-28T00:00:00+00:00",
      "author": {
        "name": "Philipp Korber",
        "url": "https://blog.1aim.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "2d51794e-d4d6-44a1-a2ab-f04940842e84",
      "title": "Performance of Rust's match vs. lookup tables",
      "content_text": "I’ve been getting into bioinformatics algorithms lately and ran across an interesting pull request that improved performance by changing a Rust match expression to a lookup. This felt quite surprising to me since, well, the match is so simple — why isn’t the compiler already generating optimal code for it?",
      "url": "https://kevinlynagh.com/notes/match-vs-lookup/",
      "date_published": "2019-01-22T00:00:00+00:00",
      "author": {
        "name": "Kevin Lynagh",
        "url": "https://kevinlynagh.com/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "5e9f0f9a-99dc-4971-a8a2-9bd2a2cf4cce",
      "title": "Rust on STM32: Blinking an LED",
      "content_text": "All tutorials I found felt somehow outdated and I don't have the board used in the embedded Rust book. So I wanted to document how I got some Rust code running on the BluePill.",
      "url": "https://jonathanklimt.de/electrics/programming/rust-STM32F103-blink/",
      "date_published": "2019-02-06T01:00:00+01:00",
      "author": {
        "name": "Jonathan Klimt",
        "url": "https://jonathanklimt.de/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "e743cfa5-87bc-46d7-9dc6-693352d91e6a",
      "title": "Letting the compiler tell you what to do - an example using Rust",
      "content_text": "If you’ve ever wrote code in a compiled language (C, C++, Java, …), you are probably used to compiler error messages, and you may think there are only here to prevent you from making mistakes. Well sometimes you can also use compiler error messages to design and implement new features. Let me show you with a simple command-line program written in Rust.",
      "url": "https://dmerej.info/blog/post/letting-the-compiler-tell-you-what-to-do/",
      "date_published": "2019-01-12T12:26:27+00:00",
      "author": {
        "name": "Dimitri Merejkowsky",
        "url": "https://dmerej.info/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4f4e3ed0-1852-4954-9cde-1d74c7e54b6f",
      "title": "Learning the Rust Programming Language",
      "content_text": "Rust has been on my radar for some time and I aspire to become proficient with the Rust Programming Language in 2019. Initially, my interest in Rust was sparked by the memory ownership model. With WASM support going mainstream I thought I’d give Rust a deeper look and have enjoyed my experience so far. This post is a living post that will continue to be revised and appended as I learn more about Rust.",
      "url": "https://www.aarongreenlee.com/blog/beginning-to-learn-rust-programming-language-rustlang/",
      "tweet_url": "https://twitter.com/aarongreenlee/status/1087460155250429954",
      "date_published": "2019-01-21T00:00:00+00:00",
      "author": {
        "name": "Aaron Greenlee",
        "url": "https://www.aarongreenlee.com/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "09b9f354-aeed-4d48-b859-9c63fcdddb2e",
      "title": "Polonius and the case of the hereditary harrop predicate",
      "content_text": "In my previous post about Polonius and subregion obligations, I mentioned that there needs to be a follow-up to deal with higher-ranked subregions. This post digs a bit more into what the problem is in the first place and sketches out the general solution I have in mind, but doesn’t give any concrete algorithms for it.",
      "url": "http://smallcultfollowing.com/babysteps/blog/2019/01/21/hereditary-harrop-region-constraints/",
      "tweet_url": "https://twitter.com/nikomatsakis/status/1087708610463965184",
      "date_published": "2019-01-21T00:00:00-05:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "daf60963-a30c-4e74-82cb-123d2faac884",
      "title": "Using Rust for creating Ubuntu Touch apps",
      "content_text": "This post aims to give you a small introduction to using the Rust programming language for writing apps for Ubuntu touch.",
      "url": "https://timsueberkrueb.io/posts/2019/01/18/rust-ubuntu-touch-app-dev/",
      "date_published": "2019-01-20T00:00:00+00:00",
      "author": {
        "name": "Tim Süberkrüb",
        "url": "https://timsueberkrueb.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "892a8c46-fee3-48d8-bc78-69a13a9a5c8d",
      "title": "The steps towards rustc, the great optimiser",
      "content_text": "It has been more than 3 years now since the MIR ini­ti­at­ive has been ac­cep­ted. Cur­rently rustc has a num­ber of MIR op­tim­isa­tions: a simple in­lin­er, ba­sic con­stant and copy propaga­tion, a single in­struc­tion com­bin­a­tion rule, a few graph sim­pli­fic­a­tion and clean up passes… The pat­tern here is clear – most of the op­tim­isa­tions we cur­rently have are ba­sic and lim­ited in their po­tency. Given the pace at which we man­aged to bring up MIR in the first place, one would be right to ex­pect… some­thing more.\n\nAs some­body who has made an at­tempt and failed to im­ple­ment a num­ber of data­flow-­based op­tim­isa­tions (a­mong other thing­s), I con­sider my­self fairly qual­i­fied to haz­ard a guess as to what is the reason for the cur­rent state we are at. Here it goes.",
      "url": "https://kazlauskas.me/entries/the-road-to-bestest-optimiser.html",
      "date_published": "2019-02-01T00:00:00+00:00",
      "author": {
        "name": "Simonas Kazlauskas",
        "url": "https://kazlauskas.me/index.html"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "8788ae2c-06ea-4226-a28e-8755b31c6860",
      "title": "Refactoring allowed URLs in librsvg",
      "content_text": "While in the middle of converting librsvg's code that processes XML from C to Rust, I went into a digression that has to do with the way librsvg decides which files are allowed to be referenced from within an SVG. There was a central function rsvg_io_acquire_stream() which took a URL as a string. The code assumed that that URL had been first validated with a function called allow_load(url). Rust made it possible to actually make it impossible to acquire a disallowed URL.",
      "url": "https://people.gnome.org/~federico/blog/refactoring-allowed-urls-in-librsvg.html",
      "date_published": "2018-11-29T11:31:37-06:00",
      "author": {
        "name": "Federico Mena Quintero",
        "url": "https://people.gnome.org/~federico/blog/index.html"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "559ed8de-7e83-4caa-aef1-f2b5fd7faa01",
      "title": "Notion: the hassle-free JavaScript toolchain manager",
      "content_text": "Reliable: Ensure everyone in your project uses an identical dev environment, from the Node version to your preferred package manager.\n\nUniversal: Enjoy the same command-line experience in every shell and every major operating system.\n\nFast: Notion is implemented in Rust and deployed as a static executable for maximum performance.",
      "url": "https://github.com/notion-cli/notion",
      "tweet_url": "https://twitter.com/littlecalculist/status/1092866261111922688",
      "date_published": "2019-02-06T06:23:00+00:00",
      "author": {
        "name": "LinkedIn Engineering",
        "url": "https://github.com/notion-cli"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "c032fc9f-79b2-454f-914f-a32fda90092d",
      "title": "Embedded Rust Experiments - Is my STM32 MCU running fast?",
      "content_text": "So, I have this STM32VLDISCOVERY dev board. It has the STM32F100RBT6B MCU, capable of running at 24MHz. On the board, there is a 8MHz crystal. Naturally, when you are new to microcontrollers (like me), you may have a few questions: When we upload a program on this development board, at what speed it is actually running? Is it using this external crystal? Why is this crystal 8MHz if the MCU is capable of 24MHz? If our program is not running at the maximum speed, how do we make it run at the maximum speed?",
      "url": "https://nercury.github.io/rust/embedded/experiments/2019/01/27/rust-embedded-02-measuring-the-clock.html",
      "tweet_url": "https://twitter.com/nercury/status/1089500979517632513",
      "date_published": "2019-01-27T00:00:00+00:00",
      "author": {
        "name": "Nerijus Arlauskas",
        "url": "http://nercury.github.io/"
      },
      "tags": [
        "Embedded",
        "Performance"
      ]
    },
    {
      "id": "b4901fae-b805-4020-b425-47d2fc82b14d",
      "title": "My Rust Powered linux.conf.au e-Paper Badge",
      "content_text": "I attended linux.conf.au (for the first time) in Christchurch, New Zealand. It’s a week long conference covering Linux, open source software and hardware, privacy, security and much more. The theme this year was IoT. In line with the theme I built a digital conference badge to take to the conference. It used a tri-colour e-Paper display and was powered by a Rust program I built running on Raspbian Linux. This post describes how it was built, how it works, and how it fared at the conference. The source code is on GitHub.",
      "url": "http://www.wezm.net/technical/2019/01/linux-conf-au-rust-epaper-badge/",
      "tweet_url": "https://twitter.com/wezm/status/1089321009507778560",
      "date_published": "2019-01-27T00:00:00+00:00",
      "author": {
        "name": "Wesley Moore",
        "url": "http://www.wezm.net/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "8a353b9f-bb7e-40d7-a5ab-fd5372ad76f4",
      "title": "Packaging a game for Windows, Mac, and Linux with Rust.",
      "content_text": "Building a cross platform game for desktop operating systems in Rust is fairly doable without needing much platform specific code. Glutin is a Rust alternative to SDL for handling window creation & input. GFX handles most of the graphics API abstraction for you. You still write the shaders, but I was able to just use OpenGL and get it working on Windows 10, MacOS, and Ubuntu.",
      "url": "https://agmprojects.com/blog/packaging-a-game-for-windows-mac-and-linux-with-rust",
      "tweet_url": "https://twitter.com/agmcleod/status/1091847346516709376",
      "date_published": "2019-02-02T23:53:56+00:00",
      "author": {
        "name": "Aaron McLeod",
        "url": "https://agmprojects.com/"
      },
      "tags": [
        "Games and Graphics",
        "Tools and Applications"
      ]
    },
    {
      "id": "0be32871-6687-4e3d-9cab-5bbb411c9cc0",
      "title": "A detailed guide to writing your first Neovim plugin in Rust",
      "content_text": "I recently wrote a plugin in Rust to control the Spotify desktop app for MacOS and find lyrics from within Neovim and found it to be a neat experience overall, and that’s coming from someone who isn’t a Rust expert. This post is a summary of all the research and discovery that happened during that process.",
      "url": "https://medium.com/@srishanbhattarai/a-detailed-guide-to-writing-your-first-neovim-plugin-in-rust-a81604c606b1",
      "date_published": "2019-02-04T09:58:50.953+00:00",
      "author": {
        "name": "Srishan Bhattarai",
        "url": "https://medium.com/@srishanbhattarai"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "040a805b-f794-4df1-810f-5d3607a3f274",
      "title": "Cargo's next few years",
      "content_text": "The Cargo team have been thinking about and discussing long-term plans for Cargo. In this post I'll talk about what we hope Cargo will look like around the time of the next edition (assuming there is another edition and that it happens in about three years, neither of which is confirmed). There will be another post soon on more concrete plans for this year, including some kind of roadmap.",
      "url": "https://www.ncameron.org/blog/cargos-next-few-years/",
      "tweet_url": "https://twitter.com/nick_r_cameron/status/1091555893697605632",
      "date_published": "2019-02-02T04:35:37+00:00",
      "author": {
        "name": "Nick Cameron",
        "url": "http://www.ncameron.org/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "2d233ddd-ecb5-499d-88b8-a0f14797c1a7",
      "title": "Rust on iOS",
      "content_text": "If you’re an iOS developer you may be asking yourself how and why you would make use of Rust on iOS. This article will mostly cover the how. As to why, the most compelling reason for us at Visly is that it enables us to share code between Android and iOS in a performant and safe manner, in a language much easier to work with than C++.",
      "url": "https://medium.com/visly/rust-on-ios-39f799b3c1dd",
      "date_published": "2019-01-26T21:30:07.781+00:00",
      "author": {
        "name": "Emil Sjölander",
        "url": "https://medium.com/@emilsj"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "76ad8f41-d0b9-4789-b45a-5cfa550aa7c3",
      "title": "Exporting Serde types to TypeScript",
      "content_text": "I built my first web application with Rust and WebAssembly back in 2017. At the time, support for compiling Rust with the wasm32-unknown-unknown target had just landed, letting you run Rust code in the browser with few modifications. The downside was that loading and interacting with WebAssembly might require you to explicitly allocate and track memory. You might even need to manually decode UTF-8 strings in JavaScript:",
      "url": "http://timryan.org/2019/01/22/exporting-serde-types-to-typescript.html",
      "tweet_url": "https://twitter.com/trimryan/status/1087755468804681729",
      "date_published": "2019-01-22T16:00:00+00:00",
      "author": {
        "name": "Tim Ryan",
        "url": "http://timryan.org/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "799301a7-d57a-4e9c-8412-aafc4e643f0a",
      "title": "Rust OSS Governance and Sustainablility I",
      "content_text": "Recently I travelled all the way to Waterloo from Boston for Starcon. With a 9 hour drive I had a lot of time to think about things and so I spent a good majority of it thinking about OSS Governanace and Sustainability. What I came up with and thought of is the more concrete solutions to the problems I brought up in my Rust 2019 post. With the Rust All hands in Berlin only a few weeks away I wanted to get my thoughts in order by writing out some of the solutions to specific problems I came up with. Now, this doesn't mean they'll be accepted! We might even find better solutions! I just felt a need to articulate them as both a reference point and to make sure I've thought through them well. I'll be splitting them into a few posts so I can publish more faster, rather than write one long post that won't be published in time. With that in mind let's begin!",
      "url": "https://mgattozzi.com/oss-governance-and-sustainablility-i/",
      "tweet_url": "https://twitter.com/mgattozzi/status/1087566238606413825",
      "date_published": "2019-01-22T04:20:23+00:00",
      "author": {
        "name": "Michael Gattozzi",
        "url": "https://mgattozzi.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "f950f168-d74e-4b3a-b2f5-18546a7d282b",
      "title": "Why aren't my Rust threads running?",
      "content_text": "I got a bit tangled up while experimenting with threads and channels in Rust. The compiler prevented any undefined behavior or memory corruption, but it can only do so much. My problems came from a shaky understanding of the language’s fundamentals and the inherent complexity of parallel programming. Or, in my case, attempted parallel programming.",
      "url": "https://esimmler.com/why-arent-my-rust-threads-running/",
      "tweet_url": "https://twitter.com/tgecho/status/1086749657240358912",
      "date_published": "2019-01-19T00:00:00+00:00",
      "author": {
        "name": "Erik Simmler",
        "url": "https://esimmler.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "b7475efb-632c-4875-ab6b-d283e220a434",
      "title": "Solving Advent of Code in Under a Second",
      "content_text": "Algorithms and optimization to solve all Advent of Code 2018 puzzles in under one total second.",
      "url": "https://www.forrestthewoods.com/blog/solving-advent-of-code-in-under-a-second/",
      "tweet_url": "https://twitter.com/ForrestTheWoods/status/1092459425632116736",
      "date_published": "2019-02-03T00:00:00+00:00",
      "author": {
        "name": "Forrest Smith",
        "url": "https://www.forrestthewoods.com/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "f468c7cf-9fa8-493c-9354-88d5e460016c",
      "title": "#Rust2019",
      "content_text": "Rust has been my favorite programming language lately. These are my thoughts and opinions on the future of the project, in response to the #Rust2019 call for blog posts. I write about what I love about Rust and what I want to see from it.",
      "url": "https://i.pristi.ga/2019/01/19/rust2019/",
      "date_published": "2019-01-19T00:00:00+00:00",
      "author": {
        "name": "Jasen Borisov",
        "url": "https://i.pristi.ga/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "0cba574e-769b-491e-83de-cfa070b1b942",
      "title": "WebGL + Rust: Basic Water Tutorial",
      "content_text": "In this tutorial we’ll discuss the ideas and concepts behind rendering water and then talk through some demo code.",
      "url": "http://www.chinedufn.com/3d-webgl-basic-water-tutorial/",
      "date_published": "2019-01-06T13:00:00-05:00",
      "author": {
        "name": "Chinedu Francis Nwafili",
        "url": "http://www.chinedufn.com/"
      },
      "tags": [
        "Web and Network Services",
        "Games and Graphics"
      ]
    },
    {
      "id": "04445dcf-4cd1-47ee-b40e-58d17bdf0a9c",
      "title": "paw at Rust GUIs",
      "content_text": "The recent release of Flutter 1.0 was quite exciting for me. I’m not much of anGUI person nor do I make a lot of mobile apps but after looking through some examples, I started to like their take on UI frameworks. In particular, the three aspects mentioned above seemed to be handled very well!\n\nBack to Rust. I wondered how to adopt a similar API under the strict eyes 👀 of the borrow- and typechecker — which resulted in the experimental UI framework paw (in progress..)",
      "url": "https://medium.com/@m.siglreith/paw-at-rust-guis-d4d848e14b94",
      "date_published": "2019-01-17T18:12:55.923+00:00",
      "author": {
        "name": "msiglreith",
        "url": "https://medium.com/@m.siglreith"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "90b0ffa9-1711-4870-9e30-37375be50515",
      "title": "How to order Rust code",
      "content_text": "Note:This post is about how I arrange the code I write in Rust.If you wanted to “order” Rust codein the “hire someone to write code” sense,you should still keep on readingas this is excellent material for a job interview.(Not the opinion I present but having an opinion on the topic.)",
      "url": "https://deterministic.space/how-to-order-rust-code.html",
      "date_published": "2019-01-17T00:00:00+01:00",
      "author": {
        "name": "Pascal Hertleif",
        "url": "https://deterministic.space/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "65dcfcd4-e17a-4e0d-bd56-ccea6cfe062f",
      "title": "When Rust is safer than Haskell",
      "content_text": "Haskell generally has better safety guarantees than Rust, there are some cases when Rust is safer than Haskell. This post explores when Rust is safe to use.",
      "url": "https://www.fpcomplete.com/blog/when-rust-is-safer-than-haskell",
      "date_published": "2019-01-17T18:09:09+00:00",
      "author": {
        "name": "Michael Snoyman",
        "url": "https://www.fpcomplete.com/blog"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "97ace8ce-4c4f-442d-bab3-10a97bd119df",
      "title": "Announcing Rust 1.32.0",
      "content_text": "Rust 1.32.0 has a few quality of life improvements, switches the default allocator, and makes additional functions const.",
      "url": "https://blog.rust-lang.org/2019/01/17/Rust-1.32.0.html",
      "tweet_url": "https://twitter.com/rustlang/status/1085987947197972480",
      "date_published": "2019-01-17T00:00:00+00:00",
      "author": {
        "name": "The Rust Release Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "85502039-9617-4e25-a34d-2e1f8cd2f452",
      "title": "Closures: Magic Functions",
      "content_text": "Closures seem like magical functions. They can do magic like capture their environment, which normal functions can’t do. How does this work?",
      "url": "https://krishnasannasi.github.io/rust/syntactic/sugar/2019/01/17/Closures-Magic-Functions.html",
      "date_published": "2019-01-17T19:00:00+00:00",
      "author": {
        "name": "Krishna Sannasi",
        "url": "https://krishnasannasi.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "2afd97b3-7b60-4a21-b07a-7f353a23dc4d",
      "title": "Polonius and region errors",
      "content_text": "Now that NLL has been shipped, I’ve been doing some work revisiting the Polonius project. Polonius is the project that implements the “alias-based formulation” described in my older blogpost. Polonius has come a long way since that post; it’s now quite fast and also experimentally integrated into rustc, where it passes the full test suite.",
      "url": "http://smallcultfollowing.com/babysteps/blog/2019/01/17/polonius-and-region-errors/",
      "tweet_url": "https://twitter.com/nikomatsakis/status/1086048535777206272",
      "date_published": "2019-01-17T00:00:00-05:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "2785bcea-bff1-46c3-913b-87888f79133c",
      "title": "Security as Rust 2019 goal",
      "content_text": "The goals and 2019 roadmap of Rust Secure Code Working Group",
      "url": "https://medium.com/@shnatsel/security-as-rust-2019-goal-6a060116ba39",
      "tweet_url": "https://twitter.com/rustsecurecode/status/1086337299393110016",
      "date_published": "2019-01-18T18:20:42.379+00:00",
      "author": {
        "name": "Sergey Davidoff et al.",
        "url": "https://medium.com/@shnatsel"
      },
      "tags": [
        "Rust 2019",
        "Security"
      ]
    },
    {
      "id": "459fb1f7-d0c4-4a08-bbc9-201d7572dc49",
      "title": "Non-Web Embeddings for Rust Wasm 2019",
      "content_text": "The Rust Wasm team has made tremendous progress in building robust developer tooling for Rust targeting WebAssembly on the Web in 2018. However, Non-Web Embeddings are also supported by WebAssembly but have not received much attention yet for Rust Wasm tooling. Our wish for Rust Wasm 2019 is to improve the tooling for Non-Web Wasm Embeddings which we believe also has enormous potential.",
      "url": "https://medium.com/wasmer/non-web-embeddings-for-rust-wasm-2019-7b290e94f81d",
      "tweet_url": "https://twitter.com/wasmerio/status/1085233264653037568",
      "date_published": "2019-01-15T13:57:51.370+00:00",
      "author": {
        "name": "Brandon Fish",
        "url": "https://medium.com/@fish0398"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "6538f1d7-c69c-4eae-841e-ce48c657aa65",
      "title": "Rust 2019: Ownership without fear",
      "content_text": "Like last year, the Rust community team asked community members to write blog posts \"proposing goals and directions for 2019\"; this is mine. Like withoutboats' post and Niko Matsakis' take, this post will focus on organizational issues. As such, the \"ownership\" from the title refers to a leadership principle, not the technical type system concept we all know and love.",
      "url": "https://dirkjan.ochtman.nl/writing/2019/01/01/rust-2019-ownership-without-fear.html",
      "tweet_url": "https://twitter.com/djco/status/1085287832539795462",
      "date_published": "2019-01-01T00:00:00+00:00",
      "author": {
        "name": "Dirkjan Ochtman",
        "url": "https://dirkjan.ochtman.nl/writing"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "f262d079-9126-4b48-ad7c-9c29105c16fe",
      "title": "Rust in 2019: Security, Maturity, Stability",
      "content_text": "2018 marked my second year as a full-time Rust developer, and I’m happy to say it’s the first year I shipped production Rust applications. Thus far these applications have been unproblematic, quietly and efficiently doing their job, and just as boring and predictable as I’d hope they’d be. I would like to hope my experience is repeatable, and that 2019 is the year that Rust can transcend the notion of being a bleeding-edge science experiment and instead settle down into being a “boring in a good way” practical language with a growing community developing and deploying production-quality software.",
      "url": "https://tonyarcieri.com/rust-in-2019-security-maturity-stability",
      "date_published": "2019-01-15T23:37:32-08:00",
      "author": {
        "name": "Tony Arcieri",
        "url": "http://tonyarcieri.com/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "cdb3ed72-c1a4-4ff2-8350-cb5768fd96d4",
      "title": "Stretch — A flexbox implementation in Rust",
      "content_text": "Let’s talk about Layout. Layout is fundamental to any UI application. The layout engine is what takes a set of rules and figures out where to place elements on the screen. This sounds simple enough but as UIs become increasingly complex we rely more on the layout engine to be able to create these UIs as easily as possible. Not only should it be easy to build these UIs but the engine performing this work is also required to do so at minimum cost as it runs possibly on every frame (for example when performing layout animations).",
      "url": "https://medium.com/visly/stretch-a-flexbox-implementation-in-rust-60762b5a3331",
      "date_published": "2019-01-15T20:04:57.767+00:00",
      "author": {
        "name": "Emil Sjölander",
        "url": "https://medium.com/@emilsj"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "83f4f369-b8cd-43ba-a61f-87a1654e64a9",
      "title": "After Hours Game Development",
      "content_text": "In my spare time I am working on a dwarf colony management game that’s written in rust. I started this project about one year ago and since it has reached this milestone and I didn’t abandon it I think it’s a good time to look at the curent status.",
      "url": "https://alexene.github.io/2019/01/15/After-hours-game-development.html",
      "tweet_url": "https://twitter.com/_AlexEne_/status/1085336327967703045",
      "date_published": "2019-01-15T00:00:00+00:00",
      "author": {
        "name": "Alexandru Ene",
        "url": "https://alexene.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "3ea00e75-be59-40b9-bdc5-e7a783044422",
      "title": "The State Of GGEZ 2019",
      "content_text": "ggez is a lightweight portable game framework in Rust, inspired by LÖVE. I do most of the actual maintenance and planning behind it, and I’ve been sort of in and out of contact this year, so I thought I’d write up a little thing about the present and future of the project. I remembered that at the beginning of last year I wrote GgezOnWasm, but only remembered a little of what went into it, so I went back and read it. And then got hives from the stress of all the promises I’ve made. So, I feel justified in being a bit slow with working on ggez lately.",
      "url": "https://wiki.alopex.li/TheStateOfGGEZ2019",
      "date_published": "2019-01-10T00:00:00+00:00",
      "author": {
        "name": "Simon Heath",
        "url": "http://patreon.com/icefox"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "6bd951b0-06dc-445a-9e68-ea9c56b18e37",
      "title": "OpenMoonstone v0.2 released",
      "content_text": "OpenMoonstone is a open source reimplementation of Moonstone: A Hard Day's Knight following along the lines of projects like OpenTTD and OpenXcom. You can try it out https://github.com/joetsoi/OpenMoonstone",
      "url": "http://leastsignificant.blogspot.com/2019/01/openmoonstone-v02-released.html?m=1",
      "date_published": "2019-01-16T19:34:00+00:00",
      "author": {
        "name": "least significant",
        "url": "http://leastsignificant.blogspot.com/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "6e54473a-fefd-4447-8888-98137bd74692",
      "title": "proc-macro-rules - macro_rules-like pattern matching inside a procedural macro",
      "content_text": "I'm announcing a new library for procedural macro authors: proc-macro-rules (and on crates.io). It allows you to do macro_rules-like pattern matching inside a procedural macro. The goal is to smooth the transition from declarative to procedural macros (this works pretty well when used with the quote crate).",
      "url": "https://www.ncameron.org/blog/proc-macro-rules/",
      "tweet_url": "https://twitter.com/nick_r_cameron/status/1085620511516717056",
      "date_published": "2019-01-16T19:27:54+00:00",
      "author": {
        "name": "Nick Cameron",
        "url": "http://www.ncameron.org/blog/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "3697f091-2478-437f-bdbb-3e464fe1ab8a",
      "title": "Rust bindings for GStreamerGL: Memoirs",
      "content_text": "Thanks to Mozilla and Igalia I have the opportunity to work on Servo, adding it HTML5 multimedia features. First, with the help of Fernando Jiménez, we finished what my colleague Philippe Normand and Sebastian Dröge (one of my programming heroes) started: a media player in Rust designed to be integrated in Servo. This media player lives in its own crate: servo/media along with the WebAudio engine. A crate, in Rust jargon, is like a library. This crate is (very ad-hocly) designed to be multimedia framework agnostic, but the only backend right now is for GStreamer. Later we integrated it into Servo adding an initial support for audio and video tags.",
      "url": "https://blogs.igalia.com/vjaquez/2019/01/16/rust-bindings-for-gstreamergl-memoirs/",
      "date_published": "2019-01-16T19:42:55+00:00",
      "author": {
        "name": "vjaquez",
        "url": "https://blogs.igalia.com/vjaquez/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "aded8d9a-b1d5-47b6-aa28-fcee947cbfb1",
      "title": "A bot for Starcraft in Rust, C or any other language",
      "content_text": "StarCraft: Brood War. This game means so much to me! And to many of you, I guess. So much, that I wonder if I should even give a link to its page on Wikipedia or not.\n\nOnce Halt sent me PM and offered to learn Rust. Like any ordinary people, we decided to start with hello world writing a dynamic library for Windows that could be loaded into StarCraft's address space and manage units.",
      "url": "https://habr.com/en/post/436254/",
      "date_published": "2019-01-17T10:15:00+00:00",
      "author": {
        "name": "Roman Proskuryakov",
        "url": "https://habr.com/en/users/humbug/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "b4d25622-7886-48c7-901c-e382c05122cb",
      "title": "Exploring Column-Oriented Data in Rust with frunk HLists",
      "content_text": "Row-oriented storage and column-oriented storage are two major ways of laying out data in memory. In Rust, there is a simple way to think of this: row-oriented storage is like an array of structs, whereas column-oriented storage is like a struct of arrays. It’s easy to use row-oriented storage in Rust, so this post is going to explore column-oriented storage.",
      "url": "https://paulkernfeld.com/2019/01/13/frunk-column.html",
      "tweet_url": "https://twitter.com/occupy_paul_st/status/1084564680994099201",
      "date_published": "2019-01-13T00:00:00+00:00",
      "author": {
        "name": "Paul Kernfeld",
        "url": "https://paulkernfeld.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "60e20969-d592-4d79-91e8-633409505b03",
      "title": "Proposed Rust community norm for unsafe code",
      "content_text": "Recently cessen asked  people to write their thoughts on Rust community norm for unsafe code. So here it is.",
      "url": "http://sanxiyn.blogspot.com/2019/01/proposed-rust-community-norm-for-unsafe.html",
      "date_published": "2019-01-10T19:03:00.002+09:00",
      "author": {
        "name": "Seo Sanghyeon",
        "url": "http://sanxiyn.blogspot.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "2eb4baa4-aac1-4bc2-8162-d2eb290a1ac9",
      "title": "Generate Rust tests from data files",
      "content_text": "Sometimes you just have a bunch of example data laying around and you want to make sure your code works with all of them. Some of them are probably short and sweet and could live happily as doctests, which are amazing btw. But some of them are more awkward to present in such form, because, for example, of their size or number. Typically when you have an example of how the program should behave you write an example-based unit test. Ideally, each of them would represent an isolated example and they should fail independently. But, converting your source data files into a unit test one by one, manually, can be a bit tedious. Rust build scripts to the rescue !",
      "url": "https://blog.cyplo.net/posts/2018/12/generate-rust-tests-from-data.html",
      "tweet_url": "https://twitter.com/cyplo/status/1084409768582758400",
      "date_published": "2018-12-25T00:00:00+00:00",
      "author": {
        "name": "Cyryl Płotnicki",
        "url": "https://blog.cyplo.net/index.html"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "b88f26ba-23c6-4d9b-9559-7ccc6477c7af",
      "title": "Writing an OS in Rust - Introduction to Paging",
      "content_text": "This post introduces paging, a very common memory management scheme that we will also use for our operating system. It explains why memory isolation is needed, how segmentation works, what virtual memory is, and how paging solves memory fragmentation issues. It also explores the layout of multilevel page tables on the x86_64 architecture.",
      "url": "https://os.phil-opp.com/paging-introduction/",
      "tweet_url": "https://twitter.com/phil_opp/status/1084821814537318400",
      "date_published": "2019-01-14T00:00:00+00:00",
      "author": {
        "name": "Philipp Oppermann",
        "url": "https://os.phil-opp.com/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "0b01d8d7-aa94-4382-8fbf-c2979f7018ad",
      "title": "Scala Developer Journey into Rust - Part 2 : Type Inference",
      "content_text": "Rust is one of the major programming languages that’s been getting popular in recent years. It has many advanced high level language features like Scala.This made me interested to learn Rust. So in this next series of blogs I will share my experience with Rust from a Scala developer point of view. I would like to explore how these two language approach things. I would like to explore the similarities and their differences.",
      "url": "http://blog.madhukaraphatak.com/rust-scala-part-2/",
      "tweet_url": "https://twitter.com/madhukaraphatak/status/1084814593434673153",
      "date_published": "2019-01-14T00:00:00+00:00",
      "author": {
        "name": "Madhukara Phatak",
        "url": "http://madhukaraphatak.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "1d74a896-3c60-4a3b-a94d-29881d3c602b",
      "title": "What I would like to see in Rust in 2019",
      "content_text": "The Rust maintainers recently asked the community what they would like to see happening in Rust, in 2019. Many people have stated that Rust could use a fallow year. I generally agree, but there are a few changes to the language I consider important/useful enough to implement despite the proposed moratorium on features.",
      "url": "http://salt-documentary.blog/rust-2019/",
      "date_published": "2019-01-08T00:00:00+00:00",
      "author": {
        "name": "Alex (leitimmel)",
        "url": "http://salt-documentary.blog/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "31f71876-3c22-47bf-bea9-4eaf184d6913",
      "title": "WASM 2019",
      "content_text": "Two days ago I wrote about what I plan to work on this year. This is my post about what I'd like to see happen with WebAssembly and Rust in 2019.",
      "url": "https://blog.yoshuawuyts.com/wasm-2019/",
      "date_published": "2019-01-15T00:00:00+00:00",
      "author": {
        "name": "Yoshua Wuyts",
        "url": "https://blog.yoshuawuyts.com/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "8b0fd582-3249-46f1-80a9-81e2ac18f0d1",
      "title": "Rust 2019: Laying the groundwork for an amazing future",
      "content_text": "This year another call for community blog posts on the future directions for Rust is up. This post re-iterates some of the points I mentioned last year (including simply copying some parts of the text), while re-stating the issues in the context of Rust 2019. A summary is that I think that the two most important themes is community management and support for awesome libraries. The why, how, and what is discussed below.",
      "url": "https://zayenz.se/blog/post/rust-2019/",
      "date_published": "2019-01-15T00:00:00+00:00",
      "author": {
        "name": "Mikael Zayenz Lagerkvist",
        "url": "https://zayenz.se/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "5dbd8253-66c0-4061-8bc7-fd741a1fedbc",
      "title": "#Rust2019 Are We GUI Yet?",
      "content_text": "I want to tackle one specific topic in contrast to other posts that are mostly from a different perspective, and I want to paint the \"Big Picture\" and overall direction. This post is about the narrow topic of GUI and I want to make a case to convince, at least a fraction of the community that is interested in this field, that it might be a good idea to invest in this direction.",
      "url": "http://areweguiyet.com/newsfeed/2019-01-13_rust2019.html",
      "date_published": "2019-01-13T00:00:00+00:00",
      "author": {
        "name": "Dustin Bensing",
        "url": "http://areweguiyet.com/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "814184fc-04bb-468b-8fa4-19a1027bf4d2",
      "title": "Goals and Directions for Rust in 2019",
      "content_text": "2018 was a very busy year for the Rust project. A new edition was released, progress on stabilising Rust’s asynchronous I/O story was made, a new website was launched, and so much more! In 2019 I’d like to see the language and wider crates community become more sustainable, address some common gothca’s that newcomers experience, and promote more platforms/architectures to tier 1 status.",
      "url": "http://www.wezm.net/technical/2019/01/goals-directions-rust-2019/",
      "tweet_url": "https://twitter.com/wezm/status/1084560471565361152",
      "date_published": "2019-01-13T21:00:00+00:00",
      "author": {
        "name": "Wesley Moore",
        "url": "http://www.wezm.net/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "761f2490-5d60-424a-868c-84efd9b171c8",
      "title": "Technolution Rust 2019 Roadmap",
      "content_text": "We rely on Rust. So do our customers, sometimes without even knowing it. We build software that is installed on devices that go out into the world, sometimes never to be seen again in years or even decades. But 15 years from now, we may get a request to make a change to that software.\n\nHistorically we have been very successful doing just that, first in C and later in Java. Slowly but steadily, we are coming to rely on Rust to be able to create maintainable mission-critical software for our customers.\n\nTherefore our proposal for the 2021 roadmap: Reliability.\n\nThis blog post reflects on our journey up to the 2018 edition and outlines our view on Rust's progression in the coming years.",
      "url": "https://www.technolution.eu/en/about-us/news/279-technolution-rust-2019-roadmap.html",
      "date_published": "2019-01-11T00:00:00+00:00",
      "author": {
        "name": "Technolution B.V.",
        "url": "https://www.technolution.eu/en/about-us/news/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "5059354d-87d1-41e8-9f5d-79f6e62cea41",
      "title": "Rust 2019-2021 -- Math and Simulation",
      "content_text": "Some of my first real, non-toy projects in Rust, way back in 2015, were numeric. I was taking a graduate-level Reinforcement Learning and MDP class at the time, and shortly after transitioned to using it in my research in AI. Rust has a lot going for it in terms of package management, speed, and typing.\n\nUnfortunately, it falls apart in several fundamental areas when it comes to mathematical and scientific uses. Some of these are ecosystem problems (i.e. the work just isn't there) and some of it are more core problems (e.g. type-level numerics, which will be solved Soon™, hopefully).",
      "url": "https://gist.github.com/Zaerei/a030377aca10acf21bb0f48860f2f9ac",
      "date_published": "2019-01-12T03:10:53+00:00",
      "author": {
        "name": "Zoe Juozapaitis",
        "url": "https://github.com/Zaerei"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "03ffa23c-960c-4ca4-9de6-2ab39088fab5",
      "title": "Rust 2019: Solid Foundations for Unsafe Code",
      "content_text": "I think in 2019, we should make a coordinated effort to improving the foundations for writing unsafe code. Of course my particular Rust bubble is mostly about unsafe code, as you will know if you have read some of my previous posts – but safety is a core value proposition of Rust, and the entire ecosystem rests on a foundation of crates that make heavy use of unsafe code, so I believe that caring about unsafe code is an important piece to Rust’s overall success.",
      "url": "https://www.ralfj.de/blog/2019/01/12/rust-2019.html",
      "date_published": "2019-01-12T00:00:00+00:00",
      "author": {
        "name": "Ralf Jung",
        "url": "https://www.ralfj.de/blog/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "dfbac96b-1ab3-48a8-9c50-917188335ddd",
      "title": "const types, traits and implementations in Rust",
      "content_text": "Rust permits a limited form of compile-time function execution in the form of const and const fn. While, initially, const may seem like a reasonaby straightforward feature, it turns out to raise a wealth of interesting and complex design questions. In this post, we’re going to look at a particular design question that has been under discussion for some time and propose a design that is natural and expressive. This is motivated both from a syntactic perspective and a theoretic perspective.",
      "url": "https://varkor.github.io/blog/2019/01/11/const-types-traits-and-implementations-in-Rust.html",
      "date_published": "2019-01-11T19:02:40+00:00",
      "author": {
        "name": "varkor",
        "url": "https://varkor.github.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "f0ba6ba2-b32e-4d88-a8e4-a1e33f099387",
      "title": "Introducing Ammolite: A work-in-progress rendering engine with focus on VR/AR",
      "content_text": "Welcome to the inaugural article of the metaview project. metaview is an effort to create a universal platform for VR/AR applications similarly to how the web browser is a platform for web applications. For more information about metaview and its goals, see About. This article covers ammolite, a work-in-progress rendering engine with focus on VR/AR.",
      "url": "https://metaview.link/articles/introducing-ammolite.html",
      "date_published": "2019-01-12T00:00:00+00:00",
      "author": {
        "name": "Jakub Hlusička ",
        "url": "https://metaview.link/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "5c15ca59-eba1-43d8-9dd4-206f574826cf",
      "title": "Understanding Rust Lifetimes",
      "content_text": "No, seriously, this time for real.",
      "url": "https://medium.com/nearprotocol/understanding-rust-lifetimes-e813bcd405fa",
      "tweet_url": "https://twitter.com/mzavershynskyi/status/1083609609229656065",
      "date_published": "2019-01-10T01:26:26.038+00:00",
      "author": {
        "name": "Maksym Zavershynskyi",
        "url": "https://medium.com/@zaver.max"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "1430d9af-511b-4a0d-9802-083db4a4b858",
      "title": "Rust 2019: security",
      "content_text": "The problem is now that if we are measuring safety of Rust according to safe vs unsafe, the most obvious metric to optimize for is amount of unsafe lines in the code.\n\nAnd this is why I think that security should be part of Rust’s stable ecosystem development. And 2019 should be the year for improving the processes around it.",
      "url": "https://snf.github.io/2019/01/10/rust-2019-security/",
      "tweet_url": "https://twitter.com/snfernandez/status/1083381197747732485",
      "date_published": "2019-01-10T00:00:00+00:00",
      "author": {
        "name": "Sebastian Fernandez",
        "url": "http://snf.github.io/about/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "54ecd8fa-cc4f-4c5f-acef-fc75e1e6ce7f",
      "title": "Librsvg is almost rustified now",
      "content_text": "Since a few days ago, librsvg's library implementation is almost 100% Rust code. Paolo Borelli's and Carlos Martín Nieto's latest commits made it possible. What does \"almost 100% Rust code\" mean here?",
      "url": "https://people.gnome.org/~federico/blog/librsvg-is-almost-rustified.html",
      "date_published": "2019-01-10T12:28:11-06:00",
      "author": {
        "name": "Federico Mena Quintero",
        "url": "https://people.gnome.org/~federico/blog/index.html"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "3b8b78a8-dd56-425a-86f5-886e7341a8c4",
      "title": "Year of wlroots",
      "content_text": " wlroots is a hip new Wayland compositor framework that Way Cooler has been using for about a year now. I’m going to go ahead and declare 2019 the year of wlroots. Most of the work was done in 2018, but this year is when major compositors will begin to use it. Currently the only usable Wayland compositor that uses wlroots is sway, which is fast approaching a stable 1.0. However there is a long list of startup compositors (including Way Cooler) that are using wlroots. At least some of them are expected to come into their own as alternatives to traditional X11 based systems this year, and it’s all thanks to wlroots.",
      "url": "http://way-cooler.org/blog/2019/01/09/year-of-wlroots.html",
      "date_published": "2019-01-09T00:00:00+00:00",
      "author": {
        "name": "Preston Carpenter",
        "url": "http://way-cooler.org/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "fa5229de-d279-44c7-9d62-0163e7dc1771",
      "title": "Rust Community Norms for Unsafe Code",
      "content_text": "I recently released Ropey 1.0, a text rope library for Rust. Ropey uses unsafe code internally, and its use of unsafe unsurprisingly came up in the 1.0 release thread on Reddit.\n\nThe ensuing discussion (especially thanks to Shnatsel) helped me significantly reduce the amount of unsafe code in Ropey with minimal (though not non-existent) performance degradation. But the whole thing nevertheless got me thinking about unsafe code and community norms around it, and I figured writing some of those thoughts down might be useful.",
      "url": "https://blog.cessen.com/post/2019_01_09_rust_community_norms_for_unsafe_code",
      "date_published": "2019-01-09T00:00:00+00:00",
      "author": {
        "name": "Nathan Vegdahl",
        "url": "https://blog.cessen.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "01a84c85-f79f-42fa-9632-e3ee5f0f5b6e",
      "title": "Using TLS with Rust: Part II - Client authentication",
      "content_text": "The task that I have for now is to add client authentication via X509 client certificate. That is both obvious and non obvious, unfortunately. I’ll admit that I’m enjoying exploring Rust features, so I don’t know how idiomatic this code is, but it is certainly dense.",
      "url": "https://ayende.com/blog/185730-A/using-tls-with-rust-part-ii-client-authentication",
      "date_published": "2019-01-07T00:00:00+00:00",
      "author": {
        "name": "Ayende Rahien",
        "url": "https://ayende.com/blog/"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "916f96ed-c1cc-4955-ade6-626b3ebf08bd",
      "title": "Building a JS Interpreter in Rust – Part 2",
      "content_text": "When writing an interpreter or a compiler for any language, you usually need to start with a lexer and a parser. Boa here is no different, our first task will be to do the same but what do these do?",
      "url": "https://jason-williams.co.uk/building-a-js-interpreter-in-rust-part-2/",
      "tweet_url": "https://twitter.com/Jason_williams/status/1080406568296951808",
      "date_published": "2019-01-02T00:00:00+00:00",
      "author": {
        "name": "Jason Williams",
        "url": "https://jason-williams.co.uk/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "36f876cd-8e90-4399-bec5-1e7b4883b95b",
      "title": "Rust in 2019 and beyond",
      "content_text": "During the RustFest 2018 in Rome, Aaron Turon said something that stuck with me, which was that Rust is actually about empowering developers. Personally I think this is a very profound thought, that the goal of a programming language is to help others to do and achieve things they never thought possible.\n\nJavaScript empowers developers by being accessible - everyone can start and succeed quickly. It’s great. Rust on the other hand empowers developers by giving them the tools to go deep.\n\nLet’s unpack that.",
      "url": "https://blog.x5ff.xyz/blog/what-makes-rust-awesome-2019/",
      "tweet_url": "https://twitter.com/0x5ff/status/1082959841277198336",
      "date_published": "2019-01-08T00:00:00+00:00",
      "author": {
        "name": "Claus",
        "url": "https://blog.x5ff.xyz/blog"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "5f1f5616-399f-4b02-9a8b-cfc34fa4f44c",
      "title": "Rust 2019 wish list",
      "content_text": "As with any wish list, it started short and then grew a bit. There are three sections Community, Technical and Ethics and I hope it is not too lengthy.",
      "url": "https://estada.ch/2019/1/9/rust-2019-wish-list/",
      "tweet_url": "https://twitter.com/dns2utf8/status/1082975063824130048",
      "date_published": "2019-01-09T00:00:00+01:00",
      "author": {
        "name": "Stefan Schindler",
        "url": "https://estada.ch/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "2a37239a-12d8-4647-bef0-90312992b2b7",
      "title": "Parsing, Validating, and Assembling URLs in Rust",
      "content_text": "These days, we hardly think about URLs. Popular content management tools default to so-called “pretty” slugs, and even here, on secretfader.com, I remove stop-words to ensure the tidiest, most SEO-friendly URLs possible.\nIt would be easy to forget the struggles that led to best practices of today’s web. However, to my generation of internet hackers, URLs riddled with ampersands and question marks were entirely normal. In those days, assuming URLs would be comprised of hyphenated alphanumeric characters was obviously unsafe; instead, we learned the official standard for parsing and constructing URLs.",
      "url": "https://www.secretfader.com/blog/2019/01/parsing-validating-assembling-urls-rust/",
      "tweet_url": "https://twitter.com/secretfader/status/1082742026125230080",
      "date_published": "2019-01-08T00:00:00+00:00",
      "author": {
        "name": "Nicholas (Fader) Young",
        "url": "https://secretfader.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "4afbd4d0-42ae-460f-8805-22e094fb394b",
      "title": "sharkdp/hexyl: A command-line hex viewer",
      "content_text": "hexyl is a simple hex viewer for the terminal. It uses a colored output to distinguish different categories of bytes (NULL bytes, printable ASCII characters, ASCII whitespace characters, other ASCII characters and non-ASCII).",
      "url": "https://github.com/sharkdp/hexyl",
      "date_published": "2019-01-10T00:00:00+00:00",
      "author": {
        "name": "David Peter",
        "url": "https://dev.to/sharkdp"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "ca3c5e56-62c9-4f06-a652-9dd666e7c61e",
      "title": "Stability → Productivity → Maintainability",
      "content_text": "Rust in 2019 and beyond: In response to the call for blog posts on the direction Rust should take in 2019 and beyond I’ve come up with a few ideas.",
      "url": "https://medium.com/@tom.kaitchuck/stability-productivity-maintainability-9179f4b3e23f",
      "date_published": "2019-01-10T01:27:31.575+00:00",
      "author": {
        "name": "Tom Kaitchuck",
        "url": "https://medium.com/@tom.kaitchuck"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "f941f6bf-eaf1-428a-a5d0-f8e35d504a3a",
      "title": "Supernova: rustfmt",
      "content_text": "I previously wrote about Supernova, and my experience contributing to a project in a language I had never used before. Although my PR is still WIP status (I need to find time to get a solid grasp on Date/Time stuff in Rust, specifically using the chrono crate), I picked up some smaller issues in the interim to stay involved.\n\nMy most recent PR’s involved working off of a previous PR which introduced code linting with clippy, and taking it one step further by introducing rustfmt to help ensure consistent coding style in our CI pipeline.",
      "url": "https://medium.com/@chayadanz/supernova-rustfmt-5c3d0c56831c",
      "date_published": "2019-01-10T04:22:26.772+00:00",
      "author": {
        "name": "Chaya Danzinger",
        "url": "https://medium.com/@chayadanz"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "4fda94a2-d93a-4d1d-8ffe-e171600b13ce",
      "title": "Using Rust for Gamedev",
      "content_text": "I’ve recently created a new website and finished an online game named Adventures of Pascal Penguin. One of the most unique things about this game is that it was written in Rust and runs in web browsers thanks to WebAssembly. WebAssembly has only been mainstream for about a year or so, so not many games have been created like this. I want to share a little about my journey with Rust: how I started with it and how I got to this point.",
      "url": "https://medium.com/@michelotti.matthew/using-rust-for-gamedev-2f60b0e4cc5c",
      "date_published": "2019-01-04T06:15:37.008+00:00",
      "author": {
        "name": "Matthew Michelotti",
        "url": "https://medium.com/@michelotti.matthew"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "1dd7a631-a2a9-42e8-ba0c-87b56bc6af38",
      "title": "generic-array Design and Usage Notes",
      "content_text": "generic-array is a method of achieving fixed-length fixed-size stack-allocated generic arrays without needing const generics in stable Rust.",
      "url": "https://github.com/fizyk20/generic-array/blob/master/DESIGN.md",
      "date_published": "2019-01-08T00:00:00+00:00",
      "author": {
        "name": "Aaron Trent",
        "url": "https://github.com/novacrazy"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "94e44d97-0440-4673-9727-734c2be63a7d",
      "title": "The Last Thing Rust Needs",
      "content_text": "In 2014, world-renowned C++ expert Scott Meyers was invited to DConf, Facebook's conference on the D programming language. D is a modern, multi-paradigm systems language with a good amount of inspiration from C++, so the choice was only fitting.",
      "url": "https://h2co3.github.io/rust2019/",
      "date_published": "2019-01-05T00:00:00+00:00",
      "author": {
        "name": "Árpád Goretity",
        "url": "https://h2co3.github.io/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "a46b1128-605b-4cab-b36f-5766125ba2f3",
      "title": "Comparing Rust and JavaScript Ergonomics with a Simple Linked List",
      "content_text": "My day-to-day work involves writing a fair bit of JavaScript but, lately, I've gotten really interested in Rust. The other day, I decided to take a slightly different approach: I decided to take a simple linked list program—the type can and do ask my students to implement in JavaScript in ~20 minutes—and re-implement it in Rust. Specifically, I decided to build a queue implemented with a singly linked list.",
      "url": "https://www.codesections.com/blog/javascript-vs-rust-linked-list/",
      "date_published": "2019-01-06T00:00:00+00:00",
      "author": {
        "name": "Daniel Long Sockwell",
        "url": "https://www.codesections.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ec95e248-cef0-42ed-8a49-8e03d8c7e30b",
      "title": "thank u, next",
      "content_text": "I started working at 15, when I took a job as a pizza cook. Over the next seven years, I moved up the ranks, to a driver, shift manager, and then as part of the “new store opening team.” The franchise was growing, and we needed to help new franchisees open their new stores. I’d travel to where the new store was a week before they would open, help train the new staff, and then work their opening weekend. It was really fulfilling work; if pizza paid as well as tech, I’d seriously consider doing it forever.",
      "url": "https://words.steveklabnik.com/thank-u-next",
      "tweet_url": "https://twitter.com/steveklabnik/status/1082278379632672768",
      "date_published": "2019-01-08T01:10:00+00:00",
      "author": {
        "name": "Steve Klabnik",
        "url": "https://words.steveklabnik.com/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "069e9371-d000-454f-b73d-0b082a92988b",
      "title": "How I learned to love Rust",
      "content_text": "A journey from hating Rust to loving it more than any other language.",
      "url": "https://medium.com/@geis/how-i-learned-to-love-rust-abfac6c1f6d1",
      "date_published": "2019-01-07T21:07:51.883+00:00",
      "author": {
        "name": "Grégoire Geis",
        "url": "https://medium.com/@geis"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "626da706-6d3e-4986-a6dd-b8002ee01290",
      "title": "Rust in 2019: Focus on sustainability",
      "content_text": "To me, 2018 felt like a big turning point for Rust, and it wasn’t just the edition. Suddenly, it has become “normal” for me to meet people using Rust at their jobs. Rust conferences are growing and starting to have large number of sponsors. Heck, I even met some professional Rust developers amongst the parents at a kid’s birthday party recently. Something has shifted, and I like it.",
      "url": "http://smallcultfollowing.com/babysteps/blog/2019/01/07/rust-in-2019-focus-on-sustainability/",
      "tweet_url": "https://twitter.com/nikomatsakis/status/1082414836762460161",
      "date_published": "2019-01-07T00:00:00-05:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "234e0c08-173d-431d-861b-3f4bbb214a6b",
      "title": "Using TLS with Rust: Part I",
      "content_text": "The next interesting step in my Rust network protocol exercise is to implement TLS. I haven’t looked at that yet, so it is going to be interesting.",
      "url": "https://ayende.com/blog/185698-A/using-tls-with-rust-part-i",
      "date_published": "2019-01-02T00:00:00+00:00",
      "author": {
        "name": "Ayende Rahien",
        "url": "https://ayende.com/blog/"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "470de398-add8-4fdd-9b38-c79c781c58fa",
      "title": "Deriving Traits in Rust with Procedural Macros",
      "content_text": "Procedural macros in Rust are a really compelling feature that I didn’t understand until recently. There are a few gotchas, but they make it super easy to implement custom #[derive()] expansions for implementing traits with a single line of code. Let’s dive in.",
      "url": "https://naftuli.wtf/2019/01/02/rust-derive-macros/",
      "date_published": "2019-01-02T00:00:00+00:00",
      "author": {
        "name": "Naftuli Kay",
        "url": "https://naftuli.wtf/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "7828aada-388f-4b7b-bac1-24de2e65cf6a",
      "title": "Thessaloniki GNOME+Rust Hackfest 2018",
      "content_text": "A couple of weeks ago we had the fourth GNOME+Rust hackfest, this time in Thessaloniki, Greece.  We held the hackfest at the CoHo coworking space, a small, cozy office between the University and the sea. Every such hackfest I am overwhelmed by the kind hackers who work on [gnome-class], the code generator for GObject implementations in Rust.",
      "url": "https://people.gnome.org/~federico/blog/thessaloniki-gnome-rust-2018.html",
      "date_published": "2018-11-27T17:37:31-06:00",
      "author": {
        "name": "Federico Mena Quintero",
        "url": "https://people.gnome.org/~federico/blog/index.html"
      },
      "tags": [
        "Community",
        "Crates"
      ]
    },
    {
      "id": "5b89867c-1a66-4b88-ab28-5b04e6cda3f5",
      "title": "Rust 2019: Towards Richer Language Extensions",
      "content_text": "As of Rust 1.30, the Rust language now has support for a very expressive feature called procedural macros 3. Procedural macros are great because they enable Rust to do more, without baking a lot of potentially domain-specific information into the language. For example, automatic serialization of data types 5 and expressive, type-safe abstractions for web servers 6 can both be implemented using procedural macros.\n\nHowever, while expressive, procedural macros can’t do everything.",
      "url": "https://internals.rust-lang.org/t/rust-2019-towards-richer-language-extensions/9151",
      "date_published": "2019-01-06T01:17:43+00:00",
      "author": {
        "name": "Elliott Slaughter",
        "url": "https://internals.rust-lang.org/u/elliottslaughter"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "ad9d038f-52e6-4860-a264-61a795428b87",
      "title": "Scannerless parsing of boolean grammars with derivatives in Rust",
      "content_text": "This is yet another library for writing parsers in Rust. What makes this one different is that I've combined some existing academic work in a way that I think is novel. The result is an unusually flexible parsing library while still offering competitive performance and memory usage.",
      "url": "https://github.com/jameysharp/weighted-regexp-rs/blob/master/README.md",
      "date_published": "2019-01-06T00:00:00+00:00",
      "author": {
        "name": "Jamey Sharp",
        "url": "https://github.com/jameysharp"
      },
      "tags": [
        "Crates",
        "Computer Science"
      ]
    },
    {
      "id": "23462803-be17-4a96-b8f1-64af9c0e79d8",
      "title": "Scientific Rust #rust2019",
      "content_text": "The Rust community requested feedback last year for where the language should go in 2018, and now they are running it again for 2019. Last year I was too new in Rust to organize a blog post, but after an year using it I feel more comfortable writing this!\n\nIn this post I will be focusing more in two areas: array computing (what most people consider 'scientific programming' to be) and \"data structures\".",
      "url": "https://blog.luizirber.org/2019/01/05/rust-2019/",
      "tweet_url": "https://twitter.com/luizirber/status/1081729107170193408",
      "date_published": "2019-01-05T17:00:00-02:00",
      "author": {
        "name": "Luiz Irber",
        "url": "https://blog.luizirber.org/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "275f95ad-70be-4870-bb50-0c5df78ed9be",
      "title": "Rust 2019",
      "content_text": "Thinking about Rust’s evolution like a video game (heh), we have just reached level 2018. Our programming language is in a good state but there are a lot of progress bars for features where we need to get a few more experience points to unlock a new ability.",
      "url": "https://deterministic.space/rust-2019.html",
      "tweet_url": "https://twitter.com/killercup/status/1081307753182883840",
      "date_published": "2019-01-04T00:00:00+01:00",
      "author": {
        "name": "Pascal Hertleif",
        "url": "https://deterministic.space/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "e11a846b-3426-49af-b3b4-bc444adfe11b",
      "title": "Rust 2019 posts",
      "content_text": "When starting collecting ideas about this years Rust 2019 post, I had far to many to fit into one document. For that reasons, I’ll start writing multiple small pieces. I might come back to them at a later point this year. Most of my wishes are around the project structure, but I also have some technical ones. Most of them deal with the current growth and maturity of the project. All of these are living documents and even just drafts, so they might change at any time and might be released in draft form.",
      "url": "https://yakshav.es/rust-2019/",
      "tweet_url": "https://twitter.com/Argorak/status/1080810493437202432",
      "date_published": "2019-01-03T23:57:00+00:00",
      "author": {
        "name": "Florian Gilcher",
        "url": "http://yakshav.es/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "9cccb5d4-edfb-483f-ab75-0b099242fd69",
      "title": "Followups",
      "content_text": "Here are some followups on previous blog postings. Including, Arclength, and 2D graphics.",
      "url": "https://raphlinus.github.io/curves/graphics/2019/01/04/followups.html",
      "tweet_url": "https://twitter.com/raphlinus/status/1081248408268984320",
      "date_published": "2019-01-04T16:54:42+00:00",
      "author": {
        "name": "Raph Levien",
        "url": "https://raphlinus.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "51795148-94c2-4912-9e84-eb9502a80d4c",
      "title": "Rust 2019: Beat C++",
      "content_text": "I'm not a contributor outside a few issues here and there, but I have some thoughts about how Rust could be improved in 2019. There's been a lot of talk of the Fallow Year and limiting new features, and I think these are great ideas. With that in mind, a goal that follows along those lines is to \"Beat C++.\" Rust doesn't have to beat C++ by performing better in benchmarks. Rather, Rust can beat C++ by making it easier to write optimized code, benchmark it, and profile it.",
      "url": "https://www.reddit.com/r/rust/comments/acjcbp/rust_2019_beat_c/?st=JQIGPCJV&sh=0e8b6ffc",
      "date_published": "2019-01-05T00:00:00+00:00",
      "author": {
        "name": "u/Holy_City",
        "url": "https://www.reddit.com/user/Holy_City"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "4a2d72d8-3aa4-4c82-a95f-847f3e0c650d",
      "title": "I made MPD index SoundCloud, here's how I did it",
      "content_text": "The usual process of playing something on our music server is a bit cumbersome: I have to browse SoundCloud, download a track that seems interesting, upload it to the music server, let MPD index it, and then play it.\n\nTo make my life easier, I wanted to leverage Linux’s FUSE interface to expose the audio on SoundCloud as a bunch of files in a folder which MPD could then index and play from. I could have taken a couple of other approaches such as swapping MPD with Mopidy, an MPD-compatible music player with SoundCloud support, or a scraper that periodically downloads the latest audio from my feed. And while these alternatives were probably easier to implement, I went for the FUSE driver because I thought it was cool.",
      "url": "https://polyfloyd.net/post/soundcloud-fuse-mpd/",
      "tweet_url": "https://twitter.com/polyfloyd/status/1080859287742803970",
      "date_published": "2019-01-02T00:00:00+00:00",
      "author": {
        "name": "polyfloyd",
        "url": "https://polyfloyd.net/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "bc334e2e-7ac8-4019-a197-da3d1d19edbf",
      "title": "Version 0.2 of Smithay, a library for making wayland compositors",
      "content_text": "Announcement of version 0.2 of smithay, now providing the fundamentals of a wayland compositor.",
      "url": "https://smithay.github.io/smithay-v-0-2.html",
      "date_published": "2018-12-28T17:00:00+01:00",
      "author": {
        "name": "Victor Berger",
        "url": "https://smithay.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "ea33097d-8f78-4d8d-9f75-bc9305380398",
      "title": "PyOxidizer: Make distributable Python applications using Rust",
      "content_text": "PyOxidizer is a collection of Rust crates that facilitate building libraries and binaries containing Python interpreters. PyOxidizer is capable of producing a single file executable - with all dependencies statically linked and all resources (like .pyc files) embedded in the executable.",
      "url": "https://github.com/indygreg/pyoxidizer",
      "date_published": "2019-01-03T00:00:00+00:00",
      "author": {
        "name": "Gregory Szorc",
        "url": "https://github.com/indygreg"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "ff73c006-4009-4e7b-9405-7d4ea2b3c08d",
      "title": "Propagating Errors",
      "content_text": "Lately, I have been converting the code in librsvg that handles XML from C to Rust. For many technical reasons, the library still uses libxml2, GNOME's historic XML parsing library, but some of the callbacks to handle XML events like start_element, end_element, characters, are now implemented in Rust. This has meant that I'm running into all the cases where the original C code in librsvg failed to handle errors properly; Rust really makes it obvious when that happens.\n\nIn this post I want to talk a bit about propagating errors. You call a function, it returns an error, and then what?",
      "url": "https://people.gnome.org/~federico/blog/propagating-errors.html",
      "date_published": "2018-11-21T13:58:12-06:00",
      "author": {
        "name": "Federico Mena Quintero",
        "url": "https://people.gnome.org/~federico/blog/index.html"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "f96e4dca-7eb6-4855-849f-97007457148d",
      "title": "Making and using C-compatible libraries in Rust: present and future",
      "content_text": "Since there are plenty of blogposts about what people would like to have or will implement in rust in 2019 here is mine.\n\nI spent the last few weeks of my spare time making a C-api for rav1e called crav1e, overall the experience had been a mixed bag and there is large space for improvement.",
      "url": "https://blogs.gentoo.org/lu_zero/2018/12/30/making-and-using-c-compatible-libraries-in-rust-present-and-future/",
      "tweet_url": "https://twitter.com/lu_zero_/status/1079308159561486336",
      "date_published": "2018-12-30T09:25:47+00:00",
      "author": {
        "name": "Luca Barbato",
        "url": "https://blogs.gentoo.org/lu_zero/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "7d13bc11-63fd-48bd-bef2-459379a5e6c4",
      "title": "Rustduino pt. I: setting up the development environment",
      "content_text": "This post details the steps needed to start programming an Arduino UNO board using the Rust programming language and working on Mac OS.",
      "url": "https://treesandrobots.com/2018/12/rustduino-pt-1-setting-up-development-environment.html",
      "tweet_url": "https://twitter.com/jacoscaz/status/1080173976201162753",
      "date_published": "2018-12-30T00:00:00+00:00",
      "author": {
        "name": "Jacopo Scazzosi",
        "url": "https://treesandrobots.com/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "da6b6f38-a2c9-43df-a97b-6084e3a8ee7d",
      "title": "Rust in 2019",
      "content_text": "These are some rough notes on things in the Rust project that are important to me, that I’d like to work on in 2019. I haven’t got a grand vision this time around (I tried that last year, but ran out of bandwidth to properly drive it).",
      "url": "https://kodraus.github.io/rust/2019/01/01/rust-2019.html",
      "tweet_url": "https://twitter.com/KodrAus/status/1079934058396676096",
      "date_published": "2019-01-01T02:44:00+00:00",
      "author": {
        "name": "Ashley Mannix",
        "url": "https://kodraus.github.io/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "5ef7bb7d-ef60-4758-90e5-04c6cb63a544",
      "title": "My wishlist for Rust in 2019",
      "content_text": "It's starting to become a tradition to see a bunch of posts around the new year on what the community wants to see from Rust. For the second year in a row, the Rust core team asked for feedback for the 2019 roadmap and this is what I'd like: \"rustfix all the things\" and a better infrastructure.",
      "url": "https://www.pietroalbini.org/blog/rust-2019-wishlist/",
      "tweet_url": "https://twitter.com/pietroalbini/status/1080450472882958336",
      "date_published": "2019-01-02T00:00:00+00:00",
      "author": {
        "name": "Pietro Albini",
        "url": "https://www.pietroalbini.org/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "3f5071e6-1c55-42fc-ac93-8b1d70958d25",
      "title": "Russian AI Cup 2018",
      "content_text": "Russian AI Cup — annual IT-oriented competition initiative, organized by Mail.Ru Group and Codeforces. Last year we started using Rust compiled to WebAssembly to show the games on web. This time, we went even further, and the game itself is now written in Rust. So, now web player, local game runner and testing suite is actually same application with same source code. This means that you can, among other things, play the game in browser, which was not possible before.",
      "url": "https://blog.kuviman.com/2019/01/01/russian-ai-cup-2018.html",
      "date_published": "2019-01-01T00:00:00+00:00",
      "author": {
        "name": "kuviman",
        "url": "https://blog.kuviman.com/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "d282adbf-dce7-4fbb-86e5-2d33df229932",
      "title": "Leveraging Rust types for modular specification and verification",
      "content_text": "Rust’s type system ensures memory safety: well-typed Rust programs are guaranteed to not exhibit problems such as dangling pointers, data races, and unexpected side effects through aliased references. Going beyond memory safety, for instance, to guarantee the absence of assertion failures or functional correctness, requires static program verification. Formal verification of system software is notoriously difficult and requires complex specifications and logics to reason about pointers, aliasing, and side effects on mutable state. This complexity is a major obstacle to a more widespread verification of system software.\n\nIn this paper, we present a novel verification technique that leverages Rust’s type system to greatly simplify the specification and verification of Rust programs. We analyse information from the Rust compiler and synthesise a corresponding core proof for the program in a flavour of separation logic tailored to automation. Crucially, our proofs are constructed and checked automatically; users of our work never work with the underlying formal logic. Users can add specifications at the abstraction level of Rust expressions; we show how to interweave these to extend our core proof to prove modularly whether these specifications are correct. We have implemented our technique for a subset of Rust; our initial evaluation on two thousand functions from widely-used Rust crates demonstrates its effectiveness",
      "url": "https://www.research-collection.ethz.ch/handle/20.500.11850/311092",
      "date_published": "2018-12-17T07:00:47+00:00",
      "author": {
        "name": "Astrauskas, Vytautas; Müller, Peter; Poli, Federico; Summers, Alexander",
        "url": "https://www.research-collection.ethz.ch/handle/20.500.11850/22"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "02aaa21e-53a6-4e80-9ad2-73fdfcab3569",
      "title": "Rust 2019: Compiler, Community, and Const Generics",
      "content_text": "This article is a repsponse to the call for 2019 wishlist blog posts for the Rust programming language.",
      "url": "https://nicoburns.com/blog/rust-2019/",
      "date_published": "2019-01-03T00:00:00+00:00",
      "author": {
        "name": "Nico Burns",
        "url": "https://nicoburns.com/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "24596458-21bc-4c81-af9c-957f439796b3",
      "title": "My Personal Rust 2019",
      "content_text": "Many people have already posted their thoughts on the future of Rust. There are some excellent ideas in there that are probably more important than what I have to say. On the other hand my blog post covers my personal experiences I’ve had in the few years I’ve been writing Rust.",
      "url": "https://casualhacks.net/blog/2019-01-01/my-personal-rust-2019/",
      "date_published": "2019-01-01T00:00:00+00:00",
      "author": {
        "name": "Casper",
        "url": "http://casualhacks.net/blog/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "df592561-9217-416a-bb32-5d610d948fad",
      "title": "Rust in 2019: Working through the growing pains",
      "content_text": "TLDR: this post is not as eloquent as I’d like it to be, but the main takeaway\nis that Rust is still a fast growing language, and has experienced expected growing pains,\nboth social and technological. This is okay, and we as the community need to\nwork through these pains, with the teams, not despite them.",
      "url": "https://isaacwoods.tk/rust_2019/",
      "tweet_url": "https://twitter.com/IsaacWoods1234/status/1075404272542629888",
      "date_published": "2018-12-19T00:00:00+00:00",
      "author": {
        "name": "Isaac Woods",
        "url": "https://isaacwoods.tk/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "793ef59c-ee13-4673-a06b-e65d461e7b1c",
      "title": "What is 'Placement New' in Rust?",
      "content_text": "Placement new is a feature currently being discussed for the Rust programming language. It gives programmer control of memory allocation and memory placement, where current memory allocation implementations are hidden behind compiler internals via the Box::new interface. This is Rust’s answer to C++ placement new, allowing one to control not only when and how memory is freed, but also where it is allocated and freed from.",
      "url": "http://blakesmith.me/2018/12/31/what-is-placement-new-in-rust.html",
      "date_published": "2018-12-31T00:00:00+00:00",
      "author": {
        "name": "Blake Smith",
        "url": "http://blakesmith.me/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "fb92d7a2-b953-45d4-89b0-83cd1648cc47",
      "title": "Rust 2019: Address the \"Big\" Problem",
      "content_text": "Tame Complexity through Community Involvement Tools",
      "url": "https://internals.rust-lang.org/t/rust-2019-address-the-big-problem/9109",
      "date_published": "2018-12-27T19:10:18+00:00",
      "author": {
        "name": "Sam Sieber",
        "url": "https://internals.rust-lang.org/u/samsieber"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "f6f38aae-10b9-4c71-b4fd-c0412a56e064",
      "title": "Converting a Python library to Rust",
      "content_text": "I rewrote a Python project in Rust. The rewrite took a fair bit longer than expected, but the results were good (about 9 times faster and ½ the memory usage). In the process, I learned a fair bit about Rust.",
      "url": "https://alantrick.ca/writings/programming/python_to_rust/",
      "date_published": "2018-12-22T00:00:00+00:00",
      "author": {
        "name": "Alan Trick",
        "url": "https://alantrick.ca/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "6022c644-5499-422b-baab-9124f58a0c69",
      "title": "Comparing Pythagorean triples in C++, D, and Rust",
      "content_text": "You may have recently encountered and/or read this blog post criticising a possible C++20 implementation of Pythagorean triples using ranges. In it the author benchmarks different implemetations of the problem, comparing readability, compile times, run times and binary sizes. My main language these days is D, and given that D also has ranges (and right now, as opposed to a future version of the language), I almost immediately reached for my keyboard. By that time there were already some D and Rust versions floating about as a result of the reddit thread, so fortunately for lazy me “all” I had to next was to benchmark the lot of them.",
      "url": "https://atilanevesoncode.wordpress.com/2018/12/31/comparing-pythagorean-triples-in-c-d-and-rust/",
      "tweet_url": "https://twitter.com/atilaneves/status/1079728315798298627",
      "date_published": "2018-12-31T13:16:03+00:00",
      "author": {
        "name": "Átila Alves Neves",
        "url": "https://atilanevesoncode.wordpress.com/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "eb6cda74-6556-4a37-bd1e-0a6471b700e4",
      "title": "Rust in 2019: The next year and edition",
      "content_text": "This post is gonna be as much personal as it is both technical and people oriented. Buckle up, we’re gonna cover a lot of things, and a lot of it is not fun. This is definitely one of those, “We really need to look at ourselves in the mirror” hard truths posts. As I type this though, I’ve reflecting on the past few years with the Rust community I’m just in awe of the amount of work, dedication, and passion that’s gone into it. I started Rust when I was still starting my career and finishing up my CS degree and now we have a brand spanking new edition! So much has changed that it’s honestly mind boggling thinking about it. Even at work I gave a history of Rust presentation and it was wild being able to go “back in the day” for something that was just a regular day a few years ago.\n\nNow I find myself thinking about the problems we face as we become an even bigger community. We have a lot of problems. They’re good problems to have, but problems that must be solved eventually. I’m gonna go through all of them, what I see as major pain points/issues we’ve solved up to now, the present problems, and ones on the horizon. I’ll cover what I think we should focus on in the upcoming year and where we can go towards for Rust’s 2nd Edition. Let’s get started!",
      "url": "https://mgattozzi.com/rust-in-2019-the-next-year-and-edition/",
      "tweet_url": "https://twitter.com/mgattozzi/status/1079820230715682817",
      "date_published": "2018-12-31T19:20:32+00:00",
      "author": {
        "name": "Michael Gattozzi",
        "url": "https://mgattozzi.com/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "152067d5-472f-4ba2-9429-6a5de749bf99",
      "title": "Barriers and Two-phase Borrows in Stacked Borrows",
      "content_text": "My internship (“research assistantship”) with Mozilla has ended several weeks ago, and this post is a report of the most recent tweaks I made to Miri and Stacked Borrows. Neither project is by any means “done”, of course. However, both have reached a fairly reasonable state, so I felt some kind of closing report made sense. Also, if I ever want to finish my PhD, I’ll have to seriously scale down the amount of time I work on Rust – so at least from my side, things will move more slowly from now on.\n\nIn particular, installing Miri and running your test suite in it is now just a single command away! Scroll all the way down if you are not interested in the rest.",
      "url": "https://www.ralfj.de/blog/2018/12/26/stacked-borrows-barriers.html",
      "date_published": "2018-12-26T00:00:00+00:00",
      "author": {
        "name": "Ralf Jung",
        "url": "https://www.ralfj.de/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "536bfa8b-ba21-44b5-b570-3e5850de6320",
      "title": "Rust 2019 wish-list",
      "content_text": "I'm writing in Rust a lot less than what I'd like, in part because of the lack of time, in part because the language and developer experience are already good. What I found missing is...",
      "url": "https://www.reddit.com/r/rust/comments/a6y6my/rust_2019_wishlist/",
      "tweet_url": "https://twitter.com/naufraghi/status/1074591741351727104",
      "date_published": "2018-12-17T20:06:00+00:00",
      "author": {
        "name": "Matteo Bertini",
        "url": "https://mastodon.technology/@naufraghi"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "055bf639-2649-43e8-8604-91388b069c98",
      "title": "Rust 2019 -- Finish Core Stuff!",
      "content_text": "I am a relatively new in Rust, but I believe I have gathered enough experience the last few months to enjoy its strengths and discover some of its current shortcomings. Being relatively new at Rust, I am also of this generation that started immediately with Edition 2018. I switched to nightly very early on, and recently have been porting some code back to stable (1.31.x). I am overall very satisfied with Rust, but sometimes I come across something that doesn't work as I hoped. Every time that happens, I discover there is work-in-progress solving these issues, including, most of the time, a merged RFC, a nightly implementation behind feature gates or at least some blogs from core developers. Many time, the work I come across is from many years back.\n\nI have read several #Rust2019 and I want to use this opportunity to agree with those that suggest to finish current core stuff.",
      "url": "https://gist.github.com/magnet/fab817fd64411f65d8d5f5109eadd5f9",
      "tweet_url": "https://twitter.com/simach/status/1077641394045534209",
      "date_published": "2018-12-25T19:03:55+00:00",
      "author": {
        "name": "Simon Chemouil",
        "url": "https://gist.github.com/magnet"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "ee55b2d9-0365-406f-aaef-b4247d8fdf78",
      "title": "All I Want for Rust 2019 is You (To Give a Talk)",
      "content_text": "A call to action for local Rust meetups.",
      "url": "https://optimistictypes.com/rust-2019/",
      "tweet_url": "https://twitter.com/DebugSteven/status/1079606857214287877",
      "date_published": "2018-12-30T00:00:00+00:00",
      "author": {
        "name": "J Haigh",
        "url": "https://debugsteven.github.io/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "0461ffc8-05b3-413d-a015-c0859ed9665f",
      "title": "Announcing 'err-derive' - yet another error handling library",
      "content_text": "err-derive A failure-like derive macro for the std Error. The source code is mostly copied from failure-derive.",
      "url": "https://users.rust-lang.org/t/announcing-err-derive-yet-another-error-handling-library/23594",
      "date_published": "2018-12-27T13:09:02+00:00",
      "author": {
        "name": "Thomas Schaller",
        "url": "https://users.rust-lang.org/u/torkleyy"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "b6c3cfcb-a670-4295-8a94-a76931e60985",
      "title": "Rust 2019 - Usability and Tools",
      "content_text": "This is my personal answer to the call for Rust 2019 Roadmap blog posts. To make it easier to read I've separated the post into sections by topic: Cargo & Crates.io, Rustdoc, Language & Stdlib, Compiler & Analyzer.",
      "url": "https://crepererum.net/rust-2019-stabilization-and-ecosystem/",
      "tweet_url": "https://twitter.com/crepererum/status/1078729627244417024",
      "date_published": "2018-12-28T19:07:59+00:00",
      "author": {
        "name": "Marco Neumann",
        "url": "https://crepererum.net/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "bddc8eb0-f2db-4330-87fa-2eca9a68e9e5",
      "title": "Currying in rust Part 3 (The circle of life ... aka why borrowchecker ... why?!)",
      "content_text": "Today we're going to take a look at the 'pipe' function my friend has written and why all of the sudden lifetimes get important esp. when using references.",
      "url": "https://hashnode.com/post/currying-in-rust-part-3-the-circle-of-life-aka-why-borrowchecker-why-cjq3z1dd800dknds1sls4dqav",
      "tweet_url": "https://twitter.com/hashnode/status/1077810824746422273",
      "date_published": "2018-12-25T16:35:00+00:00",
      "author": {
        "name": "j",
        "url": "https://github.com/chilimatic"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "2508ab68-2b48-4066-a6b4-a15a4f061025",
      "title": "Jix' Site: Introducing partial_ref",
      "content_text": "Recently there has been some discussion about interprocedural borrowing conflicts in rust. This is something I’ve been fighting with a lot, especially while working on my SAT solver varisat. Around the time Niko Matsakis published his blog post about this, I realized that the existing workarounds I’ve been using in varisat have become a maintenance nightmare. Making simple changes to the code required lots of changes in the boilerplate needed to thread various references to the places where they’re needed.\n\nWhile I didn’t think that a new language feature to solve this would be something I’d be willing to wait for, I decided to sit down and figure out how such a language feature would have to look like. I knew that I wanted something that allows for partial borrows across function calls. I also prefer this to work with annotations instead of global inference. While trying to come up with a coherent design that fits neatly into the existing type and trait system, I realized that most of what I wanted can be realized in stable rust today.",
      "url": "https://jix.one/introducing-partial_ref/",
      "date_published": "2018-12-24T14:07:10+01:00",
      "author": {
        "name": "Jannis Harder",
        "url": "https://jix.one/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "a60ffa53-800e-42b3-a0df-feadc7a9e931",
      "title": "GitHub Actions: An introductory look and first impressions",
      "content_text": "I cover first impressions on GitHub actions using Rust as well as how to make it do a simple merge with a comment!",
      "url": "https://mgattozzi.com/github-actions-an-introductory-look-and-first-impressions/",
      "date_published": "2018-12-04T23:21:39+00:00",
      "author": {
        "name": "Michael Gattozzi",
        "url": "https://mgattozzi.com/"
      },
      "tags": [
        "DevOps and Deployment"
      ]
    },
    {
      "id": "9a6530f2-df83-41a2-b9fe-c2408eabbe0f",
      "title": "This Year in Gfx-rs - 2018",
      "content_text": "In 2018 the project left the nursery and entered the adolescence period...",
      "url": "https://gfx-rs.github.io/2018/12/27/this-year.html",
      "date_published": "2018-12-27T00:00:00+00:00",
      "author": {
        "name": "gfx-rs",
        "url": "https://gfx-rs.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "0a14c8b2-c25a-4733-9682-e1cc71567cc9",
      "title": "Handling failure in Rust",
      "content_text": "I’ve begun to seriously dig into the Rust programming language. The learning curve is real, but I already appreciate the work they’ve put into ergonomics. I’m writing a simple photo thumbnail endpoint using the Rocket web framework (v0.4) and Image library (v0.20.1). My first pass used a lot of unwrapping to ignore potential errors. A lot can go wrong, even in this “simple” case. Rocket catches any panics thrown by route handlers, so this is about as robust as a naive equivalent in most other languages. However, Rust at least forces us to be explicit and purposeful about when we want to be sloppy. This is great for a first quick and dirty pass, but we can do much better.",
      "url": "https://esimmler.com/handling-failure-in-rust/",
      "date_published": "2018-12-26T00:00:00+00:00",
      "author": {
        "name": "Erik Simmler",
        "url": "https://esimmler.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ae506c52-88d5-4803-ade0-610f083298ae",
      "title": "cargo-crev and Rust 2019 fearless code reuse",
      "content_text": "In my opinion, one of the biggest reasons why Rust is so productive is that it's a superb language for code reuse. Despite all these strengths, there's one problem that sticks out like a sore thumb: trust. Every additional dependency is another piece of code that could be buggy, or even malicious. And in my opinion, it's problem so serious, that is entirely blocking the untapped potential of code reuse in Rust.",
      "url": "https://dpc.pw/cargo-crev-and-rust-2019-fearless-code-reuse",
      "date_published": "2018-12-29T04:43:26+00:00",
      "author": {
        "name": "Dawid Ciężarkiewicz aka `dpc`",
        "url": "http://dpc.pw/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "c4069a09-be22-45a1-a39b-3067584379a8",
      "title": "Debugging Rust with VSCode on FreeBSD",
      "content_text": "The following is a set of notes for installing VSCode on FreeBSD and getting a debugger up and running in a step by step guide. I thought I would share them in a full post as having a full IDE with syntax and error highlighting along with detailed in-context explanations has been really useful as I get to grips with Rust.",
      "url": "https://venshare.com/debugging-rust-with-vscode-on-freebsd/",
      "tweet_url": "https://twitter.com/dhigit9/status/1078804399860928513",
      "date_published": "2018-12-28T23:56:37+00:00",
      "author": {
        "name": "Anton Whalley",
        "url": "https://venshare.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "5e9ee3df-617a-4a7c-b8bd-ade701971b10",
      "title": "Methods for Array Initialization in Rust",
      "content_text": "Arrays in Rust are fixed size, and Rust requires that every element in an array is initialized to a valid value when the array is initialized. The result of these requirements is array initialization in Rust is a much deeper topic then it would seem.",
      "url": "https://www.joshmcguigan.com/blog/array-initialization-rust/",
      "date_published": "2018-12-22T00:00:00+00:00",
      "author": {
        "name": "Josh Mcguigan",
        "url": "https://www.joshmcguigan.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "94213785-3a82-4f06-99ee-8477c184903c",
      "title": "Thoughts on Rust in 2019",
      "content_text": "This year is also a bit special; in 2018, we introduced “editions” to Rust, on a roughly three-year schedule. So now is not just a good time to think about 2019, but about 2020 and 2021 as well. Rust 2015 was about “stability”. Rust 2018 was about “productivity.” I’d like Rust 2021 to be about “maturity.” In order to get there, here’s what we need in 2019.",
      "url": "https://words.steveklabnik.com/thoughts-on-rust-in-2019",
      "tweet_url": "https://twitter.com/steveklabnik/status/1078306298138116096",
      "date_published": "2018-12-27T00:00:00+00:00",
      "author": {
        "name": "Steve Klabnik",
        "url": "https://words.steveklabnik.com/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "e72d0a8e-198f-4bd2-bf1e-7e0e94fac9d5",
      "title": "QADAPT - debug_assert! for your memory usage",
      "content_text": "I think it’s part of the human condition to ignore perfectly good advice when it comes our way. A bit over a month ago, I was dispensing sage wisdom for the ages: I had a really great idea: build a custom allocator that allows you to track your own allocations. I gave it a shot, but learned very quickly: never write your own allocator. I proceeded to ignore it, because we never really learn from our mistakes. There’s another part of the human condition that derives joy from seeing things explode. And that’s the part I’m going to focus on.",
      "url": "https://speice.io/2018/12/allocation-safety.html",
      "date_published": "2018-12-15T00:00:00-05:00",
      "author": {
        "name": "Bradlee Speice",
        "url": "https://speice.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "043f0bae-caa0-4d77-8336-9ec0813a0ca0",
      "title": "Easy Postgres extensions in Rust with pg-extend-rs",
      "content_text": "A project to make Postgres extensions in Rust easy, you might learn how to use macro_rules, attribute macros, allocators and some FFI in this post.",
      "url": "https://bluejekyll.github.io/blog/rust/2018/12/27/announcing-pg-extend.html",
      "date_published": "2018-12-27T07:00:00+00:00",
      "author": {
        "name": "Benjamin Fry",
        "url": "https://bluejekyll.github.io/blog/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "04d1c753-5242-4aa9-bff7-500a717a62bc",
      "title": "A Rusty Advent of Code",
      "content_text": "For the first time, I took part in the Advent of Code this year. If you haven't heard of it, it's a daily programming challenge that can be solved in any programming language. Rust was very present in the Advent of Code community with people contributing a ton of Rust-related content. In the daily solutions thread on the /r/aoc subreddit, there were always several Rust solutions posted. Advent of Code really helps show off the things that make Rust shine, demonstrating the power and utility of many community-created crates as well as the language itself.",
      "url": "https://cprimozic.net/blog/a-rusty-aoc/",
      "date_published": "2018-12-27T00:00:00+00:00",
      "author": {
        "name": "Casey Primozic",
        "url": "https://cprimozic.net/blog/"
      },
      "tags": [
        "Language",
        "Performance"
      ]
    },
    {
      "id": "fe9a3482-44e2-48d3-8728-0a15b4d2fd48",
      "title": "async-io-demo: Rust asynchronous io: from mio to stackless coroutine",
      "content_text": "2019 is approaching. The rust team keeps their promise about asynchronous IO: async is introduced as keywords, Pin, Future, Poll and await! is introduced into standard library. I have never used rust for asynchronous IO programming earlier, so I almost know nothing about it. However, I would use it for a project recently but couldn't find many documents that are remarkably helpful for newbie of rust asynchronous programming. My purpose of writing this blog is to review and summarize, I will be happy if it can help someone who are interested in rust asynchronous programming.",
      "url": "https://github.com/Hexilee/async-io-demo",
      "date_published": "2018-12-26T00:00:00+00:00",
      "author": {
        "name": "Li Chenxi",
        "url": "https://github.com/Hexilee"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4f647aa7-226f-4b30-b814-399284d59111",
      "title": "My Wish List For Rust 2019",
      "content_text": "For the first time, I’m writing for the Rust Roadmap blog posts call. Why this year? Maybe because after being part of the community for 3-ish years, I feel I’ve reached a level of knowledge of the language that allows me to talk about it. I’m far from being an expert, but I wrote an application of my own and I am contributing to Cobalt. Enough experience to give me some material to think about.",
      "url": "https://haurchefant.fr/posts/2018/12/my-wishlist-for-rust-2019/",
      "tweet_url": "https://twitter.com/geobomatic/status/1078679308330254337",
      "date_published": "2018-12-28T15:48:15+00:00",
      "author": {
        "name": "Geobert Quach",
        "url": "https://haurchefant.fr/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "53e4c3d4-a70a-4caa-a4c8-17be048c93df",
      "title": "Thoughts on Rust in 2019",
      "content_text": "2018 was a success with the stated goals of releasing “editions” and working on usability/ergonomics. My first encounter with Rust was pre-1.0 (early 2015) and I immediately saw that Rust would be my future, wherein I joked to colleagues that I’d use it to “make toasters talk”. Followed by a sizeable hiatus (lack of personal time), I came back mid-year 2018. I can say for certain that the focus on usability and ergonomics was successful. Rust is much easier to use now than it was then. Rust format (rustfmt), Rust language server (RLS), text editor support, cargo tooling, compiler messages, and ecosystem crates’ quality and diversity are all amazing. The community is crazy diverse (first language learners, experienced systems people, web-dev people, programming language theory people, etc…). The chaos is well-managed with self-organizing working groups.",
      "url": "https://medium.com/@bowlescompling/thoughts-on-rust-in-2019-6c0af39a6b76",
      "tweet_url": "https://twitter.com/jbowayles/status/1078694719692177408",
      "date_published": "2018-12-28T16:49:44.954+00:00",
      "author": {
        "name": "Josh Bowles",
        "url": "https://medium.com/@bowlescompling"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "89df3ecf-8eeb-4da6-9945-3d69b6095f5e",
      "title": "My Rust 2019 Dream: Dominate the Web",
      "content_text": "A lot of people already know Rust is a great systems language. It can be put on embedded, feels better than C/C++ in many ways, and concurrency is way better than it was before. It's almost no doubt that Rust will continue to grow in these realms. The opportunity I see Rust has to lose though, is being the defacto language of the future of serious web programming. The dream I see is Rust as the language every one uses to create backend, front end, and perhaps even the distributed web ( wasm distributed apps on blockchain implementations).",
      "url": "https://www.reddit.com/r/rust/comments/aac8zk/my_rust_2019_dream_dominate_the_web/?st=JQ8PQ5Z8&sh=3ad6032f",
      "date_published": "2018-12-29T00:04:23+00:00",
      "author": {
        "name": "u/richardanaya",
        "url": "https://www.reddit.com/user/richardanaya/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "3e7aead6-1e45-4897-8029-993214b6eb99",
      "title": "Rust 2019: The shift in Rust",
      "content_text": "This is my answer to the call for blogposts about what I’d like the year 2019 to mean for Rust.",
      "url": "https://vorner.github.io/2018/12/27/rust-2019.html",
      "date_published": "2018-12-27T00:00:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "1b761099-8ee4-4e1c-86b1-2aeac151507c",
      "title": "Rust 2019: Stabilization",
      "content_text": "If you’re familiar with the history of Rust you might be confused with a call to stabilization. After all, Rust 2015 (a.k.a 1.0) was all about stabilization and the team has actually done a pretty good job with achieving this goal. So what gives?\n\nWhile Rust 2015 defined stabilization around language backward compatibility, it’s time for the language, the tooling, the ecosystem and the governance to stabilize. Each of these characterize stability in a different way. Let me explain a bit more what I mean.",
      "url": "https://blog.ryanlevick.com/posts/rust-2019/",
      "date_published": "2018-12-19T00:00:00+00:00",
      "author": {
        "name": "Ryan Levick",
        "url": "https://blog.ryanlevick.com/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "aa59c999-cba6-4f20-80cc-888e8e257a73",
      "title": "gbl: A typestate-powered zero-copy crate for GBL firmware update files",
      "content_text": "After a few weeks of reverse-engineering, internal dogfooding, and API design discussion, we're finally publishing our gbl crate for good.\n\nThe library implements a parser and writer for GBL firmware update containers, which are used to perform secure OTA updates for certain microcontrollers.",
      "url": "https://blog.1aim.com/post/gbl-release/",
      "date_published": "2018-12-19T00:00:00+00:00",
      "author": {
        "name": "Jonas Schievink",
        "url": "https://blog.1aim.com/"
      },
      "tags": [
        "Embedded",
        "Security"
      ]
    },
    {
      "id": "164aa143-a832-491e-b1c0-304913959b8d",
      "title": "Serverless Rust: Revisited",
      "content_text": "A refreshing new story for running Rust on AWS Lambda.",
      "url": "https://medium.com/@softprops/serverless-rust-revisited-f2c79f4039bb",
      "tweet_url": "https://twitter.com/softprops/status/1076503843540586496",
      "date_published": "2018-12-22T15:43:04.617+00:00",
      "author": {
        "name": "Doug Tangren",
        "url": "https://medium.com/@softprops"
      },
      "tags": [
        "DevOps and Deployment"
      ]
    },
    {
      "id": "5a894193-9c56-4f80-8e38-546cadf5da44",
      "title": "Rust 2019: Ignorant Thoughts",
      "content_text": "I’ve written a single library in Rust, called Horned-OWL for manipulating OWL. The experience has been positive. There is already a good and complete library for manipulating OWL called the OWL API, so I needed a strong motivation for writing another. That motivation is simple: the OWL API is in Java and it is slow. Rust has fulfilled it’s promise for me; Horned-OWL is an order of magnitude faster thatn the OWL API. What have I learned from the experience though, and what could be improved?",
      "url": "http://www.russet.org.uk/blog/3207",
      "tweet_url": "https://twitter.com/phillord/status/1077128693561151489",
      "date_published": "2018-12-24T09:05:36+00:00",
      "author": {
        "name": "Phillip Lord",
        "url": "http://www.russet.org.uk/blog"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "f90bfac4-bbae-4d28-baec-d46eadb5e2cb",
      "title": "Rust in 2019",
      "content_text": "Rust made good progress in 2018: const fn in particular was a welcome and sorely needed feature. With #[panic_handler] now stable, we can finally write no_std binary crates on stable and not worry the next release will break it. We got some other useful features, including the following: u128, NonNull, fixed-length slice patterns, LTO, #[repr(transparent)], #[repr(align(_))] In 2019, I have one major wish for Rust: Const Generics.",
      "url": "https://blog.strake.me.uk/archives/93",
      "date_published": "2018-12-24T02:52:50+00:00",
      "author": {
        "name": "Strake",
        "url": "https://blog.strake.me.uk/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "1a96907b-61a3-4b4f-aba9-640a5b6ac00e",
      "title": "My wishlist for Rust ‘19",
      "content_text": "This isn’t exactly a blog so this won’t be exactly a “post”, but I’d like to write down my thoughts on this notepad answering the call for a wishlist for Rust 2019. Opinions expressed are from the point of view of an enthusiast, Rust apprentice, that happened to be knee-deep involved in organizing the RustFest in Rome. It’s fun to pin today some thoughts and see in 12 months how things will have evolved!",
      "url": "https://apiraino.github.io/2018/12/19/call-for-2019-roadmap.html",
      "date_published": "2018-12-19T00:00:00+01:00",
      "author": {
        "name": "apiraino",
        "url": "https://apiraino.github.io/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "0717e76b-2097-4ee0-87b1-5f6cffadbdf0",
      "title": "On Rust",
      "content_text": "Back in 2013, I started a series of posts on programming languages I found interesting. One of the languages I wanted to write about at that time was Rust. As often happens, life got in the way, and it’s only now, in the twilight of 2018 I’m coming round to a long overdue post.",
      "url": "https://dehora.net/journal/2018/12/23/on-rust",
      "date_published": "2018-12-23T16:34:59+00:00",
      "author": {
        "name": "Bill de hÓra",
        "url": "https://dehora.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "1155adc5-9d95-4185-97bb-742e3c0bd446",
      "title": "Rust 2019 and beyond: limits to (some) growth",
      "content_text": "This is a blog post (as solicited) about my suggestions for the Rust project in 2019 and beyond. I should note that I am speaking only for myself, not anyone else, and not even as a very active participant in Rust anymore. Moreover these suggestions, to a large extent, apply to many projects. Rust is just one case, but one that is currently doing some conscious year-end reflection. I should also note overall that I'm quite pleased by the trajectory of the Rust project and this suggestion is being made only in the spirit of keeping it healthy and on-track, avoiding some problems I observe developing in it, as a mostly-outsider these days.",
      "url": "https://graydon2.dreamwidth.org/263429.html",
      "tweet_url": "https://twitter.com/graydon_pub/status/1078044811607793664",
      "date_published": "2018-12-26T11:29:00+00:00",
      "author": {
        "name": "Graydon Hoare",
        "url": "https://graydon2.dreamwidth.org/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "525bee43-14cb-422e-8b91-58322a8d2c63",
      "title": "Rust for algorithms",
      "content_text": "How I decided to challenge myself and solve coding tasks using Rust",
      "url": "https://ilyabiz.com/2018/12/rust-for-algorithms/",
      "tweet_url": "https://twitter.com/IlyaBizyaev/status/1076945160448159749",
      "date_published": "2018-12-23T20:54:31+00:00",
      "author": {
        "name": "Ilya Bizyaev",
        "url": "https://ilyabiz.com/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "6aa36df9-001c-478b-830e-56e2b896303b",
      "title": "Rust & Python—A Gentle Comparison using Simple Neural Networks",
      "content_text": "A gentle comparison between Rust & Python from multiple perspectives against a small, relatively simple problem.",
      "url": "https://blog.digital-horror.com/rust-python-comparison/",
      "date_published": "2018-12-23T17:10:39+00:00",
      "author": {
        "name": "Juxhin Dyrmishi Brigjaj",
        "url": "https://blog.digital-horror.com/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "deb0916b-c8e3-47b1-b957-bfa8015b73ff",
      "title": "Six years with Rust",
      "content_text": "This past year was… intense. Rust 1.31 was basically Rust 2.0, at least in the marketing sense. I burned myself out getting the first edition of the book together for Rust 1.0, and I burned myself out getting the edition shipped.\n\nLet’s talk about the bad and the good. Bad first so we end on the high notes.",
      "url": "https://words.steveklabnik.com/six-years-with-rust",
      "tweet_url": "https://twitter.com/steveklabnik/status/1076338522691379200",
      "date_published": "2018-12-21T00:00:00+00:00",
      "author": {
        "name": "Steve Klabnik",
        "url": "https://words.steveklabnik.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "7dd6ca97-374d-4c01-86fb-f3fed29bb6f6",
      "title": "Visualizing Crates.io",
      "content_text": "Visualizing Rust's growing ecosystem through crates.io, Rust's central package repository.",
      "url": "https://8-p.info/visualizing-crates-io/",
      "tweet_url": "https://twitter.com/kzys/status/1076645174648856581",
      "date_published": "2018-12-23T12:06:00+00:00",
      "author": {
        "name": "Kazuyoshi Kato",
        "url": "https://8-p.info/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "f0df7d96-1aae-46ea-b454-d4d2ce7d3efd",
      "title": "Azure Functions written in Rust",
      "content_text": "A few days ago, we discussed how to write AWS Lambdas in Rust. Today, we’re going to learn how to create and deploy an Azure Function using Rust and the azure-functions-sdk library.",
      "url": "https://robertohuertas.com/2018/12/22/azure-function-rust/",
      "tweet_url": "https://twitter.com/robertohuertasm/status/1076648099995664384",
      "date_published": "2018-12-22T00:00:00+00:00",
      "author": {
        "name": "Roberto Huertas",
        "url": "https://robertohuertas.com/"
      },
      "tags": [
        "DevOps and Deployment"
      ]
    },
    {
      "id": "a4b9f89c-49bd-4910-b1c6-de1c0da5786c",
      "title": "Managing Rust Dependencies with Nix, Part I",
      "content_text": "Learn how to integrate Rust Cargo package manager with the Nix package manager.",
      "url": "https://www.hadean.com/blog/managing-rust-dependencies-with-nix-part-i",
      "tweet_url": "https://twitter.com/AetherEngine/status/1076152002550337537",
      "date_published": "2018-11-15T16:03:00+00:00",
      "author": {
        "name": "James Kay",
        "url": "https://www.hadean.com/blog"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "1c724779-9e18-4c1a-94db-7799f444f6b3",
      "title": "Rust2019",
      "content_text": "It’s the time year to reflect on the past and to make wishful prospects for the future.",
      "url": "https://medium.com/@softprops/rust2019-83ebfe46602e",
      "tweet_url": "https://twitter.com/softprops/status/1075991736772481024",
      "date_published": "2018-12-21T05:47:42.351+00:00",
      "author": {
        "name": "Doug Tangren",
        "url": "https://medium.com/@softprops"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "e01f334f-a14e-4a54-b7d7-76c9cc6ccdc7",
      "title": "Procedural Macros in Rust 2018",
      "content_text": "Perhaps my favorite feature in the Rust 2018 edition is procedural macros. Procedural macros have had a long and storied history in Rust (and will continue to have a storied future!), and now is perhaps one of the best times to get involved with them because the 2018 edition has so dramatically improved the experience both defining and using them.\n\nHere I'd like to explore what procedural macros are, what they're capable of, notable new features, and some fun use cases of procedural macros. I might even convince you that this is Rust 2018's best feature as well!",
      "url": "https://blog.rust-lang.org/2018/12/21/Procedural-Macros-in-Rust-2018.html",
      "tweet_url": "https://twitter.com/rustlang/status/1076175678075211776",
      "date_published": "2018-12-21T00:00:00+00:00",
      "author": {
        "name": "Alex Crichton",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "db72fed1-63a5-41eb-868f-716f694cd52e",
      "title": "Rust 2019 -- Correctness and stabilizations",
      "content_text": "Last year for Rust 2018 I didn’t write a post like this, hoping to see other people write it. But even with a hundred plus posts that didn’t happen, so this year it’s the moment to speak up. I have used many different languages in past and when I started studying Rust at version 1.0 I was quickly impressed by its very good design, I was mostly in agreement with most of its design decisions, despite every useful language has a messy implementation. Even small things were designed with care. And I loved how much Rust cares for code correctness. I prefer to avoid long debug sessions and to use more time in the design and coding phases. So I’ve kept learning and using it ever since. For 2019 and beyond I’d like Rust to keep working on finishing its many unfinished parts.",
      "url": "https://internals.rust-lang.org/t/rust-2019-correctness-and-stabilizations/8991",
      "date_published": "2018-12-09T11:38:40+00:00",
      "author": {
        "name": "leonardo",
        "url": "http://www.fantascienza.net/leonardo/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "5bfa329e-1d71-4b98-af03-90c1672ebb8b",
      "title": "How to Become a Rust Super-developer",
      "content_text": "This is an article and a tutorial about stumbling and failing. It is about trying hard, and giving up - just to start all over again. All for the one goal - becoming the master of coding in Rust.",
      "url": "https://hashnode.com/post/how-to-become-a-rust-super-developer-cjpv1ee7e000buhs2aqrdw2ym",
      "tweet_url": "https://twitter.com/hashnode/status/1075375952614412289",
      "date_published": "2018-12-19T00:00:00+00:00",
      "author": {
        "name": "Marco Alka",
        "url": "https://hashnode.com/@maruru"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "8aa85a12-b1d3-4e8d-a2b9-39356878a151",
      "title": "Analyze disk usage with dutree",
      "content_text": "dutree is a command line tool to analyze disk usage.",
      "url": "https://ownyourbits.com/2018/03/25/analyze-disk-usage-with-dutree/",
      "date_published": "2018-03-25T16:10:54+00:00",
      "author": {
        "name": "nachoparker",
        "url": "https://ownyourbits.com/author/cisquero_admin/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "8abe1072-74b2-4cc8-b349-ba38a3bfae1b",
      "title": "A great 2018, an even better 2019",
      "content_text": "A year ago, Tokio was a very different library. It includes the (now deprecated) tokio-core which provided a future executor, I/O selector, and basic TCP/UDP types in a single library. It also included tokio-proto, but we won't talk about that. Over the past year, Tokio has grown to become Rust's asynchronous I/O platform. It has been adopted by a number of large companies to build apps.",
      "url": "https://tokio.rs/blog/2018-12-recap-2018/",
      "tweet_url": "https://twitter.com/tokio_rs/status/1075452710432890881",
      "date_published": "2018-12-19T00:00:00+00:00",
      "author": {
        "name": "Carl Lerche",
        "url": "https://tokio.rs/blog/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "72e699cc-6b46-4f3b-9295-fef767681af8",
      "title": "RTFM v0.4: +stable, software tasks, message passing and a timer queue",
      "content_text": "Today I’m pleased to announce v0.4.0 of the Real Time for The Masses framework (AKA RTFM), a concurrency framework for building real time applications. This release also packs quite a few new features which I’ll briefly cover in this post. For a more throughout explanation of RTFM’s task model and its capabilities check out the RTFM book, which includes examples you can run on your laptop (yay for emulation), and the API documentation.",
      "url": "https://blog.japaric.io/rtfm-v4/",
      "tweet_url": "https://twitter.com/japaricious/status/1075449059408777221",
      "date_published": "2018-12-19T00:00:00+00:00",
      "author": {
        "name": "Jorge Aparicio",
        "url": "http://blog.japaric.io/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "3edd04cc-9a58-4b57-ab93-d948575875d9",
      "title": "Rust 2019: Bootstrapping Minorities",
      "content_text": "As a response of https://blog.rust-lang.org/2018/12/06/call-for-rust-2019-roadmap-blogposts.html 3 for tooling improvement. Nice to see rust improved so much these few years on productivity but I think there is room for improvement. This would be my first post about Rust after hanging around for quite some time.",
      "url": "https://internals.rust-lang.org/t/rust-2019-bootstrapping-minorities/9053",
      "date_published": "2018-12-18T14:08:45+00:00",
      "author": {
        "name": "Ivan Tham",
        "url": "https://pickfire.tk/posts"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "2bc063a6-80f5-4f7b-aea3-329ceef00a8e",
      "title": "Rust 2019",
      "content_text": "The Rust team encouraged people to write blog posts reflecting on Rust in 2018 and proposing goals and directions for 2019. Here’s mine. This is knowingly blatantly focused on the niche that is immediately relevant to my work. I don’t even pretend this to represent any kind of overall big picture.",
      "url": "https://hsivonen.fi/rust2019/",
      "tweet_url": "https://twitter.com/hsivonen/status/1073555602339708929",
      "date_published": "2018-12-14T00:00:00+00:00",
      "author": {
        "name": "Henri Sivonen",
        "url": "https://hsivonen.fi/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "62aed63f-688e-45cd-9d1e-5247b3cbeae3",
      "title": "encoding_rs: a Web-Compatible Character Encoding Library in Rust",
      "content_text": "encoding_rs is a high-decode-performance, low-legacy-encode-footprint and high-correctness implementation of the WHATWG Encoding Standard written in Rust. In Firefox 56, encoding_rs replaced uconv as the character encoding library used in Firefox. This wasn’t an addition of a component but an actual replacement: uconv was removed when encoding_rs landed. This writeup covers the motivation and design of encoding_rs, as well as some benchmark results.",
      "url": "https://hsivonen.fi/encoding_rs/",
      "tweet_url": "https://twitter.com/hsivonen/status/1069583662960783367",
      "date_published": "2018-12-03T00:00:00+00:00",
      "author": {
        "name": "Henri Sivonen",
        "url": "https://hsivonen.fi/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "7ebb05f4-2bc2-4637-b38d-fd29d4a1cc3c",
      "title": "Rust 2019: Technical Debt, Continued Productivity, and Stability",
      "content_text": "I hope this post doesn't come across as a laundry list of stuff to do. Mainly, I consider a lot of this to be technical debt, and I would like to see it paid down a bit. Most of them also happen to be pain points that I have come across in my own usage of Rust, so perhaps I'm biased! Feel free to let me know...",
      "url": "https://gist.github.com/mark-i-m/2c3508ab7a9f2c48f634f0b5da3bb000",
      "date_published": "2018-12-11T23:47:53+00:00",
      "author": {
        "name": "@mark-i-m",
        "url": "https://gist.github.com/mark-i-m"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "f848772a-4132-4e4f-b817-c4a6dec365b7",
      "title": "Making Rust Float Parsing Fast and Correct",
      "content_text": "Previously, I wrote about how Rust parsing is atypically slow comparing Rust's libcore implementation to a rudimentary parser I wrote. However, as others noted, the comparison was fairly limited. It didn't compare Rust's implementation to other implementations, such as glibc's strtod or Go's ParseFloat. The parser I implemented wasn't correct, it led to rounding error for most representations, by using floats for intermediate values. Furthermore, the comparisons used data unlikely to be encountered in real-world datasets, overstating the performance differences by forcing Rust to use slower algorithms. So, naturally, I aimed to address all these concerns. And finally, I forgot to disable CPU scaling, meaning CPU throttling could have led to inconsistent benchmarks.",
      "url": "https://www.reddit.com/r/rust/comments/a6j5j1/making_rust_float_parsing_fast_and_correct/",
      "date_published": "2018-12-16T08:39:39+11:00",
      "author": {
        "name": "u/ialex32_2",
        "url": "https://www.reddit.com/user/ialex32_2/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "3f750cea-55f1-44cf-b965-b3a2803de32b",
      "title": "Creating an empty iterator of a certain type in Rust",
      "content_text": "I am working these days on the development of offst's Index server. I needed to implement a basic directed graph structure, allowing to run the BFS algorithm to find routes with a certain amount of capacity. During the work on the Index server I had the problem of wanting to return an empty iterator in an early flow of a function.",
      "url": "https://www.freedomlayer.org/offst/option-iterator/",
      "date_published": "2018-12-15T00:00:00+00:00",
      "author": {
        "name": "Freedomlayer",
        "url": "https://www.freedomlayer.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "bf6eb06b-346b-4f0c-a294-ee1dde663418",
      "title": "Rust Analyzer in 2018 and 2019",
      "content_text": "Hi! I am Aleksey Kladov (aka @matklad). In the past, I've worked at Jet Brains where I've helped to create the IntelliJ Rust plug-in, and now I am a part of the Ferrous Systems team.\n\nI've spent a significant amount of the last year experimenting with various approaches to make the Rust IDE story better. The culmination of my experiments is the rust-analyzer project – an experimental Rust compiler frontend, targeting the IDE/Language Server Protocol use case.",
      "url": "https://ferrous-systems.com/blog/rust-analyzer-2019/",
      "tweet_url": "https://twitter.com/FerrousSystems/status/1074272931818041344",
      "date_published": "2018-12-15T00:00:00+00:00",
      "author": {
        "name": "Aleksey Kladov",
        "url": "https://ferrous-systems.com/blog/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "f0adf24b-6589-4306-a580-6cef894ad3b7",
      "title": "Organizational Debt",
      "content_text": "We all know that classic aphorism: Year comes to an end, Rust blog post press send. This is mine.\n\nThere are lots of cool technical improvements to Rust that I want the project to achieve this year, and a few in particular that I’m definitely going to be putting a lot of time into. But this blog post is going to talk about none of them. Instead, I want to talk about organizational debt, and how badly the Rust project needs to deal with it in 2019.",
      "url": "https://boats.gitlab.io/blog/post/rust-2019/",
      "tweet_url": "https://twitter.com/withoutboats/status/1074361605339652096",
      "date_published": "2018-12-16T00:00:00+00:00",
      "author": {
        "name": "withoutboats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "94ad8d78-4b62-41ff-86c3-44690a1dbf66",
      "title": "My thoughts on Rust 2019",
      "content_text": "Recently, the Rust Core Team solicited blog posts on where Rust should be headed in 2019. Here’s mine.",
      "url": "https://raphlinus.github.io/rust/2018/12/16/rust-2019.html",
      "date_published": "2018-12-16T14:55:42+00:00",
      "author": {
        "name": "Raph Levien",
        "url": "https://raphlinus.github.io/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "629810d5-0f02-4ef1-9826-32cd4bc2f048",
      "title": "Tools in the 2018 edition",
      "content_text": "In this blog post I'll cover Clippy and Rustfmt – two tools that have been around for a few years and are now stable and ready for general use. I'll also cover IDE support – a key workflow for many users which is now much better supported. I'll start by talking about Rustfix, a new tool which was central to our edition migration plans.",
      "url": "https://blog.rust-lang.org/2018/12/17/Rust-2018-dev-tools.html",
      "date_published": "2018-12-17T00:00:00+00:00",
      "author": {
        "name": "The Dev-tools team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "8d54d930-66a9-438f-8dad-de13e2fe8c3c",
      "title": "Rust 2019: Go Slow",
      "content_text": "I have many technical wishes for Rust, the language, in 2019. However, I’m not going to mention any in particular in this post. In fact, I can almost say that I’d prefer for there to not be a focus on achieving technical milestones in the next year.",
      "url": "https://blog.hwc.io/posts/rust-2019/",
      "date_published": "2018-12-16T15:39:32-05:00",
      "author": {
        "name": "hwc",
        "url": "https://blog.hwc.io/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "34b69da0-cd61-4a16-8bfe-21d8d98dd4bd",
      "title": "Rust 2019",
      "content_text": "This is a bit of a brain dump of my thoughts about Rust 2019. Mainly I work on my own code coverage tool tarpaulin, embedded rust and random little tools. So my perspective will be coloured by this.",
      "url": "https://gist.github.com/xd009642/083a689c1fe460459d6bc792a626604e",
      "date_published": "2018-12-16T15:22:21+00:00",
      "author": {
        "name": "xd009642",
        "url": "https://gist.github.com/xd009642"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "f11f3bca-353a-4c96-b50d-7a28acb0d7ec",
      "title": "Intermission",
      "content_text": "Things I would like prioritized in the 2019 roadmap: Reduced Compilation Times, Refined Tools.",
      "url": "https://azriel.im/will/2018/12/18/intermission/",
      "date_published": "2018-12-18T11:31:13+13:00",
      "author": {
        "name": "Azriel Hoh",
        "url": "https://azriel.im/will"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "f12043be-3b2d-4ab3-8ce1-51463ffad905",
      "title": "Rust and WebAssembly in 2019",
      "content_text": "Compiling Rust to WebAssembly should be the best choice for fast, reliable code for the Web. Additionally, the same way that Rust integrates with C calling conventions and libraries on native targets, Rust should also integrate with JavaScript and HTML5 on the Web. These are the Rust and WebAssembly domain working group’s core values. In 2018, we made it possible to surgically replace performance-sensitive JavaScript with Rust-generated WebAssembly. I propose that we make larger-scale adoption of Rust and WebAssembly practical in 2019.",
      "url": "http://fitzgeraldnick.com/2018/12/14/rust-and-webassembly-in-2019.html",
      "tweet_url": "https://twitter.com/fitzgen/status/1073703094771273728",
      "date_published": "2018-12-14T00:00:00-08:00",
      "author": {
        "name": "Nick Fitzgerald",
        "url": "http://fitzgeraldnick.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "0ee5d609-1891-4f10-9085-93696f564382",
      "title": "Kubernetes config management in Rust",
      "content_text": "At babylon health we have a ton of microservices running on kubernetes that are, in turn, controlled by hundreds of thousands of lines of autogenerated yaml. So for our own sanity, we built shipcat - a standardisation tool (powered by rust-lang and serde) to control the declarative format and lifecycle of every microservice.",
      "url": "https://clux.github.io/probes/post/2018-12-15-config-management-in-rust/",
      "date_published": "2018-12-15T00:00:00+00:00",
      "author": {
        "name": "clux",
        "url": "https://clux.github.io/probes/"
      },
      "tags": [
        "DevOps and Deployment"
      ]
    },
    {
      "id": "733eb57b-95f6-490b-b3aa-ba223cacb0f5",
      "title": "Rust Raps - Ferris Crab (Rust Raps 2018 Edition)",
      "content_text": "Just released: the hot new single “Ferris Crab (Rust Raps 2018 Edition)” by Rusta Rhymes off their upcoming debut album impl Drop for Mic {}.",
      "url": "http://fitzgeraldnick.com/2018/12/13/rust-raps.html",
      "tweet_url": "https://twitter.com/fitzgen/status/1073341961023545344",
      "date_published": "2018-12-13T00:00:00-08:00",
      "author": {
        "name": "Rusta Rhymes",
        "url": "http://fitzgeraldnick.com/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "d4acf845-6f69-4f54-bd37-96d62f83a54c",
      "title": "Yet another Rust 2018 wishlist",
      "content_text": "The 2018 year brought a lot of incredible new features and I'm impressed with all the work that was put in to make the 2018 edition happen. I want to join the other users asking for 2019 to be a year we adjust to all the new changes and focus on cleaning and polishing, not entirely new projects*. For the upcoming year I'd like to see progress on compilation speed and maintenance attention in the library ecosystem.",
      "url": "https://www.reddit.com/r/rust/comments/a5q7eb/yet_another_rust_2018_wishlist/",
      "date_published": "2018-12-13T15:38:32+11:00",
      "author": {
        "name": "u/Saefroch",
        "url": "https://www.reddit.com/user/Saefroch"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "dd6ec508-904b-4cd2-96ca-3df2ed99b074",
      "title": "Rust 2019 - my 2¢",
      "content_text": "I will not be really original here, but I really hope to see the following features to land on stable in 2019: const generics, async/await, GATs, inherent traits, minimum supported Rust version:",
      "url": "https://www.reddit.com/r/rust/comments/a5s024/rust_2019_my_2/",
      "date_published": "2018-12-13T20:24:49+11:00",
      "author": {
        "name": "u/newpavlov",
        "url": "https://www.reddit.com/user/newpavlov"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a02deaa2-0f75-48c6-86ef-f6a314be6355",
      "title": "Rust 2019",
      "content_text": "In 2019, there are three areas where I would like to see the Rust community focus its efforts: Improved compile times, A community effort to review crates, More “80% solutions”.",
      "url": "https://vfoley.xyz/rust-2019/",
      "date_published": "2018-12-09T00:00:00+00:00",
      "author": {
        "name": "Vincent Foley",
        "url": "http://vfoley.xyz/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c02900f4-a733-4865-980c-3c139ffe0ac8",
      "title": "Storing unboxed trait objects in Rust",
      "content_text": "This blog post will outline the creation of dynstack, a stack datastructure that stores trait objects unboxed to minimize the number of heap allocations necessary.",
      "url": "https://guiand.xyz/blog-posts/unboxed-trait-objects.html",
      "date_published": "2018-11-10T00:00:00+00:00",
      "author": {
        "name": "Gui Andrade",
        "url": "https://guiand.xyz/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "9e8f8e34-8fe9-4b4b-b40a-970e0a85a993",
      "title": "Sinistersnare's Rust 2019 Wishlist",
      "content_text": "Rust needs to focus on less glamorous features in 2019. We have added a lot of great features since 1.0, but we need to address the warts that we have had for a long time. I mostly echo sentiments from Jonathan Turner, Nathan Vegdahl, and many others in my ‘fallow-year’ sentiments. Overall, Compilation speed and generic constants are my two most wished-for features. On top of that, I would like to see more ecosystem work to make embedded applications more feasible and easy to use. Finally, Rust needs a moratorium on adding syntactic sugar for 2019.",
      "url": "https://drs.is/post/rust-wishlist-2019/",
      "date_published": "2018-12-12T08:10:44-05:00",
      "author": {
        "name": "Davis Ross Silverman",
        "url": "https://drs.is/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "fde9a5b7-9e92-41aa-994a-15bdb87d2909",
      "title": "My Wishes for Rust 2019",
      "content_text": "2018 was a massive year for rust, and it's great to reflect back on how far we've all come. My main wish for the new year is to put on the breaks a little bit, and finish off what has been started without taking on anything majorly new.",
      "url": "https://cetra3.github.io/blog/rust-2019/",
      "date_published": "2018-12-14T00:00:00+00:00",
      "author": {
        "name": "cetra3",
        "url": "https://github.com/cetra3/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "6bf8dccd-51b6-4dcb-a9eb-e38923d28a2c",
      "title": "Bootstrapping Rust",
      "content_text": "It has been a long-standing tradition to develop a language far enough to be able to write the language's compiler in the same language, and Rust does the same. Rust is nowadays written in Rust. We've tracked down the earlier Rust versions, which were written in OCaml, and were planning to use these to bootstrap Rust. But in parallel, John Hudge (Mutabah) developed a Rust compiler, called \"mrustc\", written in C++. mrustc is now good enough to compile Rust 1.19.0. Using mrustc, we were able to build Rust entirely from source with a bootstrap chain",
      "url": "https://www.gnu.org/software/guix/blog/2018/bootstrapping-rust/",
      "date_published": "2018-12-11T00:00:00+00:00",
      "author": {
        "name": "Danny Milosavljevic",
        "url": "https://www.gnu.org/software/guix/blog/"
      },
      "tags": [
        "Language",
        "Operating Systems"
      ]
    },
    {
      "id": "53c9e07b-f4d5-423f-8a84-05e119814fda",
      "title": "Async in Rust, circa 2018",
      "content_text": "Rust 2018 has shipped, and we’re closing in on the end of the year. While we didn’t manage to ship async/await as part of the edition itself, the community has made quite a lot of progress toward that goal. This post summarizes the state of play, and announces the publication of several crates intended to facilitate use of async/await on the nightly ecosystem.",
      "url": "https://rust-lang-nursery.github.io/wg-net/2018/12/13/async-update.html",
      "tweet_url": "https://twitter.com/RustNetWG/status/1073252878578577410",
      "date_published": "2018-12-13T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "https://rust-lang-nursery.github.io/wg-net/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "108e3952-7d7b-4fcc-9c76-073646f2ddee",
      "title": "Generating Sudoku Boards pt. 3: Rust for WebAssembly",
      "content_text": "Adjusting an existing Rust project to build a native binary and library for WASM, load in JS. Details on working through build issues.",
      "url": "https://medium.com/@rossharrison/generating-sudoku-boards-pt-3-rust-for-webassembly-85bd7294c34a",
      "date_published": "2018-11-26T00:18:40.579+00:00",
      "author": {
        "name": "Ross Harrison",
        "url": "https://medium.com/@rossharrison"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "c1576100-8199-418d-bd9a-03c71f1b5559",
      "title": "Serverless HTTP in Rust",
      "content_text": "Throw down your main! Rustlang Serverless HTTP applications won’t need them where they’re going",
      "url": "https://medium.com/@softprops/serverless-http-9a58f9b2df60",
      "date_published": "2018-11-28T11:11:52.987+00:00",
      "author": {
        "name": "Doug Tangren",
        "url": "https://medium.com/@softprops"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "00a3f85a-45c7-42b3-8fac-605dcb945229",
      "title": "Writing MapReduce Jobs Using Rust and Efflux",
      "content_text": "During my work life, I spend a lot of time working with MapReduce-style workflows, particularly with Hadoop infrastructure. A lot of this work is spent with larger amounts of data in order to implement the batch layer of the Lambda architecture. Due to this, the largest concern is that the behaviour is consistent across both the batch layer and the realtime layer - naturally you wouldn't want sporadic behaviour across the two. The easiest way to do this is to share code across the layers, to avoid having to keep implementations in sync. We have recently been working with Rust, which has been a little difficult to integrate with Hadoop MapReduce flows due to the fact it's mainly written in Java. It's because of this that I began to work on a small library named Efflux. It's designed as a very small interface to the MapReduce pattern, and implemented in Rust to allow us to share code across the batch layer easily.",
      "url": "https://whitfin.io/writing-mapreduce-jobs-using-rust/",
      "date_published": "2018-11-28T07:00:49+00:00",
      "author": {
        "name": "Isaac Whitfield",
        "url": "https://whitfin.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "823c892a-d7a2-4185-b80f-ba0b47899b25",
      "title": "How I Wrote a Modern C++ Library in Rust",
      "content_text": "Since version 56, Firefox has had a new character encoding conversion library called encoding_rs. It is written in Rust and replaced the old C++ character encoding conversion library called uconv that dated from early 1999. Initially, all the callers of the character encoding conversion library were C++ code, so the new library, despite being written in Rust, needed to feel usable when used from C++ code. In fact, the library appears to C++ callers as a modern C++ library. Here are the patterns that I used to accomplish that.",
      "url": "https://hsivonen.fi/modern-cpp-in-rust/",
      "tweet_url": "https://twitter.com/hsivonen/status/1069583686352465920",
      "date_published": "2018-12-03T00:00:00+00:00",
      "author": {
        "name": "Henri Sivonen",
        "url": "https://hsivonen.fi/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "36dce8e1-2508-4e34-8aaf-1eb43a8b17e1",
      "title": "Building Alexa Skills in Rust",
      "content_text": "My favorite way to explore Lambdas is to build Alexa skills because of the immediate feedback: you write a little code, and a home device talks to you. It’s a peek into the long promised of world of easy service composition.\n\nUnfortunately, Rust didn’t have complete Alexa skill request/response handling (there is a crate from 2 years ago that handled only the basics), so I wrote one called alexa_sdk. (It’s basically a struct plus serde wrapper around the Alexa JSON spec, with some helpers.",
      "url": "https://medium.com/@amalec/building-alexa-skills-in-rust-4cf54a497ea4",
      "date_published": "2018-12-09T21:30:38.780+00:00",
      "author": {
        "name": "Arien Malec",
        "url": "https://medium.com/@amalec"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "dcaa5235-2614-4f61-b0b4-8b1f2e0d136e",
      "title": "Lokathor's Rust 2019 wishpost",
      "content_text": "Recently I've been using Rust for GBA development (repo link), and before that I spent most of my Rust time with Handmade Hero work (the actual repo is private to handmade hero backers, so that link is just the main website). As you might expect, this has given me a quite different view of what I want to see from Rust. Basically, I don't want more crates. I want language, and tools, and most importantly education.",
      "url": "https://www.reddit.com/r/rust/comments/a4ygji/lokathors_rust_2019_wishpost",
      "date_published": "2018-12-11T05:47:42+11:00",
      "author": {
        "name": "u/Lokathor",
        "url": "https://www.reddit.com/user/Lokathor/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "2fdb4722-43ce-4bad-b37e-67dae34eecb2",
      "title": "Positive-Sum Games",
      "content_text": "One thing I learned from Aaron Turon is to search for positive-sum games. First what does that even mean? In most arguments you may run into, it will be easy to find a zero-sum game: Your win is my loss and vice versa. However, in many situations, it is actually possible to go above those petty games and find a variant that allows us both to win.",
      "url": "https://llogiq.github.io/2018/12/11/sum.html",
      "tweet_url": "https://twitter.com/llogiq/status/1072369443873964032",
      "date_published": "2018-12-11T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "78791a3b-395e-4d3b-b091-66aa2fa2c577",
      "title": "Edge programming with Rust and WebAssembly",
      "content_text": "Take a developer deep dive into Terrarium, our multi-language, browser-based editor and deployment platform at the edge. Learn how to compile Rust programs to WebAssembly right on your local machine, interact with the Terrarium system, and explore some applications we’ve built with it.",
      "url": "https://www.fastly.com/blog/edge-programming-rust-web-assembly",
      "tweet_url": "https://twitter.com/fastly/status/1072933529435045888",
      "date_published": "2018-12-12T16:00:00+00:00",
      "author": {
        "name": "Pat Hickey",
        "url": "https://www.fastly.com/blog"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "a884801e-f80b-4ea4-8441-a86c2c736086",
      "title": "Rust 2019 - It's the Little Things",
      "content_text": "This might be an uncommon opinion—especially among those motivated enough to write a Rust 2019 post—but I actually think Rust is pretty much at a good place now. For the kinds of things that I want to do (e.g. my path tracer), there isn't much that Rust is lacking as a language. There are some fiddly things like \"placement new\" that could be useful, but nothing really major. And of course, well-designed new features are always welcome, they just don't seem particularly critical to me at this point. In other words, I'm pretty much satisfied. Mission accomplished, as far as I'm concerned. I think the rest is just polish. Just the little things.",
      "url": "https://blog.cessen.com/post/2018_12_12_rust_2019_its_the_little_things",
      "date_published": "2018-12-12T00:00:00+00:00",
      "author": {
        "name": "Nathan Vegdahl",
        "url": "https://blog.cessen.com/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "c0d67320-edd6-4eef-b345-bbf3288acaae",
      "title": "Rust 2019: Think Bigger",
      "content_text": "Rust shines when we find ways to have our cake and eat it too: memory safety without runtime garbage collection, abstraction without overhead, threading without data races. We must find new ways to continue this tradition for Rust 2019 and beyond.",
      "url": "http://fitzgeraldnick.com/2018/12/11/rust-2019-think-bigger.html",
      "tweet_url": "https://twitter.com/fitzgen/status/1072627383113605120",
      "date_published": "2018-12-11T00:00:00-08:00",
      "author": {
        "name": "Nick Fitzgerald",
        "url": "http://fitzgeraldnick.com/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "fd9c743c-fb89-4e75-8a46-a837c02174a1",
      "title": "Implementing an EBNF grammar in pest",
      "content_text": "A recent project has led me to have a go at writing an XML parser. I thought I’d document my experiences using pest to implement a lexer using the EBNF-esque formal grammar.",
      "url": "https://compenguy.github.io/hobbies/rust/ebnf-to-pest.html",
      "date_published": "2018-11-22T05:46:00+11:00",
      "author": {
        "name": "Will Page",
        "url": "https://compenguy.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "00b55ed6-da3d-4c6a-90ed-ebea6191afd8",
      "title": "Dynamically Generating Dockerfiles for K8s",
      "content_text": "Hello everyone! Today I am excited to announce that DocQL is open-sourcing a Rust crate (a library) which we built internally called…",
      "url": "https://medium.com/docql/dynamically-generating-dockerfiles-for-k8s-d2baf7bfef5a",
      "tweet_url": "https://twitter.com/DocQLio/status/1072221552752713728",
      "date_published": "2018-12-10T19:43:10.002+00:00",
      "author": {
        "name": "Anthony Dodd",
        "url": "https://medium.com/@doddzilla0"
      },
      "tags": [
        "DevOps and Deployment"
      ]
    },
    {
      "id": "9e21d91f-ef59-43f5-98c9-ba96d003fcb3",
      "title": "Rocket v0.4: Typed URIs, Database Support, Revamped Queries, & More!",
      "content_text": "I am elated to announce that the next major release of Rocket is now available! Rocket 0.4 is a step forward in every direction: it is packed with features and improvements that increase developer productivity, improve application security and robustness, provide new opportunities for extensibility, and deliver a renewed degree of toolchain stability.",
      "url": "https://rocket.rs/v0.4/news/2018-12-08-version-0.4/",
      "date_published": "2018-12-08T00:00:00+00:00",
      "author": {
        "name": "Sergio Benitez",
        "url": "https://rocket.rs/news"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "4fe3c55c-a091-40c2-ada0-8c5d371afc31",
      "title": "Existential types in Rust",
      "content_text": "The Rust project I am working on is a caching layer, currently backed by Redis, and it came to a point where I needed to leverage pipelining. On its own, pipelining is straightforward as the redis crate implements it already. However all notions of a cache in our code are abstracted out behind a trait so we can have alternative implementations, such as an in-memory HashMap-backed implementation.\n\nThe problem arises with representing the pipeline in code. It would force any implementation of our cache to Redis’s notion of a pipeline. Not only would this make it difficult to introspect during testing, but it would also be nonsensical for our HashMap-backed cache. My usual answer to this in languages that support higher-kinded types is to use tagless-final algebras, but Rust’s type system currently doesn’t support higher-kinded types1. Fortunately, there is a pretty good alternative that Rust does support: existential types.",
      "url": "https://adelbertc.github.io/posts/2018-12-10-rust-existentials.html",
      "tweet_url": "https://twitter.com/adelbertchang/status/1072166361600712712",
      "date_published": "2018-12-10T00:00:00+00:00",
      "author": {
        "name": "Adelbert Chang",
        "url": "https://adelbertc.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4259e940-d508-4de3-8971-3c3df7b30f98",
      "title": "Rust in 2022",
      "content_text": "A response to the call for 2019 roadmap blog posts. In case you missed it, we released our second edition of Rust this year! An edition is an opportunity to make backwards incompatible changes, but more than that it's an opportunity to bring attention to how programming in Rust has changed. With the 2018 edition out of the door, now is the time to think about the next edition: how do we want programming in Rust in 2022 to be different to programming in Rust today? Once we've worked that out, lets work backwards to what should be done in 2019.",
      "url": "https://www.ncameron.org/blog/rust-in-2022/",
      "tweet_url": "https://twitter.com/nick_r_cameron/status/1072349233221722112",
      "date_published": "2018-12-11T04:34:31+00:00",
      "author": {
        "name": "Nick Cameron",
        "url": "http://www.ncameron.org/blog/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "20ba5c8d-b4f2-4ae5-af75-7631ccc05f12",
      "title": "cargo-inspect: A Little Tool for Exploring Rust Internals",
      "content_text": "Rust allows for a lot of syntactic sugar, that makes it a pleasure to write. It is sometimes hard, however, to look behind the curtain and see what the compiler is really doing with our code. I wondered if there was a tool, which revealed what Rust was doing behind the curtains.",
      "url": "https://matthias-endler.de/2018/cargo-inspect/",
      "tweet_url": "https://twitter.com/matthiasendler/status/1069642732761698305",
      "date_published": "2018-12-01T00:00:00+00:00",
      "author": {
        "name": "Matthias Endler",
        "url": "https://matthias-endler.de/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "f8aa1176-9ae2-447f-b914-a6950612d7f2",
      "title": "8 Lessons from First Days of Advent of Code 2018",
      "content_text": "I’ve got two days of Advent of Code 2018 under my belt and four stars to show for it! But I’ll be the first to admit that I had plenty of help, so I thought it only fair that I write out some of the things I’ve already learned about Rust.",
      "url": "https://sts10.github.io/2018/12/02/lessons-from-first-two-days-of-advent-of-code-2018.html",
      "date_published": "2018-12-02T23:22:00+00:00",
      "author": {
        "name": "Sam Schlinkert",
        "url": "https://sts10.github.io/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "05addab4-8c30-4a75-9221-e156ea5d319c",
      "title": "Announcing RustaCUDA v0.1.0",
      "content_text": "In my post on GPGPU in Rust, I declared that I intended to work on improving the state of CUDA support in Rust. Since then, I’ve been mostly radio-silent. I’m pleased to announce that I have actually been working on something, and I’ve finally published that something.\nRustaCUDA RustaCUDA is a new wrapper crate for the CUDA driver API. It allows the programmer to allocate and free GPU memory, copy data to and from the GPU, load CUDA modules and launch kernels, all with a mostly-safe, programmer-friendly, Rust-y interface.",
      "url": "https://bheisler.github.io/post/announcing-rustacuda/",
      "tweet_url": "https://twitter.com/redattack34/status/1069095970422620165",
      "date_published": "2018-12-01T15:00:00-06:00",
      "author": {
        "name": "Brook Heisler",
        "url": "https://bheisler.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "5493161b-6e7d-4b81-887f-af80a0d2c410",
      "title": "CFG Game: Put your CS skills to good use and craft burgers",
      "content_text": "This past weekend I made a game for Ludum Dare 43. Tools used: Aseprite, quicksilver. Inspired by Zachtronics. It is written in Rust and compiled to WebAssembly.",
      "url": "http://rickyhan.com/jekyll/update/2018/12/03/make-burgers-context-free-grammar.html",
      "date_published": "2018-12-03T04:37:02+00:00",
      "author": {
        "name": "Ricky Han",
        "url": "http://rickyhan.com/"
      },
      "tags": [
        "Games and Graphics",
        "Web and Network Services"
      ]
    },
    {
      "id": "9303577c-bd85-4bfa-9b0c-30685300155c",
      "title": "Inside Rust’s Async Transform",
      "content_text": "As you likely know if you’re reading this post Rust has an upcoming async/await feature being tested in nightly. Because of Rust’s unique features and positioning fully understanding the implementation powering this syntax is very different to understanding other well-known implementations (C# and JavaScript’s being the ones I am familiar with). Instead of thinking of a CPS-like transform where an async function is split into a series of continuations that are chained together via a Future::then method, Rust instead uses a generator/coroutine transform to turn the function into a state machine (C# and probably most JavaScript implementations use a similar transform under the hood, but as far as I’m aware because of the garbage collector these are indistinguishable from the naive CPS transform they are normally described as). For more detail on why Rust is taking this approach you should read eRFC 2033: Experimental Coroutines, that lays out the why’s much better than I could here.\n\nWhat I’m going to try and provide instead, is a look into how this actually works today. What steps the compiler takes to turn an async fn into a normal function returning a state machine that you could write if you wanted to (but you definitely don’t).",
      "url": "https://blag.nemo157.com/2018/12/09/inside-rusts-async-transform.html",
      "date_published": "2018-12-09T00:00:00+00:00",
      "author": {
        "name": "Wim Looman",
        "url": "https://blag.nemo157.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "afa2fbf0-9866-4be5-aa97-247c58bbccf7",
      "title": "cargo-call-stack: Whole program static stack analysis",
      "content_text": "The tool produces a call graph of the selected program as a dot file. Each node (function) in the call graph includes the local stack usage of the function, if provided by LLVM (see -Z emit-stack-sizes). If the call graph contains no cycles then the tool also computes the maximum stack usage of each function, that is the stack usage that includes the stack usage of the functions the function may invoke.",
      "url": "https://github.com/japaric/cargo-call-stack#cargo-call-stack",
      "tweet_url": "https://twitter.com/japaricious/status/1069569802241486850",
      "date_published": "2018-12-03T23:31:00+00:00",
      "author": {
        "name": "Jorge Aparicio",
        "url": "http://blog.japaric.io/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "27a7e602-da8a-4c0b-9ec1-81cc22c00df9",
      "title": "Using Web Assembly in the Browser",
      "content_text": "WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. This essentially means that is is fast, because the program is compiled to a much more compact format, making it faster to parse. Wasm can be written by hand if you're looking for a challenge, but is primarily meant to be written in another language, and then compiled to Wasm. You may know a little about Assembly language and how it works - here's a quick refresher in-case you're rusty.",
      "url": "https://ljcode.org/blog/wasm-part1/",
      "tweet_url": "https://twitter.com/SenojEkul/status/1072051343064330240",
      "date_published": "2018-12-10T00:00:00+00:00",
      "author": {
        "name": "Luke Jones",
        "url": "https://ljcode.org/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "57aae12d-0d27-4eec-b3f3-4ff99f294435",
      "title": "Rust 2019 – The Road Ahead",
      "content_text": "The Rust community team is soliciting blog posts to help plan the 2019 efforts. So here’s my take. I’ll start by looking back at the last year. We’ve seen great and impactful changes in the Rust landscape, such as non-lexical lifetimes, the stabilization of procedural macros and const fn, stable clippy and rustfmt, the further development of powerful IDE integration such as IntelliJ, Atom and VSCode.",
      "url": "https://llogiq.github.io/2018/12/08/rust.html",
      "tweet_url": "https://twitter.com/llogiq/status/1071522084508090370",
      "date_published": "2018-12-08T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "7df2b166-e70e-4b15-bf6e-9475a81096e9",
      "title": "Creating my first AWS Lambda using Rust",
      "content_text": "Taking advantage of AWS Lambda Runtime support for Rust",
      "url": "https://medium.com/@kkostov/rust-aws-lambda-30a1b92d4009",
      "tweet_url": "https://twitter.com/kkostov/status/1069209857138573313",
      "date_published": "2018-12-02T12:40:16.527+00:00",
      "author": {
        "name": "Konstantin",
        "url": "https://medium.com/@kkostov"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "c52eda57-1761-4ec3-9e59-c4c45d665574",
      "title": "Dice.rs: Rust on Lambda",
      "content_text": "Rust support on AWS Lambda was recently released, which seems like as good an opportunity as any to share some code and the solutions to challenges I encountered along the way ☺. I’ve decided to create a little diceware service, and the lambda-runtime crate provides a great API to make this a breeze.",
      "url": "https://kellenfujimoto.com/posts/dicers-rust-on-lambda/",
      "tweet_url": "https://twitter.com/rakenodiax/status/1069893133079588864",
      "date_published": "2018-12-02T14:18:59+01:00",
      "author": {
        "name": "Kellen Frodelius-Fujimoto",
        "url": "https://kellenfujimoto.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "2b4ef111-3f3b-416d-b94d-55fe01a94455",
      "title": "More on RLS version numbering",
      "content_text": "In a few days the 2018 edition is going to roll out, and that will include some new framing around Rust's tooling. We've got a core set of developer tools which are stable and ready for widespread use. We're going to have a blog post all about that, but for",
      "url": "https://www.ncameron.org/blog/more-on-rls-version-numbering/",
      "tweet_url": "https://twitter.com/nick_r_cameron/status/1069789790051143680",
      "date_published": "2018-12-04T03:00:20+00:00",
      "author": {
        "name": "Nick Cameron",
        "url": "http://www.ncameron.org/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "deadc4e1-1e13-49ca-b62b-cd8af455a164",
      "title": "Wherefore art thou Romio?",
      "content_text": "This blog post is about a project called Romio that I’ve been working on over the past two or three weeks. Romio is a port of a small part of the Tokio project to the newer futures APIs.\n\nI started the project to get some experience porting code from the old futures API to the new API. However, we realized that this code could also be useful to other people who want to experiment with networking code using the new async/await syntax, so with the help of others we polished it up during the RustFest Rome “impl days” and now its being released for people to experiment with.",
      "url": "http://boats.gitlab.io/blog/post/romio/",
      "tweet_url": "https://twitter.com/withoutboats/status/1070430725986545664",
      "date_published": "2018-12-05T00:00:00+00:00",
      "author": {
        "name": "withoutboats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "8f8ef893-ae80-4991-9d17-93049ee0adc6",
      "title": "Spirit Tutorial",
      "content_text": "In short, when writing a daemon or a service, we have the „muscle“ of the application ‒ whatever we write the daemon for. And we have a whole lot of infrastructure around that: logging, command line parsing, configuration. And while there are Rust libraries for all that, one needs nontrivial amount of boilerplate code to bridge all this together. Spirit aims to be this bridge.",
      "url": "https://vorner.github.io/2018/12/09/Spirit-Tutorial.html",
      "date_published": "2018-12-09T00:00:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "0e733a02-5972-4106-98a7-d0613485cac1",
      "title": "Rust 2019 — let us pursue composability",
      "content_text": "We should drive home the goals set in spirit of productivity in 2019. We should also consider composibility as the next overarching theme.",
      "url": "https://medium.com/@GolDDranks/rust-2019-let-us-pursue-composability-70f1eb2238c3",
      "date_published": "2018-12-09T02:50:51.197+00:00",
      "author": {
        "name": "Pyry Kontio",
        "url": "https://medium.com/@GolDDranks"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "e20c3d81-ce4b-491d-98e1-632aeb5e40a4",
      "title": "Plans for 2019",
      "content_text": "Many people have asked me what I’m working on lately, and I thought I’d give a quick rundown of my status and plans for 2019. I intend to keep this post updated with the status of projects as they progress.",
      "url": "https://pcwalton.github.io/2018/12/07/plans-for-2019.html",
      "tweet_url": "https://twitter.com/pcwalton/status/1071138038397448192",
      "date_published": "2018-12-07T12:49:00+00:00",
      "author": {
        "name": "Patrick Walton",
        "url": "https://pcwalton.github.io/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "05ee17e8-44f9-41c4-9f29-b4a5be430158",
      "title": "Safe Web Services with Actix and Sentry",
      "content_text": "Enjoy this quick introduction to creating a web server with Actix and monitoring it with Sentry.",
      "url": "https://blog.sentry.io/2018/12/04/safe-web-services-actix-sentry",
      "tweet_url": "https://twitter.com/getsentry/status/1070331968699686918",
      "date_published": "2018-12-04T00:00:00+00:00",
      "author": {
        "name": "Jan Michael Auer",
        "url": "https://blog.sentry.io/index.html"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "97627c69-e162-420e-8d30-22c0755d0b76",
      "title": "Rust in the new age",
      "content_text": "A wishlist of what I would like to accomplish with Rust in 2019.",
      "url": "https://quietmisdreavus.net/code/2018/12/07/rust-in-the-new-age/",
      "tweet_url": "https://twitter.com/QuietMisdreavus/status/1071179893076049920",
      "date_published": "2018-12-07T17:00:00-06:00",
      "author": {
        "name": "QuietMisdreavus",
        "url": "https://quietmisdreavus.net/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "4ea6d02a-6279-4eef-af2f-bd67424d6de8",
      "title": "The Swiss Army Knife of Hashmaps",
      "content_text": "A while back, there was a discussion comparing the performance of using the hashbrown crate (based on Google’s SwissTable implementation) in the Rust compiler. In the last RustFest, Amanieu was experimenting on integrating his crate into stdlib, which turned out to have some really promising results. As a result, it’s being planned to move the crate into stdlib.\n\nWhile the integration is still ongoing, there’s currently no blog post out there explaining SwissTable at the moment. So, I thought I’d dig deeper into the Rust implementation to try and explain how its (almost) identical twin hashbrown::HashMap works.",
      "url": "https://blog.waffles.space/2018/12/07/deep-dive-into-hashbrown/",
      "tweet_url": "https://twitter.com/wafflespeanut/status/1071100420871745536",
      "date_published": "2018-12-07T16:58:46+00:00",
      "author": {
        "name": "Ravi Shankar",
        "url": "https://blog.waffles.space/"
      },
      "tags": [
        "Computer Science",
        "Performance"
      ]
    },
    {
      "id": "e7334cc0-fe8a-4b16-b96f-c25b2073dc52",
      "title": "A simple agenda for the Rust Game Development WG",
      "content_text": "Proposing Amethyst as our flagship project.",
      "url": "https://medium.com/rustgamedev/a-simple-agenda-for-the-rust-game-development-wg-485cfc72b088",
      "tweet_url": "https://twitter.com/erlend_sh/status/1071191482789445633",
      "date_published": "2018-12-07T23:51:48.344+00:00",
      "author": {
        "name": "Erlend S. Heggen",
        "url": "https://medium.com/@erlend_sh"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "b9206a7e-5ee3-4336-b756-afab50e9992f",
      "title": "Debugging Cargo Test",
      "content_text": "While developing some crates in rust, I ran into a few crashes in certain situations when using these crates from another application. In order to more easily reproduce the problem, and also minimize or eliminate future regressions, I decided to write some unit tests for these issues, and use them to more easily debug the problems… or so I thought!",
      "url": "https://www.wihlidal.com/blog/general/2018-12-07-debugging-cargo-test/",
      "tweet_url": "https://twitter.com/gwihlidal/status/1071177128161501184",
      "date_published": "2018-12-07T00:00:00+00:00",
      "author": {
        "name": "Graham Wihlidal",
        "url": "https://www.wihlidal.com/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "8f026251-f6df-4816-a89f-855741aacbf6",
      "title": "The Fallow Year, my Rust2019 post",
      "content_text": "Rust is an amazing project. It’s unlike anything I’ve ever seen. Not only are we seeing an ever-growing number of big name users of Rust, we also continue to see leaps in productivity and functionality. Yesterday, the Rust 2018 edition shipped. The culmination of three years of work, it shows off what the community is capable of: new features, backwards compatibility, new ergonomics without sacrificing performance, and the list goes on and on.\n\nWhich is why it might comes as a little bit of a surprise that I suggest we let the field rest for the year. More specifically, that we should let one field rest while we plant another. Rather than focusing on new designs, I suggest we turn our attention outside of RFCs to other areas of Rust.",
      "url": "https://www.jonathanturner.org/2018/12/the-fallow-year.html",
      "tweet_url": "https://twitter.com/jntrnr/status/1071112040352112641",
      "date_published": "2018-12-08T00:00:00+00:00",
      "author": {
        "name": "Jonathan Turner",
        "url": "http://www.jonathanturner.org/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "3c8b4f15-959d-40cc-a79c-1a375f498bb0",
      "title": "Rust: Error handling – Learning Rust",
      "content_text": "Welcome Back! This is the fifth post of Learning Rust series. Rust is a well designed language and safety is one of the main focus area of it. Its design decisions have been taken to prevent errors and major issues of systems programs like data races, null pointer exceptions, sensitive data leakage through exceptions and etc. So today, we are going to talk more about the concepts behind Error Handling in Rust.",
      "url": "https://medium.com/learning-rust/rust-error-handling-72a8e036dd3",
      "date_published": "2018-12-06T19:11:01.554+00:00",
      "author": {
        "name": "Dumindu Madunuwan",
        "url": "https://medium.com/@dumindu"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "efb83d26-14fa-4649-b4f2-e792f0e8a658",
      "title": "2019 Roadmap? More like a wishlist",
      "content_text": "I think there is too much unfinished and unpolished stuff in Rust. My wish for 2019 would be to ship most of this. If I had to choose a theme for Rust 2021 that would be \"Reliability\", to convey that what is shipped has actually been polished to the point that it does not fail.",
      "url": "https://www.reddit.com/r/rust/comments/a3sav1/2019_roadmap_more_like_a_wishlist_finish_and_ship/",
      "date_published": "2018-12-07T08:06:04+11:00",
      "author": {
        "name": "u/0b_0101_001_1010",
        "url": "https://www.reddit.com/user/0b_0101_001_1010/"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "a3f673ea-49c8-4942-96a3-8565d6191ec5",
      "title": "Making Rust a perfect fit for high-performance computations",
      "content_text": "I think Rust could help at the task of writing performant computational software, because its expressiveness, flexibility and degree of low-level control rivals that of C++, which is the de facto dominant programming language of this community where sophisticated abstractions and high performance are both desired. All the while being vastly easier to learn, and to use correctly and efficiently at the same time.",
      "url": "https://gist.github.com/HadrienG2/e9a875bdf98b528594f4e20f8176bb68",
      "date_published": "2018-12-06T21:06:21+00:00",
      "author": {
        "name": "Hadrien G.",
        "url": "https://gist.github.com/HadrienG2"
      },
      "tags": [
        "Rust 2019"
      ]
    },
    {
      "id": "c0eb769f-4785-436d-b0b9-4bff16b30ef8",
      "title": "Reflecting on Rust and WebAssembly in 2018",
      "content_text": "🎉 The 2018 edition of Rust has officially shipped, and the initial Rust and WebAssembly development story along with it! 🎉 To see how far we’ve come, let’s reflect on the Rust and WebAssembly story a year ago: rustc could emit WebAssembly binaries for you, but that was about it. As far as communication with JavaScript went, you had to work with raw wasm imports and exports yourself. That meant you could only pass 32- and 64-bit integers and floats back and forth. No Rust structs, JavaScript objects, strings, or slices could be passed back forth. And distributing your library’s .wasm so that other downstream projects could depend on it? Good luck.",
      "url": "https://rustwasm.github.io/2018/12/06/reflecting-on-rust-and-wasm-in-2018.html",
      "tweet_url": "https://twitter.com/rustwasm/status/1070732396184698881",
      "date_published": "2018-12-06T00:00:00+00:00",
      "author": {
        "name": "Rust and WebAssembly",
        "url": "https://rustwasm.github.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "3234baba-f03d-467c-b032-d7d0dec7a12d",
      "title": " A call for Rust 2019 Roadmap blog posts",
      "content_text": "Starting today and running until of January 15, we’d like to ask the community to write blogposts reflecting on Rust in 2018 and proposing goals and directions for Rust in 2019.",
      "url": "https://blog.rust-lang.org/2018/12/06/call-for-rust-2019-roadmap-blogposts.html",
      "date_published": "2018-12-06T00:00:00+00:00",
      "author": {
        "name": "The Rust Community Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language",
        "Rust 2019"
      ]
    },
    {
      "id": "a9fa887f-3615-45d9-ab2d-d400d30f1039",
      "title": "Rust 2018 is here… but what is it?",
      "content_text": "Starting today, the Rust 2018 edition is in its first release. With this edition, we’ve focused on making Rust developers as productive as they can be. But beyond that, it can be hard to explain exactly what Rust 2018 is.",
      "url": "https://hacks.mozilla.org/2018/12/rust-2018-is-here/",
      "tweet_url": "https://twitter.com/linclark/status/1070714231601946629",
      "date_published": "2018-12-06T16:13:55+00:00",
      "author": {
        "name": "Lin Clark",
        "url": "https://hacks.mozilla.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "18cf1853-dbff-4634-8045-fbcaf36bd4fc",
      "title": " Announcing Rust 1.31 and Rust 2018",
      "content_text": "The Rust team is happy to announce a new version of Rust, 1.31.0, and \"Rust 2018\" as well. Rust is a programming language that empowers everyone to build reliable and efficient software.",
      "url": "https://blog.rust-lang.org/2018/12/06/Rust-1.31-and-rust-2018.html",
      "tweet_url": "https://twitter.com/rustlang/status/1070732843855294467",
      "date_published": "2018-12-06T00:00:00+00:00",
      "author": {
        "name": "The Rust Core Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "881d8c07-ccf4-48be-ab22-bd76cc7c848d",
      "title": "Rust Web Survey Results 2018",
      "content_text": "We recently sent out a survey regarding the state of the current Rust web ecosystem and we got over a 1000 responses! We really appreciate the feedback from the community. This will help us continue to improve upon the state of the Rust web ecosystem. Today, we would like to go over the responses and understand the results.",
      "url": "https://rust-lang-nursery.github.io/wg-net/2018/11/28/wg-net-survey.html",
      "tweet_url": "https://twitter.com/RustNetWG/status/1067904705240608768",
      "date_published": "2018-11-28T00:00:00+00:00",
      "author": {
        "name": "Bhargav Voleti",
        "url": "https://rust-lang-nursery.github.io/wg-net/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "48218be5-130b-4274-b41a-7bfa20086f0d",
      "title": "Rust Runtime for AWS Lambda",
      "content_text": "AWS Lambda, which makes it easy for developers to run code for virtually any type of application or backend service with zero administration, has just announced the Runtime APIs. The Runtime APIs define an HTTP-based specification of the Lambda programming model which can be implemented in any programming language. To accompany the API launch, we have open sourced a runtime for the Rust language.",
      "url": "https://aws.amazon.com/blogs/opensource/rust-runtime-for-aws-lambda/",
      "tweet_url": "https://twitter.com/AWSOpen/status/1068235688871641090",
      "date_published": "2018-11-29T18:02:27+00:00",
      "author": {
        "name": "Stefano Buliani",
        "url": "https://aws.amazon.com/blogs/opensource/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "400c4c0d-78d0-41fe-bd07-c4a720ade708",
      "title": "Haskell and Rust",
      "content_text": "Learn more about how the Rust programming language shares many of the advantages offered by Haskell such as a strong type system, great tooling, polymorphism, immutability, concurrency, and great software testing methodologies.  Rust is a good choice when you need to squeeze in extra performance.",
      "url": "https://www.fpcomplete.com/blog/2018/11/haskell-and-rust",
      "tweet_url": "https://twitter.com/FPComplete/status/1067518286722564097",
      "date_published": "2018-11-26T17:33:00+00:00",
      "author": {
        "name": "Chris Allen",
        "url": "https://www.fpcomplete.com/blog"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "5a0c9b1f-c433-44e6-947e-74076725fc32",
      "title": "Rust Flow, Part Two",
      "content_text": "Rust doesn’t have a language-level concept of generic mutability, which makes “method threading” (which take `self` by some handle, and return it in the same way) hard to write. This article covers how to write in that pattern in a less painful way.",
      "url": "https://myrrlyn.net/blog/misc/rust-flow-part-two",
      "tweet_url": "https://twitter.com/myrrlyn/status/1068329297746681856",
      "date_published": "2018-11-29T00:00:00+00:00",
      "author": {
        "name": "Alexander Payne",
        "url": "https://myrrlyn.net/blog"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "6afc7e52-af6d-4ecd-a5af-fb9e27a6ccf6",
      "title": "A new look for rust-lang.org",
      "content_text": "Today, we’d like to announce a beta of the new rust-lang.org. If you go to https://beta.rust-lang.org, you’ll see a preview of the new site.",
      "url": "https://blog.rust-lang.org/2018/11/29/a-new-look-for-rust-lang-org.html",
      "tweet_url": "https://twitter.com/rustlang/status/1068200048926908418",
      "date_published": "2018-11-29T00:00:00+00:00",
      "author": {
        "name": "The Rust Core Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c1afc363-1078-4dbd-a3e4-e0f05f255d62",
      "title": "Getting started with nightly async/await support",
      "content_text": "Following on from my last post, I thought I would look at async/await support in Rust. The async/await support coming to Rust brings with it a much more ergonomic way to work with asynchronous computations. In this post I'll introduce std::future::Future, and run through how to make use of them, and how to interoperate with the current ecosystem which is built around version 0.1 of the futures package.",
      "url": "https://jsdw.me/posts/rust-asyncawait-preview/",
      "date_published": "2018-11-26T00:00:00+00:00",
      "author": {
        "name": "James Wilson",
        "url": "https://jsdw.me/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "50e86e16-57e4-4740-8251-b7eb6340d9ad",
      "title": "Firecracker: Secure and Fast microVM for Serverless Computing",
      "content_text": "In the fall of 2017, we decided to write Firecracker in Rust, a modern programming language that guarantees thread and memory safety and prevents buffer overflows and many other types of memory safety errors that can lead to security vulnerabilities. Read more details about the features and architecture of the Firecracker VMM at Firecracker Design.\n\nFirecracker microVMs improve efficiency and utilization with a low memory overhead of < 5 MiB per microVMs. This means that you can pack thousands of microVMs onto a single machine. You can use an in-process rate limiter to control, with fine granularity, how network and storage resources are shared, even across thousands of microVMs. All hardware compute resources can be safely oversubscribed, to maximize the number of workloads that can run on a host.",
      "url": "https://aws.amazon.com/blogs/opensource/firecracker-open-source-secure-fast-microvm-serverless/",
      "tweet_url": "https://twitter.com/rustlang/status/1067423754337353728",
      "date_published": "2018-11-27T05:02:08+00:00",
      "author": {
        "name": "Arun Gupta",
        "url": "https://aws.amazon.com/blogs/opensource/"
      },
      "tags": [
        "DevOps and Deployment"
      ]
    },
    {
      "id": "abba07ed-5ffb-4b29-ba29-f1e6dbdce718",
      "title": "Tide’s evolving middleware approach",
      "content_text": "Since the last post on Tide, there have been a number of excellent contributions from a bunch of new contributors! In this post, I want to talk about the work that @tirr-c has done to substantially improve the middleware story.",
      "url": "https://rust-lang-nursery.github.io/wg-net/2018/11/27/tide-middleware-evolution.html",
      "tweet_url": "https://twitter.com/aaron_turon/status/1067441492141268992",
      "date_published": "2018-11-27T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "https://rust-lang-nursery.github.io/wg-net/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "8c1f73a9-291c-4aa2-9e50-2cf4538f36db",
      "title": "Rust Quiz",
      "content_text": "Test your Rust knowledge with tricky Rust questions.",
      "url": "https://dtolnay.github.io/rust-quiz/",
      "tweet_url": "https://twitter.com/rustlang/status/1067833624047878144",
      "date_published": "2018-11-29T00:00:00+00:00",
      "author": {
        "name": "David Tolnay and Alex Crichton",
        "url": "https://dtolnay.github.io/rust-quiz/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "5ed5c8fa-d94a-44ab-836b-35ee61f1f048",
      "title": "Rust Survey 2018 Results",
      "content_text": "Another year means another Rust survey, and this year marks Rust’s third annual survey. This year, the survey launched for the first time in multiple languages. In total 14 languages, in addition to English, were covered. The results from non-English languages totalled 25% of all responses and helped pushed the number of responses to a new record of 5991 responses. Before we begin the analysis, we just want to give a big “thank you!” to all the people who took the time to respond and give us your thoughts. It’s because of your help that Rust will continue to improve year after year.",
      "url": "https://blog.rust-lang.org/2018/11/27/Rust-survey-2018.html",
      "tweet_url": "https://twitter.com/rustlang/status/1067467557018525696",
      "date_published": "2018-11-27T00:00:00+00:00",
      "author": {
        "name": "The Rust Survey Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ed652ceb-f7cd-4566-b37c-757f6d089240",
      "title": "Rust Language Cheat Sheet",
      "content_text": "This is the \"Rust Language Cheat Sheet\". It is for users who: are early Rust professionals (experienced programmers, intermediate Rust users), and prefer visual, example-driven content. Use cases, in order of priority: \"identification guide\" for unknown or symbolic constructs encountered in code. Provide further reading from easy to advanced (Book to Nomicon). Quick lookup for language related problems. Discover constructs in the language you might not know.",
      "url": "https://cheats.rs/",
      "date_published": "2018-11-28T00:00:00+00:00",
      "author": {
        "name": "Ralf Biedert",
        "url": "https://xr.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "5d14453d-3a6f-4f26-8aa1-20edec9e9347",
      "title": "The Seedling Sees the Light of Day: Sequoia-PGP Initial Release",
      "content_text": "On October 16, 2017, we made the first commit to the Sequoia repository. Just over a year and a thousand commits later, Sequoia’s low-level API is nearly feature complete, and is already usable. For instance, a port of the p≡p engine to Sequoia is almost finished, and the code is significantly simpler than the version using the current OpenPGP library. We’ve also made experimental ports of other software that use OpenPGP, and written some new software to further validate the completeness and ergonomics of the API.",
      "url": "https://sequoia-pgp.org/blog/2018/11/26/initial-release/",
      "date_published": "2018-11-26T10:08:17+01:00",
      "author": {
        "name": "Neal H. Walfield, Justus Winter, and Kai Michaelis",
        "url": "https://sequoia-pgp.org/blog/"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "c5b56719-bdcd-4d91-8b61-85a27cd5315c",
      "title": "Generic Methods in Rust: How Exonum Shifted from Iron to Actix-web",
      "content_text": "In this article, we describe how we ported the Exonum framework to actix-web using generic programming.",
      "url": "https://medium.com/meetbitfury/generic-methods-in-rust-how-exonum-shifted-from-iron-to-actix-web-7a2752171388",
      "date_published": "2018-11-21T10:51:32.586+00:00",
      "author": {
        "name": "Exonum",
        "url": "https://medium.com/@ExonumPlatform"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "c9fdbd06-59fd-444f-b7a9-cd238817a72f",
      "title": "Still in love with Rust",
      "content_text": "I think I've discovered Rust somewhere around the year 2012. With time I grew more and more fond of Rust. The language kept evolving in a direction that was my personal sweet spot: a modern C. And at some point I realized I'm in love with Rust. And I still am today, after a couple of years of using it. So let me tell you why is Rust my darling programming language.",
      "url": "https://dpc.pw/still-in-love-with-rust",
      "date_published": "2018-11-06T07:38:10+00:00",
      "author": {
        "name": "Dawid Ciężarkiewicz aka `dpc`",
        "url": "http://dpc.pw/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4c4ca2bc-0e59-4c24-92c1-2b37630f2280",
      "title": "Rusty clock: An alarm clock with environment stats in pure bare metal embedded Rust",
      "content_text": "This alarm clock is programed in bare metal rust (no OS). It features pressure, temperature, humidity, monophonic alarm on a e-paper display.",
      "url": "https://github.com/TeXitoi/rusty-clock/blob/master/README.md",
      "date_published": "2018-11-21T23:03:26+00:00",
      "author": {
        "name": "Guillaume P.",
        "url": "https://github.com/TeXitoi"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "22495ae4-a7be-4899-92ab-ede35669df1b",
      "title": "Converting AsyncRead and AsyncWrite to Futures, Sinks and Streams",
      "content_text": "Prior to this experience, I had thought that Futures, Sinks and Streams were the smallest building blocks in the world of Tokio, and so I went looking through the Tokio documentation for these things. Actually, all of the fundamental objects to read and write bytes to things implement one or both of AsyncRead and AsyncWrite, but not the Future, Sink or Stream traits. In fact, there are lots of poll_x methods dotted around, so I realised I needed to figure out how to make use of them.",
      "url": "https://jsdw.me/posts/rust-futures-tokio/",
      "date_published": "2018-11-25T00:00:00+00:00",
      "author": {
        "name": "James Wilson",
        "url": "https://jsdw.me/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "30b59cbd-a9ce-4f67-846b-93a30d134e5d",
      "title": "WIP: A no_std Rust crate for reading SD/MMC cards",
      "content_text": "To make it easier to load programs on to the Monotron, I've been working on a crate to make it really simple to read data from SD and SDHC cards formatted with FAT16 or FAT32. The crate is written without `alloc` so it uses zero heap, and I try to keep no more than one 512 byte block on the stack at a time.",
      "url": "https://www.reddit.com/r/rust/comments/a07k6e/wip_a_no_std_rust_crate_for_reading_sdmmc_cards/",
      "date_published": "2018-11-25T00:00:00+00:00",
      "author": {
        "name": "Jonathan Pallant",
        "url": "http://railwayelectronics.blogspot.com.au/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "1e18d220-093b-46bd-b260-640ed3d74deb",
      "title": "Amethyst Foundation Created",
      "content_text": "The Amethyst team has some special announcements. A non-profit foundation has been formed and a new community forums site has been created.",
      "url": "https://www.amethyst.rs/blog/non-profit-announce/",
      "tweet_url": "https://twitter.com/AmethystEngine/status/1066415608265355265",
      "date_published": "2018-11-23T00:00:00+00:00",
      "author": {
        "name": "Moxinilian (Théo Degioanni)",
        "url": "https://www.amethyst.rs/blog"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "c9feb6f2-ba42-42ca-a0a3-dc37f4ce69ff",
      "title": "Rust+GNOME Hackfest #4",
      "content_text": "Less than 2 weeks ago, I was working on improving the integration of Rust with GNOME libraries at the fourth Hackfest, which happened this time in Thessaloniki.",
      "url": "http://antoyo.ml/rust-gnome-hackfest-thessaloniki",
      "date_published": "2018-11-25T00:00:00+00:00",
      "author": {
        "name": "Antoni Boucher",
        "url": "http://antoyo.ml/"
      },
      "tags": [
        "Community",
        "Crates"
      ]
    },
    {
      "id": "04284ee3-1ace-4204-bb2f-e2d27249c8c2",
      "title": "Synthesizing Structures with immense",
      "content_text": "I wrote a nightly Rust library called immense for synthesizing 3D structures with simple composable rules, inspired by Structure Synth. In the docs I cover the basics, and in this article I’ll go over making a mesh from start to finish.",
      "url": "https://paytonturnage.com/writing/2018-11-17-synthesizing-structures-with-immense/",
      "date_published": "2018-11-17T12:09:00+00:00",
      "author": {
        "name": "Payton Turnage",
        "url": "https://paytonturnage.com/writing/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "5527d11f-6f5e-47f4-b208-c90499764f04",
      "title": "Build Your Own Shell using Rust",
      "content_text": "This is a tutorial on building your own shell using Rust, in the spirit of the build-your-own-x list. Creating a shell is a great way to understand how the shell, terminal emulator, and OS work together.",
      "url": "https://www.joshmcguigan.com/blog/build-your-own-shell-rust/",
      "date_published": "2018-11-17T00:00:00+00:00",
      "author": {
        "name": "Josh Mcguigan",
        "url": "https://www.joshmcguigan.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "40ed3562-277a-453f-84a6-29ab5314ed0c",
      "title": "Programming Servo: A background-hang-monitor",
      "content_text": "Let’s say you’re contributing to a system in Rust consisting of a bunch of different components, running in their own threads or processes, for example an engine to make the Web run.\n\nWhen one of those components seemingly hangs on something, how can you find out what it is hanging on? Maybe a backtrace of what that component is doing at that time would be useful?\n\nThat’s easy, for that we have thebacktrace-rs crate, right?\n\nWell, there’s a catch: how do we call Backtrace::new() from a thread that is hanging?",
      "url": "https://medium.com/programming-servo/programming-servo-a-background-hang-monitor-73e89185ce1",
      "date_published": "2018-11-16T12:30:06.212+00:00",
      "author": {
        "name": "Gregory Terzian",
        "url": "https://medium.com/@polyglot_factotum"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "97715a00-432f-4cfa-9c11-92f0d74ff60e",
      "title": "Running Rust natively in AWS Lambda and testing it locally",
      "content_text": "Abusing Go runtime in AWS to run Rust binaries",
      "url": "https://medium.com/@bernardo.belchior1/running-rust-natively-in-aws-lambda-and-testing-it-locally-57080421426d",
      "date_published": "2018-11-12T14:23:33.534+00:00",
      "author": {
        "name": "Bernardo Belchior",
        "url": "https://medium.com/@bernardo.belchior1"
      },
      "tags": [
        "DevOps and Deployment",
        "Web and Network Services"
      ]
    },
    {
      "id": "3c9dc7f2-978e-4663-900e-8a49c10bf57f",
      "title": "Wait-Free Per-Object Thread-Local Storage",
      "content_text": "In this post, I present a wait-free thread-local storage using the Rust language.",
      "url": "https://bzim.gitlab.io/blog/posts/wait-free-per-object-thread-local-storage.html",
      "date_published": "2018-11-18T00:00:00+00:00",
      "author": {
        "name": "Bruno Corrêa Zimmermann",
        "url": "https://bzim.gitlab.io/blog/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "84353bd7-6977-4894-883f-b917ccef0b45",
      "title": "Introducing pest into glsl and hindsight about nom vs. pest (part 2)",
      "content_text": "This is the second article about my experience at supporting pest in my glsl crate – without, for now, removing the nom parser.",
      "url": "https://phaazon.net/blog/glsl-pest-part-2",
      "date_published": "2018-11-17T20:40:00+00:00",
      "author": {
        "name": "Dimitri Sabadie",
        "url": "http://phaazon.net/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "24375765-7fa7-4729-8b69-734c409c47fb",
      "title": "Compile Time Feature Flags in Rust",
      "content_text": "Toggling feature flags when you compile for zero runtime cost",
      "url": "https://www.worthe-it.co.za/programming/2018/11/18/compile-time-feature-flags-in-rust.html",
      "tweet_url": "https://twitter.com/JWorthe/status/1064120946246717441",
      "date_published": "2018-11-18T00:00:00+00:00",
      "author": {
        "name": "Justin Worthe",
        "url": "http://worthe-it.co.za/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "18ce3041-0f7a-4bf8-8e5a-ccea2a6c8053",
      "title": "Can you Drop it?",
      "content_text": "Resource allocation & the implementation of drop logic in Rust.",
      "url": "http://optimistictypes.com/can-you-drop-it/",
      "tweet_url": "https://twitter.com/DebugSteven/status/1063936416042893320",
      "date_published": "2018-11-17T00:00:00+00:00",
      "author": {
        "name": "J Haigh",
        "url": "https://debugsteven.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "b21ca2e0-5670-4a7b-af11-3a6c1312d5e2",
      "title": "Rust, MongoDB & Wither 0.6",
      "content_text": "Hello everyone! I would like to share an update on an open source project which I have been developing for a little while now. It is a Rust project called Wither which attempts to “provide a simple, sane & predictable interface into MongoDB, based on data models”. This post is about the 0.6 release of this crate, and I would like to dive into some of the aspects of developing this release which I really enjoyed or which I found interesting.",
      "url": "https://medium.com/docql/https-medium-com-docql-rust-mongodb-wither-13e803c9ae72",
      "date_published": "2018-11-14T18:33:12.226+00:00",
      "author": {
        "name": "Anthony Dodd",
        "url": "https://medium.com/docql"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "68074e79-2747-4170-970f-0e56b936578c",
      "title": "This Year in Embedded Rust",
      "content_text": "This year the Embedded WG set out to build the solid foundation that the embedded Rust ecosystem requires to thrive. As we approach the date of the 2018 edition release we reflect on our progress and share our achievements with you in this post.",
      "url": "https://rust-embedded.github.io/blog/this-year-in-embedded-rust/",
      "tweet_url": "https://twitter.com/rustembedded/status/1062664608538918913",
      "date_published": "2018-11-14T00:00:00+00:00",
      "author": {
        "name": "The Embedded Working Group",
        "url": "https://rust-embedded.github.io/blog"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "e8b911ca-d007-441e-93e3-d8f1f1b89a00",
      "title": "Program Synthesis is Possible in Rust",
      "content_text": "Program synthesis is the act of automatically constructing a program thatfulfills a given specification. I recently stumbled across Adrian Sampson’s Program Synthesis is Possible blog post. Adrian describes and implements minisynth, a toy program synthesizer that generates constants for holes in a template program when given a specification. What fun! As a way to learn more about program synthesis myself, I ported minisynth to Rust.",
      "url": "http://fitzgeraldnick.com/2018/11/15/program-synthesis-is-possible-in-rust.html",
      "date_published": "2018-11-15T00:00:00-08:00",
      "author": {
        "name": "Nick Fitzgerald",
        "url": "http://fitzgeraldnick.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "dabab963-1e9e-4b55-bb85-d0173a1db54a",
      "title": "Rust And Game Development",
      "content_text": "Rust is excellent for performance crucial applications that run on multi-processor architectures and these two aspects are also critical for game development. Rust has already seen a bunch of interest from games developers like Chucklefish, Embark Studios, Ready at Dawn, etc. - but in order to really excel I’d love to organize some structured efforts to improve the ecosystem and I think it would be great if the 2019 roadmap will include game development.",
      "url": "https://alexene.github.io/2018/11/15/Rust-and-game-development.html",
      "tweet_url": "https://twitter.com/_AlexEne_/status/1063104221422202881",
      "date_published": "2018-11-15T00:00:00+00:00",
      "author": {
        "name": "Alexandru Ene",
        "url": "https://alexene.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "ad136bed-3540-4ced-8a77-448b94426ba3",
      "title": "Bringing Elm’s architecture to Rust and Webassembly",
      "content_text": "I really like Elm. It is a delightful language with an amazing ecosystem. It has an interesting architecture called TEA, The Elm Architecture. Another language I like is Rust. On paper, Rust is completely different from Elm, but in using them both, I have seen some resemblance. Having used both Elm and Rust I had something I wanted to try. Would it be possible to create The Elm Architecture in Rust?",
      "url": "https://sindrejohansen.no/blog/willow/rust/elm/2018/11/16/willow-elm-in-rust.html",
      "tweet_url": "https://twitter.com/sindreij/status/1063498043956359169",
      "date_published": "2018-11-16T16:35:22+00:00",
      "author": {
        "name": "Sindre",
        "url": "https://sindrejohansen.no/blog/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "2a3a85cf-b4ac-49ff-9a27-4d377cd3d0cb",
      "title": "Introducing pest into glsl and hindsight about nom vs. pest (part 1)",
      "content_text": "This is the first article out of a (I guess?!) series of upcoming articles about… parsing. More specifically, I’ve been writing the glsl crate for a while now and the current, in-use parser is backed with nom. nom is a parser combinator crate written originally by @geal and there has been a lot of fuzz around nom vs. pest lately.\n\nSoooooooooooo. Because glsl is written with nom in its third iteration and because nom is now at version 4, I decided it was time to update the parser code of glsl. I heard about the comparison between pest and nom and decided to write an implementation with pest.\n\nThis is the first article of a series about how writing a pest looks like is fun compared to writing the nom parser. I’ll post several articles as I advance and see interesting matter to discuss and share.",
      "url": "https://phaazon.net/blog/glsl-pest-part-1",
      "date_published": "2018-11-17T05:00:00+00:00",
      "author": {
        "name": "Dimitri Sabadie",
        "url": "http://phaazon.net/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "6b8f2916-9634-4d6b-ae64-02d565c58659",
      "title": "Gutenberg is out, Zola 0.5.0 is in",
      "content_text": "Gutenberg changes name to Zola and gets a big release to celebrate.",
      "url": "https://www.vincentprouillet.com/blog/releasing-zola-0-5-0/",
      "date_published": "2018-11-17T00:00:00+00:00",
      "author": {
        "name": "Vincent Prouillet",
        "url": "https://www.vincentprouillet.com/blog/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "4d211c62-3ab3-4db5-a900-94731f798765",
      "title": "Stacked Borrows Implemented",
      "content_text": "Three months ago, I proposed Stacked Borrows as a model for defining what kinds of aliasing are allowed in Rust, and the idea of a validity invariant that has to be maintained by all code at all times. Since then I have been busy implementing both of these, and developed Stacked Borrows further in doing so. This post describes the latest version of Stacked Borrows, and reports my findings from the implementation phase: What worked, what did not, and what remains to be done. There will also be an opportunity for you to help the effort!",
      "url": "https://www.ralfj.de/blog/2018/11/16/stacked-borrows-implementation.html",
      "date_published": "2018-11-16T00:00:00+00:00",
      "author": {
        "name": "Ralf Jung",
        "url": "https://www.ralfj.de/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "b2687a6e-55b3-4d3b-a025-fc9e7c592e8e",
      "title": "Serve archived static files over HTTP",
      "content_text": "Say you want to store a huge number of very small filesthat you will only access over HTTP.For example:You are using rustdoc to render the documentation of a library.Without much work you’ll end up with about 100k HTML filesthat are about 10kB each.As it turns out,this number of small files is very annoying for any kind of file system performance.Best case: making copies/backups is slow.Worst case: You’re using an anti virus software and it takes ages.",
      "url": "https://deterministic.space/serve-archived-static-files-over-http.html",
      "date_published": "2018-11-11T00:00:00+01:00",
      "author": {
        "name": "Pascal Hertleif",
        "url": "https://deterministic.space/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "b612b468-7306-4f7b-a09a-2b4f0bac5b55",
      "title": "Introducing Mundane, a new cryptography library for Rust",
      "content_text": "Mundane is a cryptography library written in Rust and backed by BoringSSL. It aims to be difficult to misuse, ergonomic, and performant (in that order). It was originally created to serve the cryptography needs of Fuchsia, but we’ve decided to split it off as a general-purpose crate.",
      "url": "https://joshlf.com/post/2018/11/06/introducing-mundane/",
      "tweet_url": "https://twitter.com/joshlf_/status/1062230118431477760",
      "date_published": "2018-11-06T00:00:00+00:00",
      "author": {
        "name": "Joshua Liebow-Feeser",
        "url": "https://joshlf.com/"
      },
      "tags": [
        "Security",
        "Crates"
      ]
    },
    {
      "id": "93922af4-e454-4bfd-a0f2-64c481a6263c",
      "title": "Exploring a shipping puzzle, part 2",
      "content_text": "A friend recently told me about a puzzle, which is a great excuse to explore programming craft. My Rust solution was a simple port of my second Clojure solution. The only major difference is that it takes advantage of mutability (which is idiomatic in Rust, unlike in Clojure). The Rust solution runs in about 4.22 ± 0.05 ms, or about 5x faster than the fast Clojure solution.",
      "url": "https://kevinlynagh.com/notes/shipping-puzzle/part-2/",
      "tweet_url": "https://twitter.com/lynaghk/status/1062025606789914627",
      "date_published": "2018-11-09T00:00:00+00:00",
      "author": {
        "name": "Kevin Lynagh",
        "url": "https://kevinlynagh.com/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "858249f6-6979-48c9-a138-1b7fd2fc9502",
      "title": "Things Rust doesn’t let you do",
      "content_text": "A survey of things that Rust doesn’t let you do although arguably safe.",
      "url": "https://medium.com/@GolDDranks/things-rust-doesnt-let-you-do-draft-f596a3c740a5",
      "tweet_url": "https://twitter.com/GolDDranks/status/1061797094309081088",
      "date_published": "2018-11-12T01:34:25.494+00:00",
      "author": {
        "name": "Pyry Kontio",
        "url": "https://medium.com/@GolDDranks"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c6c90807-5108-434e-9dc0-c5ba8135420d",
      "title": "Truly Zero Cost",
      "content_text": "I know it is claimed how Rust has zero cost abstractions and such and that all these levels of abstractions will just go away in a release build. But there’s a difference in hearing the theory and seeing it really happen in practice. And I don’t appreciate it because I’d consider it magic, but more because I understand how that is being done and it still looks cool.",
      "url": "https://vorner.github.io/2018/11/11/truly-zero-cost.html",
      "date_published": "2018-11-11T00:00:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d435191e-e40d-477d-a5ee-908808ee5eee",
      "title": "Rust Flow: Function and Method Sequences in Rust",
      "content_text": "Rust allows for a very functional style of value “flow” without sacrificing the performance of a more traditionally imperative sequence. Furthermore, the functional flow may offer more clarity about value lifetimes and error handling that the imperative sequence might obscure.",
      "url": "https://myrrlyn.net/blog/misc/rust-flow",
      "date_published": "2018-11-11T14:44:00+00:00",
      "author": {
        "name": "Alexander Payne",
        "url": "https://myrrlyn.net/blog"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "125dced7-207a-4c36-904b-3d17c903c508",
      "title": "Optional Arguments in Rust",
      "content_text": "When designing an API for your crate one topic which can come is how to handle optional arguments. Let’s explore our Options in Rust!",
      "url": "https://hoverbear.org/2018/11/04/optional-arguments/",
      "date_published": "2018-11-04T00:00:00+00:00",
      "author": {
        "name": "Andrew Hobden",
        "url": "https://hoverbear.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "364d5469-2447-49c8-ab4c-e0b82da96f27",
      "title": "Monadic do notation in Rust: Part I",
      "content_text": "Following last time, where we saw that, given parameterision over traits (rather than just types), we could implement functors and monads in Rust that supported existing “monad-like” traits like Iterator and Future, I thought it would be interesting to tackle another one of the arguments against monads in Rust.",
      "url": "https://varkor.github.io/blog/2018/11/10/monadic-do-notation-in-rust-part-i.html",
      "date_published": "2018-11-10T20:10:56+00:00",
      "author": {
        "name": "varkor",
        "url": "https://varkor.github.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "190265bb-a65b-4acd-99e9-3d6f8a06969c",
      "title": "proc_macro_attribute Revisited",
      "content_text": "Recently, the procedural macro interface was somewhat stabilized. OK, there’s still the unstable proc_macro_hygiene feature you have to activate, but at least the registrar and rustc_private are no longer needed.",
      "url": "https://llogiq.github.io/2018/11/10/proc-macro.html",
      "tweet_url": "https://twitter.com/llogiq/status/1061369687798415360",
      "date_published": "2018-11-10T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4ace2654-b6a1-4a4a-9917-07f9e12c1ec2",
      "title": "How to get the size of Rust types with -Zprint-type-sizes",
      "content_text": "When optimizing Rust code it’s sometimes useful to know how big a type is, i.e. how many bytes it takes up in memory. std::mem::size_of can tell you, but often you want to know the exact layout as well. For example, an enum might be surprisingly big, in which case you probably will want to know if, for example, there is one variant that is much bigger than the others.",
      "url": "https://blog.mozilla.org/nnethercote/2018/11/09/how-to-get-the-size-of-rust-types-with-zprint-type-sizes/",
      "tweet_url": "https://twitter.com/nnethercote/status/1060739730449428480",
      "date_published": "2018-11-09T03:42:40+00:00",
      "author": {
        "name": "Nicholas Nethercote",
        "url": "https://blog.mozilla.org/nnethercote/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "89cf760b-0385-4e81-ad78-45b7eb3b2aa2",
      "title": "Making progress in await syntax",
      "content_text": "One thing we’ve left as an unresolved question so far in the matter of async/await syntax is the exact final syntax for the await operation. In the current implementation, awaits are written using a compiler plugin:\n\nasync fn foo() {\nawait!(bar());\n}\n\nThis is not because of any technical limitation: the reason we have done this is that we have not decided on the precise, final syntax for the await operation.",
      "url": "https://boats.gitlab.io/blog/post/await-syntax/",
      "tweet_url": "https://twitter.com/withoutboats/status/1060567294257123329",
      "date_published": "2018-11-08T00:00:00+00:00",
      "author": {
        "name": "withoutboats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "9dae526e-703d-4726-b68c-92f847e3c85f",
      "title": "After NLL: Moving from borrowed data and the sentinel pattern",
      "content_text": "Continuing on with my “After NLL” series, I want to look at another common error that I see and its solution: today’s choice is about moves from borrowed data and the Sentinel Pattern that can be used to enable them.",
      "url": "http://smallcultfollowing.com/babysteps/blog/2018/11/10/after-nll-moving-from-borrowed-data-and-the-sentinel-pattern/",
      "tweet_url": "https://twitter.com/nikomatsakis/status/1061363212191522816",
      "date_published": "2018-11-10T00:00:00-05:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "b8931a7e-08d1-406b-b751-6bd27a9d4d67",
      "title": "Middleware in Tide",
      "content_text": "After the positive response to the routing and extraction proposal in Tide, I’m pleased to say that an initial implementation is available on GitHub! As a testament to the strong foundation that Rust’s ecosystem provides, the basic framework implementation took only about 1,000 lines of code.",
      "url": "https://rust-lang-nursery.github.io/wg-net/2018/11/07/tide-middleware.html",
      "date_published": "2018-11-07T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "https://rust-lang-nursery.github.io/wg-net/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "bfe6aa2d-0dbd-4966-81cc-eebed27ca28d",
      "title": "Higher-Order Functions in Rust",
      "content_text": "Rust is an imperative language but it provides many tools in the standard library which adhere to a more functional style, like the Iterator trait and its methods like map, for_each, and filter. This is a quick run-down of how to define your own higher-order functions in Rust which can both take closures as parameters and return closures in such a way that you can use the two together.",
      "url": "https://dev.to/deciduously/higher-order-functions-in-rust-287h",
      "date_published": "2018-11-03T00:00:00+00:00",
      "author": {
        "name": "Ben Lovy",
        "url": "https://dev.to/deciduously"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "09e9a0eb-339f-496e-8477-911e89774938",
      "title": "Learning a new language for more than 2 months (feat. Exercism)",
      "content_text": "Usually I take about a week to learn a new language so I can start doing some real work with it. After all a programming language (at least the high level and dynamic ones) is just assignment, calculation, branching, looping and reuse (and in certain cases, concurrency/parallelism, not gonna dive deep in defining the difference though). Well, that was true until I started learning Rust, partly for my own leisure. I still don’t feel comfortable writing a complete Rust code. Though I really like the language.",
      "url": "https://cslai.coolsilon.com/2018/11/06/learning-a-new-language-for-more-than-2-months-feat-exercism/",
      "date_published": "2018-11-06T11:18:35+00:00",
      "author": {
        "name": "Jeffrey04",
        "url": "https://cslai.coolsilon.com/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "6e6bbbca-9a60-4c29-a050-1d34f08192ea",
      "title": "A New Way of Thinking",
      "content_text": "Rust was my language of the year. You know, that thing where programmers set out to learn a new programming language every year. Usually not to be productive at it but to familiarize themselves with current trends in language design, implementation, and paradigms. I had heard a lot of good stuff about Rust and decided late last year to make it my 2018 language. I’m only a few days in but I’ve been smacked by some of what I consider the best ideas in programming I’ve encountered yet.",
      "url": "https://boakye.yiadom.org/rust/new/",
      "date_published": "2018-11-04T23:59:50+00:00",
      "author": {
        "name": "Yaw Boakye",
        "url": "https://boakye.yiadom.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "495a9412-287b-4baf-af46-007603eff49a",
      "title": "A hammer you can only hold by the handle",
      "content_text": "Today we’re looking at the rust borrow checker from a different perspective. As you may know, the borrow checker is designed to safely handle memory allocation and ownership, preventing accessess to invalid memory and ensuring data-race freedom. This is a form of resource management: the borrow checker is tracking who’s in charge of a chunk of memory, and who is currently allowed to read or write to it. In this post, we’ll see how these facilities can be used to enforce higher-level API constraints in your libraries and software. Once you’re familiar with these techniques, we’ll cover how the same principles apply to advanced memory management and handling of other more abstract resources.",
      "url": "https://blog.systems.ethz.ch/blog/2018/a-hammer-you-can-only-hold-by-the-handle.html",
      "date_published": "2018-11-05T00:00:00+00:00",
      "author": {
        "name": "Andrea Lattuada",
        "url": "https://blog.systems.ethz.ch/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e8029bd5-78ca-4797-bf1b-9f909f132a4b",
      "title": "Monotron at Rust Belt Rust",
      "content_text": "So now @rustbeltrust is over, I thought it was worth writing down a few details about what Monotron can do. It's had a few upgrades since @RustFest Paris! I tried to keep them under wraps to avoid spoilers but I can share them now. This is an un-roll and re-edit of my Twitter thread, and the features listed here are in no particular order.",
      "url": "https://railwayelectronics.blogspot.com/2018/11/monotron-at-rust-belt-rust.html",
      "date_published": "2018-11-04T20:49:00.001+00:00",
      "author": {
        "name": "Jonathan Pallant",
        "url": "http://www.blogger.com/profile/01561773162764317663"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "14df2f8d-908b-4836-966f-b307f763319d",
      "title": "How to speed up the Rust compiler in 2018: NLL edition",
      "content_text": "Niko Matsakis recently blogged about the Rust compiler’s new borrow checker, which implements non-lexical lifetimes (NLL). The new borrow checker is a really nice improvement to Rust, because it accepts many sound programs that the old borrow checker rejected.",
      "url": "https://blog.mozilla.org/nnethercote/2018/11/06/how-to-speed-up-the-rust-compiler-in-2018-nll-edition/",
      "tweet_url": "https://twitter.com/nnethercote/status/1059600194839359488",
      "date_published": "2018-11-06T00:09:41+00:00",
      "author": {
        "name": "Nicholas Nethercote",
        "url": "https://blog.mozilla.org/nnethercote/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "b49cc876-bb7e-4861-a0d6-34b4396b3600",
      "title": "Rust Nightly, Travis CI and Code Coverage",
      "content_text": "How to setup test a Rust Nightly project with a workspace in Travis CI and collect coverage information with kcov and Codecov.",
      "url": "https://baptiste.gelez.xyz/~/Rust/rust-nightly-travis-ci-and-code-coverage/",
      "date_published": "2018-11-01T00:00:00+00:00",
      "author": {
        "name": "Baptiste Gelez",
        "url": "https://baptiste.gelez.xyz/"
      },
      "tags": [
        "DevOps and Deployment"
      ]
    },
    {
      "id": "57fd5a7a-0eb0-43fd-bf99-5b8a6a0e782c",
      "title": "Shifgrethor IV: Tracing",
      "content_text": "The post before this one covered how shifgrethor handles rooting: how we track for the garbage collector that this object is alive. That isn’t sufficient for implementing a tracing garbage collector though: the idea of a tracing garbage collector is that we can trace from rooted objects through all of the objects they reference. That way, instead of having to root everything you use, you can only root a few objects from which all of the live objects can be traced.",
      "url": "https://boats.gitlab.io/blog/post/shifgrethor-iv/",
      "tweet_url": "https://twitter.com/withoutboats/status/1058026467022520320",
      "date_published": "2018-10-31T00:00:00+00:00",
      "author": {
        "name": "withoutboats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "bfd4f2e7-3e44-4383-a144-ae5da7c664fa",
      "title": "After NLL: Interprocedural conflicts",
      "content_text": "In my previous post on the status of NLL, I promised to talk about “What is next?” for ownership and borrowing in Rust. I want to lay out the various limitat...",
      "url": "http://smallcultfollowing.com/babysteps/blog/2018/11/01/after-nll-interprocedural-conflicts/",
      "date_published": "2018-11-01T00:00:00-04:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "dd822196-d8f4-4764-9727-6096581c035a",
      "title": "On dealing with owning and borrowing in public interfaces",
      "content_text": "I’ve been writing on a few examples code lately to add to documentations of some crates of mine. I write a lot of code that creates new objects that need other objects in order to be built. Most of the APIs you can see around tend to love the borrow principle – and I do.",
      "url": "https://phaazon.net/blog/on-owning-borrowing-pub-interface",
      "date_published": "2018-11-04T01:30:00+00:00",
      "author": {
        "name": "Dimitri Sabadie",
        "url": "http://phaazon.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "7be81fee-ef29-448f-9e03-9be0fc63fbb7",
      "title": "Anchored and Uniform Paths",
      "content_text": "Rust 2018 is almost out the door, but there is one big decision the language team has yet to make. It has to do with the modules and paths system, so of course it is a very easy decision that no one has a strong opinion about. ;-)\nIn Rust 2018, we’ll be making some big changes to how paths work to try to create a more consistent experience. The “lodestar” (if you will) of these changes is an idea we call “1path:” the idea no matter where you are in your project, whether in a use statement or normal code, a path is interpreted the same way.",
      "url": "https://boats.gitlab.io/blog/post/anchored-uniform/",
      "tweet_url": "https://twitter.com/withoutboats/status/1058397311573868547",
      "date_published": "2018-11-02T00:00:00+00:00",
      "author": {
        "name": "withoutboats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "db47620d-045e-42dc-bc1a-6aedaed9d948",
      "title": "eyeoh: My first Rust library",
      "content_text": "I realized I kept copy and pasting (or re-writing) functions to take user input or read simple files into Rust variables. So I’ve been working on a Rust library that attempts to make these tasks easier.",
      "url": "https://sts10.github.io//2018/11/02/eyeoh-rust-library.html",
      "date_published": "2018-11-02T22:18:50+00:00",
      "author": {
        "name": "Sam Schlinkert",
        "url": "https://sts10.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "3c73e50b-c4cd-43ea-9214-49f711bf3058",
      "title": "MIR-based borrowck is almost here",
      "content_text": "Now that the final Rust 2018 Release Candidate has shipped, I thought it would be a good idea to do another update on the state of the MIR-based borrow check (aka NLL). Let’s get the highlights out of the way. Most importantly, Rust 2018 crates will use NLL by default. Once the Rust 2018 release candidate becomes stable, we plan to switch Rust 2015 crates to use NLL as well, but we’re holding off until we have some more experience with people using it in the wild.",
      "url": "http://smallcultfollowing.com/babysteps/blog/2018/10/31/mir-based-borrowck-is-almost-here/",
      "tweet_url": "https://twitter.com/nikomatsakis/status/1057637541241733122",
      "date_published": "2018-10-31T00:00:00-04:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "092a372d-fa4a-48e7-8382-c85069e9a425",
      "title": "Pyro - A fast, small and documented Entity Component System",
      "content_text": "In contrast to many other ECS, iteration in Pyro is fully linear. Different combinations of components always live in the same storage. The advantage is that iteration is always fully linear and no cache is wasted. The storage behind the scene is a SoA storage.",
      "url": "https://maikklein.github.io/pyro-ecs/",
      "date_published": "2018-10-30T00:00:00+00:00",
      "author": {
        "name": "Maik Klein",
        "url": "https://maikklein.github.io/"
      },
      "tags": [
        "Games and Graphics",
        "Crates"
      ]
    },
    {
      "id": "38c548bb-e3d4-428d-9a95-89ca0c8ce3c9",
      "title": "What is Rusty ECMA Script Scanner (RESS)",
      "content_text": "After releasing the Rusty ECMA Script Scanner (RESS) 0.5, my next big effort in the Rust+Javascript space is to increase the amount of documentation. This post is an effort to clarify what RESS does and how someone might use it.",
      "url": "https://wiredforge.com/blog/rusty_ecma/what-is-a-scanner/index.html",
      "date_published": "2018-10-02T00:00:00+00:00",
      "author": {
        "name": "Robert Masen",
        "url": "https://wiredforge.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "13502f64-39c2-4eae-9825-b68c2056bc66",
      "title": "The Embedded Working Group Newsletter - Embedded on Stable!",
      "content_text": "This is a special \"spotlight\" edition of the newsletter, where we look at a few topics in a bit more detail: Embedded Rust Applications on Stable, Cortex-A team, shared-bus, and more.",
      "url": "https://rust-embedded.github.io/blog/2018-10-28-newsletter-14/",
      "tweet_url": "https://twitter.com/rustembedded/status/1057222850787053568",
      "date_published": "2018-10-28T00:00:00+00:00",
      "author": {
        "name": "The Embedded Working Group",
        "url": "https://rust-embedded.github.io/blog"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "4b5e36d0-0775-48da-a6f9-ab19ce9a5aae",
      "title": "Serverless Rust",
      "content_text": "This is going to be the first post ( and hopefully not last ) in a series of posts about writing (and thinking about) serverless applications in Rust. Stay tuned…",
      "url": "https://medium.com/@softprops/serverless-rust-318732a3596",
      "tweet_url": "https://twitter.com/softprops/status/1057094273437437953",
      "date_published": "2018-10-30T02:08:22.553+00:00",
      "author": {
        "name": "Doug Tangren",
        "url": "https://medium.com/@softprops"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "d8946b80-5782-44b2-80d9-9ac2e18eb5d0",
      "title": "Qt applications with Cargo",
      "content_text": "This blog shows how Qt applications can be built with Cargo. The goal is to make compiling them as simple as installing Qt and running cargo build.",
      "url": "https://www.vandenoever.info/blog/2018/10/30/building_qt_apps_with_cargo.html",
      "date_published": "2018-10-30T00:00:00+00:00",
      "author": {
        "name": "Jos van den Oever",
        "url": "https://www.vandenoever.info/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "77d7a663-c11c-476c-a180-a84d0edf2975",
      "title": "Announcing Gotham 0.3",
      "content_text": "First of all, hello there! This is the first announcement after the call for maintainers back in summer, and includes the efforts of several new faces: @whitfin, @nyarly, @colinbankier. Together, as well as input from the original authors @bradleybeddoes and @smangelsdorf, we are the new maintainers of the Gotham project. Today we’re excited to announce the release of Gotham 0.3, which follows the evolution of the broader Rust ecosystem.",
      "url": "https://gotham.rs/blog/release/2018/10/29/gotham-0.3.html",
      "date_published": "2018-10-29T15:31:00+00:00",
      "author": {
        "name": "@whitfin, @nyarly, @colinbankier",
        "url": "https://gotham.rs/blog"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "1f6655e8-89c4-4e30-91e6-776449b88293",
      "title": "Finding and fixing memory leaks in a Hyper application or 'How I Learned to Stop Worrying and Love the Allocator'",
      "content_text": "I was doing some initial load testing of the next version our application, so that performance regressions can be tracked, when I noticed something. After only a few seconds of throwing wrk at it, our backend was using 1.3GB of memory, growing at around 50MB/s. Yikes.",
      "url": "https://blog.1aim.com/2018/10/finding-and-fixing-memory-leaks-in-a-hyper-application-or-how-i-learned-to-stop-worrying-and-love-the-allocator/",
      "date_published": "2018-10-29T00:00:00+00:00",
      "author": {
        "name": "Ferdia McKeogh",
        "url": "https://blog.1aim.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "268e1717-7988-4cb0-83e4-f4c902a969a8",
      "title": "Auth Web Microservice with rust using Actix-Web - Part 2",
      "content_text": "Picking up from part one, we now have as server that takes an email address from a request and spits out a JSON response with an invitation object. In part one I said that we will send an email to the user, after some thought and feedback, we will be skipping this part now (look out for part 3). For now we will use the http response from the server to verify the email so to speak.",
      "url": "https://hgill.io/posts/auth-microservice-rust-actix-web-diesel-complete-tutorial-part-2/",
      "date_published": "2018-10-28T13:02:37+01:00",
      "author": {
        "name": "Harry Gill",
        "url": "https://hgill.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "6bf46601-8824-4e8e-b625-f3b6f9d074da",
      "title": "From Rust to beyond: The PHP galaxy",
      "content_text": "This blog post is part of a series explaining how to send Rust beyond earth, into many different galaxies. The galaxy we will explore today is the PHP galaxy. This post will explain what PHP is, how to compile any Rust program to C and then to a PHP native extension.",
      "url": "https://mnt.io/2018/10/29/from-rust-to-beyond-the-php-galaxy/",
      "date_published": "2018-10-29T10:17:12+00:00",
      "author": {
        "name": "Ivan Enderlin",
        "url": "https://mnt.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e5f786a1-6dd9-427f-8202-03b5a38a7ace",
      "title": "My release checklist for Rust programs",
      "content_text": "After some practice with three of my Rust projects (fd, hyperfine and bat), my workflow has converged to something that works quite well and avoids many pitfalls that I have walked into in the past. My hope in writing this post is that this process can be useful for others as well. The following is my release checklist for fd, but I have very similar lists for other projects.",
      "url": "https://dev.to/sharkdp/my-release-checklist-for-rust-programs-1m33",
      "date_published": "2018-10-28T00:00:00+00:00",
      "author": {
        "name": "David Peter",
        "url": "https://dev.to/sharkdp"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "7141c453-0f38-4d85-a3bd-f01abc08ad77",
      "title": "2d graphics in Rust discussion - A look at GPU memory management",
      "content_text": "In this post I'll write about an piece of the low level details of an hypothetical rust 2d graphics crate built on top of gfx-hal. Gfx provides a vulkan-like interface implemented on top of vulkan, d3d12, metal or flavors of OpenGL. just like the previous post this is in the context of recent discussions about a 2d graphics crate in rust.",
      "url": "https://nical.github.io/posts/rust-2d-graphics-02.html",
      "date_published": "2018-10-28T00:00:00+02:00",
      "author": {
        "name": "Nical",
        "url": "https://nical.github.io/index.html"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "427d9cb0-4562-45c7-b6f0-3defc4df172b",
      "title": "Improving ndarray-csv: Goodbye failure, Hello Extension Traits",
      "content_text": "Two weeks ago, I wrote a blog post explaining some design decisions that I made for the ndarray-csv crate. Based on some excellent Reddit comments and GitHub issues from dtolnay, I have amended some of these decisions.",
      "url": "https://paulkernfeld.com/2018/10/27/improving-ndarray-csv.html",
      "date_published": "2018-10-27T00:00:00+00:00",
      "author": {
        "name": "Paul Kernfeld",
        "url": "https://paulkernfeld.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e64df9c0-3056-4720-837e-670543317c59",
      "title": "Problems Scaling A Large Multi-Crate Rust Project",
      "content_text": "We have 85K lines of Rust code implementing the backend of our Pernosco debugger. To impose some modularity constraints and to reduce build times, from the beginning we organized our code as a large set of crates in a single Cargo workspace in a single Gitlab repository. Currently we have 48 crates. This has mostly worked pretty well but as the number of our crates keeps increasing, we have hit some serious scalability problems.",
      "url": "https://robert.ocallahan.org/2018/10/problems-scaling-large-multi-crate-rust.html?m=1",
      "tweet_url": "https://twitter.com/rocallahan/status/1055316023098793984",
      "date_published": "2018-10-25T00:00:00+00:00",
      "author": {
        "name": "Robert O'Callahan",
        "url": "https://robert.ocallahan.org/?m=1"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "8c9a2022-1124-47da-94c4-a85e808a257c",
      "title": "10x Your JavaScript With WASM And Rust",
      "content_text": "This is part four in a series of Rust on Azure Functions. The other parts are about performance comparisons (part 1 and part 2), and explaining the PMX algorithm (part 3). If you want to learn more about Genetic Algorithms be sure to read part 3 first).",
      "url": "https://blog.x5ff.xyz/blog/azure-functions-wasm-rust-ai/",
      "date_published": "2018-10-25T00:00:00+00:00",
      "author": {
        "name": "Claus",
        "url": "https://blog.x5ff.xyz/blog"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "451e814b-f0e1-4d88-bdda-9862ab107902",
      "title": "The Case For Macros",
      "content_text": "I know a few Rustaceans who are wary of macros. One privately admitted to hating them with a passion. They are right; macros can make code harder to understand (both for humans and computers, for example many clippy lints have an explicit check to only lint outside of macros), so they should be used with some caution.",
      "url": "https://llogiq.github.io/2018/10/25/macros.html",
      "tweet_url": "https://twitter.com/llogiq/status/1055557234170699777",
      "date_published": "2018-10-25T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "80d71718-3acf-49d1-ad47-3e05c5da17a2",
      "title": "Parsing logs 230x faster with Rust",
      "content_text": "Perhaps surprisingly, one of the most challenging things about operating RubyGems.org is the logs. A single day of request logs is usually around 500 gigabytes on disk. So every day, we generate about 500 files that are 85MB on disk, and contain about a million streaming JSON objects that take up 1GB when uncompressed. What we want out of those files is incredibly tiny—a few thousand integers, labelled with names and version numbers. Without any real idea of how to get those counts out of S3, I started by writing a proof of concept Ruby script that could parse one of the 500 log files and print out stats from it. Even on my super-fast laptop, my prototype script would take more than 16 hours to parse 24 hours worth of logs.",
      "url": "https://andre.arko.net/2018/10/25/parsing-logs-230x-faster-with-rust/",
      "tweet_url": "https://twitter.com/indirect/status/1055897304866025473",
      "date_published": "2018-10-25T00:00:00+00:00",
      "author": {
        "name": "Andre Arko",
        "url": "https://plus.google.com/116392164619002275727"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "88e3b29b-1f9a-41a2-bb8a-9f73310c0352",
      "title": "Shifgrethor III: Rooting",
      "content_text": "After the digression in the previous post, it’s time to get back to what I promised in the first post: a look at how shifgrethor handles rooting. Shifgrethor’s solution is somewhat novel and takes advantage of some of Rust’s specific features, so I want to start by looking briefly at some of the other options.",
      "url": "https://boats.gitlab.io/blog/post/shifgrethor-iii/",
      "tweet_url": "https://twitter.com/withoutboats/status/1055138041629736960",
      "date_published": "2018-10-24T00:00:00+00:00",
      "author": {
        "name": "withoutboats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "3db4746e-d5ac-46c7-af24-a25e2db1b7d2",
      "title": "Announcing Rust 1.30",
      "content_text": "The Rust team is happy to announce a new version of Rust, 1.30.0. Rust 1.30 is an exciting release with a number of features: Procedural Macros, Module system improvements, Raw Identifiers, and more.",
      "url": "https://blog.rust-lang.org/2018/10/25/Rust-1.30.0.html",
      "tweet_url": "https://twitter.com/rustlang/status/1055499747056852993",
      "date_published": "2018-10-25T00:00:00+00:00",
      "author": {
        "name": "The Rust Core Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a758c495-92fa-476d-9758-a916dc50c2f9",
      "title": "Summer School With The Rust Compiler",
      "content_text": "Learning Rust is hard for everyone, but it’s even worse for me because I’ve been working with Ruby during past ten years. Switching to Rust from Ruby is leaving an anything-goes hippie commune to a summer school for delinquent programmers run by a sadistic and unforgiving teacher. Why would anyone use a compiler like this? The answer is simple: to learn how to write better code.",
      "url": "http://patshaughnessy.net/2018/10/24/summer-school-with-the-rust-compiler",
      "tweet_url": "https://twitter.com/pat_shaughnessy/status/1055194650825248769",
      "date_published": "2018-10-24T03:00:00+00:00",
      "author": {
        "name": "Pat Shaughnessy",
        "url": "http://patshaughnessy.net/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "1025ea91-d834-4f58-97cc-dabcee3b86df",
      "title": "Multithreading Rust and Wasm",
      "content_text": "When WebAssembly was first shipped it was an MVP which, while minimal, has spawned a huge number of exciting projects which work today across all major browsers. Rust has capitalized on the wasm MVP’s success as well with tools like wasm-bindgen and wasm-pack by making the MVP feel less minimal. WebAssembly is yet more ambitious, though! Since inception it’s always been intended to extend the WebAssembly specification with new features and functionality.",
      "url": "https://rustwasm.github.io/2018/10/24/multithreading-rust-and-wasm.html",
      "tweet_url": "https://twitter.com/rustwasm/status/1054724935174811648",
      "date_published": "2018-10-24T00:00:00+00:00",
      "author": {
        "name": "Alex Crichton",
        "url": "https://rustwasm.github.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "96f12355-f732-45f5-9ca2-d2e68bc741ab",
      "title": "Plumbing the Deps of the Crate: Caching Rust Docker Builds",
      "content_text": "Learn how to cache your Docker builds with Rust better so you don't keep downloading and building your deps over and over and over again!",
      "url": "https://mgattozzi.com/caching-rust-docker-builds/",
      "tweet_url": "https://twitter.com/mgattozzi/status/1054577001405837312",
      "date_published": "2018-10-23T03:32:10+00:00",
      "author": {
        "name": "Michael Gattozzi",
        "url": "https://mgattozzi.com/"
      },
      "tags": [
        "DevOps and Deployment"
      ]
    },
    {
      "id": "fac60173-70f5-4682-a698-716cf05306ce",
      "title": "korq: Kubernetes Dynamic Log Tailing Utility",
      "content_text": "K∅RQ is used for tailing pod logs concurrently and following groups at once. It was basically a need to follow logs during deployment and see how instances behave during and after deployment. This is the main motive behind K∅RQ.",
      "url": "https://vertexclique.github.io/korq/",
      "tweet_url": "https://twitter.com/vertexclique/status/1054458508576468993",
      "date_published": "2018-10-23T00:00:00+00:00",
      "author": {
        "name": "Mahmut Bulut",
        "url": "https://vertexclique.github.io/"
      },
      "tags": [
        "DevOps and Deployment",
        "Tools and Applications"
      ]
    },
    {
      "id": "97757259-e11d-4a4f-88cb-2653ca3cb977",
      "title": "Hardware Interrupts | Writing an OS in Rust",
      "content_text": "In this post we set up the programmable interrupt controller to correctly forward hardware interrupts to the CPU. To handle these interrupts we add new entries to our interrupt descriptor table, just like we did for our exception handlers. We will learn how to get periodic timer interrupts and how to get input from the keyboard.",
      "url": "https://os.phil-opp.com/hardware-interrupts/",
      "date_published": "2018-10-23T00:00:00+00:00",
      "author": {
        "name": "Philipp Oppermann",
        "url": "https://os.phil-opp.com/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "d418a0ea-dbef-4bfa-bc74-827185aef57c",
      "title": "Auth Web Microservice with rust using Actix-Web",
      "content_text": "We are going to create a web-server in rust that only deals with user registration and authentication. I will be explaining the steps in each file as we go. The complete project code is here repo. Please take all this with a pinch of salt as I’m a still a noob to Rust.",
      "url": "https://hgill.io/posts/auth-microservice-rust-actix-web-diesel-complete-tutorial-part-1/",
      "tweet_url": "https://twitter.com/mygnu_/status/1054377055603884032",
      "date_published": "2018-10-08T13:02:37+01:00",
      "author": {
        "name": "Harry Gill",
        "url": "https://hgill.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "4c54199d-d367-4525-8202-cba2c82afa3d",
      "title": "Rust has higher kinded types already... sort of",
      "content_text": "In Rust, a type which takes type parameters (Rc<T>, Vec<T>, HashMap<K, V>, etc) is only a valid type when all type parameters are specified. In other words, Rc, Vec, and HashMap<K> are not types. You can’t have a variable of type Rc. You can’t pass Rc as a parameter to other types. The ability to have such things be actual types is a feature called higher kinded types (HKT).",
      "url": "https://joshlf.com/post/2018/10/18/rust-higher-kinded-types-already/",
      "date_published": "2018-10-18T00:00:00+00:00",
      "author": {
        "name": "Joshua Liebow-Feeser",
        "url": "https://joshlf.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "fae7cb69-a7bf-4cb1-9d1d-f5e703312ef7",
      "title": "Rust can be difficult to learn and frustrating, but it’s also the most exciting thing in software development in a long time",
      "content_text": "I recently decided to put serious effort into learning the Rust programming language. I saw it coming up frequently in interesting projects (e.g. ripgrep) and kept hearing good things about it. My hesitation to picking up Rust since its 1.0 release in 2015 came from two fronts. First, I’m completely invested in Go because of InfluxDB. Second, I heard that it was not the easiest thing to learn. While I don’t normally shy away from difficult tasks, I was hesitant because I believe that many developer tools that take off do so because they are easy to use or give developers significant productivity gains. More often than not, I want to invest my time in tools that I think have longevity that will get some critical mass in the market.",
      "url": "https://www.influxdata.com/blog/rust-can-be-difficult-to-learn-and-frustrating-but-its-also-the-most-exciting-thing-in-software-development-in-a-long-time/",
      "tweet_url": "https://twitter.com/pauldix/status/1054445834983612416",
      "date_published": "2018-10-22T18:45:16+00:00",
      "author": {
        "name": "Paul Dix",
        "url": "https://www.influxdata.com/blog/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "0367445a-ecf2-4c7a-9829-1b38d731036c",
      "title": "Release of glsl-quasiquote-0.2 with support for GLSL pragmas",
      "content_text": "glsl-quasiquote-0.2 was released early this morning. This new version provides a more stable public API. Two major changes: The glsl_str! proc-macro would have only survived the 0.1 version. It’s now deprecated and will be removed soon. The glsl! proc-macro now supports GLSL pragmas (both #version and #extension).",
      "url": "https://phaazon.net/blog/glsl-quasiquote-0.2",
      "date_published": "2018-10-22T02:00:00+00:00",
      "author": {
        "name": "Dimitri Sabadie",
        "url": "http://phaazon.net/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "60825132-c54b-4297-9f81-936601b76f64",
      "title": "My Experience With Learning Rust",
      "content_text": "Although I didn’t start writing this blog when I started writing in Rust, I remember clearly why I started writing in Rust. From what I had been doing in C#, none of it utilized multiple threads. Multi-threaded programming had always been a sore topic for me. Things like thread synchronization and message passing never really made sense to me. I learned Rust mainly due to its promises for ease of programming for multiple threads. Once hearing that things like parts of Firefox were written using it, and the Mozilla themselves were very strongly invested in Rust, I had more reason to start writing in it. I’d assume that if Mozilla were to invest so much in a programming language, it must have some sort of benefits over your usual C and C++ programming languages. Even further than that, I’ve heard of some game studios adopting Rust in their games and I was pretty much hooked at that point.",
      "url": "https://medium.com/@nathanielbarragan/my-experience-with-learning-rust-bbcb6b7c1063",
      "date_published": "2018-10-22T02:29:02.205+00:00",
      "author": {
        "name": "Nathaniel Barragan",
        "url": "https://medium.com/@nathanielbarragan"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "ec7874f9-e0a0-453b-b723-bdcb56e8ad09",
      "title": "Rust Mesh Optimizer",
      "content_text": "When triangle meshes are rendered by a GPU, there are pipeline stages that need to load and process vertex and index data. The efficiency of this process will depend on the layout of the data, and how the GPU is designed. There is an excellent library from Arseny Kapoulkine called meshoptimizer, which provides a variety of algorithms for optimizing geometry for the GPU.",
      "url": "https://www.wihlidal.com/blog/pipeline/2018-10-20-rust-mesh-optimizer/",
      "tweet_url": "https://twitter.com/gwihlidal/status/1053604607979651073",
      "date_published": "2018-10-20T00:00:00+00:00",
      "author": {
        "name": "Graham Wihlidal",
        "url": "https://www.wihlidal.com/blog/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "c2e61957-0d95-43e3-af09-3173307bf95c",
      "title": "Rust's Orphan Rule Is Good, Actually",
      "content_text": "The orphan trait rule in Rust is interesting and works impressively well for what it intends to do. While I'm often frustrated by the limitations it imposes, it absolutely succeeds at removing ambiguity in whether or not a trait will be implemented for a type.",
      "url": "https://davidlegare.ghost.io/rusts-orphan-rule/",
      "date_published": "2018-10-20T05:42:04+00:00",
      "author": {
        "name": "David LeGare",
        "url": "https://davidlegare.ghost.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "8157d765-72cb-40a0-b59f-6b4ae2ae173d",
      "title": "Rust RwLock and Mutex Performance Oddities",
      "content_text": "Recently I have been working on Rust datastructures once again. In the process I wanted to test how my work performed compared to a standard library RwLock and Mutex. On my home laptop the RwLock was 5 times faster, the Mutex 2 times faster than my work.\n\nSo checking out my code on my workplace workstation and running my bench marks I noticed the Mutex was the same - 2 times faster. However, the RwLock was 4000 times slower.",
      "url": "https://fy.blackhats.net.au/blog/html/2018/10/19/rust_rwlock_and_mutex_performance_oddities.html",
      "tweet_url": "https://twitter.com/Erstejahre/status/1053431102457561088",
      "date_published": "2018-10-19T00:00:00+00:00",
      "author": {
        "name": "Firstyear",
        "url": "https://fy.blackhats.net.au/blog/html/index.html"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "4f32d4ec-419f-4025-b508-3c486ffb059e",
      "title": "Towards fearless SIMD",
      "content_text": "SIMD is a powerful performance technique, and is especially valuable in signal and image processing applications. I will be using it very extensively in my synthesizer, and also it’s increasingly used in xi-editor to optimize string comparisons and similar primitives.",
      "url": "https://raphlinus.github.io/rust/simd/2018/10/19/fearless-simd.html",
      "date_published": "2018-10-19T17:03:42+00:00",
      "author": {
        "name": "Raph Levien",
        "url": "https://raphlinus.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c1a9ce3b-fd19-4285-b465-ab7607792297",
      "title": "Serverless Rust with AWS Lambda and WebAssembly",
      "content_text": "In this post, I look at how WebAssembly can be used to create serverless functions and demonstrate an AWS Lambda function written entirely in Rust.",
      "url": "https://blog.scottlogic.com/2018/10/18/serverless-rust.html",
      "date_published": "2018-10-18T00:00:00+00:00",
      "author": {
        "name": "Colin Eberhardt",
        "url": "https://www.scottlogic.com/blog"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "b39581e7-2147-4b4a-bfdf-b19141e80d89",
      "title": "Is Rust functional?",
      "content_text": "Rust is an imperative systems programming language. Why does it have so much attention from functional programming advocates? Is it hiding a functional nature?",
      "url": "https://www.fpcomplete.com/blog/2018/10/is-rust-functional",
      "date_published": "2018-10-18T03:02:08+00:00",
      "author": {
        "name": "Michael Snoyman",
        "url": "https://www.fpcomplete.com/blog"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "9a9651de-466e-411e-9449-c1d6878ffba0",
      "title": "Game Dev From Zero - Part 1: Hello",
      "content_text": "With this article, I want to introduce you to game development. I want to give you a little tour of where to start, how to explore possibilities and revive my journey a little bit at the same time. I will try to construct different games from the ground up while writing this article, so you can experience game-dev live.",
      "url": "https://hashnode.com/post/game-dev-from-zero-part-1-hello-rust-lang-cjn3brwto001jv7s2e533bdfc",
      "tweet_url": "https://twitter.com/minecrawlerx/status/1050095684295303168",
      "date_published": "2018-10-11T00:00:00+00:00",
      "author": {
        "name": "Marco Alka",
        "url": "https://hashnode.com/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "7141f981-74d7-4df6-9ce2-b857fff58557",
      "title": "Routing and extraction in Tide: a first sketch",
      "content_text": "This post continues the series on Tide, sketching a possible design for routing and extraction that combines some of the best ideas from frameworks like Rocket, Actix, and Gotham.",
      "url": "https://rust-lang-nursery.github.io/wg-net/2018/10/16/tide-routing.html",
      "date_published": "2018-10-16T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "https://rust-lang-nursery.github.io/wg-net/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "1ac9419e-3a15-4c2e-961d-20160f9ef6e9",
      "title": "Gfx-hal Tutorial part 2: Vertex buffers",
      "content_text": "For the last two parts of this tutorial, all we’ve had to look at on-screen is a single blueish triangle. In this part, we want to display a more complex shape, with more variation in color. To do this, we’ll have to stop hard-coding our triangle mesh in the vertex shader. (And start hard-coding it in the source code!)",
      "url": "https://falseidolfactory.com/2018/10/09/gfx-hal-part-2-vertex-buffers.html",
      "date_published": "2018-10-09T00:00:00+00:00",
      "author": {
        "name": "Mistodon",
        "url": "https://falseidolfactory.com/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "9ed3a1ea-2c0d-4508-a2d7-69e9bb07557a",
      "title": "New crate: pin-cell",
      "content_text": "Today I realized a new crate called pin-cell. This crate contains a type called PinCell, which is a kind of cell that is similar to RefCell, but only can allow pinned mutable references into its interior. Right now, the crate is nightly only and no-std compatible.\nHow is the API of PinCell different from RefCell? When you call borrow_mut on a RefCell, you get a type back that implements DerefMut, allowing you to mutate the interior value.",
      "url": "https://boats.gitlab.io/blog/post/pin-cell/",
      "date_published": "2018-10-09T00:00:00+00:00",
      "author": {
        "name": "withoutboats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "620115c2-e4f9-4c5c-953a-d891cc636b01",
      "title": "Rust SGX SDK v1.0.4 Released",
      "content_text": "Rust SGX SDK, maintained by Baidu X-Lab, is a convenient framework to develop secure trusted computing applications for Intel SGX enclaves. Based on it, developers can easily build trusted SGX enclaves with memory safety guarantees. This adds an extra strong (and strongest ever) security layer over the SGX isolation, further keeping attackers away from the secrets in enclave even if they compromised the privileged software environment (operating system, hypervisor, etc.). Rust SGX SDK thus means a lot to privacy protection and trusted computing on public cloud platforms and blockchains.",
      "url": "https://medium.com/baiduxlab/rust-sgx-sdk-v1-0-4-released-9c7d9056a888",
      "date_published": "2018-10-09T17:50:10.689+00:00",
      "author": {
        "name": "Baidu X-Lab",
        "url": "https://medium.com/@baidu.xlab"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "0f56caac-74c9-414c-89d5-fe1cb9a74424",
      "title": "Rust and the Three Laws of Informatics",
      "content_text": "What are the most important properties of programs, and how much do existing languages help? How is Rust different?",
      "url": "https://medium.com/@schemouil/rust-and-the-three-laws-of-informatics-4324062b322b",
      "date_published": "2018-10-09T07:42:09.509+00:00",
      "author": {
        "name": "Simon Chemouil",
        "url": "https://medium.com/@schemouil"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "b138af7a-2e74-44c1-b362-03af475f050b",
      "title": "Shifgrethor I: Garbage collection as a Rust library",
      "content_text": "I’m really excited to share with you an experiment that I’ve been working on for the past 5 or 6 weeks. It’s a Rust library called shifgrethor. shifgrethor implements a garbage collector in Rust with an API I believe to be properly memory safe.\nI’ll be going through all of the technical details in future blog posts, so I want to kick this series off with a high level overview of the project’s purpose and design decisions.",
      "url": "https://boats.gitlab.io/blog/post/shifgrethor-i/",
      "tweet_url": "https://twitter.com/withoutboats/status/1052571664121257986",
      "date_published": "2018-10-16T00:00:00+00:00",
      "author": {
        "name": "withoutboats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "2b068be3-88b7-4d60-ad38-cfd40019cf5f",
      "title": "imag: Call for Participation (1)",
      "content_text": "This is the first call for participation for the imag project. I have no experience writing such calls for participation, so please bear with me!\n\nRight now, the imag ecosystem has some tools available which are already usable and in rather good shape. There is a contact manager, a diary and a notes tool, a habit tracker and a time tracker are there as well, though those are not extensively tested by now.",
      "url": "https://imag-pim.org/blog/2018/10/10/call-for-participation-1/",
      "date_published": "2018-10-10T08:42:06+00:00",
      "author": {
        "name": "imag",
        "url": "https://imag-pim.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "cb2bfe24-75a2-43d6-bebc-b8f8ac610c95",
      "title": "Rust Programming with Dynamsoft Barcode Reader",
      "content_text": "A few days ago, I accepted a new challenge of creating a simple command line barcode reader using Rust and Dynamsoft Barcode Reader SDK. Rust is a system programming language similar to C++. The learning process did not go through smoothly as I expected. It is not as easy as learning other high-level programming languages such as Java and Python. In this article, I share my experience of learning and using Rust.",
      "url": "https://medium.com/@yushulx/rust-programming-with-dynamsoft-barcode-reader-3d1e83004bba",
      "date_published": "2018-10-11T00:26:20+00:00",
      "author": {
        "name": "Xiao Ling",
        "url": "https://medium.com/@yushulx"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "2657be5e-f98f-48a7-9e0a-c4ad2c183cba",
      "title": "ruplacer: find and replace text in source files",
      "content_text": "Today I’d like to talk about a command-line tool I’ve been working on. It’s called ruplacer and as the name suggest, it’s rually cool and written in Rust. Basically, it finds and replaces text in source files.",
      "url": "https://dmerej.info/blog/post/ruplacer/",
      "date_published": "2018-10-14T12:34:43+00:00",
      "author": {
        "name": "Dimitri Merejkowsky",
        "url": "https://dmerej.info/blog/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "2e4df02b-88e0-4510-851a-d1dce6014568",
      "title": "Configuration envy",
      "content_text": "For many of my use cases for running Rust applications, storing configuration in file format is less attractive as I’m typically running Rust inside docker containers and container orchestrators typically encourage the use of standard interfaces like the env for configuration. So I pondered 🤔, “What if I could treat my program’s env parameterization with the same level of typing I treat my functions and enclosing types with while getting everything one get’s from using serde for free?” That would be the bee’s knees 🐝 . Enter: envy.",
      "url": "https://medium.com/@softprops/configuration-envy-a09584386705",
      "tweet_url": "https://twitter.com/softprops/status/1052052277266173952",
      "date_published": "2018-10-16T04:17:18.209+00:00",
      "author": {
        "name": "Doug Tangren",
        "url": "https://medium.com/@softprops"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "0c92d9d7-26ba-4152-9820-08ef1011689d",
      "title": "Serverless Rust with Cloudflare Workers",
      "content_text": "It's exciting times for Rust developers. Cloudflare's Serverless Platform, Cloudflare Workers, allows you to compile your code to WASM, upload to 150+ data centers and invoke those functions just as easily as if they were JavaScript functions. Today I'm going to convert my lipsum generator to use Rust and explore the developer experience (hint: it's already pretty nice).",
      "url": "https://blog.cloudflare.com/cloudflare-workers-as-a-serverless-rust-platform/",
      "date_published": "2018-10-16T12:00:00+00:00",
      "author": {
        "name": "Steven Pack",
        "url": "https://blog.cloudflare.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "0c44f78b-c47a-4be2-9e30-4fa129304a9c",
      "title": "Pi-hole: Announcing Our RESTful API",
      "content_text": "The API is written in Rust, a language new to the Pi-hole project. Rust is a safe and fast language which matches well with our goals for the API. It is statically typed and prevents whole categories of errors while being productive and extendable.",
      "url": "https://pi-hole.net/2018/10/15/announcing-our-restful-api-contributions-welcome/",
      "date_published": "2018-10-15T13:00:33+00:00",
      "author": {
        "name": "Pi-hole",
        "url": "https://pi-hole.net/blog/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "351bd1f1-82e3-4b80-882e-9b2aac228c5a",
      "title": "Future directions for cbindgen (rust-ffi)",
      "content_text": "There’s been a persistent set of issues we’ve had with cbindgen that have not been solved. They all roughly result from the same problem; cbindgen is a standalone parser of rust code, not a rustc plugin. What this means is that cbindgen doesn’t understand your rust library like the compiler does. We’ve tried to minimize the differences here by making cbindgen smarter, but it’s not obvious that’s the best approach going forward.",
      "url": "http://dreamingofbits.com/post/future-directions-for-cbindgen-rust-ffi/",
      "date_published": "2018-10-05T00:00:00+00:00",
      "author": {
        "name": "Ryan Hunt",
        "url": "http://dreamingofbits.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "476c5ab3-1148-4507-b294-8e4c06a188fd",
      "title": "Rust and features discoverability",
      "content_text": "Whatever the project you work on, you should must document your code. There are several situations – let’s call this the First Hypothesis",
      "url": "https://phaazon.net/blog/rust-features-documentation",
      "date_published": "2018-10-13T23:37:00+00:00",
      "author": {
        "name": "Dimitri Sabadie",
        "url": "http://phaazon.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "7abf3b08-b87f-4bd1-a4f4-4d79f4216413",
      "title": "Amethyst is growing; news on ongoing projects",
      "content_text": "We want to share some of the progress being made on Amethyst! As we've had a lot of expansion, we've also revamped the way we manage the project and we have some very interesting new features being worked on.",
      "url": "https://www.amethyst.rs/blog/dev-news-10-2018/",
      "date_published": "2018-10-14T00:00:00+00:00",
      "author": {
        "name": "Moxinilian (Théo Degioanni)",
        "url": "https://www.amethyst.rs/blog"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "e7b5dffe-46bb-42a8-a17c-2ede829080ff",
      "title": "Const-fn compile-time SUBLEQ interpreter",
      "content_text": "With the minimal subset of const fn becoming stable soon (in the second next Rust version), I wanted to give const fns a try and test what is possible with them. We implemented a compile-time SUBLEQ interpreter which only uses const-fns, which you can find on the playground. Let's walk through the process of building this abomination :)",
      "url": "https://www.reddit.com/r/rust/comments/9o6vzo/constfn_compiletime_subleq_interpreter/",
      "date_published": "2018-10-15T09:10:49+11:00",
      "author": {
        "name": "u/oberien",
        "url": "https://www.reddit.com/user/oberien"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "3d3a61ed-ff74-4407-b508-0c7405b8c653",
      "title": "Following up on the 2d graphics in Rust discussion",
      "content_text": "Ralph Levien recently published A crate I want: 2d graphics on his blog, which started some interesting discussions on reddit. At the same time there is a nascent discussion on the draw2d repository (which doesn't have any code at this point) about a potential 2d graphics crate.",
      "url": "https://nical.github.io/posts/rust-2d-graphics-01.html",
      "date_published": "2018-10-14T00:00:00+02:00",
      "author": {
        "name": "Nical",
        "url": "https://nical.github.io/index.html"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "11700b19-9b9f-44c3-9708-2c4cd7f0d721",
      "title": "Reflections on Implementing the ndarray-csv Crate",
      "content_text": "Recently, I wrote ndarray-csv, a Rust crate for converting between CSV files and 2D arrays. There are already crates for CSV and arrays, so how exciting could this possibly be? Actually, there was a lot more to it than I had thought: although it started out as a two-hour project, I ended up rewriting the entire thing three times!",
      "url": "https://paulkernfeld.com/2018/10/13/ndarray-csv-reflections.html",
      "tweet_url": "https://twitter.com/occupy_paul_st/status/1051118905236828161",
      "date_published": "2018-10-13T00:00:00+00:00",
      "author": {
        "name": "Paul Kernfeld",
        "url": "https://paulkernfeld.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "ceb7c2a6-d905-4b13-8f42-4aa42cd9b3e3",
      "title": "Building a command-line todo app in Rust",
      "content_text": "In this tutorial, we are going to create a simple command-line todo app. By the end of this tutorial, you should have a basic understanding of Rust programming language, building command-line apps in Rust, and performing file-system operations in Rust.",
      "url": "https://medium.com/@devashishdxt/building-a-command-line-todo-app-in-rust-a89bb7af91c3",
      "tweet_url": "https://twitter.com/devashishdxt/status/1050738222706413569",
      "date_published": "2018-10-12T13:14:56.867+00:00",
      "author": {
        "name": "Devashish Dixit",
        "url": "https://medium.com/@devashishdxt"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "08336620-497d-49b2-9e77-eeb36d26f512",
      "title": "Fixing a Clippy crash",
      "content_text": "3 weeks ago I set out to fix a crash in Clippy, this is what I learned along the way. I hope this blog post will be useful for other people diving into Clippy and maybe serve as motivation if things get difficult.",
      "url": "https://phansch.net/2018/10/10/fixing-a-clippy-crash/",
      "tweet_url": "https://twitter.com/phansch/status/1050106987780935680",
      "date_published": "2018-10-10T00:00:00+00:00",
      "author": {
        "name": "Philipp Hansch",
        "url": "https://phansch.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "bb052dfe-fdb1-4848-9fdf-28c7c5023d93",
      "title": "Using WebAssembly to Accelerate Markdown Rendering",
      "content_text": "Markdown rendering is very important to the performance of Semaphor - every message you send and read is a Markdown document - so we're always looking for ways to improve the performance of rendering Markdown. A couple months ago Jonathan Moore and I wondered how easy it would be to integrate WebAssembly into a React component, replacing the render() function, and we thought that moving Markdown parsing into Rust would be a great way to test this idea out.",
      "url": "https://engineering.spideroak.com/2018/08/29/using-webassembly-to-speed-up-message-rendering/",
      "tweet_url": "https://twitter.com/0x0000org/status/1050157850008272896",
      "date_published": "2018-08-29T10:10:00+00:00",
      "author": {
        "name": "Chip Black and Jonathan Moore",
        "url": "https://engineering.spideroak.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "63fef91b-3a2c-4b05-9fad-bc5a80bd1733",
      "title": "A crate I want: 2d graphics",
      "content_text": "The Rust ecosystem has lot of excellent crates, and many more new ones being published. I believe one is missing, though, and I’d really like to see it happen: a cross-platform abstraction for 2D graphics. In this post I will set out what I want.",
      "url": "https://raphlinus.github.io/rust/graphics/2018/10/11/2d-graphics.html",
      "date_published": "2018-10-11T22:44:03+00:00",
      "author": {
        "name": "Raph Levien",
        "url": "https://raphlinus.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "492f5ab9-f95c-480b-8377-dc2f06e836b8",
      "title": "Notes on Type Layouts and ABIs in Rust",
      "content_text": "Over the years I've found myself with a weird amount of knowledge about how types and ABIs in Rust work, and I wanted to write it all down in one place so that... it's written down in one place. Much of this information can or should be found in the Rust Language Reference and the Rustonomicon.",
      "url": "https://gankro.github.io/blah/rust-layouts-and-abis/",
      "tweet_url": "https://twitter.com/Gankro/status/1050024576908955649",
      "date_published": "2018-10-09T00:00:00+00:00",
      "author": {
        "name": "Alexis Beingessner",
        "url": "https://gankro.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ab2b9642-16a3-4d28-9f8b-5f6938964600",
      "title": "Porting C (minimp3) To Rust",
      "content_text": "So because it seemed like a good idea at the time, I decided to port the minimp3 library from C to Rust. I want a pure Rust MP3 decoder crate to exist under a permissive license, I wanted to learn a few things about the MP3 file format, and it seemed small enough to do in a single weekend. (In reality it was largely done in about a week.) I’m quite good at Rust, and I’m okay at C (but rusty; hah!), and I know nothing at all about MP3 decoding. So, it was a fun learning experience. It was very interesting seeing how C and Rust’s different feature set changed how the programs were written. minimp3 turned out to be a good choice for this, since it is standalone, pretty well-written C as far as I can tell, does nothing that needs to be unsafe, and small but not trivial. This article is an attempt to organize my thoughts, notes and observations as I went about the project, in the hopes that it will be useful or at least interesting to someone else.",
      "url": "https://wiki.alopex.li/PortingCToRust",
      "date_published": "2018-10-08T19:53:10+00:00",
      "author": {
        "name": "Simon Heath",
        "url": "http://patreon.com/icefox"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "0d41cc9f-584c-4da3-8516-a567cc923279",
      "title": "Oxidizing Python: Speeding up URL quoting by 10× using Rust",
      "content_text": "Recently a colleague of mine told me about a small bottleneck with url quoting since we are quoting a lot of storage keys at least once when loading or storing a dataset. To speed it up, we are going to write a C-Library in Rust and invoke it from Python.",
      "url": "https://tech.blue-yonder.com/oxidizing-python-speeding-up-urlquoting-by-using-rust/",
      "date_published": "2018-10-08T10:48:12+00:00",
      "author": {
        "name": "Markus Klein",
        "url": "https://tech.blue-yonder.com/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "b2cb0409-6147-4d84-8261-734f17fda39c",
      "title": "Noria: dynamic, partially-stateful data-flow for high-performance web applications",
      "content_text": "We introduce partially-stateful data-flow, a new streaming data-flow model that supports eviction and reconstruction of data-flow state on demand. By avoiding state explosion and supporting live changes to the data-flow graph, this model makes data-flow viable for building long-lived, low-latency applications, such as web applications. Our implementation, Noria, simplifies the backend infrastructure for read-heavy web applications while improving their performance.\n\nA Noria application supplies a relational schema and a set of parameterized queries, which Noria compiles into a data-flow program that pre-computes results for reads and incrementally applies writes. Noria makes it easy to write high-performance applications without manual performance tuning or complex-to-maintain caching layers. Partial statefulness helps Noria limit its in-memory state without prior data-flow systems’ restriction to windowed state, and helps Noria adapt its data-flow to schema and query changes while on-line. Unlike prior data-flow systems, Noria also shares state and computation across related queries, eliminating duplicate work.\n\nOn a real web application’s queries, our prototype scales to 5× higher load than a hand-optimized MySQL baseline. Noria also outperforms a typical MySQL/memcached stack and the materialized views of a commercial database. It scales to tens of millions of reads and millions of writes per second over multiple servers, outperforming a state-of-the-art streaming data-flow system.",
      "url": "https://www.usenix.org/conference/osdi18/presentation/gjengset",
      "tweet_url": "https://twitter.com/Jonhoo/status/1049452983308697605",
      "date_published": "2018-10-09T11:14:00+00:00",
      "author": {
        "name": "Jon Gjengset, Malte Schwarzkopf, Jonathan Behrens, and Lara Timbó Araújo",
        "url": "https://www.usenix.org/conference/osdi18"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "a8939774-cb65-4cca-b7c4-47f8f0249f96",
      "title": "Hunting for Bugs in Rust",
      "content_text": "Way back in August I announced that I was starting in on \"a project to QuickCheck Rust’s standard library data structures\", here. And I did! The project is called bughunt-rust and I've been poking at it on weekends since, adjusting my approach based on papers I've been reading, experience gained writing test code and the kind of results I've been getting. This post goes through what I've been up to, where I see the project heading in the near term.",
      "url": "https://blog.troutwine.us/2018/10/08/hunting-for-bugs-in-rust/",
      "tweet_url": "https://twitter.com/bltroutwine/status/1049363553713414147",
      "date_published": "2018-10-08T17:27:54+00:00",
      "author": {
        "name": "Brian L. Troutwine",
        "url": "http://blog.troutwine.us/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "49cace2a-ebaf-4aec-b41b-8fb7aa67acc8",
      "title": "Remacs continues to improve",
      "content_text": "As you doubtless know, Emacs has an embedded Lisp environment that provides a large number of intersting Lisp functions that the user can call. Many of these are implemented in C for speed, and we've been rewriting them in Rust. So far we've ported 394 individual Lisp functions from C to Rust, of which 207 were ported in this last year. This is about a third of the total, as you can see by this graph. We've actually completely ported several whole C files now.",
      "url": "http://db48x.net/rust-remacs-2018/",
      "date_published": "2018-10-09T12:35:00+00:00",
      "author": {
        "name": "db48x",
        "url": "http://db48x.net/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "af77ca8e-342a-450b-90e8-a6b1d485c8b8",
      "title": "Bluetooth Low Energy with Rust",
      "content_text": "For a change of pace, I have been learning embedded development using Rust in my spare time, which has been an exciting challenge. A core component of my project is to have two devices communicating wirelessly, and (at the time I started working on this) there were no “no-std” Rust Bluetooth crates available. So I started to write my own. I had already chosen to work on the Nucleo, and to use the IDB05A1 shield, which contains a BlueNRG-MS module.",
      "url": "https://219design.com/bluetooth-low-energy-with-rust/",
      "date_published": "2018-09-27T19:52:09+00:00",
      "author": {
        "name": "Daniel Gallagher",
        "url": "https://219design.com/news/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "a3b6b34c-174b-4738-9c06-c9ab251718c4",
      "title": "Rust has a static garbage collector",
      "content_text": "I’ve often seen people make statements like this one, from the Rust subreddit this morning, \"Manual memory management requires more work than garbage collected. Its a trade off of course to be more performant or use lower resources. When and where should Rust be used or not used according to you?\". While I don’t completely disagree with this sentiment, it’s also never quite sat right with me. Yes, Rust is a bit harder at the start, but once you get over a hump, I don’t generally find writing Rust to be significantly harder than using a GC’d language. I’ve been trying to figure out why that is.",
      "url": "https://words.steveklabnik.com/borrow-checking-escape-analysis-and-the-generational-hypothesis",
      "date_published": "2018-10-10T00:00:00+00:00",
      "author": {
        "name": "Steve Klabnik",
        "url": "https://words.steveklabnik.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e34760d5-658d-475a-91eb-c489a649ee86",
      "title": "Testing reqwest-based clients",
      "content_text": "In this article we will make a small Rust library that uses the reqwest http client library, and see what we can do to adequately test the business logic. We assume you have the Rust toolchain installed, and are at least passingly familiar with programming in Rust.",
      "url": "https://write.as/balrogboogie/testing-reqwest-based-clients",
      "date_published": "2018-10-05T20:57:27+00:00",
      "author": {
        "name": "balrogboogie",
        "url": "https://write.as/balrogboogie/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "917520f5-6f74-4e91-87e1-40d2360c0e46",
      "title": "A Case Study in Heaptrack",
      "content_text": "When I first started building the dtparse crate, my intention was to mirror as closely as possible the equivalent Python library. Python, as you may know, is garbage collected. Very rarely is memory usage considered in Python, and I likewise wasn’t paying too much attention when dtparse was first being built.\n\nThis lackadaisical approach to memory works well enough, and I’m not planning on making dtparse hyper-efficient. But every so often, I’ve wondered: “what exactly is going on in memory?”",
      "url": "https://speice.io/2018/10/case-study-optimization.html",
      "date_published": "2018-10-08T00:00:00-04:00",
      "author": {
        "name": "Bradlee Speice",
        "url": "https://speice.io/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "fd7f3d68-5d82-41ba-b841-d11a37e4b98d",
      "title": "Declarative Rust static analysis",
      "content_text": "Rust's Macros 2.0 are intuitive: demonstrate a pattern, and the compiler can insert the pattern into your program wherever you want it. Inspired by this syntax, I wondered: Could you “run a macro backwards”—use the same by-example language to describe patterns to search for?",
      "url": "http://blog.lambdaverse.org/comacro/",
      "date_published": "2018-10-07T19:23:17+00:00",
      "author": {
        "name": "Kaz Wesley",
        "url": "http://blog.lambdaverse.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4a3da20e-11fb-4868-9aa1-593f62439bd9",
      "title": "GLSL quasiquoting in Rust!",
      "content_text": "glsl-quasiquote-0.1 was released today! The crate provides you with two macros: glsl! and glsl_str!. Both are procedural macros that requires a nightly compiler and the proc_macro_non_items feature. They will both output a TranslationUnit, that represents a whole shader AST.",
      "url": "https://phaazon.net/blog/glsl-quasiquoting",
      "date_published": "2018-10-05T19:00:00+00:00",
      "author": {
        "name": "Dimitri Sabadie",
        "url": "http://phaazon.net/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "55b31f9c-fa63-4890-bcf3-5f9b899c197f",
      "title": "Going Four Times Faster using Multi-Threading",
      "content_text": "Rust makes writing parallel code safe. Rayon makes it easy.",
      "url": "http://worthe-it.co.za/programming/2018/10/03/going-four-times-faster-with-multithreading.html",
      "tweet_url": "https://twitter.com/JWorthe/status/1047949631613816832",
      "date_published": "2018-10-03T00:00:00+00:00",
      "author": {
        "name": "Justin Worthe",
        "url": "http://worthe-it.co.za/blog/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "dceefb77-f60e-4864-80e4-1dfb50c52cce",
      "title": "No, pest is not faster than nom",
      "content_text": "But today (October 4th, 2018), the pest website featured a very misleading graph. Yes, a pest 2.0 parser that does not convert the input to Rust types is indeed faster than a nom 4.0 parser that does convert the input to Rust types. But what happens if I write a nom 4.0 parser that does not convert its input to Rust types?",
      "url": "https://unhandledexpression.com/general/2018/10/04/no-pest-is-not-faster-than-nom.html",
      "date_published": "2018-10-04T00:00:00+00:00",
      "author": {
        "name": "Geoffroy Couprie",
        "url": "https://unhandledexpression.com/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "5c9a36df-c260-4d16-87b1-9b7e3107f7b8",
      "title": "Who authors the most popular crates on crates.io?",
      "content_text": "I had a question this morning: who authors the most popular crates on crates.io? First, we have to figure out what we mean by “most popular.” My first guess was “top 100 by recent downloads”, so I looked at crates.io. Once I got to 100, I found... | Steve Klabnik | “The most violent element in society is ignorance.” - Emma Goldman",
      "url": "https://words.steveklabnik.com/who-authors-the-most-popular-crates-on-crates-io",
      "tweet_url": "https://twitter.com/steveklabnik/status/1047898832464465926",
      "date_published": "2018-10-04T00:00:00+00:00",
      "author": {
        "name": "Steve Klabnik",
        "url": "https://words.steveklabnik.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a708e2c2-f0bd-4691-88c0-d004bedd667a",
      "title": "pest Parser 2.0 Released",
      "content_text": "pest is a general purpose parser written in Rust with a focus on accessibility, correctness, and performance. It uses parsing expression grammars (or PEG) as input, which are similar in spirit to regular expressions, but which offer the enhanced expressivity needed to parse complex languages. ",
      "url": "https://pest.rs/",
      "date_published": "2018-10-04T00:00:00+00:00",
      "author": {
        "name": "Dragoș Tiselice",
        "url": "https://github.com/dragostis"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "d7c70ce9-96bc-4518-8e3e-429503883006",
      "title": "Default values ..copy that",
      "content_text": "When I talk to folks foreign to Rust, I often get asked the question: “Why doesn’t Rust have support for default arguments”. When I first started learning Rust I pondered the same question. Eventually I came to realize that it does, kind of. Rust just takes different approach based on it’s unique design choices, one which I now wish other languages supported.",
      "url": "https://medium.com/@softprops/default-values-copy-that-ae43831781f3",
      "tweet_url": "https://twitter.com/softprops/status/1047897081673908225",
      "date_published": "2018-10-04T17:06:48.457+00:00",
      "author": {
        "name": "Doug Tangren",
        "url": "https://medium.com/@softprops"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "11786513-db52-4fdb-ac03-e4a854b36f2b",
      "title": "Writing Rust NIFs for your Elixir code with the Rustler package",
      "content_text": "There will be times where code will run slow and Erlang/Elixir optimizations will only go so far. BEAM has several ways to interface with foreign code, the fastest way being with a Native Implemented Function (NIF) whose API expects them to be written in C. But speaking frankly, the last time I worked with C involved a lengthy debugging session that boiled down to the lack of type safety, so I’d rather not have to repeat that experience. It’s for this reason that Rust is such a compelling language.",
      "url": "https://medium.com/@jacob.lerche/writing-rust-nifs-for-your-elixir-code-with-the-rustler-package-d884a7c0dbe3",
      "date_published": "2018-09-28T01:54:27.302+00:00",
      "author": {
        "name": "Jacob Lerche",
        "url": "https://medium.com/@jacob.lerche"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ec683955-b4c5-426c-858d-f180fde10abb",
      "title": "Rust RPG: Introductory Tutorial of Rust, Unit Testing, and Continuous Integration with a Roguelike",
      "content_text": "We’re going to walk through a Rust application that I’ve built, which is essentially a basic Roguelike in most regards.",
      "url": "https://medium.com/@cameron.manavian/rust-rpg-introductory-tutorial-of-rust-unit-testing-and-continuous-integration-with-a-roguelike-b7b86e90855c",
      "date_published": "2018-09-28T13:46:04.544+00:00",
      "author": {
        "name": "Cameron Manavian",
        "url": "https://medium.com/@cameron.manavian"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "2e26b090-21b9-42e2-9ac5-9664e79af88e",
      "title": "Merlin: flexible, composable transcripts for zero-knowledge proofs",
      "content_text": "Merlin is a small Rust library that performs the Fiat-Shamir transformation in software, maintaining a STROBE-based transcript of the proof protocol and allowing the prover to commit messages to the transcript and compute challenges bound to all previous messages. It also provides a transcript-based RNG for use by the prover, generalizing “deterministic” and “synthetic” nonces to arbitrarily complex zero-knowledge protocols.",
      "url": "https://medium.com/@hdevalence/merlin-flexible-composable-transcripts-for-zero-knowledge-proofs-28d9fda22d9a",
      "date_published": "2018-09-28T21:07:20.750+00:00",
      "author": {
        "name": "Henry de Valence",
        "url": "https://medium.com/@hdevalence"
      },
      "tags": [
        "Crates",
        "Security"
      ]
    },
    {
      "id": "cbc812fb-b5ff-44cc-ae96-f4a5ae44e7dd",
      "title": "Announcing the Tokio Doc Push (we need you!)",
      "content_text": "In the past, there has been reoccurring feedback that Tokio is hard to understand. I believe a lack of good documentation plays a significant part. It’s time to fix this problem.\n\nAnd because Tokio is open source, it is on us (the community) to make this happen! 👏",
      "url": "https://tokio.rs/blog/2018-10-doc-blitz/",
      "tweet_url": "https://twitter.com/itchyankles/status/1047882224778063872",
      "date_published": "2018-10-04T00:00:00+00:00",
      "author": {
        "name": "Carl Lerche",
        "url": "https://tokio.rs/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "22538446-2c14-4b71-bd82-46c2db0371a1",
      "title": "The Undergarden, a text adventure in Rust: 2 - Objects",
      "content_text": "In this second blog post I’m showing how I implemented objects - things the player can interact with - for a text adventure written in Rust. As usual, the full code is available on GitHub.",
      "url": "https://www.cattlegrid.info/the-undergarden-text-adventure-rust-2-objects",
      "tweet_url": "https://twitter.com/_arthas/status/1047808900022620161",
      "date_published": "2018-10-04T04:51:00+00:00",
      "author": {
        "name": "Michele Beltrame",
        "url": "https://www.cattlegrid.info/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "cba35bca-a821-4ba9-81d8-3cee56f5e199",
      "title": "WebAssembly and Dynamic Memory",
      "content_text": "WebAssembly is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable target for compilation of high-level languages like C/C++/Rust, enabling deployment on the web for client and server applications.\n\nThese high-level languages like C/C++/Rust (+Javascript) deal with different allocations of memory, such as static memory, stack memory and dynamic memory.",
      "url": "https://frehberg.wordpress.com/webassembly-and-dynamic-memory/",
      "date_published": "2018-10-04T03:19:18+00:00",
      "author": {
        "name": "Frank Rehberger",
        "url": "https://frehberg.wordpress.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "217f309f-bfff-4997-8ff7-faddf10b670f",
      "title": "Introducing Ruukh Framework",
      "content_text": "Rust has its goals set on to be a primary WASM language and it would be awesome to use it both in backend and frontend web. Ruukh is one of such efforts to realise that dream. Ruukh, a frontend web framework, is inspired by both VueJS and ReactJS.",
      "url": "https://sharadchand.com/2018/10/03/ruukh-framework.html",
      "tweet_url": "https://twitter.com/sharadchnd/status/1047468859588927488",
      "date_published": "2018-10-03T12:38:00+00:00",
      "author": {
        "name": "Sharad Chand",
        "url": "https://sharadchand.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "7de9ba6b-a3ae-4db5-a911-15126a264b26",
      "title": "Lessons learned on writing web applications completely in Rust",
      "content_text": "This blog post is an update to the preceeding article “A web application completely written in Rust” and summarizes the projects’ progress over the last months.",
      "url": "https://medium.com/@saschagrunert/lessons-learned-on-writing-web-applications-completely-in-rust-2080d0990287",
      "tweet_url": "https://twitter.com/saschagrunert/status/1047479858786459650",
      "date_published": "2018-10-03T11:59:12.827+00:00",
      "author": {
        "name": "Sascha Grunert",
        "url": "https://medium.com/@saschagrunert"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "4ae0bbf7-720b-48d3-8c5d-d5b3c8e061dd",
      "title": "Red Hat's Stratis Storage Project Reaches Its 1.0 Stable Milestone",
      "content_text": "Stratis 1.0 was quietly released last week with the 1.0 version marking its initial stable release and where also the on-disk meta-data format has been stabilized. Red Hat engineers believe Stratis is now ready for more widespread testing.",
      "url": "https://www.phoronix.com/scan.php?page=news_item&px=Stratis-1.0-Released",
      "tweet_url": "https://twitter.com/phoronix/status/1047046057690042371",
      "date_published": "2018-10-02T04:48:34-04:00",
      "author": {
        "name": "Michael Larabel",
        "url": "https://www.phoronix.com/scan.php?page=home"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "abd3f1ce-8faf-4c92-a8d3-20c34e41af97",
      "title": "Porting My CUDA Path Tracer to ptx-builder/linker",
      "content_text": "A bunch of stuff has happened since I published my post on The State of GPGPU in Rust. Most importantly, Denys Zariaiev (@denzp) released his work on a custom linker for Rust CUDA kernels, and a build.rs helper crate to make it easier to use.\nThese two crates eliminate many of the problems I referred to in my previous post. The linker solves most of the “invalid PTX file” problems, while the ptx-builder crate does all of the magic that Accel was doing behind the scenes.",
      "url": "https://bheisler.github.io/post/ptx-builder-and-linker/",
      "tweet_url": "https://twitter.com/redattack34/status/1046935958623588353",
      "date_published": "2018-10-01T19:00:00-06:00",
      "author": {
        "name": "Brook Heisler",
        "url": "https://bheisler.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "307ed024-4949-4c53-80cf-c1e60a57e0a7",
      "title": "lolbench: automagically and empirically discovering Rust performance regressions",
      "content_text": "lolbench compiles ~350 benchmarks with every Rust nightly. It then runs them and highlights potential performance regressions in the standard library and the output of the compiler. Each toolchain’s run is summarized with a list of likely candidates, as seen in the image below, and we’re now getting started using these to safeguard the performance of Rust programs. Come help!",
      "url": "https://blog.anp.lol/rust/2018/09/29/lolbench/",
      "date_published": "2018-09-29T00:00:00+00:00",
      "author": {
        "name": "Adam Perry",
        "url": "https://blog.anp.lol/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "0ec2fec4-ed74-4377-b1f5-1e6a5eec6025",
      "title": "Office Hours #1: Cyclic services",
      "content_text": "This is a report on the second “office hours”, in which we discussed how to setup a series of services or actors that communicate with one another. This is a classic kind of problem in Rust: how to deal with cyclic data. Usually, the answer is that the cycle is not necessary (as in this case).",
      "url": "http://smallcultfollowing.com/babysteps/blog/2018/09/24/office-hours-1-cyclic-services/",
      "tweet_url": "https://twitter.com/nikomatsakis/status/1044240677482242048",
      "date_published": "2018-09-24T00:00:00-04:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c0b70c5d-190f-4c9d-ac44-d65a64a61b1f",
      "title": "The Undergarden, a text adventure in Rust: 1 - Sections",
      "content_text": "I’m attempting to write a (very simple, at least initally) text adventure in Rust, so I’m going to share progress on my blog starting today. This first post is about the sections, that to day is the rooms of a house for example.",
      "url": "https://www.cattlegrid.info/the-undergarden-text-adventure-rust-1-sections",
      "tweet_url": "https://twitter.com/_arthas/status/1045589345388892160",
      "date_published": "2018-09-27T20:04:00+00:00",
      "author": {
        "name": "Michele Beltrame",
        "url": "https://www.cattlegrid.info/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "38d1a807-a596-4423-a458-beab7d9df074",
      "title": "Programming WebAssembly with Rust — The Book!",
      "content_text": "I am proud to announce that I’m working on a book for the Pragmatic Programmers. The title hasn’t been set in stone yet, but the book will be about programming WebAssembly with Rust.",
      "url": "https://medium.com/@KevinHoffman/programming-webassembly-with-rust-the-book-7c4a890fcf97",
      "tweet_url": "https://twitter.com/KevinHoffman/status/1045665859849596928",
      "date_published": "2018-09-28T13:25:42.837+00:00",
      "author": {
        "name": "Kevin Hoffman",
        "url": "https://medium.com/@KevinHoffman"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "8e066aec-6f09-44df-b763-b4d44b772fb5",
      "title": "Understanding Compilers — For Humans (Version 2)",
      "content_text": "Understanding your compiler internally allows you to use it effectively. Walk through how programming languages and compilers work in this chronological synopsis. Lots of links, example code, and diagrams have been composed to aid in your understanding.\n\nUnderstanding Compilers — For Humans (Version 2) is a successor to my second article on Medium, with over 21 thousand views. I am so glad I could make a positive impact on people’s education, and I am excited to bring a complete rewrite based on the input I received from the original article. I chose Rust as this work’s primary language.",
      "url": "https://towardsdatascience.com/understanding-compilers-for-humans-version-2-157f0edb02dd",
      "date_published": "2018-09-29T16:01:01.807+00:00",
      "author": {
        "name": "Luke Wilson",
        "url": "https://towardsdatascience.com/@aesl"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "96405556-ac98-433a-a0f8-c3de068e47d3",
      "title": "‘orion’ - yet another attempt at pure-Rust cryptography",
      "content_text": "orion is another attempt at cryptography implemented in pure Rust. Its main focus is usability. This is in part achieved by providing a thorough documentation of the library. High-level abstractions are also provided, which are an attempt at guiding the users towards safe usage of the lower-level functionality of the library.",
      "url": "https://brycx.github.io/2018/09/25/orion-pure-rust-crypto-lib.html",
      "date_published": "2018-09-25T00:00:00+00:00",
      "author": {
        "name": "brycx",
        "url": "https://brycx.github.io/"
      },
      "tags": [
        "Crates",
        "Security"
      ]
    },
    {
      "id": "9128e298-33fe-4f13-a9c7-7ff2361ee2da",
      "title": "An EFI App a bit rusty",
      "content_text": "After two tweets that I made last week, playing around with UEFI and Rust, some people asked to publish a blog post explaining how to create a UEFI application fully written in Rust and demonstrate all the testing environment.",
      "url": "https://medium.com/@gil0mendes/an-efi-app-a-bit-rusty-82c36b745f49",
      "tweet_url": "https://twitter.com/gil0mendes/status/1046520458202546178",
      "date_published": "2018-09-30T21:56:12.954+00:00",
      "author": {
        "name": "Gil Mendes",
        "url": "https://medium.com/@gil0mendes"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "0b2520e8-b69d-4edb-91b1-3558494fd0cd",
      "title": "rust-on-mobile: Example of creating and running a basic \"Hello World\" application on iOS",
      "content_text": "This repo is a place where examples can be added of iOS/android projects written entirely/mostly in rust.",
      "url": "https://github.com/mtak-/rust-on-mobile/blob/master/examples/ios/example01.md",
      "date_published": "2018-09-24T06:09:32+00:00",
      "author": {
        "name": "mtak-",
        "url": "https://github.com/mtak-"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "adea520f-a6b7-43f5-b705-62aefc4c00e6",
      "title": "Announcing Rust 1.29.1",
      "content_text": "A security vulnerability was found in the standard library where if a large number was passed to str::repeat it could cause a buffer overflow after an integer overflow. If you do not call the str::repeat function you are not affected. This has been addressed by unconditionally panicking in str::repeat on integer overflow.",
      "url": "https://blog.rust-lang.org/2018/09/25/Rust-1.29.1.html",
      "tweet_url": "https://twitter.com/rustlang/status/1044664421900058624",
      "date_published": "2018-09-25T00:00:00+00:00",
      "author": {
        "name": "The Rust Core Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "27dd6f1a-6659-43d5-aa7b-2e0ee21c7173",
      "title": "Announcing the web-sys crate!",
      "content_text": "We are pleased to announce the first release of the web-sys crate! It provides raw bindings to all the Web’s APIs: everything from DOM manipulation to WebGL to Web Audio to timers to fetch and more!",
      "url": "https://rustwasm.github.io/2018/09/26/announcing-web-sys.html",
      "date_published": "2018-09-26T00:00:00+00:00",
      "author": {
        "name": "rustwasm",
        "url": "https://rustwasm.github.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "385cdc5a-e6e0-4562-b9f3-156b296d6a03",
      "title": "How I’ve found vulnerability in a popular Rust crate (and you can too)",
      "content_text": "I have recently discovered a zero-day vulnerability in a fairly popular and well-designed Rust crate. In this article I’m going to discuss how I did it and why it wasn’t discovered earlier, and introduce a new tool, libdiffuzz, that I’ve created for the job. A recently discovered vulnerability in Rust standard library makes a cameo appearance.",
      "url": "https://medium.com/@shnatsel/how-ive-found-vulnerability-in-a-popular-rust-crate-and-you-can-too-3db081a67fb",
      "date_published": "2018-09-28T03:51:45.283+00:00",
      "author": {
        "name": "Sergey \"Shnatsel\" Davidoff",
        "url": "https://medium.com/@shnatsel"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "ba0468b9-b0dd-40d1-b253-9fa70cb05ddf",
      "title": "eBPF, ingrained in Rust",
      "content_text": "Today we are releasing RedBPF and ingraind, our eBPF toolkit that integrates with StatsD and S3, to gather feedback, and see where others in the Rust community might take this framework. If you are looking to up your company’s monitoring game, gather more data about your Raspberry Pi cluster at home, or just have a strong academic interest in Rust and low-level bit shepherding, you might want to read on.",
      "url": "https://blog.redsift.com/labs/ebpf-ingrained-in-rust/",
      "tweet_url": "https://twitter.com/rhapsodhy/status/1044602999811842049",
      "date_published": "2018-09-25T14:45:44+00:00",
      "author": {
        "name": "Peter Parkanyi",
        "url": "https://blog.redsift.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "fa23119f-23c8-404c-9aaa-5a75da99d131",
      "title": "Tower Web 0.3 — async/await and template support",
      "content_text": "Today, Tower Web 0.3 has been released and it comes with two major new features: Experimental support for async/await. Support for using templates to render responses.",
      "url": "https://medium.com/@carllerche/tower-web-0-3-async-await-and-template-support-e0bb8ed47941",
      "tweet_url": "https://twitter.com/carllerche/status/1045728112904826880",
      "date_published": "2018-09-28T17:32:13.187+00:00",
      "author": {
        "name": "Carl Lerche",
        "url": "https://medium.com/@carllerche"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "23617503-ac10-4027-bd53-a98ad82c7d1e",
      "title": "The relative performance of C and Rust",
      "content_text": "I reimplemented a body of C software in Rust, and it performed better for the same task; what’s going on? And is there anything broader we can say about these results?\n\nTo explore this, I ran some statemap rendering tests on SmartOS on a single-socket Haswell server (Xeon E3-1270 v3) running at 3.50GHz. The C version was compiled with GCC 7.3.0 with -O2 level optimizations; the Rust version was compiled with 1.29.0 with --release. All of the tests were run bound to a processor set containing a single core; all were bound to one logical CPU within that core, with the other logical CPU forced to be idle. cpustat was used to gather CPU performance counter data, with one number denoting one run with pic0 programmed to that CPU performance counter. The input file (~30MB compressed) contains 3.5M state changes, and in the default config will generate a ~6MB SVG. ",
      "url": "http://dtrace.org/blogs/bmc/2018/09/28/the-relative-performance-of-c-and-rust/",
      "tweet_url": "https://twitter.com/bcantrill/status/1045848008691048448",
      "date_published": "2018-09-29T01:28:17+00:00",
      "author": {
        "name": "Bryan Cantrill",
        "url": "http://dtrace.org/blogs/bmc/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "e36be553-3461-4742-8127-2a41c9f54d93",
      "title": "Security advisory for the standard library (str::repeat)",
      "content_text": "The Rust team was recently notified of a security vulnerability affecting the standard library’s str::repeat function. When passed a large number this function has an integer overflow which can lead to an out of bounds write. If you are not using str::repeat, you are not affected.",
      "url": "https://blog.rust-lang.org/2018/09/21/Security-advisory-for-std.html",
      "tweet_url": "https://twitter.com/rustlang/status/1043206116115656705",
      "date_published": "2018-09-21T00:00:00+00:00",
      "author": {
        "name": "The Rust Core Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "564060f8-e187-4947-80ca-867ed3762d1b",
      "title": "Office Hours #0: Debugging with GDB",
      "content_text": "This blog post is just going to be a quick summary of the basic workflow of using Rust with gdb on the command line. I’m assuming you are using Linux here, since I think otherwise you would prefer a different debugger. There are probably also nifty graphical tools you can use and maybe even IDE integrations, I’m not sure.",
      "url": "http://smallcultfollowing.com/babysteps/blog/2018/09/21/office-hours-0-debugging-with-gdb/",
      "tweet_url": "https://twitter.com/nikomatsakis/status/1043162627873144833",
      "date_published": "2018-09-21T00:00:00-04:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "0a206ee6-7e54-4570-9f0c-8040fb9cd530",
      "title": "Running Little Rust Snippets with Runner",
      "content_text": "runner is mostly a clever wrapper around normal Cargo operations. runner acts like an interpreter. There is no forced directory structure, just source. But it’s just using rustc under the hood in the most direct way possible.",
      "url": "https://stevedonovan.github.io/rustifications/2018/09/23/runner.html",
      "date_published": "2018-09-23T00:00:00+02:00",
      "author": {
        "name": "Steve Donovan",
        "url": "http://stevedonovan.github.io/rustifications/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "04d63d37-82e6-4076-a90f-ef0a20945316",
      "title": "My Experience in Increasing Rust's Reach 2018",
      "content_text": "I recently had the privilege of participating the Increasing Rust’s Reach(IRR) program. The program aims to grow Rust’s community of project collaborators and leaders. Increasing Rust’s Reach brings together Rust team members and individuals who are underrepresented in Rust’s community and the tech industry for a partnership of three (3) months, from mid-May to mid-August. Each partnership agrees to a commitment of 3–5 hours per week working on a Rust Project.",
      "url": "https://rahul-thakoor.github.io/my-experience-in-increasing-rusts-reach-2018/",
      "tweet_url": "https://twitter.com/rahulthakoor/status/1043901866088812544",
      "date_published": "2018-09-16T08:49:37+04:00",
      "author": {
        "name": "Rahul Thakoor",
        "url": "https://rahul-thakoor.github.io/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "21440a24-a7da-4c72-8232-df22c7438b09",
      "title": "Smithy progress update: How I decreased WebAssembly bundle size by 90%",
      "content_text": "Smithy, a web development framework written in Rust that compiles to WebAssembly. In the mean time, there has been substantial progress, and Smithy is on the verge of being ready for alpha use! In this post, I want to describe the improvements that have been made, and what’s on the Smithy roadmap!",
      "url": "https://medium.com/@robert.balicki_2494/smithy-progress-update-how-i-decreased-webassembly-bundle-size-by-90-e7fe194b2f58",
      "date_published": "2018-09-24T03:36:53.708+00:00",
      "author": {
        "name": "Robert Balicki",
        "url": "https://medium.com/@robert.balicki_2494"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "a2d3880c-1803-4f4d-8345-b46f2d056985",
      "title": "A Rust FFI adventure in unsafety",
      "content_text": "This blog post covers my adventure in fixing a bug in the Rust bindings for the Capstone C library, a disassembly library that supports several CPU architectures. The capstone-rs crate attempts to provide a Rusty, object-oriented interface. You do not necessarily need previous experience in C code or foreign function (FFI) bindings to understand this blog post. I will cover some of the steps I used to debug this problem. Hopefully, readers can learn from my mistakes.",
      "url": "https://travisf.net/capstone-rs-unsafety-adventure",
      "date_published": "2018-09-21T00:00:00+00:00",
      "author": {
        "name": "Travis Finkenauer",
        "url": "https://travisf.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "0e8e1d2a-729c-41b0-953f-e14de11b8c59",
      "title": "Trying to tackle the orphans problem",
      "content_text": "In this blog entry, I want to explore a specific problem of orphans and how I decided to solve it in a crate of mine. The problem is the following: Given a crate that has a given responsibility, how can someone add an implementation of a given trait without having to use a type wrapper or augment the crate’s scope?",
      "url": "https://phaazon.net/blog/orphans-problem",
      "date_published": "2018-09-20T12:30:00+00:00",
      "author": {
        "name": "Dimitri Sabadie",
        "url": "http://phaazon.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "5a387bd6-85b7-439d-97d4-fdb76fec80c5",
      "title": "Hegemon: A modular system monitor written in Rust",
      "content_text": "Hegemon is a work-in-progress modular system monitor written in safe Rust. Currently, it has the following features: Monitor CPU and memory usage, temperatures, and fan speeds; expand any data stream to reveal a more detailed graph and additional information, adjustable update interval.",
      "url": "https://github.com/p-e-w/hegemon",
      "date_published": "2018-09-22T00:00:00+00:00",
      "author": {
        "name": "Philipp Emanuel Weidmann",
        "url": "http://worldwidemann.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "63b188d7-d82f-425d-9d07-a17d7fdc43f8",
      "title": "How we integrate Rust with C#",
      "content_text": "Seq is a log server that's built using a few programming languages; we have a storage engine called Flare written in Rust, and a server application written in C#. Our language stack is something I've talked about previously.\n\nBetween Rust and C# we have a foreign function interface (FFI) that lets us call out to Rust code from within the .NET runtime. In this post I'd like to explore our approach to FFI between Seq and its storage engine using the API for reading log events as a reference.",
      "url": "https://blog.getseq.net/rust-at-datalust-how-we-integrate-rust-with-csharp/",
      "date_published": "2018-09-18T23:15:06+00:00",
      "author": {
        "name": "Ashley Mannix",
        "url": "https://blog.getseq.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e3bb7297-9e70-4070-a2aa-8bb8f9a5eaf2",
      "title": "A Sudoku Solver & Generator 🔢",
      "content_text": "For a small side project I’m working on, I’m using a Sudoku puzzle solver and puzzle generator that I’ve written in Rust. The experience was fun, so I thought I’d write up a little bit about the algorithm I’ve used and some interesting stats about how it performs.",
      "url": "https://blog.ryanlevick.com/posts/sudoku-solver-generator/",
      "tweet_url": "https://twitter.com/itchyankles/status/1042013143722078209",
      "date_published": "2018-09-16T00:00:00+00:00",
      "author": {
        "name": "Ryan Levick",
        "url": "https://blog.ryanlevick.com/"
      },
      "tags": [
        "Tools and Applications",
        "Performance"
      ]
    },
    {
      "id": "2fec1872-4519-4b08-8012-147db9dff5e0",
      "title": "Postgres over TLS with postgres and r2d2_postgres",
      "content_text": "In this post we’ll go over how to get the postgres crate and r2d2_postgres working with openssl for connection pooling with TLS.",
      "url": "https://matthewkmayer.github.io/blag/public/post/postgres-tls/",
      "tweet_url": "https://twitter.com/Motoblag/status/1041413288649621505",
      "date_published": "2018-09-13T00:00:00+00:00",
      "author": {
        "name": "Matthew Mayer's",
        "url": "https://matthewkmayer.github.io/blag/public"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "c75159c1-4e8c-4b09-9371-430cc5971b94",
      "title": "TOTP generator with account handling for multiple tokens",
      "content_text": " a totp generator I wrote a while ago in C++ but now it’s in rust. It can generate a token and save it into an account file that is AES encrypted. The password is never saved, so it’s secure enough to use it. One of it’s properties it will have over the c++ implementation is it’s safe, it uses a proper IV and once I’m done, it will also support encryption via PGP.",
      "url": "https://skarlso.github.io/2018/09/13/gotp/",
      "tweet_url": "https://twitter.com/Skarlso/status/1041634075478568960",
      "date_published": "2018-09-13T08:01:00+01:00",
      "author": {
        "name": "Gergely Brautigam",
        "url": "https://skarlso.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "790afaff-5784-4b34-82eb-38a05a05a0ec",
      "title": "Browsing your mail with Rust and Qt",
      "content_text": "Let’s write a mail viewer with Rust and Qt. This is another blog about Rust Qt Binding Generator, the project that lets you add a Qt GUI to your Rust code, or if you will, add Rust to your Qt program.",
      "url": "https://www.vandenoever.info/blog/2018/09/16/browsing_your_mail_with_rust_and_qt.html",
      "date_published": "2018-09-16T00:00:00+00:00",
      "author": {
        "name": "Jos van den Oever",
        "url": "https://www.vandenoever.info/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "3cd66c51-9cd4-4548-9a94-214d3f241ae2",
      "title": "My recommended crates for computer graphics",
      "content_text": "It’s been a while since my last post! Lately I’ve been quite demotivated to actually produce something worth while for doing a writeup about. Instead I offer you some thoughts on my recent findings using rust and some crates I found particularly useful for computer graphics.",
      "url": "https://jonathansteyfkens.com/rust/graphics/compute/2018/09/15/my-recommended-cg-crates.html",
      "date_published": "2018-09-15T22:15:00+00:00",
      "author": {
        "name": "Jonathan Steyfkens",
        "url": "https://jonathansteyfkens.com/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "b5f32e7e-843c-40cf-8c6c-126bc74e6c4e",
      "title": "Function composition in Rust using a custom smart pointer",
      "content_text": "Still drunk with the power of function composition, I started to play around with the technique in Rust, a language I've been experimenting with. Rust is a low-level language with a strict compiler that saves you from doing dangerous things. Furthermore, Rust is a functional language. It has several concepts and features inspired by Haskell (read more) and Scala for example. The design of Rust makes it highly expressive and attractive.",
      "url": "https://bsoptei.github.io/",
      "date_published": "2018-09-15T00:00:00+00:00",
      "author": {
        "name": "Balázs Söptei",
        "url": "https://bsoptei.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e112cc10-746d-4151-b0e4-76832be74e09",
      "title": "Rust: Pass-By-Value or Pass-By-Reference?",
      "content_text": "The other day, a friend of mine who is learning Rust asked if Rust is a pass-by-value or a pass-by-reference language. For the unfamiliar, pass-by-value means that when passing an argument to a function it gets copied into the new function so that the value in the calling function and the value in the called function are two separate values. Changes to one will not in turn result in the same change to the other. Pass-by-reference, on the other hand, means that when passing an argument to a function, it doesn’t copy the value but rather the argument is merely a transparent reference to the original value. This means changes to the value in the called function change the value in the calling function since they are the same value.",
      "url": "https://blog.ryanlevick.com/posts/rust-pass-value-or-reference/",
      "tweet_url": "https://twitter.com/itchyankles/status/1040557915986452480",
      "date_published": "2018-09-12T00:00:00+00:00",
      "author": {
        "name": "Ryan Levick",
        "url": "https://blog.ryanlevick.com/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "90da273a-d430-4fd5-891c-1aa33bc00588",
      "title": "Beware the rust cache on Travis",
      "content_text": "Today, I was working on optimizing my travis builds to speed them up, especially in the direction of caching. Travis allows you to set cache: cargo in your .travis.yml to enable caching for rust projects and caching is cool: it avoids having to rebuild all dependencies all the time, speeding up the builds.",
      "url": "https://levans.fr/rust_travis_cache.html",
      "date_published": "2018-09-05T17:00:00+02:00",
      "author": {
        "name": "Victor \"Levans\" Berger",
        "url": "https://levans.fr/"
      },
      "tags": [
        "DevOps and Deployment"
      ]
    },
    {
      "id": "90573eab-4e15-48a4-9c53-8f3466356845",
      "title": "The evolution of performance in ppbert",
      "content_text": "Today I released ppbert 0.8.4. This release also marks the first time that one of my original test files can be pretty printed in less than a second. I’ll use this occasion to look back on ppbert and how I was able to improve its performance, little by little.",
      "url": "https://vfoley.xyz/ppbert-perf-evolution/",
      "date_published": "2018-09-19T00:00:00+00:00",
      "author": {
        "name": "Vincent Foley",
        "url": "http://vfoley.xyz/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "cf201dba-76a2-49e1-a4d9-b28093189901",
      "title": "Announcing Linkerd 2.0: from service mesh to service sidecar",
      "content_text": "The 2.0 release of Linkerd brings two very significant changes. First, we’ve completely rewritten Linkerd to be orders of magnitude faster and smaller than Linkerd 1.x. Linkerd 2.0’s data plane is comprised of ultralight Rust proxies which consume around 10mb of RSS and have a p99 latency of <1ms. Linkerd’s minimalist control plane (written in Go) is similarly designed for speed and low resource footprint.",
      "url": "https://blog.linkerd.io/2018/09/18/announcing-linkerd-2-0/",
      "tweet_url": "https://twitter.com/linkerd/status/1042119979028508672",
      "date_published": "2018-09-18T17:00:00+00:00",
      "author": {
        "name": "William Morgan",
        "url": "https://blog.linkerd.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "a64aef93-521d-414e-ae6e-853f147b1180",
      "title": "You can't \"turn off the borrow checker\" in Rust",
      "content_text": "Every once in a while, someone will talk about unsafe in Rust, and how it “turns off the borrow checker.” I think this framing leads to misconceptions about unsafe and how it interacts with safe code. Here’s some code that causes a borrow checker... | Steve Klabnik | “The most violent element in society is ignorance.” - Emma Goldman",
      "url": "https://words.steveklabnik.com/you-can-t-turn-off-the-borrow-checker-in-rust",
      "tweet_url": "https://twitter.com/steveklabnik/status/1040617863978123264",
      "date_published": "2018-09-14T00:00:00+00:00",
      "author": {
        "name": "Steve Klabnik",
        "url": "https://words.steveklabnik.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "68ff6ef3-ead4-43c9-8813-f355d9f3710c",
      "title": "My RustConf 2018 Closing Keynote",
      "content_text": "I said in my talk that I would post a potentially more interesting long-form version of the talk that includes things that I couldn’t fit into the 30-ish minute time slot. What I’ve included below is my original long-form version of this talk, but my original intention was not to post this as-is. Originally I wanted to clean this up a bit more and make this into something that wasn’t so much a giant wall of text, but after I started doing this I realized that I was just rewriting it entirely, and at that rate I would never get around to releasing it, which I promised I would do in a timely manner.",
      "url": "https://kyren.github.io/2018/09/14/rustconf-talk.html",
      "date_published": "2018-09-14T00:00:00+00:00",
      "author": {
        "name": "Catherine West",
        "url": "https://kyren.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "dc9c068f-0a7f-4a31-aec2-f30b51066b89",
      "title": "Announcing Rust 1.29",
      "content_text": "The Rust team is happy to announce a new version of Rust, 1.29.0. The two most significant things in this release aren’t even language features: they’re new abilities that Cargo has grown, and they’re both about lints: cargo fix can automatically fix your code that has warnings. cargo clippy is a bunch of lints to catch common mistakes and improve your Rust code.",
      "url": "https://blog.rust-lang.org/2018/09/13/Rust-1.29.html",
      "tweet_url": "https://twitter.com/rustlang/status/1040282287869448194",
      "date_published": "2018-09-13T00:00:00+00:00",
      "author": {
        "name": "The Rust Core Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "0f587c1a-da0e-46d2-bee3-3a3cc6fc5352",
      "title": "Ownership Explained with Python",
      "content_text": "It’s not immediately obvious that calling min(squares) modifies squares. If squares were a list or even a range, we would be able to call min and max on it with no problem. It would be nice if the language prevented us from trying to use something twice that can only be used once. Almost all modern languages, both statically and dynamically typed, will fail at runtime in these situations.",
      "url": "https://paulkernfeld.com/2018/09/16/ownership-explained-with-python.html",
      "tweet_url": "https://twitter.com/occupy_paul_st/status/1041340077006352384",
      "date_published": "2018-09-16T00:00:00+00:00",
      "author": {
        "name": "Paul Kernfeld",
        "url": "https://paulkernfeld.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "b78327e0-5dc5-4187-be6b-9e06204b4631",
      "title": "Lockout, Part 2: And nary a function to be found",
      "content_text": "This is part of a blog series on working towards an intuitive mental model for lifetimes in Rust. When I tried to sit myself down and really, really write down an in-depth example… I realized that there was no two ways about it. Before you can learn to appreciate why lifetimes exist, you must learn what life would be like without them. And in order to do that, well…",
      "url": "https://exphp.github.io/2018/09/18/lockout-part-2.html",
      "date_published": "2018-09-18T19:00:00+00:00",
      "author": {
        "name": "Michael Lamparski",
        "url": "https://exphp.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "6c1f472d-337d-48c0-96d3-807afe8e58e3",
      "title": "Lockout, Part 1: Everything you know about lifetimes is wrong",
      "content_text": "This is part of a blog series on a new way to look at lifetimes in Rust's type system. I hope to cover some advanced aspects of lifetimes that are seldom discussed in the open, and my goal is ultimately to help convey new intuitions about how to use them correctly.",
      "url": "https://exphp.github.io/2018/09/17/lockout-part-1.html",
      "date_published": "2018-09-17T01:00:00+00:00",
      "author": {
        "name": "Michael Lamparski",
        "url": "https://exphp.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4f00ccb1-9966-4c6d-83e9-0e8032ff68a4",
      "title": "Alacritty now supports scrollback",
      "content_text": "Alacritty, the OpenGL terminal emulator written in Rust, now supports scrollback! Performance has improved, and we've got benchmarks to share.",
      "url": "https://jwilm.io/blog/alacritty-lands-scrollback/",
      "tweet_url": "https://twitter.com/i_am_jwilm/status/1041708671217033217",
      "date_published": "2018-09-16T17:00:00-07:00",
      "author": {
        "name": "Joe Wilm",
        "url": "https://jwilm.io/blog"
      },
      "tags": [
        "Tools and Applications",
        "Performance"
      ]
    },
    {
      "id": "7f5b5694-9cda-4692-8cbe-42458122faff",
      "title": "Falling in love with Rust",
      "content_text": "We are living in a Golden Age of software, one that will produce artifacts that will endure for generations. Of course, it can be hard to hold such heady thoughts when we seem to be up to our armpits in vendored flotsam, flooded by sloppy abstractions hastily implemented. Among current languages, only Rust seems to share this aspiration for permanence, with a perspective that is decidedly larger than itself.",
      "url": "http://dtrace.org/blogs/bmc/2018/09/18/falling-in-love-with-rust/",
      "tweet_url": "https://twitter.com/bcantrill/status/1042180114199375872",
      "date_published": "2018-09-18T22:31:51+00:00",
      "author": {
        "name": "Bryan Cantrill",
        "url": "http://dtrace.org/blogs/bmc/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "2e015136-8213-4fa3-afe0-78bf520d1da6",
      "title": "Transparent encryption and decryption in rust with cryptostreams",
      "content_text": "The rust community has fortunately adopted the OpenSSL bindings as the approach of choice, and the rust-openssl crate makes it easy to both bundle and consume the openssl bindings from rust in a cross-platform manner. What it doesn’t do is make encryption and decryption any easier than OpenSSL itself does.\n\nEnter the cryptostream crate. Released on github and on crates.io under the MIT public license, cryptostream finally provides an easy and transparent way to add encryption and decryption to pipelines involving objects implementing Read or Write, making encryption (or decryption) as easy as creating a new cryptostream object, passing in an existing Read/Write impl, and then reading/writing from/to the cryptostream instead.",
      "url": "https://neosmart.net/blog/2018/transparent-encryption-and-decryption-in-rust-with-cryptostreams/",
      "date_published": "2018-09-12T23:35:55+00:00",
      "author": {
        "name": "Mahmoud Al-Qudsi",
        "url": "https://neosmart.net/blog/"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "d72f5483-1247-46d8-8764-7ac5ec0fb2d3",
      "title": "Rust and JavaScript Interop ↔️",
      "content_text": "In recent projects of mine, I’ve been using WebAssembly quite a bit. WebAssembly (Wasm) is “a new binary instruction format for a stack based virtual machine” that lets you use languages besides JavaScript to run code on a web page - usually either for performance reasons or to run code you’d like to share across different platforms. In my opinion, the most promising of these languages, due to its lack of a need for a runtime and great tooling is Rust.",
      "url": "https://blog.ryanlevick.com/posts/wasm-bindgen-interop/",
      "tweet_url": "https://twitter.com/itchyankles/status/1039856964073873409",
      "date_published": "2018-09-12T00:00:00+00:00",
      "author": {
        "name": "Ryan Levick",
        "url": "https://blog.ryanlevick.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "bec949a2-4c38-4646-ae0b-1d8638c506a6",
      "title": "Parallelizing PNG, part 8: Rust macros for constant specialization",
      "content_text": "In my last posts I covered profiling and some tips for optimizing inner loops in Rust code while working on a multithreaded PNG encoder. Rust’s macro system is another powerful tool for simplifying your code, and sometimes awesomeizing your performance…",
      "url": "https://brionv.com/log/2018/09/12/parallelizing-png-part-8-rust-macros-for-constant-specialization/",
      "tweet_url": "https://twitter.com/brionv/status/1039898729292034048",
      "date_published": "2018-09-12T15:26:54+00:00",
      "author": {
        "name": "Brion Vibber",
        "url": "https://brionv.com/log/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "48eac964-8486-4cd6-83cb-3bca4ff5b616",
      "title": "Measuring SmallVec Footprint with Smallvectune",
      "content_text": "Rust is all about paying only for what you use, and gives us plenty tools to eliminate unneeded allocation. One of the tools that is used in a lot of crates (crates.io shows 98 dependent crates) is SmallVec. It is also used in the Rust compiler. I recently got around to speed up the operation of getting a SmallVec from a slice of copyable data. In short, they’re awesome.",
      "url": "https://llogiq.github.io/2018/09/13/smallvec.html",
      "date_published": "2018-09-13T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "001f1e0d-3927-4e39-800e-68324a02887a",
      "title": "Rust Associated Type",
      "content_text": "Associated Types in Rust are similar to Generic Types; however, Associated Types limit the types of things a user can do, which consequently facilitates code management. Among the Generic Types of traits, types that depend on the type of trait implementation can be expressed by using the Associated Type syntax. By comparing the Associated and Generic Types, you can get a better understanding of Associated Types.",
      "url": "https://medium.com/codechain/rust-associated-type-2281dbf98229",
      "date_published": "2018-09-13T06:50:57.959+00:00",
      "author": {
        "name": "Seung Woo Kim",
        "url": "https://medium.com/@koreanboy1120"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "2cfb43bc-99fe-4fea-beb0-8e422c55376a",
      "title": "Parallelizing PNG, part 7: Rust profiling on Linux",
      "content_text": "I already covered some inner-loop optimization tricks for low-level Rust code in mtpng, but how do you check how fast bits of your code are anyway?\n\nThe way to go is to use a sampling-based profiler native to your operating system. I’ve done most of my detailed profiling on Linux, using the “perf” tool.",
      "url": "https://brionv.com/log/2018/09/11/parallelizing-png-part-7-rust-profiling-on-linux/",
      "tweet_url": "https://twitter.com/brionv/status/1039602924253372416",
      "date_published": "2018-09-11T19:52:29+00:00",
      "author": {
        "name": "Brion Vibber",
        "url": "https://brionv.com/log/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "6d814a89-7614-47d1-b3f4-b660279b379d",
      "title": "Rust: My first impressions",
      "content_text": "At work I’m seeing more and more embedded software; over the past few years in, among others, coffee machines, forklifts, and cars. Embedded software needs to be fast and extremely efficient with hardware resources. In some cases it not even acceptable to have a tiny break for some garbage collection. So, typical tech stacks for backend development can’t be used, never mind anything that uses browser technologies. Unsurprisingly, almost all embedded software is written in C++, and, in fact, that is also what I used recently for a personal project with a micro-controller.\n\nLooking through the remaining choices, I went past Golang, which uses garbage collection, and set my eyes on Rust. In this post I’ll describe my first impressions, some of the frustrating moments, but also the extremely impressive performance on a larger piece of code.",
      "url": "https://erik.doernenburg.com/2018/09/rust-my-first-impressions/",
      "tweet_url": "https://twitter.com/erikdoe/status/1039163608704397312",
      "date_published": "2018-09-07T00:00:00+02:00",
      "author": {
        "name": "Erik Dörnenburg",
        "url": "https://erik.doernenburg.com/blog"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "1461a8b4-863b-40c1-bb2d-0ff077d738e1",
      "title": "Rising Tide: building a modular web framework in the open",
      "content_text": "The Network Services Working Group aims to improve the story for web development this year in several respects: by bolstering foundations like async/await, by improving the ecosystem of web-related crates, and by pulling these pieces together into a framework and book called Tide. The name “Tide” refers to “a rising tide lifts all boats”; the intent is to improve sharing, compatibility, and improvements across all web development and frameworks in Rust.",
      "url": "https://rust-lang-nursery.github.io/wg-net/2018/09/11/tide.html",
      "tweet_url": "https://twitter.com/RustNetWG/status/1039594448424816640",
      "date_published": "2018-09-11T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "https://rust-lang-nursery.github.io/wg-net/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "6313ebb2-076c-449b-8fb1-372c9b025168",
      "title": "How we organize a complex Rust codebase",
      "content_text": "At Datalust we’ve been busy building Flare: a storage engine for our log server, Seq, written in the Rust programming language. This post is a point-in-time look at how we've approached building this fairly complex piece of software in Rust in 2018. I’d like to share a few",
      "url": "https://blog.getseq.net/rust-at-datalust-how-we-organize-a-complex-rust-codebase/",
      "date_published": "2018-09-11T22:26:05+00:00",
      "author": {
        "name": "Ashley Mannix",
        "url": "https://blog.getseq.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "f712f29b-efed-4c75-a4a0-8523fa0b6d52",
      "title": "Unit Type Params",
      "content_text": "I always enjoy reading blogs about patterns or tricks people have picked up writing Rust. I’ve seen this a few times but not read about it anywhere.\n\nI’ve been doing class assignments from Operating Systems cs140e. I highly recommend this class if you know a bit of Rust and would like to try writing some lower level code. The class involves building bits of an OS for the raspberry pi.",
      "url": "https://leshow.github.io/post/unit_type_pattern/",
      "date_published": "2018-09-10T12:28:03-04:00",
      "author": {
        "name": "Evan Cameron",
        "url": "https://leshow.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "35458bae-bc62-40d7-ac3d-2dcd8ab1f469",
      "title": "From Rust to beyond: The C galaxy",
      "content_text": "This blog post is part of a series explaining how to send Rust beyond earth, into many different galaxies. The galaxy we will explore today is the C galaxy. This post will explain what C is (shortly), how to compile any Rust program in C in theory, and how to do that practically with our Rust parser from the Rust side and the C side. We will also see how to test such a binding.",
      "url": "https://mnt.io/2018/09/11/from-rust-to-beyond-the-c-galaxy/",
      "tweet_url": "https://twitter.com/mnt_io/status/1039422864649277442",
      "date_published": "2018-09-11T07:49:07+00:00",
      "author": {
        "name": "Ivan Enderlin",
        "url": "https://mnt.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "956dab4d-a04e-4278-bb20-906f4eac7a82",
      "title": "GStreamer Rust bindings 0.12 and GStreamer Plugin 0.3 release",
      "content_text": "After almost 6 months, a new release of the GStreamer Rust bindings and the GStreamer plugin writing infrastructure for Rust is out. As usual this was coinciding with the release of all the gtk-rs crates to make use of all the new features they contain.",
      "url": "https://coaxion.net/blog/2018/09/gstreamer-rust-bindings-0-12-and-gstreamer-plugin-0-3-release/",
      "date_published": "2018-09-10T11:41:59+00:00",
      "author": {
        "name": "Sebastian Dröge",
        "url": "https://coaxion.net/blog/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "d8bbfe78-53bb-49df-9d7b-092d306492c0",
      "title": "Parallelizing PNG: Choosing Rust for mtpng",
      "content_text": "In my last post I wrapped up the patches to improve perceived performance of screenshots on the Linux GNOME desktop. With that done, why not implement my crazy plan for parallel PNG encoding to speed the actual save time?",
      "url": "https://brionv.com/log/2018/09/09/parallelizing-png-part-5-choosing-rust-for-mtpng/",
      "date_published": "2018-09-09T23:32:41+00:00",
      "author": {
        "name": "Brion Vibber",
        "url": "https://brionv.com/log/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "83d6c5ed-e847-4807-8c6c-40e97f66b9d5",
      "title": "The Common Rust Traits",
      "content_text": "In Rust, data types - primitives, structs, enums and any other ‘aggregate’ types like tuples and arrays - are dumb. They may have methods but that is just a convenience (they are just functions). Types have no relationship with each other.\n\nTraits are the abstract mechanism for adding functionality to types and establishing relationships between them.",
      "url": "https://stevedonovan.github.io/rustifications/2018/09/08/common-rust-traits.html",
      "tweet_url": "https://twitter.com/StevedInJoburg/status/1038378510463717377",
      "date_published": "2018-09-08T00:00:00+02:00",
      "author": {
        "name": "Steve Donovan",
        "url": "http://stevedonovan.github.io/rustifications/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d1f041f8-f77b-404b-a776-5615afef85f4",
      "title": "GIR support in gnome-class",
      "content_text": "Recently I've been working again in the rust port of libgepub, libgepub is C code, but in the rust-migration branch almost all the real functionality is done with rust and the GepubDoc class is a GObject wrapper around that code. For this reason I was thinking about to use gnome-class to implement GepubDoc. Gnome-class is a rust lib to write GObject code in rust that's compatible with the C binary API so then you can call this new GObject code written with gnome-class from C. So, libgepub is the excuse to start to implement GIR in gnome-class.",
      "url": "http://danigm.net/gnome-class-gir.html",
      "tweet_url": "https://twitter.com/gnome/status/1038110396668829696",
      "date_published": "2018-09-01T00:00:00+02:00",
      "author": {
        "name": "danigm",
        "url": "http://danigm.net/category/blog.html"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "850319b3-4515-4f9c-b833-67a391d5ab26",
      "title": "Programming Servo: A generic “worker event-loop”",
      "content_text": "Let’s take a look at how in Rust you can have an algorithm generic over T, where T is further bound by a trait, which itself is generic over one of several parameters.",
      "url": "https://medium.com/programming-servo/programming-servo-a-generic-worker-event-loop-400a6f113a60",
      "date_published": "2018-09-02T07:03:47.310+00:00",
      "author": {
        "name": "Gregory Terzian",
        "url": "https://medium.com/@polyglot_factotum"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "7b94766b-f2c3-42f6-b215-7b63f07a4e95",
      "title": "Adventures in Rust: Futures and Tokio",
      "content_text": "One of my newer hobbies recently has been learning and toying around with Rust. Recently, as part of this learning process, I've started implementing an IP address lookup service as a small side project. During the course of implementing this project I ran into what turned out to be a bit of a hurdle to tackle, specifically performing reverse dns resolution asynchronously.\n\nMy hope is that through exploring this problem, I can aid others in understanding these concepts which can be initially difficult grasp. This is especially so as the behavior and function of Futures vary wildly between various languages and runtimes.",
      "url": "http://bryangilbert.com/post/code/rust/adventures-futures-tokio-rust/",
      "date_published": "2018-09-04T00:00:00+00:00",
      "author": {
        "name": "Bryan Gilbert",
        "url": "http://bryangilbert.com/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "e7fbc029-a108-4209-bbf4-9e152701d9a6",
      "title": "Tower Web — Expanding the middleware stack",
      "content_text": "tower-web version 0.2.2 has been released. It comes with a number of new features, which I will talk about in this post. Primarily, the middleware story is starting to come together. I will be expanding some on how middleware fits into Tower and web in general.",
      "url": "https://medium.com/@carllerche/tower-web-expanding-the-middleware-stack-f9bf55bfa109",
      "tweet_url": "https://twitter.com/carllerche/status/1038070602689523713",
      "date_published": "2018-09-07T14:21:28.473+00:00",
      "author": {
        "name": "Carl Lerche",
        "url": "https://medium.com/@carllerche"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "9572581f-4d30-4abb-9aa8-8f7842b37117",
      "title": "Sonnerie: A simple timeseries database",
      "content_text": "Sonnerie is a time-series database. Map a timestamp to a floating-point value. Store multiple of these series in a single database. Insert tens of millions of samples in minutes, on rotational media.",
      "url": "https://github.com/njaard/sonnerie",
      "date_published": "2018-09-08T00:00:00+00:00",
      "author": {
        "name": "Kalle Samuels",
        "url": "https://github.com/njaard"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "bf9e8fe4-c788-47c9-9a8a-27ee3fa0b20f",
      "title": "Rust Faster SIMD edition",
      "content_text": "It’s been a while since I’ve been playing the benchmarksgame with Rust. But I recently found an interesting crate called packed_simd which had a SIMD-ified version of some benchmarks, so as Rust stable now has stdsimd, we should be able to speed up our benchmarks quite a bit.",
      "url": "https://llogiq.github.io/2018/09/06/fast.html",
      "tweet_url": "https://twitter.com/llogiq/status/1037795301044748289",
      "date_published": "2018-09-06T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "a92cab79-16fc-46b9-9bdb-0eb21518db8c",
      "title": "Rust at Datalust",
      "content_text": "At Datalust we build a log server called Seq. It's really a database, written in C#, with its own SQL-based query language, that's specifically designed for storing and querying structured log data. In the past, Seq has managed log event storage through ESENT, which is a storage technology baked into Windows. For our cross-platform Seq 5 release we’ve built a storage engine called Flare in the Rust programming language to replace our usage of ESENT.",
      "url": "https://blog.getseq.net/rust-at-datalust/",
      "tweet_url": "https://twitter.com/datalust_seq/status/1036746855575564288",
      "date_published": "2018-09-03T22:18:30+00:00",
      "author": {
        "name": "Ashley Mannix",
        "url": "https://blog.getseq.net/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "e989a06c-ac0a-4a49-9591-8867e574c37b",
      "title": "O(1) sum_of_multiples() in Rust",
      "content_text": "I had been working mostly in Scala for a while, then took a diversion into Swift and Objective C.  I wanted to learn another language after that, and had all but decided on Clojure.  But Rust kept nagging at me — there was something about it. So I watched some videos, then read the book, and then started the Rust track at Exercism.io.",
      "url": "https://nicholassterling.wordpress.com/2018/08/31/o1-sum_of_multiples-in-rust/",
      "tweet_url": "https://twitter.com/AmigoNico/status/1035580222517784578",
      "date_published": "2018-08-31T05:51:05+00:00",
      "author": {
        "name": "Nicholas Sterling",
        "url": "https://nicholassterling.wordpress.com/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "919b55ea-6ff7-4893-8c6f-1bd17b6cbab2",
      "title": "Announcing Spirit",
      "content_text": "Spirit is a crate that cuts down on boilerplate when creating unix daemons, with support for live configuration reloading.",
      "url": "https://vorner.github.io/2018/09/03/Announcing-Spirit.html",
      "date_published": "2018-09-03T00:00:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "3c7f3466-8495-4684-b0c2-e0b26ca9234c",
      "title": "Time difference between L1 cache fetch and memory fetch",
      "content_text": "Aim: Measure how fast a fetch from L1 cache is when compared to a fetch from memory. Instead of writing pure assembly code, we will use Rust's inline assembly feature.",
      "url": "https://nitish.ch/notes/time-difference-between-l1-cache-fetch-and-memory-fetch/",
      "date_published": "2018-09-02T22:15:24+00:00",
      "author": {
        "name": "Nitish Chinta",
        "url": "https://nitish.ch/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "6c60dc7f-81f5-4718-9bfa-4c68e7a7d1ab",
      "title": "RPCS3 and Dolphin emulators on macOS using gfx-portability",
      "content_text": "After improving functionality and performance of gfx-portability’s Metal backend through benchmarking Dota2, and verifying certain functionality through the Vulkan Conformance Test Suite (CTS), we decided to expand our testing to other projects. We quickly found two projects which matched our criteria: RPCS3 and Dolphin.",
      "url": "https://gfx-rs.github.io/2018/09/03/rpcs3-dolphin.html",
      "date_published": "2018-09-03T00:00:00+00:00",
      "author": {
        "name": "gfx-rs",
        "url": "https://gfx-rs.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "e3bf830e-e1ed-462b-9a6a-edac9ba2d699",
      "title": "Why Rust Closures are (Somewhat) Hard",
      "content_text": "Rust closures are harder for three main reasons: The first is that it is both statically and strongly typed, so we’ll need to explicitly annotate these function types. Second, Lua functions are dynamically allocated (‘boxed’.) Rust does not allocate silently because it prefers to be explicit and is a system language designed for maximally efficient code. Third, closures share references with their environment. In the case of Lua, the garbage collector ensures that these references will live long enough. With Rust, the borrow checker needs to be able to track the lifetimes of these references.",
      "url": "http://stevedonovan.github.io/rustifications/2018/08/18/rust-closures-are-hard.html",
      "tweet_url": "https://twitter.com/StevedInJoburg/status/1035825868826791937",
      "date_published": "2018-08-18T00:00:00+02:00",
      "author": {
        "name": "Steve Donovan",
        "url": "http://stevedonovan.github.io/rustifications/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "5d84ad61-702d-400b-ac40-6325904e031d",
      "title": "Feasible functors in Rust",
      "content_text": "withoutboats, one of the Rust language design team, recently posted a thread on the infeasibility of monads as a useful abstraction technique in Rust, as a response to the persistence of some (usually from outside the Rust community) in claiming that “Rust is doing things incorrectly” by developing specific solutions to problems, rather than using a general category theoretic framework for everything. The points demonstrate real difficulties with attempting to use a general framework for these problems and to me serves perfectly as a “the ball’s in your court now” to anyone claiming Rust is ignoring theory and coming up with unnecessary solutions to solved problems: if you think Rust could use monadic abstractions, you have to be able to address these counterarguments.",
      "url": "https://varkor.github.io/blog/2018/08/28/feasible-functors-in-rust.html",
      "date_published": "2018-08-28T12:20:10+00:00",
      "author": {
        "name": "varkor",
        "url": "https://varkor.github.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "44aebda5-9403-432d-b94e-d81449a1edbf",
      "title": "Using RwLock and CondVars in Rust",
      "content_text": "Read many, write exclusive locks – RwLock Consider a situation where you have a resource that must be manipulated only a single thread at a time, but is safe to be queried by many—that is, you have many readers and only one writer.\n\nWhile you could protect this resource with a mutex, the trouble is that the mutex makes no distinction between its lockers; every thread will be forced to wait, no matter what their intentions.",
      "url": "https://tutorialedge.net/rust/using-rwlocks-and-condvars-rust/",
      "date_published": "2018-09-01T15:09:49+01:00",
      "author": {
        "name": "Brian L. Troutwine",
        "url": "//plus.google.com/b/115194233692529836662"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "7610bbc1-58a1-413b-a4a3-dad7877ca1bd",
      "title": "Rust pattern: Iterating an over a Rc<Vec<T>>",
      "content_text": "This post examines a particular, seemingly simple problem: given ownership of a Rc<Vec<u32>>, can we write a function that returns an impl Iterator<Item = u32>? It turns out that this is a bit harder than it might at first appear – and, as we’ll see, for good reason. I’ll dig into what’s going on, how you can fix it, and how we might extend the language in the future to try and get past this challenge.",
      "url": "http://smallcultfollowing.com/babysteps/blog/2018/09/02/rust-pattern-iterating-an-over-a-rc-vec-t/",
      "tweet_url": "https://twitter.com/nikomatsakis/status/1036285759576260608",
      "date_published": "2018-09-02T00:00:00-04:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "271f4485-7452-487c-a1ee-4043dac3c60e",
      "title": "Rust: Fail Fast and Loudly",
      "content_text": "To panic or to return a Result: why libraries in Rust must weigh their options rather than accepting a never-panic mandate.",
      "url": "https://blog.shivoa.net/2018/08/rust-fail-fast-and-loudly.html",
      "tweet_url": "https://twitter.com/Shivoa/status/1035452640589697024",
      "date_published": "2018-08-31T02:58:00.001+01:00",
      "author": {
        "name": "Shivoa Birch",
        "url": "https://plus.google.com/104688779548004579468"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "715ee4bf-9164-4c58-aa4f-93f088859281",
      "title": "Benchmarking a Rust web application",
      "content_text": "I set out out my goal 9 for Rustnish: Write benchmark code that compares runtime performance of Rustnish against Varnish. Use cargo bench to execute the benchmarks.\n\nThe basic idea of a performance test here is to send many HTTP requests to the web service (the reverse proxy in this case) and measure how fast the responses arrive back. Comparing the results from Rustnish and Varnish should give us an idea if our performance expectations are holding up.",
      "url": "https://klausi.github.io/rustnish/2018/08/31/benchmarking-a-rust-web-application.html",
      "tweet_url": "https://twitter.com/_klausi_/status/1036354457813041153",
      "date_published": "2018-08-31T00:00:00+00:00",
      "author": {
        "name": "klausi",
        "url": "https://klausi.github.io/rustnish/"
      },
      "tags": [
        "Web and Network Services",
        "Performance"
      ]
    },
    {
      "id": "c3d8acef-fe90-4a0c-9fc5-9061f0694581",
      "title": "Rust Factory Without Box (Trait Object)",
      "content_text": "I’ve been playing around a lot with Rust recently and it’s quickly becoming my second-favourite programming language. One of the things I’ve been playing with is some Object Oriented design concepts as they might apply.",
      "url": "https://singpolyma.net/2018/09/rust-factory-without-box-trait-object/",
      "date_published": "2018-09-01T17:52:00+00:00",
      "author": {
        "name": "Stephen Paul Weber",
        "url": "https://singpolyma.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "deb45294-d269-481c-a767-f4fd7c00cf0f",
      "title": "Primitives in Rust are Weird (and Cool)",
      "content_text": "I wrote a really small Rust program a while back because I was curious. I was 100% convinced itcouldn’t possibly run. And to my complete befuddlement, it compiled, ran, and produced a completely sensible output.",
      "url": "https://speice.io/2018/09/primitives-in-rust-are-weird.html",
      "date_published": "2018-09-01T00:00:00-04:00",
      "author": {
        "name": "Bradlee Speice",
        "url": "https://speice.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "90241d58-f6a1-4df5-9c3f-15c94998c6df",
      "title": "Thoughts on Rust from a PHP developer!",
      "content_text": "I first starting learning Rust about 6 months ago, I was looking for a new language to learn when I came across it. At first I thought Rust was only meant to be a low level, systems programming language, but the more I learned, the more I realised the potential it has for high level programming and web applications. Also, along the way I learned many ways in which Rust prevents many of the typical bugs often found in applications written in other programming languages.",
      "url": "https://www.smashing-bugs.tk/software-development/rust/2018/08/27/on-rust-from-a-php-developer.html",
      "tweet_url": "https://twitter.com/dicabrejas/status/1034197625526878208",
      "date_published": "2018-08-27T14:41:11+00:00",
      "author": {
        "name": "Diego Cabrejas",
        "url": "https://www.smashing-bugs.tk/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a2e99609-1298-4f79-b2f3-0cce908a701f",
      "title": "Serde Deserialize This or That into u64",
      "content_text": "Recently I ran into a bug in my code; hey, it happens. The bug was that I had a struct which could serialize into json, but could not deserialize from its own json. The struct holds a value for a mac address, which is 48-bit integer (that i store in a u64), but it is serialized using the network interface name. For example on my mac, i have a network interface named en1 with the mac address of 20:c9:d0:b0:a4:71.",
      "url": "https://noyez.gitlab.io/post/2018-08-28-serilize-this-or-that-into-u64/",
      "date_published": "2018-08-28T00:00:00+00:00",
      "author": {
        "name": "Noyez",
        "url": "https://noyez.gitlab.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "09fcee2d-1825-46a0-952f-7035c41b2b32",
      "title": "Introduction to asynchronous programming in Rust",
      "content_text": "An alternate introdcution to the APR book. This book aims to be a comprehensive, up-to-date guide on the async story in Rust, appropriate for beginners and old hands alike. We assume you already know Rust fairly well, including having done some multi-threaded programming. If any Rust terms in this guide are unfamiliar, you should check out the Rust book.",
      "url": "https://github.com/nrc/apr-intro",
      "tweet_url": "https://twitter.com/nick_r_cameron/status/1034956987958800389",
      "date_published": "2018-08-30T10:12:00+00:00",
      "author": {
        "name": "Nick Cameron",
        "url": "http://www.ncameron.org/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "09bd9199-be43-439f-ad36-d22904a73fb1",
      "title": "Debugging an Rc<T> reference leak in Rust",
      "content_text": "The bug that caused two brown-paper-bag releases in librsvg — because it was leaking all the SVG nodes — has been interesting. Memory leaks in Rust? Isn't it supposed to prevent that? Well, yeah, but the leaks were caused by the C side of things, and by unsafe code in Rust, which does not prevent leaks.",
      "url": "https://people.gnome.org/~federico/blog/debugging-reference-leak-in-rust.html",
      "date_published": "2018-08-29T16:47:13-05:00",
      "author": {
        "name": "Federico Mena Quintero",
        "url": "https://people.gnome.org/~federico/blog/index.html"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ed925df2-a1c7-4125-a27c-7cbda8dbac71",
      "title": "Programming Servo: the makings of a task-queue",
      "content_text": "In Servo, task-sources are implemented via a channel, whose sender is cloned for each specific task-source, and where tasks are messages sent on the channel and containing a closure representing the actual task.",
      "url": "https://medium.com/programming-servo/programming-servo-the-makings-of-a-task-queue-b4138cd246ca",
      "date_published": "2018-08-28T10:11:58.984+00:00",
      "author": {
        "name": "Gregory Terzian",
        "url": "https://medium.com/@polyglot_factotum"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "8b60e040-4635-4a84-b8a6-3e0f2933f066",
      "title": "Password Generation in Ruby and Rust",
      "content_text": "Writing the same password generator in two different languages to learn more Rust.",
      "url": "https://hur.st/blog/2018/08-25-password-generation-in-ruby-and-rust/",
      "tweet_url": "https://twitter.com/blaagh/status/1033471555500732417",
      "date_published": "2018-08-25T00:00:00+00:00",
      "author": {
        "name": "Thomas Hurst",
        "url": "https://hur.st/"
      },
      "tags": [
        "Tools and Applications",
        "Getting Started"
      ]
    },
    {
      "id": "10c577b9-fdf3-4aa3-80dd-78c6e4abb8c7",
      "title": "From Rust to beyond: The ASM.js galaxy",
      "content_text": "The second galaxy that our Rust parser will explore is the ASM.js galaxy. This post will explain what ASM.js is, how to compile the parser into ASM.js, and how to use the ASM.js module with Javascript in a browser. The goal is to use ASM.js as a fallback to WebAssembly when it is not available. I highly recommend to read the previous episode about WebAssembly since they have a lot in common.",
      "url": "https://mnt.io/2018/08/28/from-rust-to-beyond-the-asm-js-galaxy/",
      "date_published": "2018-08-28T07:39:03+00:00",
      "author": {
        "name": "Ivan Enderlin",
        "url": "https://mnt.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "7a251e22-3430-4226-85e0-a94e73b3e785",
      "title": "Experimental async / await support for Tokio",
      "content_text": "In case you haven’t heard, async / await is a big new feature that is being worked on for Rust. It aims to make asynchronous programming easy (well, at least a little bit easier than it is today). The work has been on going for a while and is already usable today on the Rust nightly channel.\n\nI’m happy to announce that Tokio now has experimental async / await support! Let’s dig in a bit.",
      "url": "https://tokio.rs/blog/2018-08-async-await/",
      "tweet_url": "https://twitter.com/carllerche/status/1034166438032957443",
      "date_published": "2018-08-27T00:00:00+00:00",
      "author": {
        "name": "Carl Lerche",
        "url": "https://tokio.rs/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a7804e3a-d98b-4135-9d38-e75aeb294961",
      "title": "Oxidizing sourmash: WebAssembly",
      "content_text": "In \"Oxidizing sourmash: Python and FFI\" I described my road to learn Rust, but something that I omitted was that around the same time the WebAssembly support in Rust started to look better and better and was a huge influence in my decision to learn Rust. Reimplementing the sourmash C++ extension in Rust and use the same codebase in the browser sounded very attractive, and now that it was working I started looking into how to use the WebAssembly target in Rust.",
      "url": "https://blog.luizirber.org/2018/08/27/sourmash-wasm/",
      "tweet_url": "https://twitter.com/luizirber/status/1034206952773935104",
      "date_published": "2018-08-27T15:30:00-03:00",
      "author": {
        "name": "Luiz Irber",
        "url": "https://blog.luizirber.org/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "e2e12b4d-817f-4c1b-997f-285d9eec6a74",
      "title": "IntelliJ Rust features. Entry one: Macros",
      "content_text": "In this series of short blog posts, we are going to take a closer look at the key Rust related features present in JetBrains IDEs through our corresponding plugin.",
      "url": "https://blog.jetbrains.com/clion/2018/08/intellij-rust-features-entry-one-macros/",
      "date_published": "2018-08-24T16:11:11+00:00",
      "author": {
        "name": "Kirill Malich",
        "url": "https://blog.jetbrains.com/clion/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "fcadb47a-753e-44c9-830e-0e2cda34b365",
      "title": "Programming Servo: The Debug Way",
      "content_text": "Servo is a huge project. I have counted the lines of code for you. There are almost a hundred thousand lines of code in the Servo project. To develop such a big project, knowing how to debug in a right way is very important, since you would like to find the bottleneck in a fast and efficient way.\n\nIn this article, I will teach you some tips to use GDB developing and debugging your Rust code in the Servo project.",
      "url": "https://medium.com/coding-neutrino-blog/programming-servo-the-debug-way-5db01f09b7f4",
      "date_published": "2018-08-26T14:55:42.024+00:00",
      "author": {
        "name": "Liu An Chi",
        "url": "https://medium.com/@tigercosmos"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "f9bf5234-b8f7-4a0d-9908-e1cf35c6ba8b",
      "title": "Comparing code counters",
      "content_text": "This document is a compilation of various benchmarks and comparisons between code counters, namely tokei, cloc, scc, and loc. This document seeks to compare performance, and accuracy of the code counters. polyglot is not currently included as it was unabled to be installed on the machine at the time of writing.",
      "url": "https://github.com/Aaronepower/tokei/blob/master/COMPARISON.md",
      "date_published": "2018-08-25T21:00:24+00:00",
      "author": {
        "name": "Aaron Power",
        "url": "https://github.com/Aaronepower/tokei"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "1b68ce01-24d8-45a9-88df-be24c465141b",
      "title": "Programmatically generated artwork",
      "content_text": "I have made four rust programs for programmatically generating artwork in different styles. Here is a sample in each style, along with an explanation of the algorithms.",
      "url": "https://isaacg1.github.io/posts/programmatically-generated-artwork/",
      "date_published": "2018-08-26T02:29:13-04:00",
      "author": {
        "name": "Isaac Grosof",
        "url": "https://isaacg1.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "13973f76-d793-4df8-9529-bca5f5f84428",
      "title": "Easy proc_macro_derive's with synstructure",
      "content_text": "Recently, I found myself in the market for some quickcheck. However, there were custom types, which had no Arbitrary implementation. Wondering if someone had already written a procedural macro to derive it, I found panicbit’s quickcheck_derive crate. However, to my dismay, it was severely limited in that it could only derive Arbitrary for structs.",
      "url": "https://llogiq.github.io/2018/08/25/synstruct.html",
      "tweet_url": "https://twitter.com/llogiq/status/1033343536274526208",
      "date_published": "2018-08-25T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "f7523f30-31c4-4699-9071-ec6f7ccd1049",
      "title": "Travel The World Using Partially-Mapped (PMX) Crossover in Rust And JavaScript",
      "content_text": "Implementing a genetic algorithm in JavaScript and Rust.",
      "url": "https://blog.x5ff.xyz/blog/ai-rust-javascript-pmx/",
      "date_published": "2018-08-26T00:00:00+00:00",
      "author": {
        "name": "Claus",
        "url": "https://blog.x5ff.xyz/blog"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "b0c75f8a-24c3-449e-bc2d-97638d193d3e",
      "title": "Why an Interior Mutable abstraction is needed in the Rust core library",
      "content_text": "Interior mutabiliby is a concept known to anyone who have programmed in Rust for a while. And even though Rust's stdlib have several wrapper-types allowing interior mutability there is no trait unifying these types. Motivated by writing libraries suitable for no_std development that are fully safe to use with threads, this blog post will attempt to fill in one gap in the Rust stdlib.",
      "url": "http://blog.kjeka.com/rust/programming/tmcl/2018/08/24/interior-mut/",
      "date_published": "2018-08-24T00:00:00+00:00",
      "author": {
        "name": "Kjetil Kjeka",
        "url": "http://blog.kjeka.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4a0db6c9-2c0d-4455-b353-474e4f59c87a",
      "title": "Calling C# natively from Rust",
      "content_text": "A couple of months ago, I created my first Rust program; a music manager called seiri. seiri is actually a rewrite of a previous, much buggier program that I used to organize my music that was written in C#. The tag library of choice was of course, taglib-sharp, a port of the C++ library TagLib to the .NET ecosystem. Since Rust unfortunately doesn’t have its own native port of TagLib, and any C bindings available didn’t expose the picture API, the most obvious thing to do was to use the C# library with Rust somehow, right?",
      "url": "https://medium.com/@chyyran/calling-c-natively-from-rust-1f92c506289d",
      "tweet_url": "https://twitter.com/chyyran/status/1033211497080598528",
      "date_published": "2018-08-24T01:07:46.707+00:00",
      "author": {
        "name": "Ronny Chan",
        "url": "https://medium.com/@chyyran"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "99ecbdf0-983f-42d8-850a-5e0532770f17",
      "title": "Introducing windows-acl: working with ACLs in Rust",
      "content_text": "Access Control Lists (ACLs) are an integral part of the Microsoft Windows security model. In addition to controlling access to secured resources, they are also used in sandboxing, event auditing, and specifying mandatory integrity levels. They are also exceedingly painful to programmatically manipulate, especially in Rust. Today, help has arrived — we released windows-acl, a Rust crate that simplifies the manipulation of access control lists on Windows.",
      "url": "https://blog.trailofbits.com/2018/08/23/introducing-windows-acl-working-with-acls-in-rust/",
      "date_published": "2018-08-23T11:50:39+00:00",
      "author": {
        "name": "Trail of Bits",
        "url": "https://blog.trailofbits.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "ba6b3643-c414-4efe-90a4-4ea6fd45ef3d",
      "title": "Rust, meet q",
      "content_text": "We leverage the elegance of kdb+ and the power of Rust to create data applications that can process data at the rate of tens of GB/second on consumer grade hardware.",
      "url": "https://blog.redsift.com/labs/rust-meet-q/",
      "date_published": "2018-08-23T13:08:16+00:00",
      "author": {
        "name": "Rahul",
        "url": "https://blog.redsift.com/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "4857abad-3757-40b8-a899-93442e4982e9",
      "title": "Oxidizing sourmash: Python and FFI",
      "content_text": "Last December I decided to give Rust a run: I spent some time porting the C++ bits of sourmash to Rust. The main advantage here is that it's a problem I know well, so I know what the code is supposed to do and can focus on figuring out syntax and the mental model for the language. I started digging into the symbolic codebase and understanding what they did, and tried to mirror or improve it for my use cases.",
      "url": "https://blog.luizirber.org/2018/08/23/sourmash-rust/",
      "tweet_url": "https://twitter.com/luizirber/status/1032779995129597952",
      "date_published": "2018-08-23T17:00:00-03:00",
      "author": {
        "name": "Luiz Irber",
        "url": "https://blog.luizirber.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "2ff6e0ef-6a4a-4644-bb22-e6e7858955f9",
      "title": "Verifying Rust Programs with SMACK",
      "content_text": "Rust is an emerging systems programming language with guaranteed memory safety and modern language features that has been extensively adopted to build safety-critical software. However, there is currently a lack of automated software verifiers for Rust. In this work, we present our experience extending the SMACK verifier to enable its usage on Rust programs. We evaluate SMACK on a set of Rust programs to demonstrate a wide spectrum of language features it supports.",
      "url": "http://soarlab.org/2018/07/atva2018-bhr/",
      "date_published": "2018-07-30T20:39:49+00:00",
      "author": {
        "name": "Marek Baranowski, Shaobo He, Zvonimir Rakamaric",
        "url": "http://soarlab.org/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "72c8ca7f-1f7e-47f5-aebc-f06e63a1b367",
      "title": "Gfx-hal Tutorial part 1: Resizing windows",
      "content_text": "This tutorial builds on the code we wrote in the previous part. You can find the new code here with comments explaining everything that’s changed, and run it to see what the end result will look like. Last time we got a single triangle rendering on screen. This time we’re going to look at what we need to do to allow window resizing to work properly.",
      "url": "https://falseidolfactory.com/2018/08/23/gfx-hal-part-1-resizing-windows.html",
      "tweet_url": "https://twitter.com/Mistodon/status/1032689818118053888",
      "date_published": "2018-08-23T00:00:00+00:00",
      "author": {
        "name": "Mistodon",
        "url": "https://falseidolfactory.com/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "1332a957-6689-4053-884b-ec31ca39f505",
      "title": "Live Refreshing Cargo Docs",
      "content_text": "rustdoc is a great tool, but as of now there isn’t an official way to have its generated docs refresh as you make edits. Running cargo doc with the --open argument will open the generated docs in browser window. If you make changes to your source code, you’ll need to re-run cargo doc to have the changes reflected in your browser. By chaining together a few other Rust tools, we can pretty easily get the functionality of live-reloading docs.",
      "url": "https://benjamincongdon.me/blog/2018/08/22/Live-Refreshing-Cargo-Docs/",
      "tweet_url": "https://twitter.com/BenRCongdon/status/1032426700913745920",
      "date_published": "2018-08-22T21:03:28+00:00",
      "author": {
        "name": "Benjamin Congdon",
        "url": "https://benjamincongdon.me/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "7c167657-c185-479c-afc3-93b0187b8359",
      "title": "Two Kinds of Invariants: Safety and Validity",
      "content_text": "When talking about the Rust type system in the context of unsafe code, the discussion often revolves around invariants: Properties that must always hold, because the language generally assumes that they do. In fact, an important part of the mission of the Unsafe Code Guidelines strike force is to deepen our understanding of what these invariants are.\n\nHowever, in my view, there is also more than one invariant, matching the fact that there are (at least) two distinct parties relying on these invariants: The compiler, and (authors of) safely usable code. This came up often enough in recent discussions that I think it is worth writing it down properly once, so I can just link here in the future.",
      "url": "https://www.ralfj.de/blog/2018/08/22/two-kinds-of-invariants.html",
      "date_published": "2018-08-22T00:00:00+00:00",
      "author": {
        "name": "Ralf Jung",
        "url": "https://www.ralfj.de/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "0c187e7b-4693-4f2c-b330-ce51a314c6eb",
      "title": "To Make or Not to Make – Using cargo make for Rookeries v0.12.0",
      "content_text": "I recently continued with my exploration of Rust through Rookeries (my attempt at a static site generator/backing API server). This time I worked on switching over from using invoke and GNU make to using a nice build system called cargo-make. Overall I am quite happy with the result.",
      "url": "https://dorianpula.ca/2018/08/22/to-make-or-not-to-make-using-cargo-make-for-rookeries-v0-12-0/",
      "tweet_url": "https://twitter.com/dorianpula/status/1032402213631676416",
      "date_published": "2018-08-22T23:00:27+00:00",
      "author": {
        "name": "Dorian Pula",
        "url": "https://dorianpula.ca/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "edfe7063-b893-42db-aa08-61adcaddf56b",
      "title": "Another look at the pinning API",
      "content_text": "One thing has always nagged about the API we have right now though: the proliferation of different reference types that it implies. Today, the pin feature adds the PinMut and PinBox types, but in theory there ought to be a “pinned” version of every pointer in the standard library: PinRc and PinArc and so on. This is a very unfortunate consequence, but so far we have not found a good way to make pinning work compositionally - to have a single adapter that could be combined with any pointer.\n\nLast night, a bit of inspiration struck me, and I realized that it is possible to make a compositional Pin type. This isn’t a fundamental change to the pinning model, just an API refactoring, but I’ve put a blocking concern on the proposal to stabilize Pin so that we can consider this possibility.",
      "url": "https://boats.gitlab.io/blog/post/rethinking-pin/",
      "tweet_url": "https://twitter.com/withoutboats/status/1032423791454896128",
      "date_published": "2018-08-22T00:00:00+00:00",
      "author": {
        "name": "withoutboats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "49ccf817-c69f-4467-9391-9fccc619e928",
      "title": "More on the RLS and a 1.0 release",
      "content_text": "In my last post, I announced a release candidate for the RLS 1.0. There has been a lot of feedback (and quite a lot of that was negative on the general idea), so I wanted to expand on what 1.0 means for the RLS, and why I think it is ready. I also want to share some of my vision for the future of the RLS, in particular changes that might warrant a major version release.",
      "url": "https://www.ncameron.org/blog/more-on-the-rls-and-a-1-0-release/",
      "tweet_url": "https://twitter.com/nick_r_cameron/status/1032555788181467137",
      "date_published": "2018-08-23T09:10:11+00:00",
      "author": {
        "name": "Nick Cameron",
        "url": "http://www.ncameron.org/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d26e4a2d-a00d-4ab2-95e3-326ded5d1fe0",
      "title": "Reading files quickly in Rust",
      "content_text": "With the latest release of 1.27 of Rust (SIMD support) the code counters written in Rust were suddenly a lot faster in Linux. In fact it meant that the fastest one tokei was suddenly faster than my scc for almost all tests. In addition a new project polyglot written in a language I have never heard of ATS popped up which is also now faster than my Go program for any repository when running on a machine with less than 8 cores.",
      "url": "https://boyter.org/posts/reading-files-quickly-in-rust/",
      "date_published": "2018-08-20T00:00:00+00:00",
      "author": {
        "name": "Ben Boyter",
        "url": "https://boyter.org/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "b1b8abb7-362a-4004-8b6c-913ca1c85773",
      "title": "From Rust to beyond: The WebAssembly galaxy",
      "content_text": "The first galaxy that our Rust parser will explore is the WebAssembly (WASM) galaxy. This post will explain what WebAssembly is, how to compile the parser into WebAssembly, and how to use the WebAssembly binary with Javascript in a browser and with NodeJS.",
      "url": "https://mnt.io/2018/08/22/from-rust-to-beyond-the-webassembly-galaxy/",
      "tweet_url": "https://twitter.com/mnt_io/status/1032176694285791232",
      "date_published": "2018-08-22T07:46:27+00:00",
      "author": {
        "name": "Ivan Enderlin",
        "url": "https://mnt.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "e3b3767b-4228-4432-a525-15d8cbc99f77",
      "title": "[blog series] From Rust to beyond: Prelude",
      "content_text": "This series of posts is about those bindings, and explains how to send Rust beyond earth, into many different galaxies. Rust will land in: The WebAssembly galaxy, The ASM.js galaxy, The C galaxy, The PHP galaxy, and The NodeJS galaxy. The ship is currently flying into the Java galaxy, this series may continue if the ship does not crash or has enough resources to survive!",
      "url": "https://mnt.io/2018/08/21/from-rust-to-beyond-prelude/",
      "date_published": "2018-08-21T08:46:20+00:00",
      "author": {
        "name": "Ivan Enderlin",
        "url": "https://mnt.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d6f7c587-36f5-4276-8b5b-60cd8d857606",
      "title": "History of the Rand crate",
      "content_text": "I wrote this bit to give a some background about why Rand looks the way it does, and why it is time to make some changes. The new release, Rand 0.5, is getting almost ready fro release. Also I hope it is a bit entertaining to read about the history in combination with early Rust.",
      "url": "https://www.reddit.com/r/rust/comments/87qy40/history_of_the_rand_crate/",
      "date_published": "2018-03-28T21:52:43+11:00",
      "author": {
        "name": "u/pitdicker",
        "url": "https://www.reddit.com/user/pitdicker"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "4f79a6a7-0d44-44ce-b82c-c4376e073660",
      "title": "C2rust - A bridge to C",
      "content_text": "The c2rust project exists to help bridge the fact that there is a lot of valuable software written in C and that there have been great strides in making safer and more-reliable programming languages since C was designed. Rust offers many modern improvements for C while still preserving the low-level control that makes it attractive. Beyond that, Rust provides new abstraction capabilities like parametricity, type-traits, methods, a module system, thread-safety, and more.",
      "url": "https://galois.com/blog/2018/08/c2rust/",
      "date_published": "2018-08-14T18:16:29+00:00",
      "author": {
        "name": "Eric Mertens",
        "url": "https://galois.com/blog/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "5e9a2cd7-e018-41d6-bfeb-a0face2c3f0e",
      "title": "Journey into rust #2: Compute Shaders",
      "content_text": "I realized after my first post of this series that it’s not just a journey into rust but also OpenGL. I’ve used other Graphics API’s before but never actually got my hands dirty into OpenGL. Someone on the rust user forums (they are awesome, go check it out!) suggested using compute shaders instead. At the time I had never used compute shaders for a project so I decided to take some time to refactor the program to use a compute shader. This post is a follow up on that remark and will explore the possibilities of using a rust together with OpenGL to run compute shaders.",
      "url": "https://jonathansteyfkens.com/rust/opengl/graphics/compute/shader/2018/08/19/compute-shaders.html",
      "tweet_url": "https://twitter.com/Jonathansty/status/1031262724209012736",
      "date_published": "2018-08-19T20:30:00+00:00",
      "author": {
        "name": "Jonathan Steyfkens",
        "url": "https://jonathansteyfkens.com/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "8914a4f4-eff5-4563-a82f-0c55d013ef7f",
      "title": "Ludum Dare 42 Postmortem",
      "content_text": "One of my favorite game jams is Ludum Dare: It’s just you, a theme, and 48 hours to make a game. Pure and challenging, and I’ve participated in several of them from time to time with a variety of tools. Usually my go-to is Unity3D, though arguably my best game was in Python+Pygame. This time though, for Ludum Dare 42 on August 2018, I finally had both the energy and ability to write my game in Rust, using ggez. So I decided to write about it!",
      "url": "https://wiki.alopex.li/LD42Postmortem",
      "date_published": "2018-08-13T14:53:05+00:00",
      "author": {
        "name": "Simon Heath",
        "url": "http://patreon.com/icefox"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "29c7c773-0be7-4694-a11d-41717eac218c",
      "title": "Safe Partial Initialization In Rust",
      "content_text": "Say we have a struct, Foo, with multiple fields that we would like to partially initialize without resorting to using unsafe. We could write a procedural macro called PartialInit, for example, which would be invoked using derive.",
      "url": "https://scottjmaddox.github.io/Safe-partial-initialization-in-Rust/",
      "tweet_url": "https://twitter.com/scottjmaddox/status/1031300774150778881",
      "date_published": "2018-08-19T00:00:00+00:00",
      "author": {
        "name": "Scott J Maddox",
        "url": "https://scottjmaddox.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "9f3fb115-f832-421a-bf28-18148cc3bde0",
      "title": "A Beginner’s Guide to Rust Macros ✨",
      "content_text": "Demystifying one of Rust’s most powerful feature.",
      "url": "https://medium.com/@phoomparin/a-beginners-guide-to-rust-macros-5c75594498f1",
      "date_published": "2018-08-18T18:35:50.344+00:00",
      "author": {
        "name": "Phoomparin Mano",
        "url": "https://medium.com/@phoomparin"
      },
      "tags": [
        "Language",
        "Getting Started"
      ]
    },
    {
      "id": "f025d0a3-cc4c-45c7-9587-71057b3d9cbf",
      "title": "So You Want to Build a Language VM in Rust - Part 00",
      "content_text": "Hi there! This is the prelude to a series of posts to detailing how to build a language VM. If you are familiar with terms like registers, program counter, and assembly, feel free to skip this post. If not, read on. Please note this is nowhere near comprehensive, but enough to understand what we’re building.",
      "url": "https://medium.com/iridium-vm/so-you-want-to-build-a-language-vm-part-0-f9132f611a1b",
      "date_published": "2018-08-17T19:59:12.548+00:00",
      "author": {
        "name": "Fletcher Haynes",
        "url": "https://medium.com/@subnet_zero"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "5eb3a4b0-7653-43b1-9958-a8b96bc32338",
      "title": "Gfx-hal Tutorial part 0: Drawing a triangle",
      "content_text": "Eight part series on using gfx-hal for low level graphics programming.",
      "url": "https://falseidolfactory.com/2018/08/16/gfx-hal-part-0-drawing-a-triangle.html",
      "tweet_url": "https://twitter.com/Mistodon/status/1030134957631565825",
      "date_published": "2018-08-16T00:00:00+00:00",
      "author": {
        "name": "Mistodon",
        "url": "https://falseidolfactory.com/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "ab387870-cbed-4f6d-b1e2-22d2c2686de4",
      "title": "RSoC: Relibc - Wrap up",
      "content_text": "Time for me to pack up and never ever contribute to Redox ever again… Just kidding. This isn’t goodbye, you can’t get rid of me that easily I’m afraid. I’ll definitely want to contribute more, can’t however say with certainty how much time I’ll get, for school is approaching, quickly",
      "url": "https://www.redox-os.org/news/rsoc-relibc-final/",
      "date_published": "2018-08-11T00:00:00+00:00",
      "author": {
        "name": "jD91mZM2",
        "url": "https://www.redox-os.org/news/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "bbb6ed5a-a451-4abf-bbff-2e0b33f6660a",
      "title": "Rust concurrency patterns: No context, no cancel, no leaks",
      "content_text": "Let’s put ourselves to the challenge of having an ‘infinite’ generator, which will have to be told to stop generating by the consumer…",
      "url": "https://medium.com/@polyglot_factotum/rust-concurrency-patterns-no-context-no-cancel-no-leak-b6c1ec2dafa5",
      "date_published": "2018-08-07T10:54:56.242+00:00",
      "author": {
        "name": "Gregory Terzian",
        "url": "https://medium.com/@polyglot_factotum"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d711d36a-fa00-4b26-a367-26b70589af2e",
      "title": "Logging from Rust in librsvg",
      "content_text": "Over in this issue we are discussing how to add debug logging for librsvg.  A popular way to add logging to Rust code is to use the log crate. However, the log create is just a facade, and by default the messages do not get emitted anywhere. The calling code has to set up a logger. Crates like env_logger let one set up a logger, during program initialization, that gets configured through an environment variable. This is a problem for librsvg: we are not the program's initialization! Librsvg is a library; it doesn't have a main() function. And since most of the calling code is not Rust, we can't assume that they can call code that can initialize the logging framework.",
      "url": "https://people.gnome.org/~federico/blog/logging-in-librsvg.html",
      "date_published": "2018-08-03T19:29:43-05:00",
      "author": {
        "name": "Federico Mena Quintero",
        "url": "https://people.gnome.org/~federico/blog/index.html"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "09da227e-6517-48db-ae3f-90f1d1086731",
      "title": "Anatomy Of a Great Rust Blog",
      "content_text": "I've posted 718 articles to Read Rust. This post shares some insights I've gleaned from them, to make your posts as readable and discoverable as possible.",
      "url": "http://www.wezm.net/technical/2018/08/anatomy-of-a-great-rust-blog/",
      "tweet_url": "https://twitter.com/wezm/status/1031042328662700032",
      "date_published": "2018-08-18T06:17:00+00:00",
      "author": {
        "name": "Wesley Moore",
        "url": "http://www.wezm.net/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "acd4faef-4a0e-411b-9995-1a3554598c04",
      "title": "Empty Rust File to Game in Nine Days",
      "content_text": "A Vulkan game from scratch in nine days. Using minimal libraries and pure Rust.",
      "url": "https://blog.shivoa.net/2018/07/empty-rust-file-to-game-in-nine-days.html",
      "date_published": "2018-07-28T22:26:00+01:00",
      "author": {
        "name": "Shivoa Birch",
        "url": "https://plus.google.com/104688779548004579468"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "8b803f70-9098-40d0-97af-5cdff0cde756",
      "title": "Programming Servo: Anatomy of a Fetch",
      "content_text": "Today, let’s go through an entire fetch in Servo, starting with an example in JS.",
      "url": "https://medium.com/programming-servo/anatomy-of-a-fetch-8872a5c843cd",
      "date_published": "2018-08-17T22:29:36.264+00:00",
      "author": {
        "name": "Gregory Terzian",
        "url": "https://medium.com/@polyglot_factotum"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "7f4b6826-72f6-4842-882d-2a2e5378bdcd",
      "title": "How Rust’s standard library was vulnerable for years and nobody noticed",
      "content_text": "Rust is a new systems programming language that prides itself on memory safety and speed. The gist of it is that if you write code in Rust, it goes as fast as C or C++, but you will not get mysterious intermittent crashes in production or horrific security vulnerabilities, unlike in the latter two.\n\nThat is, until you explicitly opt in to that kind of thing. Uh oh.",
      "url": "https://medium.com/@shnatsel/how-rusts-standard-library-was-vulnerable-for-years-and-nobody-noticed-aebf0503c3d6",
      "date_published": "2018-08-18T02:47:33.708+00:00",
      "author": {
        "name": "Sergey \"Shnatsel\" Davidoff",
        "url": "https://medium.com/@shnatsel"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "0d9f9b5e-33e1-492a-976e-fcbf0826cbab",
      "title": "rusty_gl: A simple wrapper over rs-gl to make code safer",
      "content_text": "I enjoy using OpenGL a lot, but when I switched from C++ to Rust I found it to be less fun to use. This is because the OpenGL (from gl-rs) code never really fit alongside the rest of my Rust code, due to unsafe blocks, PascalCase function names, hacky conversions to c_void pointers etc. So, to make my life easier in the future when using OpenGL in Rust, I made this crate.",
      "url": "https://www.reddit.com/r/rust/comments/982kqg/rusty_gl_a_simple_wrapper_over_rsgl_to_make_code/",
      "date_published": "2018-08-18T00:10:17+10:00",
      "author": {
        "name": "Hopson97",
        "url": "https://www.reddit.com/user/Hopson97/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "1921a96e-ad32-410f-b0a7-c72dc16d3cde",
      "title": "Rust GraphQL webserver with Warp, Juniper and MongoDB",
      "content_text": "Rust's web frameworks ecosystem is in constant change, but recently a new framework called warp came out implementing a new, original way to solve the old problem of transforming a request into a response, and I wanted to give it a try.\n\nAnd, as I use GraphQL massively at work, I also wanted to check how well Juniper implements it. To add some spice, I used MongoDB as a storage engine instead of the ubiquitous and well-supported SQL databases.",
      "url": "http://alex.amiran.it/post/2018-08-16-rust-graphql-webserver-with-warp-juniper-and-mongodb.html",
      "date_published": "2018-08-16T00:00:00+00:00",
      "author": {
        "name": "/dev/random",
        "url": "http://alex.amiran.it/index.html"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "e53853b1-a7ca-4ffc-bf71-510ed37ea402",
      "title": "Toykio, a toy event loop",
      "content_text": "In this blog post I’d like to present toykio, a simple futures executor intended for learning about how executors with an event loop work. Toykio only provides a very minimal feature set: An event loop and TCP streams and listeners. However, it turns out that due to the fact that futures are composable, this is enough to build complex clients and servers.",
      "url": "https://rust-lang-nursery.github.io/futures-rs/blog/2018/08/17/toykio.html",
      "tweet_url": "https://twitter.com/RustNetWG/status/1030342162985050112",
      "date_published": "2018-08-17T00:00:00+00:00",
      "author": {
        "name": "Alexander Polakov",
        "url": "https://rust-lang-nursery.github.io/futures-rs/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "26f81256-2d48-4d6e-b305-7ed0d88c216b",
      "title": "Writing Integration Tests in Rust",
      "content_text": "As part of my overall change over in Rookeries, from Python to Rust, I rewrote a suite of integration tests for the server API. To celebrate my successful transition, I released version 0.11.0 of Rookeries, whose tests use pure Rust now!",
      "url": "https://dorianpula.ca/2018/08/15/writing-integration-tests-in-rust-releasing-rookeries-v0-11-0/",
      "tweet_url": "https://twitter.com/dorianpula/status/1029865439122391046",
      "date_published": "2018-08-15T23:00:26+00:00",
      "author": {
        "name": "Dorian Pula",
        "url": "https://dorianpula.ca/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "fdc8eef0-1b02-41f7-8340-faf4660db183",
      "title": "Journey into Gentoo eclass",
      "content_text": "I spent some days writing a portage eclass for Gentoo. I want to share my experience.",
      "url": "https://gibix.github.io/gsoc/2018/08/11/journey-into-gentoo-eclass.html",
      "tweet_url": "https://twitter.com/biccoloso/status/1030074867884941312",
      "date_published": "2018-08-11T00:00:00+00:00",
      "author": {
        "name": "gibix",
        "url": "https://gibix.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "2ebd5fc5-6e3a-4933-8775-a7a190539f8b",
      "title": "TSL256X Light Intensity Sensor Driver",
      "content_text": "It is an exciting time to be working in embedded Rust. After writing my first driver, I mostly had the feeling that for driver writers there was a clear expectation and an obvious standard for how things should be done. My experience writing this driver, which uses I2C rather than GPIO, exposed me to a few topics of active discussion within the embedded Rust working group which I hadn’t seen before.",
      "url": "https://www.joshmcguigan.com/blog/tsl256x-light-intensity-sensor-driver/",
      "date_published": "2018-07-15T00:00:00+00:00",
      "author": {
        "name": "Josh Mcguigan",
        "url": "https://www.joshmcguigan.com/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "0a12242d-a074-40cd-afa5-ec83c41c3865",
      "title": "paste a full featured pastebin written in Rust",
      "content_text": "A sensible, modern pastebin written in Rust",
      "url": "https://paste.gg/",
      "tweet_url": "https://twitter.com/jkcclemens/status/1018717425431384066",
      "date_published": "2018-07-16T14:42:15+10:00",
      "author": {
        "name": "Kyle Clemens",
        "url": "https://paste.gg/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "2e354a2e-10fe-410c-adbf-7b739def3ab6",
      "title": "UniverCity released into early access",
      "content_text": "UniverCity is a university management game being programmed in the Rust programming language. As stated above, the game is in early access and is not complete. There will be changes and additions down the line and finishing it may take some time. You may wish to wait until its further along before buying it.",
      "url": "https://thinkof.name/2018/08/14/early-access-release.html",
      "date_published": "2018-08-14T10:00:00+00:00",
      "author": {
        "name": "Thinkofname",
        "url": "https://thinkof.name/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "2105e8ca-6037-4dfa-86f7-644bdbec71bd",
      "title": "Futures 0.3.0-alpha.3",
      "content_text": "A compatibility layer between 0.3 an 0.1 was developed. It is now possible to convert an 0.3 future into an 0.1 future and vice versa. Similar conversions for streams and sinks are also supported. Additionally, it is now possible to run 0.3 futures and async functions on Tokio’s executor. We have a dedicated blog post coming up that explains this in more detail.",
      "url": "https://rust-lang-nursery.github.io/futures-rs/blog/2018/08/15/futures-0.3.0-alpha.3.html",
      "tweet_url": "https://twitter.com/RustNetWG/status/1029528187963752448",
      "date_published": "2018-08-15T00:00:00+00:00",
      "author": {
        "name": "Josef Brandl",
        "url": "https://rust-lang-nursery.github.io/futures-rs/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "6c12615c-c39d-4123-993e-a8581915e2f0",
      "title": "Rust concurrency patterns: communicate by sharing your Sender",
      "content_text": "Doing concurrency in ‘share by communicating’ style has been popularized by the Go community. It’s a valuable approach to concurrency in Rust too, however, one has to be aware of the different semantics of Rust vs Go channels when doing so.",
      "url": "https://medium.com/@polyglot_factotum/rust-concurrency-patterns-communicate-by-sharing-your-sender-11a496ce7791",
      "date_published": "2018-07-21T16:10:44.191+00:00",
      "author": {
        "name": "Gregory Terzian",
        "url": "https://medium.com/@polyglot_factotum"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "424adcbb-d3de-467b-8ca2-af877e849e85",
      "title": "Introducing the Routinator 3000",
      "content_text": "NLnet Labs is embarking on a new adventure. In the coming months we will be developing an RPKI toolset aimed at making BGP routing more secure. It will consist of three parts: a Certificate Authority package, a Publication Server and Relying Party software. We’ve chosen to do the development in a modern systems programming language, Rust.",
      "url": "https://medium.com/nlnetlabs/introducing-the-routinator-3000-2a234d455b2b",
      "date_published": "2018-07-26T14:43:27.275+00:00",
      "author": {
        "name": "Alex Band",
        "url": "https://medium.com/@alexander_band"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "c027288d-df1a-4945-ad6e-1ca444e689c8",
      "title": "Natively run OCaml from Rust",
      "content_text": "How to get Rust to execute OCaml code and libraries with zero-cost by sharing C libraries. Call OCaml functions from Rust through ffi, fast!",
      "url": "https://blog.s-m.ac/ocaml-rust-ffi/",
      "date_published": "2018-06-07T00:00:00+00:00",
      "author": {
        "name": "Mathias Sablé-Meyer and Lucas E. Morales",
        "url": "https://blog.s-m.ac/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "2cac0c52-a34d-4124-ab89-d117f7b69118",
      "title": "In Memes We Rust",
      "content_text": "Learning Rust to make a Mocking SpongeBob text generator",
      "url": "https://medium.com/@glitteringkatie/in-memes-we-rust-5c920b1e9af7",
      "tweet_url": "https://twitter.com/glitteringkatie/status/1022267699114590208",
      "date_published": "2018-07-25T20:11:46.910+00:00",
      "author": {
        "name": "Katie Hughes ✨",
        "url": "https://medium.com/@glitteringkatie"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "523b014f-5ec9-4569-b31f-44720fb3bbc4",
      "title": "Rust: _(underscore) Does Not Bind",
      "content_text": "Rust is a language that utilizes the RAII idiom, resulting in different code depending on when the object is destroyed.",
      "url": "https://medium.com/codechain/rust-underscore-does-not-bind-fec6a18115a8",
      "date_published": "2018-08-13T07:13:58.080+00:00",
      "author": {
        "name": "Seung Woo Kim",
        "url": "https://medium.com/@koreanboy1120"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a47db977-bb96-4ecf-9203-8c64b438062d",
      "title": "A FizzBuzzy Tour of Traits in Rust",
      "content_text": "Traits are a core part of the Rust programming language, and understanding traits, particularly those which are part of the standard library, is necessary in order to write idiomatic Rust. In this post I’ll write several FizzBuzz implementations, each demonstrating the use of a different trait from the Rust standard library.",
      "url": "https://www.joshmcguigan.com/blog/fizzbuzz-tour-of-traits-rust/",
      "date_published": "2018-08-13T00:00:00+00:00",
      "author": {
        "name": "Josh Mcguigan",
        "url": "https://www.joshmcguigan.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4b9c619b-6d09-43a9-82bb-86887dbd3a53",
      "title": "Diagnosing A Weak Memory Ordering Bug",
      "content_text": "For the first time in my life I tracked a real bug's root cause to incorrect usage of weak memory orderings. Until now weak memory bugs were something I knew about but had subconciously felt were only relevant to wizards coding on big iron, partly because until recently I've spent most of my career using desktop x86 machines.",
      "url": "https://robert.ocallahan.org/2018/08/for-first-time-in-my-life-i-tracked.html",
      "date_published": "2018-08-14T15:18:00+12:00",
      "author": {
        "name": "Robert O'Callahan",
        "url": "http://www.blogger.com/profile/01801341049800948737"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c1519934-b4d6-49ed-bc58-1450331afa63",
      "title": "GSoC 2018 - D3D11 backend for gfx-rs",
      "content_text": "For this years GSoC I (@fkaa) worked on implementing the DirectX 11 backend for gfx, a graphics API which translates to Vulkan, DirectX 12 and Metal.",
      "url": "https://gfx-rs.github.io/2018/08/14/gsoc.html",
      "date_published": "2018-08-14T00:00:00+00:00",
      "author": {
        "name": "Felix Kaaman",
        "url": "https://github.com/fkaa"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "45c51d1f-97ea-41ad-a1fe-3aab3c51d9ee",
      "title": "A Short Serde Deserialize example",
      "content_text": "In my previous post, I described taking a simple enum and creating a custom type in diesel. This post will take that same enum and implement deserialize. I often get tripped up by the mechanics of deserializing so this simple enum makes for a good example. Again, this is to benefit anyone looking for more examples of Serde’s Deserialize as well as for myself, so I can remember next time I need to do this.",
      "url": "https://noyez.gitlab.io/post/2018-08-14-short-serde-deserialize-exapmle/",
      "date_published": "2018-08-14T00:00:00+00:00",
      "author": {
        "name": "Noyez",
        "url": "https://noyez.gitlab.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e9ddc1eb-5ab9-4f23-8b9a-a41cea991044",
      "title": "Tower Web 0.2 — Now 100% comment attribute free",
      "content_text": "The short version is, Tower Web 0.2 was just released and regular Rust attributes are now used instead of magic comments. The doc comment is replaced with #[get(\"/\")]. This is thanks to Rust macro wizard David Tolnay. I also thought that it would be best to immediately push out 0.2 and then we can all pretend 0.1 didn’t happen.",
      "url": "https://medium.com/@carllerche/tower-web-0-2-now-100-comment-attribute-free-3ed0633e47e5",
      "tweet_url": "https://twitter.com/carllerche/status/1029403263165071360",
      "date_published": "2018-08-14T16:22:13.075+00:00",
      "author": {
        "name": "Carl Lerche",
        "url": "https://medium.com/@carllerche"
      },
      "tags": [
        "Web and Network Services",
        "Crates"
      ]
    },
    {
      "id": "df22bc28-0b6f-4d1a-960a-9e29ca258b53",
      "title": "Incremental Parsing in Amp",
      "content_text": "With the latest release of Amp (text editor), syntax highlighting has been overhauled. This post dives into the performance-related redesign that has landed with v0.5.",
      "url": "https://medium.com/@jordan_98525/incremental-parsing-in-amp-ba5e8c3e85dc",
      "tweet_url": "https://twitter.com/wastedintel/status/1029407950551638016",
      "date_published": "2018-08-14T16:13:52.640+00:00",
      "author": {
        "name": "Jordan MacDonald",
        "url": "https://medium.com/@jordan_98525"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "8a47c51e-2de1-47c2-8c3d-3f2d84ae13cb",
      "title": "Never patterns, exhaustive matching, and uninhabited types (oh my!)",
      "content_text": "One of the long-standing issues that we’ve been wrestling with in Rust is how to integrate the concept of an “uninhabited type” – that is, a type which has no values at all. Uninhabited types are useful to represent the “result” of some computation you know will never execute – for example, if you have to define an error type for some computation, but this particular computation can never fail, you might use an uninhabited type.",
      "url": "http://smallcultfollowing.com/babysteps/blog/2018/08/13/never-patterns-exhaustive-matching-and-uninhabited-types-oh-my/",
      "date_published": "2018-08-13T00:00:00-07:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "be4fb7bc-7b10-41ce-af58-e877d70fd73d",
      "title": "Software Security is a Programming Languages Issue",
      "content_text": "This is the the last of three posts on the course I regularly teach, CS 330, Organization of Programming Languages. The first two posts covered programming language styles and mathematical concepts. This post covers the last 1/4 of the course, which focuses on software security, and related to that, the programming language Rust.",
      "url": "http://www.pl-enthusiast.net/2018/08/13/security-programming-languages-issue/",
      "tweet_url": "https://twitter.com/michael_w_hicks/status/1029065291416911877",
      "date_published": "2018-08-13T18:00:43+00:00",
      "author": {
        "name": "Michael Hicks",
        "url": "http://www.pl-enthusiast.net/"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "91714b35-a84b-4ac0-a0ed-57e2bdedc9dc",
      "title": "I learnt Rust: less than a memoir",
      "content_text": "Over the past two months, I worked on a feature for Project Fluent. My feature was needed in the Rust implementation of Fluent and was published as a Rust crate, making my code available to the entire Rust community. Completing this project brought me a great sense of satisfaction, and having contributed a fundamental internationalization crate to the Rust ecosystem is possibly the biggest milestone in my career as a developer.",
      "url": "http://blog.kekoariggin.com/coding/i-learnt-rust-less-than-a-memoir/",
      "tweet_url": "https://twitter.com/UncleNachoDuh/status/1029138403961360384",
      "date_published": "2018-08-13T04:23:32+00:00",
      "author": {
        "name": "Kekoa Riggin",
        "url": "http://blog.kekoariggin.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "3bdf428b-c38a-4964-a8f2-a4e0106bd5d1",
      "title": "Ray Tracing: WebAssembly vs JavaScript",
      "content_text": "For the past few months I've been toying about with WebAssembly. The examples I've built using WebAssembly were very simple and could easily have been written in JavaScript with perfectly adequate performance. This got me thinking it's about time I make something to really shows where WebAssembly shines. This led me down the path of thinking about very compute-demanding applications. An obvious example is 3d graphics rendering. Even a small scene like the ones I've been creating involve computing millions of vector dot product calculations per second. This kind of CPU-intensive application seemed right up the street of WebAssembly.",
      "url": "http://matt-harrison.com/raytracing-webassembly-vs-javascript/",
      "tweet_url": "https://twitter.com/mt_harrison/status/1028861434145386496",
      "date_published": "2018-08-12T14:09:42+00:00",
      "author": {
        "name": "Matt Harrison",
        "url": "http://matt-harrison.com/"
      },
      "tags": [
        "Web and Network Services",
        "Games and Graphics"
      ]
    },
    {
      "id": "47f615b2-5fe1-45a1-b760-9bff19237836",
      "title": "Syntax diagram generator",
      "content_text": "This is a demonstration of a pure-rust library to generate syntax diagrams for macro_rules!().Diagrams are generated fully automatically from rust-source as Scalable Vector Graphics, using customizable CSS for layout.",
      "url": "https://lukaslueg.github.io/macro_railroad_wasm_demo/",
      "date_published": "2018-08-12T15:04:11+00:00",
      "author": {
        "name": "lukaslueg",
        "url": "https://github.com/lukaslueg"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "e19ac48b-7995-4b64-82d8-64d149067b54",
      "title": "Object Models And Identities",
      "content_text": "In many things, Rust is very much like C++. It’s memory management strategy is mostly the same, threading models are copied vanilla, both compile to native code and do about the same optimisations at that time, and traits and templates have a lot in common too. Both tend to be rather feature-rich languages with quite a lot to learn. While Rust is definitely better teacher (I’m looking at you, C++ error message!) and has many more „safety covers“ over the dangerous moving parts inside the engine, the design of the engine is more of an evolution from C++ than a completely new thing.\n\nBut I’ve noticed one rather subtle difference in the philosophy of the languages I’d like to describe here. To make it somewhat more complete, I’ll also throw what some other languages do in this area in.",
      "url": "https://vorner.github.io/2018/08/12/Object-models-and-identities.html",
      "date_published": "2018-08-12T00:00:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ff118dd1-1fe8-4cde-a359-a00325002ebd",
      "title": "Refactoring with Rust macros",
      "content_text": "Refactoring boilerplate code is always easy in dynamically-typed languages, but sometimes takes a bit more effort when constrained by strong typing. This is something I was puzzling over recently, when the penny dropped for me about how Rust's macros can be used to bridge the gap.",
      "url": "https://philbooth.me/blog/refactoring-with-rust-macros",
      "date_published": "2018-08-12T12:54:12+00:00",
      "author": {
        "name": "Phil Booth",
        "url": "https://philbooth.me/blog"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "6f49ae97-11d3-4e1f-ab95-0307bf406aa5",
      "title": "How to alleviate the pain of Rust compile times",
      "content_text": "A few days ago, I wrote about two Rust pain points when using Rust at work. One of these points were the long compile times. In this post, I want to share a few tips that can help alleviate that pain.",
      "url": "https://vfoley.xyz/rust-compile-speed-tips/",
      "date_published": "2018-08-11T00:00:00+00:00",
      "author": {
        "name": "Vincent Foley",
        "url": "http://vfoley.xyz/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "1af176be-1d98-419b-85d5-dfbf78cb74df",
      "title": "Rust needs BFGS. What is BFGS?",
      "content_text": "There is no general “best” way to minimize a function; different kinds of functions require different strategies. However, Python’s scipy and R’s optim both prominently feature an algorithm called BFGS. I’ll explain what BFGS stands for, the problem that it solves, and how it solves it.",
      "url": "https://paulkernfeld.com/2018/08/06/rust-needs-bfgs.html",
      "tweet_url": "https://twitter.com/occupy_paul_st/status/1028699898772946949",
      "date_published": "2018-08-06T00:00:00+00:00",
      "author": {
        "name": "Paul Kernfeld",
        "url": "https://paulkernfeld.com/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "64be78c2-0f4e-413f-ac54-1e6b21215413",
      "title": "Clippy's \"cast_lossless\" Lint Warning",
      "content_text": "Recently, I was trying out clippy  — a linting and static analysis tool for Rust, when I ran into a lint warning that wasn’t immediately clear to me: warning: casting u8 to u16 may become silently lossy if types change.",
      "url": "https://benjamincongdon.me/blog/2018/08/06/Clippys-cast_lossless-Lint-Warning/",
      "date_published": "2018-08-06T20:28:01+00:00",
      "author": {
        "name": "Benjamin Congdon",
        "url": "https://benjamincongdon.me/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e141f480-7f0d-4b15-82b6-44d0f807f09c",
      "title": "GSoC wrap-up - Splitting Servo's script crate",
      "content_text": "I am Peter Hrvola (retep007) Twitter Github. During my Google Summer of Code (GSoC) project, I have been working on investigating the monolithic nature of Servo’s script crate and prototyping separation to smaller crates. My goal was to improve the use of resources during compilation. Current debug build consumes over 5GB of memory and takes 347s.",
      "url": "https://blog.servo.org/2018/08/09/gsoc-generic-servo/",
      "tweet_url": "https://twitter.com/ServoDev/status/1028012316238012416",
      "date_published": "2018-08-09T00:00:00+00:00",
      "author": {
        "name": "Peter Hrvola",
        "url": "https://twitter.com/retep007"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "02a5f7b7-0114-440d-9be0-d5aaf77bfa65",
      "title": "PrettySize for rust",
      "content_text": "We’ve just published a rust port of our PrettySize.NET library, now available via cargo and github. Like its .NET predecessor, PrettySize-rs aims to provide a comprehensive API for dealing with file sizes, covering both manipulation and human-readable formatting.",
      "url": "https://neosmart.net/blog/2018/prettysize-for-rust/",
      "date_published": "2018-08-11T20:56:39+00:00",
      "author": {
        "name": "Mahmoud Al-Qudsi",
        "url": "https://neosmart.net/blog/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "704eb876-5cac-4636-8817-4946659876e1",
      "title": "The State of GPGPU in Rust",
      "content_text": "At work a few months ago, we started experimenting with GPU-acceleration. My boss asked if I was interested. I didn’t know anything about programming GPUs, so of course I said “Heck yes, I’m interested!“. I needed to learn about GPUs in a hurry, and that led to my GPU Path Tracer series. That was a lot of fun, but it showed me that CUDA support in Rust is pretty poor.",
      "url": "https://bheisler.github.io/post/state-of-gpgpu-in-rust/",
      "tweet_url": "https://twitter.com/redattack34/status/1027549369338195969",
      "date_published": "2018-08-08T20:00:00-06:00",
      "author": {
        "name": "Brook Heisler",
        "url": "https://bheisler.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "ea6c2f82-fb04-49be-be31-307284eedba4",
      "title": "Tower Web — A new web framework for Rust",
      "content_text": "I previously announced Tower and mentioned that a web framework was in the works. It took longer than I had hoped (as it sometimes does with software), but today, I am opening up Tower Web.\n\nTower Web is an asynchronous HTTP web framework that focuses on removing boilerplate. It is built on top of Tokio, Hyper, and of course Tower. It works today on stable Rust.",
      "url": "https://medium.com/@carllerche/tower-web-a-new-web-framework-for-rust-e2912856851b",
      "tweet_url": "https://twitter.com/carllerche/status/1027612041903779840",
      "date_published": "2018-08-09T17:46:17.217+00:00",
      "author": {
        "name": "Carl Lerche",
        "url": "https://medium.com/@carllerche"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "9a82c540-b8ab-4635-a68b-82754b5fe8a1",
      "title": "Literate Programming in Rust",
      "content_text": "In which we explore how cargo and rustdoc make it possible to write documentation and unit tests at once, resulting in code that is explained and tested from the POV of a public API.",
      "url": "https://damien.codes/posts/literate-rust/",
      "tweet_url": "https://twitter.com/damienstanton/status/1027659138355081216",
      "date_published": "2018-08-09T00:00:00+00:00",
      "author": {
        "name": "Damien",
        "url": "https://damien.codes/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "526c879c-7409-4234-a92c-e04b21f37d0d",
      "title": "Portability benchmark of Dota2 on MacOS",
      "content_text": "gfx-rs is a Rust project aiming to make graphics programming more accessible and portable, focusing on exposing a universal Vulkan-like API. It’s a single Rust API with multiple backends that implement it: Direct3D 12/11, Metal, Vulkan, and even OpenGL. We are also building a Vulkan Portability implementation based on it, which allows non-Rust applications using Vulkan to run everywhere. This post is focused on the Metal backend only.",
      "url": "https://gfx-rs.github.io/2018/08/10/dota2-macos-performance.html",
      "date_published": "2018-08-10T00:00:00+00:00",
      "author": {
        "name": "gfx-rs",
        "url": "https://gfx-rs.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "6f2abec2-1096-4a82-90db-b1962a2876f7",
      "title": "RSoC: FAT32 Filesystem in Redox - 3",
      "content_text": "The previous blog post discusses how raw disk reads were implemented in the loader stub. The next step was to implement a clean read API which can be used by different filesystem libraries in order to read their respective filesystems. Since the raw reads from the BIOS interrupt had a granularity in terms of sectors(each sector being 512 bytes), the reads had to be translated in order to provide byte level granularity. The clone_from_slice function ensures that a direct call to memcopy is not required. The refined read function is here.",
      "url": "https://www.redox-os.org/news/rsoc-fat32-3/",
      "date_published": "2018-08-09T00:00:00+00:00",
      "author": {
        "name": "Deepak Sirone",
        "url": "https://www.redox-os.org/news/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "1d84906a-4085-4d87-8f43-786f1d531f44",
      "title": "Kickstart - a fast and simple project template bootstrapper",
      "content_text": "Ever had some code base that you regularly use to start a new project? Until now, you've probably lost some time refactoring everything to fill out the right project name, title etc. A few tools already exist but either you're lost in feature bloating hell or you're fighting to configure everything in most cases. The following tool is an early-developement, rust-based, template tool made to be more versatile that its closest python counter-part, cookiecutter.",
      "url": "https://blog.artemix.org/article/show/kickstart",
      "date_published": "2018-08-08T23:02:19+00:00",
      "author": {
        "name": "Artemis",
        "url": "https://blog.artemix.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "dd4398c4-2ad7-4f13-a900-2d78fa78bd0c",
      "title": "Encrusted: An interpreter for Infocom-era interactive fiction games like Zork",
      "content_text": "A modern z-machine for the classics. Encrusted is an interpreter for Infocom-era interactive fiction games like Zork. Run the web interface here ↑, or get it for your terminal.",
      "url": "https://sterlingdemille.com/encrusted/",
      "date_published": "2018-07-19T04:41:01+00:00",
      "author": {
        "name": "Sterling DeMille",
        "url": "https://sterlingdemille.com/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "d6b87789-dd86-49e2-91b6-692607e32f67",
      "title": "How Rust made me rethink my view about compilers",
      "content_text": "It's funny how universe aligns things, just few days ago I stumbled upon Rust koans. Already familiar way of learning and exercising, patented by Ruby programmers, where you correct tests and make them work. Also whole method of learning was similar to reading 'Little Schemer' fairly popular book among fellow Lispers. So I'll use this blog post to summarize few early impressions about Rust, and let me tell you straight away, I am loving it so far!",
      "url": "https://defphil.com/post/2018/07/15/staying-rusty/",
      "date_published": "2018-07-15T00:00:00+00:00",
      "author": {
        "name": "Filip Miletic",
        "url": "https://defphil.com/"
      },
      "tags": [
        "Language",
        "Getting Started"
      ]
    },
    {
      "id": "f0133b81-60d3-416a-b58a-6d6c9c7afe6a",
      "title": "Launching the 2018 State of Rust Survey",
      "content_text": "It’s that time again! Time for us to take a look at how the Rust project is doing, and what we should plan for the future. The Rust Community Team is pleased to announce our 2018 State of Rust Survey! Whether or not you use Rust today, we want to know your opinions. Your responses will help the project understand its strengths and weaknesses and establish development priorities for the future.\n\nThis year, volunteers have also translated the survey into 14 languages!",
      "url": "https://blog.rust-lang.org/2018/08/08/survey.html",
      "tweet_url": "https://twitter.com/rustlang/status/1027304022498263040",
      "date_published": "2018-08-08T00:00:00+00:00",
      "author": {
        "name": "The Rust Community Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "b7c9c3df-7ecd-41f3-8c89-5c1d35298b7b",
      "title": "Journey into rust #1: Conway’s Game",
      "content_text": "The language rust has been popping up on my twitter feed and my personal life more and more. It’s been promoted and presented as the ultra safe language, so naturally I decided to check it out. The upcoming series of posts “Journey into rust” will describe and document my experiences using rust, hopefully explaining certain concepts that rust does differently. This will all be written from a C++ programmers standpoint that was thought writing Object Oriented code. I encourage you the reader to think critically and correct where necessary.\n\nOn to the actual first post! After reading “the Rust Programming Language” I wanted to get my hands dirty and actually write some code. I like graphical applications and using low level graphics API’s so I decided to implement a cellular automation in rust. But just implementing cellular automation isn’t very exciting, is it? What if we could do this on the GPU…And off I went on my journey to create Conway’s game of life in rust.",
      "url": "https://jonathansteyfkens.com/rust/opengl/graphics/2018/08/07/rust-conway-game-of-life.html",
      "tweet_url": "https://twitter.com/Jonathansty/status/1026944920295231488",
      "date_published": "2018-08-07T22:30:01+00:00",
      "author": {
        "name": "Jonathan Steyfkens",
        "url": "https://jonathansteyfkens.com/"
      },
      "tags": [
        "Games and Graphics",
        "Getting Started"
      ]
    },
    {
      "id": "8c27c640-fb7d-42f9-a31f-09e9f5b35c2d",
      "title": "Proposal: Rust Custom Test Frameworks",
      "content_text": "The Rust community recently approved a Custom Test Frameworks eRFC which lays out a series of goals and possible directions of exploration for implementing custom test frameworks. In this post, I present my own proposed fulfillment of the RFC with rationale.",
      "url": "https://blog.jrenner.net/rust/testing/2018/08/06/custom-test-framework-prop.html",
      "tweet_url": "https://twitter.com/thedjrenren/status/1026954256199299072",
      "date_published": "2018-08-08T08:12:00+00:00",
      "author": {
        "name": "John Renner",
        "url": "https://blog.jrenner.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "8cf7d62c-c8d9-4116-ae4c-7ac155d015cb",
      "title": "Ideas for Rust Meetups",
      "content_text": "Since I’m co-organizing the Rhein-Main Rust meetup (and am probably the main driving force behind it), I tought, it might be useful to share a few ideas we have that we have either already done, or plan doing – perhaps other meetup organizers can benefit from this. Note that our meetups usually run 2-4 hours, but some attendees may have to join late or leave early so the format has to take this into account.",
      "url": "https://llogiq.github.io/2018/08/08/meetup-ideas.html",
      "tweet_url": "https://twitter.com/llogiq/status/1027137686941954048",
      "date_published": "2018-08-08T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "31c9d3c0-192b-45f2-922e-5b8d188683bc",
      "title": "Xori - Custom disassembly framework",
      "content_text": "Xori is an automation-ready disassembly and static analysis library that consumes shellcode or PE binaries and provides triage analysis data.",
      "url": "https://sites.google.com/secured.org/malwareunicorn/xori",
      "date_published": "2018-08-09T08:23:00+00:00",
      "author": {
        "name": "Amanda Rousseau and Rich Seymour",
        "url": "https://sites.google.com/secured.org/malwareunicorn/xori"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "577e9c57-0455-41c6-9711-be71bf55e550",
      "title": "intl_pluralrules: A Rust Crate for Handling Plural Forms with CLDR Plural Rules",
      "content_text": "intl_pluralrules is a Rust crate, built to handle pluralization. Pluralization is the foundation for all localization and many internationalization APIs. With the addition of intl_pluralrules, any locale-aware date-, time- or unit-formatting (“1 second” vs “2 seconds”) and many other pluralization-dependent APIs can be added to Rust.",
      "url": "https://blog.mozilla.org/l10n/2018/08/03/intl_pluralrules-a-rust-crate-for-handling-plural-forms-with-cldr-plural-rules/",
      "date_published": "2018-08-03T23:30:19+00:00",
      "author": {
        "name": "Kekoa Riggin",
        "url": "https://blog.mozilla.org/l10n/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "2182c554-41eb-4ee7-a1de-11eb90a8223d",
      "title": "A small custom Bool Type in Diesel",
      "content_text": "I’ve been working with diesel and serde. I use diesel for my postgres datastore, and serde for serializing/deserializing data to the web. Recently I came across a situation where I needed to define my type in diesel as well as implement deserialize in serde. The example below is a fairly simple so it makes for a good example to share so others can learn (and so I can remember how all this works next time I need it).",
      "url": "https://noyez.gitlab.io/post/2018-08-05-a-small-custom-bool-type-in-diesel/",
      "date_published": "2018-08-05T00:00:00+00:00",
      "author": {
        "name": "Noyez",
        "url": "https://noyez.gitlab.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "c7f57579-ce36-4d54-86a4-9aa4a6c1cadd",
      "title": "So You Want to Build a Language VM - Part 00",
      "content_text": "A Brief Course in Computer Hardware. This is the prelude to a series of posts to detailing how to build a language VM. If you are familiar with terms like registers, program counter, and assembly, feel free to skip this post. If not, read on.",
      "url": "https://blog.subnetzero.io/post/building-language-vm-part-00/",
      "date_published": "2018-07-16T00:00:00+00:00",
      "author": {
        "name": "Fletcher Haynes",
        "url": "https://blog.subnetzero.io/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "4f9e9645-78dc-4c18-a504-653e96a0c960",
      "title": "That weekend I wasted on newtyped indices",
      "content_text": "Today, ajyne posted a thread on users.rust-lang.org asking: What have been the drawbacks of static typing for you? Kornel was quick to reply with a variety of points, but this one in particular stands out to me, \"With powerful type systems there’s no end to how far you can go to guarantee things about your program, but you might create a complex monster\". As I see it, there is no truer answer. The type system can be a seductive beast, often promising correctness and performance at the low-low, one-time cost of your soul. I personally can name a number of examples from my own code base where I tried to abstract over something too big and failed. I call these my wasted weekends.",
      "url": "https://exphp.github.io/2018/07/30/that-weekend-i-wasted-on-newtyped-indices.html",
      "date_published": "2018-07-30T00:00:00+00:00",
      "author": {
        "name": "Michael Lamparski",
        "url": "https://exphp.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "7161b1be-54de-4776-857e-3ef78df24125",
      "title": "Pax: A fast dev time JavaScript bundler",
      "content_text": "Don’t waste time waiting for your bundler to do its thing. Use Pax while you’re developing, and iterate to your heart’s content. Use your super-cool, magical, slow-as-molasses bundler for releases, when you don’t care how long it takes to run.",
      "url": "https://pax.js.org/",
      "date_published": "2018-07-25T12:59:16+00:00",
      "author": {
        "name": "Nathan",
        "url": "https://pax.js.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "1e54b1bb-953c-4149-b09c-9d1d3f7046cf",
      "title": "glitchcat — Creating CLI apps in Rust is super easy",
      "content_text": "glitchcat is a cat-like program with glitch animation.",
      "url": "https://blog.kuviman.com/2018/07/20/glitchcat.html",
      "date_published": "2018-07-20T00:00:00+00:00",
      "author": {
        "name": "kuviman",
        "url": "https://blog.kuviman.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "a3f0bd42-0a42-4156-9fd6-74aebe5f0465",
      "title": "nphysics: 2D and 3D real-time physics engine",
      "content_text": "I’m excited to announce the brand new website/user-guide for the nphysics2d and nphysics3d crates: pure-rust 2D and 3D real-time physics engines with rigid bodies and joints! Online wasm-based demos are also provided (see for example the Multibody joints 34 demo).",
      "url": "http://nphysics.org/",
      "date_published": "2018-07-29T03:46:07+10:00",
      "author": {
        "name": "Sébastien Crozet",
        "url": "http://nphysics.org/"
      },
      "tags": [
        "Games and Graphics",
        "Crates"
      ]
    },
    {
      "id": "ea8d1190-c763-4f38-8181-1fc86193bfe4",
      "title": "Exploring inband lifetimes by converting librustc_mir",
      "content_text": "Inband lifetimes is a limited change, and does not feel like it greatly enhances code. However, it also doesn’t hurt much and feels slightly better in many cases.\n\nHowever, there are numerous edge cases and slight pain points, many having to do with a lack of known standard ways to do things. As such, many of the edge cases are likely to fall away as we develop after stabilization and come up with standard methods to work with the new feature.\n\nThe primary work to migrate is essentially just deleting ~all lifetime headers (<'a, 'b, 'c>) across impls and functions. More intensive migration would involve replacing untied/single-use lifetimes with '_ in all cases. This is quite hard to do from a person perspective (though compiler can likely do so fairly easily).",
      "url": "https://mark-simulacrum.github.io/2018/07/19/inband-lifetimes.html",
      "date_published": "2018-07-19T00:00:00+00:00",
      "author": {
        "name": "Mark Rousskov",
        "url": "https://mark-simulacrum.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "b5f6a958-c0bd-4ea9-a1ae-d8e4f5549719",
      "title": "Stacked Borrows: An Aliasing Model For Rust",
      "content_text": "In this post, I am proposing “Stacked Borrows”: A set of rules defining which kinds of aliasing are allowed in Rust. This is intended to answer the question which pointer may be used when to perform which kinds of memory accesses.",
      "url": "https://www.ralfj.de/blog/2018/08/07/stacked-borrows.html",
      "date_published": "2018-08-07T00:00:00+00:00",
      "author": {
        "name": "Ralf Jung",
        "url": "https://www.ralfj.de/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "59c63ab5-9b88-498e-a6ce-989f77bcdffe",
      "title": "Enforcing style in CI for Rust Projects",
      "content_text": "This article will attempt to help you avoid the debate entirely, at least in your Rust projects, by explaining how you can use the rustfmt tool to enforce style guidelines using CI. We’ll start with a brief introduction to rustfmt, so feel free to skip the next section if you are already familiar.",
      "url": "https://medium.com/@ag_dubs/enforcing-style-in-ci-for-rust-projects-18f6b09ec69d",
      "date_published": "2018-07-10T22:03:24.240+00:00",
      "author": {
        "name": "Ashley Williams",
        "url": "https://medium.com/@ag_dubs"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "85ab7e93-7bbc-43ef-be5f-5decca1b4651",
      "title": "Introducing PrrrStack, Pt. 2",
      "content_text": "In the first article of this series, we created a RestAPI for our application using Postgres, Rust, and Rocket. For the second half, we’ll be using React to create the front end.",
      "url": "https://medium.com/@ccrsh/introducing-prrrstack-pt-2-24704b5763b2",
      "date_published": "2018-07-09T12:35:32.505+00:00",
      "author": {
        "name": "Crash Springfield",
        "url": "https://medium.com/@ccrsh"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "415e9361-8fad-4317-ae02-7abeb1faad3d",
      "title": "The State of Rust on Haiku",
      "content_text": "With the recent addition of Rust 1.27.0 in the HaikuPorts repository, I thought it would be good to do a short, public write-up of the current state of Rust on Haiku, and some insight into the future.",
      "url": "https://www.haiku-os.org/blog/nielx/2018-07-05_the_state_of_rust_on_haiku/",
      "date_published": "2018-07-05T07:31:51+02:00",
      "author": {
        "name": "nielx",
        "url": "https://www.haiku-os.org/blog/"
      },
      "tags": [
        "Operating Systems",
        "Language"
      ]
    },
    {
      "id": "d32e6dac-51d6-4ede-9a7f-10f0bea2ca8a",
      "title": "Bioyino — a distributed, scalable metric aggregator",
      "content_text": "So, you collect metrics. So do we. Yep, we also collect them. We can assure you that they are not useless at all, business guys do need…",
      "url": "https://medium.com/avitotech/bioyino-a-distributed-scalable-statsd-3445acb177eb",
      "date_published": "2018-07-05T10:07:52.180+00:00",
      "author": {
        "name": "Sergey N",
        "url": "https://medium.com/@albibek"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "b5717efe-ad7b-4b02-8554-aba801aff909",
      "title": "Amethyst 0.8 has been released!",
      "content_text": "With a brand new tutorial and a ton of new features, including prefabs, controller support, MP3 audio, localisation and an even better ergonomics!",
      "url": "https://www.amethyst.rs/blog/release-0-8/",
      "date_published": "2018-08-05T00:00:00+00:00",
      "author": {
        "name": "Moxinilian (Théo Degioanni)",
        "url": "https://www.amethyst.rs/blog"
      },
      "tags": [
        "Games and Graphics",
        "Crates"
      ]
    },
    {
      "id": "382f988d-9fe3-4525-9b21-0c6cb4373303",
      "title": "RSoC: Porting Redox to ARM (AArch64) — 0x02",
      "content_text": "At the time of writing the previous blog the plan was to target the Raspberry Pi 3 (Cortex A53) as a development platform because of its availability, popularity and community. Sadly, it seems that Broadcom went through a lot of shortcuts while implementing this specific design, which means features like GIC are half-there or completely missing, like in this case.\n\nAfter a discussion with @microcolonel, he proposed and kindly sent me a HiKey960 reference SoC from the awesome Linaro 96Boards initiative. The quality of this board is definitely a lot better than the Raspberry Pi and the documentation is detailed and open. Great stuff.",
      "url": "https://medium.com/@wizofe/rsoc-porting-redox-to-arm-aarch64-0x02-c566ee22f377",
      "tweet_url": "https://twitter.com/wizofe/status/1026236333520576513",
      "date_published": "2018-08-05T22:39:42.784+00:00",
      "author": {
        "name": "ioannis valasakis",
        "url": "https://medium.com/@wizofe"
      },
      "tags": [
        "Operating Systems",
        "Embedded"
      ]
    },
    {
      "id": "7d6c2d9c-16c8-42be-93d5-d61cc9dac117",
      "title": "Rust Modules In Less Than 5 Minutes",
      "content_text": "When I started learning Rust, the module system did not at first seem to be a shining beacon of intuitive design. The Rust documentation is phenomenal, but there are definitely some areas that I found difficult to follow; this being one such topic. So I thought I might take a stab at writing up a guide that I think would have helped me through the awkward growing pains a bit quicker.",
      "url": "https://medium.com/@erik.tate/rust-modules-in-less-than-5-minutes-9bff7f617798",
      "date_published": "2018-08-05T23:49:43.586+00:00",
      "author": {
        "name": "Erik Tate",
        "url": "https://medium.com/@erik.tate"
      },
      "tags": [
        "Getting Started",
        "Language"
      ]
    },
    {
      "id": "078a2508-9729-477b-915e-3a72fb6f66e9",
      "title": "Learning Rust 02: an ls clone",
      "content_text": "In this post, I’m building an ls clone. It’s pretty similar to the last post’s pwd clone. It’s called rls.",
      "url": "https://routley.io/tech/2018/07/08/learning-rust-02.html",
      "tweet_url": "https://twitter.com/james_routley/status/1016159132007661569",
      "date_published": "2018-07-08T00:00:00+01:00",
      "author": {
        "name": " James Routley",
        "url": "https://routley.io/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "ecb8cd2e-5804-4876-a5c6-c30cbf1c93fa",
      "title": "Cross compiling Rust for ARM (e.g. Raspberry Pi) using any OS!",
      "content_text": "Here is a small walkthrough, on how to use Mac OSx, Linux or even Windows (hey not tested but I am sure you can make it work, the tools are the same) to compile your Rust marvellousness and run the binary directly on the Raspberry Pi (2/3/3+).",
      "url": "https://medium.com/@wizofe/cross-compiling-rust-for-arm-e-g-raspberry-pi-using-any-os-11711ebfc52b",
      "date_published": "2018-07-07T21:54:26.332+00:00",
      "author": {
        "name": "ioannis valasakis",
        "url": "https://medium.com/@wizofe"
      },
      "tags": [
        "DevOps and Deployment",
        "Embedded"
      ]
    },
    {
      "id": "e20d8f7a-53c3-45c8-b16e-ac25a20ff548",
      "title": "Working on the Embedded Rust Book",
      "content_text": "TL;DR: Up to now, I haven't had as much time or motivation as I would have like to contribute to the Embedded Rust Book. However, I am excited to see the initial version of the book launch with the 2018 edition of Rust (which will ship with stable support for embedded)!, so I will be committing to write one chapter per two weeks, until the end of the year.\n\nRead below for my plan, and how you can help!",
      "url": "https://jamesmunns.com/blog/working-on-the-book/",
      "date_published": "2018-08-04T00:00:00+00:00",
      "author": {
        "name": "James Munns",
        "url": "https://jamesmunns.com/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "58e93b1c-f7b4-440f-88fb-fa5ab900f1c6",
      "title": "Rust and the Case of the Redundant Comparison",
      "content_text": "A couple of days ago I landed my second pull request in the Rust Programming Language repository. This is the story of how that went. This post is inspired by other posts about improving the Rust compiler.",
      "url": "https://blog.dend.ro/rust-and-the-case-of-the-redundant-comparison/",
      "date_published": "2018-08-04T00:00:00+00:00",
      "author": {
        "name": "dend",
        "url": "https://blog.dend.ro/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "18d063ca-b781-400f-9e5f-1534b5b90630",
      "title": "CLion IDE Rust plugin update: language support improvements, new quick-fixes, improved debugger and more",
      "content_text": "CLion 2018.2 was released just recently. Along with the release, the Rust plugin has had an update! In this blog post, we’d like to highlight some of the main improvements in the plugin.",
      "url": "https://blog.jetbrains.com/clion/2018/08/intellij-rust-update-2018_2/",
      "tweet_url": "https://twitter.com/clion_ide/status/1024974337005236225",
      "date_published": "2018-08-02T11:01:28+00:00",
      "author": {
        "name": "Anastasia Kazakova",
        "url": "https://blog.jetbrains.com/clion/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "02647906-fc14-42ea-87ec-19fc717cb3d7",
      "title": "Some Slight Improvements",
      "content_text": "Today I want to talk about two Rust PRs I recently wrote. The PRs in question are #52942 and #52997. Both are relatively small changes to Rust’s internally used data structures that improve performance and readability. Both have some basic benchmarks (the first one already had them and I wrote them for the second one), although it’s rather hard to gauge whether they really impacted compile times (as perf.rust-lang.org puts all changes of the specific day together). But that’s not the point I want to make right now.",
      "url": "https://llogiq.github.io/2018/08/04/improve.html",
      "tweet_url": "https://twitter.com/llogiq/status/1025526748769906689",
      "date_published": "2018-08-04T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c1718910-2677-4da4-a45f-a8bd055fe075",
      "title": "Gutenberg 0.4.0: custom taxonomies, image processing and more",
      "content_text": "Gutenberg 0.4.0 is out with custom taxonomies, image processing, improved shortcodes and more.",
      "url": "https://www.vincentprouillet.com/blog/releasing-gutenberg-0-4-0/",
      "tweet_url": "https://twitter.com/20100Prouillet/status/1025733254517870600",
      "date_published": "2018-08-04T00:00:00+00:00",
      "author": {
        "name": "Vincent Prouillet",
        "url": "https://www.vincentprouillet.com/blog/"
      },
      "tags": [
        "Tools and Applications",
        "Crates"
      ]
    },
    {
      "id": "924567bd-54c7-429d-84a6-db7b8b9221f1",
      "title": "How to run Rust in OpenFaaS",
      "content_text": "OpenFaaS is an open source implementation of Function as a Service (Serverless Functions, microservices) that you can self host. Rather than list all the various offerings in this space, I'll refer you to the Cloud Native Computing Foundation, in particular the interactive Landscape.\n\nYou can either deploy existing functions or create new ones. If you create new ones, there's a big list of officially supported languages. Alternative you could turn a CLI into function.\n\nOnce I'd given Python and Ruby a go as an introduction, I wanted to see how easy it would be to create a Rust template.",
      "url": "https://booyaa.wtf/2018/run-rust-in-openfaas/",
      "tweet_url": "https://twitter.com/booyaa/status/1025762181701410822",
      "date_published": "2018-08-04T00:00:00+00:00",
      "author": {
        "name": "Mark Sta Ana",
        "url": "https://booyaa.wtf/"
      },
      "tags": [
        "DevOps and Deployment"
      ]
    },
    {
      "id": "2cc12b2e-22fb-461a-be01-ffeab54caa9f",
      "title": "Solving the Generalized Streaming Iterator Problem without GATs",
      "content_text": "Generic Associated Types (GATs for short) are a long awaited extension to Rust’s type system. They offer a way to work with higher kinded types – a necessity in a couple of situations. A common example is the streaming iterator: an iterator able to return items borrowing from self (the iterator itself). Unfortunately, GATs haven’t even landed in nightly yet. So while are waiting, we can try tackling the streaming iterator problem without GATs. In this post we explore three possible workarounds for situations where an associated type depends on the lifetime of a &self receiver.",
      "url": "http://lukaskalbertodt.github.io/2018/08/03/solving-the-generalized-streaming-iterator-problem-without-gats.html",
      "tweet_url": "https://twitter.com/LukasKalbertodt/status/1025741992003883008",
      "date_published": "2018-08-03T00:00:00+00:00",
      "author": {
        "name": "Lukas Kalbertodt",
        "url": "http://lukaskalbertodt.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "1bc929f4-2800-466c-bd70-fb73f7b70ef8",
      "title": "Easily Analyzing Your S3 Buckets",
      "content_text": "mazon S3 is a storage solution used by pretty much everyone these days. Due to this there are naturally a bunch of tools for doing almost everything you can think of with S3. This post is about a tool I wrote to retrieve metadata about S3 buckets. If you don't care for the post, feel free to skip straight to the repo.",
      "url": "http://whitfin.io/analyzing-your-buckets-with-s3-meta/",
      "tweet_url": "https://twitter.com/_whitfin/status/1025802595967762432",
      "date_published": "2018-08-04T17:44:06+00:00",
      "author": {
        "name": "Isaac Whitfield",
        "url": "https://whitfin.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "92d89e3b-be0d-4f75-b335-79e26b2373e5",
      "title": "Let's code with the Roguelike tutorial - Part 7 - Enhancing the UI",
      "content_text": "Up to now, all the rendering code has been in the game loop in the main function. The rendering code is simple and straightforward, so, while it should have been extracted into its own function, there wasn't a pressing need to do so. Now that I'm going to enhance the UI, the rendering needs to be extracted.",
      "url": "https://www.yosenspace.com/posts/lets-code-roguelike-tutorial-part7-enhancing-ui.html",
      "tweet_url": "https://twitter.com/yosenspace/status/1019353642703339520",
      "date_published": "2018-07-18T08:50:00+00:00",
      "author": {
        "name": "Yosen",
        "url": "https://www.yosenspace.com/index.html"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "0a171d26-74e1-491c-befd-e02ac528c1ff",
      "title": "#[derive(Debug)] on serde steroids",
      "content_text": "In this post I'd like to introduce a serdebug helper which is a drop-in replacement for #[derive(Debug)] with some of the advanced features that serde can provide.",
      "url": "https://rreverser.com/derive-serdebug/",
      "tweet_url": "https://twitter.com/RReverser/status/1024326157049778176",
      "date_published": "2018-07-31T16:00:45+00:00",
      "author": {
        "name": "Ingvar Stepanyan",
        "url": "https://rreverser.com/#open"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "81096070-a563-47a0-8f09-2e5fb3c1b984",
      "title": "Sequoia, a new OpenPGP implementation",
      "content_text": "This past fall, three former GnuPG developers began working on a new OpenPGP implementation in Rust called Sequoia. As it’s starting to shape up and become useful, I feel now is a good time to announce the project to the larger Rust community, and hopefully get some feedback before our first release.",
      "url": "https://www.reddit.com/r/rust/comments/93mng5/ann_sequoia_a_new_openpgp_implementation/",
      "date_published": "2018-08-01T16:50:12+10:00",
      "author": {
        "name": "/u/nwalfield",
        "url": "https://sequoia-pgp.org/"
      },
      "tags": [
        "Tools and Applications",
        "Crates"
      ]
    },
    {
      "id": "f7eba5d3-ef85-47cb-88ec-345cf3c46ade",
      "title": "Rust concurrency patterns: Natural Born Pipelines",
      "content_text": "There seems to be demand for a “Rust concurrent pipeline” guide à la https://blog.golang.org/pipelines, so let’s give it a try.",
      "url": "https://medium.com/@polyglot_factotum/rust-concurrency-patterns-natural-born-pipelines-4d599e7612fc",
      "date_published": "2018-07-28T09:12:33.449+00:00",
      "author": {
        "name": "Gregory Terzian",
        "url": "https://medium.com/@polyglot_factotum"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "31fd7758-63f6-4e38-8331-bd27fd6324ba",
      "title": "Recommending books (with Rust)",
      "content_text": "In this post, we’re going to build a sequence-based recommender system in Rust: a system that accepts a person’s reading history as input, and outputs recommendations on what to read next.",
      "url": "https://maciejkula.github.io/2018/07/27/recommending-books-with-rust/",
      "date_published": "2018-07-27T09:17:00-07:00",
      "author": {
        "name": "Maciej Kula",
        "url": "https://maciejkula.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "f0e4ab48-bf11-47bf-9267-4da78f78bdcc",
      "title": "Programming Servo: How to match",
      "content_text": "Today, let’s share some lessons learned from contributing to Servo, which is a great way to learn Rust.",
      "url": "https://medium.com/programming-servo/programming-servo-how-to-match-b76c43f76fe6",
      "date_published": "2018-07-27T04:37:21.175+00:00",
      "author": {
        "name": "Gregory Terzian",
        "url": "https://medium.com/@polyglot_factotum"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "a243dc7d-5708-4a3d-bae8-20ccc3de53d0",
      "title": "My experience with the Rust 2018 preview",
      "content_text": "Recently, I wrote a little a side project to sign git commits without gpg. When I did this, I decided to use the Rust 2018 edition. I also transitioned an existing library from Rust 2015 to Rust 2018 to see how that tooling worked. I thought I’d write a blog post about my experience using the Rust 2018 preview and the state of things right now.",
      "url": "https://boats.gitlab.io/blog/post/my-experience-with-rust-2018/",
      "tweet_url": "https://twitter.com/withoutboats/status/1021769648466026497",
      "date_published": "2018-07-24T00:00:00+00:00",
      "author": {
        "name": "withoutboats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "44372b96-a1e4-44ee-af79-4496c4f629e6",
      "title": "Announcing Rust 1.28",
      "content_text": "The Rust team is happy to announce a new version of Rust. This release includes the global_allocator attribute to customise the allocator, improved error messages for format strings, and a number of number related stabilisations.",
      "url": "https://blog.rust-lang.org/2018/08/02/Rust-1.28.html",
      "tweet_url": "https://twitter.com/rustlang/status/1025048103790039041",
      "date_published": "2018-08-02T00:00:00+00:00",
      "author": {
        "name": "The Rust Core Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "6744150e-efec-40e9-a978-ed41e314d64a",
      "title": "Let's code with the Roguelike tutorial - Part 6 - Combat engine",
      "content_text": " I now have a map, and a bunch of monsters on the map, able to attack and be attacked by the player. To provide for different kinds of monsters, I needed to add stats like combat strength and HP.",
      "url": "https://www.yosenspace.com/posts/lets-code-roguelike-tutorial-part6-combat-engine.html",
      "tweet_url": "https://twitter.com/yosenspace/status/1019332915778412544",
      "date_published": "2018-07-18T07:28:00+00:00",
      "author": {
        "name": "Yosen",
        "url": "https://www.yosenspace.com/index.html"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "8a924e9f-d803-4e85-b2e8-92b5909c7695",
      "title": "Accelerating Edwards Curve Arithmetic with Parallel Formulas",
      "content_text": "The fastest formulas for elliptic curve operations were published by Hisil, Wong, Carter, and Dawson in their 2008 paper Twisted Edwards Curves Revisited. Their paper also describes a parallel version of their formulas, designed to execute four streams of instructions on four independent processors. Until now, these parallel formulas don’t seem to have been implemented in software. But a closer look reveals that slightly modifying the formulas allows the expensive instructions to be executed in uniform, making a vectorized SIMD implementation possible.\n\nI implemented this strategy in Rust, targeting 256-bit wide AVX2 operations. The resulting implementation performs double-base scalar multiplication faster than other Ed25519 implementations I tested, and is even faster than FourQ without endomorphisms",
      "url": "https://medium.com/@hdevalence/accelerating-edwards-curve-arithmetic-with-parallel-formulas-ac12cf5015be",
      "tweet_url": "https://twitter.com/hdevalence/status/1024714581350862849",
      "date_published": "2018-08-01T17:41:42.002+00:00",
      "author": {
        "name": "Henry de Valence",
        "url": "https://medium.com/@hdevalence"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "bf6d4501-afb3-40dc-aa8a-bef247e2e77b",
      "title": "Why I Ripped The Same CD 300 Times",
      "content_text": "The piano arrangement album 帰るべき城 by Altneuland was published in 2005. I discovered it in 2008 (probably on YouTube), downloaded the best copy I could find, and filed it away in the TODO list. Recent advances in international parcel forwarding technology let me buy a used copy last year, but when it arrived none of my CD drives could read track #3. This sort of thing is common when buying used CDs, especially if they need to transit a USPS international shipping center. I shelved it and kept on the lookout for another copy, which I located last month. It arrived on Friday, I immediately tried to rip it, and hit the exact same error. This didn’t seem to be an issue of wear or damage…",
      "url": "https://john-millikin.com/%F0%9F%A4%94/why-i-ripped-the-same-cd-300-times",
      "date_published": "2018-08-02T00:00:00+00:00",
      "author": {
        "name": "John Millikin",
        "url": "https://john-millikin.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "4c6bb401-ff09-4bce-a6d2-d598777a0ce2",
      "title": "fastcat - A Faster 'cat' Implementation Using Splice",
      "content_text": "Lots of people asked me to write another piece about the internals of well-known Unix commands. Well, actually, nobody asked me, but it makes for a good intro. I'm sure you’ve read the previous parts about yes and ls — they are awesome.\n\nAnyway, today we talk about cat, which is used to concatenate files - or, more commonly, abused to print a file's contents to the screen.",
      "url": "https://matthias-endler.de/2018/fastcat/",
      "tweet_url": "https://twitter.com/matthiasendler/status/1024392487723524101",
      "date_published": "2018-07-01T00:00:00+00:00",
      "author": {
        "name": "Matthias Endler",
        "url": "https://matthias-endler.de/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "5473f9e8-40a8-43fe-956e-e84678267c90",
      "title": "BetaFPV F3 Drone Flight Controller - Board Support Crate",
      "content_text": "In a previous blog post I described how to get a very simple Rust program compiling for and running on the BetaFPV F3 drone flight controller. Since that time I’ve been working to create a board support crate to provide a high level API for the board.",
      "url": "https://www.joshmcguigan.com/blog/betafpv-drone-flight-controller-board-support-crate/",
      "date_published": "2018-07-31T00:00:00+00:00",
      "author": {
        "name": "Josh Mcguigan",
        "url": "https://www.joshmcguigan.com/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "14507477-073a-4055-a2de-b0e4c4fd2ad5",
      "title": "Announcing Vagga 0.8.1 – PaulColomiets",
      "content_text": "We are excited to announce the next version of vagga, the containerization tool that makes setting up development environments easy and fun. This release brings local overrides for vagga commands, support of ubuntu bionic, better CI support, space reuse between multiple projects, and more.",
      "url": "https://medium.com/@paulcolomiets/announcing-vagga-0-8-1-5e1fd44ee6fa",
      "tweet_url": "https://twitter.com/PaulColomiets/status/1024380452986134528",
      "date_published": "2018-07-31T19:39:25.963+00:00",
      "author": {
        "name": "PaulColomiets",
        "url": "https://medium.com/@paulcolomiets"
      },
      "tags": [
        "Tools and Applications",
        "DevOps and Deployment"
      ]
    },
    {
      "id": "55adde79-edfa-433f-8c4f-40f2baee7cd9",
      "title": "warp",
      "content_text": "Over the past several months, I’ve been working a web framework in Rust. I wanted to make use of the new hyper 0.12 changes, so the framework is just as fast, is asynchronous, and benefits from all the improvements found powering Linkerd. More importantly, I wanted there to be a reason for making a new framework; it couldn’t just be yet another framework with the only difference being I’ve written it. Instead, the way this framework is used is quite different than many that exist. In doing so, it expresses a strong opinion, which might not match your previous experiences, but I believe it manages to do something really special.\n\nI’m super excited to reveal warp, a joint project with @carllerche.",
      "url": "http://seanmonstar.com/post/176530511587/warp",
      "tweet_url": "https://twitter.com/seanmonstar/status/1024772899197136896",
      "date_published": "2018-08-01T00:00:00+00:00",
      "author": {
        "name": "Sean McArthur",
        "url": "http://seanmonstar.com/"
      },
      "tags": [
        "Web and Network Services",
        "Crates"
      ]
    },
    {
      "id": "1220a3b8-605c-4d1d-8c38-163bd5a8f02e",
      "title": "Rust and OpenGL from scratch, a blog post series about building an OpenGL renderer with Rust",
      "content_text": "I titled this post “from scratch”, because I am going to assume little knowledge of Rust and basic knowledge of 3D graphics and OpenGL.\n\nTherefore, this tutorial may teach you basic Rust and how to get Rust working with OpenGL, however for in-depth OpenGL learning you will need another tutorial or book.\n\n“From Scratch” also means that we will try to build abstractions ourselves, so that we get better knowledge of Rust. In addition to that, we will able to follow existing OpenGL tutorials, because we will know exactly what OpenGL functions we are calling.",
      "url": "https://www.reddit.com/r/rust/comments/92abkg/rust_and_opengl_from_scratch_a_blog_post_series/",
      "date_published": "2018-07-27T17:01:38+10:00",
      "author": {
        "name": "Nerijus Arlauskas",
        "url": "http://nercury.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "51e59a36-6a0e-4599-b52f-5874cc1e9ec5",
      "title": "Procedural level generation with Rust",
      "content_text": "Procedural generation is a technique which allows content to be created programmatically, rather than everything in a game being specifically placed by a designer. Procedural generation doesn't mean completely randomised, rather randomised elements are used as long as they make sense.\n\nThis tutorial will show how to create a tilemap-based level with rooms connected by straight corridors, using Rust. We'll also cover how to use seeds to reproduce specific layouts and serialise the output into JSON. The rooms will be placed at random within the level, and corridors are drawn horizontally and vertically to connect the centres of the rooms.",
      "url": "https://www.jamestease.co.uk/blether/procedural-level-generation-rust",
      "date_published": "2018-07-04T00:00:00+00:00",
      "author": {
        "name": "James Tease",
        "url": "https://www.jamestease.co.uk/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "0c4246e6-b2cb-42fa-930f-b32ed84c8880",
      "title": "Conduit 0.5.0 and the future of Conduit",
      "content_text": "Today we’re very happy to announce Conduit 0.5.0, which introduces zero-config automatic TLS between mesh’d pods (including certificate creation and distribution). This means that most Kubernetes users can now encrypt internal HTTP communication between their service in just two simple commands.\n\nWe’re also happy to announce that 0.5.0 will be the last major release of Conduit. Conduit is graduating into the Linkerd project to become the basis of Linkerd 2.0. Read on for what this means!",
      "url": "https://blog.conduit.io/2018/07/06/conduit-0-5-and-the-future/",
      "tweet_url": "https://twitter.com/olix0r/status/1015278517427191808",
      "date_published": "2018-07-06T16:41:57+00:00",
      "author": {
        "name": "Oliver Gould",
        "url": "https://blog.conduit.io/"
      },
      "tags": [
        "DevOps and Deployment"
      ]
    },
    {
      "id": "9ba882d4-cadd-4708-906b-2ec25fe72941",
      "title": "Let's code with the Roguelike tutorial - Part 5 - Setting up enemies",
      "content_text": "I now have the game up to the point where the player has a random dungeon to explore. It's time to make it more interesting by adding some threats - namely, some monsters.",
      "url": "https://www.yosenspace.com/posts/lets-code-roguelike-tutorial-part5-setting-up-enemies.html",
      "tweet_url": "https://twitter.com/yosenspace/status/1016816078914064384",
      "date_published": "2018-07-11T04:57:00+00:00",
      "author": {
        "name": "Yosen",
        "url": "https://www.yosenspace.com/index.html"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "86add592-8587-406b-8233-a06e675452f0",
      "title": "Using a Mac to cross-compile Linux binaries",
      "content_text": "The cycle of development we’re most familiar with is: write code, compile your code, then run this code on the same machine you were writing it on. On most desktop OSes, you pick up a compiler by downloading one from your package manager. Xcode and Visual Studio are toolchains (actually IDEs) that leverage being platform-specific, each including tools tailored around the platform your code will run on and heavily showcasing the parent OS’s design language.",
      "url": "http://timryan.org/2018/07/27/cross-compiling-linux-binaries-from-macos.html",
      "tweet_url": "https://twitter.com/trimryan/status/1022890474636488706",
      "date_published": "2018-07-27T13:22:00+00:00",
      "author": {
        "name": "Tim Ryan",
        "url": "http://timryan.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "6204efce-b9b3-4225-ae6b-5fc74f441d5f",
      "title": "Is WebAssembly the return of Java Applets & Flash?",
      "content_text": "For this post, I’m going to make three comparisons: to Flash, to Java Applets, and occasionally to PNaCL. Secondly, this post is going to focus on the web use-case for WebAssembly, even though the previous post was about non-web uses. We’ll make that comparison in the next post. Finally, this post is kind of like eating tapas, there’s a bunch of little sections.",
      "url": "https://words.steveklabnik.com/is-webassembly-the-return-of-java-applets-flash",
      "tweet_url": "https://twitter.com/steveklabnik/status/1022120059509112833",
      "date_published": "2018-07-26T00:03:00+00:00",
      "author": {
        "name": "Steve Klabnik",
        "url": "https://words.steveklabnik.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "41e44eb5-79db-4f16-83c2-a126c4d43286",
      "title": "Bringing Rust to Ledger hardware wallets",
      "content_text": "Beginning of this year I wanted to experiment with some embedded development. I ended up looking into Ledger cryptocurrency hardware wallet application development. I wouldn’t actually consider this true embedded development as a lot of the heavy lifting has been done and abstracted away by Ledger, but it’s still writing software for a very constrained environment. Ledger applications only get 4KB of RAM to utilise and most of the embedded development practices still apply (no heap allocations for instance).",
      "url": "https://medium.com/@roosmaa/bringing-rust-to-ledger-hardware-wallet-ccf1356a7de1",
      "tweet_url": "https://twitter.com/roosmaa/status/1022457886885244929",
      "date_published": "2018-07-26T12:01:48.407+00:00",
      "author": {
        "name": "Mart Roosmaa",
        "url": "https://medium.com/@roosmaa"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "1e1fcc0e-6af2-4223-8689-4cab5a34222f",
      "title": "Let's code with the Roguelike tutorial - Part 4 - Field of view and exploration",
      "content_text": "In the current implementation, the player can see the entire layout of the dungeon from the beginning. The next step is to change the game to start off with the dungeon hidden, so the player will actually have some rooms to explore.",
      "url": "https://www.yosenspace.com/posts/lets-code-roguelike-tutorial-part4-field-view-exploration.html",
      "tweet_url": "https://twitter.com/yosenspace/status/1016758392528855040",
      "date_published": "2018-07-11T04:57:00+00:00",
      "author": {
        "name": "Yosen",
        "url": "https://www.yosenspace.com/index.html"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "2dba28aa-a443-4887-9806-aba84cf787ef",
      "title": "A Snapshot of Rust's Popularity in July 2018",
      "content_text": "Talking about a language’s popularity is traditionally a tricky topic. How do you measure popularity? How do you compare one language to another when they’re focused on different styles and different audiences? So, rather than having one or two charts, I’m going to look at a number of “slices” into Rust’s growth to see it front different angles.",
      "url": "http://www.jonathanturner.org/2018/07/snapshot-of-rust-popularity.html",
      "tweet_url": "https://twitter.com/jntrnr/status/1022950415254605824",
      "date_published": "2018-07-28T00:00:00+00:00",
      "author": {
        "name": "Jonathan Turner",
        "url": "http://www.jonathanturner.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "8f26eb1d-8d0c-4785-a7fb-85c8cf5c6f27",
      "title": "Streaming UTF-8 in Haskell and Rust",
      "content_text": "An investigation into getting Haskell-like error handling ergonomics into a Rust application dealing with streaming UTF-8 encoding and decoding.",
      "url": "https://www.fpcomplete.com/blog/2018/07/streaming-utf8-haskell-rust",
      "tweet_url": "https://twitter.com/FPComplete/status/1023859619909828608",
      "date_published": "2018-07-30T09:00:00+00:00",
      "author": {
        "name": "Michael Snoyman",
        "url": "https://www.fpcomplete.com/blog"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "b3d696eb-a5d0-4118-a7b0-328623d35555",
      "title": "A static web app in Rust",
      "content_text": "A three day tour of Yew and WASM with Rust",
      "url": "https://bluejekyll.github.io/blog/rust/2018/07/22/static-web-app-rust.html",
      "tweet_url": "https://twitter.com/benj_fry/status/1021207356762443776",
      "date_published": "2018-07-22T07:00:00+00:00",
      "author": {
        "name": "Benjamin Fry",
        "url": "https://bluejekyll.github.io/blog/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "7f8cf89b-0cca-43c6-a660-3780bd2cdf72",
      "title": "Writing a front-end WebAssembly framework in Rust: lessons learned",
      "content_text": "Over the past few months, I’ve been writing Smithy, a very work-in-progress front-end WebAssembly framework written in Rust.\n\nMy goal for Smithy is to enable you to use idiomatic Rust to write front-end code. This has costs: for example worrying about lifetimes and using Rc<RefCell<State>> to share state. But this also has the potential to give you the safety guarantees that the Rust compiler provides when writing browser code!",
      "url": "https://medium.com/@robert.balicki_2494/writing-a-front-end-webassembly-framework-in-rust-lessons-learned-7cc48ed27d96",
      "tweet_url": "https://twitter.com/StatisticsFTW/status/1023913544302166018",
      "date_published": "2018-07-30T12:46:05.428+00:00",
      "author": {
        "name": "Robert Balicki",
        "url": "https://medium.com/@robert.balicki_2494"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "3b874195-0df6-40ca-8667-067d3440061b",
      "title": "Rust: controlling side effects from the test",
      "content_text": "Imagine you want to write a timestamping repository of some sorts, that will associate the timestamp of when the storage operation was invoked with the stored value. How to write it in Rust ? And more importantly - how to test it ? I would like to share a solution I found and talk a bit about how it works.",
      "url": "https://blog.cyplo.net/posts/2018/07/rust-injection.html",
      "tweet_url": "https://twitter.com/cyplo/status/1023924805266026496",
      "date_published": "2018-07-30T00:00:00+00:00",
      "author": {
        "name": "Cyryl Płotnicki",
        "url": "https://blog.cyplo.net/index.html"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c5d017d6-de45-4099-9272-19fe01441fdc",
      "title": "Electrosmog trapping with CC1101",
      "content_text": "A couple of months ago I moved to a house, and the need to monitor-all-the-things guided me towards the affordable IKEA Sparsnäs energy display. Sparsnäs is made up of two parts, one being the transmitter that is attached to your electricity meter, and the other; the display that stores usage, and presents a variety of graphs. The downside is that there is no way of getting the data out of the display so you have to accept how it’s presented, and that it may get lost, or build something on your own. Thankfully the protocol has been thoroughly reverse engineered and documented in a very elaborate manner.",
      "url": "https://dsvensson.github.io/posts/2018-07-13-Electrosmog-trapping-with-CC1101.html",
      "date_published": "2018-07-13T20:06:53+00:00",
      "author": {
        "name": "Daniel Svensson",
        "url": "https://dsvensson.github.io/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "96eb15b8-5f51-403c-a699-805553293c16",
      "title": "Building Readable Tests with Fluent Testing APIs",
      "content_text": "One of the biggest challenges in software testing is defining the input for code under test in a way that is expressive and powerful enough to test complex situations but doesn’t distract from the intent of the test or clutter the test code to a degree that makes it difficult to read.\n\nMany dynamic languages have testing APIs which take advantage of their looser and later type checking to provide easy mocking and stubbing, but strict, statically typed languages can make it difficult to build up suitable instances of the types needed in the test.",
      "url": "https://leotindall.com/tutorial/building-readable-tests-with-fluent-testing-apis/",
      "date_published": "2018-07-23T09:56:24-05:00",
      "author": {
        "name": "Leo Tindall",
        "url": "https://leotindall.com/post/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "9ceafb2d-9937-48c9-9deb-ff9d1ebd19d3",
      "title": "cargo-generate: create a new Rust project from a template ",
      "content_text": "cargo-generate is a developer tool to help you get up and running quickly with a new Rust project by leveraging a pre-existing git repository as a template.",
      "url": "https://github.com/ashleygwilliams/cargo-generate",
      "tweet_url": "https://twitter.com/ag_dubs/status/1019325671074664448",
      "date_published": "2018-07-18T06:59:00+00:00",
      "author": {
        "name": "Ashley Williams",
        "url": "https://github.com/ashleygwilliams"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "4a0e6748-9562-4507-bbfe-3cdf49b6292b",
      "title": "On impl blocks, injection and surjection in Rust",
      "content_text": "Rust has this cool feature called impl block. An impl block is just a scope that introduces a way to augment a type with methods – do not confuse impl blocks with trait impls, used to implement a given trait.",
      "url": "https://phaazon.net/blog/on-rust-impl-block",
      "date_published": "2018-07-22T22:05:00+00:00",
      "author": {
        "name": "Dimitri Sabadie",
        "url": "http://phaazon.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "35ed06d7-694b-4d04-ade3-5a8816619b78",
      "title": "Let's code with the Roguelike tutorial - Part 3 - Making a dungeon",
      "content_text": "It's time to start making some rooms and connecting them together. These will require making modifications to the map, so I guess it's time to finally refactor the map code into its own legitimate class.",
      "url": "https://www.yosenspace.com/posts/lets-code-roguelike-tutorial-part3-making-dungeon.html",
      "tweet_url": "https://twitter.com/yosenspace/status/1014293283432886272",
      "date_published": "2018-07-04T09:42:00+00:00",
      "author": {
        "name": "Yosen",
        "url": "https://www.yosenspace.com/index.html"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "54c6e230-51fa-42c2-bcab-26b75e699bb3",
      "title": "Rustberry 0.1.0 has been released, and I need more testers!",
      "content_text": "After many laborious hours of reading and interpreting the various online references, I've published the first release of my latest project, a crate to safely abstract Raspberry Pi's platform-specific features in Rust. I've (very creatively) named it Rustberry, and it's finally stable and clean enough that I'm able to publish it and receive initial feedback.",
      "url": "https://www.reddit.com/r/rust/comments/8x1ayd/calling_all_raspberry_pi_owners_rustberry_010_has/",
      "date_published": "2018-07-08T23:06:00+10:00",
      "author": {
        "name": "/u/ninja_tokumei",
        "url": "https://www.reddit.com/user/ninja_tokumei"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "e29e550b-7c05-4625-9a81-513b316b5675",
      "title": "Futures 0.3.0-alpha.2",
      "content_text": "Several new changes while working towards 0.3.",
      "url": "https://rust-lang-nursery.github.io/futures-rs/blog/2018/07/30/futures-0.3.0-alpha.2.html",
      "tweet_url": "https://twitter.com/RustNetWG/status/1023942869806080000",
      "date_published": "2018-07-30T00:00:00+00:00",
      "author": {
        "name": "Josef Brandl",
        "url": "http://rust-lang-nursery.github.io/futures-rs/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "e0622344-66a9-4b93-a59f-1b5250ba8c98",
      "title": "Using C libraries in Rust: make a sys crate",
      "content_text": "Using C libraries in a portable way involves a bit of work: finding the library on the system or building it if it's not available, checking if it is compatible, finding C headers and converting them to Rust modules, and giving Cargo correct linking instructions. Often every step of this is tricky, because operating systems, package managers and libraries have their unique quirks that need special handling.\n\nFortunately, all this work can be done once in a build script, and published as a <insert library name>-sys Rust crate. This way other Rust programmers will be able to use the C library without having to re-invent the build script themselves.",
      "url": "https://kornel.ski/rust-sys-crate",
      "date_published": "2018-07-30T00:00:00+00:00",
      "author": {
        "name": "Kornel",
        "url": "https://kornel.ski/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "a9a551b0-07a6-48a2-944f-b956438fecc0",
      "title": "How we built a Visual Studio Code extension for IoT prototyping",
      "content_text": "We recently had the opportunity to make a Visual Studio Code extension that needed to communicate with an embedded device. This post explains the architecture we chose to achieve that and the decisions that led to it.",
      "url": "https://cultivatehq.com/posts/how-we-built-a-visual-studio-code-extension-for-iot-prototyping/",
      "tweet_url": "https://twitter.com/cultivatehq/status/1017750271856869377",
      "date_published": "2018-07-13T22:39:00+00:00",
      "author": {
        "name": "Dan Munckton",
        "url": "https://cultivatehq.com/posts/"
      },
      "tags": [
        "Tools and Applications",
        "Embedded"
      ]
    },
    {
      "id": "5f84b8db-7379-4c08-9cae-d2a901caaab1",
      "title": "Linux Container Internals (Part II)",
      "content_text": "Containers are moving the world. Each passing day more and more organizations are embracing containers as first-class citizens for distribution and deployment of software components. Containers represent the core of the cloud native paradigm.",
      "url": "https://rabbitstack.github.io/operating%20systems/containers/linux-container-internals-part-ii/",
      "tweet_url": "https://twitter.com/rabbitstack/status/1017819753870741504",
      "date_published": "2018-07-13T18:10:04+02:00",
      "author": {
        "name": "Nedim Šabić",
        "url": "https://rabbitstack.github.io"
      },
      "tags": [
        "DevOps and Deployment"
      ]
    },
    {
      "id": "62456010-4ef4-4f1d-87f0-6e0c64929d82",
      "title": "Ownership in Rust, Part 2",
      "content_text": "It’s still not problem.",
      "url": "https://medium.com/@thomascountz/ownership-in-rust-part-2-c3e1da89956e",
      "tweet_url": "https://twitter.com/ThomasCountz/status/1017089903589543938",
      "date_published": "2018-07-11T16:55:03.818+00:00",
      "author": {
        "name": "Thomas Countz",
        "url": "https://medium.com/@thomascountz"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "c0f25118-a040-4f57-bd18-1594ce4e72f6",
      "title": "Ownership in Rust, Part 1",
      "content_text": "It’s not my problem.",
      "url": "https://medium.com/@thomascountz/ownership-in-rust-part-1-112036b1126b",
      "tweet_url": "https://twitter.com/ThomasCountz/status/1016426451078348802",
      "date_published": "2018-07-09T20:58:44.366+00:00",
      "author": {
        "name": "Thomas Countz",
        "url": "https://medium.com/@thomascountz"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "a928dd6a-2db7-4366-bd96-74134b4094b8",
      "title": "How much of npm can you break?",
      "content_text": "The idea was simple, choose a package and recursively traverse npm to find all of the packages that depend upon it, after all the npm website offers a ‘Dependents’ tab on a package’s page. I had not anticipated the issues that made this an interesting technical problem.",
      "url": "https://mrandri19.github.io/2018/06/24/how-much-of-npm-will-you-break.html",
      "date_published": "2018-06-24T00:00:00+00:00",
      "author": {
        "name": "Andrea Cognolato",
        "url": "https://mrandri19.github.io/blog"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "f53d06d7-6b22-4cb8-95f1-66f8ae0bdb8f",
      "title": "Deploying Rust with Docker and Kubernetes",
      "content_text": "Using a tiny Rust app to demonstrate deploying Rust with Docker and Kubernetes.",
      "url": "https://www.fpcomplete.com/blog/2018/07/deploying-rust-with-docker-and-kubernetes",
      "tweet_url": "https://twitter.com/FPComplete/status/1019338863108612096",
      "date_published": "2018-07-17T21:36:08+00:00",
      "author": {
        "name": "Chris Allen",
        "url": "https://www.fpcomplete.com/blog"
      },
      "tags": [
        "DevOps and Deployment"
      ]
    },
    {
      "id": "a65d9a08-fc44-4976-b2ad-82b934b7961f",
      "title": "Flocking in Rust with Piston",
      "content_text": "Wikipedia states that flocking is a behavior exhibited when a group of birds, called a flock, are foraging or in flight. Flocking simulation are basically softwares which simulate this flocking behavior of birds. The original algorithm is developed by Craig Reynolds in 1986.",
      "url": "https://blog.shine.rocks/posts/flocking-in-rust-with-piston/",
      "tweet_url": "https://twitter.com/_sha94/status/1018498360783716352",
      "date_published": "2018-07-15T00:00:00+00:00",
      "author": {
        "name": "Htet Aung Shine",
        "url": "https://blog.shine.rocks/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "669e3447-5dac-4fe9-a87a-0b315ae3062d",
      "title": "Where next for the Monotron",
      "content_text": "It's a couple of months on from my talk at RustFest on Monotron, so I thought it was worth a quick catch up on where we're going next. As a recap, Monotron currently generates an 800 x 600 VGA signal at 60 Hz (with a pixel clock of 40 MHz). It does this using three synchronised SPI peripherals, a timer generating the horizontal-sync pulse and a GPIO pin for the vertical-sync. With the CPU running at a clock speed of 80 MHz, the SPI peripherals are clocked at 20 MHz producing 400 horizontal pixels per line. This is half the nominal 800 pixels, but we needed to sacrifice resolution to double the amount of CPU time we have to 4 clocks per pixel (i.e. 32 clocks per 8-bit character column).",
      "url": "http://railwayelectronics.blogspot.com/2018/07/where-next-for-monotron.html?m=1",
      "tweet_url": "https://twitter.com/therealjpster/status/1021873858826194947",
      "date_published": "2018-07-24T22:40:00+01:00",
      "author": {
        "name": "Jonathan Pallant",
        "url": "http://railwayelectronics.blogspot.com.au/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "2c62015d-b849-4ab6-bbc9-e62255ca3473",
      "title": "What is Rust 2018?",
      "content_text": "The release of Rust 1.31.0 on December 6th will be the first release of “Rust 2018.” This marks a culmination of the last three years of Rust’s development, and brings it together in one neat package. For example, there will be a 2018 edition of the book that incorporates features stabilized since the print edition was considered finalized.",
      "url": "https://blog.rust-lang.org/2018/07/27/what-is-rust-2018.html",
      "tweet_url": "https://twitter.com/rustlang/status/1022879177261948929",
      "date_published": "2018-07-27T00:00:00+00:00",
      "author": {
        "name": "The Rust Core Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "95c003ee-6a87-45cb-abd3-491bd965d65c",
      "title": "Announcing the js-sys crate!",
      "content_text": "The js-sys crate contains raw #[wasm_bindgen] bindings to all the global APIs guaranteed to exist in every JavaScript environment by the ECMAScript standard. It does not contain bindings to any Web- or Node-specific APIs. With the js-sys crate, we can work with Objects, Arrays, Functions, Maps, Sets, etc… without writing the #[wasm_bindgen] imports by hand.",
      "url": "https://rustwasm.github.io/2018/07/26/announcing-the-js-sys-crate.html",
      "tweet_url": "https://twitter.com/rustwasm/status/1022609480394002434",
      "date_published": "2018-07-26T00:00:00+00:00",
      "author": {
        "name": "rustwasm",
        "url": "https://rustwasm.github.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "d0dc161e-3fcc-4fc7-9032-f9847bf4f3b8",
      "title": "Version selection in Cargo",
      "content_text": "When there are multiple ways to resolve dependencies, Cargo generally chooses the newest possible version. The goal of this post is to explain why Cargo works this way, and how that rationale relates to several recent discussions, including:",
      "url": "http://aturon.github.io/2018/07/25/cargo-version-selection/",
      "tweet_url": "https://twitter.com/aaron_turon/status/1022321972435247105",
      "date_published": "2018-07-25T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e5caa9df-4d3f-46be-a8ce-79369f0cad32",
      "title": "Wayland-rs 0.21: Pure Rust implementation",
      "content_text": "wayland-rs is a set of crates providing generic APIs to manipulate the Wayland protocol, successor of X11 for linux windowing.\n\nHere I am finally, after having hinted at the possibility and finally taken the time to write and merge quite an epic pull request, I can finally say it: wayland-rs is now a pure rust implementation of the protocol, rather than a crate of bindings to the wayland system C libraries.",
      "url": "https://smithay.github.io/wayland-rs-v-0-21.html",
      "date_published": "2018-07-18T22:00:00+02:00",
      "author": {
        "name": "Victor Berger",
        "url": "https://smithay.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "5579acfe-3441-4097-9476-863e348858f5",
      "title": "The Cheddar shading language",
      "content_text": "Cheddar is a GLSL superset language. What it means is that most of the GLSL constructs and syntax you’re used to is valid in Cheddar – not all of it; most of it. Cheddar adds a set of features that I think are lacking to GLSL. Among them: Some non-valid GLSL constructions made valid in Cheddar to ease the writing of certain shader stages; A more functional approach to programming shaders on the GPU; Structures, types and GLSL-specific constructs sharing; Imports and modules with live reloading and transitive dependencies.",
      "url": "https://phaazon.net/blog/cheddar-0.1",
      "date_published": "2018-07-09T01:00:00+00:00",
      "author": {
        "name": "Dimitri Sabadie",
        "url": "http://phaazon.net/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "a95c25cb-0553-42ee-a81a-4a9cedce53e8",
      "title": "Rust + actix-web power Atlas Weekend music festival",
      "content_text": "We've just finished music festival Atlas Weekend which took place in Kyiv, Ukraine. This year there were for about 450,000 visitors during 6 days. I'm glad to announce that Rust and actix-web are used as a backend for main technical purposes of festival.",
      "url": "https://www.reddit.com/r/rust/comments/8xdsx5/rust_actixweb_in_the_on_of_the_biggest_music/",
      "date_published": "2018-07-10T03:16:52+10:00",
      "author": {
        "name": "/u/maxfrai",
        "url": "https://www.reddit.com/user/maxfrai"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "fbdcd657-aab5-4d28-aa3a-ab04294f49eb",
      "title": "Multi target Rust builds with auto deployment in Travis-CI",
      "content_text": "This is just a small build script to automatically compile and create Rust binaries for your i86 32 and 64 bit machine and your Raspberry Pi(ARM) with Travis-CI. On the right side I added a little explanation of the following script.",
      "url": "https://medium.com/@tyrf/multi-target-rust-builds-with-auto-deployment-in-travis-ci-ab5214fb73ba",
      "date_published": "2018-07-13T18:44:17.418+00:00",
      "author": {
        "name": "Hendrik Teuber",
        "url": "https://medium.com/@tyrf"
      },
      "tags": [
        "DevOps and Deployment",
        "Embedded"
      ]
    },
    {
      "id": "b4133437-b69d-4491-a40f-a368a8847627",
      "title": "Pointers Are Complicated, or: What's in a Byte?",
      "content_text": "This summer, I am again working on Rust full-time, and again I will work (amongst other things) on a “memory model” for Rust/MIR. However, before I can talk about the ideas I have for this year, I have to finally take the time and dispel the myth that “pointers are simple: they are just integers”. Both parts of this statement are false, at least in languages with unsafe features like Rust or C: Pointers are neither simple nor (just) integers.\n\nI also want to define a piece of the memory model that has to be fixed before we can even talk about some of the more complex parts: Just what is the data that is stored in memory? It is organized in bytes, the minimal addressable unit and the smallest piece that can be accessed (at least on most platforms), but what are the possible values of a byte? Again, it turns out “it’s just an 8-bit integer” does not actually work as the answer.\n\nI hope that by the end of this post, you will agree with me on both of these statements. :)",
      "url": "https://www.ralfj.de/blog/2018/07/24/pointers-and-bytes.html",
      "date_published": "2018-07-24T00:00:00+00:00",
      "author": {
        "name": "Ralf Jung",
        "url": "https://www.ralfj.de/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "7e963a31-6451-4f7d-9817-1e8c33c4973d",
      "title": "Thoughts on Compile-Time Function Evaluation and Type Systems",
      "content_text": "For some time now (since the 1.26 release, to be precise), Rust has a very powerful machinery for CTFE, or compile-time function evaluation. Since then, there have been various discussions about which operations should be allowed during CTFE, which checks the compiler should do, how this all relates to promotion and which kinds of guarantees we should be able to expect around CTFE. This post is my take on those topics, and it should not be surprising that I am going to take a very type-system centric view. Expect something like a structured brain dump, so there are some unanswered questions towards the end as well.",
      "url": "https://www.ralfj.de/blog/2018/07/19/const.html",
      "date_published": "2018-07-19T00:00:00+00:00",
      "author": {
        "name": "Ralf Jung",
        "url": "https://www.ralfj.de/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "40055859-95cc-47a0-89e3-fd3c8a000fba",
      "title": "Rust vs. Go",
      "content_text": "Welcome to the Rust Review’s bonus post, which I had promised from the very beginning. I’m here to cover the big elephant in the room: Rust vs. Go. Which one is better?\n\nThere is no good answer to this question because this comparison is unfounded. I think people tend to bundle the two languages together because they were released at about the same time and the release of Rust felt like a response to the release of Go. Moreover, both languages are supposed to focus on systems software. But they are vastly different, and even as they both target systems software, they target different kinds of such software.",
      "url": "http://julio.meroh.net/2018/07/rust-vs-go.html",
      "tweet_url": "https://twitter.com/jmmv/status/1017786170376359936",
      "date_published": "2018-07-13T10:45:00+02:00",
      "author": {
        "name": "Julio Merino",
        "url": "http://julio.meroh.net/series.html#Rust%20review"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "0b53c7ea-570b-4595-b8eb-2f62d8e9cb96",
      "title": "Writing a GPU-Accelerated Path Tracer in Rust - Part 3",
      "content_text": "Hello! Welcome to my third and final post on my GPU-accelerated Path Tracer in Rust. In the last post, we implemented all of the logic necessary to build a true path tracer. Problem is, even on the GPU it’s terrifically slow. This post is (mostly) about fixing that.\n\nBut first, we need to fix a bug or two, because I goofed. *sad trombone*\n\nStep -1: Fixing Bugs /u/anderslanglands on Reddit pointed out that, since I’m using Cosine-weighted Importance Sampling, I need to do some extra math to avoid biasing the results.",
      "url": "https://bheisler.github.io/post/writing-gpu-accelerated-path-tracer-part-3/",
      "date_published": "2018-07-19T18:30:00-06:00",
      "author": {
        "name": "Brook Heisler",
        "url": "https://bheisler.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "f4903839-c307-4209-b760-15176676663f",
      "title": "#[test] in 2018",
      "content_text": "Lately, I’ve been working implementing the Custom Test Frameworks eRFC for Rust. While exploring the compiler codebase, I’ve learned about the internals of testing in Rust and figured it would be interesting to share.",
      "url": "https://blog.jrenner.net/rust/testing/2018/07/19/test-in-2018.html",
      "date_published": "2018-07-19T00:00:00+00:00",
      "author": {
        "name": "John Renner",
        "url": "https://blog.jrenner.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "2d302e67-f458-4d07-b1f4-78cb9ed02914",
      "title": "Announcing Rust 1.27.2",
      "content_text": "The Rust team is happy to announce a new version of Rust, 1.27.2.",
      "url": "https://blog.rust-lang.org/2018/07/20/Rust-1.27.2.html",
      "tweet_url": "https://twitter.com/rustlang/status/1020617073783918593",
      "date_published": "2018-07-20T00:00:00+00:00",
      "author": {
        "name": "The Rust Core Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "db3cdc15-004b-4a41-9649-6ade4a8407eb",
      "title": "RustSec Advisory Database",
      "content_text": "Security advisory database for Rust crates published through https://crates.io.",
      "url": "https://rustsec.org/",
      "tweet_url": "https://twitter.com/RustSec/status/1020717022819233792",
      "date_published": "2018-07-19T00:00:00+00:00",
      "author": {
        "name": "Rust Project Developers",
        "url": "https://rustsec.org/"
      },
      "tags": [
        "Security"
      ]
    },
    {
      "id": "2a8864ba-0872-45d2-89f4-87e9f368374b",
      "title": "Futures 0.3.0-alpha.1",
      "content_text": "Welcome to the inaugural post of the new futures-rs blog!\n\nAfter several months of work, we’re happy to announce an alpha release of the new edition of future-rs, version 0.3. The immediate goal of this work is to support async/await notation (with borrowing) in Rust itself, which has entailed significant changes to the futures crate.",
      "url": "https://rust-lang-nursery.github.io/futures-rs/blog/2018/07/19/futures-0.3.0-alpha.1.html",
      "tweet_url": "https://twitter.com/aaron_turon/status/1020160894829977600",
      "date_published": "2018-07-19T17:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "https://rust-lang-nursery.github.io/futures-rs/"
      },
      "tags": [
        "Language",
        "Crates"
      ]
    },
    {
      "id": "a721af0b-e469-40ba-8ddc-f5f2a305483f",
      "title": "Signal Hook: Unix signal hanadling in Rust",
      "content_text": "As promised in the previous article (thanks for all the valuable feedback ‒ I didn’t have the time to act on it yet, but I will), this talks about Unix signal handling.\n\nLong story short, I wasn’t happy about the signal handling story in Rust and this is my attempt at improving it.",
      "url": "https://vorner.github.io/2018/06/28/signal-hook.html",
      "date_published": "2018-06-28T00:00:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Language",
        "Operating Systems"
      ]
    },
    {
      "id": "861a1228-9bbd-4d34-b08d-40b191f19abd",
      "title": "The Return of: Can Rust speed up your Azure Functions?",
      "content_text": "A couple of weeks back I started using WASM on Azure’s FaaS (serverless/Functions as a Services) and unexpectedly the Rust version of my simple Monte Carlo estimation was considerably slower than its JavaScript counterpart. Clearly this needs more exploring! This time around the challenges will be harder and more practical. Let’s see how WASM and JavaScript perform.",
      "url": "https://blog.x5ff.xyz/blog/azure-functions-wasm-rust-2/",
      "date_published": "2018-06-25T00:00:00+00:00",
      "author": {
        "name": "Claus",
        "url": "https://blog.x5ff.xyz/blog"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "863992ef-fc2b-4235-a8bd-206d55fd416f",
      "title": "actix – a basic TCP client",
      "content_text": "In our last post about actix we introduced you to the Rust programming language and the actix actor framework. This week we will build a basic TCP client with actix.",
      "url": "https://simplabs.com/blog/2018/06/27/actix-tcp-client.html",
      "date_published": "2018-06-27T00:00:00+00:00",
      "author": {
        "name": "Tobias Bieniek",
        "url": "https://simplabs.com/blog/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "ab3d6484-4107-4555-a9b0-0f1aa6ae9a18",
      "title": "How Usable are Rust Cryptography APIs?",
      "content_text": "Poor usability of cryptographic APIs is a severe source of vulnerabilities. Aim: We wanted to find out what kind of cryptographic libraries are present in Rust and how usable they are. Method: We explored Rust's cryptographic libraries through a systematic search, conducted an exploratory study on the major libraries and a controlled experiment on two of these libraries with 28 student participants. Results: Only half of the major libraries explicitly focus on usability and misuse resistance, which is reflected in their current APIs. We found that participants were more successful using rust-crypto which we considered less usable than ring before the experiment. Conclusion: We discuss API design insights and make recommendations for the design of crypto libraries in Rust regarding the detail and structure of the documentation, higher-level APIs as wrappers for the existing low-level libraries, and selected, good-quality example code to improve the emerging cryptographic libraries of Rust.",
      "url": "https://arxiv.org/abs/1806.04929",
      "date_published": "2018-06-26T00:00:00+00:00",
      "author": {
        "name": "Kai Mindermann, Philipp Keck, Stefan Wagner",
        "url": "https://arxiv.org/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "75ff979d-19df-4238-9064-d02708b64a00",
      "title": "Rust Pointers for C Programmers",
      "content_text": "I knew that there are a lot of different “pointers” but I found all the descriptions of them lacking or confusing. Specifically, Rust calls itself a systems programming language, yet I found no clear description of how the different pointers map to C—the systems programming language. Eventually, I stumbled across The Periodic Table of Rust Types, which made things a bit clearer, but I still didn’t feel like I truly understood.\n\nDuring my weekend expedition to Rust land, I think I’ve grokked things enough to write this explanation of how Rust does things. As always, feedback is welcomed.",
      "url": "http://blahg.josefsipek.net/?p=580",
      "date_published": "2018-01-28T15:47:00+00:00",
      "author": {
        "name": "Josef “Jeff” Sipek",
        "url": "http://blahg.josefsipek.net"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "16b43079-6e0d-4c7e-9ea3-00cf0405bf49",
      "title": "Genetic Algorithms in Rust for Autonomous Agents: An Introduction",
      "content_text": "This article discusses a possible genetic algorithm implementation in Rust applied to the travelling salesman problem.",
      "url": "https://medium.com/coinmonks/genetic-algorithms-in-rust-for-autonomous-agents-an-introduction-ac182de32aee",
      "tweet_url": "https://twitter.com/coinmonks/status/1013079198741737473",
      "date_published": "2018-06-30T14:09:48.725+00:00",
      "author": {
        "name": "Mithi",
        "url": "https://medium.com/@mithi"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "289bc607-7039-4931-838e-0451ee67e488",
      "title": "Writing a GPU-Accelerated Path Tracer in Rust - Part 2",
      "content_text": "Hello, and welcome to part two of my series on writing a GPU-accelerated path tracer in Rust. I’d meant to have this post up sooner, but nothing ruins my productivity quite like Games Done Quick. I’m back now, though, so it’s time to turn the GPU ray-tracer from the last post into a real path tracer.\n\nTracing Paths As mentioned last time, Path Tracing is an extension to Ray Tracing which attempts to simulate global illumination.",
      "url": "https://bheisler.github.io/post/writing-gpu-accelerated-path-tracer-part-2/",
      "date_published": "2018-07-12T19:00:00-06:00",
      "author": {
        "name": "Brook Heisler",
        "url": "https://bheisler.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "34fa3257-4ea8-4ade-8cad-353aa02239d3",
      "title": "Physical Computing With Rust On Raspberry Pi",
      "content_text": "A couple of months ago I released the rust_gpiozero¹ crate. It is a port of the GPIO Zero² library by the Raspberry Pi Foundation. The library provides a simple interface to control GPIO devices with a Raspberry Pi. Following this, recently ported the Raspberry Pi Foundation’s Physical Computing with Python³ guide for Rust.",
      "url": "https://medium.com/@rahulthakoor/physical-computing-with-rust-on-raspberry-pi-a7b6f34261a6",
      "tweet_url": "https://twitter.com/rahulthakoor/status/1017430944117067781",
      "date_published": "2018-07-12T14:52:13.936+00:00",
      "author": {
        "name": "Rahul Thakoor",
        "url": "https://medium.com/@rahulthakoor"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "80a9211d-dd65-4da8-b8d6-5d4223ee278d",
      "title": "Auditing popular Rust crates: how a one-line unsafe has nearly ruined everything",
      "content_text": "Following the actix-web incident (which is fixed now, at least mostly) I decided to poke other popular Rust libraries and see what comes of it.\n\nThe good news is I’ve poked at 6 popular crates now, and I’ve got not a single actually exploitable vulnerability. I am impressed. When I poked popular C libraries a few years ago it quickly ended in tears. The bad news is I’ve found one instance that was not a security vulnerability by sheer luck, plus a whole slew of denial-of-service bugs. And I can’t fix all of them by myself. Read on to find out how I did it, and how you can help!",
      "url": "https://medium.com/@shnatsel/auditing-popular-rust-crates-how-a-one-line-unsafe-has-nearly-ruined-everything-fab2d837ebb1",
      "date_published": "2018-07-19T01:38:11.806+00:00",
      "author": {
        "name": "Sergey \"Shnatsel\" Davidoff",
        "url": "https://medium.com/@shnatsel"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a81b111b-b3d6-4515-81bc-00d00bf62fb9",
      "title": "How to help test the 2018 edition",
      "content_text": "An edition brings together the features that have landed into a clear package, with fully updated documentation and tooling. By the end of the year we are planning to release the 2018 edition, our first since the Rust 1.0 release. You can currently opt-in to a preview of the 2018 edition to try it out and help test it.\n\nIn fact, we really need help testing it out! Once you’ve turned it on and seen its wonderful new features, what then? Here we’ve got some specific things we’d like you to test.",
      "url": "https://www.ncameron.org/blog/how-to-help-test-the-2018-edition/",
      "tweet_url": "https://twitter.com/nick_r_cameron/status/1019418782601658368",
      "date_published": "2018-07-18T03:08:04+00:00",
      "author": {
        "name": "Nick Cameron",
        "url": "http://www.ncameron.org/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "fbdc0364-12e8-49f4-914f-b3c4f17d43f0",
      "title": "Hello Content-o-Tron",
      "content_text": "Content-o-Tron is a project to help amplify the lesser heard voices in the Rust community.\n\nWe are able to do this by providing editorial assistance and technical reviews of draft blog posts.\n\nOnce your blog post is ready to publish, we will ensure it is disseminated through various channels such as Read Rust, MozHacks, social networks and of course the Rust Community’s own blog on community.rs.",
      "url": "http://blog.community.rs/content-team/2018/07/16/hello-content-o-tron.html",
      "tweet_url": "https://twitter.com/badboy_/status/1019531551451897857",
      "date_published": "2018-07-16T00:00:00+00:00",
      "author": {
        "name": "Mark Sta Ana",
        "url": "http://blog.community.rs/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a16772c9-e5d4-4e73-8bec-934d8ae183c5",
      "title": "A web application completely in Rust",
      "content_text": "My latest software architectural experiment is to write a complete real-world web application in Rust with as less as boilerplate as possible. Within this post I want to share my findings with you to answer the question on how much web Rust actually is.",
      "url": "https://medium.com/@saschagrunert/a-web-application-completely-in-rust-6f6bdb6c4471",
      "tweet_url": "https://twitter.com/saschagrunert/status/1015687904981667840",
      "date_published": "2018-07-07T19:58:43.445+00:00",
      "author": {
        "name": "Sascha Grunert",
        "url": "https://medium.com/@saschagrunert"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "d52613f9-60c7-4448-89ed-72cd3da79346",
      "title": "Why I love Rust",
      "content_text": "I spent much of my free time over the past year learning Rust, and while it’s been a difficult language to fully grasp (it’s still a work in progress), I find it incredibly rewarding to write in. I also have had many conversations with people who don’t know much about Rust and are curious about the problems it solves.\n\nThis is my take on why Rust is important, and why I have fallen in love with the language.",
      "url": "https://alexkitchens.net/2018/07/06/why-i-love-rust.html",
      "tweet_url": "https://twitter.com/alexcameron89/status/1015323435822731265",
      "date_published": "2018-07-06T08:46:39+00:00",
      "author": {
        "name": "Alex Kitchens",
        "url": "https://alexkitchens.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "306a1044-e3e5-4a20-b4df-6577fa6eadf5",
      "title": "Tiny Planets",
      "content_text": "In the past few years, I've heard a lot about Rust. As someone that hacks on computer graphics and low-level infrastructure libraries, it seems relevant to my interests. I decided to make a small demo – of a procedural planet generator – and see how it went.",
      "url": "http://www.mattkeeter.com/projects/planets/",
      "tweet_url": "https://twitter.com/impraxical/status/1014550780379062277",
      "date_published": "2018-07-05T02:45:00+00:00",
      "author": {
        "name": "Matt Keeter",
        "url": "http://www.mattkeeter.com/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "ca7cc808-b6f7-4650-a219-b2c92be95460",
      "title": "Rust: Raw string literals",
      "content_text": "While working with Rust, you will often come across r#\"something like this\"#, especially when working with JSON and TOML files. It defines a raw string literal. When would you use a raw string literal and what makes a valid raw string literal?",
      "url": "https://medium.com/@rahulthakoor/rust-raw-string-literals-9579c4feb231",
      "tweet_url": "https://twitter.com/rahulthakoor/status/1014865759846191104",
      "date_published": "2018-07-05T13:26:49.039+00:00",
      "author": {
        "name": "Rahul Thakoor",
        "url": "https://medium.com/@rahulthakoor"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "54242603-6ea7-4c99-8826-bbda3f8f63db",
      "title": "Surface Rust: The Missing IDE",
      "content_text": "This week I decided to do a little hacking on Rust. I thought I’d write down my first impressions of the language.",
      "url": "https://medium.com/@wolfshirts/surface-rust-6470d0075721",
      "date_published": "2018-07-04T21:45:48.367+00:00",
      "author": {
        "name": "@wolfshirts",
        "url": "https://medium.com/@wolfshirts"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "133f5906-759e-4a83-b188-fc18eda31cc0",
      "title": "BetaFPV F3 Drone Flight Controller - Hello Rust",
      "content_text": "One of the most exciting areas of hobbyist embedded programming, in my opinion, is flight controllers for remote controlled aircraft. In the particular case of a multi-rotor drone, the flight controller is responsible for converting the UP command from the transmitter into specific outputs for each of the motors. Maintaining the stability of a drone involves carefully adjusting the output of each motor thousands of times per second based on feedback from on-board sensors.\n\nThere are several great C-based open source drone flight controller firmware projects, but as far as I can see there are none written in Rust. The good news is that most drone flight controllers are based on STM32 MCUs, which Rust has strong support for. Robust flight controller firmware is quite complex, and there are a number of challenges to be solved before even getting the rotors spinning. The first of those challenges is building a Rust project for a particular flight controller board, and flashing the board with the compiled code. A single blinking LED is our goal for today.",
      "url": "https://www.joshmcguigan.com/blog/betafpv-drone-flight-controller-hello-rust/",
      "date_published": "2018-07-11T00:00:00+00:00",
      "author": {
        "name": "Josh Mcguigan",
        "url": "https://www.joshmcguigan.com/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "b2fbac94-27b1-4c37-8c21-ead67edecf43",
      "title": "The Tale of a Bug in Arc: Synchronization and Data Races",
      "content_text": "While I was busy doing Rust-unrelated research, RustBelt continues to move and recently found another bug (after a missing impl !Sync that we found previously): It turns out that Arc::get_mut did not perform sufficient synchronization, leading to a data race.",
      "url": "https://www.ralfj.de/blog/2018/07/13/arc-synchronization.html",
      "date_published": "2018-07-13T00:00:00+00:00",
      "author": {
        "name": "Ralf Jung",
        "url": "https://www.ralfj.de/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "87ea8aa4-a134-4f8a-8ff2-fc33f4832020",
      "title": "RSoC: FAT32 Filesystem in Redox - 2",
      "content_text": "This is the second blog post about implementing a FAT32 filesystem in Redox.",
      "url": "https://www.redox-os.org/news/rsoc-fat32-2/",
      "date_published": "2018-07-03T00:00:00+00:00",
      "author": {
        "name": "Deepak Sirone",
        "url": "https://www.redox-os.org/news/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "bef012dd-518b-4a24-9acd-d0d68b3bead3",
      "title": "Embedded development with Yocto and Rust",
      "content_text": "Customized Linux distribution and a safe systems programming language sounds like a very interesting combination for embedded development. That is what makes Yocto and Rust such a good match. So, I wanted to see how Rust projects could be cross-compiled with Yocto-generated toolchain and root filesystem. The steps are described in this post.",
      "url": "https://pagefault.blog/2018/07/04/embedded-development-with-yocto-and-rust/",
      "date_published": "2018-07-04T17:06:32+00:00",
      "author": {
        "name": "Sami Pietikäinen",
        "url": "https://pagefault.blog/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "1b9d4f29-d237-4f3d-bc55-23b9ab2c5d77",
      "title": "Why Rust?",
      "content_text": "Programming is hard. Not because our hardware is complex, but simply because we’re all humans. Our attention span is limited, our memory is volatile — in other words, we tend to make mistakes.",
      "url": "https://medium.com/paritytech/why-rust-846fd3320d3f",
      "tweet_url": "https://twitter.com/ParityTech/status/1014425726844534784",
      "date_published": "2018-07-04T07:43:11.858+00:00",
      "author": {
        "name": "Dmitriy Kashitsyn",
        "url": "https://medium.com/@0x7cfe"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "5489d43b-5cbb-4f2b-964e-1aacba277cd6",
      "title": "Let's code with the Roguelike tutorial - Part 2 - Entities and the map",
      "content_text": "As I mentioned in the last post, until I got a better handle on the off screen console code, I temporarily made all the Rust bindings call out to the default root console. Now that there's a bit of discussion on how the off screen consoles work, it's time to refactor the code to enable their use. ",
      "url": "https://www.yosenspace.com/posts/lets-code-roguelike-tutorial-part2-entities-map.html",
      "tweet_url": "https://twitter.com/yosenspace/status/1014265807600168960",
      "date_published": "2018-07-04T07:53:00+00:00",
      "author": {
        "name": "Yosen",
        "url": "https://www.yosenspace.com/index.html"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "f12f8561-c983-40b4-a7b4-9da8b350b33d",
      "title": "Idioms of Dynamic Languages",
      "content_text": "Programmers think dynamic languages like Python are easier to use than static ones, but why? I look at uniquely dynamic programming idioms and their static alternatives, identifying a few broad trends that impact language usability.",
      "url": "http://willcrichton.net/notes/idioms-of-dynamic-languages/",
      "date_published": "2018-07-01T00:00:00+00:00",
      "author": {
        "name": "Will Crichton",
        "url": "http://willcrichton.net/notes/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "3b8f7264-75f2-4483-bb45-16770a899291",
      "title": "Scripting Language Cleanup",
      "content_text": "When we built the original Monsters and Sprites demo, we only had 9 days to get it working before the Playcrafting expo we had signed up for, so we had to cut a lot of corners. Since then I’ve been doing bug fixes and working on a lot of miscellaneous engine/language features that I either couldn’t get done in time for the demo, or didn’t realize were important until I started building it. We’ve made a few game updates since then (we now have sound!), but this post is specifically going to explore some language updates I’ve made.",
      "url": "https://www.anthropicstudios.com/2018/06/30/language-cleanup/",
      "tweet_url": "https://twitter.com/AnthropicSt/status/1013202971998539776",
      "date_published": "2018-06-30T00:00:00+00:00",
      "author": {
        "name": "Mason Remaley",
        "url": "https://www.anthropicstudios.com/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "04445b84-5c91-467e-840c-45df1765c4e6",
      "title": "[1807.00067] Josephine: Using JavaScript to safely manage the lifetimes of Rust data",
      "content_text": "This paper is about the interface between languages which use a garbage collector and those which use fancy types for safe manual memory management. Garbage collection is the traditional memory management scheme for functional languages, whereas type systems are now used for memory safety in imperative languages. We use existing techniques for linear capabilities to provide safe access to copyable references, but the application to languages with a tracing garbage collector, and to data with explicit lifetimes is new. This work is related to mixed linear/non-linear programming, but the languages being mixed are Rust and JavaScript.",
      "url": "https://arxiv.org/abs/1807.00067",
      "tweet_url": "https://twitter.com/asajeffrey/status/1013986739126521857",
      "date_published": "2018-06-29T00:00:00+00:00",
      "author": {
        "name": "Alan Jeffrey",
        "url": "http://asaj.org/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "98469a08-b569-403f-a3ed-6049ff91c0b1",
      "title": "Learning SIMD with Rust by finding planets",
      "content_text": "Rust 1.27.0 has brought SIMD (Single Instruction Multiple Data), also known as vectorization, to stable Rust. If you read the announcement, you will see that SIMD should bring performance enhancements to our applications if we learn how to use it properly. But, for that let's first dive into how SIMD works.",
      "url": "https://medium.com/@Razican/learning-simd-with-rust-by-finding-planets-b85ccfb724c3",
      "tweet_url": "https://twitter.com/Razican/status/1013887291574669317",
      "date_published": "2018-07-02T20:47:57.225+00:00",
      "author": {
        "name": "Iban Eguia",
        "url": "https://medium.com/@Razican"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "7d6ed3b9-1295-4331-879f-514cbff7e5ba",
      "title": "Our Vision for wasm-bindgen",
      "content_text": "The last blog post laid out the Rust and WebAssembly domain working group’s overall vision for Rust and WebAssembly. In this blog post, we will dive into the details of wasm-bindgen, the future we envision for it, and how you can help us build that future.",
      "url": "https://rustwasm.github.io/2018/07/02/vision-for-wasm-bindgen.html",
      "tweet_url": "https://twitter.com/rustwasm/status/1013832647104069633",
      "date_published": "2018-07-02T00:00:00+00:00",
      "author": {
        "name": "rustwasm",
        "url": "https://rustwasm.github.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "504568b7-fb85-4ed5-b94d-1c96333d2c64",
      "title": "Moving from the shell to Rust with commandspec",
      "content_text": "Almost every project I’ve worked on has grown a shell script named “build.sh”, and not much later a “test.sh” and “run.sh”. At this point, you have to make a decision as a developer whether your goal is to accidentally reinvent make or if your codebase’s needs are better met by an executable to manage your workflow.",
      "url": "http://timryan.org/2018/07/02/moving-from-the-shell-to-rust-with-commandspec.html",
      "tweet_url": "https://twitter.com/trimryan/status/1013856769792270336",
      "date_published": "2018-07-02T15:50:00+00:00",
      "author": {
        "name": "Tim Ryan",
        "url": "http://timryan.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "c700cc05-51d7-4599-b545-37f4db96f347",
      "title": "Fullstack React: Rust, React and WebAssembly",
      "content_text": "A tutorial on how to compile Rust to WebAssembly and integrate it into a React application",
      "url": "https://www.fullstackreact.com/articles/rust-react-and-web-assembly/",
      "date_published": "2018-07-03T00:00:00+00:00",
      "author": {
        "name": "Anders Pitman",
        "url": "http://anderspitman.net/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "fc0e0a2b-6cec-420d-803c-2ac8770fc9e8",
      "title": "Introducing PrrrStack",
      "content_text": "This is the first part in a two-part introductory series to PRRR Stack (Postgres, Rust, Rocket, React) application.",
      "url": "https://medium.com/@ccrsh/introducing-prrrstack-d617ff518ba6",
      "date_published": "2018-07-02T13:09:58.154+00:00",
      "author": {
        "name": "Crash Springfield",
        "url": "https://medium.com/@ccrsh"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "b63f8372-7dbc-4bf5-9ab3-e13a95a011be",
      "title": "Logistic Regression in Rust",
      "content_text": "This weekend, I implemented logistic regression in Rust. For me, the most interesting parts were learning how to implement a stopping condition and how to automatically set a step size.",
      "url": "http://paulkernfeld.com/2018/07/01/logistic-regression-in-rust.html",
      "tweet_url": "https://twitter.com/occupy_paul_st/status/1013848861813694465",
      "date_published": "2018-07-01T00:00:00+00:00",
      "author": {
        "name": "Paul Kernfeld",
        "url": "http://paulkernfeld.com/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "3b9229a6-90a7-48f7-983f-c2eb1117115e",
      "title": "Nebulet: More answers",
      "content_text": "Over the last couple of weeks, Nebulet has progressed signifigantly. Because of that, I think it’s time to talk about why I made certain decisions when designing and writing Nebulet.",
      "url": "https://lsneff.me/more-answers.html",
      "date_published": "2018-06-28T00:00:00+00:00",
      "author": {
        "name": "Lachlan Sneff",
        "url": "https://twitter.com/lachlansneff"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "3b171674-7223-48e4-95da-5f268ec6fa1f",
      "title": "llvm-tools: a new rustup component for binary inspection and profiling",
      "content_text": "Recent nightly releases provide an opt-in llvm-tools rustup component which you can install using the command: rustup component add llvm-tools. This component contains the following LLVM tools: llvm-nm, llvm-objcopy, llvm-objdump, llvm-profdata, and llvm-size. Most of these tools are LLVM alternatives to GNU binutils. The main advantage of these LLVM tools is that they support all the architectures that the Rust compiler supports.",
      "url": "https://internals.rust-lang.org/t/llvm-tools-a-new-rustup-component-for-binary-inspection-objdump-nm-size-and-profiling-profdata/7830",
      "tweet_url": "https://twitter.com/japaricious/status/1012507579401072640",
      "date_published": "2018-06-29T11:22:00+00:00",
      "author": {
        "name": "Jorge Aparicio",
        "url": "http://blog.japaric.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "9497ed78-6b59-4dd0-b1f8-725ca3c628d2",
      "title": "Programming Servo: an HTTP cache",
      "content_text": "In our previous post, we saw how combining channels with an event-loop could be a useful technique to ‘drive’ the concurrent logic of your system, and it was hinted at that shared mutable state might be more complicated. A good example of such ‘shared mutable state’ in Servo is the HTTP cache.",
      "url": "https://medium.com/programming-servo/programming-servo-an-http-cache-edb52a7f267f",
      "date_published": "2018-06-29T04:33:13.453+00:00",
      "author": {
        "name": "Gregory Terzian",
        "url": "https://medium.com/@polyglot_factotum"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "13dc5703-c3a5-4c10-b3a5-aa53c382c940",
      "title": "NES Emulator, Part 2: I sort of know what I’m doing",
      "content_text": "In my first post about my journey to the center of the NES, I was at the point where I was still working on the CPU; implementing new addressing modes and instructions as I made my way through the nestest ROM. Well, I finally finished the CPU, including a handful of the illegal opcodes. The last of the illegal opcodes just need some placeholders, because, as I understand it, very few games use them.",
      "url": "https://medium.com/@ltriant/nes-emulator-part-2-i-sort-of-know-what-im-doing-f64d5e61caed",
      "date_published": "2018-06-29T02:24:51.394+00:00",
      "author": {
        "name": "Luke Triantafyllidis",
        "url": "https://medium.com/@ltriant"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "19aba600-95ff-4ba2-920f-0db67b3755e4",
      "title": "New Photon Release of Eclipse IDE Ships With Full Rust Support | ",
      "content_text": "The release delivers native Eclipse IDE experiences for Rust and C# through Language Server based plugins. The Language Server Protocol (LSP) ecosystem delivers editing support for popular and emerging programming languages. Combined with the move to a quarterly rolling release cadence, the LSP focus demonstrates a commitment to keeping pace with evolving developer and commercial needs.",
      "url": "https://www.eclipse.org/org/press-release/20180627_new-photon-release-of-eclipse-ide-ships-with-full-rust-support.php",
      "tweet_url": "https://twitter.com/EclipseFdn/status/1012087570086313984",
      "date_published": "2018-06-27T00:00:00+00:00",
      "author": {
        "name": "The Eclipse Foundation",
        "url": "https://www.eclipse.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "696ba27d-cdab-400f-9e86-a138422c2154",
      "title": "A Self-ish Bug",
      "content_text": "I recently found a bug in mutagen: The “exchange arguments” mutation was actually ineffective. I was in the process of refactoring the code to pull coverage reporting into the mutagen calls (to reduce the amount of code generated), so the report_coverage call was to go away anyway. Except this bug masked another, more insiduous one: When I refactored, I found that one of the test would no longer compile methods with self arguments, running into Error E0424 (self keyword used in static method). Consider me confused.",
      "url": "https://llogiq.github.io/2018/06/28/self-bug.html",
      "tweet_url": "https://twitter.com/llogiq/status/1012438300781576192",
      "date_published": "2018-06-28T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "f8a137b7-ce7d-4553-bcec-6170350dc1f2",
      "title": "Rust with Rocket + Elm running on Heroku",
      "content_text": "I had this goal of making a web app that was very fast, stable and easy to deploy. This is what I was hoping to accomplish: strongly typed server-side and client-side languages (Rust & Elm respectively), push-button deployments to the cloud with free hosting initially, and sub-second response times for API calls and page loads. With this setup, I think I'm well on my way to accomplishing each of these.",
      "url": "http://ethanfrei.com/posts/rust-with-rocket-elm-running-on-heroku.html",
      "date_published": "2018-06-24T00:00:00+00:00",
      "author": {
        "name": "Ethan Frei",
        "url": "http://ethanfrei.com/"
      },
      "tags": [
        "Web and Network Services",
        "DevOps and Deployment"
      ]
    },
    {
      "id": "9c9c6dda-6538-4088-8123-e1ad213082e5",
      "title": "What I Learned: Porting Dateutil Parser to Rust",
      "content_text": "Hi. I’m Bradlee. I’ve mostly been a lurker in Rust for a while, making a couple small contributions here and there. So launching dtparse feels like nice step towards becoming a functioning member of society. But not too much, because then you know people start asking you to pay bills, and ain’t nobody got time for that.\n\nBut I built dtparse, and you can read about my thoughts on the process. Or don’t. I won’t tell you what to do with your life (but you should totally keep reading).",
      "url": "https://speice.io/2018/06/dateutil-parser-to-rust.html",
      "date_published": "2018-06-25T00:00:00+00:00",
      "author": {
        "name": "Bradlee Speice",
        "url": "https://speice.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "451beac2-903e-4bff-ada5-dc478a19e2c1",
      "title": "Even faster rust builds in Gitlab CI",
      "content_text": "tl;dr - I applied a few patterns I’ve used on other projects to a Gitlab CI-powered rust project to achieve <2min builds. Basically just caching at different layers – caching via the docker image builder pattern at the docker level, aggressive caching with Gitlab CI at the CI runner level, also one more step of combining some build steps (probably unnecessarily).",
      "url": "https://vadosware.io/post/even-faster-rust-builds-in-gitlab-ci/",
      "date_published": "2018-05-30T17:09:59+09:00",
      "author": {
        "name": "Vados",
        "url": "https://vadosware.io/"
      },
      "tags": [
        "DevOps and Deployment"
      ]
    },
    {
      "id": "44759beb-04e0-4524-898b-5ba007a80e10",
      "title": "RSoC: Porting Redox to AArch64–0x01",
      "content_text": "All excited. A first calendar entry to describe my attempt on arm64 support in Redox OS. Specifically, looking into the Raspberry Pi2/3b/3+(all of them having a Cortex-A53 ARMv8 64-bit microprocessor, although for all my experiments I am going to use the Raspberry Pi 3b.",
      "url": "https://medium.com/@wizofe/rsoc-porting-redox-to-aarch64-0x01-3dee87644c97",
      "date_published": "2018-06-26T17:26:31.958+00:00",
      "author": {
        "name": "ioannis valasakis",
        "url": "https://medium.com/@wizofe"
      },
      "tags": [
        "Operating Systems",
        "Embedded"
      ]
    },
    {
      "id": "989d2bb2-c78b-4844-92ab-45509164c182",
      "title": "Zapper: A Very Fast Templating Engine",
      "content_text": "Thirty times faster than Handlebars, half the features! I am introducing a new templating engine for Rust that is designed to be robust and very fast! Why Zapper? Runtime templating is amazing, since you can reload templates on the fly or even allow users to provide their own templates, yet runtime templating engines are rarely fast. Templates that are statically compiled into your application can be super fast, but are completely inflexible. Recompiling and restarting your application just to change a template is especially boring. Zapper combines the flexibility of runtime templating with great performance!",
      "url": "https://ceres1.space/posts/zapper/",
      "date_published": "2018-06-25T19:28:22-07:00",
      "author": {
        "name": "Josh Leverette",
        "url": "https://ceres1.space/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "0a781f91-aca4-47ac-81d4-f9f606f33d0f",
      "title": "A Rusty Go at Channels",
      "content_text": "Channels Channels are a useful concurrency primitive that enable separate processes to safely communicate without the need for explicit synchronization. The term processes is used here to loosely describe independent threads of execution within a program. This can be an OS level thread or a runtime level thread. Channels can be seen as a pipe to connect these processes and allow them to share memory with one another. For example a program could spawn any number of processes along with a channel to transmit results that it gathers.",
      "url": "https://gsquire.github.io/static/post/a-rusty-go-at-channels/",
      "date_published": "2018-06-24T10:44:31-07:00",
      "author": {
        "name": "Garrett Squire",
        "url": "https://gsquire.github.io/static/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "fa4c6fb5-3c9e-4831-86b1-3585c08398de",
      "title": "Programming Servo: The script event-loop",
      "content_text": "One thing I have come to appreciate over time in the design of Servo, is the concurrency story. Basically, it’s pretty much all done using channels(and their multi-process counterpart).\n\nWhat is so great about channels vs shared mutable state? One thing is, it makes it easier to reason about how various threads will synchronize their behavior as they go on about their business.\n\nThe way it’s done in Servo is by combining event-loops with multi-threading/processing. What does that mean?",
      "url": "https://medium.com/@polyglot_factotum/programming-servo-the-script-event-loop-be687b985b3e",
      "date_published": "2018-06-28T05:17:48.726+00:00",
      "author": {
        "name": "Gregory Terzian",
        "url": "https://medium.com/@polyglot_factotum"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "638f5073-3504-43de-af0b-dbce4b5ae6c6",
      "title": "Failure. Or: why Rust is probably the best programming language ever created",
      "content_text": "This post is two stories. One is about accepting and recognising personal failure, reflecting and growing from it; the other is about an incredibly and seemingly endlessly powerful programming language, called Rust.",
      "url": "https://spacekookie.de/blog/failure-or-why-rust-is-probably-the-best-programming-language-ever-created/",
      "date_published": "2018-03-11T00:00:00+00:00",
      "author": {
        "name": "Katharina Fey",
        "url": "https://spacekookie.de/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e9ac81fa-8018-4bb1-91a2-cfd0b705f780",
      "title": "Why choose Rust?",
      "content_text": "Many of the candidates we interview for a position at PassFort are intrigued by the fact that we use Rust, a language which is only three years old (since its 1.0 release).\n\nDespite its relatively young age, Rust has been voted the “most loved” language in the StackOverflow developer survey every one of those three years - an impressive feat!\n\nHowever, it’s not enough for a language to be well liked: the programming ecosystem changes rapidly, and many of these developers are rightly afraid to jump blindly onto the latest bandwagon. We chose Rust not because it is popular, but because we believe it is the best tool for the job we have to do, and I hope to explain that reasoning now.",
      "url": "https://blog.passfort.com/why-choose-rust/",
      "date_published": "2018-06-26T16:00:00+00:00",
      "author": {
        "name": "PassFort",
        "url": "https://blog.passfort.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "faf1a345-9eaf-4d00-a7f7-9fa3afaa51ac",
      "title": "Better HTTP Upgrades with hyper",
      "content_text": "Better HTTP Upgrades with hyper It’s been possible to handle HTTP Upgrades (like Websockets) in hyper if you made use of the low-level APIs in the server and client, but it wasn’t especially nice to...",
      "url": "http://seanmonstar.com/post/175280388657/better-http-upgrades-with-hyper",
      "date_published": "2018-06-26T00:00:00+00:00",
      "author": {
        "name": "Sean McArthur",
        "url": "http://seanmonstar.com/"
      },
      "tags": [
        "Web and Network Services",
        "Crates"
      ]
    },
    {
      "id": "09393d03-bb17-4f1e-8d5a-5dc8338ff513",
      "title": "Nannou open source creative coding framework",
      "content_text": "Nannou is an open source creative coding framework built in Rust for artists, hackers, designers and devs to express themselves with simple, fast, reliable, portable code.",
      "url": "http://nannou.cc/news/hello-nannou/",
      "date_published": "2018-06-14T07:24:05+00:00",
      "author": {
        "name": "Mitch, Josh, Keenan & Tom",
        "url": "http://nannou.cc/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "f6f626f4-47ff-427c-8d44-b63c457bed46",
      "title": "devtop: Command line parser",
      "content_text": "As operator I found that existing tooling fails with large number of unusual devices. If you have server with >100 virtual machines, and each virtual machines have one or more additional disk and a few network interfaces, it’s hard to find which VM cause stress on the server. Normal atop simply couldn’t cope with hundreds of tap/tun interfaces, multitude of block devices, etc. When I found that I have no proper tooling (as an operator) I wrote a shabby tools to do my job: they are calling blktop and ifstop. Both were written dirty and fast, and they does not follow the usual Python conventions (but they work as standalone binaries). They do their job, and normally I would say that’s enough. But those utilities are simple and have no big complications under the hood, so they are perfect candidates for rewriting in Rust for the sake of writing in Rust (I’m learning it!). I decide to combine them into a single utility: devtop, which I want to develop properly, according to Rust conventions, and through all aspects of packaging.",
      "url": "https://medium.com/journey-to-rust/devtop-command-line-parser-f08b72b02bea",
      "date_published": "2018-06-24T14:21:28.810+00:00",
      "author": {
        "name": "George Shuklin",
        "url": "https://medium.com/@george.shuklin"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "0e7e0d63-d08d-4b38-812b-d67b5b7f9d43",
      "title": "Sustainability",
      "content_text": "I’m at a fork again: my FOSS project responsibilities have grown so much that they encroach on other parts of my life. This includes time I should spend with company, clients and personal live. It leaves me with two options: shed many of my projects (as mxsash does) or find ways of making this more sustainable. Retreating would also mean that on the surviving projects, others would have to cover the resulting gap, often with less skills or experience.",
      "url": "https://yakshav.es/sustainability/",
      "date_published": "2018-06-26T00:00:00+00:00",
      "author": {
        "name": "Florian Gilcher",
        "url": "http://yakshav.es/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "ced93c25-32fb-4e74-a5e4-5fb7cd60e8ee",
      "title": "Building an Event Sourcing Crate for Rust",
      "content_text": "In one of my recent blog posts, I talked about Event Sourcing with Aggregates in Rust. In that post, I was just beginning to explore how the Rust language and its strongly typed native data structures would allow me to express event sourcing concepts and primitives. I have now created an initial version of an Event Sourcing crate that you can explore on crates.io",
      "url": "https://medium.com/@KevinHoffman/building-an-event-sourcing-crate-for-rust-2c4294eea165",
      "date_published": "2018-06-25T13:30:42.993+00:00",
      "author": {
        "name": "Kevin Hoffman",
        "url": "https://medium.com/@KevinHoffman"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "e063329a-32df-4f01-92b0-38d5999f9a6e",
      "title": "Rust Thermometer – Part 2",
      "content_text": "Thermometer adventure continuous with some progress over the last weekend. Little bit of refactoring, rewiring, X.org, matchbox, Piston, ... and some ugly (but working!) UI :)",
      "url": "https://www.robertvojta.com/rust-thermometer-part-2/",
      "date_published": "2018-06-25T13:51:53+00:00",
      "author": {
        "name": "Robert Vojta",
        "url": "https://www.robertvojta.com/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "645c96b0-5f66-4c4d-a8ee-d145298bc63d",
      "title": "Project Ice Puzzle",
      "content_text": "This game was coded in Rust and is playable in web browsers by means of WebAssembly, WebGL and Howler.js. The software I developed is partly open source in the form of Gate, which is the Rust library that powers this game and can power other similar games. Special thanks to the tools I used to create assets: Gimp, FL Studio and BFXR.",
      "url": "http://www.matthewmichelotti.com/games/project_ice_puzzle/",
      "date_published": "2018-06-25T00:00:00+00:00",
      "author": {
        "name": "Matthew Michelotti",
        "url": "http://www.matthewmichelotti.com/"
      },
      "tags": [
        "Web and Network Services",
        "Games and Graphics"
      ]
    },
    {
      "id": "33738eab-7a95-4e28-b819-f22f8362100e",
      "title": "Our Vision for Rust and WebAssembly",
      "content_text": "Rust and WebAssembly can combine in many delightful ways. To consolidate our efforts and have the largest, most-positive impact we can, the Rust and WebAssembly domain working group is focusing on one vision:\n\nSurgically inserting Rust compiled to WebAssembly should be the best choice for speeding up the most performance-sensitive JavaScript code paths. Do not throw away your existing code base, because Rust plays well with others. Regardless of whether you are a Rust or Web developer, your natural workflow shouldn’t change because Rust compiled to wasm integrates seamlessly into your preferred tools.\n\nThis blog post will expand on these aspirations and describe where we stand in relation to them right now. In a series of follow up posts, we will talk about the next steps for each major component of the Rust and WebAssembly ecosystem.",
      "url": "https://rustwasm.github.io/2018/06/25/vision-for-rust-and-wasm.html",
      "date_published": "2018-06-25T00:00:00+00:00",
      "author": {
        "name": "rustwasm",
        "url": "https://rustwasm.github.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "34e39003-edb1-4232-ad2a-aae9d4868d81",
      "title": "Compiler fuzzing, part 1",
      "content_text": "Much has been written about fuzzing compilers already, but there is not a lot that I could find about fuzzing compilers using more modern fuzzing techniques where coverage information is fed back into the fuzzer to find more bugs.\n\nIf you know me at all, you know I'll throw anything I can get my hands on at AFL. So I tried gcc. (And clang, and rustc -- but more about Rust in a later post.)",
      "url": "http://www.vegardno.net/2018/06/compiler-fuzzing.html",
      "date_published": "2018-06-24T15:02:00+02:00",
      "author": {
        "name": "Vegard",
        "url": "http://www.blogger.com/profile/04821963505711884515"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "03d374fc-9500-42d8-8515-7f98447fd62a",
      "title": "Making Arc more atomic",
      "content_text": "This is a story of a tiny feature I was missing in Rust… so I created it (partly because I like the feature, because it felt wrong for Rust not to have it, but mostly for the practice and fun of beating a hard and interesting problem). You can read the story if you are interested about the behind the scenes, about the feature itself, how to use it or just for fun ☺.",
      "url": "https://vorner.github.io/2018/06/24/arc-more-atomic.html",
      "date_published": "2018-06-24T00:00:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "81e1a990-ce97-4ab6-a943-720330b5db6e",
      "title": "Oxy - A Security Focused Remote Access Tool",
      "content_text": "It's like SSH, but more secure, and with cool modern features. It is not an implementation of SSH, it is a new, modern protocol.",
      "url": "https://oxy-secure.app/",
      "date_published": "2018-06-24T23:58:43+10:00",
      "author": {
        "name": "Jenna Magius",
        "url": "https://oxy-secure.app/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "afc3d2f1-e848-4c25-af60-89cf7209b3ba",
      "title": "Writing Python Extensions In Rust Using PyO3",
      "content_text": "I've been writing some code in Rust recently, and I thought it would be cool if I could take some of this Rust code and provide it as a native extension that I can call from Python. It turns out there are some amazing tools like PyO3 that make it easy to write fully featured Python extensions in Rust, with considerably less effort than writing a CPython extension manually.\n\nTo test out PyO3 I wrote a small Python extension in Rust, and I thought I would share some of the tips and tricks I encountered in getting this going. This post aims to serve as a quick tutorial showing how to write extensions in Rust, talking about why you might want to use something more powerful than just exposing a C library called using CFFI, and how PyO3 lets you write Python aware extensions in Rust. ",
      "url": "https://www.benfrederickson.com/writing-python-extensions-in-rust-using-pyo3/",
      "date_published": "2018-06-21T00:00:00-07:00",
      "author": {
        "name": "Ben Frederickson",
        "url": "https://www.benfrederickson.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "698090f0-fa77-43b5-aaed-dcd2b71d3c39",
      "title": "Rust 2018: an early preview",
      "content_text": "The Rust teams having been working hard to implement features of the 2018 edition. Today we have reached an important milestone: we are announcing that we have an alpha-quality preview of the 2018 edition ready for testing and feedback.\n\nThe preview presents a great opportunity for those of you using the stable channel to switch to nightly and try out how it feels to code in the new edition, both to help us fix bugs and to provide feedback – positive and negative – on features. Unfortunately, today’s nightly doesn’t work due to infrastructure issues, so you’ll need to run rustup install nightly-2018-06-20 in order to get a nightly that’ll work. If you’re already on the nightly channel, it’s likely that there’s no need to update the compiler.",
      "url": "https://internals.rust-lang.org/t/rust-2018-an-early-preview/7776",
      "date_published": "2018-06-23T08:19:19+10:00",
      "author": {
        "name": "Rust Team Members",
        "url": "https://internals.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "85a6b729-6bb3-4dc0-9a15-80ba9ff44f68",
      "title": "Musing About Communities Size And Activity",
      "content_text": "I wanted to take a very quick peak at Rust. It's very different from our previous cases, no application or frameworks in the traditional sense but a language. It seems very popular toward developers using it, I'm personally interested in it hence why it is in that post.",
      "url": "https://ervin.ipsquad.net/2018/06/22/musing-about-communities-size-and-activity/",
      "date_published": "2018-06-22T19:36:00+02:00",
      "author": {
        "name": "Kevin Ottens",
        "url": "https://ervin.ipsquad.net/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "295dac4f-f095-4d04-b6ee-a6a2870cc7fb",
      "title": "Rust review: The ecosystem",
      "content_text": "In this part of the review, I would like to focus on Rust’s ecosystem: in other words, how Rust plays with other parts of a functioning system and how Rust’s standard library vs. external libraries interact with each other. There are a lot of pieces to cover in these areas and they have left me with mixed feelings. Let’s look at some.",
      "url": "http://julio.meroh.net/2018/06/rust-review-ecosystem.html",
      "date_published": "2018-06-22T09:00:00-04:00",
      "author": {
        "name": "Julio Merino",
        "url": "http://julio.meroh.net/series.html#Rust%20review"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "b93a3070-a495-46de-a9e1-a1c650cafec3",
      "title": "Finda Websocket Architecture",
      "content_text": "Finda lets you search and instantly switch between tabs in browsers like Firefox and Chrome and editors like Sublime Text and Visual Studio Code. It does this by communicating with these programs over local websocket connections. This article describes the design tradeoffs of this system, focusing on Rust implementation details that may be helpful to others building similar systems.",
      "url": "https://keminglabs.com/blog/finda-websocket-architecture/",
      "date_published": "2018-06-20T00:00:00+00:00",
      "author": {
        "name": "Kevin J. Lynagh",
        "url": "https://keminglabs.com/blog/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "6c71975e-3550-410a-99e7-2ee9635fb0e6",
      "title": "Generic associated types in iterators",
      "content_text": "In this article, I want to explain the term Generic Associated Types through a concrete example. I noticed that people (especially in video games development) need some tools to iterate in various manners mutably, efficiently and safely. I tried to write some convenient iterators over vectors and slices that solve those problems, but finally, I understood that some tools cannot be written with std::iter::Iterator. Doing so led me to the comprehension of generic associated types that I will abbreviate as GATs in this article. I will explain here what GATs are and why they are needed.",
      "url": "https://boiethios.gitlab.io/blog/2018-06-21_GATs_iterators.html",
      "date_published": "2018-06-21T00:00:00+00:00",
      "author": {
        "name": "Boiethios",
        "url": "https://boiethios.gitlab.io/blog/index.html"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "41f94ae9-ac3a-42fe-bc78-fbc6dab42d85",
      "title": "Announcing Rust 1.27",
      "content_text": "This release has two big language features that people have been waiting for: SIMD, and dyn Trait. Additionally there is support for searching the Rust books, and a new book about rustc.",
      "url": "https://blog.rust-lang.org/2018/06/21/Rust-1.27.html",
      "date_published": "2018-06-21T00:00:00+00:00",
      "author": {
        "name": "The Rust Core Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d93b968d-f8fb-4ba9-b7eb-1879ec63807d",
      "title": "Rust Thermometer – Part 1",
      "content_text": "I’ve decided to build a thermometer from scratch. I know, I can buy it, but it’s not fun. I found it as a perfect occasion to please my wife (she wants it) and to try new things. What new things? Mainly resin.io and resinOS.",
      "url": "https://www.robertvojta.com/rust-thermometer-part-1/",
      "date_published": "2018-06-20T09:23:29+00:00",
      "author": {
        "name": "Robert Vojta",
        "url": "https://www.robertvojta.com/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "fbc12ece-4e2b-4ee2-b3fb-e55fb54b508e",
      "title": "Using Rust Code in a C/C++ Project with CMake",
      "content_text": "I am currently working on Wayk Now written in C for the most part. We recently started writing new code for it in Rust which I’m super excited about.\n\n As we needed a way to integrate this code in our CMake build1, we wrote a set of modules for CMake ",
      "url": "https://blog.devolutions.net/2018/06/insider-series-using-rust-code-in-a-cc-project-with-cmake",
      "date_published": "2018-06-19T12:23:36+00:00",
      "author": {
        "name": "Sebastien Duquette",
        "url": "https://blog.devolutions.net/author/sebastien-duquette"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "c883f036-9e31-44b2-995a-24b575c524b8",
      "title": "From ActiveRecord to Diesel",
      "content_text": "Recently I needed to run a simple SQL query on a Postgres database and produce a one-off report. I could have done this in 5 minutes using Ruby and ActiveRecord. Instead, I decided to use Rust and Diesel – a language and a tool I hadn’t used before. Instead of 5 minutes it took several hours, but I learned something new. I’ve written up the steps I took here today. Get your mind’s exercise for today and read on to learn how to execute a SQL statement using Rust.",
      "url": "http://patshaughnessy.net/2018/6/9/from-activerecord-to-diesel",
      "date_published": "2018-06-09T03:00:00+00:00",
      "author": {
        "name": "Pat Shaughnessy",
        "url": "http://patshaughnessy.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "87c1e68b-e1e6-44d5-be4b-212eb2bdc88f",
      "title": "Streaming gRPC with Rust",
      "content_text": "Lately I’ve been working on a side project that involves aggregating the indexes of media libraries and allowing one library to “lend” a file to another. For example, I might use this system if I want my home tower to “lend” a file to my laptop before I get on a plane. I’ll be committing my work-in-progress on this project to github shortly (just want to get an MVP working first and do some refactoring), but I thought I would take a step back for a moment and share my thoughts on one aspect of this project: gRPC. In particular: gRPC streaming.",
      "url": "https://medium.com/@KevinHoffman/streaming-grpc-with-rust-d978fece5ef6",
      "date_published": "2018-06-20T17:43:39.699+00:00",
      "author": {
        "name": "Kevin Hoffman",
        "url": "https://medium.com/@KevinHoffman"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "220b4649-e853-4f07-9773-e4ae3d286a4f",
      "title": "Proposal for a staged RFC process",
      "content_text": "I consider Rust’s RFC process one of our great accomplishments, but it’s no secret that it has a few flaws. At its best, the RFC offers an opportunity for collaborative design that is really exciting to be a part of. At its worst, it can devolve into bickering without any real motion towards consensus. If you’ve not done so already, I strongly recommend reading aturon’s excellent blog posts on this topic.\n\nThe RFC process has also evolved somewhat organically over time. What began as “just open a pull request on GitHub” has moved into a process with a number of formal and informal stages (described below). I think it’s a good time for us to take a step back and see if we can refine those stages into something that works better for everyone.",
      "url": "http://smallcultfollowing.com/babysteps/blog/2018/06/20/proposal-for-a-staged-rfc-process/",
      "date_published": "2018-06-20T00:00:00-04:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "31acdf03-3f59-4102-81ba-edafd6f2cfad",
      "title": "Fast and Simple Rendering in Rust using Proc Macros",
      "content_text": "I’ve been working on a project called Thruster recently, and needed a way that a developer could reasonably use templates. Thruster is a middleware based web server written in Rust (get it, th-rust-er? I’m working on my tight 5 for amateur night at The Apollo,) and as such, I needed a way to load HTML templates and insert variables into them in a performant way. Rather than poking around the numerous existing libraries and choosing one made by someone I don’t know — stranger danger! — I decided to make it myself. This article is about that journey, the unbelievably thrilling adventures of writing my first proc_macro_derive in Rust.",
      "url": "https://medium.com/@MertzAlertz/fast-and-simple-rendering-in-rust-using-proc-macros-f0d919eb6475",
      "date_published": "2018-06-19T13:22:54.045+00:00",
      "author": {
        "name": "Pete Mertz",
        "url": "https://medium.com/@MertzAlertz"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "c1d20548-b510-4452-9d30-8088b65f626a",
      "title": "Extreme benchmark feedback using Gitlab CI",
      "content_text": "I am quite notorious for exploiting Gitlab’s CI. Ever since I started playing with it at the start of 2016, I tended to make things worse.",
      "url": "https://www.rubdos.be/linux/gitlab/automation/benchmarks/rust/2018/06/19/extreme-benchmark-feedback.html",
      "date_published": "2018-06-19T13:18:00+00:00",
      "author": {
        "name": "Ruben De Smet",
        "url": "https://www.rubdos.be/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "495d9d83-2572-43cb-8f9d-c5c404ab83fe",
      "title": "Optimising path tracing: the last 10%",
      "content_text": "In my last post on optimising my Rust path tracer with SIMD I had got withing 10% of my performance target, that is Aras’s C++ SSE4.1 path tracer. From profiling I had determined that the main differences were MSVC using SSE versions of sinf and cosf and differences between Rayon and enkiTS thread pools. The first thing I tried was implement an SSE2 version of sin_cos based off of Julien Pommier’s code that I found via a bit of googling. This was enough to get my SSE4.1 implementation to match the performance of Aras’s SSE4.1 code. I had a slight advantage in that I just call sin_cos as a single function versus separate sin and cos functions, but meh, I’m calling my performance target reached.\n\nThe other part of this post is about Rust’s runtime and compile time CPU feature detection and some wrong turns I took along the way.",
      "url": "https://bitshifter.github.io/blog/2018/06/20/the-last-10-percent/",
      "date_published": "2018-06-20T00:00:00+00:00",
      "author": {
        "name": "bitshifter",
        "url": "https://bitshifter.github.io/"
      },
      "tags": [
        "Performance",
        "Games and Graphics"
      ]
    },
    {
      "id": "edd88db5-3f05-4171-9159-de17a3a4db8a",
      "title": "Let's Talk About Vector Graphics (In Rust)",
      "content_text": "I gave a talk about lyon at RustFest Paris. This post is the introduction of the talk, wherein I introduce vector graphics and try to get the audience somewhat excited about it. Things will get technical in the follow-up posts.",
      "url": "https://nical.github.io/posts/rustfest-paris-01.html",
      "date_published": "2018-06-18T00:00:00+02:00",
      "author": {
        "name": "Nical",
        "url": "https://nical.github.io/index.html"
      },
      "tags": [
        "Crates",
        "Games and Graphics"
      ]
    },
    {
      "id": "0122445e-8a19-4a52-bcd6-4ee7e55feb7c",
      "title": "Rust review: The book",
      "content_text": "“The Rust Programming Language” is one of the free books that the community has put together to teach the language. The book does a good job in general, but there are some things that could be better. Let’s cover these, but first, some background.",
      "url": "http://julio.meroh.net/2018/06/rust-review-book.html",
      "date_published": "2018-06-19T09:00:00-04:00",
      "author": {
        "name": "Julio Merino",
        "url": "http://julio.meroh.net/series.html#Rust%20review"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e11a6e53-3315-44c0-a23f-7f0217019c55",
      "title": "Writing an OS in Rust: Double Faults",
      "content_text": "In this post we explore double faults in detail. We also set up an Interrupt Stack Table to catch double faults on a separate kernel stack. This way, we can completely prevent triple faults, even on kernel stack overflow.",
      "url": "https://os.phil-opp.com/double-fault-exceptions/",
      "date_published": "2018-06-18T00:00:00+00:00",
      "author": {
        "name": "Philipp Oppermann",
        "url": "https://os.phil-opp.com/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "ff081914-cb16-4004-bc20-53e494477b8c",
      "title": "Building better compression together with DivANS",
      "content_text": "Compressing your files is a good way to save space on your hard drive. At Dropbox’s scale, it’s not just a good idea; it is essential. Even a 1% improvement in compression efficiency can make a huge difference. That’s why we conduct research into lossless compression algorithms that are highly tuned for certain classes of files and storage, like Lepton for jpeg images, and Pied-Piper-esque lossless video encoding. For other file types, Dropbox currently uses the zlib compression format, which saves almost 8% of disk storage.\n\nWe introduce DivANS, our latest open-source contribution to compression, in this blog post.",
      "url": "https://blogs.dropbox.com/tech/2018/06/building-better-compression-together-with-divans/",
      "date_published": "2018-06-19T16:00:24+00:00",
      "author": {
        "name": "Daniel Reiter Horn and Jongmin Baek",
        "url": "https://blogs.dropbox.com/tech/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "5d48fc36-98e0-46ee-8c2d-d2d586770ab9",
      "title": "Increasing Rust's Reach 2018 Prticipants",
      "content_text": "This year's class of Increasing Rust's Reach participants span 9 timezones and 11 countries. 64% are non-native English speakers, and the group, as a whole, represents fluency in 14+ languages. We're super excited to welcome them to the Rust community!",
      "url": "http://reach.rust-lang.org/2018/participants",
      "date_published": "2018-06-19T00:00:00+00:00",
      "author": {
        "name": "The Rust Community Team",
        "url": "http://reach.rust-lang.org/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "fb7909fb-5c7d-4360-a9fe-4620e04262d8",
      "title": "Running Rust and FreeRTOS on the PADI IoT Stamp",
      "content_text": "In this article we’ll explore a better way to build and test programs for microcontroller platforms. Specifically we’ll look at Rust, FreeRTOS and Visual Studio Code. And how I made them run on the PADI IoT Stamp.",
      "url": "https://medium.com/@ly.lee/running-rust-and-freertos-on-the-padi-iot-stamp-fb36c5ef4844",
      "date_published": "2018-06-18T05:45:28.579+00:00",
      "author": {
        "name": "Lup Yuen Lee",
        "url": "https://medium.com/@ly.lee"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "e75667af-3d07-40cb-a610-4c7a6786064b",
      "title": "Writing an OS in Rust: CPU Exceptions",
      "content_text": "In this post, we start exploring CPU exceptions. Exceptions occur in various erroneous situations, for example when accessing an invalid memory address or when dividing by zero. To catch them, we have to set up an interrupt descriptor table that provides handler functions. At the end of this post, our kernel will be able to catch breakpoint exceptions and to resume normal execution afterwards.",
      "url": "https://os.phil-opp.com/cpu-exceptions/",
      "date_published": "2018-06-17T00:00:00+00:00",
      "author": {
        "name": "Philipp Oppermann",
        "url": "https://os.phil-opp.com/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "b5fe7539-f996-4c57-9fc1-5fa06b6a68b2",
      "title": "Rust review: The match keyword",
      "content_text": "A commonly-acclaimed feature of Rust is its match keyword: a “conditional on steroids”. match lets you take the value of an expression and compare it against a bunch of values—or, more generally, patterns.\n\nAs you write and read Rust, you will notice that this keyword is used everywhere because it’s the way to access certain types, like Option values or error codes.",
      "url": "http://julio.meroh.net/2018/06/rust-review-match-keyword.html",
      "date_published": "2018-06-15T09:00:00-04:00",
      "author": {
        "name": "Julio Merino",
        "url": "http://julio.meroh.net/series.html#Rust%20review"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "67f2f6f8-75f9-458c-969f-4bcbe9c0223f",
      "title": "Rust + Diesel + GitLab + CI",
      "content_text": "It is very straightforward to get Rust projects to build within a CI environment. This post is going to take that build process one small step further, we’re going to build a Rust project that uses the Diesel ORM. This adds a step of complexity since to compile a Diesel project you need to have a postgresql database accessible if you’re using the infer_schema!() macro.",
      "url": "https://noyez.gitlab.io/post/2018-06-15-rust-plus-diesel-plus-gitlab/",
      "date_published": "2018-06-18T00:00:00+00:00",
      "author": {
        "name": "noyez",
        "url": "https://noyez.gitlab.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4548e0ef-697b-414c-8bf5-9a63a707bafb",
      "title": "A Trick For Test Maintenance",
      "content_text": "This is a post about an interesting testing technique which feels like it should be well known. However, I haven’t seen it mentioned anywhere. I don’t even have a good name for it, I’ve semi-discovered it in the wild. If you know how this thing is called, please leave a comment!",
      "url": "https://matklad.github.io/2018/06/18/a-trick-for-test-maintenance.html",
      "date_published": "2018-06-18T15:00:16+00:00",
      "author": {
        "name": "Aleksey Kladov",
        "url": "https://matklad.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "c81413e6-7dc3-4a06-95dc-846a2cfa268a",
      "title": "Listening and trust, part 3",
      "content_text": "In this this post in the listening and trust series, I’m going to talk through one of the most intense discussions the Rust community has had: the module system changes that were part of last year’s ergonomics initiative.",
      "url": "http://aturon.github.io/2018/06/18/listening-part-3/",
      "date_published": "2018-06-18T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "4ebce195-067c-45fa-be45-7c589426953b",
      "title": "Writing a Web API Client in Rust (Part 3)",
      "content_text": "The 3rd of a multi-part series where we build a small REST client for the Marvel Comics Web API using Rust. This time we focus on how to use the hyper and futures crates to make HTTP requests to a Web API, then use serde to parse JSON data from the response.",
      "url": "https://theomn.com/rust-web-api-client-part-03/",
      "date_published": "2018-06-17T00:00:00+00:00",
      "author": {
        "name": "Owen Nelson",
        "url": "https://theomn.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "f12b593d-9a94-4571-8fe8-08ef5059d68f",
      "title": "C2Rust Demonstration",
      "content_text": "The C2Rust project is being developed by Galois and Immunant. This tool is able to translate most C modules into semantically equivalent Rust code. These modules are intended to be compiled in isolation in order to produce compatible object files. We are developing several tools that help transform the initial Rust sources into idiomatic Rust. ",
      "url": "https://c2rust.com/",
      "date_published": "2018-06-17T00:00:00+00:00",
      "author": {
        "name": "Galois and Immunant",
        "url": "https://c2rust.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "36eccf86-2b85-4ffc-b7e7-7af422cb10ac",
      "title": "Conspiracies, Dissemination, and REST APIs",
      "content_text": "Welcome to the third post in a series where I share my experience learning Rust. I’m building out a conspiracy theories API to help me get more familiar with Rust and have a little fun. Since I am new to Rust, I welcome all feedback, especially from developers who have been using Rust for quite some time. Leave a comment below or send your feedback via Twitter. Now it’s time to draw the blackout curtains, put on your foil-lined hat on and start serving up conspiracies from a REST API.",
      "url": "https://medium.com/@rippinrobr_66849/3-conspiracies-dissemination-and-rest-apis-41858f8d9850",
      "date_published": "2018-06-14T12:28:03.863+00:00",
      "author": {
        "name": "Rob Rowe",
        "url": "https://medium.com/@rippinrobr_66849"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "48c70c0e-5ce7-415b-8264-6e7a6dd02a8f",
      "title": "My Emacs Rust IDE",
      "content_text": "In this post, I will walk you through configuring an EMACS Rust IDE to get syntax highlighting and code completion for the Rust programming language.",
      "url": "http://www.admintome.com/blog/my-emacs-rust-ide/",
      "date_published": "2018-06-16T01:26:03+00:00",
      "author": {
        "name": "Bill Ward",
        "url": "http://www.admintome.com/blog/author/stackadmin/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "41722089-9cfe-413c-aa51-02c244fb4d67",
      "title": "Rust Is Not So Hairy",
      "content_text": "TL;DR I decided to learn Rust on my nth attempt. Writing small programs helped me get stuff done. I converted a Java gRPC service into Rust for comparison I'm super-impressed with Rust's low CPU and memory footprint.",
      "url": "https://nevi.me/rust-is-not-so-hairy/",
      "date_published": "2018-06-16T14:05:48+00:00",
      "author": {
        "name": "Neville",
        "url": "https://nevi.me/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d8b1216b-bc74-43c1-9ce3-958e0e2b4154",
      "title": "Writing an OS in Rust: Integration Tests",
      "content_text": "In this post we complete the testing picture by implementing a basic integration test framework, which allows us to run tests on the target system. The idea is to run tests inside QEMU and report the results back to the host through the serial port.",
      "url": "https://os.phil-opp.com/integration-tests/",
      "date_published": "2018-06-15T00:00:00+00:00",
      "author": {
        "name": "Philipp Oppermann",
        "url": "https://os.phil-opp.com/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "977aa3cd-7136-4d69-84ac-0c15c6396ae4",
      "title": "Dynamic Casting for Traits",
      "content_text": "In Rust, traits are a powerful tool to use polymorphism, both static and dynamic. I’m going to skip the basics about the traits and just link to another blog post with a good explanation about static and dynamic dispatch in Rust: Traits and Trait Objects in Rust.\n\nInstead, I would like to do an experiment of making dynamic dispatch even more dynamic! Like in Java1.",
      "url": "http://idubrov.name/rust/2018/06/16/dynamic-casting-traits.html",
      "date_published": "2018-06-16T00:00:00+00:00",
      "author": {
        "name": "Ivan Dubrov",
        "url": "http://idubrov.name/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c55b518c-125b-4fb9-82c5-08c3367bb6c6",
      "title": "MIR-based borrow check (NLL) status update",
      "content_text": "I’ve been getting a lot of questions about the status of “Non-lexical lifetimes” (NLL) – or, as I prefer to call it these days, the MIR-based borrow checker – so I wanted to post a status update.\n\nThe single most important fact is that the MIR-based borrow check is feature complete and available on nightly. What this means is that the behavior of #![feature(nll)] is roughly what we intend to ship for “version 1”, except that (a) the performance needs work and (b) we are still improving the diagnostics.",
      "url": "http://smallcultfollowing.com/babysteps/blog/2018/06/15/mir-based-borrow-check-nll-status-update/",
      "date_published": "2018-06-15T00:00:00-07:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "79d23f1b-0e7b-4d75-a061-9e5b9930424b",
      "title": "From Go to Rust - JSON and YAML",
      "content_text": "One of Go's big selling points for me was its novel approach to JSON encoding. Learning about Rust's encoding has made me even more excited. In this post, we'll start with Go's JSON encoder, and then see how Rust does encoding. And we'll even through in some YAML!",
      "url": "http://technosophos.com/2018/06/12/from-go-to-rust-json-and-yaml.html",
      "date_published": "2018-06-12T00:00:00+00:00",
      "author": {
        "name": "Matt Butcher",
        "url": "http://technosophos.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e62fbda5-e357-4870-a483-9dcf833b31ad",
      "title": "Running Rust on the GPU with Accel",
      "content_text": "For the past month or so, I’ve been working on a follow-up to my series on Writing a Raytracer in Rust. This time around, I’ll be talking about writing a GPU-accelerated Path Tracer. As always, I’m writing it in Rust - including the GPU kernel code. Compiling Rust for GPUs at this point is difficult and error-prone, so I thought it would be good to start with some documentation on that aspect of the problem before diving into path tracing.",
      "url": "https://bheisler.github.io/post/rust-on-the-gpu-with-accel/",
      "date_published": "2018-06-14T19:00:00-06:00",
      "author": {
        "name": "Brook Heisler",
        "url": "https://bheisler.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "4749d178-b87d-4946-b8e2-0a6d17d7495e",
      "title": "Automatic Type Coercions with Procedural Macros in Rust",
      "content_text": "I briefly demonstrate how to use procedural macros to automatically perform type coercion in Rust, mimicking the behavior of dynamic languages.",
      "url": "http://willcrichton.net/notes/automatic-type-coercions-macros-rust/",
      "date_published": "2018-06-12T00:00:00+00:00",
      "author": {
        "name": "Will Crichton",
        "url": "http://willcrichton.net/notes/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "f6f3b55c-c39c-4366-9de1-ebf3b230ee6c",
      "title": "What do you think are the most interesting/exciting projects using Rust?",
      "content_text": "Last week I tweeted \"What do you think are the most interesting/exciting projects using Rust? (No self-promotion :-) )\". The response was awesome! Jonathan Turner suggested I write up the responses as a blog post, and here we are.",
      "url": "https://www.ncameron.org/blog/interesting_projects/",
      "date_published": "2018-06-13T16:26:29+00:00",
      "author": {
        "name": "Nick Cameron",
        "url": "http://www.ncameron.org/blog/"
      },
      "tags": [
        "Language",
        "Tools and Applications"
      ]
    },
    {
      "id": "2b4b4efe-3a50-4ceb-ac4c-267b708c2ce8",
      "title": "Traits and Trait Objects in Rust",
      "content_text": "I’ve been really confused lately about Rust’s trait objects. Specifically when it comes to questions about the difference between &Trait, Box<Trait>, impl Trait, and dyn Trait.",
      "url": "https://joshleeb.com/posts/rust-traits-and-trait-objects/",
      "date_published": "2018-06-12T00:00:00+00:00",
      "author": {
        "name": "Josh Leeb-du Toit",
        "url": "https://joshleeb.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "8e5085a4-0057-4ed8-81dc-93242e35b6e9",
      "title": "Rust review: Expressions, expressions, expressions",
      "content_text": "Rust resembles a functional language in many ways although it does not claim to be one. In fact, I have been thinking of Rust as a “pragmatic Haskell” or as a “well-balanced mixture between C++ and Haskell”.\n\nOne of the ways the functional aspects show up is via expressions and how pretty much any construct in Rust can be treated as an expression. But before we begin, a little warning: the examples below are, by no means, idiomatic Rust—I just hope they are simple enough to illustrate what I want to show.",
      "url": "http://julio.meroh.net/2018/06/rust-review-expressions.html",
      "date_published": "2018-06-12T09:00:00-04:00",
      "author": {
        "name": "Julio Merino",
        "url": "http://julio.meroh.net/series.html#Rust%20review"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a9263a5d-5853-4f5b-8556-28d18dda0f7d",
      "title": "actix – an actor framework for the Rust programming language",
      "content_text": "The “actor model” is the main primitive that powers the Erlang programming language and its descendant, Elixir. It describes a programming model that simplifies the development of concurrent and multi-threaded applications or even applications that run distributed on multiple machines.\n\nThe complexity of actors is relatively low, and that is because the complexity is usually hidden in the actor frameworks that are used to run these types of primitives in the end. One example of such an actor framework is actix, which we will have a closer look at now.",
      "url": "https://simplabs.com/blog/2018/06/11/actix.html",
      "date_published": "2018-06-11T00:00:00+00:00",
      "author": {
        "name": "Tobias Bieniek",
        "url": "https://simplabs.com/blog/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "afe4d926-caf9-4709-95f0-3bf0249b60e2",
      "title": "Design Guideline Problem Statement",
      "content_text": "There were some heated discussions in Rust community as of late. During that discussions, I argued that some best practices for RFC authors would improve both on the results as well as the discussions and I promised to give it a try.",
      "url": "https://vorner.github.io/2018/06/10/design-guideline-problem-statement.html",
      "date_published": "2018-06-10T00:00:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "27c8b7ed-32ab-4390-8be8-58678541dfb8",
      "title": "Tarpaulin Past Present Future",
      "content_text": "Tarpaulin (or cargo-tarpaulin) is a code coverage tool for Rust. Last year was pretty busy with the launch of the project and the rush of issues as people started to use it so this is just a chance to look at what’s new with version 0.6.0 and what’s planned for the rest of this year.",
      "url": "https://xd009642.github.io/2018/06/11/Tarpaulin-past-present-future.html",
      "date_published": "2018-06-11T00:00:00+00:00",
      "author": {
        "name": "xd009642",
        "url": "https://xd009642.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "70c7595e-f384-40d3-a8c9-9f00466fe5d5",
      "title": "Actix::From(Rocket)",
      "content_text": "I was inspired by Nick’s post to migrate my code from Rocket to Actix. I have also been nagged by recent struggles with the nightly compiler and its compatibility with all the other crates that I use and other the platforms that I use; my code runs on 32⁄64 bit arm and 32⁄64 bit x86. When I started using Rocket around a year ago, the nightly compiler was just as stable as the stable compiler, but things have changed as rust is a growing eco system.\n\nFor me, once the differences below were addressed, porting the code was relatively straightforward. The vast majority of my code remained the same.",
      "url": "https://noyez.gitlab.io/post/2018-06-11-rocket-to-actix/",
      "date_published": "2018-06-11T00:00:00+00:00",
      "author": {
        "name": "noyez",
        "url": "https://noyez.gitlab.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "34b26ba8-daa3-431f-ba53-9c0d9d873459",
      "title": "Where do Rust threads come from?",
      "content_text": "Last week, I wrote a post in which I discussed some of the things that I learned about Rust concurrency. One of the things that I pointed out was that when you spawn a thread within another thread, they both have the main process as their parent.",
      "url": "http://squidarth.com/rc/rust/concurrency/2018/06/09/rust-threads-detach.html",
      "date_published": "2018-06-09T09:00:38-04:00",
      "author": {
        "name": "Sid Shanker",
        "url": "http://www.squidarth.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a07d66f5-dfd3-41d4-b2d8-16bf1b0f4886",
      "title": "Rust Distilled: An Expressive Tower of Languages",
      "content_text": "Rust represents a major advancement in production programming languages because of its success in bridging the gap between high-level application programming and low-level systems programming. At the heart of its design lies a novel approach to ownership that remains highly programmable.\n\nIn this talk, we will describe our ongoing work on designing a formal semantics for Rust that captures how programmers can understand ownership and borrowing without trying to grasp the details of lifetime analysis.",
      "url": "https://arxiv.org/abs/1806.02693",
      "date_published": "2018-06-07T00:00:00+00:00",
      "author": {
        "name": "Aaron Weiss, Daniel Patterson, Amal Ahmed",
        "url": "https://arxiv.org/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "9448ee63-32da-42f1-bd2e-1ef737d9b971",
      "title": "To do a Rust GUI",
      "content_text": "Rust Qt Binding Generator lets you combine Rust code with a Qt1 graphical application. A previous blog shows how to make a simple clock. It’s a good idea to read that post before reading this more advanced post, because in this post we are getting serious.\n\nThis blog post shows how to write a to-do application. The data model is a list of to-do items. The source code for this example is available in the folder examples/todos in the Rust Qt Binding Generator repository.",
      "url": "https://www.vandenoever.info/blog/2018/06/09/to-do-a-rust-gui.html",
      "date_published": "2018-06-09T00:00:00+00:00",
      "author": {
        "name": "Jos van den Oever",
        "url": "https://www.vandenoever.info/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "4ab9c39f-72ed-4b84-a5e7-abe4c594c019",
      "title": "First Impressions of the Rust Programming Language",
      "content_text": "C is almost 50 years old, and C++ is almost 40 years old. While age is usually indicative of mature implementations with decades of optimization under their belts, it also means that the language's feature set is mostly devoid of modern advancements in programming language design. For that reason, you see a great deal of encouragement nowadays to move to newer languages - they're designed with contemporary platforms in mind, rather than working within the limitations of platforms like the PDP-11. Among said \"new languages\" are Zig, Myrddin, Go, Nim, D, Rust.. even languages like Java and Elixir that run on a virtual machine are occasionally suggested as alternatives to the AOT-compiled C and C++.\n\nI have plans to look into the characteristics that distinguish each and every one of these new programming languages, learning them and documenting my first impressions in the form of blog posts. This post is the beginning of that adventure: my first impressions of Rust.",
      "url": "http://jakob.space/blog/post/First+Impressions+of+the+Rust+Programming+Language",
      "date_published": "2018-06-08T13:02:33-05:00",
      "author": {
        "name": "Jakob",
        "url": "http://jakob.space/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "644f8b30-47a3-4da8-b4e9-1b72755d69b0",
      "title": "Rust review: Learning curve",
      "content_text": "Writing Rust code is not restricted to programming gurus—but there is no denying that the learning curve is steeper than that of other languages. Or is it? In this post, I'll try to convince you that the curve does feel steep, but it isn't when taken into perspective.\nLet's first start by stating that learning a language is not the same as learning its syntax. Learning a language involves learning the syntax, of course, but it also involves familiarizing oneself with its common idioms and grabbing a good sense of what the standard libraries provide.",
      "url": "http://julio.meroh.net/2018/06/rust-review-learning-curve.html",
      "date_published": "2018-06-08T09:00:00-04:00",
      "author": {
        "name": "Julio Merino",
        "url": "http://julio.meroh.net/series.html#Rust%20review"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "f98c539d-bf5c-4329-a4b2-bba3c4816350",
      "title": "Integrating QML and Rust: Creating a QMetaObject at Compile Time",
      "content_text": "In this blog post, I would like to present a research project I have been working on: Trying to use QML from Rust, and in general, using a C++ library from Rust. The project is a Rust crate which allows to create QMetaObject at compile time from pure Rust code. It is available here: https://github.com/woboq/qmetaobject-rs",
      "url": "https://woboq.com/blog/qmetaobject-from-rust.html",
      "date_published": "2018-06-07T00:00:00+00:00",
      "author": {
        "name": "Olivier Goffart",
        "url": "https://woboq.com/blog/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "01dd6aee-aa4b-46b9-a4dc-5d2550a96356",
      "title": "Crates.rs — a new, faster crate index website",
      "content_text": "Crates.rs, an alternative opinionated front-end to crates.io:\n\nIt’s fast.\n\nAll readmes are displayed whenever possible, and if there’s no or poor readme, doc comments are shown too.\n\nIt combines information from multiple sources, e.g. byline is a compact amalgamation of Cargo.toml, crates.io, and GitHub contributors, so you get an idea who wrote the code even if authors forgot to keep Cargo.toml up to date.\n\nCrate popularity is displayed as top-N position in its most relevant category, e.g. “#5 in Cryptography”, which is more meaningful than absolute download numbers.\n\nOptional dependencies display which feature or platform they’re for.\n\nVersion history is summarized to help see at a glance whether a crate gets regular updates and how often it has breaking changes.\n\nRecognizes sys crates even if they’re not called -sys and shows when build.rs is used.\n\nCategory pages fit more crates on screen despite looking less cluttered and having easier to read descriptions.\n\nAll categories and their representative crates are right there on the homepage.\n\nSyntax highlighting everywhere, including code blocks.\n\nEverything works without JS and gets indexed by search engines, so I’m hoping the site will help find crates.",
      "url": "https://crates.rs/index",
      "date_published": "2018-06-04T23:27:00+00:00",
      "author": {
        "name": "Kornel",
        "url": "https://kornel.ski/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "6f104d56-9b00-4748-a04f-0c77ec89a1d2",
      "title": "Modern Parser Generator",
      "content_text": "During the last couple of years, I’ve spent a lot of time writing parsers and parser generators, and I want to write down my thoughts about this topic. Specifically, I want to describe some properties of a parser generator that I would enjoy using. Note that this is not an “introduction to parsing” blog post, some prior knowledge is assumed.",
      "url": "https://matklad.github.io/2018/06/06/modern-parser-generator.html",
      "date_published": "2018-06-06T16:03:25+00:00",
      "author": {
        "name": "Aleksey Kladov",
        "url": "https://matklad.github.io/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "49d19c19-5c1c-4a2e-9b5f-fa17c81e2ed3",
      "title": "RSoC: Porting Redox to AArch64 - 0x01",
      "content_text": "A first calendar entry to describe my attempt on ARM64 support in Redox OS. Specifically, looking into the Raspberry Pi2/3(B)/3+ (all of them having a Cortex-A53 ARMv8 64-bit microprocessor, although for all my experiments I am going to use the Raspberry Pi 3(B)).",
      "url": "https://www.redox-os.org/news/rsoc-arm64-0x01/",
      "date_published": "2018-05-30T00:00:00+00:00",
      "author": {
        "name": "wizofe",
        "url": "https://www.redox-os.org/news/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "54270fa0-69d3-4ec1-8aca-c77191e164e5",
      "title": "RSoC: Porting tokio to redox - week 3",
      "content_text": "Last week I ended off stating that the redox netstack might soon switch to an edge-triggered model. Well, I ended up feeling bad about the idea of letting others do my work and decided to stop being lazy and just do it myself.",
      "url": "https://www.redox-os.org/news/rsoc-porting-tokio-3/",
      "date_published": "2018-06-06T00:00:00+00:00",
      "author": {
        "name": "jD91mZM2",
        "url": "https://www.redox-os.org/news/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "d70a58d9-d528-41e3-a91c-605c58465d45",
      "title": "A Rust-based Unikernel",
      "content_text": "Rust is an extremely interesting language for the development of system software. This was the motivation to evaluate Rust for HermitCore and to develop an experimental version of our libOS in Rust. Components like the IP stack and uhyve (our unikernel hypervisor) are still written in C. In addition, the user applications are still compiled by our cross-compiler, which is based on gcc and supports C, C++, Fortran, and Go. The core of the kernel, however, is now written in Rust and published at GitHub. Our experiences so far are really good and we are looking into possibly new Rust activities, e.g., the support for Rust’s userland.",
      "url": "https://hermitcore.org/2018/06/06/A-Rust-based-Unikernel/",
      "date_published": "2018-06-06T00:00:00+00:00",
      "author": {
        "name": "Stefan Lankes",
        "url": "https://hermitcore.org/blog/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "314ba2b8-5ace-4348-b96a-b704c628e2b3",
      "title": "Safe Concurrency with Rust",
      "content_text": "Last week, I started learning Rust, and published a post about the “ownership” system. One of the places where Rust’s ownership system really shines is in threading and concurrency. Kevin and I decided to dig into this more on Friday, and did some work on the dining philosophers problem.\n\nIn this post I’ll be covering what we learned, and how the Rust compiler saves you from some scary concurrency issues.",
      "url": "http://www.squidarth.com/rc/rust/2018/06/04/rust-concurrency.html",
      "date_published": "2018-06-04T09:00:38-04:00",
      "author": {
        "name": "Sid Shanker",
        "url": "http://www.squidarth.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "16518cb2-ca9f-4b67-b4d3-bc9042a23ea2",
      "title": "Sponsor work on Rust!",
      "content_text": "This page is a first attempt at facilitating sponsorship. This is not an officially endorsed list, but it is a list of Rustaceans that I have personally vetted and sponsored, and encourage you to support. Each of them has a long, public history of impactful work in the community.",
      "url": "http://aturon.github.io/sponsor/",
      "date_published": "2018-06-06T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "cebd59fa-c884-49cd-9de7-4da401e26642",
      "title": "Why PhantomData",
      "content_text": "We’re not allowed to have a type parameter that goes unused. If we want to have a type that looks like the one above we have to add a marker to it like so: struct Tagged<T>(usize, PhantomData<T>);",
      "url": "http://troubles.md/posts/why-phantomdata/",
      "date_published": "2018-06-05T13:41:30+02:00",
      "author": {
        "name": "troubles.md",
        "url": "http://troubles.md/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "901dde63-68f7-45d0-b161-cf585e47d266",
      "title": "Announcing Rust 1.26.2",
      "content_text": "This patch release fixes a bug in the borrow checker verification of match expressions. This bug was introduced in 1.26.0 with the stabilization of match ergonomics. Specifically, it permitted code which took two mutable borrows of the bar path at the same time.",
      "url": "https://blog.rust-lang.org/2018/06/05/Rust-1.26.2.html",
      "date_published": "2018-06-05T00:00:00+00:00",
      "author": {
        "name": "The Rust Core Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "2b743aaf-6ae4-4bda-8de9-6bef817e9a4d",
      "title": "The Future of Clippy (the Rust Linter)",
      "content_text": "We’ve recently been making lots of progress on future plans for clippy and I thought I’d post an update.",
      "url": "https://manishearth.github.io/blog/2018/06/05/the-future-of-clippy-the-rust-linter/",
      "date_published": "2018-06-05T00:00:00+00:00",
      "author": {
        "name": "Manish Goregaokar",
        "url": "https://manishearth.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "046762b0-c3da-4f38-8d4a-7bb515f73d4b",
      "title": "Rust review: Protect the data",
      "content_text": "The one thing that blew my mind about Rust is its approach to data sharing in concurrent situations.\n\nI had always thought of mutexes as something that is easy to get wrong and was convinced that the use of a RAII pattern to prevent lock leaks never happen (like with Abseil’s MutexLock) was the panacea. (I’m a fan of RAII in C++ by the way, in case you haven’t noticed.)",
      "url": "http://julio.meroh.net/2018/06/rust-review-protect-the-data.html",
      "date_published": "2018-06-05T09:00:00-04:00",
      "author": {
        "name": "Julio Merino",
        "url": "http://julio.meroh.net/series.html#Rust%20review"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "019cfc86-4560-40cc-8619-30d04e30699b",
      "title": "Optimising path tracing with SIMD",
      "content_text": "Following on from path tracing in parallel with Rayon I had a lot of other optimisations I wanted to try. In particular I want to see if I could match the CPU performance of @aras_p’s C++ path tracer in Rust. He’d done a fair amount of optimising so it seemed like a good target to aim for. To get a better comparison I copied his scene and also added his light sampling approach which he talks about here. I also implemented a live render loop mimicking his.",
      "url": "https://bitshifter.github.io/blog/2018/06/04/simd-path-tracing/",
      "date_published": "2018-06-04T00:00:00+00:00",
      "author": {
        "name": "bitshifter",
        "url": "https://bitshifter.github.io/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "d4896054-d302-4629-8679-7456e1a741ef",
      "title": "Async Methods II: object safety",
      "content_text": "Last time, we introduced the idea of async methods, and talked about how they would be implemented: as a kind of anonymous associated type on the trait that declares the method, which corresponds to a different, anonymous future type for each implementation of that method. Starting this week we’re going to look at some of the implications of that. The first one we’re going to look at is object safety.",
      "url": "https://boats.gitlab.io/blog/post/async-methods-ii/",
      "date_published": "2018-06-04T00:00:00+00:00",
      "author": {
        "name": "withoutboats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "9a7909ce-8831-4f06-b32e-55a4a3df9116",
      "title": "How to speed up the Rust compiler some more in 2018",
      "content_text": "Since my last post, rustc-perf — the benchmark suite, harness and visualizer — has seen some improvements. First, some new benchmarks were added: cargo, ripgrep, sentry-cli, and webrender. Also, the parser benchmark has been removed because it was a toy program and thus not a good benchmark.",
      "url": "https://blog.mozilla.org/nnethercote/2018/06/05/how-to-speed-up-the-rust-compiler-some-more-in-2018/",
      "date_published": "2018-06-05T00:05:01+00:00",
      "author": {
        "name": "Nicholas Nethercote",
        "url": "https://blog.mozilla.org/nnethercote/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "e0e1ff6c-452a-442e-a3d5-93203569fa58",
      "title": "Fishing in an Abyss: Building a Password Cracker in Rust",
      "content_text": "Ahead of this year’s World Password Day, 1Password – maker of password management software – announced a password cracking challenge. The company ostensibly wanted to find out how hard it would be to crack a three-word passphrase master password on one of their vaults, assuming that the attacker had the derived hash of the passphrase.",
      "url": "https://sts10.github.io//2018/05/31/1password-cracking-challenge.html",
      "date_published": "2018-05-31T23:28:50+00:00",
      "author": {
        "name": "Sam Schlinkert",
        "url": "https://sts10.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "d8c6d9c0-38eb-4656-a28e-0125ca9e5cd1",
      "title": "The Secret Life of Cows",
      "content_text": "A lot of people at RustFest Paris mentioned Cows – which may be surprising if you’ve never seen std::borrow::Cow!\n\nCow in this context stands for “Clone on Write” and is a type that allows you to reuse data if it is not modified. Somehow, these bovine super powers of Rust’s standard library appear to be a well-kept secret even though they are not new. This post will dig into this very useful pointer type by explaining why in systems programming languages you need such fine control, explain Cows in detail, and compare them to other ways of organizing your data.",
      "url": "https://deterministic.space/secret-life-of-cows.html",
      "date_published": "2018-06-02T00:00:00+02:00",
      "author": {
        "name": "Pascal Hertleif",
        "url": "https://deterministic.space/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e672721a-5577-4897-b440-619731384ac1",
      "title": "Newtype Index Pattern",
      "content_text": "Similarly to the previous post, we will once again add types to the Rust code which works perfectly fine without them. This time, we’ll try to improve the pervasive pattern of using indexes to manage cyclic data structures.",
      "url": "https://matklad.github.io//2018/06/03/newtype-index-pattern.html",
      "date_published": "2018-06-03T21:21:45+00:00",
      "author": {
        "name": "Aleksey Kladov",
        "url": "https://matklad.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d5a4da56-2e7e-4f30-bd1a-d0211958a00a",
      "title": "Async Methods I: generic associated types",
      "content_text": "Async/await continues to move along swimmingly. We’ve accepted an RFC describing how the async/await syntax will work in Rust, and work is underway on implementing support for it in the compiler. We’re hopeful that users will be able to start experimenting with the syntax on nightly by early July.\n\nThe RFC for async/await didn’t address one important thing: async methods. It is very important for people defining libraries to be able to define traits that contain async functions, like this:",
      "url": "https://boats.gitlab.io/blog/post/async-methods-i/",
      "date_published": "2018-05-31T00:00:00+00:00",
      "author": {
        "name": "withoutboats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "19239f2e-41c0-44cb-8b3d-02199eaa57b1",
      "title": "Infinite Negative Utility: The Rust Language and Special Cases",
      "content_text": "I first came across Rust back in 2010 or 2011, and it was a very different language than the one it is today, both syntactically and semantically. I remember at the time that newcomers would often complain loudly about the terse keywords—like the fact that the return keyword had been shortened to ret—and the omnipresent tildes scattered throughout the language like fallen leaves in autumn. My programming background was in functional languages—specifically in Scheme and Haskell—and I found this language fascinating, sitting in an interesting and unexplored place in the spectrum of programming languages and bringing something genuinely new to the table.",
      "url": "https://blog.infinitenegativeutility.com/2018/6/the-rust-language-and-special-cases",
      "date_published": "2018-06-01T00:00:00+00:00",
      "author": {
        "name": "Getty Ritter",
        "url": "https://blog.infinitenegativeutility.com/archive"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c8e154fc-96f0-4c63-99fb-ba62c7cc689f",
      "title": "Listening and trust, part 2",
      "content_text": "In the previous post in this series, I recounted an early lesson for the Rust Core Team about working in the open. In this post, I want to talk about the delicate interplay between listening and trust when doing design in the open.",
      "url": "http://aturon.github.io/2018/06/02/listening-part-2/",
      "date_published": "2018-06-02T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "1572c586-709c-44a9-9232-ae4d3b9466ec",
      "title": "The Go Developer's Quickstart Guide to Rust",
      "content_text": "As the co-author of Go in Practice, I have felt a certain obligation to Go. But I'm ready for a change. Rust topped the satisfaction survey in Stack Overflow's survey of languages (screenshot above). I've decided to give it a try. While Go and Rust are often compared, they are remarkably different languages.\n\nComing from a Go background, there are things about Rust that feel very natural, and things (like memory management) that feel utterly foreign. And so as I learn Rust, I am cataloging how it feels for a Go programmer. And rather than leading others to \"dive in at the deep end\" as I did (when I tried to write a full web service), I decided to approach Rust by starting with similarities and working toward differences.",
      "url": "http://technosophos.com/2018/05/27/the-go-developers-quickstart-guide-to-rust.html",
      "date_published": "2018-05-27T00:00:00+00:00",
      "author": {
        "name": "Matt Butcher",
        "url": "http://technosophos.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "469533e2-7193-41b3-a754-adb5281e276f",
      "title": "My Rust Story",
      "content_text": "With #RustReach starting soon I have ran into a few \"My Rust Story\" posts. My path to Rust certainly is not typical (I studied HR Management in undergrad…).\n\nThe journey really started for me back in middle/high school as I was very interested in video games, computers, and how things worked. So with a few friends started a computer repair \"business\" that serviced the local (Western Pennsylvania) area. By the time my sophomore year of highschool rolled around we had lined up a few of the parents who owned local businesses/churches and were doing some pretty serious consulting/maintenance for our ages (also installing Halo and Half-life 2: Deathmatch on the school's servers...).",
      "url": "https://ricky.hosfelt.io/blog/rust_reach.html",
      "date_published": "2018-05-31T00:00:00+00:00",
      "author": {
        "name": "Ricky Hosfelt",
        "url": "https://ricky.hosfelt.io/blog/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "09d6be59-4bee-49e0-aa34-d43622422cb8",
      "title": "Rust review: The borrow checker",
      "content_text": "Aaaah, the borrow checker: the dreaded enemy lurking within the Rust compiler, ready to make its move to bring pain to your life by preventing your code from compiling. Or that’s what everyone seems to say, which is one of the reasons I put off learning Rust for so long. In reality… the borrow checker is a blessing, but it is true that getting past its gates is difficult at first.",
      "url": "http://julio.meroh.net/2018/06/rust-review-borrow-checker.html",
      "date_published": "2018-06-01T09:00:00-04:00",
      "author": {
        "name": "Julio Merino",
        "url": "http://julio.meroh.net/series.html#Rust%20review"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ab635755-efd4-432a-8407-7b1c94649f8f",
      "title": "Tricking the HashMap",
      "content_text": "Is it possible to find something in a hashmap if the key you are looking for is not exactly the same as the one you put into that hashmap? At first glance, this might not make any sense at all. The whole purpose of a hashmap is to store something under some key and then look it up using the same key. Right?",
      "url": "https://idubrov.github.io/rust/2018/06/01/tricking-the-hashmap.html",
      "date_published": "2018-06-01T00:00:00+00:00",
      "author": {
        "name": "Ivan Dubrov",
        "url": "https://idubrov.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "80930880-f4a9-4485-b372-648928490dca",
      "title": "Assignment Semantics in Python, JavaScript, Java, C++, and Rust",
      "content_text": "What happens when a data collection is copied and then the new copy is changed? Does the original remain the same, or does it change too?\n\nIf you think of copying as creating a completely new object, of course you expect that any change to the new copy does not affect the original object. But if you think of copying as creating a new name for the same, single object, then you expect that any change to the object through the new name appears also when you access the same object through the old name.\n\nLet's see how is the behavior of Python, Javascript, Java, C++, and Rust regarding the assignment operator (\"=\") between collection variables.",
      "url": "https://www.apress.com/us/blog/all-blog-posts/assignment-semantics/15805464",
      "date_published": "2018-06-01T00:00:00+00:00",
      "author": {
        "name": "Carlo Milanesi",
        "url": "https://www.apress.com/us/blog"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "1f808812-4e70-4dcb-90a0-c45964863cd5",
      "title": "Fear not the Rust Borrow Checker",
      "content_text": "I spent pretty much the whole day banging my head against the wall trying to figure out how ownership and borrowing work in Rust, and finally have a grasp on what’s going on.\n\nIn this post I’m going to demonstrate how these concepts work through some examples of code that break Rust’s rules, and explain why they’re problematic. I assume very little knowledge of the Rust programming language. I’ve also added comments to all of the code blocks that indicate whether the code is valid Rust or not.",
      "url": "http://www.squidarth.com/rc/rust/2018/05/31/rust-borrowing-and-ownership.html",
      "date_published": "2018-05-31T12:00:38-04:00",
      "author": {
        "name": "Sid Shanker",
        "url": "http://www.squidarth.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "86c89dda-a4f0-45bd-a0d0-616b8d687957",
      "title": "Writing a Simple Github Webhook Responder With actix-web",
      "content_text": "Creating a simple web service for automating Travis builds across repositories using actix-web and Github webhooks.",
      "url": "http://danielwelch.github.io/rust-web-service.html",
      "date_published": "2018-05-31T11:05:00-04:00",
      "author": {
        "name": "Daniel Welch",
        "url": "http://danielwelch.github.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "9bf3f488-ace2-43b6-9f6b-3071241f7ed2",
      "title": "hyper v0.12",
      "content_text": "Today sees the release of hyper v0.12.0, a fast and correct HTTP library for the Rust language.\n\nThis release adds support for several new features, while taking the opportunity to fix some annoyances, and improve the extreme speeds!",
      "url": "http://seanmonstar.com/post/174480374517/hyper-v012",
      "date_published": "2018-06-01T00:00:00+00:00",
      "author": {
        "name": "Sean McArthur",
        "url": "http://seanmonstar.com/"
      },
      "tags": [
        "Web and Network Services",
        "Crates"
      ]
    },
    {
      "id": "d7340b81-5e94-4123-b830-c5cbbfa154d2",
      "title": "HTTP Crate with URL Support & a Simple HTTP Client",
      "content_text": "While the http crate generally has a great API I have been unsatisfied how it handles URLs. To create a HTTP request a full URL is needed with a scheme (http/https), authority (example.org) and a path (/search?q=rust) but http does enforce this and allows you to only state the path. This means both clients and servers are either unable to determine protocol and and authority information or have to do this manually.",
      "url": "https://pyfisch.org/blog/http-with-url/",
      "date_published": "2018-06-01T00:00:00+00:00",
      "author": {
        "name": "Pyfisch",
        "url": "https://pyfisch.org/blog/"
      },
      "tags": [
        "Web and Network Services",
        "Crates"
      ]
    },
    {
      "id": "aea72b83-8f56-4c8d-a9d7-c88fded0cfc7",
      "title": "Mutagen - An Inopportune Consumption",
      "content_text": "I just failed to implement what looked to be a relatively simple opportunistic replacement so that the compiler would accept the mutated code. But I’m getting ahead of myself.",
      "url": "https://llogiq.github.io/2018/05/30/inop.html",
      "date_published": "2018-05-30T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "b9a686f1-3136-4307-a6ac-0f596babc6b5",
      "title": "RSoC: Implementing a FAT32 Filesystem in Redox",
      "content_text": "This is a blog post about the work which I have done so far in implementing a FAT32 filesystem in Redox. Currently the Redox bootloader as well as the userspace filesystem daemon supports only RedoxFS.",
      "url": "https://www.redox-os.org/news/rsoc-fat32-1/",
      "date_published": "2018-05-29T00:00:00+00:00",
      "author": {
        "name": "Deepak Sirone",
        "url": "https://www.redox-os.org/news/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "12f71ab8-809a-45a6-8e95-fd98a92e7f60",
      "title": "Why put Rust in our Python Monitoring agent?",
      "content_text": "Prior to adding Python performance monitoring, we'd written monitoring agents for Ruby and Elixir. Our Ruby and Elixir agents had duplicated much of their code between them, and we didn't want to add a third copy of the agent-plumbing code. The overlapping code included things like JSON payload format, SQL statement parsing, temporary data storage and compaction, and a number of internal business logic components.\n\nThis plumbing code is about 80% of the agent code! Only 20% is the actual instrumentation of application code.\n\nSo, starting with Python, our goal became \"how do we prevent more duplication\". In order to do that, we decided to split the agent into two components. A language agent and a core agent. The language agent is the Python component, and the core agent is a standalone executable that contains most of the shared logic.",
      "url": "http://blog.scoutapp.com/articles/2018/04/10/why-put-rust-in-our-python-monitoring-agent",
      "date_published": "2018-04-05T07:46:00-04:00",
      "author": {
        "name": "Chris",
        "url": "http://blog.scoutapp.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "342c3a2c-88a7-4e26-a6ea-97c3257daf2d",
      "title": "Mix Rust Code (WebAssembly) with Vue Component",
      "content_text": "In this tutorials, we will try mixing Rust code with Javascript by compiling Rust code as .wasm then use it in Vue Component.",
      "url": "https://busy.org/@drsensor/mix-rust-code-webassembly-with-vue-component-basic",
      "date_published": "2018-05-24T19:01:00+00:00",
      "author": {
        "name": "drsensor",
        "url": "https://busy.org/@drsensor"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "325fc83d-bba5-48c8-8443-fdd5dd21f8ed",
      "title": "Learning Rust — Conspiracies, Databases, and Diesel.rs",
      "content_text": "This post is the second in a series of posts where I share my experience learning Rust. I’m building out a conspiracy theories API to help me get more familiar with Rust and to have a little fun. Since I am new to Rust, I welcome any and all feedback, especially from developers who have been using Rust for quite some time, leave a comment below or contact me on Twitter. With that out of the way, it is time to put your foil lined hat on and start storing the conspiracies in a database.",
      "url": "https://medium.com/@rippinrobr_66849/2-conspiracies-databases-and-diesel-rs-ac1d8d3499b3",
      "date_published": "2018-05-30T21:04:06.895+00:00",
      "author": {
        "name": "Rob Rowe",
        "url": "https://medium.com/@rippinrobr_66849"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "d9877c7d-7175-490d-89a8-46fad05d9903",
      "title": "Rust review: Immutable by default",
      "content_text": "Let’s start the deep dive by looking into a powerful feature of Rust: all variables and references are immutable by default unless qualified with mut.\nTo understand why this is important, let’s cover some context first. One of my pet peeves when reviewing C++ code is to ask authors to sprinkle the const qualifier everywhere: if something ain’t mutated, say so explicitly. This includes marking local variables, function arguments, function return values, class attributes, etc.",
      "url": "http://julio.meroh.net/2018/05/rust-review-immutable-by-default.html",
      "date_published": "2018-05-29T09:00:00-04:00",
      "author": {
        "name": "Julio Merino",
        "url": "http://julio.meroh.net/series.html#Rust%20review"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "da46cfde-97b2-4e16-9e08-4308a34d6826",
      "title": "Evolving Rust",
      "content_text": "When you're just building some very basic tool programs, I'd probably not even think about threading in C, but here it is so easy that I've been quick to drop a (for example, typically) 30ms loop down to 3.5ms. One of the things I've been somewhat missing is easy access to SIMD intrinsics, but this brings me to something else I've been enjoying this year: Rust is evolving.",
      "url": "https://blog.shivoa.net/2018/05/evolving-rust.html",
      "date_published": "2018-05-29T12:11:00+01:00",
      "author": {
        "name": "Shivoa Birch",
        "url": "https://plus.google.com/104688779548004579468"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ae63f930-3568-433f-b8e6-35feb516b4c2",
      "title": "Announcing Rust 1.26.1",
      "content_text": "A couple of issues were found in 1.26.0 which were deemed sufficient for a patch release.\n\nA quick summary of the changes:\n\nRLS no longer interferes with command line builds\nRustfmt stopped badly formatting text in some cases\nReturning from main via impl Trait where the Trait is not Termination is no longer permitted\n::<> (turbofish) no longer works for method arguments whose type is impl Trait\n\nNaN > NaN no longer returns true in const contexts\nrustup should no longer fail due to missing documentation on some platforms",
      "url": "https://blog.rust-lang.org/2018/05/29/Rust-1.26.1.html",
      "date_published": "2018-05-29T00:00:00+00:00",
      "author": {
        "name": "The Rust Core Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "95a6f9d4-dcfa-4b20-8ee7-f240cde435b1",
      "title": "Exploring Rust fat pointers",
      "content_text": "Beware that at any point the code here may stop compiling, segfault, and otherwise behave in weird ways, some of which involve Velociraptors.\n\nNow that that’s out of the way, what is a fat pointer anyway? All pointers are the same right? Just a number indicating an address in memory. Well, yes and no.",
      "url": "https://iandouglasscott.com/2018/05/28/exploring-rust-fat-pointers/",
      "date_published": "2018-05-28T02:46:00-07:00",
      "author": {
        "name": "Ian Douglas Scott",
        "url": "https://iandouglasscott.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "bfb80762-37e6-4337-83c9-52f371839e60",
      "title": "TensorScript Type Inference: Hindley-Milner in Rust",
      "content_text": "Type-inferred gradually typed languages are a joy to use: easy to write, analyze, and refactor. In this blog post, I will showcase to the other dozen of programmers who are interested in the obscure art of programming language type inference.",
      "url": "http://rickyhan.com/jekyll/update/2018/05/26/hindley-milner-tutorial-rust.html",
      "date_published": "2018-05-26T04:00:00+00:00",
      "author": {
        "name": "Ricky Han",
        "url": "http://rickyhan.com/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "cb90dbcf-0621-4e96-83ca-62deac7e8a3d",
      "title": "RustFest Paris Workshop: Fastware",
      "content_text": "It’s often said1 that the slowest code is that which has been optimised without benchmarks. You wouldn’t expect your code to work if you never ran it, so why should you expect it to be fast if you never benchmarked it? Writing good benchmarks is a bit of an art, because it’s really easy to accidentally write benchmarks that make your code seem fast, when really the compiler is applying some optimisations that work in the side-effect-free world of the benchmark but can no longer get applied when you put it out into the wild.",
      "url": "http://troubles.md/posts/rustfest-2018-workshop/",
      "date_published": "2018-05-22T11:22:48+02:00",
      "author": {
        "name": "troubles.md",
        "url": "http://troubles.md/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "9f6686d4-a03b-4420-82b0-e2c66b8b5e11",
      "title": "Gfx, windows, and resizing",
      "content_text": "These early posts will mostly be me trying to work out how to use gfx-rs. I was previously using glium which is fantastic, but is sadly no longer being developed. So my choices are: Learn Vulkan, Use raw OpenGL bindings, Use gfx.\n\nI opted to use the current released version (v0.17.1) but it’s currently undergoing a significant rearchitecture so I may move to that whenever it releases.",
      "url": "https://falseidolfactory.com/2018/05/28/gfx-windows-and-resizing.html",
      "date_published": "2018-05-28T00:00:00+01:00",
      "author": {
        "name": "Mistodon",
        "url": "https://falseidolfactory.com/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "e0370259-0204-491d-9bd1-3769a682f6e1",
      "title": "Fuzz testing in Rust with Cargo-fuzz",
      "content_text": "In this post, I go through how I added the first automated fuzz test for my hobby project Hat — a snapshotting backup system written in Rust. I’ll briefly go through what a fuzz test is and how it works. In a follow-up post, I will share how I made the test more effective by running it through Seasoned Software.",
      "url": "https://medium.com/@seasoned_sw/fuzz-testing-in-rust-with-cargo-fuzz-13b89feecc30",
      "date_published": "2018-05-25T10:08:45.112+00:00",
      "author": {
        "name": "Seasoned Software",
        "url": "https://medium.com/@seasoned_sw"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "df7df3a9-1519-4453-963e-fb69d766798d",
      "title": "Bobbin SDK: Richer Hardware Abstractions for Embedded Systems Programming",
      "content_text": "Bobbin SDK is a suite of tools and code that has been used in embedded development projects running on a variety of ARM Cortex-M MCUs over the last year and a half. It exists to bridge the gap between the existing Rust ecosystem centered around svd2rust and rich but proprietary vendor SDKs.",
      "url": "http://www.bobbin.io/blog/post/bobbin_sdk_richer_hardware/",
      "date_published": "2018-05-25T00:00:00+00:00",
      "author": {
        "name": "Jonathan Soo",
        "url": "http://www.bobbin.io/blog/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "e2724828-a6e9-4383-9614-bea31e743784",
      "title": "Oblix: An Efficient Oblivious Search Index [pdf]",
      "content_text": "Abstract—Search indices are fundamental building blocks of many systems, and there is great interest in running them on encrypted data. Unfortunately, many known schemes that enable search queries on encrypted data achieve efficiency at the expense of security, as they reveal access patterns to the encrypted data.  In this paper we present Oblix, a search index for encrypted data that is oblivious (provably hides access patterns), is dynamic (supports inserts and deletes), and has good efficiency.  Oblix relies on a combination of novel oblivious-access tech- niques and recent hardware enclave platforms (e.g., Intel SGX).  In particular, a key technical contribution is the design and implementation of doubly-oblivious data structures, in which the client’s accesses to its internal memory are oblivious, in addition to accesses to its external memory at the server. These algorithms are motivated by hardware enclaves like SGX, which leak access patterns to both internal and external memory.  We demonstrate the usefulness of Oblix in several applications: private contact discovery for Signal, private retrieval of public keys for Key Transparency, and searchable encryption that hides access patterns and result sizes.",
      "url": "https://people.eecs.berkeley.edu/~raluca/oblix.pdf",
      "date_published": "2018-05-21T00:00:00+00:00",
      "author": {
        "name": "Pratyush Mishra, Rishabh Poddar, Jerry Chen, Alessandro Chiesa, Raluca Ada Popa",
        "url": "https://rise.cs.berkeley.edu/blog/publication/oblix-an-efficient-oblivious-search-index/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "d25787d1-089e-4455-ac6a-1183548d48cd",
      "title": "Rust review: Introduction",
      "content_text": "I had been meaning to learn Rust since I first toyed with Go a couple of years ago. During this period, I’ve written a non-trivial amount of Go code both inside and outside Google, but never found the chance to sit back and learn Rust.\n\nThis changed a month ago during my yearly family trip to Korea. This time around, I decided upfront that I would not work on any personal or work projects for the 2-week long vacation. Instead, I would focus all spare time in reading. And I would read “The Rust Programming Language”, second edition. The plan worked: getting through the book took the two weeks and I barely wrote any code.",
      "url": "http://julio.meroh.net/2018/05/rust-review-introduction.html",
      "date_published": "2018-05-25T09:00:00-04:00",
      "author": {
        "name": "Julio Merino",
        "url": "http://julio.meroh.net/series.html#Rust%20review"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "8e49045f-dc48-4471-bc83-353183d6c4f8",
      "title": "Listening and trust, part 1",
      "content_text": "For me, most weeks working on Rust are fun — exhilarating, even. But, just like with anything else, some weeks are hard.\n\nAs this week draws to a close, I feel troubled. On the one hand, things are looking strong for the 2018 Edition (which I want to write more about soon). But on the other hand, this week I locked two RFC threads, flagged a bunch of comments for moderation, and generally absorbed a lot of emotion from a lot of different quarters of the community. There’s a sense of simmering distrust.",
      "url": "http://aturon.github.io/2018/05/25/listening-part-1/",
      "date_published": "2018-05-25T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "e1fd2a84-e451-4299-9327-eb39f3a1ca8f",
      "title": "A shared, mutable ecosystem",
      "content_text": "Ownership is a fundamental piece of Rust’s story. It amounts to a tight set of rules about who owns a value in a program, how that value can be aliased and mutated, and when that value is dropped. It prevents shared mutable state, which is the root cause of major bugs in software written without the same guarantees.\n\nIn this post I’d like to talk about a different kind ownership in though. I’d like to talk about ownership of libraries in the Rust ecosystem and the problem of sustainable maintainership.",
      "url": "https://kodraus.github.io/rust/2018/05/23/a-shared-mutable-ecosystem.html",
      "date_published": "2018-05-23T21:49:12+00:00",
      "author": {
        "name": "Ashley Mannix",
        "url": "https://kodraus.github.io/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "5b8ae1bc-5625-4115-ab3a-3f399e157314",
      "title": "Typed Key Pattern",
      "content_text": "In this post, I’ll talk about a pattern for extracting values from a weakly typed map. This pattern applies to all statically typed languages, and even to dynamically typed ones, but the post is rather Rust-specific.",
      "url": "https://matklad.github.io/2018/05/24/typed-key-pattern.html",
      "date_published": "2018-05-24T10:18:13+00:00",
      "author": {
        "name": "Aleksey Kladov",
        "url": "https://matklad.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4c0ea01d-c011-49aa-b6a6-10178e03c627",
      "title": "Neural networks on a micro controller - Preparation and math",
      "content_text": "I've been playing around with the idea of running a neural network on a micro controller. This project is not designed to be the most efficient neural network, but rather one that runs on a micro controller with very limited resources.",
      "url": "http://trangar.blogspot.com.au/2018/05/neural-networks-on-micro-controller.html?m=1",
      "date_published": "2018-05-23T10:04:00-07:00",
      "author": {
        "name": "Trangar",
        "url": "http://trangar.blogspot.com.au/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "4c951443-54b3-4187-8791-b27502ff193b",
      "title": "RSoC: Porting tokio to Redox",
      "content_text": "This is the weekly summary for my Redox Summer of Code project: Porting tokio to redox. Most of the time was spent on one bug, and after that one was figured out and fixed it ended up being relatively easy! As of now, 11⁄13 tokio examples seem to work on redox. The remaining examples are UDP and seem to fail because of something either with the rust standard library or my setup.",
      "url": "https://www.redox-os.org/news/rsoc-porting-tokio-to-redox/",
      "date_published": "2018-05-21T00:00:00+00:00",
      "author": {
        "name": "jD91mZM2",
        "url": "https://www.redox-os.org/news/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "e67229c7-9d09-49e8-9558-ca8e89a53d4f",
      "title": "Snowhash in Rust with WASM",
      "content_text": "A little while ago I came across this Snowflake generator. It’s a project by Raph Levein that takes a hash string and uses it to procedurally generate a unique snowflake. He explains that the original motivation was as a cryptographically secure visual hash, so that people would reliably be able to tell by visual inspection whether two hashes were identical. I thought that was a pretty cool idea.",
      "url": "https://joshleeb.com/posts/rust-wasm-snowhash/",
      "date_published": "2018-05-22T00:00:00+00:00",
      "author": {
        "name": "Josh Leeb-du Toit",
        "url": "https://joshleeb.com/posts"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "7518f181-39ba-4c9c-a76d-1a07b697d264",
      "title": "Moving out of a Drop struct in Rust?",
      "content_text": "Rust doesn’t allow you to move out of a value which type implements Drop, and this is quite logical. When Foo::take returns, because of self going out of scope, it must call its Drop::drop implementation. If you have moved out of it – both a: A and b: B fields, the Drop::drop implementation is now a complete UB. So Rust is right here and doesn’t allow you to do this.\n\nBut imagine that we have to do this. For insance, we need to hand over both the scarce resources a and b to another struct (in our case, a (A, B), but you could easily imagine a better type for this).\n\nThere’s a way to, still, implement Foo::take with Foo implementing Drop. Here’s how:",
      "url": "http://phaazon.netkblog/rust-no-drop",
      "date_published": "2018-05-22T22:22:00+00:00",
      "author": {
        "name": "Dimitri Sabadie",
        "url": "http://phaazon.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4b44fb81-4b16-4681-a09a-a93cb82ccbc0",
      "title": "Wicked Fast Web Servers in Rust",
      "content_text": "I write code for the web every day, and as such, I naturally wanted to find a web server that I could write some beautiful code in Rust with. There are a few options out there, Actix, Rocket, but none of them are quite as simple and succinct as KoaJS for node. As such, I wanted to write something as simple as Koa and as performant as a Rust framework, and I did. With that, I give you Thruster, an elegant, performant, web server written in Rust.",
      "url": "https://medium.com/@MertzAlertz/wicked-fast-web-servers-in-rust-4947688426bc",
      "date_published": "2018-05-22T23:26:19.855+00:00",
      "author": {
        "name": "Pete Mertz",
        "url": "https://medium.com/@MertzAlertz"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "80818d94-c29b-47b1-8307-f5c9e1d03808",
      "title": "impl Trait in Rust explanation",
      "content_text": "In Rust 1.26 a new feature called impl Trait was stabilized. How does it work? Instead of specifying an exact type, you can say that your function either returns or takes something that implements a trait.",
      "url": "https://medium.com/@iopguy/impl-trait-in-rust-explanation-efde0d94946a",
      "date_published": "2018-05-23T04:37:08.411+00:00",
      "author": {
        "name": "Igor Polyakov",
        "url": "https://medium.com/@iopguy"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "91a4f766-391d-43fc-a2ce-66354ac78bd4",
      "title": "Implement Raft in Rust",
      "content_text": "Consensus is one of the most important challenges in designing and building distributed systems–how to make sure multiple nodes (or agents, processes, threads, tasks, participants, etc.) in a group agree on a specific value proposed by at least one of the nodes. As an open-source distributed scalable HTAP database, TiDB uses the Raft Consensus Algorithm in its distributed transactional key-value storage engine, TiKV, to ensure data consistency, auto-failover, and fault tolerance.",
      "url": "https://pingcap.com/blog/implement-raft-in-rust/",
      "date_published": "2018-05-22T00:00:00+00:00",
      "author": {
        "name": "Siddon Tang",
        "url": "https://pingcap.com/blog"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "502f20f5-50e1-4741-a852-2c65ef867bba",
      "title": "Writing a Web API Client in Rust (Part 2)",
      "content_text": "The 2nd of a multi-part series where we build a small REST client for the Marvel Comics Web API using Rust. This time we focus on how to use the hyper and futures crates to make HTTP requests to a Web API, then use serde to parse JSON data from the response.",
      "url": "https://theomn.com/rust-web-api-client-part-02/",
      "date_published": "2018-05-19T00:00:00+00:00",
      "author": {
        "name": "Owen Nelson",
        "url": "https://theomn.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "e81240c1-c783-4113-9df8-27755677e929",
      "title": "madparts-rs 1.0 release",
      "content_text": "Back in Februari 2013 then coworker Romain S. showed me the new trend of programming editors that do continuous compilation while you type, showing you immediate feedback on your code. In parallel I also worked on 3D modeling for my 3D printer using the OpenSCAD program. OpenSCAD works by writing code in its custom language and then have it rendered. I had this idea of combining these two approaches to make an electronics footprint generator. And so the development of the original madparts program started. In August 2016 I had been playing with the then pretty new rust programming language and decided a rewrite in it and simplifying the program even further would be fun to do.",
      "url": "https://damad.be/joost/blog/madparts-rs-1-0-release.html",
      "date_published": "2018-05-20T00:00:00+00:00",
      "author": {
        "name": "Joost Yervante Damad",
        "url": "https://damad.be/joost/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "35d0dec8-e4fb-4be0-b87c-ed5dd39056b8",
      "title": "Migrating to Actix Web from Rocket for Stability",
      "content_text": "I previously wrote an article back in November 2017: Replacing Elasticsearch with Rust and SQLite. In it, I needed to create a few HTTP endpoints that ingested JSON, perform a database lookup, and return JSON. Very simple. No query / path parameters, authentication, authorization, H2, or TLS. I didn’t understand how stability was such an important feature. I was familiar with needing new versions of the nightly compiler to stay current with clippy and rustfmt, but it was a blindspot when it came to dependencies.",
      "url": "https://nbsoftsolutions.com/blog/migrating-to-actix-web-from-rocket-for-stability",
      "date_published": "2018-05-21T00:00:00+00:00",
      "author": {
        "name": "Nick Babcock",
        "url": "https://nbsoftsolutions.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "d2971f3f-a40d-45c9-a544-ed94f3b962f6",
      "title": "Rust is Incredibly Productive for CLIs",
      "content_text": "I built a little tool in Rust to convert an Evernote export file to Markdown. It was impressively easy.",
      "url": "https://www.chriskrycho.com/2018/rust-is-incredibly-productive-for-clis.html",
      "date_published": "2018-05-20T08:35:00-04:00",
      "author": {
        "name": "Chris Krycho",
        "url": "https://www.chriskrycho.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "940f0d10-67ee-49d4-a243-d4310077a962",
      "title": "Asynchronous warmy: a prequel",
      "content_text": "Last weeks were interesting for warmy, a crate I’ve been writing for several weeks / months now that enables you to hot load and reload scarce resources – e.g. textures, meshes, configuration, JSON parameters, dependency nodes, whatever. warmy received several interesting features.",
      "url": "http://phaazon.net/blog/asynchronous_warmy_prequel",
      "date_published": "2018-05-08T19:30:00+00:00",
      "author": {
        "name": "Dimitri Sabadie",
        "url": "http://phaazon.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "f993c9a2-3b8e-455b-ad6e-354051f38863",
      "title": "Creating a Rusty Rocket fuelled with Diesel",
      "content_text": "Here I go with my first post that fully focuses on Rust. After spending a few months doing a bit here and there I decided to just dive right in as I was going through the Rust book at too slow a pace to keep myself interested. So, in this post I decided to write about setting up a simple REST API which is something that I have done in Java plenty of times but with Rust it is a different story.",
      "url": "https://lankydanblog.com/2018/05/20/creating-a-rusty-rocket-fuelled-with-diesel/",
      "date_published": "2018-05-20T17:53:11+00:00",
      "author": {
        "name": "Dan Newton",
        "url": "https://lankydanblog.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "da6bf82a-304e-42bd-9209-fbb8ee975fcd",
      "title": "Improving SmallVec's speed by 60% and why that shouldn't matter to you",
      "content_text": "smallvec is a library by the Servo team for reducing the number of allocations for dynamic arrays in the case that most of those arrays are below a certain size. Because malloc is fast, for many cases it’s actually slower to use SmallVec than just using Vec because the one-time cost of the initial allocation is dwarfed by the lifetime cost of SmallVec’s increased complexity. You can see that switching to Vec actually improves speed on many of SmallVec’s own benchmarks.",
      "url": "http://troubles.md/posts/improving-smallvec/",
      "date_published": "2018-05-17T14:44:51+02:00",
      "author": {
        "name": "troubles.md",
        "url": "http://troubles.md/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "999b0809-c97d-42c2-b102-d8d2567e8979",
      "title": "A boolean's story",
      "content_text": "Earlier this month I told you about my pet project in Rust.\n\nAs a reminder, it’s a tool named rusync which contains some of the functionality offered by the rsync command-line tool.\n\nToday I’d like to talk about a feature I’ve added recently, and take this opportunity to show you a few principles of good design along the way.",
      "url": "https://dmerej.info/blog/post/a-booleans-story/",
      "date_published": "2018-05-18T13:50:38+00:00",
      "author": {
        "name": "Dimitri Merejkowsky",
        "url": "https://dmerej.info/blog/humans.txt"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "6e5c626c-f240-41fa-9520-a3d5586523b3",
      "title": "Rust for Android games using SDL2",
      "content_text": "I've been wanting to write a simple Android game for my daughter, and decided to use it as an excuse to learn Rust.  Thus began an odyssey.\n\nI'll ignore the game itself in this post in favour of describing how to get a simple Rust on Android game environment.  For my game I didn't want anything fancy - I wanted to load some jpg files and blit rectangles from those textures to the screen.  But I don't know OpenGL, and I don't really feel the need to learn for this project - if I hit the need to use a shader, then I backtracked and tried another approach.  The plan was to get a simple, high-level graphics API for Rust running on Android.",
      "url": "https://lliwynd.blogspot.com.au/2018/05/rust-for-android-games-using-sdl2.html",
      "date_published": "2018-05-19T16:15:00+10:00",
      "author": {
        "name": "William Uther",
        "url": "https://lliwynd.blogspot.com.au/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "3f1b68cd-7c14-415e-bbe9-45db4342a95e",
      "title": "Get to know Rust",
      "content_text": "If you have ever written software, you have undoubtedly asked yourself, \"What language should I write this in?\" It's a valid question. Does your code need to be as fast as possible? Will it be running on the Web? Will the code be on the back end or the front? All languages have their niches, and Rust is no different.\n\nRust is a statically typed compiled language that fills the roles that most users use C or C++ for. Unlike C or C++, though, Rust also encroaches on territory that C# and the Java™ language have dominated for much of this century: Rust is a language that is memory safe and operating system agnostic, meaning that it can run on any computer. Essentially, you get all the speed and low-level benefits of a systems language without the pesky garbage collection of those latter languages I mentioned. Excited? Yeah, me, too. Welcome to Rust! ",
      "url": "https://www.ibm.com/developerworks/opensource/library/os-know-rust/index.html",
      "date_published": "2018-05-07T00:00:00+00:00",
      "author": {
        "name": "Dylan Hicks",
        "url": "https://www.linkedin.com/in/dylan-hicks-b4265396/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "c7a4923a-2a12-4f88-82fc-4b99b94080e9",
      "title": "Cannoli: A Python Compiler Written in Rust [pdf]",
      "content_text": "I just finished my Master's Thesis and part of it was writing a Python compiler in Rust. The goal of the thesis was to evaluate language features of Python that were hypothesized to cause performance issues. Quantifying the cost of these features could be valuable to language designers moving forward. Some interesting results were observed when implementing compiler optimizations for Python. An average speedup of 51% was achieved across a number of benchmarks.",
      "url": "https://github.com/joncatanio/cannoli/raw/master/resources/papers/cannoli-thesis-paper.pdf",
      "date_published": "2018-05-17T16:00:59+00:00",
      "author": {
        "name": "Jonathan Catanio",
        "url": "https://github.com/joncatanio"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "2bdd1638-e211-477d-8bb8-3ae0de703661",
      "title": "FizzBuzz Can Finally Be Implemented in Stable Rust",
      "content_text": "I have been editing my FizzBuzz repository since 2014. After four years, I was finally able to switch from nightly to stable due to the 1.26 release. Let’s back up a little bit and appreciate the changes since the first revision.",
      "url": "https://medium.com/@iopguy/fizzbuzz-can-finally-be-implemented-in-stable-rust-87649a882f2d",
      "date_published": "2018-05-17T17:23:27.319+00:00",
      "author": {
        "name": "Igor Polyakov",
        "url": "https://medium.com/@iopguy"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "f676f9eb-ea74-4dc5-a393-1f23a7886678",
      "title": "Dropping drops",
      "content_text": "Recently, a benchmark made it to the top of /r/programming, featuring Rust among other languages, and I was a bit surprised to see that the idiomatic Rust program was not competitive with the best-tuned C++ solution. The benchmark implements a binary tree, and the C++ solution leverages raw pointers while Rust would use an Option<Box<Node>> to represent its tree. Since Option knows that Box is non-nullable, it should compile down to a raw pointer. Quickly inspecting the Rust and C++ versions would not let me find where the performance difference came from.",
      "url": "https://barrielle.cedeela.fr/research_page/dropping-drops.html",
      "date_published": "2018-05-17T00:00:00+02:00",
      "author": {
        "name": "Vincent Barrielle",
        "url": "https://barrielle.cedeela.fr/research_page/category/blog.html"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "51352c9c-dac9-4e94-a90f-5e953057a01a",
      "title": "Porting Rust Benchmarks To Criterion",
      "content_text": "A few weeks ago, I set out to convert bytecount’s benchmarks to criterion, a statistics-driven benchmarking framework started by Jorge Aparicio and maintained by Brook Heisler.\n\nBefore, bytecount used bencher for its benchmarks, which is a straight port of the unstable, nightly-only std::test benchmark framework, extended to work with stable Rust. This was a great benefit compared to std::test, because now we could benchmark on all Rust versions (stable, beta, nightly, some specific version) without needing to fear regressions.",
      "url": "https://llogiq.github.io/2018/05/18/criterion.html",
      "date_published": "2018-05-18T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "a9218983-121e-4d4f-a02f-fd30cb6cf9b2",
      "title": "The Rust compiler is getting faster",
      "content_text": "TL;DR: The Rust compiler has gotten 1.06x–4x faster over the past month.",
      "url": "https://blog.mozilla.org/nnethercote/2018/05/17/the-rust-compiler-is-getting-faster/",
      "date_published": "2018-05-17T04:08:48+00:00",
      "author": {
        "name": "Nicholas Nethercote",
        "url": "https://blog.mozilla.org/nnethercote/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "2027caf9-9c4c-4e62-b4f3-2c43ff70590b",
      "title": "Optimising CTree and strs",
      "content_text": "Once upon a time, I wrote an interpreter for Stratego Core in Rust, which I named strs. Stratego Core is the core language that Stratego is compiled to before the compiler goes further (to Java, or previously to C). A core language is an intermediate representation that is a subset of the surface language.\n\nWhile I optimised that interpreter quite a bit, I noticed that the CTree (Stratego Core Abstract Syntax Tree) that the compiler spit out for me to interpret was very unoptimised. Therefore one the plans I described at the end of the blog post was a little tool for Copy Propagation on CTree files. This post is about that tool, and the optimisations in the interpreter that made it obsolete again.",
      "url": "http://blog.jeffsmits.net/compsci/2018/05/08/optimising-stratego-core/",
      "date_published": "2018-05-08T00:00:00+00:00",
      "author": {
        "name": "Jeff Smits",
        "url": "http://blog.jeffsmits.net/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "c1e5c8e3-46e1-412d-98fe-6735ad9e4f19",
      "title": "Compile Time Prevention of SQL-Injections in Rust",
      "content_text": "SQL injection vulnerabilities have been a plague ever since such databases have been combined with user facing applications. Such vulnerabilities arise when a SQL query string is naively combined with data that is controlled by an attacker.\n\nTo mitigate, people should make use of placeholders and prepared statements provided by SQL client libraries. This separates the variable data from the actual query, ensuring that these two never mix. Pretty much all modern SQL client libraries offer this functionality, but of course, it’s still possible to mix variable data and SQL by means of string concatenation.",
      "url": "https://polyfloyd.net/post/compile-time-prevention-of-sql-injections/",
      "date_published": "2018-05-18T00:00:00+00:00",
      "author": {
        "name": "polyfloyd",
        "url": "https://polyfloyd.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "9626a0ad-d7d5-4b09-b642-a273b535504f",
      "title": "How I got into rust",
      "content_text": "There’s currently a campaign around the #RustReach program where it’s people post their, uh, Rust “origin stories”, so to say. Mine is not nearly as long as some other peoples’, but I thought I’d try my hand at this regardless.",
      "url": "https://liv.cat/how-i-got-into-rust",
      "date_published": "2018-05-16T00:00:00+00:00",
      "author": {
        "name": "liv hugger",
        "url": "https://liv.cat/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "d517cda7-1102-49bb-ab34-d14f5f0d09c0",
      "title": "Learn Rust by project",
      "content_text": "More than a year ago a friend of mine wanted to learn a bit more about Rust by trying out a project. He had a nice project in mind which suits Rust quite well I think. For fun I joined his effort and created an implementation at the same time as he did, discussing and comparing along the way. In this post I’ll tell you about the project specifics, but the point of the post is more an encouragement. If you’ve read about Rust before but haven’t tried it yet, find a small project like the one below, and learn Rust in a fun and hands-on way yourself. It’s a great programming language, I highly recommend it.",
      "url": "http://blog.jeffsmits.net/compsci/2018/04/30/learn-rust-by-project/",
      "date_published": "2018-04-30T00:00:00+00:00",
      "author": {
        "name": "Jeff Smits",
        "url": "http://blog.jeffsmits.net/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "197e6f6d-ecff-4682-8a91-fff94f38fc7a",
      "title": "My Rust Story",
      "content_text": "The #rustreach project is apparently asking people how they got into Rust, and though I wasn’t asked in person, I thought it may be useful to write down my personal Rust story. Here goes nothing.",
      "url": "https://llogiq.github.io/2018/05/15/story.html",
      "date_published": "2018-05-15T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "4ae850d3-305a-4fb4-826d-853972364683",
      "title": "On learning Rust",
      "content_text": "But recently I decided to give Rust a go. And I must admit that I’m extremely surprised. Rust, like OCaml is a pretty low level language (it is a system programming language). After six years without seeing any pointers, I can’t say that I was happy. But the Rust compiler, by being extremely safe actually makes that easy.",
      "url": "https://medium.com/@AugustinLF/on-learning-rust-69ba956a63e3",
      "date_published": "2018-05-16T14:01:05.344+00:00",
      "author": {
        "name": "Augustin Le Fèvre",
        "url": "https://medium.com/@AugustinLF"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "50ca4f3e-2051-4779-adf4-a12615b72d99",
      "title": "Rust turns three",
      "content_text": "Three years ago today, the Rust community released Rust 1.0 to the world, with our initial vision of fearless systems programming. As per tradition, we’ll celebrate Rust’s birthday by taking stock of the people and the product, and especially of what’s happened in the last year.",
      "url": "https://blog.rust-lang.org/2018/05/15/Rust-turns-three.html",
      "date_published": "2018-05-15T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "5b534e6e-4e12-4860-95d6-1317b8903d4e",
      "title": "Setting up gitlab-ci for Rust",
      "content_text": "We're going to create a multi-stage pipeline based on the one I'm using at work, featuring: a build image, linting, test & release builds, and docker containers",
      "url": "https://not.plhk.ru/gitlab-ci-rust/",
      "date_published": "2018-05-14T00:00:00+00:00",
      "author": {
        "name": "Alexander Polakov",
        "url": "https://not.plhk.ru/"
      },
      "tags": [
        "DevOps and Deployment"
      ]
    },
    {
      "id": "600945e6-9cca-43fc-abe3-8b39f5eb1766",
      "title": "nom 4.0: faster, safer, simpler parsers",
      "content_text": "It took nearly 6 months of development and the library went through nearly 5 entire rewrites. Compare that to previous major releases, which took a month at most to do. But it was worth it! This new release cleans up a lot of old bugs and unintuitive behaviours, simplifies some common patterns, is faster, uses less memory, gives better errors, but the way parsers are written stay the same. It’s like an entirely new engine under the same body work!",
      "url": "http://unhandledexpression.com/general/2018/05/14/nom-4-0-faster-safer-simpler-parsers.html",
      "date_published": "2018-05-14T13:00:00+02:00",
      "author": {
        "name": "Geoffroy Couprie",
        "url": "https://unhandledexpression.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "58fff202-4974-4db4-93ef-ad074e609a70",
      "title": "A Small Rust API with Actix",
      "content_text": "I had the need for a very small API for this website. So small, in fact, that only one endpoint was required. I've been doing a lot of development in Rust lately, so naturally Rust seemed like a good candidate to build this API in. I also wanted to try out a newer Rust web framework called Actix web. It claims to be a \"small, pragmatic, and extremely fast rust web framework\", which sounded perfect for what I needed.",
      "url": "https://stevezeidner.com/blog/rust-actix-api/",
      "date_published": "2018-05-10T00:00:00+00:00",
      "author": {
        "name": "Steve Zeidner",
        "url": "https://stevezeidner.com/blog"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "7ff4bfa8-5426-47a6-9761-3f9c4f090a61",
      "title": "My Pathway to Outreachy with Mozilla",
      "content_text": "I first heard about Outreachy from my coach last year when I was applying for Rails Girls Summer of Code (RGSoC). Although we didn’t make through RGSoC at that time, I learned a lot about how Open Source works; whether it was about learning intricacies of Git, building patience to figure out a bug among thousands of lines of code, or becoming a programmer with better problem-solving and communication skills.",
      "url": "https://medium.com/women-who-code-delhi/my-pathway-to-outreachy-with-mozilla-ede312b08efd",
      "date_published": "2018-05-14T05:54:12.289+00:00",
      "author": {
        "name": "Kanika Saini",
        "url": "https://medium.com/@WWCode_Delhi"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "d2cf9531-53d8-45dd-a9e4-0feaa3699466",
      "title": "An image viewer using Smithay's Client Toolkit",
      "content_text": "Small tutorial of using Smithay's Client Toolkit by example, building a small image viewer as a Wayland client.",
      "url": "https://smithay.github.io/sctk-image-viewer.html",
      "date_published": "2018-05-10T14:00:00+02:00",
      "author": {
        "name": "Victor Berger",
        "url": "https://smithay.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "97a47f42-b32a-45df-8473-892b94367048",
      "title": "How a Rust upgrade more than tripled the speed of my code",
      "content_text": "I’d like to share a quick story about the sheer power of LLVM and the benefits of using higher-level languages over assembly.",
      "url": "http://troubles.md/posts/the-power-of-compilers/",
      "date_published": "2018-05-11T16:07:31+02:00",
      "author": {
        "name": "troubles.md",
        "url": "http://troubles.md/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "d18e865c-71c2-4c7e-85ff-7d84e1999055",
      "title": "Performance experiments with matrix multiplication",
      "content_text": "One of Rust’s design goals is to be fast. That actually needs two distinct things from the language. First, is it shouldn’t introduce too much (preferably zero) overhead for its abstractions and be fast out of the box. Many people coming from the high level languages (python, javascript, …) find this to be the case ‒ just type the program, compile it (with --release) and it’s reasonable fast. The other, no less important, is allowing the programmer to tweak some knobs when trying to squeeze a bit more speed out of the program.\n\nI’ve decided to test the second a bit and see how far I could go. I’ve chosen matrix multiplication as a case study, for several reasons. I’ve played with it before (in my master’s thesis), it’s relatively simple and the effects of optimizing it can be great. For simplicity, I’ve decided to multiply only square matrices with power-of-two sizes, but these restrictions can be lifted in a real implementation without significantly loosing performance ‒ only the code gets somewhat more complex and hairy.",
      "url": "https://vorner.github.io/2018/05/12/Mat-perf.html",
      "date_published": "2018-05-12T00:00:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "0308ada3-604c-4240-8e94-2f9d23bc2934",
      "title": "Bulletproof Multi-Party Computation in Rust with Session Types",
      "content_text": "In Rust, objects are either owned or borrowed. While there can be multiple borrows of the same object, each object has a unique owner. When objects are passed by value, ownership is transferred to the new scope, and the old scope can no longer access it. This makes it possible to implement “consuming” methods which take self by value, and therefore can only be called once. In the party and dealer types, such methods consume the previous state and return the next state in the protocol.",
      "url": "https://blog.chain.com/bulletproof-multi-party-computation-in-rust-with-session-types-b3da6e928d5d",
      "date_published": "2018-05-11T22:25:19.221+00:00",
      "author": {
        "name": "Cathie Yun",
        "url": "https://blog.chain.com/@cathieyun"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "61b70d34-71d7-4258-b8f2-f3c2cadce508",
      "title": "On the origin of rustaceans",
      "content_text": "The “Increasing Rust’s Reach” projects are kicking off! With it, the Community Team is asking for people to describe how they contribute to Rust, to demonstrate the breadth of talent and perspective in the community. So here’s my personal Rust story!",
      "url": "https://quietmisdreavus.net/code/2018/05/11/on-the-origin-of-rustaceans/",
      "date_published": "2018-05-11T13:30:00-05:00",
      "author": {
        "name": "QuietMisdreavus",
        "url": "https://quietmisdreavus.net/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "842d15e6-6102-45a0-905c-6a25995f8dc9",
      "title": "Increasing Rust's Reach Kickoff",
      "content_text": "I have the great pleasure and privilege this year to be one of the mentors for Increasing Rust's Reach. I'll be working with Sarah and nano on WebAssembly and I'm really excited to see what we accomplish over the next few months. Even after our first meeting I just know they're gonna do some great things. Over the coming months I'll be documenting their progress, but to kick things off the Rust Community team is asking people to describe their story and how they contribute to Rust, to show off the variety and breadth of our experiences and talent in a wide variety of areas. This is my story.",
      "url": "https://mgattozzi.com/rust-reach-kickoff",
      "date_published": "2018-05-11T00:00:00+00:00",
      "author": {
        "name": "Michael Gattozzi",
        "url": "https://mgattozzi.com/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "c65ddae5-51e1-4eb4-96ab-365e0d819d0f",
      "title": "Announcing Rust 1.26",
      "content_text": "The past few releases have had a steady stream of relatively minor additions. We’ve been working on a lot of stuff, however, and it’s all starting to land in stable. 1.26 is possibly the most feature-packed release since Rust 1.0.",
      "url": "https://blog.rust-lang.org/2018/05/10/Rust-1.26.html",
      "date_published": "2018-05-10T00:00:00+00:00",
      "author": {
        "name": "The Rust Core Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4b63b225-3c2a-4e13-9cf5-a3ff4af811d0",
      "title": "Analyze disk usage with dutree",
      "content_text": "dutree is a command line tool to analyze disk usage. Features coloured output, according to the LS_COLORS environment variable, display the file system tree, ability to aggregate small files, ability to exclude files or directories, ability to compare different directories fast, and written in Rust. This tool is a mix between tree and durep.",
      "url": "https://ownyourbits.com/2018/03/25/analize-disk-usage-with-dutree/",
      "date_published": "2018-03-25T16:10:54+00:00",
      "author": {
        "name": "nachoparker",
        "url": "https://ownyourbits.com/author/cisquero_admin/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "3d49dcaa-90bd-4749-82a8-83a272d0864b",
      "title": "Memory-Mapped Registers in Tock",
      "content_text": "Microcontrollers typically use memory-mapped I/O interfaces to control hardware peripherals. Driver code uses these memory-mapped registers and fields to interact with the peripheral while providing a higher-level interface to the rest of the system. This post describes how Tock deals with register memory maps and a new tool that can automatically generate memory maps for many ARM microcontrollers.",
      "url": "https://www.tockos.org/blog/2018/mmio-registers/",
      "date_published": "2018-05-07T00:00:00+00:00",
      "author": {
        "name": "Branden Ghena",
        "url": "https://www.tockos.org/blog/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "3f740b1f-622f-4a43-a46c-6a0a13818292",
      "title": "An Open Source SDK and Serde Magic: My First Two Months as a Member of the Rust Community",
      "content_text": "So why Rust? After all, using languages like Ruby, Go, or JavaScript, I could have written numerous full stack applications at this point. Why worry about types and ownership and all that nonsense?\n\nWell in Rust, there are certain safety guarantees… yes, you know, the typical spiel. That may have been enough to interest me in rust, but it was not the reason I decided to stick with it — ultimately what drew me in was the community.",
      "url": "https://hackernoon.com/an-open-source-sdk-and-serde-magic-my-first-two-months-as-a-member-of-the-rust-community-333444af761e",
      "date_published": "2018-05-09T14:28:15.455+00:00",
      "author": {
        "name": "Robert Durst",
        "url": "https://hackernoon.com/@robdurst"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "cfa15026-8758-4249-b23c-fa41e23161c4",
      "title": "Entity-Component-System architecture for UI in Rust",
      "content_text": "For a fun project, I’ve been tinkering with xi-win, an experimental Windows front-end for xi-editor, written in Rust. I’m basically optimizing for performance, so making a number of somewhat unusual decisions. Among other things, I’m writing the UI myself, rather than using an existing toolkit or framework.",
      "url": "https://raphlinus.github.io/personal/2018/05/08/ecs-ui.html",
      "date_published": "2018-05-08T18:29:03+00:00",
      "author": {
        "name": "Raph Levien",
        "url": "https://raphlinus.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "66f3233f-afdd-49af-9cf4-cb71bcd56b33",
      "title": "sudo_pair - Plugin for sudo that requires another human to approve and monitor privileged sudo sessions",
      "content_text": "sudo is used by engineers daily to run commands as privileged users. But on some sensitive systems, you really want to ensure that no individual can act entirely autonomously. At Square, this includes applications that manage our internal access-control systems, store accounting ledgers, or even move around real money. This plugin allows us to ensure that no user can act entirely on their own authority within these systems.",
      "url": "https://github.com/square/sudo_pair",
      "date_published": "2018-05-07T18:24:54+00:00",
      "author": {
        "name": "Square",
        "url": "https://github.com/square"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "3e8fce57-40d7-4eec-9425-a2b32ef5895d",
      "title": "My Compound Passphrase List Safety Checker",
      "content_text": "I’ve been thinking about information theory, entropy, and passphrases for a couple of months now. I’ve been particularly interested in using random passphrases as passwords. An example of one of these passphrases would be “stamina turret backlands ruby”. The words have to be as purely random as possible – using your four dogs’ names is not nearly as strong as a password, as an attacker would likely guess that relatively early.",
      "url": "https://sts10.github.io/2018/05/05/compound-passphrase-list-safety-checker.html",
      "date_published": "2018-05-05T02:13:50+00:00",
      "author": {
        "name": "Sam Schlinkert",
        "url": "https://sts10.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "ef638662-6cfb-4335-9e01-baa7af9a5d95",
      "title": "Filtering Duplicate Log Entries via Rust and Runiq",
      "content_text": "Whilst sort -u is super easy to use, the requirement of sorting your data cannot be overlooked as it means your entire file needs to be buffered into memory at once. This is not always possible, or even if possible it's not always desired. On the other hand uniq is great, but in order to sort your data in advance you still have the same issue. It was due to this that I wrote runiq, which is essentially an optimized and more flexible implementation of both of the aforemention tools for the purposes of duplicate filtering. It performs much faster, with much less memory, and does not require sorted input (although it can optimize this case).",
      "url": "https://whitfin.io/filtering-unique-logs-using-rust/",
      "date_published": "2018-05-07T03:17:28+00:00",
      "author": {
        "name": "Isaac Whitfield",
        "url": "https://whitfin.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "a7a257bb-3da8-42f1-b341-dad7221b9ab3",
      "title": "Rust: Enterprise Services Need Not Suck",
      "content_text": "I practice Barbarian Leadership. Standing on the back lines with hand in pocket giving orders is missing the fun. More importantly, knowledge is created on the cutting edge of action. People you work with know this. They value modern, non-hierarchical organizations where a leader dives into the fray, sword in hand, and gets to know intimately the problems and tools for solving them. So I dove into the fight despite knowing that it is “hard language”.",
      "url": "https://medium.com/@paulhoughton/rust-enterprise-services-need-not-suck-679b79edcab5",
      "date_published": "2018-05-07T12:59:10.610+00:00",
      "author": {
        "name": "Paul Houghton",
        "url": "https://medium.com/@paulhoughton"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "7f406b9a-226a-4498-b708-59b14401a9af",
      "title": "Making microservices in Rust",
      "content_text": "This is a small idea that I have been wanting to put together for quite some time now and finally have managed to get the time and most importantly experience in Rust to finally try something a little more than just small projects. One area that I think Rust is really making a decent headway in in the web domain, which I am assuming is likely due to its origin from Firefox. So I wanted to see if I could put together a really basic CRUD micro-service doing the ever so original TODO functionality.",
      "url": "https://maccoda.github.io/rust-web-frameworks/",
      "date_published": "2018-05-01T00:00:00+00:00",
      "author": {
        "name": "Dylan Maccora",
        "url": "https://maccoda.github.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "7fe0f8aa-fbe1-4fef-bba3-e64b98b00bc2",
      "title": "Procedural Macros in Rust",
      "content_text": "Procedural macros are a really powerful language feature in Rust and something I haven’t seen in many other languages.\n\nThere are a heap of tutorials out there for procedural macros, including in The Rust Reference, and the first edition of the Rust Book. One of the more entertaining (and useful) posts is by Zach Mitchell where you get to “learn Rust procedural macros with Nic Cage”.\n\nI won’t go into depth about what procedural macros are and why they’re so powerful.",
      "url": "https://joshleeb.com/posts/rust-procedural-macros/",
      "date_published": "2018-05-04T00:00:00+00:00",
      "author": {
        "name": "Josh Leeb-du Toit",
        "url": "https://joshleeb.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "cb34566e-4c96-4191-9179-eca6bc9ac07f",
      "title": "Embedding Rustup into Cargo and the Wrapper",
      "content_text": "One of my issue when building a project from scratch is the amount of manual steps required to be able to run a simple project. This is not so much a concern when you are a single developer but the larger the team, the most obvious it becomes.",
      "url": "https://medium.com/@tibotz/embedding-rustup-into-cargo-and-the-wrapper-d5b447f381fc",
      "date_published": "2018-05-04T05:53:28.079+00:00",
      "author": {
        "name": "Tibo Delor",
        "url": "https://medium.com/@tibotz"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "266098f6-079e-42d6-8d15-3a7867687f49",
      "title": "Refactoring Apache Arrow to use traits and generics",
      "content_text": "I am currently working on a refactor of the Rust implementation of Apache Arrow to change the way that arrays are represented. This is a relatively large change even though this is a tiny codebase so far and I thought it would be good to write up this blog post to explain why I think this is needed. I think this information will also be interesting for any Rust developer who is struggling with making the right choice between (or using the right combination of) enums, structs, generics and traits. I was inspired to write this up after reading this blog post that was posted to Reddit just a few days ago.",
      "url": "https://andygrove.io/2018/05/apache-arrow-traits-generics/",
      "date_published": "2018-05-04T00:00:00+00:00",
      "author": {
        "name": "Andy Grove",
        "url": "https://andygrove.io/blog"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ca367462-e3ba-4b03-9b46-05b7850bdcba",
      "title": "Encapsulating Lifetime of the Field",
      "content_text": "This is a post about an annoying Rust pattern and an annoyingworkaround, without a good solution :)",
      "url": "https://matklad.github.io/2018/05/04/encapsulating-lifetime-of-the-field.html",
      "date_published": "2018-05-04T17:47:23+00:00",
      "author": {
        "name": "Aleksey Kladov",
        "url": "https://matklad.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "cf489f8e-70b9-4669-8424-03e79fab2ad8",
      "title": "Introducing seiri — a music 🎶 manager for lots of music",
      "content_text": "TL;DR seiri is a lightweight music manager written (mostly) in Rust that helps keep huge music libraries organized. Try it today at chyyran.moe/seiri.",
      "url": "https://medium.com/@chyyran/introducing-seiri-a-music-manager-for-lots-of-music-990b464b3387",
      "date_published": "2018-05-03T23:35:26.009+00:00",
      "author": {
        "name": "Ronny Chan",
        "url": "https://medium.com/@chyyran"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "97c03488-1331-4858-baf0-26e1d0fca6f0",
      "title": "Embedded Rust: Peripherals (and low-level stuffs) - take 1",
      "content_text": "First of all, low level stuffs such as peripheral drivers should be hidden from the application developer. They should not be able to access directly the registers and mess with the peripheral states/control. The wrong flag in the wrong register can lead to dramatic failures and even damages to the products.",
      "url": "https://ithinuel.me/embedded-rust-peripherals-take-1/",
      "date_published": "2018-04-28T00:00:00+00:00",
      "author": {
        "name": "Wilfried Chauveau",
        "url": "https://ithinuel.me/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "47521515-a430-41a1-bcdc-bb68b3f9d646",
      "title": "Cross compiling rust with docker",
      "content_text": "I am giving embedded systems another go with a side project of mine. The device has a single purpose. It captures network packets, and forwards them to a server. It is easily achieved with LIBpcap, but the device makes it interesting.\n\nThe GL-AR150 sells as a mini smart router. The limited storage makes it hard to install language interpreters, or virtual machines. This pushed me to look into standalone executables, and how to compile them for other devices.",
      "url": "https://medium.com/@pvinchon/cross-compiling-rust-with-docker-17d846adae4d",
      "date_published": "2018-04-30T23:01:01.249+00:00",
      "author": {
        "name": "Philippe",
        "url": "https://medium.com/@pvinchon"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "0a6c62ed-f16b-4b57-8ff1-3984e08f204e",
      "title": "How fast can we compile Rust hello world?",
      "content_text": "Seeing Nick Nethercote’s blog post about speeding up the compiler, I started wondering just how fast could a Rust compiler be? How fast could we compile a simple example? How fast can we compile a Rust hello world?",
      "url": "http://www.jonathanturner.org/2018/05/how-fast-can-we-compile-rust-hello-world.html",
      "date_published": "2018-05-03T00:00:00+00:00",
      "author": {
        "name": "Jonathan Turner",
        "url": "http://www.jonathanturner.org/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "2cf6bb87-842b-4d53-906d-6036d7e3eaf5",
      "title": "Can Rust speed up your Azure Functions?",
      "content_text": "Using Rust on Microsoft Azure Functions with web assembly",
      "url": "https://blog.x5ff.xyz/blog/azure-functions-wasm-rust/",
      "date_published": "2018-04-30T00:00:00+00:00",
      "author": {
        "name": "Claus",
        "url": "https://blog.x5ff.xyz/blog"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "df6d6cbf-58fc-49e6-a582-446c255a3d39",
      "title": "gtk-test - A crate for testing GTK UIs",
      "content_text": "Currently, testing UIs is difficult, but with gtk-test you can test basically everything UI-related way more simply.",
      "url": "http://gtk-rs.org/blog/2018/05/02/who-talked-about-testing.html",
      "date_published": "2018-05-02T00:00:00+00:00",
      "author": {
        "name": "Gtk-rs",
        "url": "http://gtk-rs.org/blog"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "91fb984c-4084-4b2c-84e5-ebda94169657",
      "title": "WASM+Rust Tutorial",
      "content_text": "A project used for a meetup talk about getting started with rust & wasm",
      "url": "https://freemasen.github.io/wasm_tutorial/",
      "date_published": "2018-05-03T07:30:00+10:00",
      "author": {
        "name": "Robert Masen",
        "url": "https://github.com/FreeMasen"
      },
      "tags": [
        "Getting Started",
        "Web and Network Services"
      ]
    },
    {
      "id": "103f9c4f-f4f9-4e15-98b2-0d2b1db6b792",
      "title": "kanban-app - Kanban board built with Rust and Elm without Electron",
      "content_text": "This is a web-based Kanban board application, built with Elm and Rust. The only different from this application and hundred thousands of web-based application out there is: We don't need Electron!. Instead, it use native WebView (WebKit for Linux/macOS, and MSHTML on Windows),",
      "url": "https://github.com/huytd/kanban-app",
      "date_published": "2018-05-03T07:30:00+10:00",
      "author": {
        "name": "Huy Tr.",
        "url": "https://github.com/huytd"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "83c972be-a658-4858-9277-474eebee81a1",
      "title": "Introducing Sentry for Rust",
      "content_text": "As happy Rust users ourselves, it makes us even happier to be able to say that we now have a Sentry Rust SDK. This means you and your Fungiculture can now report panics, failures, and other types of incidents to Sentry.\n\nNot only is the SDK new and fancy, it is also one of the first ones that follows our new API guidelines for Sentry SDKs, which makes it even newer and fancier than you might normally expect.",
      "url": "https://blog.sentry.io/2018/05/01/sentry-for-rust",
      "date_published": "2018-05-01T00:00:00+00:00",
      "author": {
        "name": "Armin Ronacher",
        "url": "https://blog.sentry.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "d9100be3-bb0c-4ea5-9aff-3fa3b7946b12",
      "title": "Rust in production at Figma",
      "content_text": "How Mozilla’s new language dramatically improved our server-side performance.",
      "url": "https://blog.figma.com/rust-in-production-at-figma-e10a0ec31929",
      "date_published": "2018-05-02T15:14:00.276+00:00",
      "author": {
        "name": "Evan Wallace",
        "url": "https://blog.figma.com/@evanwallace"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "bcdee764-328b-440f-b1de-d4f4d4c14604",
      "title": "New Tokio release, now with filesystem support",
      "content_text": "It took a bit longer than I had initially hoped (as it always does), but a new Tokio version has been released. This release includes, among other features, a new set of APIs that allow performing filesystem operations from an asynchronous context.",
      "url": "https://tokio.rs/blog/2018-05-tokio-fs/",
      "date_published": "2018-05-02T00:00:00+00:00",
      "author": {
        "name": "Carl Lerche",
        "url": "https://tokio.rs/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "fce158e9-2134-4c57-bbc8-67483dc0b0d8",
      "title": "rustref - memorable Rust reference links",
      "content_text": "This contains shorthand URLs for navigating to Rust documentation.",
      "url": "https://rustref.com/",
      "date_published": "2018-04-27T20:12:36+00:00",
      "author": {
        "name": "Mackenzie Hauck",
        "url": "https://github.com/nocduro"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4539d16d-f909-4fff-9eda-dc6763fa7a3b",
      "title": "Mutagen – More opportunities",
      "content_text": "Recently I gave a talk at our Rust Meetup about mutagen, and I also showed how our opportunistic mutations work (I however left out that gnarly thing about shifts, but in my defense I was short on time). That got me thinking whether we always do the right thing elsewhere.",
      "url": "https://llogiq.github.io/2018/05/01/moreop.html",
      "date_published": "2018-05-01T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "b7e3c6ef-7be3-4f63-b8ad-04affb29716c",
      "title": "Ray Tracing in a Weekend in Rust",
      "content_text": "I was inspired to work through Peter Shirley’s Ray Tracing in a Weekend mini book (for brevity RTIAW) but I wanted to write it in Rust instead of the C++ that’s used in the book. I found out about the book via @aras_p’s blog series about a toy path tracer he’s been building.",
      "url": "https://bitshifter.github.io/blog/2018/04/29/rust-ray-tracer-in-one-weekend/",
      "date_published": "2018-04-29T00:00:00+00:00",
      "author": {
        "name": "bitshifter",
        "url": "https://bitshifter.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "0c0d7114-9e80-4e4f-868d-51de6778bed1",
      "title": "KRust: A Formal Executable Semantics of Rust",
      "content_text": "Rust is a new and promising high-level system programming language. It provides both memory safety and thread safety through its novel mechanisms such as ownership, moves and borrows. Ownership system ensures that at any point there is only one owner of any given resource. The ownership of a resource can be moved or borrowed according to the lifetimes. The ownership system establishes a clear lifetime for each value and hence does not necessarily need garbage collection. These novel features bring Rust high performance, fine low-level control of C and C++, and unnecessity in garbage collection, which differ Rust from other existing prevalent languages. For formal analysis of Rust programs and helping programmers learn its new mechanisms and features, a formal semantics of Rust is desired and useful as a fundament for developing related tools. In this paper, we present a formal executable operational semantics of a realistic subset of Rust, called KRust. The semantics is defined in K, a rewriting-based executable semantic framework for programming languages. The executable semantics yields automatically a formal interpreter and verification tools for Rust programs. KRust has been thoroughly validated by testing with hundreds of tests, including the official Rust test suite.",
      "url": "https://arxiv.org/abs/1804.10806",
      "date_published": "2018-04-28T00:00:00+00:00",
      "author": {
        "name": "Feng Wang, Fu Song, Min Zhang, Xiaoran Zhu, Jun Zhang",
        "url": "https://arxiv.org/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "7812ff10-6f3d-4990-8832-9b5eb63780d8",
      "title": "Servo engines written in Rust deliver memory safety and multithreading",
      "content_text": "In 2012, Mozilla started the Servo project, a community effort to create new open source browser components that can take advantage of multicore hardware to improve speed, stability and responsiveness. Servo is comparable to WebKit, an open source browser engine that is the foundation of Apple’s Safari browser. (Other browser engines include Blink, EdgeHTML, and Gecko.) The difference is that Servo is written in the Rust programming language, bringing lightning-fast performance and memory safety to browser internals. Rust code can drastically cut down the number of critical bugs that affect browser engines. Servo uses a modular architecture and currently runs on Linux, macOS, Windows, and Android operating systems.",
      "url": "https://research.mozilla.org/servo-engines/",
      "date_published": "2018-05-01T16:04:53+00:00",
      "author": {
        "name": "Mozilla Research",
        "url": "https://research.mozilla.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "c38eff1e-2560-4373-a3d6-9e3ea04853ad",
      "title": "bat - print code to the terminal with syntax highlighting and git integration",
      "content_text": "bat supports syntax highlighting for a large number of programming and markup languages. bat also communicates with git to show modifications with respect to the index (see left side bar).",
      "url": "https://github.com/sharkdp/bat",
      "date_published": "2018-05-01T00:00:00+00:00",
      "author": {
        "name": "David Peter",
        "url": "https://github.com/sharkdp"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "e5b4d06d-c604-42fa-9329-e4bec9f44cfd",
      "title": "Dataframes: Traits, Enums, Generics, and Dynamic Typing",
      "content_text": "I’m attempting to build a dataframe in Rust. I implemented a pattern using traits, generics, and enums in conjunction to deal with columns of different datatypes while allowing runtime reflection for accessing the data stored in a column.",
      "url": "https://blog.hwc.io/posts/dataframe1/",
      "date_published": "2018-03-28T09:57:53-04:00",
      "author": {
        "name": "hwc",
        "url": "https://blog.hwc.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "803b6bf7-0cde-4a49-9e63-a117e95de2c0",
      "title": "Adventures in Rust",
      "content_text": "A tale of my time in Rust-land",
      "url": "https://dev.to/tmr232/adventures-in-rust-56fc",
      "date_published": "2018-04-27T00:00:00+00:00",
      "author": {
        "name": "Tamir Bahar",
        "url": "https://dev.to/tmr232"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "18f0f723-af8c-4415-9ea4-6578a641729a",
      "title": "Writing an OS in Rust: Unit Testing",
      "content_text": "This post explores unit testing in no_std executables using Rust's built-in test framework. We will adjust our code so that cargo test works and add some basic unit tests to our VGA buffer module.",
      "url": "https://os.phil-opp.com/unit-testing/",
      "date_published": "2018-04-29T00:00:00+00:00",
      "author": {
        "name": "Philipp Oppermann",
        "url": "https://os.phil-opp.com/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "73443ff7-2113-490d-9249-430c95c1534a",
      "title": "Flipping some bits high on STM32VLDISCOVERY board",
      "content_text": "Here I will document the steps to get started with STM32VLDISCOVERY board. We will take my favourite “from scratch” approach. That way, we build the final thing step by step while building our understanding of how it all fits together.",
      "url": "http://nercury.github.io/rust/embedded/experiments/2018/04/29/rust-embedded-01-discovery-vl-flipping-bits.html",
      "date_published": "2018-04-29T00:00:00+00:00",
      "author": {
        "name": "Nerijus Arlauskas",
        "url": "http://nercury.github.io/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "64356c91-6a6c-40d2-acd9-cbde11eaace4",
      "title": "Using LLVM from Rust, to generate WebAssembly",
      "content_text": "Hopefully this post helps jumpstart those who want to use LLVM from Rust. I also include how one could use this to generate WebAssembly, but the first part of this post is target platform agnostic.",
      "url": "https://medium.com/@jayphelps/using-llvm-from-rust-to-generate-webassembly-93e8c193fdb4",
      "date_published": "2018-04-29T00:49:36.802+00:00",
      "author": {
        "name": "Jay Phelps",
        "url": "https://medium.com/@jayphelps"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "1d371a92-135a-4456-aca8-5537c9d53c81",
      "title": "Installing Rust Offline",
      "content_text": "I wanted to use Rust on an offline Linux system, but it seemed like there isn’t a nice guide to install Rust and some popular packages all in one go (like Anaconda, though what I describe here is much more ghetto), so I decided to summarize the procedure to install the Rust toolchain and some popular libraries all in one go on a system with no internet access.",
      "url": "https://hatsunearu.github.io/2018/04/29/rust-offline/",
      "date_published": "2018-04-29T14:00:00+00:00",
      "author": {
        "name": "hatsunearu",
        "url": "https://hatsunearu.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "b4ecd378-f152-4049-b281-8b519cdb870d",
      "title": "c3r3s - Serial 64-bit bootloader for the Raspberry Pi 3",
      "content_text": "c3r3s is a tiny (1KB binary) serial bootloader for loading \"bare metal\" 64-bit kernels on the Raspberry Pi 3. You can iterate on your own kernel code without constantly moving the SD card back and forth.",
      "url": "https://github.com/robey/c3r3s",
      "date_published": "2018-05-01T07:22:00+10:00",
      "author": {
        "name": "Robey Pointer",
        "url": "https://github.com/robey"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "1c59d8b2-c755-4f10-859e-4847be81bc4c",
      "title": "How to speed up the Rust compiler in 2018",
      "content_text": "18 months ago I wrote about some work I did to speed up the Rust compiler (rustc). I’ve recently taken this work up again. Also, in the meantime rustc’s build system has been replaced and its benchmark suite has been overhauled. So it’s a good time for an update.",
      "url": "https://blog.mozilla.org/nnethercote/2018/04/30/how-to-speed-up-the-rust-compiler-in-2018/",
      "date_published": "2018-04-30T04:13:45+00:00",
      "author": {
        "name": "Nicholas Nethercote",
        "url": "https://blog.mozilla.org/nnethercote/"
      },
      "tags": [
        "Language",
        "Performance"
      ]
    },
    {
      "id": "caa2a44c-fd86-4221-92ba-226a3834e0a4",
      "title": "JARVIS - Notes on Rust Crates From Writing an RSS Reader",
      "content_text": "Way back in the dim mists of history (back in university) I wrote myself a custom RSS reader in Java and called it JARVIS1. You see, I read a lot of webcomics. Like, a lot. Some webcomics provide RSS feeds, but some don’t, and as my collection grew it started to become a hassle to use Firefox’s live bookmarks to manage it all. Ultimately, I wrote up a quick Swing GUI to use as a single interface for keeping up with blogs and tracking which comics had published updates since the last time I’d checked2.",
      "url": "https://bheisler.github.io/post/jarvis-impressions-of-rust-libraries/",
      "date_published": "2018-04-22T16:00:00-06:00",
      "author": {
        "name": "Brook Heisler",
        "url": "https://bheisler.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "5e0ef28e-278a-48f1-92d1-256a37f76e47",
      "title": "Borrowing in async code",
      "content_text": "The networking working group is pushing hard on async/await notation for Rust, and @withoutboats in particular wrote a fantastic blog series working through the design space. I wanted to talk a little bit about some of the implications of async/await, which may not have been entirely clear. In particular, async/await is not just about avoiding combinators; it completely changes the game for borrowing.",
      "url": "http://aturon.github.io/2018/04/24/async-borrowing/",
      "date_published": "2018-04-24T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "282a816f-1c0b-4efc-9939-0674020ee1ef",
      "title": "An alias-based formulation of the borrow checker",
      "content_text": "Ever since the Rust All Hands, I’ve been experimenting with an alternative formulation of the Rust borrow checker. The goal is to find a formulation that overcomes some shortcomings of the current proposal while hopefully also being faster to compute. I have implemented a prototype for this analysis. It passes the full NLL test suite and also handles a few cases – such as #47680 – that the current NLL analysis cannot handle. However, the performance has a long way to go (it is currently slower than existing analysis). That said, I haven’t even begun to optimize yet, and I know I am doing some naive and inefficient things that can definitely be done better; so I am still optimistic we’ll be able to make big strides there.",
      "url": "http://smallcultfollowing.com/babysteps/blog/2018/04/27/an-alias-based-formulation-of-the-borrow-checker/",
      "date_published": "2018-04-27T00:00:00-04:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "67b88f7c-7b39-43ad-863a-0d03dd180faf",
      "title": "Reflections on Rust, and the Sand Castle Metaphor",
      "content_text": "A month ago, I wrote about how I was frustrated with my progress in Rust. These days, I’m still no expert, but I’ve made progress.",
      "url": "https://brandur.org/fragments/rust-reflections",
      "date_published": "2018-04-27T00:00:00+00:00",
      "author": {
        "name": "Brandur Leach",
        "url": "https://brandur.org"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "49014ace-e742-49f8-887a-8fa7d1b627cc",
      "title": "Rust Case Study: Chucklefish Taps Rust to Bring Safe Concurrency to Video Games [pdf]",
      "content_text": "Chucklefish, an independent game studio based in London, publishes hit video games like Stardew Valley and Starbound. Now, the company is developing its next game, code-named Witchbrook, using the Rust programming language instead of C++. Why the switch? Two main reasons: to get better performance on multiprocessor hardware and to have fewer crashes during game play.",
      "url": "https://www.rust-lang.org/pdfs/Rust-Chucklefish-Whitepaper.pdf",
      "date_published": "2018-04-23T17:38:56+00:00",
      "author": {
        "name": "The Rust Project Developers",
        "url": "https://www.rust-lang.org/en-US/whitepapers.html"
      },
      "tags": [
        "Language",
        "Games and Graphics"
      ]
    },
    {
      "id": "8576f0a6-2866-4ac7-af07-dffd8e4ea019",
      "title": "Rust+GNOME Hackfest #3",
      "content_text": "Last week, I was working on improving the integration of Rust with GNOME libraries at the third Hackfest, which happened this time in Madrid.",
      "url": "http://antoyo.ml/rust-gnome-hackfest-madrid",
      "date_published": "2018-04-24T00:00:00+00:00",
      "author": {
        "name": "Antoni Boucher",
        "url": "http://antoyo.ml/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "76fb9740-07d0-45c8-a6b3-17534f293c54",
      "title": "Ask an expert: How do you maintain Rust?",
      "content_text": "From team structure and annual surveys to RFCs and the release process, a staff research engineer on Mozilla’s Rust team shares what it takes.",
      "url": "https://increment.com/programming-languages/maintaining-rust/",
      "date_published": "2018-04-26T19:00:00+00:00",
      "author": {
        "name": "Jonathan Turner",
        "url": "https://increment.com/programming-languages/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "79a75489-f371-461e-8943-273f7b60e620",
      "title": "Hammond: A Podcast Client for the GNOME Desktop",
      "content_text": "Hammond has been in development since Sep 2017. It makes use of the Rust bindings to GNOME libraries as well as diesel, serde, reqwest, and a number other crates to build a beautiful, native application that feels right at home on the GNOME desktop.",
      "url": "https://gitlab.gnome.org/World/hammond",
      "date_published": "2018-04-27T21:12:00+10:00",
      "author": {
        "name": "Jordan Petridis",
        "url": "https://gitlab.gnome.org/alatiera"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "2925c583-7c70-400d-8f50-f8c06b3dc0fb",
      "title": "How does dynamic dispatch work in WebAssembly?",
      "content_text": "C, C++, and Rust all have some capability for dynamic dispatch: function pointers, virtual methods, and trait objects. On native targets like x86, all these forms compile down into a jump to a dynamic address. What do these forms compile down into when targeting WebAssembly?",
      "url": "http://fitzgeraldnick.com/2018/04/26/how-does-dynamic-dispatch-work-in-wasm.html",
      "date_published": "2018-04-26T00:00:00-07:00",
      "author": {
        "name": "Nick Fitzgerald",
        "url": "http://fitzgeraldnick.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "096f02f7-0ce4-41ef-8896-f8209ca126f5",
      "title": "GLib/GIO async operations and Rust futures + async/await",
      "content_text": "With the latest GIT version of the Rust bindings for GLib, GTK, etc it is now possible to make use of the Rust futures infrastructure for GIO async operations and various other functions. This should make writing of GNOME, and in general GLib-using, applications in Rust quite a bit more convenient.",
      "url": "https://coaxion.net/blog/2018/04/glib-gio-async-operations-and-rust-futures-async-await/",
      "date_published": "2018-04-23T08:46:32+00:00",
      "author": {
        "name": "Sebastian Dröge",
        "url": "https://coaxion.net/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4eb3e72f-dec7-445e-9cbe-5464f3df1ceb",
      "title": "Rust memory safety revolution",
      "content_text": "This introduction is written for people, who are programmers, but don’t know Rust or are at the very beginning of learning it. It’s easier to understand for readers who know C, C++ or other language with manually managed memory as well as some with garbage collector. It’s a high-level introduction intended to present core Rust concepts and encourage further learning. It’s not a tutorial, there is no Hello Rust in the end.",
      "url": "https://anixe.pl/content/news/rust_memory_safety_revolution",
      "date_published": "2018-04-03T00:00:00+00:00",
      "author": {
        "name": "Igor Żuk",
        "url": "https://anixe.pl/news"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "9cb9976f-4023-496c-9bdf-b5eff31fe5bb",
      "title": "Flipper - A new embedded development paradigm",
      "content_text": "Flipper is a new kind of development board that redefines the embedded software development cycle by offloading development/debugging into higher level languages + tools. One of the languages that we're putting the most focus into adding support for is Rust. We would love to see more embedded done with Rust and Flipper provides a great springboard for existing Rust developers to familiarize themselves with embedded hardware using the tools they already know how to use.",
      "url": "https://www.reddit.com/r/rust/comments/8d8vqn/flipper_a_new_embedded_development_paradigm/",
      "date_published": "2018-04-18T20:28:34+00:00",
      "author": {
        "name": "George Morgan",
        "url": "https://www.reddit.com/user/george-morgan"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "017d9ce1-f259-4d95-bffc-b3d44dfc8cde",
      "title": "Dev-tools in 2018",
      "content_text": "This is a bit late (how is it the middle of April already?!), but the dev-tools team has lots of exciting plans for 2018 and I want to talk about them! Our goals for 2018 Here's a summary of our goals for the year. Ship it! We want to ship",
      "url": "https://www.ncameron.org/blog/dev-tools-in-2018/",
      "date_published": "2018-04-19T19:31:53+00:00",
      "author": {
        "name": "Nick Cameron",
        "url": "http://www.ncameron.org/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "36e40f73-b836-49cd-a558-d93a238c7386",
      "title": "fastmod - A fast partial replacement for the codemod tool",
      "content_text": "fastmod is a fast partial replacement for codemod. Like codemod, it is a tool to assist you with large-scale codebase refactors, and it supports most of codemod's options. fastmod's major philosophical difference from codemod is that it is focused on improving the use case \"I want to use interactive mode to make sure my regex is correct, and then I want to apply the regex everywhere\". For this use case, it offers much better performance than codemod",
      "url": "https://github.com/facebookincubator/fastmod",
      "date_published": "2018-04-19T20:30:07+00:00",
      "author": {
        "name": "Facebook Incubator",
        "url": "https://github.com/facebookincubator"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "3a1ac912-0af7-47cb-b540-1cb3efc46956",
      "title": "Madrid GNOME+Rust Hackfest, part 2",
      "content_text": "Hacking on gnome-class continues apace! Philippe updated our dependencies. Alberto made the syntax for per-instance private structsmore ergonomic, and then made that code nice and compact. Martin improved our conversion from CamelCase to snake_case for code generation. Daniel added initial support for GObject properties. This is not finished...; ",
      "url": "https://people.gnome.org/~federico/blog/madrid-gnome-rust-2.html",
      "date_published": "2018-04-20T08:59:23+02:00",
      "author": {
        "name": "Federico Mena Quintero",
        "url": "https://people.gnome.org/~federico/blog/index.html"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "6e75a3dc-d157-4f13-878c-5111cd6b03a2",
      "title": "Small WebAssembly Binaries with Rust + Emscripten",
      "content_text": "The Rust language is one of the earliest adopters of WebAssembly, and it has more than one way to compile to it:",
      "url": "https://kripken.github.io/blog/binaryen/2018/04/18/rust-emscripten.html",
      "date_published": "2018-04-18T17:52:56+00:00",
      "author": {
        "name": "Alon Zakai",
        "url": "https://kripken.github.io/blog/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "4096f192-ba2d-4a25-b1be-f3e4b0b40b51",
      "title": "BYO Standard: An Explorer's Guide to Complier Plugins",
      "content_text": "The Rust programming language provides powerful guarantees around memory and thread safety. It also exposes all the knobs required for implementing custom rules, enabling a project to make additional guarantees and enforce opinions on best practice. Embedded standards are very opinionated about software practices—like using floating point values as loop counters or the number of possible exit points of a function—and Rust’s defaults don’t prevent every runtime panic (for example, recursion that goes too deep and overflows the stack).\n\nFor PolySync, a runtime panic means the potential for an unsafe situation on the road, and with that in mind, we’ve explored ways to restrict that potential. Of course, we aren’t the only ones thinking about ways to improve the quality of code at compile time by enforcing the right rules for the job. Active projects like rust-clippy are working to do that too by providing lints to supplement the rustc defaults.\n\nIn this post we’ll explore how to enforce a rule by prohibiting a practice we’ve formed an opinion about, the indexing of a vector or an array.",
      "url": "https://polysync.io/explorers-guide-to-compiler-plugins",
      "date_published": "2018-04-21T00:00:00+00:00",
      "author": {
        "name": "Shea Newton",
        "url": "https://polysync.io/blog"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ba2b10d2-16a7-4036-8e8f-1fe0d113b0ac",
      "title": "Why Rust's error handling is awesome",
      "content_text": "This post is about the process of transforming something you would write as a one-off script in Python (or any other scripting language) into a library including error handling.",
      "url": "http://rantsideasstuff.com/posts/2018/04/20-rust-error-handling-awesome/",
      "date_published": "2018-04-20T10:00:00+02:00",
      "author": {
        "name": "Zoran Zaric",
        "url": "http://rantsideasstuff.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d0b170a0-b0c5-4d33-b3f2-e0e0dcac1872",
      "title": "Pijul 0.10",
      "content_text": "I’m pleased to announce the new release of Pijul, version 0.10. Pijul is an easy to use, distributed and fast version control system. This release has been a long time coming, but brings in an important number of new features and stability enhancements.",
      "url": "https://pijul.org/posts/2018-04-21-pijul-0.10/",
      "date_published": "2018-04-21T15:13:57+02:00",
      "author": {
        "name": "Pijul",
        "url": "https://pijul.org/posts"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "86f4fa21-5194-4439-a131-85c3a587a1fd",
      "title": "Rust+GNOME Hackfest in Madrid",
      "content_text": "Last week was the third edition of the Rust+GNOME hackfest. What about talking a bit about what we achieved? The goals of this edition were: Improve gnome-class, improve gtk-rs continuous integration process, improve gtk-rs crates bindings. I'm happy to say that we were able to achieve all of these goals!",
      "url": "https://blog.guillaume-gomez.fr/articles/2018-04-21+Rust%2BGNOME+Hackfest+in+Madrid",
      "date_published": "2018-04-21T00:00:00+00:00",
      "author": {
        "name": "Guillaume Gomez",
        "url": "https://blog.guillaume-gomez.fr/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "53831192-f7e2-4841-898f-f39f1cd9f1ff",
      "title": "Madrid GNOME+Rust Hackfest, part 1",
      "content_text": "I'm in Madrid since Monday, at the third GNOME+Rust hackfest! The OpenShine folks are kindly letting us use their offices, on the seventh floor of a building by the Cuatro Caminos roundabout.\n\nI am very, very thankful that this time everyone seems to be working on developing gnome-class. It's a difficult project for me, and more brainpower is definitely welcome — all the indirection, type conversion, GObject obscurity, and procedural macro shenanigans definitely take a toll on oneself.",
      "url": "https://people.gnome.org/~federico/blog/madrid-gnome-rust-1.html",
      "date_published": "2018-04-18T02:55:12-05:00",
      "author": {
        "name": "Federico Mena Quintero",
        "url": "https://people.gnome.org/~federico/blog/index.html"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "43c290f5-4178-431d-9874-5e24cde01299",
      "title": "Hello wasm-pack!",
      "content_text": "wasm-pack is a tool for assembling and packaging Rust crates that target WebAssembly. These packages can be published to the npm Registry and used alongside other packages. This means you can use them side-by-side with JS and other packages, and in many kind of applications, be it a Node.js server side app, a client-side application bundled by Webpack, or any other sort of application that uses npm dependencies. You can find wasm-pack on crates.io and GitHub.",
      "url": "https://hacks.mozilla.org/2018/04/hello-wasm-pack/",
      "date_published": "2018-04-18T14:54:13+00:00",
      "author": {
        "name": "Ashley Williams",
        "url": "https://hacks.mozilla.org/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "18ca5e39-fd8f-4739-95ef-9daaef6d525d",
      "title": "Announcing cargo src (beta)",
      "content_text": "cargo src is a new tool for exploring your Rust code. It is a cargo plugin which runs locally and lets you navigate your project in a web browser. It has syntax highlighting, jump to definition, type on hover, semantic search, find uses, find impls, and more.",
      "url": "https://ncameron.org/blog/announcing-cargo-src-beta/",
      "date_published": "2018-04-18T20:52:39+00:00",
      "author": {
        "name": "Nick Cameron",
        "url": "http://www.ncameron.org/blog/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "89612f07-abeb-400f-8bf1-0826601e17d1",
      "title": "Rust pattern: Rooting an Rc handle",
      "content_text": "I’ve decided to do a little series of posts about Rust compiler errors. Each one will talk about a particular error that I got recently and try to explain (a) why I am getting it and (b) how I fixed it. The purpose of this series of posts is partly to explain Rust, but partly just to gain data for myself. I may also write posts about errors I’m not getting – basically places where I anticipated an error, and used a pattern to avoid it. I hope that after writing enough of these posts, I or others will be able to synthesize some of these facts to make intermediate Rust material, or perhaps to improve the language itself.",
      "url": "http://smallcultfollowing.com/babysteps/blog/2018/04/16/rust-pattern-rooting-an-rc-handle/",
      "date_published": "2018-04-16T00:00:00-04:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "f6e1bdda-278a-4077-8d2f-49417303637f",
      "title": "dust - A more intuitive version of du in Rust",
      "content_text": "Dust is meant to give you an instant overview of which directories are using disk space without requiring sort or head. Dust will print a maximum of 1 'Did not have permissions message'. Dust will list the 15 biggest sub directories or files and will smartly recurse down the tree to find the larger ones. There is no need for a '-d' flag or a '-h' flag. The largest sub directory will have its size shown in red",
      "url": "https://github.com/bootandy/dust",
      "date_published": "2018-04-18T07:26:00+10:00",
      "author": {
        "name": "andy boot",
        "url": "https://github.com/bootandy"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "447b930e-7350-4ef3-80d4-2ec23a4c5708",
      "title": "Implementing multiprocessing.pool.ThreadPool from Python in Rust",
      "content_text": "In this post, we will implement multiprocessing.pool.ThreadPool from Python in Rust. It represents a thread-oriented version of multiprocessing.Pool, which offers a convenient means of parallelizing the execution of a function across multiple input values by distributing the input data across processes. We will use an existing thread-pool implementation and focus on adjusting its interface to match that of multiprocessing.pool.ThreadPool.",
      "url": "https://blog.petrzemek.net/2018/04/16/implementing-multiprocessing-pool-threadpool-from-python-in-rust/",
      "date_published": "2018-04-16T15:14:15+00:00",
      "author": {
        "name": "Petr Zemek",
        "url": "https://blog.petrzemek.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c3057e94-6b2a-4f19-b109-d6f7b17aefbe",
      "title": "A Useful Feature Few Rust Programmers Know About",
      "content_text": "Surprisingly few know about the built-in pretty-printer. In the book, there is only a short passage that mentions {:#?} in passing. It aligns structs and enums based on nested positions and is automatically derived with Debug.",
      "url": "http://rickyhan.com/jekyll/update/2018/04/16/the-best-kept-secret-rust-feature.html",
      "date_published": "2018-04-16T04:00:00+00:00",
      "author": {
        "name": "Ricky Han",
        "url": "http://rickyhan.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ef8bca4e-5627-4bde-a21f-9dae321ac7c0",
      "title": "angle-grinder - Slice and dice log files on the command line",
      "content_text": "Angle-grinder allows you to parse, aggregate, sum, average, percentile, and sort your data. You can see it, live-updating, in your terminal. Angle grinder is designed for when, for whatever reason, you don't have your data in graphite/honeycomb/kibana/sumologic/splunk/etc. but still want to be able to do sophisticated analytics.\n\nAngle grinder can process about a million rows per second, so it's usable for fairly meaty aggregation. The results will live update in your terminal as data is processed. Angle grinder is a bare bones functional programming language coupled with a pretty terminal UI.",
      "url": "https://github.com/rcoh/angle-grinder",
      "date_published": "2018-04-18T07:26:00+10:00",
      "author": {
        "name": "Russell Cohen",
        "url": "https://github.com/rcoh"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "69dd67c0-ef9b-4a6c-9a60-2de96c36113a",
      "title": "How To Optimize JavaScript Code with Rust Part 1",
      "content_text": "In the first part of this Rust series, we’re going to walk through setting up Rust, writing Rust code, exporting the code, and using the code in our Node environment. By the end of this article, you’ll see how painless marrying Rust with JavaScript is.",
      "url": "https://codeburst.io/how-to-optimize-javascript-code-with-rust-part-1-20f00885608f",
      "date_published": "2018-04-16T12:04:37.323+00:00",
      "author": {
        "name": "Raji Ayinla",
        "url": "https://codeburst.io/@rajiayinla858"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "f4d6ff64-87eb-466f-94a6-fbbaa28fab7d",
      "title": "From Chaos to Order -- Tools and Techniques for Testing TiDB, A Distributed NewSQL Database",
      "content_text": "As an open source distributed NewSQL Hybrid Transactional/Analytical Processing (HTAP) database, TiDB contains the most important asset of our customers--their data. One of the fundamental and foremost requirements of our system is to be fault-tolerant. But how do you ensure fault tolerance in a distributed database? This article covers the top fault injection tools and techniques in Chaos Engineering, as well as how to execute Chaos practices in TiDB.",
      "url": "https://pingcap.com/blog/chaos-practice-in-tidb/",
      "date_published": "2018-04-14T00:00:00+00:00",
      "author": {
        "name": "Siddon Tang",
        "url": "https://pingcap.com/blog"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a38c18ee-88ab-46dd-994c-2c4e4d288d4c",
      "title": "Instance Identity in C++ and Rust",
      "content_text": "A document describing how (in my opinion) C++’s and Rust’s definitions of object instance differ.",
      "url": "https://jrvanwhy.github.io/instance-identity/",
      "date_published": "2018-04-10T21:04:09+00:00",
      "author": {
        "name": "Johnathan Van Why",
        "url": "https://jrvanwhy.github.io/instance-identity/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a4be83a4-b126-479a-bfca-81e7d612d2b3",
      "title": "Redox Summer of Code",
      "content_text": "Redox OS is running its own Summer of Code this year, after the Microkernel devroom did not get accepted into GSoC 2018. We are looking for both Students and Sponsors who want to help Redox OS grow. At the moment, Redox OS has $10,800 in donations from various platforms to use to fund students. This will give us three students working for three months, if each student requests $1200 per month on average as described in Payment.\n\nIn order to fund more students, we are looking for sponsors who are willing to fund RSoC. Donations can be made on the Donate page. All donations will be used to fund Redox OS activities, with about 90% of those over the past year currently allocated to RSoC.",
      "url": "https://www.redox-os.org/rsoc/",
      "date_published": "2018-04-14T21:10:05+00:00",
      "author": {
        "name": "Jeremy Soller",
        "url": "https://www.redox-os.org/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "ef7fa499-a585-491d-9700-38962a125092",
      "title": "dalek cryptography",
      "content_text": "A suite of cryptographic libraries and protocol implementations, written in the systems programming language Rust, for creating blazingly-fast, production-quality cryptographic applications.",
      "url": "https://dalek.rs/",
      "date_published": "2018-01-24T00:07:02+00:00",
      "author": {
        "name": "isis agora lovecruft",
        "url": "https://dalek.rs/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "b92200f5-9ac0-4104-9b0d-f444c55aceb8",
      "title": "Rust CLI Survey Results",
      "content_text": "Over the month of March 2018, we've been accepting responses to the Rust CLI Survey. This survey was designed to give us some areas of focus, according to the community, for the CLI Working Group (CLI-WG).\n\nOne of the goals of Rust 2018 is to make writing command line applications in Rust as frictionless (and fun!) as possible. And we are super excited to say: we've received 1,045 responses! The results, while varied, paint a pretty clear picture for tangible goals.",
      "url": "https://github.com/rust-lang-nursery/cli-wg/blob/master/survey-results/Readme.md",
      "date_published": "2018-04-12T22:26:15+00:00",
      "author": {
        "name": "Rust CLI Working Group",
        "url": "https://github.com/rust-lang-nursery/cli-wg"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ba7af9ee-e916-4d65-b7b2-c6afa2477ade",
      "title": "Down a Rusty Rabbit Hole",
      "content_text": "Last week I fell down a rather interesting rabbit hole in Rust, which was basically me discovering a series of quirks of the Rust compiler/language, each one leading to the next when I asked “why?”",
      "url": "https://manishearth.github.io/blog/2018/04/12/down-a-rusty-rabbit-hole/",
      "date_published": "2018-04-12T00:00:00+00:00",
      "author": {
        "name": "Manish Goregaokar",
        "url": "https://manishearth.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "7f54a4c5-d312-4b64-9d90-4945dd6d1b72",
      "title": "Writing CloudABI applications in Rust",
      "content_text": "Installing a toolchain for Rust is very easy, as support for CloudABI has been upstreamed into the Rust codebase. Automated builds are performed by the Rust developers. As there hasn’t been a stable release of Rust to include CloudABI support yet, you must for now make use of Rust’s nightly track.",
      "url": "https://cloudabi.org/write/rust/",
      "date_published": "2018-04-13T05:18:57+00:00",
      "author": {
        "name": "CloudABI",
        "url": "https://cloudabi.org/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "63444a58-4cbd-4441-b5c3-5f216560e276",
      "title": "New Pop!_OS Testing Release with Rust based Linux installer \"distinst\"",
      "content_text": "Our second iteration of the 18.04 ISO is ready for testing. Testing the new installer and Optimus switching is our priority for this test release. Please test installing on a variety of hardware and provide feedback on any issues you encounter. If you run into any bugs, you can file them at https://github.com/pop-os/pop/issues.",
      "url": "https://system76.com/pop/testing",
      "date_published": "2018-04-13T21:05:51+00:00",
      "author": {
        "name": "System76",
        "url": "https://system76.com/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "d412d980-cc59-4a0b-ab9e-19100f3b8927",
      "title": "Faster Bulletproofs with Ristretto & AVX2",
      "content_text": "A few months ago, Bünz, Bootle, Boneh, Poelstra, Wuille, and Maxwell published Bulletproofs, which dramatically improves proof performance both in terms of proof size and verification time. In addition, it allows proving a much wider class of statements than just range proofs.\n\nAt Chain, we (Henry de Valence, Cathie Yun and Oleg Andreev) have been working on a pure-Rust Bulletproofs implementation, whose initial version we are publishing today, together with a set of notes.",
      "url": "https://blog.chain.com/faster-bulletproofs-with-ristretto-avx2-29450b4490cd",
      "date_published": "2018-04-13T19:21:27.639+00:00",
      "author": {
        "name": "Chain",
        "url": "https://blog.chain.com/@chaininc"
      },
      "tags": [
        "Tools and Applications",
        "Performance"
      ]
    },
    {
      "id": "30fe522c-e827-436a-bd52-40314d80e95b",
      "title": "The Challenge of Using C in Safety-Critical Applications [pdf]",
      "content_text": "Software errors in safety-critical systems can have severe consequences: property-loss, environmental devastation, injury, or death. Despite the severity of these risks, software continues to be written for safety-critical applications in languages that permit common classes of failures, such as undefined behavior, state corruption, and unexpected termination. One such language is C. Language standards that define allowable subsets (e.g. MISRA) and static analysis tools are often used in an attempt to ameliorate these failures by detecting them in the program code before they result in a critical issue at runtime. These traditional methods are ultimately insufficient when it comes to providing ahead-of-time assurances about safe runtime behavior for safety-critical applications. Alternative approaches must be considered.",
      "url": "https://polysync.io/s/The-Challenge-of-Using-C-in-Safety-Critical-Applications.pdf",
      "date_published": "2018-04-11T08:54:41.128+00:00",
      "author": {
        "name": "Shea Newton, Nathan Aschbache",
        "url": "https://polysync.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "2238849b-fcc8-4bd4-9828-66637c22f9af",
      "title": "Why would I use divergent functions?",
      "content_text": "Rust has some special syntax for ‘diverging functions’, which are functions that do not return.",
      "url": "https://medium.com/@yangnana11/rust-why-would-i-use-divergent-functions-d9dec59071bc",
      "date_published": "2018-04-11T08:54:41.128+00:00",
      "author": {
        "name": "Yang Nana",
        "url": "https://medium.com/@yangnana11"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d65aaebc-e17b-421b-86e8-1cc9c63a0408",
      "title": "Writing An NES Emulator with Rust and WebAssembly",
      "content_text": "I wrote the NES emulator with Rust and WebAssembly to learn Rust. It’s not perfect and have some audio bugs, but it’s good enough to play Super Mario bros.",
      "url": "https://medium.com/@bokuweb17/writing-an-nes-emulator-with-rust-and-webassembly-d64de101c49d",
      "date_published": "2018-04-11T14:30:56.719+00:00",
      "author": {
        "name": "bokuweb",
        "url": "https://medium.com/@bokuweb17"
      },
      "tags": [
        "Games and Graphics",
        "Web and Network Services"
      ]
    },
    {
      "id": "cacf27d3-9206-414d-b28f-8745eec00a4a",
      "title": "Taking the long road (Part 2): Rust bindings for a vector similarity search library",
      "content_text": "This is part 2 of a story on taking the long road towards Rust bindings to Faiss. You may wish to read part 1 first for a motivation section and a deeper understanding of how I built a plain C API on top of the C++ library.",
      "url": "https://medium.com/@e_net4/taking-the-load-road-part-2-rust-bindings-for-a-vector-similarity-search-library-914fbc1ec5ed",
      "date_published": "2018-04-12T20:11:12.081+00:00",
      "author": {
        "name": "Eduardo Pinho",
        "url": "https://medium.com/@e_net4"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "fc25e5f3-66d9-429d-8ca8-c1882a5083d6",
      "title": "JavaScript Interop with WebAssembly",
      "content_text": "In my last post I provided an introduction to WebAssembly — what is it, why do we care, and what does it look like? In this post, I’d like to explore a little bit of the inner workings of how we can communicate between Rust (wasm) and JavaScript. As I mentioned in the last post, WebAssembly is neither JavaScript nor some strongly-typed dialect. It is a standalone, compiled, portable binary. How you send data into and get data out of that binary involves some subtle nuances about how WebAssembly works.",
      "url": "https://medium.com/@KevinHoffman/javascript-interop-with-webassembly-2c69a3db19e9",
      "date_published": "2018-04-12T14:14:05.684+00:00",
      "author": {
        "name": "Kevin Hoffman",
        "url": "https://medium.com/@KevinHoffman"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "d506eda8-cab3-4046-b0b7-3c16fd1bc53d",
      "title": "Rust all-hands (dev-tools stuff)",
      "content_text": "Last week (sigh, the week before last now) we held an 'all-hands' event in Berlin. It was a great event - fantastic to meet so many Rust people in real life and really energising to see how much is being planned and implemented. In this post I want to summarise some of the important dev-tools stuff that happened. Our planning and notes from some meetings is in the dev-tools team repo.",
      "url": "https://www.ncameron.org/blog/rust-all-hands-dev-tools-stuff/",
      "date_published": "2018-04-11T02:18:18+00:00",
      "author": {
        "name": "Nick Cameron",
        "url": "http://www.ncameron.org/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "68f328f0-50d5-4152-aa9a-f5ab3c69f397",
      "title": "A Shifty Riddle",
      "content_text": "When I finally implemented opportunistic mutations in mutagen, everything seemed fine until my co-maintainer gnieto found a problem. Code failed to compile with the mutagen plugin, something that should never happen as long as the code in question compiles without the plugin. We not only broke the code – we broke the build.",
      "url": "http://llogiq.github.io/2018/04/11/shift.html",
      "date_published": "2018-04-11T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e497ecb9-788c-476e-bb28-c1746fbff940",
      "title": "Writing My Final Year Project in Rust",
      "content_text": "As part of my final year in university I have had to undertake a project and then write a twenty page paper on it. I ended up being assigned one on a type of machine learning algorithm called boosting. This wasn't my first choice unfortunately, so I decided I'd try to make it interesting for myself by implementing it in Rust. Rust was, and still is, quite immature when it comes to machine learning - as Are We Learning Yet? confirms. I thought it would be an interesting challenge to write some machine learning algorithms in a language that has yet to be used too much for this field.",
      "url": "http://mattyhall.github.io/posts/writing-my-final-year-project-in-rust.html",
      "date_published": "2018-03-30T23:00:00+00:00",
      "author": {
        "name": "Matthew Hall",
        "url": "http://mattyhall.github.io/blog.html"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a89cb196-c162-4c49-b1d5-642547265f39",
      "title": "The case for deadlines",
      "content_text": "Rust aims to be the foundation of fast and robust software. A thorn in that side is the choice of timeout-centric APIs for I/O and multithreading. I posit this was a bad choice and it needs to be remedied as soon as possible before more APIs proliferate this (possibly accidental) design decision.",
      "url": "https://gist.github.com/alkis/9510a840f1965185ab0a02cb59761dd8",
      "date_published": "2018-04-10T06:28:29+00:00",
      "author": {
        "name": "Alkis Evlogimenos",
        "url": "https://gist.github.com/alkis"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "ed19c2a7-fe9d-465b-b41a-71480e6b978a",
      "title": "QCGPU - Hardware Accelerated Quantum Computer Simulation",
      "content_text": "A software library for high performance and hardware accelerated simulation of Quantum Computers and Algorithms. Written with Rust and OpenCL.",
      "url": "https://qcgpu.github.io/",
      "date_published": "2018-04-11T06:47:00+10:00",
      "author": {
        "name": "QCGPU",
        "url": "https://qcgpu.github.io/"
      },
      "tags": [
        "Computer Science",
        "Tools and Applications"
      ]
    },
    {
      "id": "b93c9682-4e53-4a7f-a39b-79d57b2b4737",
      "title": "New sysinfo version (huge performance improvements!)",
      "content_text": "This new version comes with great performance improvements. We're talking about 3x faster on macos, 2x faster on linux and 3x faster on windows (the benchmarks are at the end of the post).",
      "url": "https://blog.guillaume-gomez.fr/articles/2018-04-09+New+sysinfo+version+%28huge+performance+improvements%21%29",
      "date_published": "2018-04-09T00:00:00+00:00",
      "author": {
        "name": "Guillaume Gomez",
        "url": "https://blog.guillaume-gomez.fr/"
      },
      "tags": [
        "Performance",
        "Tools and Applications"
      ]
    },
    {
      "id": "68ff8b22-500f-4674-b9f0-b70414db12d8",
      "title": "Safe Intrusive Collections with Pinning",
      "content_text": "In my last post, I talked about the new “pinned references” which guarantee that the data at the memory it points to will not, ever, be moved elsewhere. I explained how they enable giving a safe API to code that could previously only be exposed with unsafe, and how one could go about proving such a thing. This post is about another application of pinned references—another API whose safety relies on the pinning guarantees: Intrusive collections. It turns out that pinned references can almost be used for this, but not quite. However, this can be fixed by extending the guarantees provided by pinned references, as suggested by @cramertj.",
      "url": "https://www.ralfj.de/blog/2018/04/10/safe-intrusive-collections-with-pinning.html",
      "date_published": "2018-04-10T00:00:00+00:00",
      "author": {
        "name": "Ralf Jung",
        "url": "https://www.ralfj.de/blog/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "1282d538-71c9-4379-a330-820eccf83d22",
      "title": "Sequoia-PGP - a modular OpenPGP implementation",
      "content_text": "Sequoia is a modular OpenPGP implementation in Rust.",
      "url": "https://sequoia-pgp.org/",
      "date_published": "2018-04-11T06:52:00+10:00",
      "author": {
        "name": "p≡p foundation",
        "url": "https://sequoia-pgp.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "61846190-2e41-4590-95c0-172d767aacc1",
      "title": "Getting Yew to work with Rust on ‘Bash on Ubuntu on Windows’",
      "content_text": "Yew is a new web framework written in Rust that takes concepts from React JS and Elm. It takes the two web libraries I love and combines them with the new language I love — Rust. I wrote this article because I haven’t found a lot of documentation online on how to get the Yew examples running, and I’m sure there will be people that will run into the same problems I did. I wrote this in hopes that it helps someone out there.",
      "url": "https://medium.com/@raymondsiu/getting-yew-to-work-with-rust-on-bash-on-ubuntu-on-windows-in-windows-10-790a006e6805",
      "date_published": "2018-04-08T23:14:01.202+00:00",
      "author": {
        "name": "Raymond Siu",
        "url": "https://medium.com/@raymondsiu"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "66851aee-1bf3-4b18-b1aa-50f79ce773f4",
      "title": "Writing a recursive ascent parser by hand",
      "content_text": "I’ve been exploring various ways to write parsers. For a long time, I’ve used hand-written recursive descent for its straightforwardness, flexibility, and performance. There is another way—parser generators like Menhir, LALRPOP, or the venerable Bison use the bottom-up LR algorithm. I decided I would try an experiment: write an LR parser by hand, and see how readable I could make it.",
      "url": "https://www.abubalay.com/blog/2018/04/08/recursive-ascent",
      "date_published": "2018-04-08T00:00:00+00:00",
      "author": {
        "name": "Russell Johnston",
        "url": "https://www.abubalay.com/blog"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "d4c2f839-050c-4134-868d-eab325676917",
      "title": "An interactive guide to learning Rust!",
      "content_text": "Fix a series to broken Rust programs to gain a deeper understanding of Rust.",
      "url": "https://github.com/toidiu/learn-rust",
      "date_published": "2018-04-10T06:47:00+10:00",
      "author": {
        "name": "toidiu",
        "url": "https://github.com/toidiu"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "d1d6e382-3b80-431e-ba08-5cbe1ccebce2",
      "title": "Dark Side Of Ergonomics",
      "content_text": "Despite having an experience with wide range of computer languages, including C++ and Haskell (both strong influences to Rusts design), I found Rust hard to learn. Sometimes I grind my teeth about something the compiler doesn’t let me do. Despite that, I didn’t put ergonomics as a wish in any poll. In fact, if I was to take a poll right now, I’d probably be against further ergonomics initiatives.",
      "url": "https://vorner.github.io/2018/04/08/Dark-side-of-ergonomics.html",
      "date_published": "2018-04-08T00:00:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "7b281b2d-246c-4fec-bdf5-6eb92fbb8a34",
      "title": "The State of Game Development in Rust",
      "content_text": "Game Development is one of the fields in which Rust can gain a lot of traction. Let’s look at the current ecosystem and let’s see what the community has to offer.",
      "url": "http://www.davideaversa.it/2018/02/state-game-development-rust/",
      "date_published": "2018-02-26T17:37:27+00:00",
      "author": {
        "name": "Davide Aversa",
        "url": "http://www.davideaversa.it/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "5230134e-6bfc-4a88-9cee-7bec1f15e099",
      "title": "Embedded Rust: Why?",
      "content_text": "I will try to publish here a series of articles about my approach to embedded development and how I plan to achieve that in Rust.",
      "url": "http://ithinuel.me/embedded-rust-why/",
      "date_published": "2018-03-30T08:26:00+00:00",
      "author": {
        "name": "Wilfried Chauveau",
        "url": "http://ithinuel.me/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "7fbe9c06-2e4a-4da4-aea0-45b4828f6687",
      "title": "Async & Await in Rust: a full proposal",
      "content_text": "I’m really excited to announce the culmination of much of our work over the last four months: a pair of RFCs for supporting async & await notation in Rust. This will be very impactful for Rust in the network services space. The change is proposed as two RFCs:\n RFC #2394: which adds async & await notation to the language. RFC #2395: which moves a part of the futures library into std to support that syntax.",
      "url": "https://boats.gitlab.io/blog/post/2018-04-06-async-await-final/",
      "date_published": "2018-04-06T00:00:00+00:00",
      "author": {
        "name": "withoutboats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "9c6d2c06-5031-414d-b743-850c4ddebdc3",
      "title": "Cloudflare Argo Tunnel with Rust+Raspberry Pi",
      "content_text": "Serving content from a Rust web server running on a Raspberry Pi from your home to the world, with a Cloudflare Argo Tunnels.",
      "url": "https://blog.cloudflare.com/cloudflare-argo-tunnel-with-rust-and-raspberry-pi/",
      "date_published": "2018-04-06T14:00:00+00:00",
      "author": {
        "name": "Steven Pack",
        "url": "https://blog.cloudflare.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "e01d9c09-e66d-4fea-94e3-95db24137dd6",
      "title": "Sound and ergonomic specialization for Rust",
      "content_text": "Specialization holds the dubious honor of being among the oldest post-1.0 features remaining in unstable limbo. That’s for good reason, though: until recently, we did not know how to make it sound.",
      "url": "http://aturon.github.io/2018/04/05/sound-specialization/",
      "date_published": "2018-04-05T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/"
      },
      "tags": [
        "Language",
        "Computer Science"
      ]
    },
    {
      "id": "4812042b-1d2a-4171-9a77-d2f0a0c44b91",
      "title": "Writing the Perfect 'Collect' Trait",
      "content_text": "I’ve been spending some time thinking about garbage collection in rust. I know, shame on me, it’s a systems language, we hate garbage collection, but… even in a systems programming language, garbage collection is still pretty damn useful.",
      "url": "https://mtak-blog.github.io/the_perfect_collect_trait",
      "date_published": "2018-04-05T00:00:00+00:00",
      "author": {
        "name": "mtak-blog",
        "url": "https://mtak-blog.github.io/"
      },
      "tags": [
        "Language",
        "Computer Science"
      ]
    },
    {
      "id": "cb113ba3-eaa8-40e1-8ff8-a8b710bf89db",
      "title": "Custom tasks in Cargo",
      "content_text": "One of the big requests from the Domain Working Groups for Rust 2018 is a richer feature set for framework- or domain-specific workflows in Cargo. At the simplest level, that might look like project templates – the ability to direct cargo new to start with a custom template defined in crates.io. That’s already enough to get you cooking with frameworks like QuiCLI, which today involve a fixed set of initial scaffolding that you can fill in.",
      "url": "http://aturon.github.io/2018/04/05/workflows/",
      "date_published": "2018-04-05T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "5eca0d0a-81f6-4804-869f-32ed307adb9f",
      "title": "The Rust Team All Hands in Berlin: a Recap",
      "content_text": "Last week we held an “All Hands” event in Berlin, which drew more than 50 people involved in 15 different Rust Teams or Working Groups, with a majority being volunteer contributors. This was the first such event, and its location reflects the current concentration of team members in Europe. The week was a smashing success which we plan to repeat on at least an annual basis.",
      "url": "https://blog.rust-lang.org/2018/04/06/all-hands.html",
      "date_published": "2018-04-06T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "8c1bc2c9-1eeb-4a19-ac6b-d11e2a7c6f63",
      "title": "Welcome to this week in Rust and WebAssembly!",
      "content_text": "Hello and welcome to the first issue of This Week in Rust and WebAssembly! Rust is a systems language pursuing the trifecta: safety, concurrency, and speed. WebAssembly is designed as a portable target for compilation of high-level languages like C, C++, and Rust, enabling deployment on the web for client and server applications. This is a weekly summary of its progress and community.",
      "url": "https://rustwasm.github.io/2018/04/05/welcome-to-this-week-in-rust.html",
      "date_published": "2018-04-05T00:00:00+00:00",
      "author": {
        "name": "Sendil Kumar N",
        "url": "https://rustwasm.github.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "277652ec-bbeb-454c-85da-766438600d47",
      "title": "Cargo, Xargo, and Rustup",
      "content_text": "Another topic of discussion at the Berlin Rust All Hands was the long-term story around Cargo, Xargo, and Rustup. The latter two tools are both involved in managing your Rust toolchain, with Xargo allowing you to build custom stds and Rustup managing pre-built artifacts for mainstream targets. Xargo is most commonly used for cross-compiling to less common platforms, but can also be used to customize the standard library on mainstream platforms.",
      "url": "http://aturon.github.io/2018/04/06/rustup-xargo/",
      "date_published": "2018-04-06T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/"
      },
      "tags": [
        "Embedded",
        "Language"
      ]
    },
    {
      "id": "318f9d08-d86a-4799-ac08-75014d089475",
      "title": "im - Immutable Data Structures for Rust",
      "content_text": "This library implements several of the more commonly useful immutable data structures for Rust. They rely on structural sharing to keep most operations fast without needing to mutate the underlying data store, leading to more predictable code without necessarily sacrificing performance.",
      "url": "https://docs.rs/im/10.0.0/im/",
      "date_published": "2018-04-06T21:06:00+00:00",
      "author": {
        "name": "Bodil Stokke",
        "url": "http://immutable.rs/"
      },
      "tags": [
        "Computer Science",
        "Crates"
      ]
    },
    {
      "id": "0ea6b48d-d3a3-4969-a053-37d6e697de85",
      "title": "Announcing Tower — A library for writing robust network services with Rust",
      "content_text": "Tower is a library for writing robust network services with Rust. It is being built in service of the Conduit proxy, which is using the Tokio ecosystem to build the world’s smallest, fastest, most secure network proxy. Tower will also provide a batteries included experience for implementing HTTP and gRPC services.",
      "url": "https://medium.com/@carllerche/announcing-tower-a-library-for-writing-robust-network-services-with-rust-67273f052c40",
      "date_published": "2018-04-06T19:40:38.816+00:00",
      "author": {
        "name": "Carl Lerche",
        "url": "https://medium.com/@carllerche"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "fc550900-512d-4f82-b40a-25a8ef86d513",
      "title": "Using Rust Modules in JavaScript/Web Development (Part 3/ 3) [NodeJS]",
      "content_text": "Please read the Part 1 of the series here :",
      "url": "https://medium.com/@atulanand94/using-rust-modules-for-javascript-web-development-part-3-3-nodejs-7c71e4ae23fe",
      "date_published": "2018-04-03T14:29:28.389+00:00",
      "author": {
        "name": "Atul",
        "url": "https://medium.com/@atulanand94"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "14922be0-52bc-4711-9fc1-aeec98e39c1d",
      "title": "Making a 100% Statically-Linked, Single-File Web App with React and Rust",
      "content_text": "This tutorial will cover the basics of creating a minimal React app which can be deployed as a statically-linked Rust binary. What this accomplishes is having all of your code, including HTML, JavaScript, CSS, and Rust, packaged into a single file that will run on pretty much any 64-bit Linux system, regardless of the kernel version or installed libraries.",
      "url": "https://anderspitman.net/2018/04/04/static-react-rust-webapp/",
      "date_published": "2018-04-04T21:21:00+00:00",
      "author": {
        "name": "Anders Pitman",
        "url": "https://anderspitman.net/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "37aa0f60-d86c-446d-848c-52b45777ae2c",
      "title": "Using Rust Modules in JavaScript/Web Development (Part 2 / 3) [Webpack]",
      "content_text": "Part 1 of the post was primarily concerned with integrating rust modules with JavaScript with the help of wasm. But that involved a lot of manual procedures. Another more streamlined way is using webpack.",
      "url": "https://medium.com/@atulanand94/using-rust-modules-for-javascript-web-development-part-2-7a86eaec5ee9",
      "date_published": "2018-04-03T10:15:39.331+00:00",
      "author": {
        "name": "Atul",
        "url": "https://medium.com/@atulanand94"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "8379ada9-43de-4764-88b1-aa3d24b114fd",
      "title": "A Formal Look at Pinning",
      "content_text": "Recently, a new API for “pinned references” has landed as a new unstable feature in the standard library. The purpose of these references is to express that the data at the memory it points to will not, ever, be moved elsewhere. Others have written about why this is important in the context of async IO. The purpose of this post is to take a closer, more formal look at that API: We are going to take a stab at extending the RustBelt model of types with support for pinning.",
      "url": "https://www.ralfj.de/blog/2018/04/05/a-formal-look-at-pinning.html",
      "date_published": "2018-04-05T00:00:00+02:00",
      "author": {
        "name": "Ralf Jung",
        "url": "https://www.ralfj.de/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "afc97289-36f8-4acb-ab80-28e7770ea126",
      "title": "MesaLink memory-safe and OpenSSL-compatible TLS library",
      "content_text": "MesaLink is a memory-safe and OpenSSL-compatible TLS library. Since 2014, the industry has seen a huge loss due to memory vulnerabilities in TLS stacks, such as the infamous \"Heartbleed\" bug. MesaLink is created with the goal of eliminating memory vulnerabilities in TLS stacks. MesaLink is written in Rust, a programming language that guarantees memory safety. This significantly reduces the attack surfaces, which facilitates auditing and restricting the remaining attack surfaces. MesaLink is cross-platform and provides OpenSSL-compatible APIs. It works seamlessly in desktop, mobile, and IoT devices. With the growth of the ecosystem, MesaLink would also be adopted in the server environment in the future.",
      "url": "https://github.com/mesalock-linux/mesalink",
      "date_published": "2018-04-06T07:00:00+10:00",
      "author": {
        "name": "MesaLock Linux",
        "url": "https://github.com/mesalock-linux"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "98f65a4a-8501-45e4-bda8-48d5d01306ba",
      "title": "Improving GStreamer performance with tokio",
      "content_text": "For one of our customers at Centricular we were working on a quite interesting project. Their use-case was basically to receive an as-high-as-possible number of audio RTP streams over UDP, transcode them, and then send them out via UDP again. Due to how GStreamer usually works, they were running into some performance issues.\n\nThis blog post will describe the first set of improvements that were implemented for this use-case, together with a minimal benchmark and the results. My colleague Mathieu will follow up with one or two other blog posts with the other improvements and a more full-featured benchmark.\n\nThe short version is that CPU usage decreased by about 65-75%, i.e. allowing 3-4x more streams with the same CPU usage. Also parallelization works better and usage of different CPU cores is more controllable, allowing for better scalability. And a fixed, but configurable number of threads is used, which is independent of the number of streams.",
      "url": "https://coaxion.net/blog/2018/04/improving-gstreamer-performance-on-a-high-number-of-network-streams-by-sharing-threads-between-elements-with-rusts-tokio-crate/",
      "date_published": "2018-04-05T15:21:06+00:00",
      "author": {
        "name": "Sebastian Dröge",
        "url": "https://coaxion.net/blog/"
      },
      "tags": [
        "Web and Network Services",
        "Performance"
      ]
    },
    {
      "id": "0cb16bc7-daff-4747-81e5-d4455d33fc43",
      "title": "HTTP upgrades with hyper",
      "content_text": "The newest release of hyper includes some lower-level connection APIs for both the server and client. Notably, this allows using hyper send and receive HTTP upgrade requests. The most popular of these is Websockets.",
      "url": "http://seanmonstar.com/post/172531530657/http-upgrades-with-hyper",
      "date_published": "2018-04-02T14:34:53-07:00",
      "author": {
        "name": "Sean McArthur",
        "url": "http://seanmonstar.com/"
      },
      "tags": [
        "Web and Network Services",
        "Crates"
      ]
    },
    {
      "id": "0dd3a72c-b43f-449a-92f3-fd25f164d224",
      "title": "Corner Cutting vs. Productivity",
      "content_text": "I recently got into a discussion with another very knowledgeable Rustacean, who (I paraphrase) claimed that Rust is about adding just enough roadblocks to keep you from cutting corners. This is a nice metaphor because it explains a lot: Rust may feel more cumbersome, because it won’t let you cut corners. On the other hand, once it compiles, many classes of errors will already have been taken care of, so your code will usually work as expected (or if you’re new to Rust, unexpectedly well).",
      "url": "https://llogiq.github.io/2018/04/03/corners.html",
      "date_published": "2018-04-03T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "229aab36-08f5-4288-a9df-c804ad6c2b56",
      "title": "Using Rust Modules in JavaScript/Web Development (Part 1 / 3) [Plain JS]",
      "content_text": "One of the promising reasons I started learning rust is that it can be used to build modules for web using web-assembly. This blog post will cover how you can build a rust module and use it as regular package in the JavaScript environment. Remember rust is not meant to replace JS. I see it as complementary add-on to the places where JS is comparatively slower (heavy computations).",
      "url": "https://medium.com/@atulanand94/using-rust-modules-for-javascript-web-development-part-i-e6dec27df7b2",
      "date_published": "2018-04-03T06:22:23.753+00:00",
      "author": {
        "name": "Atul",
        "url": "https://medium.com/@atulanand94"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "b525113d-ce0a-4c11-b4d1-553eb3fef88d",
      "title": "Increasing Rust’s Reach 2018",
      "content_text": "The Rust team is happy to announce that we’re running our Increasing Rust’s Reach program again this year. Increasing Rust’s Reach is one of several programs run by the project to grow Rust’s community of project collaborators and leaders.",
      "url": "https://blog.rust-lang.org/2018/04/02/Increasing-Rusts-Reach-2018.html",
      "date_published": "2018-04-02T00:00:00+00:00",
      "author": {
        "name": "Ashley Williams",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Community"
      ]
    },
    {
      "id": "cf92e0a9-88ac-4fa8-9ecd-d61078868f26",
      "title": "A Gentle Introduction to Rust (book)",
      "content_text": "Introduction to the Rust language, standard library and ecosystem",
      "url": "http://stevedonovan.github.io/rust-gentle-intro/",
      "date_published": "2018-04-05T07:00:00+10:00",
      "author": {
        "name": "Steve J Donovan",
        "url": "https://github.com/stevedonovan"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "d110dc0e-7a78-42c3-8326-5b5ec58f8875",
      "title": "JavaScript to Rust and Back Again: A wasm-bindgen Tale",
      "content_text": "Recently we’ve seen how WebAssembly is incredibly fast to compile, speeding up JS libraries, and generating even smaller binaries. We’ve even got a high-level plan for better interoperability between the Rust and JavaScript communities, as well as other web programming languages. As alluded to in that previous post, I’d like to dive into more detail about a specific component, wasm-bindgen.",
      "url": "https://hacks.mozilla.org/2018/04/javascript-to-rust-and-back-again-a-wasm-bindgen-tale/",
      "date_published": "2018-04-04T14:58:40+00:00",
      "author": {
        "name": " Alex Crichton",
        "url": "https://hacks.mozilla.org/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "6419c6a3-a47d-4ce5-93ef-11f17be5eecd",
      "title": "Building Tiny Rust Binaries for Embedded Linux",
      "content_text": "At the recent 2018 Rust All Hands, I met up with Katharina @spacekookie, who works on an open source project that creates software for Embedded Linux Devices. She had talked with the other engineers on the project about including some Rust components, however with their limited flash storage space (8MB for the whole firmware, including operating system and all other software), she was worried that the Rust binaries wouldn’t fit. The current webserver component for their project was measured in the 100’s of KB, while the Rust binary she produced was already multiple MBs, even with a --release build!",
      "url": "https://jamesmunns.com/update/2018/04/01/tinyrocket.html",
      "date_published": "2018-04-01T09:30:00+00:00",
      "author": {
        "name": "James Munns",
        "url": "https://jamesmunns.com/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "5e66cfa3-c153-40ab-8cad-cb8aaf01d178",
      "title": "Getting started with Rust: Enum on steroids!",
      "content_text": "Hello everyone! Today subject was hard to decide on. But as the previous one was pretty tedious, I decided to go a subject more easy to speak of. So, today we are going to talk about enum in Rust!",
      "url": "https://www.mathieu-nivoliez.com/posts/2018-04-01-getting-started-with-rust-enum-on-steroids.html",
      "date_published": "2018-04-01T00:00:00+00:00",
      "author": {
        "name": "Mathieu Nivoliez",
        "url": "https://www.mathieu-nivoliez.com/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "680e9488-98e3-4a44-b462-761cf817ca10",
      "title": "Why We're Betting on Rust",
      "content_text": "Considering how the state of our art is ever changing, I re-evaluate which tools belong in my box of gizmos each year as well. In the past, I’ve employed nginx as a high-performance cache and proxy, but it has been largely edged out by Envoy, which touts a hybrid non-blocking event model and has become wildly successful after being released in 2016. That very same principle, event-driven I/O, is the same reason I chose Node.js for most of the APIs I’ve developed since 2011. Even if practices change, we retain successful engineering models.\n\nBeginning late last year, as I sketched our founding mission and initial product offerings, I also decided to select a new primary language that could handle most of our primary development tasks. After writing mostly JavaScript and compile-to-JS languages for half a decade, I longed for something more.",
      "url": "https://www.uptime.ventures/blog/2018/04/why-were-betting-on-rust/",
      "date_published": "2018-04-02T00:00:00+00:00",
      "author": {
        "name": "Nicholas Young",
        "url": "https://www.uptime.ventures/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d14f3e75-4047-441e-a67b-fc0de042845a",
      "title": "Removing Connection State In mob",
      "content_text": "I started writing mob, an multi-echo server using mio, in 2015. I coded mob into a mostly working state and then left it mostly alone, only updating it to work with the latest stable mio. Recently, I started looking at the code again and had the urge to improve it. In a previous post, I talked about managing the state of connections in mob. In this post, I will walk through what I did to remove the need to track connection state. I wanted to remove the state because the implementation required an O(n) operation every tick of the mio event loop. It also added a fair amount of complexity to the code.",
      "url": "http://hermanradtke.com/2018/03/29/removing-connection-state-from-mob.html",
      "date_published": "2018-03-29T00:00:00+00:00",
      "author": {
        "name": "Herman J. Radtke III",
        "url": "http://hermanradtke.com/"
      },
      "tags": [
        "Language",
        "Web and Network Services"
      ]
    },
    {
      "id": "dac3ce68-bfe5-4774-8b89-fb4351d53445",
      "title": "Reliable Systems Series: Model-Based Testing",
      "content_text": "This is the first article in a series on techniques I’ve found useful for making my projects more reliable. These techniques are used in the distributed systems, database, automotive, embedded, and aerospace fields, but if you build services, user interfaces, or generally anything stateful, I think you will find something useful along the way.",
      "url": "https://medium.com/@tylerneely/reliable-systems-series-model-based-property-testing-e89a433b360",
      "date_published": "2018-03-28T12:52:27.284+00:00",
      "author": {
        "name": "Tyler Neely",
        "url": "https://medium.com/@tylerneely"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "2f7b942d-1a59-40bc-bc92-a1e2e85803ee",
      "title": "Weekly Driver: Using the SGP30 Gas Sensor from Rust",
      "content_text": "After the MCP3425 ADC driver I published last month as part of the the weekly driver initiative, I wrote a second Rust embedded-hal driver, this time for the SGP30. The Sensirion SGP30 is a tiny low-power gas sensor (produced in Switzerland) for indoor air quality applications with good long-term stability. It has an I²C interface with TVOC (Total Volatile Organic Compounds) and CO₂ equivalent signals.",
      "url": "https://blog.dbrgn.ch/2018/4/1/rust-sgp30-driver/",
      "date_published": "2018-04-01T00:00:00+02:00",
      "author": {
        "name": "Danilo Bargen",
        "url": "https://blog.dbrgn.ch/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "5941ab41-5269-4401-9978-f6f389922443",
      "title": "Rust: First impressions from a C++ developer",
      "content_text": "I started learning Rust 2 weeks back (yay!!) whenever I got free time. And all the time that I spent  learning it has been worthwhile. This is not going to be a deep technical post, but just my impressions about Rust from where I come from (C++).",
      "url": "http://templated-thoughts.blogspot.com.au/2018/03/rust-first-impressions-from-c-developer.html",
      "date_published": "2018-03-31T00:43:00-07:00",
      "author": {
        "name": "Arun Muralidharan",
        "url": "http://templated-thoughts.blogspot.com.au/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "effc3ea9-0e61-4b47-ad1b-20782addb1bd",
      "title": "Analysing crates.io data",
      "content_text": "I am learning Clojure for the past one year and I thought making open source contributions is a great way to interact with the community. I made a post previously on using Clojars metadata to analyse JDK 9 and Clojure 1.9 issues that helped me file issues to ensure compatibility. I used the same method here to find the modules that were broken on a nightly version of a rustc due to a recent stabilisation.",
      "url": "https://tirkarthi.github.io/rust/2018/03/30/analyzing-crates-data.html",
      "date_published": "2018-03-30T18:30:29+00:00",
      "author": {
        "name": "Karthikeyan",
        "url": "https://tirkarthi.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "980f0166-c073-42bc-a1df-7dab36421e10",
      "title": "You can't Rust that",
      "content_text": "The last year has been fun because I could build a lot for really nice stuff for Sentry in Rust and for the first time the development experience was without bigger roadblocks. While we have been using Rust before it now feels different because the ecosystem is so much more stable and we ran less against language or tooling issues.\n\nHowever talking to people new to Rust (and even brainstorming APIs with coworkers) it's hard to get rid of the feeling that Rust can be a mind bending adventure and that the best way to have a stress free experience is knowing upfront what you cannot (or should not attempt to) do. Knowing that certain things just cannot be done helps putting your mind back back on the right track.\n\nSo here are things not to do in Rust and what to do instead which I think should be better known.",
      "url": "http://lucumr.pocoo.org/2018/3/31/you-cant-rust-that/",
      "date_published": "2018-03-31T00:00:00+00:00",
      "author": {
        "name": "Armin Ronacher",
        "url": "http://lucumr.pocoo.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e5d47646-8715-43d3-a39b-23115255a1fe",
      "title": "Taking the long road (Part 1): bindings for a vector similarity search library",
      "content_text": "Perhaps you have once wondered how search engines such as Google and TinEye enable their users to search for images which are similar to one that you provide, or how they can identify a building from nothing but a picture. Content-based image retrieval (CBIR) is the backbone concept, and provides exciting new ways to search for useful information. While the concept is no longer novel, the requirements imposed on systems for CBIR are ever increasing due to the increasingly larger amounts of data and demand for higher quality of retrieval.",
      "url": "https://medium.com/@e_net4/taking-the-long-road-part-1-97e6e41f6b05",
      "date_published": "2018-03-31T15:45:00.113+00:00",
      "author": {
        "name": "Eduardo Pinho",
        "url": "https://medium.com/@e_net4"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "79ebe691-fe8b-46ea-806c-996919b730ca",
      "title": "I've just learned Rust and I think I'm in love",
      "content_text": "I’ve decided to learn some Rust recently while working on the Stanford’s experimental course on operating systems. Here’s a list of things that I think are great about it.",
      "url": "https://rskupnik.github.io/I-learned-rust-and-I-think-Im-in-love",
      "date_published": "2018-03-30T00:00:00+00:00",
      "author": {
        "name": "Radosław Skupnik",
        "url": "https://rskupnik.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4a0c4c01-2597-4688-ac99-2726bb1a3505",
      "title": "Thoughts on Rust, a few thousand lines in",
      "content_text": "To say my first foray into Rust was a frustrating struggle would be an understatement. I picked a terrible first project that left me neck deep in Rust’s trickiest areas right off the bat. I was excited to try again. A few years ago I wrote Sumoshell, a CLI App for log analysis. I’d wanted to improve it for a while, so porting it to Rust seemed like a nice way to kill two birds with one stone.",
      "url": "https://rcoh.me/posts/things-learned-first-thousand-lines-of-rust/",
      "date_published": "2018-03-24T12:56:00-07:00",
      "author": {
        "name": "Russell Cohen",
        "url": "https://rcoh.me/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "fe337d8c-3b02-4742-bfd0-59ac89d4234f",
      "title": "A geometric Rust adventure",
      "content_text": "The short version is: I have some shapes. I want to find their intersection.\n\nReally, I want more than that: I want to drop them all on a canvas, intersect everything with everything, and pluck out all the resulting polygons. The input is a set of cookie cutters, and I want to press them all down on the same sheet of dough and figure out what all the resulting contiguous pieces are. And I want to know which cookie cutter(s) each piece came from.\n\nBut intersection is a good start.",
      "url": "https://eev.ee/blog/2018/03/30/a-geometric-rust-adventure/",
      "date_published": "2018-03-30T17:17:00-07:00",
      "author": {
        "name": "Eevee",
        "url": "https://eev.ee/blog/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "cca40bed-4eaf-46c6-ae72-1e49ed3ef2ad",
      "title": "New Timer implementation in Tokio",
      "content_text": "To close out a great week, there is a new release of Tokio. This release includes a brand new timer implementation.",
      "url": "https://tokio.rs/blog/2018-03-timers/",
      "date_published": "2018-03-30T00:00:00+00:00",
      "author": {
        "name": "Carl Lerche",
        "url": "https://tokio.rs/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "88175c1a-8150-45f5-a1d8-d390457b9fe2",
      "title": "Announcing personal finance tool 'pfr'",
      "content_text": "pfr is a command-line tool for helping me to manage my personal finances. At the end of each month, I like to sit down and “allocate” funds to cover my expenses for the following month. However, not all of my expenses occur monthly. For example, things like rent are paid weekly, and I think of money spent on food in terms of weeks, so I have to multiply those expenses by 4 (ish). I also have to figure out how much money to put in each account, e.g on my EFTPOS (direct-debit) card or for automatic payments. It’s not hard, but then again, that’s why we write programs.",
      "url": "https://kyusscaesar.wordpress.com/2018/03/29/announcing-pfr/",
      "date_published": "2018-03-29T10:10:34+00:00",
      "author": {
        "name": "Antony Southworth",
        "url": "https://kyusscaesar.wordpress.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "dc304d16-2ec3-45b1-833b-a9536c1a7d95",
      "title": "Memory Safety and Lifetimes in Rust",
      "content_text": "A program is memory-safe if in any possible execution of the program , all expressions e in the program that refer to an object of type T resolve to an object of type T that has been initialized and not yet deallocated.\n\nThere are different ways to guarantee memory safety for all programs. One is to restrict the programming language and disallow pointers. But, this forces most programs to make unnecessary copies of data. Another strategy, called garbage collection, embeds a garbage collector with every program. The garbage collector periodically looks for objects in memory that cannot be accessed from the program and reclaims this memory. The drawbacks of this are the overhead of garbage collection and that deallocation of memory is no longer under the control of the programmer.",
      "url": "https://balu.github.io/lifetimes.html",
      "date_published": "2018-02-26T18:52:22+00:00",
      "author": {
        "name": "Balagopal Komarath",
        "url": "https://balu.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "3052579c-dccc-46b8-8d93-bbecfa493992",
      "title": "Speeding Up 'dwarfdump' With Rust",
      "content_text": "Writing a debugger for C++ on Linux, you spend a lot of time examining pretty-printed DWARF debug information using tools like readelf, objdump or dwarfdump. Unfortunately this can be quite slow.\n\nI decided to try to speed dwarfdump up. TL;DR: I reduced the dump time from 506s to 26s by fixing some simple issues and taking advantage of Rust \"fearless parallelism\". I think there are interesting opportunities for speeding up many kinds of command-line tools using Rust and parallelism.",
      "url": "https://robert.ocallahan.org/2018/03/speeding-up-dwarfdump-with-rust.html",
      "date_published": "2018-03-29T14:44:00+13:00",
      "author": {
        "name": "Robert O'Callahan",
        "url": "https://robert.ocallahan.org/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "2cadbd86-48ec-4fab-95bb-5959818d5747",
      "title": "Announcing Rust 1.25",
      "content_text": "The Rust team is happy to announce a new version of Rust, 1.25.0. The last few releases have been relatively minor, but Rust 1.25 contains a bunch of stuff!",
      "url": "https://blog.rust-lang.org/2018/03/29/Rust-1.25.html",
      "date_published": "2018-03-29T00:00:00+00:00",
      "author": {
        "name": "The Rust Core Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "04fdf0c8-05ab-46f3-b72d-c7e88eb6dc9b",
      "title": "Cargo got some new tricks, but is it still correct!?",
      "content_text": "I have been working with @alexcrichton to improve the resolver in Cargo.",
      "url": "https://www.reddit.com/r/rust/comments/87ss76/cargo_got_some_new_tricks_but_is_it_still_correct/",
      "date_published": "2018-03-28T15:25:46+00:00",
      "author": {
        "name": "Eh2406",
        "url": "https://www.reddit.com/user/Eh2406"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "1054cc8a-cbdd-4073-b7f9-2801aaad6fd6",
      "title": "Introducing Click: The Command Line Interactive Controller for Kubernetes",
      "content_text": "Click is an open-source tool that lets you quickly and easily run commands against Kubernetes resources, without copy/pasting all the time, and that easily integrates into your existing command line workflows. This blog introduces its its usage and merits.",
      "url": "https://databricks.com/blog/2018/03/27/introducing-click-the-command-line-interactive-controller-for-kubernetes.html",
      "date_published": "2018-03-27T16:07:56+00:00",
      "author": {
        "name": "Nick Lanham",
        "url": "https://databricks.com/blog/category/engineering"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "07825eb3-aaab-46c5-b7e4-680857d73750",
      "title": "Rust + Node.js are awesome!",
      "content_text": "Blazing fast, low requirements, computationally intensive operations on Node.js using Rust",
      "url": "https://itnext.io/rust-node-js-are-awesome-a50d63411773",
      "date_published": "2018-03-27T21:50:20.148+00:00",
      "author": {
        "name": "Benjamín Calderón",
        "url": "https://itnext.io/@benjcal"
      },
      "tags": [
        "Web and Network Services",
        "Performance"
      ]
    },
    {
      "id": "fe44a6a6-04fd-42f7-a0ee-c816282bac5e",
      "title": "From cobalt.rs to gutenberg",
      "content_text": "I wish I could have the features of both tools, but for now I will use gutenberg over cobalt. A tiny migration and feature comparison story.",
      "url": "https://markentier.tech/posts/2018/03/from-cobalt-to-gutenberg/",
      "date_published": "2018-03-28T00:00:00+00:00",
      "author": {
        "name": "Christoph Grabo (@asaaki)",
        "url": "https://markentier.tech/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "d4574214-e1ca-4fe8-858b-b5c9c64046ab",
      "title": "Closures 101",
      "content_text": "Closures are an interesting CS concept and one that will frequently come up in interviews. I know I've been asked, and have asked, questions about closures for frontend (Javascript) positions numerous times. And in all honesty they're a difficult concept to define, especially when you're under the scrutiny of an interviewer. In this post I'd like to show how Rust leverages the concept of closures and why they might be used. But first, we need to discuss the concept of scope because it is so important for the full understanding of closures.",
      "url": "http://mttyng.com/closures-101/",
      "date_published": "2018-03-25T00:00:00+00:00",
      "author": {
        "name": "Matt",
        "url": "http://mttyng.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "9f012379-d71a-4c45-b9db-12c4871070e7",
      "title": "Touring a Fast, Safe, and Complete(ish) Web Service in Rust",
      "content_text": "For years now, I’ve been having a crisis of faith in interpreted languages. They’re fast and fun to work in at small scale, but when you have a project that gets big, their attractive veneer quickly washes away. A big Ruby or JavaScript (just to name a few) program in production is a never ending game of whack-a-mock – you fix one problem only to find a new one somewhere else. No matter how many tests you write, or how well-disciplined your team, any new development is sure to introduce a stream of bugs that will need to be shored up over the course of months or years.\n\nCentral to the problem are the edges. People will reliably do a good job of building and testing the happy paths, but as humans we’re terrible at considering the edge conditions, and it’s those edges and corners that cause trouble over the years that a program is in service.",
      "url": "https://brandur.org/rust-web",
      "date_published": "2018-03-27T14:45:57+00:00",
      "author": {
        "name": "Brandur Leach",
        "url": "https://brandur.org"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "cfc59513-ea0b-4d61-ac46-d7ea2e5bba8b",
      "title": "Designing a fast CLI join tool with rust",
      "content_text": "(or how rust helped me to match the speed of GNU join written by Mike Haertel)",
      "url": "https://milancio42.github.io/blog/2018-03-22-rjoin/",
      "date_published": "2018-03-22T09:27:20+01:00",
      "author": {
        "name": "Milan Opath",
        "url": "https://milancio42.github.io/blog/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "b33165a2-c60c-4431-872d-4528770e42c1",
      "title": "xray Update for March 26, 2018",
      "content_text": "Xray - An experimental next-generation Electron-based text editor. This update covers a revised roadmap, fast file finding, and thoughts on key bindings.",
      "url": "https://github.com/atom/xray/blob/master/docs/updates/2018_03_26.md",
      "date_published": "2018-03-26T00:00:00+00:00",
      "author": {
        "name": "Xray Team",
        "url": "https://github.com/atom/xray"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "eef1f270-fb75-475a-b10c-8e3813990362",
      "title": "Atomics ☢ and memory ordering",
      "content_text": "Taming multiple threads is a mess. Not only many things can happen all at once, but what you wrote in the code isn’t exactly what happens in the CPU. To gain some more performance, the compiler cheats if it thinks nobody is watching. It can reorder instructions or throw some of them out if they look useless. The same happens in the hardware. Furthermore, there isn’t just one RAM, but each memory location can live in different caches at each time and some of them are private to each CPU. It would not make do to publish all the local changes to one’s cache right away.",
      "url": "https://vorner.github.io/2018/03/25/Atomics.html",
      "date_published": "2018-03-25T00:00:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ad4ba620-3dae-4618-abc7-e245c97369d3",
      "title": "Refactoring some repetitive code to a Rust macro",
      "content_text": "I have started porting the code in librsvg that parses SVG's CSS properties from C to Rust. Many properties have symbolic values. StrokeLinejoin is the first property that I ported. First I had to write a little bunch of machinery to allow CSS properties to be kept in Rust-space instead of the main C structure that holds them (upcoming blog post about that). But for now, I just want to show how this boiled down to a macro after refactoring.",
      "url": "https://people.gnome.org/~federico/blog/refactoring-some-repetitive-code-to-a-macro.html",
      "date_published": "2018-03-23T11:01:30-06:00",
      "author": {
        "name": "Federico Mena Quintero",
        "url": "https://people.gnome.org/~federico/blog/index.html"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "348de5bf-0fa7-48d1-b112-20cd13cfd3f3",
      "title": "Writing A Driver in Rust Using Embedded-Hal Traits for the RN4870 BLE Module",
      "content_text": "This post will document my process and thoughts on writing a driver for a bluetooth module using Rust and the embedded-hal crate. The specific bluetooth device I will be using is the RN4870 BLE castellated module. It features a simple UART interface and handles most of the complexities of BLE itself, making it very easy to get a simple BLE connection up and running.",
      "url": "http://byronwasti.com/post/writing_a_ble_driver_in_rust/",
      "date_published": "2018-03-25T20:15:57+00:00",
      "author": {
        "name": "Byron Wasti",
        "url": "http://byronwasti.com/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "bf2c60f0-b2be-44c4-ba38-dce0f5b2e041",
      "title": "Mutating Rust: Under Cover",
      "content_text": "Any mutation testing tool worth its salt uses coverage to restrict the number of tests to run. mutagen is no exception, of course, so once we had a test runner, we wanted to extend it with coverage-based testing.",
      "url": "https://llogiq.github.io/2018/03/25/cover.html",
      "date_published": "2018-03-25T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a15836bc-6eaf-46c9-8fe8-70bd2fada61e",
      "title": "The tower of hanoi in Rust",
      "content_text": "The tower of hanoi algorithm is practice for recursive function.",
      "url": "https://masahiko-ofgp-notebook.blogspot.com.au/2018/03/the-tower-of-hanoi-by-rust-lang.html?m=1",
      "date_published": "2018-03-25T13:23:00+11:00",
      "author": {
        "name": "masahiko",
        "url": "https://masahiko-ofgp-notebook.blogspot.com.au/?m=1"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "e0dec9da-faee-4dcd-bfd2-8e14dda4f3f6",
      "title": "Compiling Rust + Windows + GTK step-by-step",
      "content_text": "In case you have tried to make a rust program with GUI that would work both on Linux and Windows, you probably may have faced some issues in some point (especially if you are a newcomer). Compiling in Linux is quite easy, but in Windows life gets a bit tricky.\n\nI've pulled together some info from here and there so that no-one else had to fight their way through fire and flames.",
      "url": "https://www.reddit.com/r/rust/comments/86kmhu/compiling_rust_windows_gtk_stepbystep/",
      "date_published": "2018-03-23T13:29:57+00:00",
      "author": {
        "name": "light3rn",
        "url": "https://www.reddit.com/user/light3rn"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "9e02b413-b1dd-42a3-a970-2d7b89354c0c",
      "title": "A look at Tokio: how this asynchronous event handler works (Russian)",
      "content_text": "И для чего он используется в фреймворке для приватных блокчейнов Exonum Tokio — это фреймворк для разработки сетевых масштабируемых приложений на Rust,...",
      "url": "https://habrahabr.ru/company/bitfury/blog/351824/",
      "date_published": "2018-03-22T16:46:00+00:00",
      "author": {
        "name": "Алина Тестова",
        "url": "https://habrahabr.ru/company/bitfury/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "6cf2d39d-3ea9-4af4-b9c7-a368be610189",
      "title": "Python Idioms in Rust",
      "content_text": "I’ve been going through a period of programming language wanderlust over the past couple months. Recently, I’ve been quite interested in Rust. Coming from Python, I’ve found a lot of Rust’s language features to be quite powerful.",
      "url": "http://benjamincongdon.me/blog/2018/03/23/Python-Idioms-in-Rust/",
      "date_published": "2018-03-23T12:23:22+00:00",
      "author": {
        "name": "Benjamin Congdon",
        "url": "http://benjamincongdon.me/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "93eaac73-c49e-4d21-8d11-f9ca7e40721c",
      "title": "From python to Go to Rust: an opinionated journey",
      "content_text": "When looking for a new backend language, I naturally went from Python to the new cool kid: Go. But after only one week of Go, I realised that Go was only half of a progress. Better suited to my needs than Python, but too far away from the developer experience I was enjoying when doing Elm in the frontend. So I gave Rust a try.",
      "url": "http://tech.allo-media.net/point/of/view/2018/03/22/from-python-to-go-to-rust.html",
      "date_published": "2018-03-22T09:00:00+01:00",
      "author": {
        "name": "Allo-Media",
        "url": "http://tech.allo-media.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c57dc18b-48b9-453e-b44a-46da4dce6d8e",
      "title": "Safe Peripheral Management",
      "content_text": "This post describes the recently merged PeripheralManager, which helps software ensure it always accesses hardware correctly, and cleans up after it’s done.",
      "url": "https://www.tockos.org/blog/2018/peripheral-management/",
      "date_published": "2018-03-21T00:00:00+00:00",
      "author": {
        "name": "Pat Pannuto",
        "url": "https://www.tockos.org/blog/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "afdcd322-eab4-4363-be76-cecaa050e867",
      "title": "Async/Await VI: 6 weeks of great progress",
      "content_text": "It’s hard to believe its been almost 6 weeks since the last post I made about async/await in Rust. So much has happened that these last several weeks have flown by. We’ve made exceptionally good progress on solving the problem laid out in the first post of this series, and I want to document it all for everyone.\nFuture and the pinning API Last month I wrote an RFC called “Standard library API for immovable types”.",
      "url": "https://boats.gitlab.io/blog/post/2018-03-20-async-vi/",
      "date_published": "2018-03-20T00:00:00+00:00",
      "author": {
        "name": "withoutboats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "73cbd270-d16d-4aec-b38d-9503961891bd",
      "title": "Presentation Manager written in Rust",
      "content_text": "A tool for serving and managing presentation slides.",
      "url": "https://medium.com/@mattdark/presentation-manager-written-in-rustlang-f36b73bb8dd2",
      "date_published": "2018-03-19T23:28:45.107+00:00",
      "author": {
        "name": "Mario García",
        "url": "https://medium.com/@mattdark"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "f860801f-7b99-4fe3-88cc-a6c00ca7d97a",
      "title": "HTS221 Humidity and Temperature Sensor",
      "content_text": "ST Micro’s HTS221 is a “capacitive digital sensor for relative humidity and temperature” that can be used over either I²C or SPI. It is factory-calibrated, so there is no end-user calibration to incorporate into your application. The driver provides a simple, high-level API to configure the chip once on startup, then read the temperature and humidity.",
      "url": "https://medium.com/@pdanielgallagher/hts221-humidity-and-temperature-sensor-88056ea9e5fa",
      "date_published": "2018-03-20T04:16:48.453+00:00",
      "author": {
        "name": "Daniel Gallagher",
        "url": "https://medium.com/@pdanielgallagher"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "e32bb679-4afa-48d9-ab51-d589a590348e",
      "title": "Building a Restful CRUD API with Rust",
      "content_text": "Since my initial Node/Rust REST comparison, I’ve wanted to follow up with a comprehensive guide for getting simple CRUD operations up and running in Rust.",
      "url": "https://medium.com/sean3z/building-a-restful-crud-api-with-rust-1867308352d8",
      "date_published": "2018-03-19T04:29:33.114+00:00",
      "author": {
        "name": "Sean Wragg",
        "url": "https://medium.com/@sean3z"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "8bd1d21c-79d1-4470-9d49-907c26ab0057",
      "title": "Type-directed metaprogramming in Rust",
      "content_text": "I explore how to use Rust compiler internals to metaprogram Rust using information from the typechecker, e.g. to automatically insert garbage-collection into Rust code, and discuss the benefits and drawbacks of this approach.",
      "url": "http://willcrichton.net/notes/type-directed-metaprogramming-in-rust/",
      "date_published": "2018-03-18T00:00:00+00:00",
      "author": {
        "name": "Will Crichton",
        "url": "http://willcrichton.net/notes/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "03cf26ef-4e0f-4124-91ec-064467299583",
      "title": "Putting bors on a PIP",
      "content_text": "We have a problem: the average queue of ready-to-test PRs to the main Rust repo has been steadily growing for a year. And at the same time, the likelihood of merge conflicts is also growing, as we include more submodules and Cargo dependencies that require updates to Cargo.lock.",
      "url": "http://aturon.github.io/2018/03/19/bors/",
      "date_published": "2018-03-19T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c5aa834d-c9d6-4e24-8abf-a9db4cb5cf29",
      "title": "Rust — Intro and Installation in Ubuntu",
      "content_text": "Rust is a new age programming language that tries to fight our bad practices in coding. It is a Systems Programming Language, which runs…",
      "url": "https://medium.com/aackam/rust-intro-and-installation-in-ubuntu-bd4720a64f31",
      "date_published": "2018-03-19T22:36:52.175+00:00",
      "author": {
        "name": "VIJAYAN N",
        "url": "https://medium.com/@vjn"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "dae19f32-236c-4329-b26d-e6c47b2631d3",
      "title": "Multicasting in Rust",
      "content_text": "A brief post to help others multicast in Rust",
      "url": "https://bluejekyll.github.io/blog/rust/2018/03/18/multicasting-in-rust.html",
      "date_published": "2018-03-18T07:00:00+00:00",
      "author": {
        "name": "Benjamin Fry",
        "url": "https://bluejekyll.github.io/blog/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "908c4bee-bf00-4e80-8136-9282eb8de6f6",
      "title": "Rust Lifetimes or: How I Learned to Stop Free-ing and Love the Borrow",
      "content_text": "To me one of the initial shocks of learning Rust was figuring out lifetimes. As a frontend-by-day developer I don't come face-to-face with the 'Double free' and 'Use after free' problems all that often. Actually, it could be easily argued that my backend-brethren don't really either or, for that matter, anyone who's typically dealing with a garbage collected language. I'm looking over at you JS, Java, and Ruby devs. I'd bet most neckbea.. *cough, excuse me, C developers are comfortable with these issues but alas, I am not. As such, lifetimes were kinda difficult to wrap my head around but I think I get them a little better now so let me try to explain.",
      "url": "http://mttyng.com/rust-lifetimes-or-how-i-learned-to-stop-free-ing-and-love-the-borrow/",
      "date_published": "2018-03-09T00:00:00+00:00",
      "author": {
        "name": "Matt",
        "url": "http://mttyng.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "655ac748-e1e9-4fa4-b12a-2dc7c2e88fa7",
      "title": "Building a fast Electron app with Rust",
      "content_text": "When I built Finda, I wanted it to be fast — specifically, to respond to all user input within 16 milliseconds.\n\nGiven this goal, you might be surprised to learn that Finda is built with Electron, a framework that’s often decried for being the opposite of fast.",
      "url": "https://keminglabs.com/blog/building-a-fast-electron-app-with-rust/",
      "date_published": "2018-03-18T00:00:00+11:00",
      "author": {
        "name": "Kevin J. Lynagh",
        "url": "https://keminglabs.com/blog/"
      },
      "tags": [
        "Tools and Applications",
        "Performance"
      ]
    },
    {
      "id": "1fe95cfd-488a-41a5-adca-a44d8f79c679",
      "title": "What's a where clause?",
      "content_text": "I've been trying to get a hang of some of the more advanced, and weird, concepts of Rust. With any new language it's a little difficult to know where to begin. How do you throw yourself into the deep-end of something without knowing where the deep-end is?",
      "url": "http://mttyng.com/whats-a-where-clause/",
      "date_published": "2018-02-20T00:00:00+00:00",
      "author": {
        "name": "Matt",
        "url": "http://mttyng.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "465a729e-a243-4cd7-bee8-e0c7d5d09fbd",
      "title": "Number Theory using Rust's type system",
      "content_text": "Rust does not have dependent types, or GADTs like Haskell, but with a few tricks, we can use Rust's type system to emulate an Idris-like number system.",
      "url": "https://shingtaklam1324.github.io/number-theory-rust/",
      "date_published": "2018-03-18T00:00:00+11:00",
      "author": {
        "name": "shingtaklam1324",
        "url": "https://shingtaklam1324.github.io/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "17b6e878-388f-40c5-93a0-cf3da64a1078",
      "title": "stencil; abstract stencil calculation",
      "content_text": "I am developing a library for stencil calculation in Rust.",
      "url": "https://dev.to/termoshtt/stencil-abstract-stencil-calculation-i2m",
      "date_published": "2018-03-17T00:00:00+00:00",
      "author": {
        "name": "termoshtt",
        "url": "https://dev.to/termoshtt"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "f1b7c59f-fff8-4000-ac97-2be742b86760",
      "title": "Achieving memory safety without compromise",
      "content_text": "A new generation of safe programming languages is leaving garbage collectors and runtimes behind, delivering memory safety and control.",
      "url": "https://www.embedded.com/electronics-blogs/say-what-/4460422/Achieving-memory-safety-without-compromise",
      "date_published": "2018-03-13T16:32:00+00:00",
      "author": {
        "name": "Adam Foltzer",
        "url": "https://www.embedded.com/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "44e96573-f8b3-4577-8a76-1cbc8a65ec8b",
      "title": "Building a DNS server in Rust",
      "content_text": "With the combined goal of gaining a deep understanding of DNS, of doing something interesting with Rust, and of scratching some of my own itches, I originally set out to implement my own DNS server. This document is not a truthful chronicle of that journey, but rather an idealized version of it, without all the detours I ended up taking. We'll gradually implement a full DNS server, starting from first principles.",
      "url": "https://github.com/EmilHernvall/dnsguide",
      "date_published": "2018-03-16T00:00:00+00:00",
      "author": {
        "name": "Emil Hernvall",
        "url": "https://github.com/EmilHernvall"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "f5ba053a-1bbb-465d-a430-55bd0a1d357a",
      "title": "How Rust Implements Tagged Unions",
      "content_text": "The Rust compiler implements tagged unions, which prevent you from crashing your program by initializing a union with one variant and accessing it with another. Rust uses enum to improve on both C enums and C unions at the same time.",
      "url": "http://patshaughnessy.net/2018/3/15/how-rust-implements-tagged-unions",
      "date_published": "2018-03-15T03:00:00+00:00",
      "author": {
        "name": "Pat Shaughnessy",
        "url": "http://patshaughnessy.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "81e14040-a499-4802-9d1b-c58deeb2be79",
      "title": "Deciding if two types are equal",
      "content_text": "mutagen until recently suffered a bug that rendered both the return input and the interchange arguments mutation inapplicable.\n\nTo explain, the former mutation compares each input type with the return type and allows code to return inputs of the same type, if any, while the latter compares input arguments’ types and exchanges two equally-typed inputs.",
      "url": "https://llogiq.github.io/2018/03/15/types.html",
      "date_published": "2018-03-15T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a4faa45e-f24e-4ce9-822c-5c4623919e17",
      "title": "Tock 1.0 Kernel Released",
      "content_text": "We silently tag our first rolling release of the Tock kernel in February. If you’re building applications with Tock or porting to a new board, and want to be immune from updating your code everyday, you can work from that tag. We’ll also upload binary kernel images for the supported board sometime soon.",
      "url": "https://www.tockos.org/blog/2018/talking-tock-35/",
      "date_published": "2018-03-06T00:00:00+00:00",
      "author": {
        "name": "Amit Levy",
        "url": "https://www.tockos.org/blog/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "eabc9692-30cf-4511-89f4-9068b46aadd8",
      "title": "A Comparison Between Rust and Erlang",
      "content_text": "This article will focus on a comparison between Erlang and Rust, detailing their similarities and differences. It may be interesting to both Erlang developers looking into Rust and Rust developers looking into Erlang. A final section will detail more about each of the language capabilities and shortcomings and argue for the possibility of leveraging both languages' strengths in the same project.",
      "url": "https://www.infoq.com/articles/rust-erlang-comparison",
      "date_published": "2018-03-13T00:00:00+00:00",
      "author": {
        "name": " Krishna Kumar Thokala",
        "url": "https://www.infoq.com/profile/Krishna-Kumar-Thokala"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "24afdde0-ef13-4e26-b39e-b2f9d52ab901",
      "title": "How to use external crates with macros in Rust",
      "content_text": "A simple approach to use external crates with our macros in Rust.",
      "url": "https://medium.com/@kimond/how-to-use-external-crates-with-our-macros-in-rust-6dfe025351e0",
      "date_published": "2018-03-14T12:45:30.700+00:00",
      "author": {
        "name": "Kim Desrosiers",
        "url": "https://medium.com/@kimond"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "39f186f6-b177-43e6-9b4c-7ffe689926e7",
      "title": "Parc3l: Combining Three.js, Rust, and WebAssembly!",
      "content_text": "WebAssembly has been interesting me lately, specifically the prospect of doing arithmetically-intensive operations with it, not unlike the fantastic physics engine Emscripten port Ammo.js. Compiling something like that is out of the scope of this little post (but should be getting easier!), and I’ve left some links at the bottom so you can clear more about WebAssembly if you’re interested.",
      "url": "https://medium.com/@cwervo/parc3l-combining-three-js-rust-and-webassembly-c1e643ef7681",
      "date_published": "2018-03-12T14:34:23.064+00:00",
      "author": {
        "name": "Andres Cuervo",
        "url": "https://medium.com/@cwervo"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "bf12d6fd-0aea-4d74-b3a7-02a538d210d3",
      "title": "Making WebAssembly better for Rust & for all languages",
      "content_text": "To be a useful as a web language, Rust needs to work well with the JavaScript ecosystem. We have some work to do to get there, and fortunately that work ...",
      "url": "https://hacks.mozilla.org/2018/03/making-webassembly-better-for-rust-for-all-languages/",
      "date_published": "2018-03-14T15:02:52+00:00",
      "author": {
        "name": "Lin Clark",
        "url": "http://code-cartoons.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "249e8bc3-a836-4b71-89b6-8d7c4d1b0977",
      "title": "Weekly Driver: Using the MCP3425 ADC from Rust",
      "content_text": "Announing the MCP3425 Rust driver.",
      "url": "https://blog.dbrgn.ch/2018/3/13/rust-mcp3425-driver/",
      "date_published": "2018-03-13T00:00:00+01:00",
      "author": {
        "name": "Danilo Bargen",
        "url": "https://blog.dbrgn.ch/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "962abf61-6061-4e8d-90b1-1d3ba90d5e1d",
      "title": "mutagen: Pattern Boldness",
      "content_text": "At the moment, mutagen only considers top-level idents in function arguments (e.g.foo(x: X, y: Y)), but function arguments are actually patterns, so we could have foo((x, y): (X, Y)) or bar(Bar { bla, bazz } : Bar). For now, this means we have no type information for either of those examples.",
      "url": "http://llogiq.github.io/2018/03/13/patterns.html",
      "date_published": "2018-03-13T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "a48d8156-7f0f-4731-a17b-e36678b86f5f",
      "title": "Weekly driver 4: ENC28J60, Ethernet for your microcontroller",
      "content_text": "This week I’m releasing a driver for the ENC28J60, an Ethernet controller with SPI interface. This IC lets you connect your microcontroller, if it has a SPI interface, to a Local Area Network or, with more work, to the internet. Apart from the IC you need a RJ45 connector and a few other components so I’m using this module which has the ENC28J60 and all the required components on a single board.",
      "url": "http://blog.japaric.io/wd-4-enc28j60/",
      "date_published": "2018-03-13T04:32:18+01:00",
      "author": {
        "name": "Jorge Aparicio",
        "url": "http://blog.japaric.io/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "85524257-1035-4e25-b20b-57737d314b55",
      "title": "Roguelike Tutorial in Rust + tcod",
      "content_text": "Hello! This tutorial will show you how to write a roguelike in the Rust programming language and the libtcod library.",
      "url": "https://tomassedovic.github.io/roguelike-tutorial/",
      "date_published": "2018-03-13T18:54:54+02:00",
      "author": {
        "name": "Tomas Sedovic",
        "url": "https://tomassedovic.github.io/roguelike-tutorial/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "4ed8ee1b-6f71-4ac5-b7e5-142509562231",
      "title": "Rust's 2018 Roadmap",
      "content_text": "Each year the Rust community comes together to set out a roadmap. This year, in addition to the survey, we put out a call for blog posts in December, which resulted in 100 blog posts written over the span of a few weeks. The end result is the recently-merged 2018 roadmap RFC.",
      "url": "https://blog.rust-lang.org/2018/03/12/roadmap.html",
      "date_published": "2018-03-12T00:00:00+00:00",
      "author": {
        "name": "The Rust Core Team",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4d94c5ba-199d-44c2-9148-7a6bbff699d0",
      "title": "Crashing a Rust Hyper server with a Denial of Service attack",
      "content_text": "I’m writing a reverse proxy in Rust using Hyper and I want to measure performance a bit to know if I’m doing something terribly wrong. By doing that I discovered a Denial of Service vulnerability in Hyper when IO errors are not properly handled. Note that a workaround has been released in the meantime in Hyper 0.11.20, more background info can be found in this Hyper issue.",
      "url": "https://klausi.github.io/rustnish/2018/03/11/crashing-a-rust-hyper-server-with-a-denial-of-service-attack.html",
      "date_published": "2018-03-11T00:00:00+00:00",
      "author": {
        "name": "Klaus Purer",
        "url": "https://klausi.github.io/rustnish/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "90d39fbf-c75d-4943-9069-4b65d11b1be9",
      "title": "Should You Learn Rust?",
      "content_text": "Oftentimes, I see a variant of this question posted or asked somewhere. In general, most of the times I think the answer is „Yes“, but maybe for reasons other than you’d think at first.",
      "url": "https://vorner.github.io/2018/03/11/Should-you-learn-rust.html",
      "date_published": "2018-03-11T00:00:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e03aa0e5-bb05-48f0-a4a4-0796d14d1115",
      "title": "Writing a Simple IPFS Crawler",
      "content_text": "IPFS is a peer-to-peer protocol that allows you to access and publish content in a decentralized fashion. It uses hashes to refer to files. Short of someone posting hashes on a website, discoverability of content is pretty low. In this article, we’re going to write a very simple crawler for IPFS.\nIt’s challenging to have a traditional search engine in IPFS because content rarely links to each other. But there is another way than just blindly following links like a traditional crawler.",
      "url": "https://gkbrk.com/2018/03/writing-a-simple-ipfs-crawler/",
      "date_published": "2018-03-12T00:00:00+00:00",
      "author": {
        "name": "Gökberk Yaltıraklı",
        "url": "https://gkbrk.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "9ecf3a00-a806-4914-a3e2-fd360f7199ed",
      "title": "Rust Tutorial",
      "content_text": "The aim of this tutorial is to take you to a place where you can read and write enough Rust to fully appreciate the excellent learning resources available online, in particular The Book. It’s an opportunity to try before you buy, and get enough feeling for the power of the language to want to go deeper.",
      "url": "https://slashtutorial.com/rust/",
      "date_published": "2018-03-12T16:23:55+00:00",
      "author": {
        "name": "Slash Tutorial",
        "url": "https://slashtutorial.com/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "bd4b8e12-dd4d-4bf8-b553-f5f912ec4e87",
      "title": "The Union of Parallel Universes",
      "content_text": "Rustdoc has a pretty powerful feature that feels pretty unknown. It doesn’t help that it’s currently restricted by a nightly feature gate, but it’s still cool enough that I want to talk about it.",
      "url": "https://quietmisdreavus.net/code/2018/03/09/the-union-of-parallel-universes/",
      "date_published": "2018-03-09T14:30:00-06:00",
      "author": {
        "name": "QuietMisdreavus",
        "url": "https://quietmisdreavus.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "db7ea4c5-14ae-4a9d-9bf4-a314c20225f7",
      "title": "Exploring Function Overloading",
      "content_text": "Overloading is the ability to create multiple functions of the same name with different implementations.\n\nRust has no traditional overloading, you cannot define two methods with the same name. The compiler will complain that you have a duplicate definition regardless of the different argument types.",
      "url": "http://casualhacks.net/blog/2018-03-10/exploring-function-overloading/",
      "date_published": "2018-03-10T00:00:00+09:00",
      "author": {
        "name": "Casper",
        "url": "http://casualhacks.net/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "f6bf64c8-3a31-4614-ba91-f5c16a0986b5",
      "title": "Writing an OS in Pure Rust",
      "content_text": "Over the past six months we've been working on a second edition of this blog. Our goals for this new version are numerous and we are still not done yet, but today we reached a major milestone: It is now possible to build the OS natively on Windows, macOS, and Linux without any non-Rust dependendencies.",
      "url": "https://os.phil-opp.com/news/2018-03-09-pure-rust/",
      "date_published": "2018-03-09T00:00:00+00:00",
      "author": {
        "name": "Philipp Oppermann",
        "url": "https://os.phil-opp.com/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "44f7fa8d-b23d-47e7-b3dd-f227e8317d49",
      "title": "A Tiny `ls` Clone Written in Rust",
      "content_text": "In my series of useless Unix tools rewritten in Rust, today I'm going to be covering one of my all-time favorites: ls.",
      "url": "https://matthias-endler.de/2018/ls/",
      "date_published": "2018-03-01T00:00:00+00:00",
      "author": {
        "name": "Matthias Endler",
        "url": "https://matthias-endler.de/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "0d2f8636-6f6c-42f3-8159-beac5a856009",
      "title": "Redefining Failure",
      "content_text": "I recently got the chance to redo the error handling in two different crates I help maintain. For liquid, I decided to write the error types by hand rather than use something like error-chain. In the case of assert_cli, I decided to finally give failure a try.",
      "url": "https://epage.github.io/blog/2018/03/redefining-failure/",
      "date_published": "2018-03-09T03:08:23+00:00",
      "author": {
        "name": "Ed Page",
        "url": "https://epage.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "fd8646cf-2689-4bd8-b065-4708388250d2",
      "title": "Announcing the Tokio runtime",
      "content_text": "I’m happy to announce a new release of Tokio. This release includes the first iteration of the Tokio Runtime.",
      "url": "https://tokio.rs/blog/2018-03-tokio-runtime/",
      "date_published": "2018-03-08T00:00:00+00:00",
      "author": {
        "name": "Carl Lerche",
        "url": "https://tokio.rs/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "64fe2d3c-c0cb-41a2-8faf-08d19e59c439",
      "title": "Get started with the Rust programming language",
      "content_text": "A recent Stack Overflow survey found that almost 80% of respondents loved using or wanted to develop with the Rust language. That's an incredible number! So, what's so good about Rust? This article explores the high points of this C-like language and illustrates why it should be next on your list of languages to learn.",
      "url": "https://www.ibm.com/developerworks/opensource/library/os-developers-know-rust/index.html?ca=drs",
      "date_published": "2018-03-08T00:00:00+00:00",
      "author": {
        "name": "M. Tim Jones",
        "url": "https://www.ibm.com/developerworks/opensource/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "c35de4ff-df45-4774-998f-f56ddb57b5d2",
      "title": "Building and Deploying Rust with VSTS",
      "content_text": "Since I started at Microsoft about 6 months ago, I had to catch up on their (our) tech: Azure, .NET, Visual Studio. Yet as an avid GitHub user I overlooked one thing completely: Visual Studio Team Services! Turns out it’s quite the hidden gem and after a colleague showed me some of its power, I had to look into it more deeply. Turns out it’s an easy and free resource for any project. Can it help your project? Yes! How? Find out below 😊",
      "url": "https://blog.x5ff.xyz/blog/rust-ci-cd-vsts/",
      "date_published": "2018-03-02T00:00:00+00:00",
      "author": {
        "name": "Claus",
        "url": "https://blog.x5ff.xyz/blog"
      },
      "tags": [
        "DevOps and Deployment"
      ]
    },
    {
      "id": "dd5790e1-ff4e-4f61-9a8b-05ea774a2e89",
      "title": "Writing servers with Tokio",
      "content_text": "I’ve been writing a small toy project with Tokio in my spare time’s spare time. I’ll write more about it at a later date. What I’ve found writing it, though, is that there is a specific pattern to writing servers, both UDP and TCP (and presumably others) in Tokio, and it’s not super obvious at first glance. So here it is.",
      "url": "https://blog.passcod.name/2018/mar/07/writing-servers-with-tokio",
      "date_published": "2018-03-07T09:35:30+00:00",
      "author": {
        "name": "Félix Saparelli",
        "url": "https://blog.passcod.name/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "8da41ef1-4c51-4269-bec3-fc377a0f387f",
      "title": "Coping with Mutable State in Multiple Threads with Rust",
      "content_text": "One of the value propositions most frequently lauded by Rust developers is its freedom from data races. The compiler will literally not allow you to build code that could ever produce a situation where two threads can mutate the same data.",
      "url": "https://medium.com/@KevinHoffman/coping-with-mutable-state-in-multiple-threads-with-rust-9059c83b6c01",
      "date_published": "2018-03-05T17:42:58.844+00:00",
      "author": {
        "name": "Kevin Hoffman",
        "url": "https://medium.com/@KevinHoffman"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "79704e4b-5e9f-4366-84a8-53d5a3431e2f",
      "title": "Getting A Handle On Things",
      "content_text": "Today we will take a very simple intrusive linked list written in Rust and make it safe. Kind of, anyway.\n\nBefore we start making something safe we need an unsafe thing to make safe. Let’s not pretend that what we are doing here is the least bit useful, let us instead do it just for the fun of it. (What we are doing actually is useful, the explanation of which this margin is too narrow to contain.)",
      "url": "https://eno.space/blog/2018/03/Getting-a-handle-on-things",
      "date_published": "2018-03-03T00:00:00+01:00",
      "author": {
        "name": "@u0060",
        "url": "https://eno.space/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "bd7d2caa-818d-4950-9eca-72588b038bed",
      "title": "Getting started with Rust: Reference and Lifetime",
      "content_text": "Hello everyone! You were waiting for it, and now you are going to get it! Ladies and gentlemen, today we are going to talk about reference and lifetime!",
      "url": "https://www.mathieu-nivoliez.com/posts/2018-03-05-getting-started-with-rust-reference-and-lifetime.html",
      "date_published": "2018-03-05T00:00:00+00:00",
      "author": {
        "name": "Mathieu Nivoliez",
        "url": "https://www.mathieu-nivoliez.com/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "5b0beffe-60dc-4ce3-b137-738fb51fd570",
      "title": "Getting Rusty with Vim",
      "content_text": " After dabbing in Go and Crystal, I figured I'd give Rust a try. Of course I used Vim along the way. Here are some notes I compiled after my first session.",
      "url": "https://ddrscott.github.io/blog/2018/getting-rusty-with-vim/",
      "date_published": "2018-03-04T06:30:00-06:00",
      "author": {
        "name": "Scott Pierce",
        "url": "https://ddrscott.github.io/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "0c9a85c5-9017-4922-b07a-050f36b8db84",
      "title": "Compiling Cargo crates natively with Meson",
      "content_text": "Recently we have been having discussions about how Rust and Meson should work together, especially for mixed language projects. One thing which multiple people have told me (over a time span of several years, actually) is that Rust is Special in that everyone uses crates for everything. Thus there is no point in having any sort of Rust support, the only true way is to blindly call Cargo and have it do everything exactly the way it wants to.\n\nThis seems like a reasonable recommendation so I did what every reasonable person would do and accepted this as is.\n\nBut then curiosity takes hold of you and you start to wonder. Is that really the case?",
      "url": "https://nibblestew.blogspot.com.au/2018/03/compiling-cargo-crates-natively-with.html",
      "date_published": "2018-03-04T05:35:00-08:00",
      "author": {
        "name": "Jussi",
        "url": "https://nibblestew.blogspot.com.au/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "776dd5f1-c6d0-48da-8e0a-6fcae00fb923",
      "title": "Writing a Microservice in Rust",
      "content_text": "Let me begin this article on Writing a Microservice in Rust by talking about C++. I’ve been a reasonably active member of the C++ community for quite a while now, attending and contributing talks to conferences, following the development and evangelism of the language’s more modern features and of course writing lots of it. C++ is a language that gives its users very fine-grained control over all aspects of the program they are writing, at the cost of a steep learning curve and a large body of knowledge required to write effective C++. However, C++ is also a very old language, conceived by Bjarne Stroustrup in 1985, and thus caries a lot of technical debt even into modern standards.",
      "url": "http://www.goldsborough.me/rust/web/tutorial/2018/01/20/17-01-11-writing_a_microservice_in_rust/",
      "date_published": "2018-01-20T00:00:00+00:00",
      "author": {
        "name": "Peter Goldsborough",
        "url": "http://www.goldsborough.me/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "85925a6b-30c1-4c0f-8caf-b6ccd9e3e19c",
      "title": "Encheapening Cernan Internal Metrics",
      "content_text": "In the new 0.7.x series of cernan we stumbled on a neat, cheap approach for making internal metrics available inside a rust codebase, an approach that has legs in other projects, I'd say. This is going to be a quick note describing what cernan is, what we were doing before and how our current approach works.",
      "url": "http://blog.troutwine.us/2017/08/31/encheapening-cernan-internal-metrics/",
      "date_published": "2018-03-04T00:00:00+00:00",
      "author": {
        "name": "Brian L. Troutwine",
        "url": "http://blog.troutwine.us/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c59a9688-62e5-4919-8687-e5ff82c3c5a3",
      "title": "Why Rust Has Macros",
      "content_text": "When I recently told a coworker that Rust has macros, his first reaction was that this was bad. Previously I would have had the same reaction, but a part of what learning Rust has taught me is that macros don’t need to be bad. This post exists to help explain why that is, by diving into what problems macros solve, with a brief look at their downsides as well. In other words, this post is not a technical deep dive on how macros work, but focuses on the use cases for macros, and doesn’t require much knowledge about Rust to follow.",
      "url": "https://kasma1990.gitlab.io/2018/03/04/why-rust-has-macros/",
      "date_published": "2018-03-04T00:00:00+00:00",
      "author": {
        "name": "Kasper Andersen",
        "url": "https://kasma1990.gitlab.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "95bd2ff7-1a99-4092-931a-b17d782282d3",
      "title": "Serializing awkward data with serde",
      "content_text": "Recently I’ve been writing Rust code to work with a third-party data source in TOML format. In other languages I’d just load the data with some standard TOML library and have my program rummage through it, but I’ve been hearing lovely things about the Rust serialization library serde, so I figured I’d try it out.",
      "url": "http://zork.net/~st/jottings/Serializing_awkward_data_with_serde.html",
      "date_published": "2018-03-04T07:43:09+00:00",
      "author": {
        "name": "Screwtape",
        "url": "http://zork.net/~st/jottings/all_pages.html"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "39d1ac9b-501b-46c3-b2e6-68f2d4aabe1d",
      "title": "Making a Brainf*ck to C Compiler in Rust",
      "content_text": "Let’s make a tokenizer and code generator to understand the basics behind tiny compilers.",
      "url": "https://medium.com/@CanHasCommunism/making-a-brainf-ck-to-c-compiler-in-rust-10f0c01a282d",
      "date_published": "2018-03-03T18:13:20.377+00:00",
      "author": {
        "name": "Aesl",
        "url": "https://medium.com/@CanHasCommunism"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ae89c8c8-fd8f-4432-9b21-1a2651142869",
      "title": "UniverCity - February Change log",
      "content_text": "UniverCity is a university management game being programmed in the Rust programming language. This month was spent mostly on the business side of things, including going through the steam partner process.",
      "url": "https://thinkof.name/2018/02/28/february-change-log.html",
      "date_published": "2018-02-28T00:00:00+00:00",
      "author": {
        "name": "Matthew Collins",
        "url": "https://thinkof.name/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "2f386775-d0a5-474b-a9de-c14af7453c40",
      "title": "Opportunistic Mutations",
      "content_text": "As you may know, my current mutagen project deals with mutation testing in Rust. However, as I remarked, Rust’s famed flexibility leaves us little room to do mutations while keeping the type checker happy. For example, other mutation testing frameworks can mutate x + y to x - y.\n\nThis is an interesting mutation, because it’s so easy to do in languages like Java, which have full type information available at the bytecode level and so hard to do in Rust, because the std::ops traits make everything so hecking flexible.",
      "url": "https://llogiq.github.io/2018/03/03/opportune.html",
      "date_published": "2018-03-03T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "407d3ba2-d0af-4121-b13a-468b1f0f66cd",
      "title": "Stopping a Rust worker",
      "content_text": "This is a small post about a specific pattern for cancellation in the Rust programming language. The pattern is simple and elegant, but it’s rather difficult to come up with it by yourself.",
      "url": "https://matklad.github.io/2018/03/02/stopping-a-rust-worker.html",
      "date_published": "2018-03-02T20:11:50+00:00",
      "author": {
        "name": "Aleksey Kladov",
        "url": "https://matklad.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4c17c0f4-8148-4408-a54f-733e20c89189",
      "title": "Rust for Java Devs – Structs",
      "content_text": "Next up in Rust for Java Devs we have structs. They are used to hold data within a logical unit that can be passed to other functions or execute their own methods on the values that they store. Now this sounds very familiar… Java objects do the same thing. For example if you took a POJO (Plain Old Java Object) you also pass it to other methods or execute the object’s own methods. In this nature they are alike, but they do have their differences. In this post we will look into creating structs, retrieving their values, defining their own methods and how to execute them.",
      "url": "https://lankydanblog.com/2018/03/01/rust-for-java-devs-structs/",
      "date_published": "2018-03-01T20:03:54+00:00",
      "author": {
        "name": "Dan Newton",
        "url": "https://lankydanblog.com/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "3907940b-eb06-4f2a-a3ff-6df4ae5ac9ca",
      "title": "Rust on the STMicro Nucleo",
      "content_text": "For the embedded portion of my project, I had two decisions to make: which processors and chips to use, and which language to write the firmware in. Since this personal project is about learning new skills, I decided to use Rust instead of C. I opted to use STMicro’s Nucleo boards, since their ecosystem has shields that do all of the things I would like (WiFi, BLE, and environmental sensing), and there was also a great Rust tutorial for a similar board. However, since I’ve never really done any embedded development, I decided to start with the old standby: copying code off the internet!",
      "url": "https://medium.com/@pdanielgallagher/rust-on-the-stmicro-nucleo-7a66b97be549",
      "date_published": "2018-03-01T05:50:42.487+00:00",
      "author": {
        "name": "Daniel Gallagher",
        "url": "https://medium.com/@pdanielgallagher"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "ab076ead-649f-47ff-8fa2-a7c243ba3dca",
      "title": "Docker Multi-Stage Build",
      "content_text": "On June 13, 2017 took place the Paris Container Day. They unveiled a new docker feature: multi-stage build. That's the subject of this article.",
      "url": "https://blog.jawg.io/docker-multi-stage-build/",
      "date_published": "2018-03-01T14:00:00+00:00",
      "author": {
        "name": "Jones Magloire",
        "url": "http://blog.jawg.io/"
      },
      "tags": [
        "Language",
        "DevOps and Deployment"
      ]
    },
    {
      "id": "257617e2-c1fe-44c7-9cb9-7c07495b96ec",
      "title": "Object Shadowing for Serialization of Complex Types",
      "content_text": "Presently, I’m busy writing a capture the flag (CTF) scoreboard, it requires rather complex structures and relationships with other internal objects. Being a security event, I’d also like to maintain explicit control of user data. While serialization in Rust has come a significant way, leveraging auto-generation presents some issues.",
      "url": "https://commiebstrd.github.io/rustlang/serde/json/2018/03/01/object-shadowing.html",
      "date_published": "2018-03-01T05:00:00+00:00",
      "author": {
        "name": "Spenser Reinhardt",
        "url": "https://commiebstrd.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ca98f7f9-8927-48e9-8028-15e81f20f8a6",
      "title": "Add examples to your Rust libraries",
      "content_text": "When you’re writing a library for other programs to depend on, it is paramount to think how the developers are going to use it in their code.\n\nThe best way to ensure they have a pleasant experience is to put yourself in their shoes. Forget the internal details of your package, and consider only its outward interface. Then, come up with a realistic use case and just implement it.\n\nIn other words, you should create complete, end-to-end, and (somewhat) usable example applications.",
      "url": "http://xion.io/post/code/rust-examples.html",
      "date_published": "2018-02-28T08:37:00+01:00",
      "author": {
        "name": "Karol Kuczmarski",
        "url": "http://xion.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "d377bc0d-a127-456d-81fa-926fe634de0f",
      "title": "Fast Search Through Metric Spaces with Rust and BK Trees",
      "content_text": "In the previous post, pHash helped us to summarize our photo album. Now it’s time to employ BK-trees and efficiently search through the metric space of perceptual hashes. Let’s roll up the sleeves; more Rust awaits!",
      "url": "https://www.innoq.com/en/blog/looks-the-same-to-me/",
      "date_published": "2018-03-01T00:00:00+01:00",
      "author": {
        "name": "Jan Stępień",
        "url": "https://www.innoq.com/en/staff/jans/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "0ebef41d-c7b1-424a-a120-ebf1098bbe38",
      "title": "Three Algorithm Optimizations Outside [Place], [Other place]",
      "content_text": "Recently, I came across an ad for a job that had a precondition for application: it required you to first solve a ✨programming challenge✨:",
      "url": "https://medium.com/@urschrei/three-algorithm-optimizations-outside-place-other-place-294de5a68f27",
      "date_published": "2018-02-28T17:12:42.361+00:00",
      "author": {
        "name": "Steph",
        "url": "https://medium.com/@urschrei"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "d001ce02-fbfb-4a08-8389-0f713b09bf72",
      "title": "My Rust Dockerfile",
      "content_text": "Lets deploy small docker images for Rust",
      "url": "https://blog.sedrik.se/posts/my-docker-setup-for-rust/",
      "date_published": "2018-02-26T00:00:00+00:00",
      "author": {
        "name": "Fredrik Park",
        "url": "https://blog.sedrik.se/"
      },
      "tags": [
        "Language",
        "DevOps and Deployment"
      ]
    },
    {
      "id": "067e3ce9-6e69-499c-93f8-a9c4e0f99ce9",
      "title": "Futures 0.2 is nearing release",
      "content_text": "On behalf of the futures-rs team, I’m very happy to announce that the master branch is now at 0.2: we have a release candidate! Barring any surprises, we expect to publish to crates.io in the next week or two.\n\nYou can peruse the 0.2 API via the hosted crate docs, or dive right in to the master branch. Note that Tokio is not currently compatible with Futures 0.2; see below for more detail.",
      "url": "http://aturon.github.io/2018/02/27/futures-0-2-RC/",
      "date_published": "2018-02-27T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "75898724-f900-46ae-877b-36d87b440ac1",
      "title": "Let's write an embedded-hal-driver",
      "content_text": "Mid January japaric started \"The weekly driver initiative\" with the goal to kick-start releases of platform agnostic embedded-hal based driver crates. In this post we'll build an embedded-hal-driver for the AT24C32-EEPROM chip.",
      "url": "http://zuendmasse.de/blog/2018/02/23/lets-write-an-embedded-hal-driver/",
      "date_published": "2018-02-25T00:00:00+00:00",
      "author": {
        "name": "Sebastian Wötzel",
        "url": "http://zuendmasse.de/blog/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "cec6c9fd-a92b-4f5a-8d9b-9b84c263c48f",
      "title": "Writing a doubly linked list in Rust is easy",
      "content_text": "This is a response to the recently submitted blog post titled Why Writing a Linked List in (safe) Rust is So Damned Hard. The post on Reddit was even more dramatic: Why Writing a Linked List in Rust is Basically Impossible.\n\nI see exaggarated claims like these very often - and strongly disagree. Writing a doubly linked list in Rust is not hard - in fact, it's fairly easy! The best strategy, in my opinion, is creating a vector for allocating nodes and using indices instead of pointers. This strategy is often overlooked, getting a 'honorauble mention' at best.",
      "url": "https://www.reddit.com/r/rust/comments/7zsy72/writing_a_doubly_linked_list_in_rust_is_easy/",
      "date_published": "2018-02-24T00:35:43+00:00",
      "author": {
        "name": "/u/stjepang",
        "url": "https://www.reddit.com/user/stjepang"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "0cb6b35f-0d4f-4e71-bcae-66d4cd115d41",
      "title": "Discovery: Discover the world of microcontrollers through Rust! - 2018 edition",
      "content_text": "This is an mdbook I wrote more than a year ago for a workshop and it's an introductory course to embedded systems that uses Rust as the teaching language. I just updated the starter code to use the latest versions of everything so it's now easier to jump from the book to use the latest developments in the Cortex-M ecosystem; there's no new content, though -- the exercises remain unchanged in terms of goals; just the code has changed.",
      "url": "https://www.reddit.com/r/rust/comments/80doqg/discovery_discover_the_world_of_microcontrollers/",
      "date_published": "2018-02-26T15:12:44+00:00",
      "author": {
        "name": "Jorge Aparicio",
        "url": "http://blog.japaric.io/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "5e572868-98d0-4944-b897-14cca13a39a4",
      "title": "Reasoning with Types in Rust",
      "content_text": "Rust is a modern programming language which is marketed primarily on the basis of its very nice type system, and I’d like to tell you about how you can use this type system to reason about your programs in interesting ways. Most of the time when its type system is discussed, the focus is on its guarantee of data race freedom and ability to enable so-called fearless concurrency (and rightfully so—this is a place where Rust truly shines!). Today, I have a different focus in mind, characterized perhaps most succinctly as follows:",
      "url": "https://aaronweiss.us/posts/2018-02-26-reasoning-with-types-in-rust.html",
      "date_published": "2018-02-26T00:00:00+00:00",
      "author": {
        "name": "Aaron Weiss",
        "url": "https://aaronweiss.us/archive.html"
      },
      "tags": [
        "Language",
        "Computer Science"
      ]
    },
    {
      "id": "26bc7432-d561-4e1f-8cf2-2c30b8ac63ab",
      "title": "Speed Without Wizardry",
      "content_text": "Vyacheslav Egorov, who goes by mraleph on the Web, wrote a response to my article “Oxidizing Source Maps with Rust and WebAssembly” titled “Maybe you don’t need Rust and WASM to speed up your JS”.\n\nThe “Oxidizing” article recounts my experience integrating Rust (compiled to WebAssembly) into the source-map JavaScript library. Although the JavaScript implementation was originally authored in idiomatic JavaScript style, as we profiled and implemented speed improvements, the code became hard to read and maintain. With Rust and its zero-cost abstractions, we found that there was no trade-off between performance and clean code.",
      "url": "http://fitzgeraldnick.com/2018/02/26/speed-without-wizardry.html",
      "date_published": "2018-02-26T00:00:00-08:00",
      "author": {
        "name": "Nick Fitzgerald",
        "url": "http://fitzgeraldnick.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "504ed65c-1efe-4cbd-b655-b17e89110936",
      "title": "Transcript: Should you Rust in embedded yet?",
      "content_text": "This is a transcript of a talk I gave at the Vilnius Rust meetup.\n\nIt would not be an exaggeration to say that embedded is omnipresent. You can find embedded firmware everywhere from fridges, microwaves and personal computers to safety-critical applications in automotive, medical fields, etc.\n\nMost of this software is still written in C or C++, and neither of these, given their non-ideal track record in relation to security critical software, are the most confidence inspiring choice for safety-critical systems.\n\nIn my experience, bugs occurring in embedded firmware tend to be fairly similar to those commonly found in the user-space software.",
      "url": "https://kazlauskas.me/entries/rust-embedded-ready.html",
      "date_published": "2018-02-24T20:09:27+00:00",
      "author": {
        "name": "Simonas Kazlauskas",
        "url": "https://kazlauskas.me/index.html"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "34ee0b77-cabd-47a8-bb6c-00e8a34046c7",
      "title": "An introduction to writing platform agnostic drivers in Rust using the MCP3008",
      "content_text": "Here is how a device like an accelerometer works: you send the device commands over a serial interface (SPI, I2C), say something like: “get me the X-axis reading”; the device responds by sending back some data.\n\nThe way the SPI/I2C/GPIO (and other) interfaces are programmed is very much dependent on the specific microcontroller family. But the actions you need to perform to interface with a device like a temperature sensor / accelerometer etc depend only on the device and are independent of the controller being used. What if you can write a generic accelerometer driver and use it on any microcontroller platform - right from low-end ARM Cortex-M, AVR, MSP430 etc to complex Embedded Linux platforms like the Raspberry Pi? What if you can distribute these drivers on crates.io so that you only have to include one line in your Cargo.toml to use it in your code?",
      "url": "http://pramode.in/2018/02/24/an-introduction-to-writing-embedded-hal-based-drivers-in-rust/",
      "date_published": "2018-02-24T00:00:00-05:00",
      "author": {
        "name": "Pramode C.E",
        "url": "http://pramode.in/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "0493daa3-4abb-46eb-82de-e75daea4bbac",
      "title": "Pushing Rust To 2019",
      "content_text": "Some of these suggestions are not entirely new and have been added as posts/ comments on /r/rust, Github threads. But I believe better listing down all in a one place, because now we are in the correct time even I am bit late.",
      "url": "https://medium.com/@dumindu/pushing-rust-to-2019-9616d82172d3",
      "date_published": "2018-02-23T15:44:16.399+00:00",
      "author": {
        "name": "Dumindu Madunuwan",
        "url": "https://medium.com/@dumindu"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "516e4eaf-1ce1-49be-a457-a471e9f97329",
      "title": "How doctests get made",
      "content_text": "One of rustdoc’s greatest features is the ability to take code samples within your documentation and run them like tests. This ensures that all your samples stay up to date with your library’s API changes. However, there are some steps that need to happen to massage these “doctests” into something that can be compiled and run like a regular program.",
      "url": "https://quietmisdreavus.net/code/2018/02/23/how-the-doctests-get-made/",
      "date_published": "2018-02-23T16:00:00-06:00",
      "author": {
        "name": "QuietMisdreavus",
        "url": "https://quietmisdreavus.net/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "b079d66f-d08e-4593-80cc-e0060133d12e",
      "title": "Failure 1.0.0 on March 15",
      "content_text": "I’m planning to release a 1.0.0 version of failure on March 15. Once this happens, I don’t plan to release any further breaking changes to the failure crate (though maybe someday in the distant future).\nBreaking changes in 1.0 failure is in a somewhat unique position as being a significant part of the public API of other libraries that depend on it. Whether they use the Error struct or derive Fail for a custom error type, this becomes a part of the API they expose to other users.",
      "url": "https://boats.gitlab.io/blog/post/2018-02-22-failure-1.0/",
      "date_published": "2018-02-22T00:00:00+00:00",
      "author": {
        "name": "withoutboats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "22d134e6-ddc6-4571-965c-4b6e72a544eb",
      "title": "Recently, for a Rusty Web",
      "content_text": "It’s been a few months since I shifted my focus full time to Rust, and in that time, we’ve gotten a lot of work done! I wanted to update you here what all that is, since it’s spread around on multiple repositories.",
      "url": "http://seanmonstar.com/post/171170905822/recently-for-a-rusty-web",
      "date_published": "2018-02-22T00:00:00+00:00",
      "author": {
        "name": "Sean McArthur",
        "url": "http://seanmonstar.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "450ba7fc-c3ea-4af5-bda4-06842f062de8",
      "title": "Rust Typestates",
      "content_text": "A long time ago, the Rust language was a language with typestate. Officially, typestates were dropped long before Rust 1.0. In this entry, I’ll get you in on the worst kept secret of the Rust community: Rust still has typestates.",
      "url": "https://yoric.github.io/post/rust-typestate/",
      "date_published": "2018-02-22T15:15:55+01:00",
      "author": {
        "name": "David Teller",
        "url": "https://yoric.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "c5a101b5-e749-4e99-9e08-54de2cf0a2c1",
      "title": "Oxidizing Fedora: Try Rust and its applications today",
      "content_text": "In recent years, it has become increasingly important to develop software that minimizes security vulnerabilities. Memory management bugs are a common cause of these vulnerabilities. To that end, the Mozilla community has spent the last several years building the Rust language and ecosystem which focuses primarily on eliminating those bugs. And Rust is available in Fedora today, along with a few applications in Fedora 27 and higher, as seen below.",
      "url": "https://fedoramagazine.org/oxidizing-fedora-try-rust-applications-today/",
      "date_published": "2018-02-21T08:00:23+00:00",
      "author": {
        "name": "Igor Gnatenko and Neal Gompa",
        "url": "https://fedoramagazine.org/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "0d46d60e-49c7-44ce-8f0c-48b94501b1ca",
      "title": "How to write GStreamer Elements in Rust Part 2: A raw audio sine wave source",
      "content_text": "A bit later than anticipated, this is now part two of the blog post series about writing GStreamer elements in Rust. Part one can be found here, and I’ll assume that everything written there is known already. In this part, a raw audio sine wave source element is going to be written. It will be similar to the one Mathieu was writing in his blog post about writing such a GStreamer element in Python. Various details will be different though, but more about that later.",
      "url": "https://coaxion.net/blog/2018/02/how-to-write-gstreamer-elements-in-rust-part-2-a-raw-audio-sine-wave-source/",
      "date_published": "2018-02-21T15:05:22+00:00",
      "author": {
        "name": "Sebastian Dröge",
        "url": "https://coaxion.net/blog/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "45772a5b-1f22-4db9-9eee-f888c0c82660",
      "title": "Why Writing a Linked List in Rust is Basically Impossible [in safe Rust]",
      "content_text": "Before I start this post, let me preface it by saying that I’m not an experienced Rustacean by any means. Errata and corrections are appreciated. This post is aimed at helping other fledgling rust-learners avoid my mistake. First, by helping Rust learners pick good introductory projects that will fit naturally in idiomatic rust. Second, by helping Rust learners start building Rust-friendly design intuition. I’d heard about Rust and it’s inscrutable borrow checker for years, but after reading a few blog posts about compiler error improvements, I figured it might be user-friendly enough to give it a try.",
      "url": "https://rcoh.me/posts/rust-linked-list-basically-impossible/",
      "date_published": "2018-02-20T08:55:56-08:00",
      "author": {
        "name": "Russell Cohen",
        "url": "https://rcoh.me/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "3dc17991-d359-4205-917a-80b37a564b37",
      "title": "Rust for Cross-Language System Libraries",
      "content_text": "We have been building libpasta as a simple, usable solution to password hashing and migration. The goal for libpasta is to be a cross-platform, cross-language system library. libpasta is written in Rust, exports a C-style API, and builds to a static/shared library. Most languages support calling external libraries through foreign function interfaces (FFIs), and the end result can be seen in the documentation where each language has access to the libpasta functionality.",
      "url": "https://libpasta.github.io/blog/bindings/",
      "date_published": "2018-02-21T00:00:00+00:00",
      "author": {
        "name": "libpasta",
        "url": "https://libpasta.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "8e33c7c4-2788-418b-8e47-ca8990ae0d38",
      "title": "Snips Uses Rust to Build an Embedded Voice Assistant",
      "content_text": "The team at Paris-based Snips has created a voice assistant that can be embedded in a single device or used in a home network to control lights, thermostat, music, and more. You can build a home hub on a Raspberry Pi and ask it for a weather report, to play your favorite song, or to brew up a double espresso. Manufacturers like Keecker are adding Snips’ technology to products like multimedia home robots. And Snips works closely with leaders across the value chain, like NVIDIA, EBV, and Analog Devices, in order to voice-enable an increasingly wider range of device types, from speakers to home automation systems to cars.",
      "url": "https://blog.mozilla.org/blog/2018/02/21/snips-uses-rust-build-embedded-voice-assistant/",
      "date_published": "2018-02-21T12:34:56-08:00",
      "author": {
        "name": "Judy DeMocker",
        "url": "https://blog.mozilla.org/blog/author/jdemockermozilla-com/"
      },
      "tags": [
        "Language",
        "Tools and Applications"
      ]
    },
    {
      "id": "b2eb24c3-d7ee-438c-b041-0446dd551abe",
      "title": "I decided to make an 1980's Home Computer in Rust - Part 1",
      "content_text": "My first attempt at Rust programming was the stellaris-launchpad crate. This has a few demos that either blink the LED or roll it through an RGB rainbow using the PWM timers. Recently I've started a new version of the lm4f120 crate called tm4c123x-hal. The name change reflects TI's new name for basically the exact same part, while the -hal indicates that it's based upon the output of svd2rust and @japaric's new Embedded Hal crate. At the same time, I was watching videos on Youtube about a new wave of 1980's style 'retro' computing boards - text output, BASIC interpreter, etc. An idea started to form that I could put all three of these things together.",
      "url": "http://railwayelectronics.blogspot.com.au/2018/02/i-decided-to-make-1980s-home-computer.html?m=1",
      "date_published": "2018-02-20T22:16:00+00:00",
      "author": {
        "name": "Jonathan Pallant",
        "url": "http://railwayelectronics.blogspot.com.au/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "f2bf66c3-52bf-4a3c-b508-96bbd3385e8d",
      "title": "Programming an ARM microcontroller in Rust at four different levels of abstraction",
      "content_text": "Covering: Why Rust on Microcontrollers, Level 1: Direct register access in an unsafe block, Level 2: No unsafe blocks, use the API provided by svd2rust, A problem, Level 3: The embedded HAL to the rescue, Level 4: Use a board support crate.",
      "url": "http://pramode.in/2018/02/20/programming-a-microcontroller-in-rust-at-four-levels-of-abstraction/",
      "date_published": "2018-02-20T00:00:00-05:00",
      "author": {
        "name": "Pramode C.E",
        "url": "http://pramode.in/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "c078b1d0-a902-42c5-84d0-5d262146e64c",
      "title": "Using macro to generate generic docs?",
      "content_text": "We were recently able to finally make the docs for integer primitive types much more accurate (thanks to @antoyo!). Now, the code examples match the type for which they're written. No more i32 examples for i128 (I think you got the idea at this point)! Now, I think a few people might be interested by the method we used to achieve such a result so let's talk about it.",
      "url": "https://blog.guillaume-gomez.fr/articles/2018-02-19+Using+macro+to+generate+generic+docs%3F",
      "date_published": "2018-02-19T00:00:00+00:00",
      "author": {
        "name": "Guillaume Gomez",
        "url": "https://blog.guillaume-gomez.fr/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "9b97498f-3ffb-4c89-8973-c2beb5e0140e",
      "title": "Porting Rust to WebAssembly",
      "content_text": "I recently spent some effort trying to make reproto run in a browser. Here I want to outline the problems I encountered and how I worked around them. I will also provide a number of suggestions for how things might be improved for future porters.",
      "url": "https://udoprog.github.io/rust/2018-02-19/porting-rust-to-wasm.html",
      "date_published": "2018-02-19T00:00:00+00:00",
      "author": {
        "name": "John-John Tedro",
        "url": "https://udoprog.github.io/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "25d98aac-94a1-4cda-bbdb-7b22b76ed032",
      "title": "Weekly driver 1 & 2: L3GD20, LSM303DLHC and Madgwick - Embedded in Rust",
      "content_text": "Oh, time flies. It’s already week 8 and we have zero weekly driver posts out there – don’t worry though because there’s plenty of drivers and embedded-hal implementations in the works. To play catch up in this post I’ll cover two embedded-hal drivers: the l3gd20 and the lsm303dlhc. The L3GD20 is an IC that contains a gyroscope and exposes I2C and SPI interfaces; the LSM303DLHC is an IC that contains an accelerometer and a magnetometer, and exposes an I2C interface. You can find these two ICs on the STM32F3DISCOVERY board.",
      "url": "http://blog.japaric.io/wd-1-2-l3gd20-lsm303dlhc-madgwick/",
      "date_published": "2018-02-19T15:57:59+01:00",
      "author": {
        "name": "Jorge Aparicio",
        "url": "http://blog.japaric.io/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "5ecd2c77-20dd-4fd5-84a7-6c8e2364ebde",
      "title": "Ferrous Oxide For Jaguars And Incremented Crocodiles",
      "content_text": "Caveat lector: the primary purpose of the article is to introduce a reader proficient in one of the popular object-oriented languages how not to program in Rust. While each feature of the language will be briefly introduced where it is used, no great efforts will be made to explain the feature in detail. Links to the Rust book should provide that.",
      "url": "https://eno.space/blog/2018/02/Ferrous-oxide-for-jaguars-and-incremented-crocodiles",
      "date_published": "2018-02-15T00:00:00+01:00",
      "author": {
        "name": "@u0060",
        "url": "https://eno.space/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "e5f704af-b1ed-4757-b96d-80402ba3e601",
      "title": "Rust for Java Devs – Creating functions",
      "content_text": "In this post of Rust for Java Devs we will look at creating functions in Rust. Functions in Rust do not differ that much from Java methods but there are a few little differences. There is also the topic of Rust’s lifetimes compared to Java’s garbage collection that one could argue separates the two from each other a bit more, but for this post I will focus on the structure of writing a function in Rust. Due to the similarities between the two, I believe most Java developers will have no problem in figuring out what arguments a Rust function takes, what it outputs and where the output is returned from.",
      "url": "https://lankydanblog.com/2018/02/18/rust-for-java-devs-creating-functions/",
      "date_published": "2018-02-18T18:28:19+00:00",
      "author": {
        "name": "Dan Newton",
        "url": "https://lankydanblog.com/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "6d0e61c5-087e-48dc-abd8-ded4f3e43a8a",
      "title": "Rust things I miss in C",
      "content_text": "Librsvg feels like it is reaching a tipping point, where suddenly it seems like it would be easier to just port some major parts from C to Rust than to just add accessors for them. Also, more and more of the meat of the library is in Rust now. I'm switching back and forth a lot between C and Rust these days, and C feels very, very primitive these days.",
      "url": "https://people.gnome.org/~federico/blog/rust-things-i-miss-in-c.html",
      "date_published": "2018-02-18T21:26:04-06:00",
      "author": {
        "name": "Federico Mena Quintero",
        "url": "https://people.gnome.org/~federico/blog/index.html"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "44ef6094-b3df-4a2c-9cd9-429feecff6bc",
      "title": "Spectra gets Rust scripting!",
      "content_text": "spectra is a crate I’ve been maintaining for a few months / years now. It’s a crate that I mainly use for demoscene productions (I released two with it, Céleri Rémoulade and Outline Invitation) but I also use it to play around and experiment new rendering, animation and video game techniques.",
      "url": "http://phaazon.net/blog/spectra_plugins",
      "date_published": "2018-02-19T02:57:00+00:00",
      "author": {
        "name": "Dimitri Sabadie",
        "url": "http://phaazon.net/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "f77cc701-eca9-4b85-a450-dd10c1766966",
      "title": "Sorting in Rust: Selection, Insertion, and Counting Sort",
      "content_text": "Sorting is an invaluable skill and often covered early in a computer science curriculum. Have you ever tried to look up a friends phone number in an unsorted list!? You’d have to look at every single entry. Sorting creates all sorts of ways to access data quicker.",
      "url": "https://medium.com/@spyr1014/sorting-in-rust-selection-insertion-and-counting-sort-2c4d3575e364",
      "date_published": "2018-02-18T23:57:10.254+00:00",
      "author": {
        "name": "Andrew Jakubowicz",
        "url": "https://medium.com/@spyr1014"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "ff94e8a6-c203-4cbe-af46-8f99e2896dd8",
      "title": "Borrow cycles in Rust: arenas v.s. drop-checking",
      "content_text": "Ownership and borrowing are the fundamentals of data structures in Rust. However, both taking owneship of a value (moving it) or taking a reference to it can only happen after the value was created. This ordering seems to prevent having any cycle in a data structure, even though that’s sometimes useful or necessary. For example in a web page’s content tree, from any DOM node, one can easily access (if any) its first and last child, previous and next sibling, (so children of a node form a doubly-linked list) and parent. Some other applications might need to manipulate arbitrary graphs in their full generality.",
      "url": "https://exyr.org/2018/rust-arenas-vs-dropck/",
      "date_published": "2018-02-17T00:00:00+00:00",
      "author": {
        "name": "Simon Sapin",
        "url": "https://exyr.org/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "4abf1536-2c82-411a-be74-e85d2155af5a",
      "title": "Setting up Windows 10 for programming (in Rust)",
      "content_text": "Lately I’ve been working with Windows-specific APIs, so I needed to get a Windows dev environment. I’ve mostly used Linux for many years now, so for me programming on Windows feels very foreign. Getting to a point where I started being productive took a number of steps, so here they are, if only for me to find them next time.",
      "url": "https://exyr.org/2018/windows/",
      "date_published": "2018-01-31T00:00:00+00:00",
      "author": {
        "name": "Simon Sapin",
        "url": "https://exyr.org/"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "45c32609-24ef-4288-b361-57ca8b5a34cd",
      "title": "Zero cost stack overflow protection for ARM Cortex-M devices",
      "content_text": "One of the core features of Rust is memory safety. Whenever possible the compiler enforces memory safety at compile. One example of this is the borrow checker which prevents data races, iterator invalidation, pointer invalidation and other issues at compile time. Other memory problems like buffer overflows can’t be prevented at compile time. In those cases the compiler inserts runtime checks, bounds checks in this case, to enforce memory safety at runtime. What about stack overflows? For quite a long time Rust didn’t have stack overflow checking but that wasn’t much of a problem on tier 1 platforms since these platforms have an OS and a MMU (Memory Management Unit) that prevents stack overflows from wreaking havoc.",
      "url": "http://blog.japaric.io/stack-overflow-protection/",
      "date_published": "2018-02-17T18:16:39+01:00",
      "author": {
        "name": "Jorge Aparicio",
        "url": "http://blog.japaric.io/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "a2946d73-a2c7-4d2a-899c-080258552b07",
      "title": "Mutation Testing Rust in Earnest",
      "content_text": "It’s been a while since I last suggested Mutation Testing in Rust, almost two years ago. Since then I got sidetracked a lot, and later lost interest. Just one more cool project I couldn’t afford to take on. But as things go, my interest in mutation testing was rekindled, and I decided to give it a shot and do more than blogging about it.",
      "url": "http://llogiq.github.io/2018/02/14/mutagen.html",
      "date_published": "2018-02-14T00:00:00+00:00",
      "author": {
        "name": "Llogiq",
        "url": "http://llogiq.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "c780f270-e190-4987-aff1-ff20ebe108bf",
      "title": "Improved User Interface 0.2.0 Released!",
      "content_text": "iui, the Improved User Interface crate, has just gotten its 0.2 release. Improved User Interface is a set of safe, idiomatic Rust bindings to platform native GUI libraries (Win32API, Cocoa, and GTK+) via libui and ui-sys. Highlights of this release include: Correct, semantic use of mutability, GTK+ theme application per window, and menu bars and file open/create modal support.",
      "url": "https://www.patreon.com/posts/17016887",
      "date_published": "2018-02-16T04:16:00+00:00",
      "author": {
        "name": "Leo Tindall",
        "url": "https://www.patreon.com/leotindall"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "6a1644f0-2b9e-4c82-9ccd-ef69815f560f",
      "title": "Bincode 1.0.0, fast binary serialization with Serde",
      "content_text": "Bincode is a serializer implementation for Serde. If you stick a #[derive(Deserialize, Serialize)] on your struct, Bincode can efficiently serialize and deserialize those structs to and from bytes. Bincode is unique in that it’s a format that was built specifically for the Rust serialization ecosystem. Tight coupling with Serde allows Bincode to be very fast and serialize to very small payloads.",
      "url": "http://tyoverby.com/posts/bincode_release.html",
      "date_published": "2018-02-15T18:49:27+00:00",
      "author": {
        "name": "Ty Overby",
        "url": "http://tyoverby.com/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "938457b4-8905-4954-9007-88c80a2c24d6",
      "title": "\"The Expressive C++17 Coding Challenge (in Rust)\" Revisited",
      "content_text": "In October of last year, I wrote a post, “The Expressive C++17 Coding Challenge (in Rust)”. For various reasons, it got brought up again in the D world, and seb has written a new post. It’s good, you should check it out! However, it links to my gist, not my blog post. As I said back then: I held myself to the same constraints as the original contest; no external packages is a bit painful in Rust, but it’s not too bad. Mostly it would let me eliminate boilerplate while also improving correctness, and making the code a bit shorter. So, that got me thinking: What would this look like if I could use external packages? I took about an hour, and knocked it out. I have two versions to show you today, one where I pay no attention to allocations, and one where it’s zero-allocation.",
      "url": "http://words.steveklabnik.com/the-expressive-c-17-coding-challenge-in-rust-revisited",
      "date_published": "2018-02-14T10:12:15-08:00",
      "author": {
        "name": "Steve Klabnik",
        "url": "http://words.steveklabnik.com/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "0af4c90e-74b2-438d-aaed-798c9f6e900a",
      "title": "Fanta: An opinionated framework for web development in rust",
      "content_text": "Fanta is a web framework that aims for developers to be productive and consistent across projects and teams. Its goals are to be: Opinionated, Fast, and Intuitive. Based heavily off of the work here: https://github.com/tokio-rs/tokio-minihttp",
      "url": "https://github.com/trezm/Fanta",
      "date_published": "2018-02-14T18:44:00+11:00",
      "author": {
        "name": "Peter Mertz",
        "url": "https://github.com/trezm"
      },
      "tags": [
        "Tools and Applications",
        "Web and Network Services"
      ]
    },
    {
      "id": "1694fd36-21ca-4e3f-8654-9291c3ba4de7",
      "title": "comm is a peer-to-peer instant messaging protocol designed to be resilient to censorship",
      "content_text": "comm is a peer-to-peer instant messaging protocol designed to be resilient to censorship. comm-gtk is a GUI client built on the comm library. To try it out, start the app. In the configuration window, enter a secret phrase, a bootstrap node (IP:port pair), and a local port to listen on (e.g. 6669). For a bootstrap node, try 165.227.114.200:6667 (or any other node's IP address if you know one). Click connect to join the network.",
      "url": "https://github.com/zacstewart/comm-gtk",
      "date_published": "2018-02-13T23:02:31-06:00",
      "author": {
        "name": "Zac Stewart",
        "url": "https://github.com/zacstewart"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "86b2dfcd-a01d-47e1-acb8-2ddbca20db62",
      "title": "Gameland intro, reimplemented in Rust for WebAssembly",
      "content_text": "My nice brother Johannes Ridderstedt sent me some old files a few weeks ago (in late 2017), stuff that he had preserved from an age-old computer of ours. One of these was the file named gameland.zip (not published yet, but I might put it up here some day.) I managed to get this running, and liked what I saw (you'll find the YouTube link to it further down on this page.) Around this time I was reading a bit about WebAssembly which I think will redefine and help reshape the web as we see it today. I was also looking at the Hello, Rust web page, and the \"FizzleFade effect using a Feistel network\" page in particular.",
      "url": "http://perlun.eu.org/en/programming/gameland/",
      "date_published": "2018-02-13T07:44:00+11:00",
      "author": {
        "name": "Per Lundberg",
        "url": "http://perlun.eu.org/en/"
      },
      "tags": [
        "Games and Graphics",
        "Web and Network Services"
      ]
    },
    {
      "id": "bbc46982-1321-4e4e-8d9f-344963341c21",
      "title": "Event Sourcing with Aggregates in Rust",
      "content_text": "Everyone loves event sourcing, right up until the moment they have to implement it. At that moment all the wonderful whiteboard drawings…",
      "url": "https://medium.com/@KevinHoffman/event-sourcing-with-aggregates-in-rust-4022af41cf67",
      "date_published": "2018-02-12T15:11:08.708+00:00",
      "author": {
        "name": "Kevin Hoffman",
        "url": "https://medium.com/@KevinHoffman"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "35c70f95-6097-47df-a470-bb92e99b27e5",
      "title": "First release of TQL: the easy-to-use ORM for Rust",
      "content_text": "After a couple of weeks of work, I'm now happy to release the first version of tql, the easy-to-use ORM for Rust. While the focus was to make tql work on the stable version of the compiler, I also added some new features. The most notable new feature is the support for SQLite: now tql supports SQLite as well as PostgreSQL. The support for SQLite is almost as complete as the one for PostgreSQL: the only missing function is not implemented because the backend (SQLite) does not support it.",
      "url": "http://tql-rs.ml/first-release/",
      "date_published": "2018-02-10T00:00:00+00:00",
      "author": {
        "name": "Antoni",
        "url": "http://tql-rs.ml/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "751253b7-494d-4930-9586-40c18cab9280",
      "title": "tealdeer - A very fast implementation of tldr in Rust.",
      "content_text": "A fast command line client for tldr: A collection of simplified and community-driven man pages.",
      "url": "https://github.com/dbrgn/tealdeer",
      "date_published": "2018-02-12T07:46:00+11:00",
      "author": {
        "name": "Danilo Bargen",
        "url": "https://github.com/dbrgn"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "49ad5651-12e0-4374-9586-d9a86291c165",
      "title": "Practical Rust: Installation & Hello World",
      "content_text": "Recently, a new language called Rust has come into the spotlight, aiming to be a ‘blazingly fast’ language meant for systems programming…",
      "url": "https://medium.com/@gallantmrgn/practical-rust-installation-hello-world-d1e52aac1f9",
      "date_published": "2018-02-02T18:08:04.292+00:00",
      "author": {
        "name": "Morgan A. Gallant",
        "url": "https://medium.com/@gallantmrgn"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "019b1da3-b979-478b-89ed-7824c75df122",
      "title": "Corona: If you want to get async out out of your way",
      "content_text": "For some time now I develop a Rust library for asynchronous programming with coroutines, called Corona (note there’s a version 0.4.0-pre.1, but Crates prefer the „stable“ 0.3.1). I believe it is starting to be useful, so I wrote this description to show what it is good for and how it fits into the big picture of Rust. There’ll be some more changes, though, at least because Tokio just released a new version (and Futures plan to do so soon), so Corona will have to adapt.",
      "url": "https://vorner.github.io/corona-04.html",
      "date_published": "2018-02-11T19:51:00+11:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "b8e85b25-1d33-4b69-a3ba-b2cbac2bf62e",
      "title": "RLSL (Rust -> SPIR-V compiler) Progress report",
      "content_text": "This is a follow up post. RLSL is a Rust to SPIR-V compiler. SPIR-V is the shading language for Vulkan, similar to other shading languages like GLSL, HLSL but more low level. OpenGL, DX9/11/12, Vulkan, Metal are all graphic APIs that are able to use the GPU to draw pixels on the screen. Those APIs have certain stages that can be controlled by the developer by using the correct shading language.",
      "url": "https://maikklein.github.io/rlsl-progress-report/",
      "date_published": "2018-02-09T00:00:00+00:00",
      "author": {
        "name": "Maik Klein",
        "url": "https://maikklein.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "28ce1b60-8837-4443-87fb-669bf176db9b",
      "title": "Reflecting on ppbert",
      "content_text": "I had an itch: I was pretty-printing the BERT-encoded terms that we use in a production system at work and it was very slow. The Erlang shell took more than two minutes to dump the largest file. (It took about 0.1 second to read and parse the file; the rest was spent in io:format.) I decided to scratch that itch: I wrote ppbert, a command-line utility that reads BERT-encoded values and pretty-prints them. I’ve worked sporadically on ppbert for almost a year now, I use it daily at work, I’m happy with it, and I want to write about some of the things I learned during that journey.",
      "url": "https://vfoley.xyz/ppbert/",
      "date_published": "2018-02-09T00:00:00+00:00",
      "author": {
        "name": "Vincent Foley",
        "url": "http://vfoley.xyz/"
      },
      "tags": [
        "Tools and Applications",
        "Language"
      ]
    },
    {
      "id": "c7a9c9d2-8858-4f47-afa3-19ec1f2f6b86",
      "title": "Maximally minimal specialization: always applicable impls",
      "content_text": "So aturon wrote this beautiful post about what a good week it has been. In there, they wrote: \"Breakthrough #2: @nikomatsakis had a eureka moment and figured out a path to make specialization sound, while still supporting its most important use cases (blog post forthcoming!). Again, this suddenly puts specialization on the map for Rust Epoch 2018\". Sheesh I wish they hadn’t written that! Now the pressure is on. Well, here goes nothing =).",
      "url": "http://smallcultfollowing.com/babysteps/blog/2018/02/09/maximally-minimal-specialization-always-applicable-impls/",
      "date_published": "2018-02-09T00:00:00-05:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "325af8a8-af88-4a07-9c8f-16d2865f01f3",
      "title": "Closing out an incredible week in Rust",
      "content_text": "This week has been so amazing that I just had to write about it. Here’s a quick list of some of what went down in one week:",
      "url": "http://aturon.github.io/2018/02/09/amazing-week/",
      "date_published": "2018-02-09T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "6b542e90-1f02-4368-90e4-a1931ccf1935",
      "title": "A Wee Allocator for WebAssembly",
      "content_text": "Introducing wee_alloc. wee_alloc is a work-in-progress memory allocator designed for WebAssembly. It has a tiny code size footprint, compiling down to only a kilobyte of .wasm code.",
      "url": "http://fitzgeraldnick.com/2018/02/09/wee-alloc.html",
      "date_published": "2018-02-09T00:00:00-08:00",
      "author": {
        "name": "Nick Fitzgerald",
        "url": "http://fitzgeraldnick.com/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "b7290658-fff8-4ee5-b8e5-eceefdc6beb6",
      "title": "Memory safe DMA transfers - Embedded in Rust",
      "content_text": "A blog about Rust and embedded stuff",
      "url": "http://blog.japaric.io/safe-dma/",
      "date_published": "2018-02-09T11:47:30+01:00",
      "author": {
        "name": "Jorge Aparicio",
        "url": "http://blog.japaric.io/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "4924a3b4-b71f-4a15-ae2d-0a77bcb30e98",
      "title": "Async/Await V: Getting back to the futures",
      "content_text": "Two posts ago I proposed a particular interface for shipping self-referential generators this year. Immediately after that, eddyb showed me a better interface, which I described in the next post. Now, to tie everything together, its time to talk about how we can integrate this into the futures ecosystem. Starting point: this Generator API To begin, I want to document the generator API I’ll be using in this post, which is roughly what followed from my previous post:",
      "url": "https://boats.gitlab.io/blog/post/2018-02-08-async-v-getting-back-to-the-futures/",
      "date_published": "2018-02-08T00:00:00+00:00",
      "author": {
        "name": "withoutboats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "29eb1ede-d551-4b8d-aeec-c673aafb7e8f",
      "title": "Combine 3 - Partial parsing in Rust",
      "content_text": "Combine is a parser combinator library for the Rust programming language. I first announced version 3 of Combine back in August and back then I definitely expected to have a stable version by now. However other projects (cough gluon cough) got in the way and Combine fell to the wayside. It didn’t help that I didn’t have a killer feature for 3.0 either, user-defined error types make it possible to define parsers usable in #[no_std] crates which is great when you need it but it is still a fairly niche use-case.",
      "url": "https://marwes.github.io/2018/02/08/combine-3.html",
      "date_published": "2018-02-08T00:00:00+00:00",
      "author": {
        "name": "Markus Westerlind",
        "url": "https://marwes.github.io/"
      },
      "tags": [
        "Crates",
        "Computer Science"
      ]
    },
    {
      "id": "e6347974-c84a-438a-924a-52ef37f6c99a",
      "title": "I rewrote a Nintendo emulator with Rust / WebAssembly (Japanese)",
      "content_text": "概要 以前、JSで書いた(ファミコンのエミュレータを書いた - undefined)ファミコンのエミュレータをRustで書き直してみた。 また、技術的な内容はQiitaの方にも書いているので興味のある方は参照してみてください。(まだ Hello, World!までしか書けてませんが。) qiita.com もともとファミコンのエミュレータって新しい言語を習得するのにちょうどいい題材だったりするのでは、って話しからスタートしてて、よくわからないのでJSで書いてみて、ようやくRustで一通りは実装できた感じ。まだバグや未実装（音声周りやマッパー）も多いんですが、ひとまずはお腹いっぱいな感じ。 成果…",
      "url": "http://blog.bokuweb.me/entry/2018/02/08/101522",
      "date_published": "2018-02-08T10:15:22+09:00",
      "author": {
        "name": "bokuweb",
        "url": "http://blog.bokuweb.me/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "94324d77-490d-4897-bfd7-5a5b7c4c0cfb",
      "title": "6 months into Rust: what was good in 2017 and what will be better in 2018?",
      "content_text": "Last summer, I finally decided to start learning Rust. I published my first blog post about Rust in September, I then attended my first Rust conference to learn more about the language, and started three Rust projects on GitHub. I now have more experience about the Rust ecosystem, and I want to share some feedback. The call for community blog posts by the Rust team comes right in time!",
      "url": "https://gendignoux.com/blog/2018/02/05/rust-best-features-of-2017-and-beyond.html",
      "date_published": "2018-02-05T22:24:30+01:00",
      "author": {
        "name": "Guillaume Endignoux",
        "url": "https://gendignoux.com/blog/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "b0a2bc9c-effa-4859-b804-cbe839060855",
      "title": "Tokio Reform is Shipped and the Road to 0.2",
      "content_text": "I'm happy to announce that today, the changes proposed in the reform RFC have been released to crates.io as tokio 0.1. The primary changes are: Add a default global event loop, eliminating the need for setting up and managing your own event loop in the vast majority of cases, and decouple all task execution functionality from Tokio.",
      "url": "https://tokio.rs/blog/2018-02-tokio-reform-shipped/",
      "date_published": "2018-02-07T00:00:00+00:00",
      "author": {
        "name": "Carl Lerche",
        "url": "https://tokio.rs/"
      },
      "tags": [
        "Crates"
      ]
    },
    {
      "id": "ac0c5546-f21b-4b47-b4a4-950464472aad",
      "title": "Async/Await IV: An Even Better Proposal",
      "content_text": "I did not plan to write this blog post. I thought that the fourth post in my series would explain how we could go from the generator API in my previous post to a futures API in which you don’t have to heap allocate every async call. But eddyb surprised me, and now I have to revisit the API in the previous post, because we can implement everything we need from immovability with a safe interface afterall.",
      "url": "https://boats.gitlab.io/blog/post/2018-02-07-async-iv-an-even-better-proposal/",
      "date_published": "2018-02-07T00:00:00+00:00",
      "author": {
        "name": "withoutboats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "60238a1c-95ee-46d8-bf5c-e70fed87a103",
      "title": "Guitar Effects in Rust",
      "content_text": "In an effort to experiment with dsp, I wrote a guitar/bass effects processor this past weekend. The end result works very well (to my pleasant surprise). It doesn’t have 90% of the functionalities of any of rakarrack, guitar rig, garage band but overall it was a fun weekend hack.",
      "url": "http://rickyhan.com/jekyll/update/2018/02/06/rust-guitar-pedal-effects-dsp.html",
      "date_published": "2018-02-06T04:00:00+00:00",
      "author": {
        "name": "Ricky Han",
        "url": "http://rickyhan.com/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "6e3c698d-7f42-43d4-9c08-2ee084945e5c",
      "title": "A vision for portability in Rust",
      "content_text": "TL;DR: This post proposes to deprecate the std facade, instead having a unified std that uses target- and capability-based cfgs to control API availability. Leave comments on internals!",
      "url": "http://aturon.github.io/2018/02/06/portability-vision/",
      "date_published": "2018-02-06T00:00:00+00:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "5e5df82f-aba3-4832-bbe6-e995b2e544ef",
      "title": "Criterion.rs v0.2 - a statistics-driven benchmarking library for Rust",
      "content_text": "Criterion.rs is a statistics-driven benchmarking library for Rust. It provides precise measurements of changes in the performance of benchmarked code, and gives strong statistical confidence that apparent performance changes are real and not simply noise. Clear output, a simple API and reasonable defaults make it easy to use even for developers without a background in statistics. Unlike the benchmarking harness provided by Rust, Criterion.rs can be used with stable versions of the compiler.",
      "url": "https://bheisler.github.io/post/criterion-rs-0-2/",
      "date_published": "2018-02-05T07:00:00-06:00",
      "author": {
        "name": "Brook Heisler",
        "url": "https://bheisler.github.io/"
      },
      "tags": [
        "Performance",
        "Crates"
      ]
    },
    {
      "id": "c0b3d7ad-673f-4eb9-aa54-45447d1eafb0",
      "title": "Rust Lifetimes for the Uninitialised",
      "content_text": "Lifetimes are a interesting subject: a lot of people seem to gain a day-to-day familiarity with them, without fully understanding what they are. Maybe, they are truly Rust's Monads. Let's talk about what they are, where you encounter them and then how to get competent with them.",
      "url": "http://asquera.de/blog/2018-01-29/rust-lifetimes-for-the-uninitialised/",
      "date_published": "2018-01-29T15:30:00+01:00",
      "author": {
        "name": "Florian Gilcher",
        "url": "http://asquera.de/blog"
      },
      "tags": [
        "Language",
        "Getting Started"
      ]
    },
    {
      "id": "92664a59-08e0-4185-aab2-cd0a29f303f8",
      "title": "Writing eBPF tracing tools in Rust",
      "content_text": "Writing eBPF tracing tools in Rust",
      "url": "https://jvns.ca/blog/2018/02/05/rust-bcc/",
      "date_published": "2018-02-05T10:23:44+00:00",
      "author": {
        "name": "Julia Evans",
        "url": "https://jvns.ca/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "f4e99fe5-2dab-418d-9256-813a75036164",
      "title": "Introduction to Procedural Macros",
      "content_text": "As a newcomer to Rust, I heard the phrase “procedural macro” thrown around a lot without really understanding what it meant. I figured that I would learn about them if I ever needed them. Well, I’m working on the guts of relm, and a large chunk of it is procedural macros. I’ve learned enough about procedural macros to be dangerous, so I thought I would pass on some knowledge.",
      "url": "https://tinkering.xyz/posts/introduction-to-proc-macros/",
      "date_published": "2018-02-03T19:36:37-05:00",
      "author": {
        "name": "Zach Mitchell",
        "url": "https://tinkering.xyz/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "25060712-7d38-4492-991d-a52a9111891c",
      "title": "Async/Await III: Moving Forward with Something Shippable",
      "content_text": "In the first post, we looked at the relationship between generators and a more general notion of self-references. In the second post, we narrowed down exactly what problem we need to solve to make generators work, and talked about some solutions that we’ve considered but don’t feel like we could ship in the near future.\nIn the original post, I promised that I would have a near term solution by the end of this series.",
      "url": "https://boats.gitlab.io/blog/post/2018-01-30-async-iii-moving-forward/",
      "date_published": "2018-02-04T00:00:00+00:00",
      "author": {
        "name": "withoutboats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Language"
      ]
    },
    {
      "id": "434c400b-b4ac-49c9-87fa-db2a8b5f1ba7",
      "title": "DataFusion: Big Data Platform for Rust",
      "content_text": "DataFusion is an open-source Big Data platform implemented in the Rust programming language with a similar programming style to Apache Spark.",
      "url": "https://www.datafusion.rs/",
      "date_published": "2018-02-04T16:51:47+00:00",
      "author": {
        "name": "Andy Grove",
        "url": "https://www.datafusion.rs/"
      },
      "tags": [
        "Tools and Applications",
        "Web and Network Services"
      ]
    },
    {
      "id": "303b0429-9b0c-46f8-a555-fbab8c2bdf90",
      "title": "retrobasic - A BASIC interpreter written in Rust",
      "content_text": "retrobasic is a BASIC interpreter written in Rust. It is based on the original BASIC '64 implementation, and modified as needed to make it more compatible with some of the classic BASIC games.",
      "url": "https://github.com/seasalim/retrobasic",
      "date_published": "2018-02-04T17:21:55+00:00",
      "author": {
        "name": "seasalim",
        "url": "https://github.com/seasalim"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "b4def99b-cdec-46c6-9816-a6c85c999ae9",
      "title": "Beginner Bites: A taste of Rust, a safe, concurrent and practical language!",
      "content_text": "Experience a sampler of Rust. You’ll get set up, then solve the first Project Euler problem in Rust. This is a language you can’t miss.",
      "url": "https://hackernoon.com/a-taste-of-rust-6d8fc60e050",
      "date_published": "2018-02-04T11:01:00.900+00:00",
      "author": {
        "name": "Andrew Jakubowicz",
        "url": "https://hackernoon.com/@spyr1014"
      },
      "tags": [
        "Getting Started"
      ]
    },
    {
      "id": "c73d7d0b-4f7a-4448-acee-d98dbb499461",
      "title": "Adventures in Rust: A Basic 2D Game",
      "content_text": "In an effort to do more fun side projects, I’ve been learning Rust, a wonderful systems programming language developed by the Mozilla Foundation. It’s been a while since I’ve touched a compiled language as my day-to-day often deals with Python and Javascript variants. I was inspired after seeing a lot of interesting articles about Rust usage and decided to dive into learning Rust by creating a very basic 2D game, inspired by the classic Defender arcade game.",
      "url": "https://a5huynh.github.io/2018/02/02/adventures-in-rust.html",
      "date_published": "2018-02-02T00:00:00+00:00",
      "author": {
        "name": "Andrew Huynh",
        "url": "https://a5huynh.github.io/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "4aeb0aa5-6a72-41c9-87bc-a2e24b5e33d3",
      "title": "Writing a command-line program in Rust",
      "content_text": "As a library writer, it feels a bit strange, but refreshing, to write a program that actually has a main() function. My experience with Rust so far has been threefold:",
      "url": "https://people.gnome.org/~federico/blog/writing-a-command-line-program-in-rust.html",
      "date_published": "2018-02-03T11:41:20-06:00",
      "author": {
        "name": "Federico Mena Quintero",
        "url": "https://people.gnome.org/~federico/blog/index.html"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "b8c9dfda-526c-453c-a93b-5c96a207643e",
      "title": "Hairy Stuff",
      "content_text": "Last month I was working on a lot of new test scenes for my Rust implementation of the PBRT renderer. But a big chunk of my time went into implementing the curve shape needed for the geometry of hair, and a material, which implements a hair scattering model.",
      "url": "https://www.janwalter.org/jekyll/rendering/pbrt/2018/02/01/hairy-stuff.html",
      "date_published": "2018-02-01T13:30:00+01:00",
      "author": {
        "name": "Jan Walter",
        "url": "https://www.janwalter.org/"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "444386e2-51fc-488e-ac19-0aa71a4d89a3",
      "title": "PoC: compiling to eBPF from Rust",
      "content_text": "I have been playing with eBPF (extended Berkeley Packet Filters), a neat feature present in recent Linux versions (it evolved from the much older BPF filters). It is a virtual machine running in th…",
      "url": "https://unhandledexpression.com/2018/02/02/poc-compiling-to-ebpf-from-rust/",
      "date_published": "2018-02-02T20:33:08+00:00",
      "author": {
        "name": "Geoffroy Couprie",
        "url": "https://unhandledexpression.com/"
      },
      "tags": [
        "Operating Systems"
      ]
    },
    {
      "id": "93d7f09d-e1eb-4d6a-a792-5765326730be",
      "title": "Make your own make",
      "content_text": "An obvious idea is to use Rust for task automation. Originally, I have proposed creating a special Cargo subcommand to execute build tasks, implemented as Rust programs, in this thread. However, since then I realized that there are built-in tools in Cargo which allow one to get a pretty ergonomic solution. Namely, the combination of workspaces, aliases and ability to define binaries seems to do the trick.",
      "url": "https://matklad.github.io/2018/01/03/make-your-own-make.html",
      "date_published": "2018-01-03T10:52:50+00:00",
      "author": {
        "name": "Aleksey Kladov",
        "url": "https://matklad.github.io/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "d2fc34d4-c1ec-4c3d-8e39-b420b8f20fe8",
      "title": "Memory Safety in Rust: A Case Study with C",
      "content_text": "To demonstrate the value of Rust's memory safety rules, I contrast the implementation of a simple vector library in C and Rust, highlighting where and how Rust's static analysis can prevent tricky memory errors.",
      "url": "http://willcrichton.net/notes/rust-memory-safety/",
      "date_published": "2018-02-02T00:00:00+00:00",
      "author": {
        "name": "Will Crichton",
        "url": "http://willcrichton.net/notes/"
      },
      "tags": [
        "Computer Science"
      ]
    },
    {
      "id": "1ccb8993-1118-4eb4-a1fb-0c6146948662",
      "title": "Benchmark of different Async approaches in Rust",
      "content_text": "The story about Rust’s async is still a bit in flux. There’s a bunch of libraries with their pros and cons and different approaches. Even I’m a bit to blame for that, as I’m writing one of my own, called Corona.",
      "url": "https://vorner.github.io/async-bench.html",
      "date_published": "2018-02-03T11:16:55+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Performance"
      ]
    },
    {
      "id": "0cced83f-3736-4917-87a0-408fb4d9f6bb",
      "title": "Introduction to lyon: 2D vector graphics rendering on the GPU in Rust",
      "content_text": "Lyon is a side-project that I have been working on for quite a while. The goal is to play with rendering 2D vector graphics on the GPU, and it's been a lot of fun so far. I haven't talked a lot about it online (except for a couple of reddit threads a year or two ago) so I figured it would be a good topic to get this blog started.",
      "url": "https://nical.github.io/posts/lyon-intro.html",
      "date_published": "2018-01-22T00:00:00+01:00",
      "author": {
        "name": "Nical",
        "url": "https://nical.github.io/index.html"
      },
      "tags": [
        "Games and Graphics"
      ]
    },
    {
      "id": "5c8f0581-5b1d-485b-852c-83c0deef73d5",
      "title": "Rust and WebAssembly with Turtle",
      "content_text": "In this post, I'll walk through a few of the highlights of getting Turtle, a Rust library for creating animated drawings, to run in the browser with WebAssembly.",
      "url": "https://varblog.org/blog/2018/01/08/rust-and-webassembly-with-turtle/",
      "date_published": "2018-01-08T09:54:00-06:00",
      "author": {
        "name": "Marshall Pierce",
        "url": "https://varblog.org/"
      },
      "tags": [
        "Web and Network Services"
      ]
    },
    {
      "id": "2168f429-844d-4629-97da-c149e9026cfd",
      "title": "mdcat - Cat for markdown: Show markdown documents in TTYs",
      "content_text": "Cat for markdown: Show markdown documents in TTYs",
      "url": "https://github.com/lunaryorn/mdcat",
      "date_published": "2018-02-03T18:23:00+11:00",
      "author": {
        "name": "Sebastian Wiesner",
        "url": "https://swsnr.de/"
      },
      "tags": [
        "Tools and Applications"
      ]
    },
    {
      "id": "e1a29851-ab4c-4739-a41f-56e9c783f5e4",
      "title": "Faster Progress Report 2",
      "content_text": "faster began as a yak shave, created to aid base💯 in its quest to become the fastest meme on Github. Writing an explicit AVX2-accelerated version of base💯's encoder and decoder, then realizing I'd have to do the same thing again to see the speedups on my Ivy Bridge desktop, pushed me to make this library. Months later, it has blossomed into its own project, and has eclipsed base💯 in both popularity and promise.",
      "url": "https://adamniederer.com/blog/faster-pr-2.html",
      "date_published": "2018-01-28T22:14:41+00:00",
      "author": {
        "name": "Adam Niederer",
        "url": "https://adamniederer.com/blog/blog.html"
      },
      "tags": [
        "Performance",
        "Crates"
      ]
    },
    {
      "id": "d4191312-2442-4eb8-b313-67ba224829b6",
      "title": "Experimenting with the New I/O Framework (in Rust) for embedded systems",
      "content_text": "Notes on Code, by Pramode C.E",
      "url": "http://pramode.in/2018/01/31/ti-launchpad-with-rust-new-io/",
      "date_published": "2018-01-31T00:00:00-05:00",
      "author": {
        "name": "Pramode C.E",
        "url": "http://pramode.in/"
      },
      "tags": [
        "Embedded"
      ]
    },
    {
      "id": "fb492342-c776-4f9a-8792-d82efebf109f",
      "title": "Thoughts on Rust",
      "content_text": "I’ve been working on some rust projects recently and I really really love this language. I’d love it if one day I could get paid just to write rust! Until then, I’ll make do with …",
      "url": "https://barel.la/blog/2018/01/thoughts-on-rust/",
      "date_published": "2018-02-01T04:39:06+00:00",
      "author": {
        "name": "Dan Barella",
        "url": "https://barel.la/blog/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "99cd44d4-1722-4d1e-a002-693fac055af1",
      "title": "Rust should be an excellent open source citizen #rust2018",
      "content_text": "Here’s my late #rust2018 post. I contribute code to a lot of projects in a lot of different languages. I think it’s really important not to think about Rust in isolation, but in the context of the greater open source world. Here area few specific ways I think about this:",
      "url": "http://kamalmarhubi.com/blog/2018/01/31/rust2018/",
      "date_published": "2018-01-31T00:00:00-05:00",
      "author": {
        "name": "Kamal Marhubi",
        "url": "http://kamalmarhubi.com/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "cdf001ee-aea6-47e3-be58-527a3b7fdc08",
      "title": "Rust 2018: Libraries in the 2018 Epoch",
      "content_text": "The call for community blog posts has inspired lots of great responses. Most of the things that I feel are important have already been said. This post is a collection of thoughts on what I feel is important for Rust to flourish in the future. It is perhaps a bit late in the process, but it may add some new perspectives.",
      "url": "https://blog.zayenz.se/post/rust-2018/",
      "date_published": "2018-01-23T00:00:00+00:00",
      "author": {
        "name": "Zayenz",
        "url": "https://blog.zayenz.se/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "c752755c-985e-44d4-a15f-1dac8fffa86c",
      "title": "Rust is for Big Data (#rust2018)",
      "content_text": "This blog post isn’t so much about what I want from the Rust language in 2018, but more about where I see an opportunity for Rust to gain more widespread use in 2018.",
      "url": "https://andygrove.io/rust-is-for-big-data/",
      "date_published": "2018-01-29T06:07:21+11:00",
      "author": {
        "name": "Andy Grove",
        "url": "https://andygrove.io/blog"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "b02d9dda-9c01-481b-8111-0241bf8e99d4",
      "title": "Rust2018 - A year of talks",
      "content_text": "Before I address my hopes for Rust in 2018, I thought I'd look back at a year of meet ups that we've organised for London's Rust user group.",
      "url": "https://booyaa.wtf/2018/rust2018-a-year-of-talks/",
      "date_published": "2018-01-28T19:49:54+00:00",
      "author": {
        "name": "@booyaa",
        "url": "https://github.com/booyaa"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "e200a902-0b10-41fa-99ce-241d38311eea",
      "title": "On Safety, and How Rust Can Help",
      "content_text": "I’ll first talk about my opinions about safety as an abstract concept and my experiences with practicing safety in various environments; I’ll then talk about my experiences programming at work in C and Ruby; then I’ll draw upon these to talk about what Rust can currently offer my work and what I believe it still needs in order for it to strengthen its utility and efficacy in our contexts.",
      "url": "https://myrrlyn.net/blog/misc/rust-2018",
      "date_published": "2018-01-28T07:25:16+00:00",
      "author": {
        "name": "Alexander Payne",
        "url": "https://myrrlyn.net/blog"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "9de23e26-5e53-4569-afb2-0576494c75f5",
      "title": "#Rust2018: no need to panic",
      "content_text": "Since you asked for blog posts, and I already read many of them that didn't share my concerns, here is my take. # What I did in 2017 (and also a...",
      "url": "https://www.reddit.com/r/rust/comments/7tcyh1/rust2018_no_need_to_panic/",
      "date_published": "2018-01-27T14:24:20+00:00",
      "author": {
        "name": "SelfDistinction",
        "url": "https://www.reddit.com/user/SelfDistinction"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "9a9ed680-6525-4c70-ae8a-c4c8f6941cf1",
      "title": "Thoughts about #Rust2018",
      "content_text": "I like the concepts behind rust. I haven't had as much chance to use it as I'd like - it isn't one of the approved languages at work, and ...",
      "url": "https://lliwynd.blogspot.com.au/2018/01/thoughts-about-rust2018.html",
      "date_published": "2018-01-27T14:35:00+11:00",
      "author": {
        "name": "William Uther",
        "url": "https://lliwynd.blogspot.com.au/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "d2189bca-0b13-451d-b70c-70ec43f7a207",
      "title": "Rust 2018: Improving Safety and Ergonomics for Low-Level Programming",
      "content_text": "There’s been a lot written about what can be done to make Rust’s tooling, libraries and infrastructure better for embedded programming, but I’d like to cover a slightly different topic: what can be done to make Rust the language itself safer and easier to use for low-level programming?",
      "url": "http://www.bobbin.io/blog/post/rust_2018_low_level/",
      "date_published": "2018-01-26T14:00:00-04:00",
      "author": {
        "name": "Jonathan Soo",
        "url": "http://www.bobbin.io/blog/"
      },
      "tags": [
        "Rust 2018",
        "Embedded"
      ]
    },
    {
      "id": "a9de17fb-57cf-442a-988c-8ab1ec79b3db",
      "title": "Crate Management for #rust2018",
      "content_text": "When I started with Rust, I was planning on blogging about my experience. As I learned though, I found most of the documentation I needed was in blog posts that, though helpful, would give different suggestions without a hint as to why they solved the problems differently. This is frustrating for someone new because you just want to get your task done and not have to first research a whole other area. I realized that the more valuable route for me would be in improving documentation and tooling to serve as living documentation.",
      "url": "https://epage.github.io/blog/2018/01/crate-management/",
      "date_published": "2018-01-26T04:20:00+00:00",
      "author": {
        "name": "Ed Page",
        "url": "https://epage.github.io/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "ae85973e-7540-4027-b53a-ee41a249d124",
      "title": "Rust 2018: Core, Embedded+SIMD, Intermesiate documenation, Async",
      "content_text": "Hi there! I'm Nico, and I've been lurking around these parts for about a year now. I thought I'd give my 2 cents on Rust's 2018 plans. Note: this...",
      "url": "https://www.reddit.com/r/rust/comments/7syxw4/rust_2018_core_embeddedsimd_intermesiate/",
      "date_published": "2018-01-25T20:12:01+00:00",
      "author": {
        "name": "Nico",
        "url": "https://www.reddit.com/user/nicoburns"
      },
      "tags": [
        "Rust 2018",
        "Embedded"
      ]
    },
    {
      "id": "35094e1a-b385-47a6-a93f-67f8842992d6",
      "title": "My #Rust2018 wishlist",
      "content_text": "This addition to std could significantly change how people use rust. \"Secretly\" it requires some advanced features though. impl<T, const C:...",
      "url": "https://www.reddit.com/r/rust/comments/7sx6s9/my_rust2018_wishlist/",
      "date_published": "2018-01-25T16:22:17+00:00",
      "author": {
        "name": "Epicat Supercell",
        "url": "https://www.reddit.com/user/EpicatSupercell"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "1151cad4-ce36-4944-96d3-e6062f1daf97",
      "title": "The Job Advertising Story of Rust",
      "content_text": "Note: This is the first blog post that I’ve ever written. Feedback is much appreciated :).",
      "url": "https://medium.com/@vign_esh/the-job-advertising-story-of-rust-5c6394e8ecab",
      "date_published": "2018-01-22T10:44:36.238+00:00",
      "author": {
        "name": "Vignesh Sankaran",
        "url": "https://medium.com/@vign_esh"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "a59a299c-28d1-4c41-9563-47faea69a0b7",
      "title": "Embedded Rust in 2018",
      "content_text": "A blog about Rust and embedded stuff",
      "url": "http://blog.japaric.io/embedded-rust-in-2018/",
      "date_published": "2018-01-21T22:10:38+01:00",
      "author": {
        "name": "Jorge Aparicio",
        "url": "http://blog.japaric.io/"
      },
      "tags": [
        "Rust 2018",
        "Embedded"
      ]
    },
    {
      "id": "e2276407-cab7-48f6-8a4e-b981fbed0417",
      "title": "Rust and its stance in data science",
      "content_text": "This isn’t something that I would do very often, but a call was made, and I would like to take that chance to fill in some ideas with…",
      "url": "https://medium.com/@e_net4/rust-and-its-stance-in-data-science-76d2c5ad2363",
      "date_published": "2018-01-20T16:55:44.934+00:00",
      "author": {
        "name": "Eduardo Pinho",
        "url": "https://medium.com/@e_net4"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "268f9a5c-3a44-4ca8-b500-68fd045a2d47",
      "title": "Making Rust more awesome in 2018 - My wishlist",
      "content_text": "Rustaceans may already be familiar with Read Rust 2018. Its really awesome to see all blog posts by other people. I’m yet to finish reading all of them :P\nAdding to the chain of wishlist and suggestions for Rust’s roadmap for 2018, here’s my Wishlist:",
      "url": "https://creativcoder.github.io/post/rust-2018/",
      "date_published": "2018-01-20T18:22:00+00:00",
      "author": {
        "name": "Rahul Sharma",
        "url": "https://creativcoder.github.io/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "0c26d758-55c5-4591-9c4f-5f0d2a6cc347",
      "title": "Rust 2018",
      "content_text": "What has gotten really, really good in rust-land as I remember this year:",
      "url": "http://techne.btbytes.com/2018/01/20/rust2018.html",
      "date_published": "2018-01-20T19:57:35-05:00",
      "author": {
        "name": "Pradeep Gowda",
        "url": "http://techne.btbytes.com/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "ce30f9ab-eef4-47c0-84e9-ffb704317314",
      "title": "Rust 2018 - Growing in elegance and responsibility",
      "content_text": "First; I have the utmost respect for the fact that I'm mostly sitting here wishing, while other people do the actual work. But since you asked...",
      "url": "https://gist.github.com/diwic/6aa9da5d088c09e2fc93858928878b48",
      "date_published": "2018-01-11T07:41:14+00:00",
      "author": {
        "name": "Diwic",
        "url": "https://github.com/diwic"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "3f3b1ba5-ee90-4ece-b303-2c083010602e",
      "title": "Rust in 2018, another point of view",
      "content_text": "I wanted to write a post laying down my thoughts about Rust for a long time, and it seems like the perfect time to do so. Most of the things I've said have been touched upon recently, and probably more aptly, but here it is nonetheless!",
      "url": "https://kelseasy.github.io/001-Rust2018.html",
      "date_published": "2018-01-19T22:57:00+00:00",
      "author": {
        "name": "Kelsey Zapata",
        "url": "https://kelseasy.github.io/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "329c3ef3-1602-477e-9a38-e5becaf2aab1",
      "title": "Rust2018 And The Great Cli Awakening",
      "content_text": "This is a response to the #Rust2018 call for blog posts with a little bit of my experience and how I see the 2018 year mo...",
      "url": "http://vitiral.github.io/2018/01/17/rust2018-and-the-great-cli-awakening.html",
      "date_published": "2018-01-17T00:00:00+00:00",
      "author": {
        "name": "Garrett Berg",
        "url": "http://vitiral.github.io/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "a1e767fe-7557-4092-8f54-2071617c89b3",
      "title": "How can I help Stabilize Things?",
      "content_text": "A friend and I are working on adding Rust support to Metaparticle. We did a simple search for “decorators in Rust” and found this repo, which seemed promising. My friend added it, but s…",
      "url": "https://willmurphyscode.net/2018/01/18/how-can-i-help-stabilize-things/",
      "date_published": "2018-01-18T12:23:55+00:00",
      "author": {
        "name": "willmurphyscode",
        "url": "https://willmurphyscode.net/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "41624f5a-61da-4a5b-a347-5918dccfe3a9",
      "title": "Technical Debt",
      "content_text": "I have to 100% agree with @nrc's post. I feel like Rust has a lot of great things in the pipeline, but it worries me that there are so many open tracking issues and open issues in general (over 3100 at time of writing).\n\nA lot has been written already about this, so instead I will focus on a few areas of technical debt that I see as particularly high-impact.",
      "url": "https://gist.github.com/mark-i-m/5bccf4dd7d97751eba542fea84b41a9d",
      "date_published": "2018-01-18T00:58:22+00:00",
      "author": {
        "name": "mark-i-m",
        "url": "https://github.com/mark-i-m"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "56bc0e93-0a95-40ce-b60e-7f50c6e41560",
      "title": "Rust 2018",
      "content_text": "I am pretty amazed that the Rust team always tries to get information about Rust usage from its users. Having a great vision is important, but it may not be enough to succeed. It is crucial to convince people to use Rust, and to know how to do that, we must take the perspective of the people who DO NOT use Rust.",
      "url": "http://matraszek.net/posts/rust-2018.html",
      "date_published": "2018-01-16T23:31:00+01:00",
      "author": {
        "name": "Jakub Matraszek",
        "url": "http://matraszek.net/posts/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "db216954-cdc9-4253-a155-6e9c7a25cd39",
      "title": "Retooling the Rust Libs Team team for 2018",
      "content_text": "The Libs Team met today to discuss a weighty topic: what is its mission as a team, and are we set up to achieve it?\n\nAs team lead, I took the liberty of proposing a mission statement:\n\nTo improve the quality of the crate ecosystem, as a product.",
      "url": "http://aturon.github.io/blog/2018/01/16/libs-mission/",
      "date_published": "2018-01-16T00:00:00-08:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/blog/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "b82f509d-28c8-4859-afe4-a9d4e47538d0",
      "title": "Rust 2018 - Just 2 \"little things\"",
      "content_text": "Well. Just two \"minor\" points: 1. Game Development Libraries 2. Rust idomatic GUI Frameworks",
      "url": "https://www.reddit.com/r/rust/comments/7qv1gu/rust_2018_just_2_little_things/",
      "date_published": "2018-01-16T19:58:55+00:00",
      "author": {
        "name": "CodingChris",
        "url": "https://www.reddit.com/user/CodingChris"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "9b240369-ee8e-4d0d-8914-92bbb0145411",
      "title": "Fortanix Blog | Secure by design:  Rust and Runtime Encryption",
      "content_text": "At Fortanix, we are big proponents of deterministic security.  Designing in security from the get-go by using secure programming principles is a big part of that.",
      "url": "https://www.fortanix.com/blog/2018/01/secure-by-design-rust-and-runtime-encryption/",
      "date_published": "2018-01-16T00:00:00+00:00",
      "author": {
        "name": "Jethro Beekman",
        "url": "https://www.fortanix.com/blog/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "35c2903a-687a-448d-b594-c46ee423989d",
      "title": "Using static typing to protect against code injection attacks",
      "content_text": "Code injection attack is a method of taking advantage of a flaw where an application can be tricked to relay malicious code from a system…",
      "url": "https://medium.com/sensorfu/using-static-typing-to-protect-against-code-injection-attacks-353002ca6f2b",
      "date_published": "2018-01-16T12:33:25.545+00:00",
      "author": {
        "name": "Ossi Herrala",
        "url": "https://medium.com/@oherrala"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "11b9b0c3-6cde-450a-91b8-41e4bfc0a514",
      "title": "Rust 2018",
      "content_text": "With this post, I would like to give my feedback to the rust community in the\nscope of A Call for Community Blogposts. This article is structured in …",
      "url": "http://greyblake.com/blog/2018/01/16/rust-2018/",
      "date_published": "2018-01-16T00:08:00+01:00",
      "author": {
        "name": "Sergey Potapov",
        "url": "http://greyblake.com/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "5fdd7918-2122-4ff3-875c-0facf2bcd1f1",
      "title": "#Rust2018 - Exploring New Contribution and Feedback Models",
      "content_text": "Since I'm coming pretty late to the #Rust2018 party, most of the things I wanted to say have already been said! Ashley's kick-off post was kind of a meta-#Rust2018 for me, calling for us to experiment with new ways to get community feedback in Rust. I personally really enjoyed",
      "url": "http://yehudakatz.com/2018/01/15/rust-2018/",
      "date_published": "2018-01-15T20:40:51+00:00",
      "author": {
        "name": "Yehuda Katz",
        "url": "http://www.yehudakatz.com/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "40d80139-ee61-4eb1-9a66-eb3fba32430f",
      "title": "Rust in 2018: Let’s fix where the bullet holes aren’t",
      "content_text": "Although I’m a rust beginner, I’ve thoroughly enjoyed reading all the Rust 2018 blogposts lately. And as a systems engineer who leans…",
      "url": "https://medium.com/@cevans3326/rust-in-2018-lets-fix-where-the-bullet-holes-aren-t-7e94cea0bd53",
      "date_published": "2018-01-16T05:49:36.867+00:00",
      "author": {
        "name": "Chris Evans",
        "url": "https://medium.com/@cevans3326"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "3936cf7f-ef74-4203-9302-bcce349e9ca5",
      "title": "A Year with Rust Game Dev",
      "content_text": "Never Slow Down.",
      "url": "http://druerridge.com/?p=536",
      "date_published": "2018-01-14T00:00:00+00:00",
      "author": {
        "name": "Dru Erridge",
        "url": "http://druerridge.com/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "c7becfa2-4e61-490a-838c-7b207956e21f",
      "title": "Rust MMXVIII, but, like, from a casual perspective",
      "content_text": "*ring ring*",
      "url": "https://medium.com/@yoshuawuyts/rust-mmxviii-but-like-from-my-perspective-6363f485ab2b",
      "date_published": "2018-01-14T14:46:43.092+00:00",
      "author": {
        "name": "Yoshua Wuyts",
        "url": "https://medium.com/@yoshuawuyts"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "e7a79828-6bc7-4b09-ac5a-4be76f4a18d4",
      "title": "My Rust hopes for 2018",
      "content_text": "There are plenty of exciting language features which should land in 2018, I'd love to see further reductions in compile times, and there are a lot...",
      "url": "https://www.reddit.com/r/rust/comments/7qd725/my_rust_hopes_for_2018/",
      "date_published": "2018-01-14T17:32:16+00:00",
      "author": {
        "name": "theotherphil",
        "url": "https://www.reddit.com/user/theotherphil"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "87cb487b-6922-4675-b3d9-9a6767bb5a1c",
      "title": "Rust in 2018",
      "content_text": "In a call for blog posts, the Rust community team asked community members to write up their vision for what the Rust community should focus on this year. I've wanted to contribute my thoughts and have been thinking about what to write ever since. I've been able to benefit from the many people who already posted their thoughts to sharpen my own thinking. I came up with 5 categories:",
      "url": "https://dirkjan.ochtman.nl/writing/2018/01/14/rust-in-2018.html",
      "date_published": "2018-01-14T00:00:00+01:00",
      "author": {
        "name": "Dirkjan Ochtman",
        "url": "https://dirkjan.ochtman.nl/writing"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "4bf00d31-d65c-43fc-b95a-5caa3df0ac4b",
      "title": "Rust2018",
      "content_text": "Rust, in no small way, has captured quite a bit of my imagination in the last 4 and a half years. The language and community has a lot of…",
      "url": "https://medium.com/@softprops/rust2018-75393b4a086f",
      "date_published": "2018-01-14T22:07:16.240+00:00",
      "author": {
        "name": "Doug Tangren",
        "url": "https://medium.com/@softprops"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "f3f500d5-d108-4f83-808e-e15ad520cce7",
      "title": "Embedded Rust in 2018",
      "content_text": "I recently picked up an embedded project that I hadn't touched for a few months, so I could add some new features. I was disappointed to not...",
      "url": "http://railwayelectronics.blogspot.com.au/2018/01/i-recently-picked-up-embedded-project.html",
      "date_published": "2018-01-14T00:00:00+00:00",
      "author": {
        "name": "Jonathan Pallant",
        "url": "http://railwayelectronics.blogspot.com.au/"
      },
      "tags": [
        "Rust 2018",
        "Embedded"
      ]
    },
    {
      "id": "4d4b233f-fba3-4e3e-9e80-fe79603a38b0",
      "title": "#Rust2018: A Neon Wish List",
      "content_text": "While I’ve been thoroughly enjoying the Rust community’s spirited #Rust2018 blog-fest, I wasn’t really thinking of participating myself until Julia Evans pointed out the leadership wants to hear from everyone—even if I might not have anything especially new to add. So here’s my little wish list for Rust in 2018. Since I’m not in Rust’s leadership, I don’t have to worry about synthesizing some grand narrative for the whole of Rust. So I’ll just focus on a few things that would be personally useful to me. In particular, I’ll stick to topics that would be helpful for my Neon project, a set of bindings for writing native Node extension modules in Rust.",
      "url": "http://calculist.org/blog/2018/01/13/rust-2018-a-neon-wish-list/",
      "date_published": "2018-01-13T17:45:00-08:00",
      "author": {
        "name": "David Herman",
        "url": "http://calculist.org/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "6b8e7f04-ece2-4dd1-9256-4ce6881d3c11",
      "title": "Most desired from Rust in 2018",
      "content_text": "Recently there was a call for community blog posts themed about ideas and expectation for Rust in the coming year. I definitely can't count myself as part of community yet as my experience with Rust so far has been purely about experimenting and research but it feels like a great opportunity to share my thoughts so far.",
      "url": "https://blog.mist.global/articles/Most_desired_from_Rust_in_2018.html",
      "date_published": "2018-01-14T12:17:42+00:00",
      "author": {
        "name": "Mihails Strasuns",
        "url": "https://blog.mist.global/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "2a2b7699-5a1a-4379-8a33-3faf4badd512",
      "title": "2018: The year we learn Rust 1.0",
      "content_text": "This is my reply to Rusts call for community blog posts.\n\nI’m known for being quite happy with Rust as is. Indeed, my first post on focusing on stable Rust was more than 2 years ago ;).\n\nAlso, note that I’ve been interested (and practically involved) in the growing and adoption of programming languages since around 2004, which was when I started doing users support for Ruby in Germany.",
      "url": "http://yakshav.es/rust-2018/",
      "date_published": "2018-01-12T11:33:54+00:00",
      "author": {
        "name": "Florian Gilcher",
        "url": "http://yakshav.es/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "59a502dd-84c7-4ad1-9a78-7d042495a25b",
      "title": "Rust - My wish list for 2018",
      "content_text": "I am excited about Rust after spending a little time with it last year. Here are my thoughts on how it can improve in 2018.",
      "url": "http://www.mmrath.com/post/rust-my-wish-list-for-2018/",
      "date_published": "2018-01-06T00:00:00+00:00",
      "author": {
        "name": "Murali Mohan Rath",
        "url": "http://www.mmrath.com/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "79f7ee1c-a798-4241-bc2a-902f8a16c548",
      "title": "Rust 2018 - machine learning perspective",
      "content_text": "Since we have this January blogging stream, I would like to talk about using Rust for machine learning. First, I would like to point out, that I...",
      "url": "https://www.reddit.com/r/rust/comments/7p6rpw/rust_2018_machine_learning_perspective/",
      "date_published": "2018-01-09T12:26:35+00:00",
      "author": {
        "name": "osamc",
        "url": "https://www.reddit.com/user/osamc"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "072421d7-7def-43b7-b3f8-441d735cba8c",
      "title": "Happy New Year 2018",
      "content_text": "For me it's also a chance to do a review of the year 2017. Most of it I spend on a Rust implementation of PBRT (beside working for The Mill and making sure we can deliver our moving images, rendered most of the time with Arnold).",
      "url": "https://www.janwalter.org/jekyll/review/2017/2018/01/01/happy-new-year-2018.html",
      "date_published": "2018-01-01T00:00:00+00:00",
      "author": {
        "name": "Jan Walter",
        "url": "https://www.janwalter.org/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "92c745cd-26fa-41e0-8b1b-a9827873af6e",
      "title": "Rust 2018",
      "content_text": "There’s a call for the community to write what they’d like to see in Rust in the following year. So, here it goes. And yes, this is a bit personal, what I would like to see in Rust ‒ I fully respect that others have different needs and that not my every wish need to be granted, because someone else will have a better idea for sure.",
      "url": "https://vorner.github.io/rust-2018.html",
      "date_published": "2018-01-08T21:40:00+00:00",
      "author": {
        "name": "Michal 'vorner' Vaner",
        "url": "https://vorner.github.io/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "afadc638-f50b-42a3-a058-a475109ce9a7",
      "title": "Rust 2018: maybe don’t be too stable",
      "content_text": "I initially did not want to write a post with what I want and foresee for Rust in 2018, because I’m already very happy with it! I have spent more than 4 years tinkering with the language, exp…",
      "url": "https://unhandledexpression.com/2018/01/10/rust-2018-maybe-dont-be-too-stable/",
      "date_published": "2018-01-10T18:25:14+00:00",
      "author": {
        "name": "Geoffroy Couprie",
        "url": "https://unhandledexpression.com/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "4a40cb13-61ed-461e-9117-57e3a530ab61",
      "title": "Snips big wish for #Rust2018: libraries or portability, pick two",
      "content_text": "Snips engineering team works on shipping vocal assistants to mobile platforms (iOS and android) and a growing diversity of single board…",
      "url": "https://medium.com/snips-ai/snips-big-wish-for-rust2018-libraries-or-portability-pick-two-814d104586d9",
      "date_published": "2018-01-09T17:38:31.679+00:00",
      "author": {
        "name": "Mathieu Poumeyrol",
        "url": "https://medium.com/@mathieu.poumeyrol"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "9bd09566-0ba0-47a2-9400-a01a0e218e51",
      "title": "Rust incremental-difficulty tutorial series",
      "content_text": "A response to Rust’s Call for Community Blogposts #Rust2018",
      "url": "https://medium.com/@sirodoht/rust-incremental-difficulty-tutorial-series-8c09ecdd38e7",
      "date_published": "2018-01-03T23:16:35.588+00:00",
      "author": {
        "name": "Theodore Keloglou",
        "url": "https://medium.com/@sirodoht"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "6aea5335-d3b5-4c36-be35-8461d9206149",
      "title": "Rust and crate of wishes for 2018",
      "content_text": "I appreciate the great community effort being fostered by Mozilla’s Rust team and the cool Rust community outside that have been helpful in…",
      "url": "https://medium.com/@nimtiazm/rust-and-crate-of-wishes-for-2018-1258f6977d42",
      "date_published": "2018-01-13T09:14:15.330+00:00",
      "author": {
        "name": "Nabeel Ali Memon",
        "url": "https://medium.com/@nimtiazm"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "28b10d91-030e-4828-b02e-4d173b8cfab9",
      "title": "Rust in 2018",
      "content_text": "As a beginner in rust, it has been the gateway to so many interesting concepts.",
      "url": "https://medium.com/@blackdjikstra/rust-in-2018-d6c0be87cba8",
      "date_published": "2018-01-12T23:05:58.997+00:00",
      "author": {
        "name": "Black Djikstra",
        "url": "https://medium.com/@blackdjikstra"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "914dd414-184a-4d72-adfe-cea12e7a9fe4",
      "title": "What Rust Needs in 2018 to Succeed",
      "content_text": "In the spirit of the current Rust blog post extravaganza, here are my 2¢ on the most important work to make Rust win big",
      "url": "https://llogiq.github.io/2018/01/09/rust.html",
      "date_published": "2018-01-09T00:00:00+00:00",
      "author": {
        "name": "llogiq",
        "url": "https://llogiq.github.io/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "0304d95e-71f7-47c8-b415-5d6d2ffb5e85",
      "title": "Looking in on Rust in 2018",
      "content_text": "With the call for #Rust2018 blog posts on how this year’s roadmap should look, I figured I’d chime in with a few items. Now, I’m not using Rust in any shape or form in my day-to-day life (though I’d like to!), but I follow along with the community because so many exciting things happen, and I find Rust itself to be a breath of fresh air. In other words, my view is shaped mostly by my role as observer (rather than active participant), and the primary need I want to address is to make it easier to convince coworkers and higher-ups to give Rust a shot.",
      "url": "https://kasma1990.gitlab.io/2018/01/07/looking-in-on-rust-in-2018/",
      "date_published": "2018-01-07T00:00:00+00:00",
      "author": {
        "name": "Kasper Andersen",
        "url": "https://kasma1990.gitlab.io/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "f281d4cb-864b-4afa-98be-67a773a5bbf5",
      "title": "My desired features for a Rust debugger",
      "content_text": "Backward stepping Most debuggers provide the following commands: Step into the next function (reaching its beginning-point) Hop over the next function call Jump to the end of the current function R…",
      "url": "https://carlomilanesi.wordpress.com/2018/01/04/my-desired-features-for-a-rust-debugger/",
      "date_published": "2018-01-04T02:36:54+00:00",
      "author": {
        "name": "Carlo Milanesi",
        "url": "https://carlomilanesi.wordpress.com/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "547cd24b-800d-406a-8608-62197c4a23f2",
      "title": "Rust in 2018: feature polish and notes on abstraction",
      "content_text": "Despite the overwhelming success of the impl period, many of the features tackled are massive undertakings which could not possibly have been polished in suc...",
      "url": "https://byte.observer/posts/2018/01/12/rust-2018",
      "date_published": "2018-01-12T04:11:49+00:00",
      "author": {
        "name": "Noah Weninger",
        "url": "https://byte.observer/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "92a3a3bb-1858-49c7-9a91-7750060fdedf",
      "title": "2017 in Rust",
      "content_text": "Inspired by the Call for Community Blogposts I want to summarize my experiences and thoughts on Rust in 2017 and what I am excited about for 2018.\nReflecting 2017 2017 was an amazing year for Rust. We got 8 releases of rust itself! We got basic procedural macros allowing custom derive (also known as “macros 1.1”) in the first release last year (1.15.0). This made serde 1.0 possible, if I’m not mistaken?",
      "url": "https://beyermatthias.de/blog/2018/01/05/2017-in-rust/",
      "date_published": "2018-01-05T19:00:00+00:00",
      "author": {
        "name": "Matthias Beyer",
        "url": "https://beyermatthias.de/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "fa1c0f13-5a61-40d8-8ac5-0c702578abd8",
      "title": "What I’d Like To See In Rust",
      "content_text": "blog post on thoughts for rust 2018",
      "url": "https://austinstig.github.io/rs2018/post",
      "date_published": "2018-01-04T15:59:54+00:00",
      "author": {
        "name": "austinstig",
        "url": "https://github.com/austinstig"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "75ae624e-fe9b-4705-9bc2-99066deeb214",
      "title": "Rusting as a student",
      "content_text": "At the request of the Rust team, the community was tasked with writing blog posts talking about the future and history of rust as it would pertain to improving the language in 2018. I thought I'd take the opportunity to finally begin writing, since it seems like blogging is all the rage nowadays.",
      "url": "http://samuelresendez.me/scribbles/sophomore_rust.html",
      "date_published": "2018-01-13T04:04:26+00:00",
      "author": {
        "name": "samuelresendez",
        "url": "http://samuelresendez.me/scribbles/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "e769013d-619e-4180-8ca7-3960e1440ea1",
      "title": "Fast Rust in 2018",
      "content_text": "Rust is already a fast language, but there are still many opportunities to make it the fast language. While many people will rightfully focus on usability, tooling, and community goals for 2018, I will focus on some exciting changes which will make Rust the star of HPC.",
      "url": "https://adamniederer.com/blog/rust-2018.html",
      "date_published": "2018-01-12T07:07:37+00:00",
      "author": {
        "name": "Adam Niederer",
        "url": "https://adamniederer.com/blog/blog.html"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "cb089afe-f076-4527-bb9a-342be41414e1",
      "title": "Rust in 2018: it's way easier to use!",
      "content_text": "Rust in 2018: it's way easier to use!",
      "url": "https://jvns.ca/blog/2018/01/13/rust-in-2018--way-easier-to-use/",
      "date_published": "2018-01-14T06:05:00+00:00",
      "author": {
        "name": "Julia Evans",
        "url": "https://jvns.ca/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "8a17aa75-d002-4e09-bfdf-d5d38241950c",
      "title": "rust2018.md",
      "content_text": "First a few words about me. I was and still am a student, and most of my coding is for learning and because it is fun. Also, coding is a great excuse for procrastinating something more important :). Having contributed to open source codebases has helped me determine that I want to do this in a day job once I'm done with my studies.",
      "url": "https://gist.github.com/est31/c063704716b6880fd74ce2ba11b11298",
      "date_published": "2018-01-08T02:42:14+00:00",
      "author": {
        "name": "est31",
        "url": "https://github.com/est31"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "1cc61fb9-22bb-476d-b133-c1c38d2e9f64",
      "title": "Goals and Directions for Rust in 2018",
      "content_text": "Reflecting on Rust in 2017 and what might be worth focussing on in 2018.",
      "url": "http://www.wezm.net/technical/2018/01/goals-directions-rust-2018/",
      "date_published": "2018-01-07T13:07:00+11:00",
      "author": {
        "name": "Wesley Moore",
        "url": "http://www.wezm.net/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "438424a8-c55f-49c7-9860-683e805bc36e",
      "title": "#Rust2018 goals for 2018",
      "content_text": "My 2 cents: Totally agree with people who say we need an \"impl year\", but also I would love to see wasm become a first class platform. I think...",
      "url": "https://www.reddit.com/r/rust/comments/7oyj9j/rust2018_goals_for_2018/",
      "date_published": "2018-01-08T13:35:48+00:00",
      "author": {
        "name": "richhyd",
        "url": "https://www.reddit.com/user/richhyd"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "91e2a724-3253-43ec-8b62-bd6285d7895c",
      "title": "Rust2018: back to the roots",
      "content_text": "I can think of many goals for Rust in 2018, but for me at least 2017 went through pretty quickly, so I asked myself the question: If I could...",
      "url": "https://www.reddit.com/r/rust/comments/7p6n90/rust2018_back_to_the_roots/",
      "date_published": "2018-01-09T11:59:53+00:00",
      "author": {
        "name": "0b_0101_001_1010",
        "url": "https://www.reddit.com/user/0b_0101_001_1010"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "9415f407-45c8-430e-b4e2-a6947848acaf",
      "title": "A traveller's journey into Rust 2017, 2018",
      "content_text": "A Year Of Rust",
      "url": "https://blog.x5ff.xyz/blog/a-journey-into-rust-2018/",
      "date_published": "2018-01-08T00:00:00+00:00",
      "author": {
        "name": "Claus",
        "url": "https://blog.x5ff.xyz/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "c6752215-9ccb-4c67-b512-bd2cfdcaae86",
      "title": "Rust2018 Wishpost: Better Debug derive",
      "content_text": "It was asked that everyone talk about what they want to see happen with Rust in 2018, and I'm sure a lot of folks will be saying a lot of things....",
      "url": "https://www.reddit.com/r/rust/comments/7p4imw/rust2018_wishpost_better_debug_derive/",
      "date_published": "2018-01-09T04:05:10+00:00",
      "author": {
        "name": "Lokathor",
        "url": "https://www.reddit.com/user/Lokathor"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "f114d011-5554-4169-8cca-d01512308bab",
      "title": "Rust in 2018",
      "content_text": "A week ago we put out a call for blog posts for what folks think Rust should do in 2018. This is mine. Overall focus I think 2017 was a great year …",
      "url": "https://manishearth.github.io/blog/2018/01/10/rust-in-2018/",
      "date_published": "2018-01-10T00:00:00+00:00",
      "author": {
        "name": "Manish Goregaokar",
        "url": "https://manishearth.github.io/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "9f51e626-4330-4ddd-984a-34e3b582b171",
      "title": "#Rust2018 FtW (For the Web)",
      "content_text": "*below post is going to update quite often accordingly* This idea is actually something i got from someone else - \"now that Rust is getting...",
      "url": "https://www.reddit.com/r/rust/comments/7q53d6/rust2018_ftw_for_the_web/",
      "date_published": "2018-01-13T15:36:28+00:00",
      "author": {
        "name": "tuxmanexe",
        "url": "https://www.reddit.com/user/tuxmanexe"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "ae0144fa-a8c5-416f-8c2c-02ae2ad11c79",
      "title": "A libz blitz retrospective",
      "content_text": "This post is my personal retrospective of the libz blitz and my part in it. It's also a loose response to the #Rust2018 call for blog posts and a chance to show off my amazingly poor drawing skills. For the part most relevant to #Rust2018, see the last section.",
      "url": "https://gist.github.com/KodrAus/953e8182e81d8d9147cd32822748665f#a-libz-blitz-retrospective",
      "date_published": "2018-01-13T23:50:22+00:00",
      "author": {
        "name": "Ashley Mannix",
        "url": "https://github.com/KodrAus"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "b1a7569d-c5e6-41d9-99ea-18c4b7e9105e",
      "title": "Rust in 2018: Streamline Collaboration and Empower Intermediate Users",
      "content_text": "I wrote about the ...",
      "url": "https://matthias-endler.de/2018/rust-2018/",
      "date_published": "2018-01-09T00:00:00+00:00",
      "author": {
        "name": "Matthias Endler",
        "url": "https://matthias-endler.de/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "c506e8b8-69f1-4f39-803a-6e3a34c06145",
      "title": "Pollen Robotics call for #Rust2018: toward stability on embedded systems",
      "content_text": "Robotics developers face two main problems:",
      "url": "https://medium.com/pollenrobotics/rust-for-robotics-and-embedded-systems-in-2018-96e9be8464",
      "date_published": "2018-01-12T13:32:49.383+00:00",
      "author": {
        "name": "Pierre Rouanet",
        "url": "https://medium.com/@pierre.rouanet"
      },
      "tags": [
        "Rust 2018",
        "Embedded"
      ]
    },
    {
      "id": "067c467f-3922-40d0-a0e6-f35eafeaffc7",
      "title": "Next for Rust",
      "content_text": "Next for Rust in 2018",
      "url": "http://gilescope.ninja/rust/2018/01/11/Next-for_Rust.html",
      "date_published": "2018-01-11T16:33:12+00:00",
      "author": {
        "name": "gilescope",
        "url": "http://gilescope.ninja/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "681f1733-be53-4798-9198-6a1562783fd5",
      "title": "Branchless #Rust2018",
      "content_text": "About an oportunity for Rust, as part of the #Rust2018 request",
      "url": "https://bluejekyll.github.io/blog/rust/2018/01/10/branchless-rust.html",
      "date_published": "2018-01-10T07:00:00+00:00",
      "author": {
        "name": "Benjamin Fry",
        "url": "https://bluejekyll.github.io/blog/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "bea672e3-d5bb-4008-9439-76fe914f46a7",
      "title": "#Rust2018",
      "content_text": "I don’t have a wish list of Rust features that don’t already exist. Rather, I mainly wish that in 2018, Rust committed to certain things that already work in nightly Rust and have worked for a couple of years now.",
      "url": "https://hsivonen.fi/rust2018/",
      "date_published": "2018-01-11T00:00:00+00:00",
      "author": {
        "name": "Henri Sivonen",
        "url": "https://hsivonen.fi/author/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "80e6cc62-73cd-4b55-bcbf-5770348ed843",
      "title": "#rust2018 - cross compiling?",
      "content_text": "I don’t have a blog or anything, I just wanted to mention an aspect of rust that could use some love this year - cross compiling. Right now...",
      "url": "https://www.reddit.com/r/rust/comments/7phh1l/rust2018_cross_compiling/",
      "date_published": "2018-01-10T18:16:51+00:00",
      "author": {
        "name": "lurebat",
        "url": "https://www.reddit.com/user/lurebat"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "df1ee60b-5fb1-49a4-a0e8-1f05961ed250",
      "title": "Rust In 2018",
      "content_text": "Rust in 2018 This short post is a reflection on Rust in 2017 and some ideas I would love to see in 2018 written in the spirit of this blog post. I will keep things brief and try not to repeat what others have already shared. There have been many wonderful ideas that makes me even more enthusiastic about Rust so I hope that I can add to the excitement with a few of my own.",
      "url": "https://gsquire.github.io/static/post/rust-in-2018/",
      "date_published": "2018-01-10T19:05:55-08:00",
      "author": {
        "name": "Garrett Squire",
        "url": "https://gsquire.github.io/static/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "8104012c-3de8-4824-b11f-9bbaafff2408",
      "title": "Refutable Let and Rust in 2018",
      "content_text": "Examining RFC 1303 Add a `let...else` expression",
      "url": "https://dev.to/cad97/refutable-let-and-rust-in-2018-4l3k",
      "date_published": "2018-01-11T00:00:00+00:00",
      "author": {
        "name": "Christopher Durham",
        "url": "https://dev.to/cad97"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "19c0f10d-e9a9-4f53-9f6f-08a106809a30",
      "title": "Rust 2018",
      "content_text": "Instead of fire flowers,this year the Rust Team made a public call for blogposts, asking the community to write posts thatreflect on Rust in 2017 and what they wish for Rust in 2018. What follows are some of the things I personally see as important,and that I’d love to prioritize on in the following months.",
      "url": "https://deterministic.space/rust-2018.html",
      "date_published": "2018-01-10T00:00:00+01:00",
      "author": {
        "name": "Pascal Hertleif",
        "url": "https://deterministic.space/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "818cfee5-06f3-4d25-b4b9-cafb65a57697",
      "title": "#Rust2018",
      "content_text": "I use Rust to write simple computer games as a hobby. I'm not a professional or even an experienced game developer. The reason I picked up Rust is because I wanted something that...",
      "url": "https://aimlesslygoingforward.com/blog/2018/01/10/rust-2018/",
      "date_published": "2018-01-10T00:00:00+00:00",
      "author": {
        "name": "Tomas Sedovic",
        "url": "https://aimlesslygoingforward.com/blog/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "60351f3f-c088-42df-819e-a3ad0c44772a",
      "title": "Rust in 2018: a people perspective",
      "content_text": "The call for #Rust2018 blog posts has generated a fantastic set of responses so far, and there’s already an emerging consensus around much of the technical focus for the year. Since I largely agree with what others have said on that front, I want to focus my post on the people side of things: what kind of impact do we want to make on people, both contributors and customers, in 2018?",
      "url": "http://aturon.github.io/blog/2018/01/09/rust-2018/",
      "date_published": "2018-01-09T00:00:00-08:00",
      "author": {
        "name": "Aaron Turon",
        "url": "http://aturon.github.io/blog/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "b17769a4-33cf-476a-ab72-88760bf8e8ec",
      "title": "Talking about how we talk about Rust in 2018",
      "content_text": "In this post, I want to talk about how we talk about Rust in 2018. I think there are some ways we can change what we’re saying and how we’re saying it. These changes will help Rust be more approachable for beginners and an even nicer place in general.",
      "url": "http://www.jonathanturner.org/2018/01/how-we-talk-about-rust-in-2018.html",
      "date_published": "2018-01-10T00:00:00+00:00",
      "author": {
        "name": "Jonathan Turner",
        "url": "http://www.jonathanturner.org/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "bd4a7ce1-c702-4965-b9c4-01e0ffca352b",
      "title": "My Goals for Rust in 2018",
      "content_text": "The Rust project has requested blog posts about the project’s goals for 2018. I found myself in pretty much complete agreement with Nick Cameron’s post, so I thought instead I would write about my own personal goals for Rust in 2018. I am fortunate enough to work on Rust full-time; modulated by the work that needs to get done to accomplish larger team goals, these are some things that I’m individually very motivated to make progress on in 2018.",
      "url": "https://boats.gitlab.io/blog/post/2018-01-08-goals-for-rust/",
      "date_published": "2018-01-09T00:00:00+00:00",
      "author": {
        "name": "withoutboats",
        "url": "https://boats.gitlab.io/blog/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "8595c82d-ae75-4e7c-8e19-e7458849d61b",
      "title": "Looking back at Rust in 2018",
      "content_text": "A careful reader will note the date of this post; it’s fundamentally in response to this call for blog posts, with a rhetorical device of looking backwards as if my personal plans for Rust came true. If you’re reading this in 2019 or beyond, this... | Steve Klabnik | “The most violent element in society is ignorance.” - Emma Goldman",
      "url": "http://words.steveklabnik.com/looking-back-at-rust-in-2018",
      "date_published": "2018-01-09T00:00:00+00:00",
      "author": {
        "name": "Steve Klabnik",
        "url": "http://words.steveklabnik.com/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "fa46df66-4a9e-4500-8d64-270c723b1071",
      "title": "#Rust2018",
      "content_text": "As part of #Rust2018, I thought I would try to writeup my own (current) perspective. I’ll try to keep things brief. First and foremost, I think that this yea...",
      "url": "http://smallcultfollowing.com/babysteps/blog/2018/01/09/rust2018/",
      "date_published": "2018-01-09T00:00:00+01:00",
      "author": {
        "name": "Niko Matsakis",
        "url": "http://smallcultfollowing.com/babysteps/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "8c52a558-78c4-4c5a-b06b-7d254af78db3",
      "title": "#Rust2018 : Don’t be the new Haskell",
      "content_text": "TLDR: Big companies adoption determine the success of the language, not the quality of the language. Let’s target big companies / projects…",
      "url": "https://hackernoon.com/rust-2018-dont-be-the-new-haskell-a383dbd74481",
      "date_published": "2018-01-09T03:02:35.835+00:00",
      "author": {
        "name": "Tibo Delor",
        "url": "https://hackernoon.com/@tibotz"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "de1fbb2e-47e5-4477-8b2c-533a82b479aa",
      "title": "Why Rust? A Two Year Retrospective",
      "content_text": "Why Rust? That was a question I asked exactly two years ago when I started Way Cooler (by the way, happy 2nd birthday Way Cooler!).",
      "url": "http://way-cooler.org/blog/2018/01/09/way-cooler-turns-two.html",
      "date_published": "2018-01-09T00:00:00+00:00",
      "author": {
        "name": "Preston Carpenter",
        "url": "https://timidger.github.io/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "342a3884-6f24-4d2e-8a60-11d9ec06f5ee",
      "title": "Adding Superheroes to the Rust Brazilian Community",
      "content_text": "In December, Mozilla Brazil in partnership with the Rust Lang BR community launched a project that brings together Rust programmers and community leaders from regions all over Brazil to advance ...",
      "url": "https://mozillabr.org/2018/01/adding-superheroes-to-the-rust-brazilian-community/",
      "date_published": "2018-01-08T18:16:39-02:00",
      "author": {
        "name": "Geraldo Barros",
        "url": "https://mozillabr.org/author/geraldobarros/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "36658802-1c32-4af9-b41f-f2ce2adca813",
      "title": "Rust 2018: Use Relentless Positivity",
      "content_text": "Rust is a fantastic programming language, but I believe that adoption is held back largely due to a reputation for being difficult to learn. Let's fix that....",
      "url": "http://always-learning.timmcnamara.co.nz/2018/01/08/rust-2018/",
      "date_published": "2018-01-08T09:29:29.468+00:00",
      "author": {
        "name": "Tim McNamara",
        "url": "http://always-learning.timmcnamara.co.nz/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "87167446-604f-4bda-b1b1-2f13ea712655",
      "title": "New faces for our lovely bots in #Rust2018",
      "content_text": "A blog about programming and stuff. I'm in love with Rust, so most of my programming related posts are about that language.\n",
      "url": "https://lukaskalbertodt.github.io/2018/01/07/new-faces-for-bots-rust2018.html",
      "date_published": "2018-01-07T00:00:00+00:00",
      "author": {
        "name": "Lukas Kalbertodt",
        "url": "http://lukaskalbertodt.github.io/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "6b64ad00-dbd7-4974-8e82-503c2faa9798",
      "title": "Rust in 2018",
      "content_text": "The Rust project is soliciting wishlists for 2018. Rather than list big things that everybody wants like NLL or a more stable tokio, I’m going to list some things that I think are small and could be...",
      "url": "http://blog.kylehuey.com/post/169445545152/rust-in-2018",
      "date_published": "2018-01-07T00:00:00+00:00",
      "author": {
        "name": "Kyle Huey",
        "url": "http://blog.kylehuey.com/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "3b88c9f8-870f-4b97-a9e3-34cf5fc5f118",
      "title": "the new wave of rust",
      "content_text": "I’m generally terrible at big-picture planning, so instead I’d like to talk about what I want to accomplish in the Rust world in 2018. Whether this slots into anyone else’s planning is another matter, but I’ll leave that as an exercise for the reader.",
      "url": "https://quietmisdreavus.net/code/2018/01/07/the-new-wave-of-rust/",
      "date_published": "2018-01-07T00:00:00+00:00",
      "author": {
        "name": "QuietMisdreavus",
        "url": "https://quietmisdreavus.net/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "52d67205-01cc-4100-aee3-646795db6b95",
      "title": "Rust and the web in 2018",
      "content_text": "My wish for Rust in 2018 is a nice and convenient web service framework that runs on stable rust and gets maintenance and regular updates for many years to come. My intent for 2018 is to continue to maintain and improve ructe (and rsass), and try to integrate it with the best such framework i can find.",
      "url": "https://rasmus.krats.se/2018/rustweb.en",
      "date_published": "2018-01-07T22:50:00+00:00",
      "author": {
        "name": "Rasmus Kaj",
        "url": "https://rasmus.krats.se/en"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "9d6a825b-75f7-4e63-8ada-4fa21202f843",
      "title": "Rust 2018",
      "content_text": "I want 2018 to be boring. I don't want it to be slow, I want lots of work to happen, but I want it to be 'boring' work. We got lots of big new things in 2017 and it felt...",
      "url": "https://www.ncameron.org/blog/rust-2018/",
      "date_published": "2018-01-07T22:39:37.752+00:00",
      "author": {
        "name": "Nick Cameron",
        "url": "http://www.ncameron.org/blog/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "80b271ae-2668-4577-9512-f7562e651253",
      "title": "Rust 2018",
      "content_text": "In this post I share a few small thoughts on what Rust should do in 2018, and more broadly about the current direction of the language. Tooling A …",
      "url": "http://www.suspectsemantics.com/blog/2018/01/07/rust-2018/",
      "date_published": "2018-01-07T13:34:15-08:00",
      "author": {
        "name": "Andrew Brinker",
        "url": "http://www.suspectsemantics.com/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "6e9f2101-5cff-4356-95ea-43146f207fc5",
      "title": "Rust 2018",
      "content_text": "Per the call for blog posts, I’ve got thoughts and ideas on where Rust can go in the upcoming year. My wants haven’t changed much over the last year or so: give me non-embarassing compilation speed! 😁\n\nBefore getting started, I’m very appreciative of the hard work put into the overall Rust community and ecosystem, including the behind-the-scenes work. It’s difficult to understate just how much time and energy people volunteer in pursuit of a better, Rust-ier world.",
      "url": "https://matthewkmayer.github.io/blag/public/post/rust-2018/",
      "date_published": "2018-01-07T00:00:00+00:00",
      "author": {
        "name": "Matthew Mayer",
        "url": "https://matthewkmayer.github.io/blag/public"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "dbe7f7e3-229a-4d77-8d9f-7d857c051b54",
      "title": "#Rust2018 blog post",
      "content_text": "#Rust2018 blog post",
      "url": "https://gist.github.com/cessen/394829673855e56157f63b4447f91e67",
      "date_published": "2018-01-07T06:23:37+00:00",
      "author": {
        "name": "Nathan Vegdahl",
        "url": "https://github.com/cessen"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "4880546f-66a5-461b-a3b0-c0e31379b23d",
      "title": "Improving how we improve Rust in 2018",
      "content_text": "The past few years, I’ve been lucky to be part of the Rust community survey process. In 2016, this data helped show the need to improve usability. We had good foundations, but they were too hard to get at. In 2017, we saw a renewed need to reach out to companies, to improve documentation, and a continued importance of pushing to making Rust more usable.",
      "url": "http://www.jonathanturner.org/2018/01/rust2018-and-data.html",
      "date_published": "2018-01-07T00:00:00+00:00",
      "author": {
        "name": "Jonathan Turner",
        "url": "http://www.jonathanturner.org/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "2fae2fb9-686e-4b6e-a4e9-7cc28275bf44",
      "title": "Rust, Looking Forward in 2018",
      "content_text": "This past year I was pretty well a full-time Rust developer working on a handful of key projects: postmates/cernan postmates/hopper postmates/quantiles Each of these saw a non-trivial amount of work poured into them by myself and others. I wrote some – but not enough – about the work that",
      "url": "http://blog.troutwine.us/2018/01/06/rust-looking-forward-in-2018/",
      "date_published": "2018-01-06T02:09:25+00:00",
      "author": {
        "name": "Brian L. Troutwine",
        "url": "http://blog.troutwine.us/author/blt/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "88162fa2-6b84-4c3e-82e8-9e4443cb11c0",
      "title": "More Rust in 2018",
      "content_text": "Recently, the Rust teams put out a call for community thoughts on what Rust’s 2018 goals shouldbe, andwe’d like to weigh in from our perspective as a Rust-fo...",
      "url": "http://integer32.com/2018/01/05/more-rust-in-2018.html",
      "date_published": "2018-01-05T00:00:00+00:00",
      "author": {
        "name": "Carol Nichols",
        "url": "http://integer32.com/blog/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "3f34d83f-f520-4bfa-a6a8-f08e3a0bea9d",
      "title": "Rustに何が欲しいだろう",
      "content_text": "κeenです。New Year’s Rust: A Call for Community Blogpostsの一環のつもりです。 恐らく英語の記事が望まれてるんだろうなと思いつつも試しに日本から声を上げてみます。 私はRustは1.0前後の頃から触っていて、ドキュメントの翻訳をしたりここ1年くらいはIdein Inc.での業務でも使っています。\n\n1年ほど使ってみて何が足りないか考えてみます。",
      "url": "https://keens.github.io/blog/2018/01/05/rustninanigahoshiidarou/",
      "date_published": "2018-01-05T00:00:00+00:00",
      "author": {
        "name": "κeen",
        "url": "https://keens.github.io/"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "56870365-7dc4-4449-9f18-19caa0414b6b",
      "title": "My journey with Rust in 2017 — The good, the bad, the weird",
      "content_text": "Note: This post is not only about Rust, but rather my experiences, problems and solutions throughout 2017.",
      "url": "https://codeburst.io/my-journey-with-rust-in-2017-the-good-the-bad-the-weird-f07aa918f4f8",
      "date_published": "2018-01-04T00:31:28.519+00:00",
      "author": {
        "name": "Felix Schütt",
        "url": "https://codeburst.io/@fschutt"
      },
      "tags": [
        "Rust 2018"
      ]
    },
    {
      "id": "6d59f1d8-c073-47db-b3f5-0001878fd372",
      "title": "New Year's Rust: A Call for Community Blogposts",
      "content_text": "Starting today and running until the end of January we’d like to ask the community to write blogposts reflecting on Rust in 2017 and proposing goals and directions for Rust in 2018.",
      "url": "https://blog.rust-lang.org/2018/01/03/new-years-rust-a-call-for-community-blogposts.html",
      "date_published": "2018-01-03T00:00:00+00:00",
      "author": {
        "name": "Rust Blog",
        "url": "https://blog.rust-lang.org/"
      },
      "tags": [
        "Rust 2018"
      ]
    }
  ]
}
