<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - All Posts</title><link>https://readrust.net/</link><description>All Posts posts on Read Rust</description><item><title>Organizational Debt</title><link>https://boats.gitlab.io/blog/post/rust-2019/</link><description><![CDATA[We all know that classic aphorism: Year comes to an end, Rust blog post press send. This is mine.

There are lots of cool technical improvements to Rust that I want the project to achieve this year, and a few in particular that I’m definitely going to be putting a lot of time into. But this blog post is going to talk about none of them. Instead, I want to talk about organizational debt, and how badly the Rust project needs to deal with it in 2019.]]></description><guid isPermaLink="false">f0adf24b-6589-4306-a580-6cef894ad3b7</guid><pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate><dc:creator>withoutboats</dc:creator></item><item><title>Creating a Static HTTP Server with Rust - Part 1</title><link>http://concisecoder.io/2019/05/11/creating-a-static-http-server-with-rust-part-1/</link><description><![CDATA[In this series, we will create a basic static HTTP 1.0 server with Rust. At the end of Part 1 of this tutorial, our server will do the following: Listen for and handle TCP connections on a specific port, Accept HTTP 1.0 GET requests, Parse and validate requests for further use, Log incoming requests. We will avoid using libraries that make this trivial (i.e. the http crate) and focus on the fundamentals of how a server works.]]></description><guid isPermaLink="false">25d9490f-05e3-4f5c-a407-19d78b0fb6d4</guid><pubDate>Sat, 11 May 2019 17:17:46 +0000</pubDate><dc:creator>Levi Payne</dc:creator></item><item><title>rust-hypervisor-firmware</title><link>https://github.com/intel/rust-hypervisor-firmware/blob/master/README.md</link><description><![CDATA[This repository contains a simple KVM firmware that is designed to be launched from anything that supports loading ELF binaries and running them with the Linux kernel loading standard. The ultimate goal is to be able to use this "firmware" to be able to load a bootloader from within a disk image.]]></description><guid isPermaLink="false">03308e2f-7a8e-4162-8c4e-4bffd1138c51</guid><pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate><dc:creator>Intel</dc:creator></item><item><title>Snips Open Sources Tract</title><link>https://medium.com/snips-ai/snips-open-sources-tract-cdc50f437ef2</link><description><![CDATA[After open sourcing Snips-NLU a year ago, Snips now shares Tract, a new piece of its embedded voice platform. Tract is Snips’ neural network inference engine.]]></description><guid isPermaLink="false">0cbe8a85-0ad7-49b7-b266-db068f4cef8d</guid><pubDate>Fri, 10 May 2019 13:59:02 +0000</pubDate><dc:creator>Mathieu Poumeyrol</dc:creator></item><item><title>μAMP: Asymmetric Multi-Processing on microcontrollers</title><link>https://blog.japaric.io/microamp/</link><description><![CDATA[microamp (styled as μAMP) is a framework (library plus cargo subcommand) for building bare-metal applications that target AMP systems. This blog post is a deep dive into this framework which serves as the core foundation of the multi-core version of Real Time For the Masses (RTFM), which I’ll cover in the next blog post.]]></description><guid isPermaLink="false">507fcf49-a4cd-445d-8df1-82eaaad35188</guid><pubDate>Fri, 10 May 2019 00:00:00 +0000</pubDate><dc:creator>Jorge Aparicio</dc:creator></item><item><title>Some Thoughts on Rust&apos;s Async/Await Debate</title><link>https://whitfin.io/some-thoughts-on-rusts-async-await-proposals/</link><description><![CDATA[This post will be an extension of the debates found in the Rust forums, specifically here and here. A lot is being said in those threads and there's a certain amount of duplicated posts that are drowning out potentially valuable information and perspectives. I've written several comments in those debates]]></description><guid isPermaLink="false">6c334d13-f697-4774-8820-3665687ec7a4</guid><pubDate>Thu,  9 May 2019 18:41:38 +0000</pubDate><dc:creator>Isaac Whitfield</dc:creator></item><item><title>2D Graphics on Modern GPU</title><link>https://raphlinus.github.io/rust/graphics/gpu/2019/05/08/modern-2d.html</link><description><![CDATA[Is the traditional 2D imaging model nearing the end of its usefulness, or does it have a shiny future in the “modern graphics” world? I spent a week on a research retreat in a cottage in the woods to answer this question, as it shapes the future of UI toolkits. Performant UI must use GPU effectively, and it’s increasingly common to write UI directly in terms of GPU rendering, without a 2D graphics API as in the intermediate layer. Is that the future, or perhaps a mistake?]]></description><guid isPermaLink="false">3ce37cbb-5bdc-4340-a83f-9f402616cd58</guid><pubDate>Wed,  8 May 2019 20:40:42 +0000</pubDate><dc:creator>Raph Levien</dc:creator></item><item><title>Recursive iterators in Rust</title><link>https://amos.me/blog/2019/recursive-iterators-rust/</link><description><![CDATA[I’ve been looking for this blog post everywhere, but it doesn’t exist, so I guess it’s my turn to write about Some Fun with Rust. Let’s say you have a recursive, acyclic data structure. Now let’s say you want to iterate over the values of the root node and all its children, recursively, so that you get the sequence [1, 2, 3, 4, 5, 6, 7].]]></description><guid isPermaLink="false">7d5b4554-d4eb-45b4-9d90-a562f36a4f88</guid><pubDate>Wed,  8 May 2019 00:00:00 +0000</pubDate><dc:creator>amos</dc:creator></item><item><title>Learn Rust: Parsing command line arguments with StructOpt</title><link>https://www.tenderisthebyte.com/blog/2019/05/08/parsing-cli-args-with-structopt/</link><description><![CDATA[A beginners guide to using StructOpt for parsing command line arguments.]]></description><guid isPermaLink="false">b5691501-490d-4eef-a8cc-2728e42774d2</guid><pubDate>Wed,  8 May 2019 00:00:00 +0000</pubDate><dc:creator>Ryan Moore</dc:creator></item><item><title>Implementing a Interpreted Language in Rust Part 1</title><link>http://nedellis.com/2019/05/08/esta_1/</link><description><![CDATA[We live in a great era for language design. Within the last 5-10 years, several innovative languages have come out and won over the hearts of many developers with a newfound focus on memory safety (Rust), runtime interoperability (JVM: Kotlin, V8: Typescript, BEAM: Elixir), first class concurrency (Go, Pony), dependent types (Idris), Language oriented Programming (Racket) and many more inspired features. In this spirit, I have decided to throw my hat into the ring as well and create my own language for fun.]]></description><guid isPermaLink="false">35a812e7-75c8-4ffe-98b0-0dee390a5a51</guid><pubDate>Wed,  8 May 2019 00:00:00 +0000</pubDate><dc:creator>Ned Ellis</dc:creator></item><item><title>Rust and glibc version</title><link>http://redbeardlab.com/2019/05/07/rust-and-glibc-version/</link><description><![CDATA[The rust compiler dynamically link the executable against the glibc in the system. Hence if you compile your software against a newer version of glibc (say 2.19) that the one available where you run the executable (say in the host is available 2.14) it may not work.

The cleanest one is to don’t dynamically link against glib, indeed is possible to compile a rust binary statically linking musl, to do so is sufficient to compile against the correct target, usually using cargo build --target x86_64-unknown-linux-musl.

Another possibility is to compile in an environment with an “old-enough” version of glibc, this is usually done using docker and indeed there is a whole project that aim to create a set “zero setup” docker images. ]]></description><guid isPermaLink="false">e6de297c-e3b3-40ab-af40-922f95e71444</guid><pubDate>Tue,  7 May 2019 16:33:59 +0000</pubDate><dc:creator>Simone Mosciatti</dc:creator></item><item><title>Rust Patterns: Enums Instead Of Booleans</title><link>http://blakesmith.me/2019/05/07/rust-patterns-enums-instead-of-booleans.html</link><description><![CDATA[As I’ve been writing Rust code more, I’ve noticed how few boolean types I’m using in my code. Instead, I’m using Rust’s powerful enums in 90% of cases where I would have reached for a boolean in another language.]]></description><guid isPermaLink="false">577c30e3-f6b8-4c6f-98a5-020962df3df3</guid><pubDate>Tue,  7 May 2019 00:00:00 +0000</pubDate><dc:creator>Blake Smith</dc:creator></item><item><title>Racing sed with Rust</title><link>https://www.lambdafunctions.com/articles/racing-sed-with-rust</link><description><![CDATA[As part of a project I’m working on, I sometimes find myself having to deal with quite large X12 files. What I’d really like is a small, self-contained tool that I can pass an X12 file to and rely on it to Do The Right Thing™ without any unnecessary incantations. Since I’m dealing with large source files it would also be nice if it was at least as fast as standard tools like sed. Sounds like a job for…]]></description><guid isPermaLink="false">7d2c4d88-ce3c-4794-8093-80d1dd15395c</guid><pubDate>Tue,  7 May 2019 00:00:00 +0000</pubDate><dc:creator>Mike Clarke</dc:creator></item><item><title>Unit testing Rust using Chrome</title><link>https://medium.com/visly/unit-testing-rust-using-chrome-b8b93572a91d</link><description><![CDATA[Stretch is a cross-platform Flexbox engine written in Rust. At Visly we are building a design tool for front-end engineers and we needed to ensure components looked the same across web, iOS, and Android without making use of WebViews. This meant replicating the web layout system on mobile.

In this post, I’ll cover the test setup we use in Stretch, how and why we need to generate unit dynamically. I’ll also cover an example of contributing another test to Stretch, and finally I’ll walk through how we also make use of this system for benchmarking.]]></description><guid isPermaLink="false">ffeaa8e5-849b-4924-9c9f-1ac6adc15a8e</guid><pubDate>Mon,  6 May 2019 16:25:41 +0000</pubDate><dc:creator>Emil Sjölander</dc:creator></item><item><title>Paw</title><link>https://blog.yoshuawuyts.com/paw/</link><description><![CDATA[Today we're announcing paw, a first step by the CLI Working Group to make command line applications more first class in Rust.

We introduce a procedural macro paw::main that allows passing arguments to fn main, and a new trait ParseArgs that must be implemented by the arguments to main. This allows passing not only the classic std::env::Args to main but also, for example, structopt instances.]]></description><guid isPermaLink="false">09931418-a93c-4b3f-ab7a-de486a0373fd</guid><pubDate>Mon,  6 May 2019 00:00:00 +0000</pubDate><dc:creator>Yoshua Wuyts</dc:creator></item><item><title>How and why await should be a method afterall</title><link>https://www.hardmo.de/article/2019-05-06-await-method-afterall.md</link><description><![CDATA[Explains in which way the planned `await` resembles a function call and provides reasoning how apparent contradictions in this model can be dispelled.]]></description><guid isPermaLink="false">10bffdde-a5d9-4066-971b-0c155ba8ce2d</guid><pubDate>Mon,  6 May 2019 00:00:00 +0000</pubDate><dc:creator>Andreas Molzer</dc:creator></item><item><title>A final proposal for await syntax</title><link>https://boats.gitlab.io/blog/post/await-decision/</link><description><![CDATA[This is an announcement regarding the resolution of the syntax for the await operator in Rust. This is one of the last major unresolved questions blocking the stabilization of the async/await feature, a feature which will enable many more people to write non-blocking network services in Rust. This post contains information about the timeline for the final decision, a proposal from the language team which is the most likely syntax to be adopted, and the justification for this decision.]]></description><guid isPermaLink="false">b7f70811-6fa2-4bab-b9e2-be4107ec221b</guid><pubDate>Mon,  6 May 2019 00:00:00 +0000</pubDate><dc:creator>withoutboats</dc:creator></item><item><title>phrase: A tool for learning significant phrase/term models, and efficiently labeling with them</title><link>https://github.com/soaxelbrooke/phrase</link><description><![CDATA[In general, using phrase falls into 3 steps: Counting n-grams, Exporting scored models, Significant term/phrase extraction/transform N-gram counting is done continuously, providing batches of documents as they come in. Model export reads all n-gram counts so far and calculates mutual information-based collocations - you can then deploy the models by shipping the binary and data/scores_* files to a server. Labeling (identifying all significant terms and phrases in text) or transforming (eager replace of longest found phrases in text) can be done either via the CLI or the web server. Providing labels for documents is not necessary for learning phrases, but does help, and allows for significant term labeling also.]]></description><guid isPermaLink="false">db1287e6-d66c-486a-812b-87ba2b37d423</guid><pubDate>Mon,  6 May 2019 00:00:00 +0000</pubDate><dc:creator>Stuart Axelbrooke</dc:creator></item><item><title>WebAssembly -Part II.A | Wasm with Rust</title><link>https://medium.com/tech-lah/webassembly-part-ii-a-wasm-with-rust-2356dbc6526e</link><description><![CDATA[This article is more of a how-to on getting up and running with a production-grade web project which incorporates Rust (or any other language for that matter) and WebAssembly into your web pages.]]></description><guid isPermaLink="false">e3fadb7b-df84-47a1-b6ca-47186b2b9418</guid><pubDate>Sun,  5 May 2019 13:27:01 +0000</pubDate><dc:creator>Francisco Vilches</dc:creator></item><item><title>Rust concurrency patterns: Communicate by sharing your sender(re-visited)</title><link>https://medium.com/@polyglot_factotum/rust-concurrency-patterns-communicate-by-sharing-your-sender-re-visited-9d42e6dfecfa</link><description><![CDATA[Since I last wrote about this topic, just only about a year ago select as used in the standard-library channel, has been deprecated. So it’s a good time to re-visit some of the concepts in that article, this time in the context of using crossbeam channels, and instead of using a made-up example, let’s dig into some real “production” code, as found in Servo. Let’s continue our exploration of Rust concurrency…]]></description><guid isPermaLink="false">5cea79c2-18d1-470d-b0a4-8647f0e2e5ca</guid><pubDate>Sun,  5 May 2019 06:18:08 +0000</pubDate><dc:creator>Gregory Terzian</dc:creator></item><item><title>Handmade Rust Part 4: Generating Vulkan bindings</title><link>http://stevenlr.com/posts/handmade-rust-4-vulkan-bindings/</link><description><![CDATA[Vulkan is a C API so we’ll need some kind of bindings to be able to use it in Rust. The API is defined in a XML file distributed by Khronos. This file describes the structs, enums, constants, and functions for each version of the API, and all published extensions. The functions can then be loaded from the Vulkan dynamic library and other functions from the API.

However using a raw C API isn’t easy in Rust because it requires using a lot of unsafe code. This is why we’ll also generate builders for all structs so we can for instance fill in pointer/size pairs using slices, but we’ll also generate methods that return Rust’s Results and take in Rust-friendly types like references instead of raw C types. Finally we’ll also generate loaders so we don’t have to manually load the function we need.<Paste>]]></description><guid isPermaLink="false">48eed32e-7fd2-4d16-9a34-97c9289cc72c</guid><pubDate>Sat,  4 May 2019 18:33:36 +0200</pubDate><dc:creator>Steven Le Rouzic</dc:creator></item><item><title>Rust caching on CircleCI using sccache</title><link>https://medium.com/@edouard.oger/rust-caching-on-circleci-using-sccache-c996344f0115</link><description><![CDATA[If you are working in a team that’s writing Rust code and your crates have a good amount of dependencies, you have probably noticed that the Rust compilation phase takes a non-trivial amount of time in comparison to actually running your tests: it is indeed one of the top recurring complains that gets reported to the language team.

In a CI environment, it gets worse as the testing container starts building pretty much from scratch and everything gets recompiled. One way to alleviate that problem is to cache Rust compiled intermediate objects]]></description><guid isPermaLink="false">350dfd1b-e2c5-4a2b-9b2d-015d933e7a78</guid><pubDate>Fri,  3 May 2019 21:42:28 +0000</pubDate><dc:creator>Edouard Oger</dc:creator></item><item><title>Building Simple APIs with Hyper and Usher</title><link>https://whitfin.io/building-simple-apis-with-hyper-and-usher/</link><description><![CDATA[When writing a web service, I often lean towards using tools that are as minimal as possible. One pretty obvious reason for this is the avoidance of dependencies you either don't want or don't need in your project. Whilst I'm not someone who goes out of their way to avoid dependencies, this is a pain point particularly in Rust because of the cost of building them repeatedly rather than shipping extra interpreted files around (especially if you use "pure" build environments).]]></description><guid isPermaLink="false">728cc414-7e29-41ce-86af-0181095c3ec6</guid><pubDate>Fri,  3 May 2019 16:56:26 +0000</pubDate><dc:creator>Isaac Whitfield</dc:creator></item><item><title>Learning Rust while solving Advent of Code puzzles (a post mortem)</title><link>https://andrzej.pragacz.pl/blog/2019/05/learning-rust-while-solving-advent-of-code/</link><description><![CDATA[I wanted to learn Rust for some time, but wasn't motivated enough. Finally, there was an opportunity: Every year in December, there is a coding challenge called Advent of Code. So I decided I will use edition 2018 as a motivator to learn new programming language.]]></description><guid isPermaLink="false">8914cc92-515c-4902-ae43-b247924a0191</guid><pubDate>Fri,  3 May 2019 00:00:00 +0000</pubDate><dc:creator>Andrzej Pragacz</dc:creator></item><item><title>Compile-time coprocessor codegen, with Rust macros</title><link>https://guiand.xyz/blog-posts/macro-assembly-codegen.html</link><description><![CDATA[Motivation: The Nintendo 3DS uses an ARM standard peripheral, the CoreLink DMA engine, for copying memory among DRAM and memory-mapped peripherals.

This DMA engine, unlike most other IO devices on the 3DS, actually has its own instruction set where the CPU merely uploads a stream of instructions for the peripheral to execute (other examples of this, on the 3DS, are the DSP audio processor and the PICA graphics chip).

I’d like to compile and run DMA instructions in Rust, in a hopefully ergonomic manner, without needing to use any dynamic memory allocation. This imposes a particular constraint that I need to know the number of instruction bytes at compile time so I can use an appropriately-sized array.]]></description><guid isPermaLink="false">433737c5-300e-4095-82c3-2ca05e51b029</guid><pubDate>Fri,  3 May 2019 00:00:00 +0000</pubDate><dc:creator>Gui Andrade</dc:creator></item><item><title>Rust parallelism for non-C/C++ developers</title><link>https://medium.com/nearprotocol/rust-parallelism-for-non-c-c-developers-ec23f48b7e56</link><description><![CDATA[Majority of the people coming to Rust have C/C++ background which allows them to easily transition into Rust parallelism since it is so similar. However, for many people coming from other languages, it is a challenge. In this post, we will walk through the standard Rust parallelism tools as well as the motivation behind them. This will require a hardware deep dive at the beginning, followed by an explanation of the low-level tools, like atomics, and ending with an explanation of high-level tools like Mutex. Finally, we will explain how Rust guarantees safety in multi-threaded applications.]]></description><guid isPermaLink="false">329ef1a1-d5e3-49df-87e6-b4f40038d4d8</guid><pubDate>Thu,  2 May 2019 21:32:53 +0000</pubDate><dc:creator>Maksym Zavershynskyi</dc:creator></item><item><title>Risp (Lisp (in (Rust)))</title><link>https://m.stopa.io/risp-lisp-in-rust-90a0dad5b116</link><description><![CDATA[Many years ago, Peter Norvig wrote a beautiful article about creating a lisp interpreter in Python. It’s the most fun tutorial I’ve seen, not just because it teaches you about my favorite language family (Lisp), but because it cuts through to the essence of interpreters, is fun to follow and quick to finish.

Recently, I had some time and wanted to learn Rust. It’s a beautiful systems language, and I’ve seen some great work come out from those who adopt it. I thought, what better way to learn Rust, than to create a lisp interpreter in it?

Hence, Risp — a lisp in rust — was born. In this essay you and I will follow along with Norvig’s Lispy, but instead of Python, we’ll do it in Rust 🙂.]]></description><guid isPermaLink="false">4ce6618d-d773-4260-85c6-639aaf6ec7fc</guid><pubDate>Thu,  2 May 2019 17:44:37 +0000</pubDate><dc:creator>Stepan Parunashvili</dc:creator></item><item><title>How XV uses Panics</title><link>https://medium.com/@chrisvest/how-xv-uses-panics-ba22bd6152a5</link><description><![CDATA[XV is a terminal hex viewer that I am working on. It is the first “real” Rust project that I am working on, coming from a Java background.

Java has exceptions. Both checked exceptions, identified by having the Exception class as a parent class, and unchecked exceptions, which have RuntimeException as a parent class.

Rust does not have exceptions. Rust has panics, which, depending on build-time configurations, are either catch-able when they unwind the stack, or only produce a backtrace, or just immediately aborts the process. This is controlled by the “panic” setting in the “profile” sections of your Cargo.toml file.]]></description><guid isPermaLink="false">0bc705c5-726c-4967-84cc-264f7a6338df</guid><pubDate>Thu,  2 May 2019 16:26:24 +0000</pubDate><dc:creator>Chris Vest</dc:creator></item><item><title>✩ The RustBridge Roadmap for 2019</title><link>https://p.veb.cool/phame/live/1/post/1/the_rustbridge_roadmap_for_2019/</link><description><![CDATA[This is less a specific roadmap and more of a rough braindump of where I think the project currently stands and where I would personally like it to head in 2019 and beyond. With that, let's get started: The main thing I would like to focus on this year is clearing community debt. I don't actually know what you would call this, but it's sort of like technical debt, just manifested within communities.]]></description><guid isPermaLink="false">de6a9110-16fb-47df-a80d-f63af3033589</guid><pubDate>Thu,  2 May 2019 10:19:00 +0000</pubDate><dc:creator>olivia</dc:creator></item><item><title>gptman: A CLI tool and library for managing GUID partition tables</title><link>https://crates.io/crates/gptman</link><description><![CDATA[A CLI tool for Linux that allows you to copy a partition from one disk to another and more. A library that allows managing GUID partition tables. Features include: Read/Write GPT from 512 and 4096 bytes sector size disks, Create a new GPT on a disk, Insert/delete a partition in the table, Align partitions automatically, Resize a partition, Copy/clone a partition from one disk and insert it to another, Change partition type, Fix partitions order, Change disk GUID, Change partition name, Change partition GUID, Toggle legacy BIOS bootable, Toggle no block IO protocol, Toggle required partition flag, Toggle attributes, Customize columns to print, Print raw data of disklabel, Swap partition indexes, Randomize disk's GUID and all partition's GUID, Copy/clone all partitions from one disk and insert it to another.]]></description><guid isPermaLink="false">4b134136-1041-4976-ba52-7e64e767ea89</guid><pubDate>Thu,  2 May 2019 01:33:00 +0000</pubDate><dc:creator>Cecile Tonglet</dc:creator></item><item><title>Explained: Futures in Rust for Web Development</title><link>https://dev.to/gruberb/explained-rust-futures-for-web-development-a10</link><description><![CDATA[If you are coming from NodeJS, Futures in Rust don't make much sense. In NodeJS, everything happens asynchronously. Therefore for you to be able to say "Hey, I really need to wait for the answer for this GET HTTP call", you are putting.then() on a Promise, so you can make sure you just execute the code inside the .then() when the HTTP call is finished.

In Rust, everything is blocking and synchronous by default, so you might ask yourself: "Why bothering with the complexity, that's exactly what I wanted in the first place!"]]></description><guid isPermaLink="false">9152c867-9b24-49d0-ac2c-d85775162eb4</guid><pubDate>Thu,  2 May 2019 00:00:00 +0000</pubDate><dc:creator>Bastian Gruber</dc:creator></item><item><title>A Guide to Rust Graphics Libraries in 2019</title><link>https://wiki.alopex.li/AGuideToRustGraphicsLibraries2019</link><description><![CDATA[People on the gamedev channel of the Unofficial Rust Discord were talking about graphics API’s and what goes where and what does what, people were contradicting and correcting each other, the rain of acronyms was falling hard and fast, and it was all getting a bit muddled. So I’m here to attempt to set the record straight. This is intended to provide context for people who want to get into writing graphics stuff (video games, animations, cool visualizations, etc) in Rust and don’t know where to start.]]></description><guid isPermaLink="false">55cb403b-5cda-4f80-8708-f55a3dc66e95</guid><pubDate>Thu,  2 May 2019 00:00:00 +0000</pubDate><dc:creator>Simon Heath</dc:creator></item><item><title>Cargo in 2019</title><link>https://www.ncameron.org/blog/cargo-in-2019/</link><description><![CDATA[I recently published a post detailing a vision for the next few years (hah! Not so recently now, this took a lot longer than expected). Here I'll get into more detail about 2019.]]></description><guid isPermaLink="false">ae1f3c27-6a45-4b49-ac3c-e081adfe52c9</guid><pubDate>Wed,  1 May 2019 22:37:35 +0000</pubDate><dc:creator>Nick Cameron</dc:creator></item><item><title>Extending Python with Rust</title><link>https://medium.com/@p_chhetri/extending-python-with-rust-84e9299d34c1</link><description><![CDATA[Python is a great programming language but sometimes it can be a bit of slowcoach when it comes to performing certain tasks. That’s why developers have been building C/C++ extensions and integrating them with Python to speed up the performance. However, writing these extensions is a bit difficult because these low-level languages are not type-safe, so doesn’t guarantee a defined behavior. This tends to introduce bugs with respect to memory management. Rust ensures memory safety and hence can easily prevent these kinds of bugs.]]></description><guid isPermaLink="false">f759c500-da13-4765-81f1-dd59918b09d1</guid><pubDate>Wed,  1 May 2019 17:37:44 +0000</pubDate><dc:creator>Pradeep Chhetri</dc:creator></item><item><title>World&apos;s First Private Cargo Registry</title><link>https://blog.cloudsmith.io/2019/05/01/worlds-first-private-cargo-registry/</link><description><![CDATA[If you're interested in the possibilities that hosting your own private or internal crates brings, then this is incredibly good news for you: Cloudsmith are proud to provide the World's first commercially available public and private Cargo registry hosting, with ultra-fast and secure delivery of your Rust packages, alongside all of the usual Enterprise-grade features that we provide.]]></description><guid isPermaLink="false">89a6ce72-79b9-477d-a5e5-bd1e6407c3f5</guid><pubDate>Wed,  1 May 2019 12:06:47 +0000</pubDate><dc:creator>Patrick Carey</dc:creator></item><item><title>Hawk: Image Recognition Application using Rust and AWS Services</title><link>https://blog.knoldus.com/hawk-image-recognition-project-using-rust-and-aws-services/</link><description><![CDATA[Rust is one of the newest kid on the block in the modern programming languages. We tried to take advantage of its great features by using it in an Image Recognition blueprint project. This project can be traded with any existing security system deployed at any organization. Hawk uses AWS services integrated with Rust.]]></description><guid isPermaLink="false">dd64813c-9380-4cd5-b689-ae31cd1c0405</guid><pubDate>Wed,  1 May 2019 11:14:44 +0000</pubDate><dc:creator>muditchhabra6125</dc:creator></item><item><title>Rust: How to build a Docker image with private Cargo dependencies</title><link>https://medium.com/@c_ameron/rust-how-to-build-a-docker-image-with-private-cargo-dependencies-ab91c25c4301</link><description><![CDATA[In this article, I’m going to show you how to fetch private Cargo dependencies and source them when building a Docker image. This solves a key issue with Docker of not copying over SSH keys when building an image.]]></description><guid isPermaLink="false">bd254733-37d6-4ef1-959d-67ca2ccfc2ca</guid><pubDate>Wed,  1 May 2019 04:08:50 +0000</pubDate><dc:creator>Cameron</dc:creator></item><item><title>Using Wasmer for Plugins Part 4</title><link>https://wiredforge.com/blog/wasmer-plugin-pt-4/index.html</link><description><![CDATA[In the last three posts of this series we covered all of the things we would need to use Wasmer as the base for a plugin system. In part one we went over the basics of passing simple data in and out of a web assembly module, in part two we dug deeper into how you might do the same with more complicated data. In the last part we eased the experience of plugin developers by encapsulating all of our work into a library that exports a procedural macro. In this post we are going to explore what it would take to extend an existing plugin system to allow for wasm plugins.]]></description><guid isPermaLink="false">16c5eef8-5844-4408-8ab5-42319757ecef</guid><pubDate>Wed,  1 May 2019 00:00:00 +0000</pubDate><dc:creator>Robert Masen</dc:creator></item><item><title>Rust for Frontend Developers: Modules</title><link>https://www.kennethlarsen.org/rust-for-frontend-developers-modules/</link><description><![CDATA[Not that long ago I decided to start learning Rust. While it has a lot of useful resources online and a very friendly community there's still things that are weird to me. That's because Rust is a very different mental model than the frontend mental model I'm used to.

That means that things that are obvious to a lot of people are not obvious to me. So I'll try to document some of these things from the perspective of a frontend developer. This time on using modules.]]></description><guid isPermaLink="false">7ee0306d-50cc-4b2a-8573-ff0c59c02b3f</guid><pubDate>Tue, 30 Apr 2019 09:57:24 +0000</pubDate><dc:creator>Kenneth Larsen</dc:creator></item><item><title>RustPlayground: Quickly test Rust code on macOS.</title><link>https://github.com/cmyr/RustPlayground</link><description><![CDATA[Rust Playground for MacOS is a standalone native mac application that allows quickly editing and testing rust snippets.]]></description><guid isPermaLink="false">10ce619a-7183-49cf-91c8-99e0f085a272</guid><pubDate>Tue, 30 Apr 2019 03:59:00 +0000</pubDate><dc:creator>colin rofls</dc:creator></item><item><title>Making Sandspiel</title><link>https://maxbittker.com/making-sandspiel</link><description><![CDATA[Sandspiel is a falling sand game I built in late 2018. I really enjoyed writing this game, and wanted to put into writing some of my goals, design decisions, and learnings from that process.]]></description><guid isPermaLink="false">63ae6a45-4e07-49c9-914d-b9be320cf7a9</guid><pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Max Bittker</dc:creator></item><item><title>Stacked Borrows 2</title><link>https://www.ralfj.de/blog/2019/04/30/stacked-borrows-2.html</link><description><![CDATA[Recently, I have significantly updated Stacked Borrows in order to fix some issues with the handling of shared references that were uncovered in the previous version. In this post, I will describe what the new version looks like and how it differs from Stacked Borrows 1. I assume some familiarity with the prior version and will not explain everything from scratch.]]></description><guid isPermaLink="false">f2a55dcd-b163-42ac-8660-311e1cc384d0</guid><pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Ralf Jung</dc:creator></item><item><title>My Key Learnings after 30,000 LOC in Rust</title><link>https://medium.com/@jondot/my-key-learnings-after-30-000-loc-in-rust-a553e6403c19</link><description><![CDATA[For me, Rust takes a stroll over the memory lane above and picks and drives home the best experiences from all those languages — which is a]]></description><guid isPermaLink="false">094e167c-f023-449e-9976-247d314fd269</guid><pubDate>Mon, 29 Apr 2019 17:57:26 +0000</pubDate><dc:creator>Dotan Nahum</dc:creator></item><item><title>Rolling your own Router with Smithy v0.0.3</title><link>https://medium.com/@robert.balicki_2494/rolling-your-own-router-with-smithy-v0-0-3-2de17cdbb49</link><description><![CDATA[Build a WebAssembly application with a hash router using Smithy.]]></description><guid isPermaLink="false">4cc7ac88-4ef9-40fd-b235-bee8151e059d</guid><pubDate>Mon, 29 Apr 2019 15:25:25 +0000</pubDate><dc:creator>Robert Balicki</dc:creator></item><item><title>A close touch with Rust community</title><link>https://medium.com/@Aimeedeer/a-close-touch-with-rust-community-4a8507b756d9</link><description><![CDATA[About RustCon Asia 2019：There was definitely a little bit of everything for everyone attended. It was heartwarming to see people enjoying their experience from talks and at the same time meeting new and old friends. The portion of the attendees was just beginning with Rust benefited from talks such as Olivia’s RustBridge for beginners, Nick’s thinking in Rust and Alex’s How to learn Rust efficiently.]]></description><guid isPermaLink="false">00aea687-4bba-48e5-8568-000ef44a419e</guid><pubDate>Mon, 29 Apr 2019 11:49:07 +0000</pubDate><dc:creator>Aimee Z</dc:creator></item><item><title>Kubernetes operators in Rust</title><link>https://clux.github.io/probes/post/2019-04-29-rust-on-kubernetes/</link><description><![CDATA[Writing light weight cloud services without Go.]]></description><guid isPermaLink="false">b4cd814f-2f84-4e4d-b3a1-bba98d6a24f2</guid><pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate><dc:creator>clux</dc:creator></item><item><title>DataFusion 0.13.0 Benchmarks</title><link>https://andygrove.io/2019/04/datafusion-0.13.0-benchmarks/</link><description><![CDATA[Over the past couple weeks I’ve been working on a couple different efforts around parallel query execution with DataFusion: 1. Benchmarking parallel query execution by manually creating one execution context per parquet partition and running on a thread, just to get an idea of expected performance, and comparing results to Apache Spark (running in local mode). 2. Creating a PoC of actual parallel query execution in the Arrow/DataFusion repository. This post is mostly about the first effort.]]></description><guid isPermaLink="false">e25d035f-9121-4cd6-b0ac-f98db53fb3e5</guid><pubDate>Sun, 28 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Andy Grove</dc:creator></item><item><title>Writing an OS in Rust: Testing</title><link>https://os.phil-opp.com/testing/</link><description><![CDATA[This post explores unit and integration testing in no_std executables. We will use Rust's support for custom test frameworks to execute test functions inside our kernel. To report the results out of QEMU, we will use different features of QEMU and the bootimage tool.]]></description><guid isPermaLink="false">2766c75e-b1e0-4ae9-9cc2-8c3a8476bb57</guid><pubDate>Sat, 27 Apr 2019 23:03:00 +0000</pubDate><dc:creator>Philipp Oppermann</dc:creator></item><item><title>A Practical Analysis of Rust&apos;s Concurrency Story</title><link>https://arxiv.org/abs/1904.12210</link><description><![CDATA[Rust is a recent programming language from Mozilla that attempts to solve these intertwined issues by detecting data-races at compile time. Rust's type system encodes a data-structure's ability to be shared between threads in the type system, which in turn allows the compiler to reject programs where threads directly mutate shared state without locks or other protection mechanisms. In this work, we examine how this aspect of Rust's type system impacts the development and refinement of a concurrent data structure, as well as its ability to adapt to situations where correctness is guaranteed by lower-level invariants (e.g., in lock-free algorithms) that are not directly expressible in the type system itself. We detail the implementation of a concurrent lock-free hashmap in order to describe these traits of the Rust language.]]></description><guid isPermaLink="false">d9831a1a-f79f-4c0b-af9e-b4c5b65cd74f</guid><pubDate>Sat, 27 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Aditya Saligrama, Andrew Shen, Jon Gjengset</dc:creator></item><item><title>Creating cross-platform Rust terminal apps</title><link>http://www.jonathanturner.org/2019/04/porting-the-pikachu.html</link><description><![CDATA[I’ve been wanting to play around with the cool spinning Pikachu demo everyone was talking about. Sadly, it used termion to do its magic, which meant that unfortunately it wouldn’t work for me. Termion has been a boon for Rust, with lots of folks using it to create terminal applications. Unfortunately, as a Windows user, I know there’s a good chance that if the crate depends on termion that’s the end of the line for me, as termion apps just don’t work in Windows. Surely, I thought, there must be a better way, but I never managed to find one. Enter crossterm.]]></description><guid isPermaLink="false">28c59573-37da-46b6-92c0-f6fbb4a5e613</guid><pubDate>Sat, 27 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Jonathan Turner</dc:creator></item><item><title>Pre luminance-1.0.0 and random thoughts</title><link>https://phaazon.net/blog/pre-luminance-n-random-thoughts</link><description><![CDATA[Hello people. It’s been weeks I have started to work on luminance-1.0.0. For a brief recap, luminance is a graphics crate that I originally created in Haskell, when I ripped it off from a demoscene engine called quaazar in order to make and maintain tiner packages. The Rust port was my first Rust project and it became quickly the default language I would develop graphics applications in.]]></description><guid isPermaLink="false">8ff4000f-f8c6-41b9-a91b-c0bd9d23ca69</guid><pubDate>Fri, 26 Apr 2019 22:30:00 +0000</pubDate><dc:creator>Dimitri Sabadie</dc:creator></item><item><title>Refactoring Varisat 5: Incremental Solving and Proofs</title><link>https://jix.one/refactoring-varisat-5-incremental-solving-and-proofs/</link><description><![CDATA[This is the fifth and final post in my series about refactoring varisat. In the last post varisat gained the heuristics needed to solve some non-trivial instances. In this post we’ll add incremental solving and proof generation. This brings varisat to feature parity with the old version.]]></description><guid isPermaLink="false">0d66bab5-b38a-4f8a-8c6f-2c7c2cd41fab</guid><pubDate>Fri, 26 Apr 2019 16:12:54 +0200</pubDate><dc:creator>Jannis Harder</dc:creator></item><item><title>Hello world in morse code</title><link>https://idursun.com/posts/hello_world_in_morse_code/</link><description><![CDATA[I do love working with Rust. I deliberately create excuses to work on mini projects that ultimately involves coding in Rust. Recently, I have bought a blue pill which is a little board that costs about 1$. Although, I have zero experience in embedded programming I always wanted to give it a try with Rust which, in my case, boils down to blinking a LED on the board. I know there are excellent materials about embedded programming with Rust out there, but things do change very rapidly.]]></description><guid isPermaLink="false">e2e96d6e-78ce-43fe-a9b7-95fce36b169c</guid><pubDate>Thu, 25 Apr 2019 19:29:42 +0100</pubDate><dc:creator>Ibrahim Dursun</dc:creator></item><item><title>Modules in Rust Programming Language</title><link>https://dev.to/saiumesh/modules-in-rust-programming-language-495m</link><description><![CDATA[Modules are one of the better ways to organize your code and reuse it wherever it is necessary. Rust module system is completely different from what I've used in Languages like JavaScript, GoLang and Python. When I started to learn this pattern, I didn't really like it but, after using them for sometime, now I really like the way it works.]]></description><guid isPermaLink="false">95e18b0c-0a6c-42dd-80c8-cb5dbbe906e3</guid><pubDate>Thu, 25 Apr 2019 04:24:00 +0000</pubDate><dc:creator>sai umesh</dc:creator></item><item><title>Implementing tile encoding in rav1e</title><link>https://blog.rom1v.com/2019/04/implementing-tile-encoding-in-rav1e/</link><description><![CDATA[During the last few months at Videolabs, I added support for tile encoding in rav1e (a Rust AV1 Encoder). AV1 is an open and royalty-free video coding format, concurrent with HEVC (H.265). Rav1e is an encoder written in Rust, developped by Mozilla/Xiph. As such, it takes an input video and encodes it to produce a valid AV1 bitstream. Tile encoding consists in splitting video frames into tiles that can be encoded and decoded independently in parallel (to use several CPUs), at the cost of a small loss in compression efficiency. This speeds up encoding and increases decoding frame rate.]]></description><guid isPermaLink="false">47f0e720-8b24-41d0-8f3a-97683b5f03b3</guid><pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Romain Vimont</dc:creator></item><item><title>Leveraging Travis-CI for Continuous Deployment to Publish Compiled Binaries to GitHub</title><link>https://dev.to/hawkinjs/leveraging-travis-ci-for-continuous-deployment-to-publish-compiled-binaries-to-github-2k06</link><description><![CDATA[Recently I wrote a binary called "Watchdog" in Rust on my Mac that I wanted to take with me to Linux systems I frequent, but I couldn't bring a Rust compiler to these systems for unrelated reasons. This meant I had to cross-compile my application and ship just the binary.]]></description><guid isPermaLink="false">ef4b2e3e-406a-4553-9c49-3676c83eae96</guid><pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Josh Hawkins</dc:creator></item><item><title>Announcing Rust 1.34.1</title><link>https://blog.rust-lang.org/2019/04/25/Rust-1.34.1.html</link><description><![CDATA[This patch release fixes two false positives and a panic when checking macros in Clippy. Clippy is a tool which provides a collection of lints to catch common mistakes and improve your Rust code.]]></description><guid isPermaLink="false">ce78473f-6f58-428d-ba3e-cbbbfc778345</guid><pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate><dc:creator>The Rust Release Team</dc:creator></item><item><title>The XV Hex Viewer</title><link>https://chrisvest.github.io/xv/</link><description><![CDATA[XV is a terminal hex viewer with a text user interface, written in 100% safe Rust. Licensed under the Apache-2.0 software license. Get it from crates.io by running cargo install xv in your terminal.]]></description><guid isPermaLink="false">a3598959-4fde-42aa-9fcf-4310741caa5e</guid><pubDate>Wed, 24 Apr 2019 10:34:15 +0200</pubDate><dc:creator>Chris Vest</dc:creator></item><item><title>How Rust Solved Dependency Hell</title><link>https://stephencoakley.com/2019/04/24/how-rust-solved-dependency-hell</link><description><![CDATA[Every once in a while I'll be involved in a conversation about dependency management and versions, often at work, in which the subject of “dependency hell” will come up. If you're not familiar with the term, then I encourage you to look it up. A brief summary might be: "The frustration that comes from dealing with application dependency versions and dependency conflicts". With that in mind, let's get a little technical about dependency resolution.]]></description><guid isPermaLink="false">91b5c36e-a3f8-4cbd-ad0e-cd796ee6ea24</guid><pubDate>Wed, 24 Apr 2019 05:00:00 +0000</pubDate><dc:creator>Stephen Coakley</dc:creator></item><item><title>Monitoring AWS Batch Jobs with Rust</title><link>https://medium.com/rusted/monitoring-aws-batch-jobs-with-rust-8f1ef6115871</link><description><![CDATA[At Pixability my team and I recently created a pretty neat AWS Batch driven system. AWS Batch can can handle almost any task seamlessly and it’s pretty easy to manage with the console. This is great already, but I was curious to see what it would look like to monitor Batch with Rust. Watchrs was inspired by this question and currently provides basic functionality to do so. In this post we will be briefly going over how the main components of watchrs were built and how to use them all together.]]></description><guid isPermaLink="false">5af81963-5163-49f3-bd47-27b91d6dbd34</guid><pubDate>Wed, 24 Apr 2019 01:05:46 +0000</pubDate><dc:creator>Michael Habib</dc:creator></item><item><title>Simple Chat using Sonr-extras</title><link>https://hagsteel.com/posts/simple-chat/</link><description><![CDATA[Using sonr-extras to build a very basic chat using the provided connection handling objects.]]></description><guid isPermaLink="false">c9e2beae-20d5-4c7a-b8de-01f52b18aec1</guid><pubDate>Wed, 24 Apr 2019 00:00:00 +0200</pubDate><dc:creator>Jonas</dc:creator></item><item><title>Reviewing Sled: Part III</title><link>https://ayende.com/blog/187073-C/reviewing-sled-part-iii</link><description><![CDATA[Unusually for me, I had a bit of a pause in reviewing Sled. As a reminder, Sled is an embedded database engine written in Rust. I last stopped looking at the buffer management, but I still don’t really have a good grasp of what is going on. The next file is the iterator. It looks like it translates between segments and messages in these segments.]]></description><guid isPermaLink="false">767bc80b-e61f-4e0f-8cbb-82655b7aa767</guid><pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Ayende Rahien</dc:creator></item><item><title>Design Space Map</title><link>https://llogiq.github.io/2019/04/23/map.html</link><description><![CDATA[The Rust community currently appears to reconfigure its design process. There is some discussion around RFCs. A topic that comes up is shared summaries. I think this is a great idea and want to share my 2¢ here.]]></description><guid isPermaLink="false">a436e872-4c6f-4b9a-a311-eb7658d23cb2</guid><pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>Using DMA to transfer data with Embedded Rust</title><link>https://flowdsp.io/blog/stm32f3-02-dac-dma/</link><description><![CDATA[In this article you will learn how to use the Direct Memory Access (DMA) controller to transfer data from memory to the built-in Digital to Analog Converter (DAC) on the STM32F3DISCOVERY board.]]></description><guid isPermaLink="false">fc88b6c6-cf80-4546-b03a-94bcdebf6232</guid><pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Antoine van Gelder</dc:creator></item><item><title>Rust&apos;s 2019 roadmap</title><link>https://blog.rust-lang.org/2019/04/23/roadmap.html</link><description><![CDATA[Each year the Rust community comes together to set out a roadmap. This year, in addition to the survey, we put out a call for blog posts in December, which resulted in 73 blog posts written over the span of a few weeks. The end result is the recently-merged 2019 roadmap RFC. To get all of the details, please give it a read, but this post lays out some of the highlights.]]></description><guid isPermaLink="false">c66e7e63-ea76-4d35-a15b-0bf56a905b07</guid><pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate><dc:creator>The Rust Core Team</dc:creator></item><item><title>What I learned from my failed attempt of writing baremetal android in Rust</title><link>https://onatm.dev/2019/04/22/what-i-learned-from-my-failed-attempt-of-writing-baremetal-android-in-rust/</link><description><![CDATA[Every year I define a super ambitious goal for my learning process to keep myself motivated on the way. This year I defined my goal as writing a bootable kernel image for my old HTC One X android smartphone. I knew it was going to be hard but I never thought I’d fail in the end. It was clearly the Dunning–Kruger effect that made me think that I can achieve what I want to do with my limited knowledge/experience on the subject.]]></description><guid isPermaLink="false">3e1e598a-b186-40d1-b03c-bae1444a6ee7</guid><pubDate>Mon, 22 Apr 2019 12:35:34 +0000</pubDate><dc:creator>Onat Mercan</dc:creator></item><item><title>AiC: Collaborative summary documents</title><link>http://smallcultfollowing.com/babysteps/blog/2019/04/22/aic-collaborative-summary-documents/</link><description><![CDATA[One of the challenges I see with how we often do design is that this “solution space” is actually quite implicit. We are exploring it through comments, but each comment is only tracing out one path through the terrain. I wanted to see if we could try to represent the solution space explicitly. This post is a kind of “experience report” on one such experiment, what I am calling a collaborative summary document (in contrast to the more standard summary comment that we often do).]]></description><guid isPermaLink="false">e335233d-84ab-4f50-9cc0-5e401a6b5363</guid><pubDate>Mon, 22 Apr 2019 00:00:00 -0400</pubDate><dc:creator>Niko Matsakis</dc:creator></item><item><title>6 useful Rust macros that you might not have seen before</title><link>https://medium.com/@benmcdonald_11671/6-useful-rust-macros-that-you-might-not-have-seen-before-59d1386f7bc5</link><description><![CDATA[Below are 6 Rust macros that are worth taking a look at to improve your project. Rust macros are a great feature that can reduce code boilerplate and be a time saver for programmers. They also offer flexibility for developers to use metaprogramming to add new features to the language and package them in a way that is easy to integrate into code. They are one of the more powerful features of the language and this led me to search github and cargo to see what was out there. Below are some interest macros that are not as well known.]]></description><guid isPermaLink="false">b2657146-974b-41b9-ba31-8aae62c25f7d</guid><pubDate>Mon, 22 Apr 2019 02:00:39 +0000</pubDate><dc:creator>Ben McDonald</dc:creator></item><item><title>splines-1.0.0 and first release candidate</title><link>https://phaazon.net/blog/splines-1.0.0-rc.1</link><description><![CDATA[today, I’m going to talk about the splines crate. And more specifically, the splines-1.0.0-rc.1 release candidate I uploaded today on crates.io. Maybe you’re wondering what a spline is, in the first place. A spline is a mathematic curve that is defined by several polynomials. You can picture them mentally by several small and simple curves combined to each others, giving the curve an interesting shape and properties. Now why we want splines is easy to understand: imagine a curve, something smooth and a bit complex (maybe even with loops). Now, imagine you want to make an object move along that curve. How do you represent that curve and how to you “make something advance along it?”]]></description><guid isPermaLink="false">50725324-0ca7-4137-8e95-9d5e023881f8</guid><pubDate>Mon, 22 Apr 2019 01:10:00 +0000</pubDate><dc:creator>Dimitri Sabadie</dc:creator></item><item><title>Using Wasmer for Plugins Part 3</title><link>https://wiredforge.com/blog/wasmer-plugin-pt-3/index.html</link><description><![CDATA[In the last two posts of this series we covered all of the things we would need to use Wasmer as the base for a plugin system. In part one we went over the basics of passing simple data in and out of a web assembly module, in part two we dug deeper into how you might do the same with more complicated data. In this part we are going to explore how we might ease the experience for people developing plugins for our application.]]></description><guid isPermaLink="false">bd3e3e37-90f2-4941-ba7c-00fdae65bdac</guid><pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Robert Masen</dc:creator></item><item><title>Elements of Rust: style and philosophy</title><link>https://github.com/ferrous-systems/elements-of-rust</link><description><![CDATA[A collection of software engineering techniques for effectively expressing intent with Rust.]]></description><guid isPermaLink="false">bda9c409-db67-4283-aadc-ffb54c3ad00d</guid><pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Ferrous Systems </dc:creator></item><item><title>Generic returns in Rust</title><link>https://blog.jcoglan.com/2019/04/22/generic-returns-in-rust/</link><description><![CDATA[After casting around for a new platform to learn recently, I’ve decided to dive into Rust. Being mostly familiar with untyped languages like Ruby and JavaScript, it’s interesting to learn a statically typed language and see how it changes how one writes programs. There’s a common misconception amongst dynamic typing fans that static typing means you write the same programs, they’re just more verbose and come with more restrictions. And while there is certainly a cost to only being allowed to write type-safe programs, a good type system actually lets you write programs you cannot write in dynamic languages. In Rust, generic return values are a good example of this.]]></description><guid isPermaLink="false">036c9563-3d69-4cf8-a59a-718976fded92</guid><pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate><dc:creator>James Coglan</dc:creator></item><item><title>Plume: Federated blogging application</title><link>https://github.com/Plume-org/Plume</link><description><![CDATA[Plume is a federated blogging engine, based on ActivityPub. It uses the Rocket framework, and Diesel to interact with the database.]]></description><guid isPermaLink="false">3d938fcd-0108-499a-9929-841d1999db4b</guid><pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Plume Developers</dc:creator></item><item><title>LeftWM - A tiling window manager for Adventurers</title><link>http://leftwm.org/</link><description><![CDATA[A tiling window manager written in Rust for stability and performance. The core of left is designed to do one thing and one thing well. Be a window manager. Because you probably want more than just a black screen LeftWM is built around the concept of theming. With themes you can choose between different bar / compositor / background / colors, whatever makes you happy. LeftWM has been built from the very beginning to support multiple screens and has been built around ultrawide monitors. You will see this with the default key bindings]]></description><guid isPermaLink="false">49f9c596-e61c-402d-a2de-21c8350ccac6</guid><pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate><dc:creator>lex148</dc:creator></item><item><title>Things I Enjoy in Rust: Error Handling</title><link>https://blog.jonstodle.com/things-i-enjoy-in-rust-error-handling/</link><description><![CDATA[I’ve already talked about how I like how enums are used in Rust. They make it easy to express multiple states and the state’s related data. One place this is excellently utilized is error handling.]]></description><guid isPermaLink="false">8fbc326e-e356-480c-8708-c6b4d8d66719</guid><pubDate>Sun, 21 Apr 2019 12:00:00 +0200</pubDate><dc:creator>Jon Grythe Stødle</dc:creator></item><item><title>Rust, dudect and constant-time crypto in debug mode</title><link>https://brycx.github.io/2019/04/21/rust-dudect-constant-time-crypto.html</link><description><![CDATA[The following are observations from when I started testing my own pure-Rust crypto library, including its dependencies, for constant-time execution. Starting with a short introduction to dudect and how it can be used to test code for timing-based side-channel vulnerabilities. Then discussing the process of discovering a short-circuit that resulted in variable-time execution, in dalek-cryptography’s subtle library and how this seems to relate to Rust codegen option opt-level.]]></description><guid isPermaLink="false">4450a6c3-3baa-4485-853b-910969aa0119</guid><pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate><dc:creator>brycx</dc:creator></item><item><title>emacs-module-rs provides high-level Rust binding and tools to write Emacs&apos;s dynamic modules.</title><link>https://ubolonton.github.io/emacs-module-rs/0.8.0/</link><description><![CDATA[This provides a high-level binding to emacs-module, Emacs's support for dynamic modules.]]></description><guid isPermaLink="false">675a435e-aadf-4ded-b3d1-50d6a8afaced</guid><pubDate>Sat, 20 Apr 2019 11:11:45 +0000</pubDate><dc:creator>Tuấn-Anh Nguyễn</dc:creator></item><item><title>Using Wasmer for Plugins Part 2</title><link>https://wiredforge.com/blog/wasmer-plugin-pt-2</link><description><![CDATA[In this post we are going to cover how we could pass more complicated data from the wasm module back to the runner.]]></description><guid isPermaLink="false">899be7d9-392f-4467-aa75-85b2d3e913f7</guid><pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Robert Masen</dc:creator></item><item><title>12 Killer Rust Libraries You Should Try</title><link>https://medium.com/@jondot/12-killer-rust-libraries-you-should-know-c60bab07624f</link><description><![CDATA[I’ve just crossed a 20K LOC in one of my bigger Rust projects, and thought about pausing for a moment and sharing some great Rust libraries that I’ve used.]]></description><guid isPermaLink="false">b8b79bb1-c176-43e8-bad9-943285e361c6</guid><pubDate>Fri, 19 Apr 2019 15:21:32 +0000</pubDate><dc:creator>Dotan Nahum</dc:creator></item><item><title>Lessons moving from iOS delegates to Rust async</title><link>https://thomask.sdf.org/blog/2019/04/19/lessons-moving-from-ios-delegates-to-rust-async.html</link><description><![CDATA[The majority of my async programming experience is on iOS and let me tell you, life is good. You can easily dispatch work to background threads. You can bring work back to the main thread. You can mark your classes as delegates and when you need to handle some event the OS will use a magic pre-existing thread pool to invoke your method and you can do whatever you like. It works perfectly almost all the time, except for when it doesn’t because of race conditions or it crashes due to concurrency. Life is good.

Rust is less tolerant about the crashing part. While I agree that crashing is bad in principle, avoiding it has significant ramifications for how you can write async code at all. Recently I’ve been finding out what the differences are. Obviously this means I’m more of a noob than an expert, but I’m currently in a good position to point out what the confusing parts are and what the Rust solutions seem to be. (But I’m a noob so take it with a grain of salt.)]]></description><guid isPermaLink="false">0cc3f8b6-7cd9-423f-96f2-569b660e2bf3</guid><pubDate>Fri, 19 Apr 2019 19:30:00 +1000</pubDate><dc:creator>Thomas Karpiniec</dc:creator></item><item><title>AiC: Adventures in consensus</title><link>http://smallcultfollowing.com/babysteps/blog/2019/04/19/aic-adventures-in-consensus/</link><description><![CDATA[In the talk I gave at Rust LATAM, I said that the Rust project has always emphasized finding the best solution, rather than winning the argument. I think this is one of our deepest values. It’s also one of the hardest for us to uphold.

Let’s face it – when you’re having a conversation, it’s easy to get attached to specific proposals. It’s easy to have those proposals change from “Option A” vs “Option B” to “my option” and “their option”. Once this happens, it can be very hard to let them “win” – even if you know that both options are quite reasonable.

This is a problem I’ve been thinking a lot about lately. So I wanted to start an irregular series of blog posts entitled “Adventures in consensus”, or AiC for short. These posts are my way of exploring the topic, and hopefully getting some feedback from all of you while I’m at it.

This first post dives into what a phrase like “finding the best solution” even means (is there a best?) as well as the mechanics of how one might go about deciding if you really have the “best” solution. Along the way, we’ll see a few places where I think our current process could do better.]]></description><guid isPermaLink="false">00b32f85-009b-464f-8e31-c9930a0b67f3</guid><pubDate>Fri, 19 Apr 2019 00:00:00 -0400</pubDate><dc:creator>Niko Matsakis</dc:creator></item><item><title>Using Wasmer for Plugins Part 1</title><link>https://wiredforge.com/blog/wasmer-plugin-pt-1</link><description><![CDATA[A few months ago, the Wasmer team announced a Web Assembly (aka wasm) interpreter that could be embedded into rust programs. This is particularly exciting for anyone looking to add plugins to their project and since Rust provides a way to directly compile programs to wasm, it seems like a perfect option. In this series of blog posts we are going to investigate what building a plugin system using wasmer and rust would take.]]></description><guid isPermaLink="false">d11c58e5-419a-4c3e-923d-b2bac810d445</guid><pubDate>Fri, 19 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Robert Masen</dc:creator></item><item><title>Things I Enjoy in Rust: Enums</title><link>https://blog.jonstodle.com/things-i-enjoy-in-rust-enums/</link><description><![CDATA[I’ve been diving into Rust for the last couple of months, after my colleague started talking about it. I’ve been wanting to learn a lower level language, but C++ or something of the like have always seemed too daunting for me to even start.

I’d heard of Rust before, and great things too, but hadn’t set apart time to look into it. I finally took the dive. And boy, am I glad I did.

A lot of people talk about the borrowing system of Rust, or how fast it, or the strict type system. All of which are great things, but it’s not what I’m going to write about here. I’m excited about enums.]]></description><guid isPermaLink="false">675975c8-b21a-4d87-8ac3-7e8c74fd8897</guid><pubDate>Thu, 18 Apr 2019 18:00:00 +0200</pubDate><dc:creator>Jon Grythe Stødle</dc:creator></item><item><title>Building an ASCII image renderer</title><link>https://medium.com/carwow-product-engineering/getting-a-bit-rusty-1285c49e520e</link><description><![CDATA[Although I’m a beginner in Rust, I would like to share the process behind a toy application that I developed recently. It’s a very simple command line tool that prints an image file using ASCII symbols directly to your terminal. ]]></description><guid isPermaLink="false">9a01af1b-fcfa-464e-817f-9a6ea54cf9b7</guid><pubDate>Thu, 18 Apr 2019 12:54:32 +0000</pubDate><dc:creator>Stepan Khodzhaian</dc:creator></item><item><title>Non-lexical lifetimes in Rust</title><link>https://blog.knoldus.com/non-lexical-lifetimes-in-rust/</link><description><![CDATA[This blog is for new Rustacean, who's just started exploring Rust. Demonstrating a scenario that is possible because of the Non-lexical lifetimes feature. This feature was introduced in Rust 2018 edition. Earlier than, in Rust 2015, it was not possible.]]></description><guid isPermaLink="false">88bf7467-0164-4b01-a0fc-1b33ffe55f45</guid><pubDate>Thu, 18 Apr 2019 06:39:28 +0000</pubDate><dc:creator>Ayush Mishra</dc:creator></item><item><title>Futures 0.1 Compatibility Layer</title><link>https://rust-lang-nursery.github.io/futures-rs/blog/2019/04/18/compatibility-layer.html</link><description><![CDATA[Rust’s futures ecosystem is currently split in two: On the one hand we have the vibrant ecosystem built around futures@0.1 with its many libraries working on stable Rust and on the other hand there’s the unstable std::future ecosystem with support for the ergonomic and powerful async/await language feature. To bridge the gap between these two worlds we have introduced a compatibility layer as part of the futures@0.3 extension to std::future. This blog post aims to give an overview over how to use it.]]></description><guid isPermaLink="false">adc39c05-2876-4ef4-b071-b4133c96c8ca</guid><pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Josef Brandl</dc:creator></item><item><title>Learning Parser Combinators With Rust</title><link>https://bodil.lol/parser-combinators/</link><description><![CDATA[This article teaches the fundamentals of parser combinators to people who are already Rust programmers. It assumes no other knowledge, and will explain everything that isn't directly related to Rust, as well as a few of the more unexpected aspects of using Rust for this purpose. It will not teach you Rust if you don't already know it, and, if so, it probably also won't teach you parser combinators very well.]]></description><guid isPermaLink="false">a085423c-ec98-4fff-ba66-7c23926175d9</guid><pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Bodil Stokke</dc:creator></item><item><title>Hangman Game Development Tutorial</title><link>https://github.com/rusticus-io/hangman</link><description><![CDATA[This tutorial was part of a whorkshop which took place at the Rust Community Stuttgart on April, 17th 2019. We will develop a Hangman text based console game within this tutorial.]]></description><guid isPermaLink="false">2c21dd65-6a7c-4ce6-97c6-f7a383c331bf</guid><pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Romeo Disca</dc:creator></item><item><title>Proper Notation for Scalar Multiplication in Rust: Dispatching on the Right-Hand Side of Operators and Rusts&apos;s Orphan Rule</title><link>https://www.jstuber.net/2019/04/17/scalar-multiplication-in-rust/</link><description><![CDATA[The scalar multiplication in a vector space is written kv in math, where k is a scalar value (e.g. a number) and v is a vector. It would be nice to write k * v in programming languages, to stay close to the familiar notation. Object-oriented languages typically only support calling methods on the first argument. But the scalar normally doesn't know about vectors, so it can't easily do that.]]></description><guid isPermaLink="false">524e6489-33da-4635-977c-9d86e839d185</guid><pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Jürgen Stuber</dc:creator></item><item><title>Rust Associated Type</title><link>https://medium.com/codechain/rust-associated-type-b0193c22eacd</link><description><![CDATA[Associated Types in Rust are similar to Generic Types; however, Associated Types limit the types of things a user can do, which consequently facilitates code management. Among the Generic Types of traits, types that depend on the type of trait implementation can be expressed by using the Associated Type syntax. By comparing the Associated and Generic Types, you can get a better understanding of Associated Types.]]></description><guid isPermaLink="false">77c8e0ed-ccb6-4f29-8ab7-1e8c3cd5d39d</guid><pubDate>Tue, 16 Apr 2019 10:08:09 +0000</pubDate><dc:creator>Park Juhyung</dc:creator></item><item><title>Runtime</title><link>https://blog.yoshuawuyts.com/runtime/</link><description><![CDATA[The vision of the Async Ecosystem WG is to refine the async Rust experience until it matches the quality and ease of working with today's std. There are a lot of components in that vision, including async/await syntax and borrow checker integration. Today, though, we'd like to introduce another component: Runtime, a crate that makes working with async code feel closer to working with std, and a stepping stone toward ecosystem standardization.]]></description><guid isPermaLink="false">53c58e52-158a-40e1-b59d-3a9ad1a92edb</guid><pubDate>Tue, 16 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Yoshua Wuyts</dc:creator></item><item><title>Rust: beyond the typechecker</title><link>https://blog.merigoux.ovh/en/2019/04/16/verifying-rust.html</link><description><![CDATA[This post will be different from the previous ones, since I’m going to present some of the early results of my work as a PhD student at the Prosecco team in ...]]></description><guid isPermaLink="false">8770e0f9-eca2-4f58-b2f4-7761dbcf81bb</guid><pubDate>Tue, 16 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Denis Merigoux</dc:creator></item><item><title>More than coders</title><link>http://smallcultfollowing.com/babysteps/blog/2019/04/15/more-than-coders/</link><description><![CDATA[Lately, the compiler team has been changing up the way that we work. Our goal is to make it easier for people to track what we are doing and – hopefully – get involved. This is an ongoing effort, but one thing that has become clear immediately is this: the compiler team needs more than coders.]]></description><guid isPermaLink="false">b35d346f-7773-44c5-8db5-4cbe95fb3749</guid><pubDate>Mon, 15 Apr 2019 00:00:00 -0400</pubDate><dc:creator>Niko Matsakis</dc:creator></item><item><title>for await loops (Part I)</title><link>https://boats.gitlab.io/blog/post/for-await-i/</link><description><![CDATA[The biggest unresolved question regarding the async/await syntax is the final syntax for the await operator. There’s been an enormous amount of discussion on this question so far; a summary of the present status of that discussion and the positions within the language team is coming soon. Right now I want to separately focus on one question which impacts that decision but hasn’t been considered very much yet: for loops which process streams.]]></description><guid isPermaLink="false">8c6f2335-8fba-4cb5-9da1-2baba7f59159</guid><pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate><dc:creator>withoutboats</dc:creator></item><item><title>Web Development with Rust — 03/x: Create a REST API</title><link>https://dev.to/gruberb/web-development-with-rust-03-x-create-a-rest-api-3i82</link><description><![CDATA[The most common pattern for creating APIs is REST. We will discover how we can build an API in Rust which conforms with the REST pattern.]]></description><guid isPermaLink="false">f2b4f953-be42-4454-b073-1804aa4a8bb6</guid><pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Bastian Gruber</dc:creator></item><item><title>Chess vocabulary in Rust</title><link>https://backscattering.de/chess/vocabulary/</link><description><![CDATA[Recently I've been using Rust to build a server for the new 7-piece Syzygy endgame tablebases. Using Rust was quite enjoyable and I plan to use it for many future projects. This series is intended to order and share my thoughts, and as a primer to discuss some open questions I have.]]></description><guid isPermaLink="false">37ea8a58-93a1-4e5c-b125-d98a250e601c</guid><pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Niklas Fiekas</dc:creator></item><item><title>Neat new feature in Rust: iter::from_fn</title><link>https://weblog.latte.ca/blake/tech/rust/makingiterators.html</link><description><![CDATA[Recently Rust has introduced a couple of new features, and the one that caught my eye in particular was std::iter::from_fn, which let’s you make an iterator from a function, which is most of what that macro was trying to do, so I thought I would try to convert the various places I was using the macro to use the new function instead…]]></description><guid isPermaLink="false">c16ea768-9518-4a40-b51d-9c5e978994a2</guid><pubDate>Sat, 13 Apr 2019 20:49:00 +0000</pubDate><dc:creator>Blake Winton</dc:creator></item><item><title>Keeping Rust projects&apos; README.md code examples up-to-date</title><link>https://blog.guillaume-gomez.fr/articles/2019-04-13+Keeping+Rust+projects%27+README.md+code+examples+up-to-date</link><description><![CDATA[Because keeping documentation up-to-date is very important (and should be a must have!), we need to check if the examples are still valid after every new updates. Luckily, rustdoc already makes such things very easy. But now, let's say you have examples outside of your Rust code. How can they be tested?]]></description><guid isPermaLink="false">45b386b4-5b90-42a7-b17b-00aeb72cde34</guid><pubDate>Sat, 13 Apr 2019 01:00:00 +0000</pubDate><dc:creator>Guillaume Gomez</dc:creator></item><item><title>Using Rust Generics to Enforce DB Record State</title><link>https://fy.blackhats.net.au/blog/html/2019/04/13/using_rust_generics_to_enforce_db_record_state.html</link><description><![CDATA[I’m currently working on a (private in 2019, public in july 2019) project which is a NoSQL database writting in Rust. To help us manage the correctness and lifecycle of database entries, I have been using advice from the Rust Embedded Group’s Book. As I have mentioned in the past, state machines are a great way to design code, so let’s plot out the state machine we have for Entries]]></description><guid isPermaLink="false">ad1e9e94-37b0-4328-93d5-216cb58cd905</guid><pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate><dc:creator>firstyear</dc:creator></item><item><title>cargo-call-stack, part 2: getting call graph information from rustc</title><link>https://blog.japaric.io/stack-analysis-2/</link><description><![CDATA[In a previous post I described the current implementation of cargo-call-stack, a static stack usage analysis tool. In the second part of that post I described the problems the tool runs into when dealing with indirect function calls (both function pointer calls and dynamic dispatch) and proposed improving the output of the tool by having rustc inject type information in the LLVM IR it produces.

While discussing that idea with rustc developers they noted that the compiler could emit information that’s more relevant to call graph analysis than just the signatures of functions and trait methods. In this post I’ll describe the call graph metadata I’m currently implementing in rustc and how it will help tools like cargo-call-stack. By the way, I have a feature branch of cargo-call-stack that uses this upcoming rustc feature if you want to try it out but you’ll need to build a custom rustc.]]></description><guid isPermaLink="false">e57004c9-8a39-47af-bd60-b97fbcd07e7a</guid><pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Jorge Aparicio</dc:creator></item></channel></rss>