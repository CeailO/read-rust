<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - All Posts</title><link>https://readrust.net/</link><description>All Posts posts on Read Rust</description><item><title>Organizational Debt</title><link>https://boats.gitlab.io/blog/post/rust-2019/</link><description><![CDATA[We all know that classic aphorism: Year comes to an end, Rust blog post press send. This is mine.

There are lots of cool technical improvements to Rust that I want the project to achieve this year, and a few in particular that I’m definitely going to be putting a lot of time into. But this blog post is going to talk about none of them. Instead, I want to talk about organizational debt, and how badly the Rust project needs to deal with it in 2019.]]></description><guid isPermaLink="false">f0adf24b-6589-4306-a580-6cef894ad3b7</guid><pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate><dc:creator>withoutboats</dc:creator></item><item><title>Implementing a static stack usage analysis tool</title><link>https://blog.japaric.io/stack-analysis/</link><description><![CDATA[This blog covers the implementation details of cargo-call-stack v0.1.2. So, why would you ever want to analyze the stack usage of your program at compile time? The obvious answer is when you want to know if your application can stack overflow at runtime without actually running your program. This is important for embedded applications where stack overflows can corrupt memory, and it’s actually a hard requirement for certifying the functional safety of embedded applications.]]></description><guid isPermaLink="false">349a5a06-2dd8-475d-9911-4d777ca6250f</guid><pubDate>Wed, 13 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Jorge Aparicio</dc:creator></item><item><title>A Coding Retreat and Getting Embedded Rust Running on a SensorTag</title><link>https://www.wezm.net/technical/2019/03/sensortag-embedded-rust-coding-retreat/</link><description><![CDATA[This past long weekend some friends on I went on a coding retreat inspired by John Carmack doing similar in 2018. During the weekend I worked on adding support for the Texas Instruments SensorTag to the embedded Rust ecosystem. This post is a summary of the weekend and what I was able to achieve code wise.]]></description><guid isPermaLink="false">0febede4-eee9-43df-bd74-dd2a44dcb4fb</guid><pubDate>Tue, 12 Mar 2019 08:45:00 +0000</pubDate><dc:creator>Wesley Moore</dc:creator></item><item><title>Building the virtualization stack of the future with rust-vmm</title><link>https://opensource.com/article/19/3/rust-virtual-machine</link><description><![CDATA[rust-vmm facilitates sharing core virtualization components between Rust Virtual Machine Monitors.]]></description><guid isPermaLink="false">d3f4b805-773f-499e-84c8-b79fcb40631f</guid><pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Andreea Florescu</dc:creator></item><item><title>Hardware Debugging a Raspberry Pi using JTAG</title><link>https://github.com/rust-embedded/rust-raspi3-OS-tutorials/tree/master/0B_hw_debug_JTAG</link><description><![CDATA[Functionally, this tutorial is the same as the previous one, where we reset or power down the RPi. Around that, we add infrastructure for JTAG debugging.]]></description><guid isPermaLink="false">ae65ad4b-c966-483f-a57a-965ab7ba7d28</guid><pubDate>Sun, 10 Mar 2019 13:59:01 +0000</pubDate><dc:creator>Andre Richter</dc:creator></item><item><title>Intro to web programming in Rust for NodeJS developers</title><link>https://medium.com/@gruberbastian/intro-to-web-programming-in-rust-for-nodejs-developers-1a9c048c4de1</link><description><![CDATA[Rust is different. You can pick up Python or Ruby over the weekend, create a first CRUD application and be happy with the results. With Rust… with Rust you will struggle to pass a String to a different method, change and return it. You then will order the Rust book, see its size, *sigh* and get started. After a few weeks fighting through the book after work, you give up and wait until someone else creates an easy-to-follow tutorial. Here is your “easy” tutorial.]]></description><guid isPermaLink="false">58a0a3ec-5b93-4e53-bcd0-d8df56d02848</guid><pubDate>Sun, 10 Mar 2019 10:53:02 +0000</pubDate><dc:creator>Bastian Gruber</dc:creator></item><item><title>How productive is Rust?</title><link>https://medium.com/@woutergeraedts/how-productive-is-rust-e2260db28f09</link><description><![CDATA[We often get the question how productive working with Rust is. “We know that it is awesome, but isn’t it hard to learn? Don’t you struggle with the borrow checker?”. Well, we put it to the test in Google’s Hash Code 2019 programming competition.]]></description><guid isPermaLink="false">23fcf66c-3fff-4894-836d-32a880171b46</guid><pubDate>Fri,  8 Mar 2019 12:59:39 +0000</pubDate><dc:creator>Wouter Geraedts</dc:creator></item><item><title>Torchbear - a fast and complete interpreter for the new Speakeasy langauge</title><link>https://github.com/foundpatterns/torchbear</link><description><![CDATA[Torchbear is a new programming environment currently available for Windows, Android, MacOS, and Linux. With it, you get Rust's great library ecosystem, but you don't need to recompile with each change to how you use those libraries. Since you express your domain logic in a higher level scripting language and your system logic in Rust's language, you get the best of both worlds!]]></description><guid isPermaLink="false">977952df-eb7d-43eb-82e2-3e53b7e00a72</guid><pubDate>Wed,  6 Mar 2019 13:17:44 +1100</pubDate><dc:creator>Mitchell Tannenbaum</dc:creator></item><item><title>The rise of wgpu: Native WebGPU implementation based on gfx-hal</title><link>https://gfx-rs.github.io/2019/03/06/wgpu.html</link><description><![CDATA[WebGPU is a new graphics/compute API developed by the browser vendors (and Intel) within W3C: The goal is to design a new Web API that exposes these modern technologies in a performant, powerful and safe manner.

Don’t be confused by the “Web” part here - both us (gfx-rs team) and Google are trying to make it feasible to run on native platforms as well. Typically, the Web as a platform has different priorities from native: a lot of focus is placed on the security and portability (in a wider and stronger sense). Coincidentally, these are qualities we are currently missing in the gfx-rs ecosystem: security means safety (in the Rust sense), and portability means that people can use it and run everywhere, without worrying about thousands of potential configurations at run-time, or diverging behavior between platforms due to timing differences or loosely defined behavior.

With these goals in mind, we’d like to announce our new project: wgpu-rs.]]></description><guid isPermaLink="false">861a769a-5c77-4afb-bb9d-b0e05cd3855e</guid><pubDate>Wed,  6 Mar 2019 00:00:00 +0000</pubDate><dc:creator>gfx-rs</dc:creator></item><item><title>The Embedded Working Group Newsletter - 16</title><link>https://rust-embedded.github.io/blog/newsletter-16/</link><description><![CDATA[This is the sixteenth newsletter of the Embedded WG where we highlight new progress, celebrate cool projects, thank the community, and advertise projects that need help!]]></description><guid isPermaLink="false">c2a5636f-d083-4e22-94d7-5b26df1b173d</guid><pubDate>Wed,  6 Mar 2019 00:00:00 +0000</pubDate><dc:creator>The Embedded Working Group</dc:creator></item><item><title>Embedded Graphics 0.4.7 and TinyBMP 0.1.0</title><link>https://wapl.es/rust/2019/03/04/embedded-graphics-0.4.7-bmp-support.html</link><description><![CDATA[Embedded graphics 0.4.7 has been released, along with a new sister crate, tinybmp! TinyBMP aims to parse BMP-format image data using no dynamic allocations. It targets embedded environments but can be used in any place a small BMP parser is required. Thanks to TinyBMP, Embedded Graphics now supports loading this simple image format. The header photo was made using Embedded Graphics and the SSD1331 driver in pure Rust. In this post, I’ll talk through how the BMP file is parsed in no_std environments with nom and how to get BMP images working with embedded_graphics.]]></description><guid isPermaLink="false">25b303a5-4e11-416b-a5a5-db8f7d35db8c</guid><pubDate>Tue,  5 Mar 2019 08:51:11 +0000</pubDate><dc:creator>James Waples</dc:creator></item><item><title>From 48s to 5s - optimizing a 350 line pathtracer in Rust</title><link>https://medium.com/@cfsamson/from-48s-to-5s-optimizing-a-350-line-pathtracer-in-rust-191ab4a1a412</link><description><![CDATA[In this post I’ll talk about how to port a short raytracer written in C#/C++ codebase to Rust, then applying some simple optimizations by leveraging some features in Rust.]]></description><guid isPermaLink="false">ca80053b-f874-4631-9f13-c8ffaf6dabd6</guid><pubDate>Mon,  4 Mar 2019 23:03:25 +0000</pubDate><dc:creator>Carl Fredrik Samson</dc:creator></item><item><title>Building fast interpreters in Rust</title><link>https://blog.cloudflare.com/building-fast-interpreters-in-rust/</link><description><![CDATA[we created a configurable Rust library for writing and executing Wireshark®-like filters in different parts of our stack written in Go, Lua, C, C++ and JavaScript Workers. We have now open-sourced this library under our Github account: https://github.com/cloudflare/wirefilter. This post will dive into its design, explain why we didn’t use a parser generator and how our execution engine balances security, runtime performance and compilation cost for the generated filters.]]></description><guid isPermaLink="false">7fa900ce-52d1-494e-b770-ed5ef64aea61</guid><pubDate>Mon,  4 Mar 2019 16:00:00 +0000</pubDate><dc:creator>Ingvar Stepanyan</dc:creator></item><item><title>Enjoy Compile time function evaluation using &apos;const fn&apos; in Rust</title><link>https://blog.knoldus.com/no-more-run-time-enjoy-compile-time-function-evaluation-using-const-fn-in-rust/</link><description><![CDATA[A few days ago, I was exploring Rust’s Unstable Book and found pretty much same feature in Rust, which is const_fn. I started exploring this feature more after the recent Rust release 1.33.0, in which Rust team has announced major improvements in const fn. The idea of using const fn is to compute result at compile time so that time can be saved when code is run.]]></description><guid isPermaLink="false">48cd5e22-48f6-4711-a1d2-e9ce7338ef0d</guid><pubDate>Mon,  4 Mar 2019 15:26:43 +0000</pubDate><dc:creator>Ayush Mishra</dc:creator></item><item><title>Safe Way to access private fields in Rust</title><link>https://blog.knoldus.com/safe-way-to-access-private-fields-in-rust/</link><description><![CDATA[Do you want your fields to be private but got stuck in accessing them from other module. Then this blog let you know the ways to access the private fields as well as which one is safer way.]]></description><guid isPermaLink="false">b72bfa37-94f9-4758-9028-225ce6f93877</guid><pubDate>Mon,  4 Mar 2019 06:04:58 +0000</pubDate><dc:creator>Amita Yadav</dc:creator></item><item><title>luster: An experimental Lua VM implemented in pure Rust</title><link>https://www.reddit.com/r/rust/comments/awx9cy/github_kyrenluster_an_experimental_lua_vm/</link><description><![CDATA[ What I want to talk about though (and what I will eventually write a blog post about) is the technique that I'm using in luster for safe garbage collection. Inside luster are two libraries called "gc-arena" and "gc-sequence", and they represent a new (I believe novel?) system for safe garbage collection in Rust. There have been several attempts here before such as rust-gc and shifgrethor, and this represents another attempt with... different? limitations more appropriate for implementing language runtimes like Lua.]]></description><guid isPermaLink="false">17e95b5e-6cd8-4f98-8030-c923e69897cb</guid><pubDate>Mon,  4 Mar 2019 06:26:29 +1100</pubDate><dc:creator>Catherine West</dc:creator></item><item><title>Starling, the Binary Indexed Merkle Tree (Or Merkle-BIT)</title><link>https://www.reddit.com/r/rust/comments/aww097/starling_the_binary_indexed_merkle_tree_or/</link><description><![CDATA[Hey rustaceans! With a little help from your feedback just a few hours ago, I'm proud to present to you all Starling, a Binary Indexed Merkle tree! I've been working on this data structure for the last few months, and I think it is ready now for the community to have a look. Let me explain what it is and why it might be useful for your project.]]></description><guid isPermaLink="false">ce110dd7-46c1-4f12-880f-1c0bbf3a6726</guid><pubDate>Mon,  4 Mar 2019 04:12:50 +1100</pubDate><dc:creator>ChosunOne</dc:creator></item><item><title>Entity component system (ECS) explained with tennis players and courts</title><link>http://iolivia.me/posts/entity-component-system-explained/</link><description><![CDATA[In the last post  I talked about a small game I built in Rust and roughly how far I got in 24 hours. One of the biggest challenges I had was…]]></description><guid isPermaLink="false">df193fd9-bd7c-45bc-bc27-27ba8dee5bbb</guid><pubDate>Sun,  3 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Olivia Ifrim</dc:creator></item><item><title>Pedal to the metal: dynamic templates with Ramhorns</title><link>https://maciej.codes/2019-03-03-ramhorns.html</link><description><![CDATA[I have a problem. I don't know what to call it, but there is this itch I have when I find something that can obviously be made more efficient. The way I get about scratching that itch these days is by writing some Rust. I just got such an itch when looking at static site generators for this blog, Hugo (written in Go) is pretty much state-of-the art. In Rust land we have Zola, which is feature-rich, mature (for v0.5), and definitely fast enough for most users, and yet it is not as fast as it could be. Being written in Rust is, by itself, not a guarantee of top performance. The implementation matters. After some looking around I've narrowed down a problem I want to tackle (for now) to one area: template engines.]]></description><guid isPermaLink="false">a540ae81-ddbb-4279-a507-b7faf43e5b19</guid><pubDate>Sun,  3 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Maciej Hirsz</dc:creator></item><item><title>rust-audit: Know exact library versions used to build your Rust executable</title><link>https://github.com/Shnatsel/rust-audit</link><description><![CDATA[Know exact library versions used to build your Rust executable. Audit binaries for known bugs or security vulnerabilities in production, at scale, with zero bookkeeping.]]></description><guid isPermaLink="false">e2a2559d-5bf2-45b6-ba62-a3af84913c3a</guid><pubDate>Sat,  2 Mar 2019 20:02:25 +0000</pubDate><dc:creator>Sergey &quot;Shnatsel&quot; Davidoff</dc:creator></item><item><title>Proposal: New channels for Rust’s standard library</title><link>https://stjepang.github.io/2019/03/02/new-channels.html</link><description><![CDATA[In this blog post, I’m proposing we also replace the guts of mpsc with crossbeam-channel for some more performance wins. However, unlike with mutexes and hash maps, this change will also enable oft-requested new features that make it tempting to deprecate mpsc altogether and introduce better channels designed from scratch.]]></description><guid isPermaLink="false">4a9fd96a-fd25-48dd-a97e-511e023b35f8</guid><pubDate>Sat,  2 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Stjepan Glavina</dc:creator></item><item><title>Async-await status report</title><link>http://smallcultfollowing.com/babysteps/blog/2019/03/01/async-await-status-report/</link><description><![CDATA[I wanted to post a quick update on the status of the async-await effort. The short version is that we’re in the home stretch for some kind of stabilization, but there remain some significant questions to overcome.]]></description><guid isPermaLink="false">c838f89e-80f8-4146-b26e-622020ff2653</guid><pubDate>Fri,  1 Mar 2019 00:00:00 -0500</pubDate><dc:creator>Niko Matsakis</dc:creator></item><item><title>24 hours of game development in Rust</title><link>http://iolivia.me/posts/24-hours-of-rust-game-dev/</link><description><![CDATA[In this post I'll talk about a small game I've been developing in about 24 hours in total (mostly in a few hour blocks during evenings or weekends). The game is far from finished, but I thought I'd write up about my experience so far, what I've learnt and some interesting observations about building a game from scratch-ish and doing it in Rust.]]></description><guid isPermaLink="false">38d6b47d-bd95-4566-af44-c30769c1e149</guid><pubDate>Fri,  1 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Olivia Ifrim</dc:creator></item><item><title>Implications of Rewriting a Browser Component in Rust</title><link>https://hacks.mozilla.org/2019/02/rewriting-a-browser-component-in-rust/</link><description><![CDATA[Since our first release in 2002, there have been 69 security bugs in Firefox’s style component. If we'd had a time machine and could have written this component in Rust from the start, 51% wouldn't have happened. That said, Rust is not foolproof. Developers still need to be aware of correctness bugs and data leakage attacks.]]></description><guid isPermaLink="false">1ffc5388-6476-4542-90c1-398c561a2c43</guid><pubDate>Thu, 28 Feb 2019 14:10:27 +0000</pubDate><dc:creator>Diane Hosfelt</dc:creator></item><item><title>This Week in Pop!_OS 1</title><link>https://pop-planet.info/2019/02/this-week-in-pop/</link><description><![CDATA[This will be the first in a series of weekly updates on progress made in the development of Pop!_OS. Thus, this will only contain content pertaining specifically to Pop!_OS, though at times there may be some overlap with the hardware side of System76.]]></description><guid isPermaLink="false">c8769017-9667-4bad-82c6-e43ec7391182</guid><pubDate>Thu, 28 Feb 2019 00:20:54 +0000</pubDate><dc:creator>Michael Murphy</dc:creator></item><item><title>JavaFX UI in Rust</title><link>https://astonbitecode.github.io/blog/post/rust-javafx/</link><description><![CDATA[In this post, I would like to share the way how we can implement a Rust application that has a User Interface written in JavaFX.]]></description><guid isPermaLink="false">28f6c857-f8f6-4ff3-8a21-12c894a7dbb8</guid><pubDate>Thu, 28 Feb 2019 00:05:58 +0000</pubDate><dc:creator>Aston</dc:creator></item><item><title>Azure Pipelines for Rust Projects</title><link>https://nbsoftsolutions.com/blog/azure-pipelines-for-rust-projects</link><description><![CDATA[In this post I will detail why I believe that Azure Pipelines can be a great CI / CD platform for open source Rust projects on Github. The catch is that there are some rough spots on Azure Pipelines and in the rust ecosystem, but everything can be worked around. In writing this post, I hope to detail examples one can copy and paste into their projects.]]></description><guid isPermaLink="false">5288ae7c-b0a5-4e98-b6ad-512af05f04e4</guid><pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Nick Babcock</dc:creator></item><item><title>Announcing Rust 1.33.0</title><link>https://blog.rust-lang.org/2019/02/28/Rust-1.33.0.html</link><description><![CDATA[The Rust team is happy to announce a new version of Rust, 1.33.0. The two largest features in this release are significant improvements to const fns, and the stabilization of a new concept: "pinning."]]></description><guid isPermaLink="false">e6376cd5-713f-4a8e-8792-2329772feee5</guid><pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate><dc:creator>The Rust Release Team</dc:creator></item><item><title>Low level text layout kickoff</title><link>https://raphlinus.github.io/rust/skribo/text/2019/02/27/text-layout-kickoff.html</link><description><![CDATA[This post is to announce a new Rust library for low-level text layout, called “skribo” (the Esperanto word for “writing”). This has been a major gap in the Rust ecosystem, and I hope the new crate can improve text handling across the board.]]></description><guid isPermaLink="false">70a94e2b-dbd2-4f66-ada8-5886b5c51fab</guid><pubDate>Wed, 27 Feb 2019 18:16:42 +0000</pubDate><dc:creator>Raph Levien</dc:creator></item><item><title>Rust build scripts vs. Meson</title><link>https://people.gnome.org/~federico/blog/rust-build-scripts.html</link><description><![CDATA[One of the pain points in trying to make the Meson build system work with Rust and Cargo is Cargo's use of build scripts, i.e. the build.rs that many Rust programs use for doing things before the main build. This post is about my exploration of what build.rs does.]]></description><guid isPermaLink="false">f93cc38e-4380-4174-8f53-b5c6674772da</guid><pubDate>Wed, 27 Feb 2019 12:14:12 -0600</pubDate><dc:creator>Federico Mena Quintero</dc:creator></item><item><title>Releasing rust_gpiozero v0.2.0</title><link>https://rahul-thakoor.github.io/releasing-rust_gpiozero-v0.2.0/</link><description><![CDATA[A new version packed with new features and improvements: Blink leds without blocking main thread and adjust brightness. ⚙️ Work with servo motors and adjust motor speed. 〜 Work with software PWM.]]></description><guid isPermaLink="false">e0caaf97-6980-4421-afbe-3fca31872c73</guid><pubDate>Wed, 27 Feb 2019 17:43:48 +0400</pubDate><dc:creator>Rahul Thakoor</dc:creator></item><item><title>Forge: A scripting language for Rust gamedev inspired by JS, Rust and Python</title><link>https://github.com/zesterer/forge</link><description><![CDATA[Forge is a dynamically-typed language written in Rust. It is inspired by JavaScript, Rust, Python and Rhai. In the future, you'll be able to use Forge as a general-purpose lightweight scripting language in your applications.]]></description><guid isPermaLink="false">a1899a77-1a12-49f3-92e2-5e353491c8ae</guid><pubDate>Wed, 27 Feb 2019 04:21:00 +0000</pubDate><dc:creator>Joshua Barretto</dc:creator></item><item><title>Rust Case Study: Community makes Rust an easy choice for npm [pdf]</title><link>https://www.rust-lang.org/static/pdfs/Rust-npm-Whitepaper.pdf</link><description><![CDATA[Learn how npm uses Rust]]></description><guid isPermaLink="false">b149b575-39a9-4136-8749-29e04c5cf0b3</guid><pubDate>Wed, 27 Feb 2019 03:26:00 +0000</pubDate><dc:creator>The Rust Core Team</dc:creator></item><item><title>Working with Command Line Arguments in Rust</title><link>https://blog.knoldus.com/working-with-command-line-arguments-in-rust/</link><description><![CDATA[Command Line Arguments are used to control program from outside instead of hard-coding those values inside the code and supplied to program when it is invoked. In this blog, I’ll demystify you how to use Command Line Arguments in the Rust Programming Language.]]></description><guid isPermaLink="false">12b9edfa-c917-436a-b001-76305b65eb0d</guid><pubDate>Tue, 26 Feb 2019 07:05:40 +0000</pubDate><dc:creator>Pawan Bisht</dc:creator></item><item><title>Bid adieu to tarpaulin, HTML reports are here for Rust</title><link>https://blog.knoldus.com/bid-adieu-to-tarpaulin-html-reports-are-here-for-rust/</link><description><![CDATA[Kcov is a code coverage tool for Binaries, Shell scripts as well as Python scripts. It generates an HTML file for most of the languages. But we will focus mainly on Rust language.]]></description><guid isPermaLink="false">a6483426-5600-4cf0-a514-c532946abda3</guid><pubDate>Tue, 26 Feb 2019 06:41:19 +0000</pubDate><dc:creator>Mudit Chhabra</dc:creator></item><item><title>Firmware examples that make use of the jnet embedded TCP/IP crate</title><link>https://github.com/japaric/jnet/tree/master/firmware</link><description><![CDATA[[Experiment] JNeT: japaric's network thingies.]]></description><guid isPermaLink="false">34d09d33-17ae-4799-9026-f41fc6d95fe4</guid><pubDate>Tue, 26 Feb 2019 04:35:00 +0000</pubDate><dc:creator>Jorge Aparicio</dc:creator></item><item><title>100x improvement on startup time in Wasmer 0.2.0</title><link>https://medium.com/wasmer/running-webassembly-100x-faster-%EF%B8%8F-a8237e9a372d</link><description><![CDATA[We’ve been working steadily to get Wasmer to execute WebAssembly modules on the server-side as fast as possible. TL;DR — We got 100x improvement on startup time on Wasmer 0.2.0.]]></description><guid isPermaLink="false">fe2180a3-53fb-4b12-b6b2-722c19587b39</guid><pubDate>Mon, 25 Feb 2019 22:04:55 +0000</pubDate><dc:creator>Syrus Akbary</dc:creator></item><item><title>Part 4: Line IDs in toy version control system, oji</title><link>https://jneem.github.io/ids/</link><description><![CDATA[I’ve written quite a bit about the theory of patches and merging, but nothing yet about how to actually implement anything efficiently. That will be the subject of this post, and probably some future posts too.]]></description><guid isPermaLink="false">aa9ed2af-2308-4ae8-a009-caf772f96e3b</guid><pubDate>Mon, 25 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Joe Neeman</dc:creator></item><item><title>Introducing battery crate</title><link>https://svartalf.info/posts/2019-02-25-introducing-battery-crate/</link><description><![CDATA[My new pet project for reading batteries information in Rust.]]></description><guid isPermaLink="false">e513ef63-5727-4db5-8830-08606838d1e3</guid><pubDate>Mon, 25 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Nikita Kuznetsov</dc:creator></item><item><title>Rust 2019: Rust Audio</title><link>https://www.reddit.com/r/rust/comments/aua2tb/rust_2019_rust_audio/?st=JSJEXJDY&amp;sh=497b171c</link><description><![CDATA[Howdy y'all. This is a super late 2019 goal post but I drank too much coffee this morning and wanted to get some thoughts out. I'd love to see 2019 be a great year for progressing the environment for developing audio applications in Rust. I'm not saying that there aren't already some good libraries out there, but in comparison with the defacto C++ offerings, we have a long way to go. Basically, I'd love to see an alternative to JUCE in Rust, and that is very ambitious because JUCE is an amazing library!]]></description><guid isPermaLink="false">dfa770cf-7919-4344-b9ef-6ad7b5e0a084</guid><pubDate>Mon, 25 Feb 2019 04:21:15 +1100</pubDate><dc:creator>u/engid</dc:creator></item><item><title>Fearless concurrency: how Clojure, Rust, Pony, Erlang and Dart let you achieve that</title><link>https://sites.google.com/a/athaydes.com/renato-athaydes/posts/fearlessconcurrencyhowclojurerustponyerlanganddartletyouachievethat</link><description><![CDATA[several models that make it easier to reason about concurrent programs have been envisioned over time. In this article, we'll have a quick look at a few of them, from new to not-so-new languages. I don't intend to give an extensive analysis of each solution, or make a formal comparison between them. My intention is to simply explain the basics of each solution and how they can be used in practice (with code samples that show off what the result of using the models might look like), so that other developers may have an easier time understanding them and deciding which solution, or language, might be better applicable to their particular problems.]]></description><guid isPermaLink="false">938a7c8a-5c3d-4adb-82e0-caf416396075</guid><pubDate>Sun, 24 Feb 2019 09:13:00 +0000</pubDate><dc:creator>Renato Athaydes</dc:creator></item><item><title>Zero knowledge proofs using Bulletproofs</title><link>https://medium.com/coinmonks/zero-knowledge-proofs-using-bulletproofs-4a8e2579fc82</link><description><![CDATA[I will show how to create various zero knowledge proofs using the Bulletproofs implementation from dalek-cryptography. The examples will be i) proving knowledge of factors of a given number without revealing the factors, ii) a range proof, i.e. prove that you know a value x such that a ≤ x ≤ b without revealing x, iii) prove that the value you have is non-zero without revealing it (without using above range proof), iv) Set membership, i.e given a set S, prove that you know an element contained in the set without revealing the element, v) Similarly, set non-membership without revealing the value of the absent element. The examples can be adapted with little effort such that they can be used in ZK-SNARK implementations like libsnark or bellman.]]></description><guid isPermaLink="false">fae48adb-0406-4124-b06d-6b9d7a667d85</guid><pubDate>Sat, 23 Feb 2019 20:38:04 +0000</pubDate><dc:creator>Lovesh Harchandani</dc:creator></item><item><title>Combine Results for Improved Rust Validation Logic</title><link>https://www.joshmcguigan.com/blog/multi-try-improved-validation-logic-rust/</link><description><![CDATA[The error handling features within Rust are some of my favorite things about the language. This system works great when you are in a function which returns a Result and you want to exit at the first error you come to. However, it can be challenging if your goal is to try a few failure-prone things and return each of the errors, rather than just the first error. This is the problem multi_try attempts to solve. ]]></description><guid isPermaLink="false">03e057c7-1da0-4468-b0f8-3aaedde6b241</guid><pubDate>Sat, 23 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Josh Mcguigan</dc:creator></item><item><title>Scientific computing: a Rust adventure [Part 0 - Vectors]</title><link>https://www.lpalmieri.com/posts/2019-02-23-scientific-computing-a-rust-adventure-part-0-vectors/</link><description><![CDATA[My daily work revolves around building Machine Learning applications, while a lot of my evenings have been spent experimenting with Rust, getting more and more fascinated and in love with the language.

It couldn’t be helped: I started to have a look at what the Rust ecosystem had to offer for Machine Learning, Big Data and scientific computing at large. I quickly found out that there is a lot to be done and a lot of potential (see here or here). It got me really fired up 🔥]]></description><guid isPermaLink="false">8d4c090f-e6e3-4975-abe7-385479579cfa</guid><pubDate>Sat, 23 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Luca Palmieri</dc:creator></item><item><title>Our first Rust crate: decrypting ansible vaults</title><link>https://medium.com/@woutergeraedts/our-first-rust-crate-decrypting-ansible-vaults-25f2f3a9a674</link><description><![CDATA[We encrypt these secrets in so-called ansible vaults. Kuberwave also has the need to access these secrets. Because our staff is already comfortable with using these vaults, we’ve decided to also employ them for our Kubernetes setup. For this I created ansible-vault-rs, a library that can decrypt ansible vaults. Note that it can not create or edit vaults, because I have no need (yet) for this functionality.]]></description><guid isPermaLink="false">2c0b32cc-51a7-4e6f-a729-92c6cedcd7b1</guid><pubDate>Fri, 22 Feb 2019 08:12:26 +0000</pubDate><dc:creator>Wouter Geraedts</dc:creator></item><item><title>Rust lang team working groups</title><link>http://smallcultfollowing.com/babysteps/blog/2019/02/22/rust-lang-team-working-groups/</link><description><![CDATA[Now that the Rust 2018 edition has shipped, the language design team has been thinking a lot about what to do in 2019 and over the next few years. I think we’ve got a lot of exciting stuff on the horizon, and I wanted to write about it.]]></description><guid isPermaLink="false">0d3ca45d-85aa-40ab-95f0-40ec5abaa75f</guid><pubDate>Fri, 22 Feb 2019 00:00:00 -0500</pubDate><dc:creator>Niko Matsakis</dc:creator></item><item><title>Changes in the core team</title><link>https://blog.rust-lang.org/2019/02/22/Core-team-changes.html</link><description><![CDATA[Just a quick update: You may have noticed that, in the last month or so, a number of Rust core team members have changed their jobs and/or their roles in the project.]]></description><guid isPermaLink="false">2471466d-74a1-4d19-82d7-6909e10178cd</guid><pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate><dc:creator>The Rust Core Team</dc:creator></item><item><title>git req | switch branches, not context</title><link>https://arusahni.github.io/git-req/</link><description><![CDATA[Check out git branches by their pull (or merge) request ID]]></description><guid isPermaLink="false">3a45d462-3f13-451b-8b15-03d07069c3f3</guid><pubDate>Thu, 21 Feb 2019 10:16:00 +0000</pubDate><dc:creator>Aru Sahni</dc:creator></item><item><title>New Gtk-rs release finally happened!</title><link>https://gtk-rs.org/blog/2019/02/21/new-release.html</link><description><![CDATA[It’s time for a new release! Main adds/changes this time are: We added the generation of the Atk crate. We now generate functions taking callback as parameters. We improved the channels handling in GLib. The whole new GString type! The minimum Rust version supported is now the 1.31. The minimum version of all libraries has been changed to GNOME 3.14. The maximum version of all libraries has been upgraded to GNOME 3.30. Added subclassing support in GLib. Even more bindings generated. Let’s see those in details.]]></description><guid isPermaLink="false">7a149bc9-7e87-40cb-b3ef-da277059f897</guid><pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Gtk-rs</dc:creator></item><item><title>Procedural Generation with Wave Function Collapse</title><link>https://gridbugs.org/wave-function-collapse/</link><description><![CDATA[Wave Function Collapse is a procedural generation algorithm which produces images by arranging a collection of tiles according to rules about which tiles may be adjacent to each other tile, and relatively how frequently each tile should appear. The algorithm maintains, for each pixel of the output image, a probability distribution of the tiles which may be placed there. It repeatedly chooses a pixel to “collapse” - choosing a tile to use for that pixel based on its distribution. WFC gets its name from quantum physics. The goal of this post is to build an intuition for how and why the WFC algorithm works.]]></description><guid isPermaLink="false">2c967b7c-6987-45ae-96b1-776ee6c51011</guid><pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Stephen Sherratt</dc:creator></item><item><title>Updates about my work on native-Rust GUI, text layout, splines, markdown parsing, and more</title><link>https://raphlinus.github.io/personal/2019/02/20/more-small-updates.html</link><description><![CDATA[This post is actually a collection of updates about pretty big things, but the writeup is small. Several will be expanded into larger blog posts - if there are any that you are especially eager to see, please tweet at me and I’ll give the topic priority.]]></description><guid isPermaLink="false">ea353a56-0b7b-4025-a410-0e479c39950a</guid><pubDate>Wed, 20 Feb 2019 17:02:42 +0000</pubDate><dc:creator>Raph Levien</dc:creator></item><item><title>DOS: the final frontier...</title><link>https://www.reddit.com/r/rust/comments/ask2v5/dos_the_final_frontier/</link><description><![CDATA[In our crusade to oxidize platform after platform, I've been working to bring Rust to yet another target: MS-DOS. I don't know if this has been done before, but I couldn't find any information about it on the web, so I had to rely on information about using GCC to compile MS-DOS programs (not all of which carried over), and it took quite a bit of fiddling with the target specification to get things just right. In the end, I've managed to produce COM executables that can call DOS interrupts and interface with hardware such as the PC speaker, and presumably the rest of the hardware, given the right code.]]></description><guid isPermaLink="false">7c13bc47-79a3-408a-bfc0-d67639f4f359</guid><pubDate>Wed, 20 Feb 2019 15:47:21 +1100</pubDate><dc:creator>u/serentty</dc:creator></item><item><title>Introducing embedded-sdmmc - a pure-Rust #[no_std] SD card and FAT16/FAT32 library</title><link>https://www.reddit.com/r/rust/comments/ascvls/introducing_embeddedsdmmc_a_purerust_no_std_sd/</link><description><![CDATA[161 votes and 6 comments so far on Reddit]]></description><guid isPermaLink="false">fe990782-d611-46a2-a6c1-4048707e61df</guid><pubDate>Wed, 20 Feb 2019 04:32:00 +0000</pubDate><dc:creator>Jonathan Pallant</dc:creator></item><item><title>The Embedded Working Group Newsletter - 15</title><link>https://rust-embedded.github.io/blog/newsletter-15/</link><description><![CDATA[This is the fifteenth newsletter of the Embedded WG where we highlight new progress, celebrate cool projects, thank the community, and advertise projects that need help!]]></description><guid isPermaLink="false">e7d75d4a-b84d-41fd-a164-016bb9e9d99c</guid><pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate><dc:creator>The Embedded Working Group</dc:creator></item><item><title>My experience with Rust</title><link>http://subhojit777.in/rust-language-experience/</link><description><![CDATA[I started learning Rust in 2018. I completed my work in an open source project and was thinking about learning a new programming language. My motive was to learn a language that allows you to control the lower level of a high-level programming language. I considered learning Golang, but, in most of the online articles I learned that Rust (being a system programming language) gives you more control than Go, however, the learning curve is far steeper than Go. I had no worries about deadlines or time, therefore I chose Rust.]]></description><guid isPermaLink="false">fb473ea5-9d84-4c2d-9926-282c55dcbf18</guid><pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Subhojit Paul</dc:creator></item><item><title>Part 3: Graggles can have cycles</title><link>https://jneem.github.io/cycles/</link><description><![CDATA[Almost two years ago, I promised a series of three posts about version control. The first two (here and here) introduced a new (at the time) framework for version control. The third post, which I never finished, was going to talk about the datastructures and algorithms used in pijul, a version control system built around that new framework. The problem is that pijul is a complex piece of software, and so I had lots of trouble wrapping my head around it.

Two years later, I’m finally ready to continue with this series of posts (but having learned from my earlier mistakes, I’m not going to predict the total number of posts ahead of time). In the meantime, I’ve written my own toy version control system (VCS) to help me understand what’s going on. It’s called ojo, and it’s extremely primitive: to start with, it can only track a single file. However, it is (just barely) sophisticated enough to demonstrate the important ideas. I’m also doing my best to make the code is clear and well-documented.]]></description><guid isPermaLink="false">53d60351-cb50-4f9f-83d7-e6c8d94ab025</guid><pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Joe Neeman</dc:creator></item><item><title>Cross-compiling Rust code to Minix</title><link>https://iandouglasscott.com/2019/02/18/cross-compiling-rust-code-to-minix/</link><description><![CDATA[I’ve decided to take a look at Minix, which is an interesting microkernel OS. Naturally after building Minix from git, the first thing I decided to try was porting Rust’s std to Minix so I could cross-compile Rust programs from Linux to run under Minix. Okay, I suppose I could have started with something else, but porting Rust software and modifying the platform-depending part of std is something I have experience with from working on Redox OS. And Rust really isn’t that hard to port.]]></description><guid isPermaLink="false">2c73855c-6079-427a-b075-4c07ed3cec23</guid><pubDate>Mon, 18 Feb 2019 13:00:00 -0800</pubDate><dc:creator>Ian Douglas Scott</dc:creator></item><item><title>You can live without Exceptions, if you are using Rust</title><link>https://blog.knoldus.com/you-can-live-without-exceptions-if-you-are-using-rust/</link><description><![CDATA[If you are coming from Java background, where you have used Exception Handling extensively and you have started working on new language like Rust, which doesn’t support Exception Handling then you will be forced to think that does such kind of world really exists?]]></description><guid isPermaLink="false">a40e4318-64e5-4929-800f-4308c242b49c</guid><pubDate>Mon, 18 Feb 2019 08:18:34 +0000</pubDate><dc:creator>Ayush Mishra</dc:creator></item><item><title>Rust Lifetime Visualization Ideas</title><link>https://blog.adamant-lang.org/2019/rust-lifetime-visualization-ideas/</link><description><![CDATA[Many people have had the idea that there should be a way to visualize lifetimes in Rust. Indeed, the Rust Book used to include ASCII diagrams of lifetimes in some code examples. When fighting the borrow checker, it would be great if the IDE or editor could automatically provide a visualization of the lifetimes in your code.]]></description><guid isPermaLink="false">650d3646-0583-473d-bb43-a2f22f2e8e7d</guid><pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Jeff Walker</dc:creator></item><item><title>Generators II: The Question Mark Problem</title><link>https://boats.gitlab.io/blog/post/generators-ii/</link><description><![CDATA[This is my second post on the design of generators. In the first post, I outlined what an MVP of the feature would look like. In this post, I want to take a look at the first design issue for the feature: how it integrates with the ? operator.]]></description><guid isPermaLink="false">2c43b8ca-4c87-4138-adfc-2e32660061a2</guid><pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate><dc:creator>withoutboats</dc:creator></item><item><title>One Hundred Rust PRs later</title><link>https://phansch.net/2019/02/18/onehundred-rust-prs/</link><description><![CDATA[It’s hard for me to believe but it’s already been over a year since I seriously committed to learning Rust and I have now reached my initial goal of 100 open source contributions to the Rust ecosystem. You can see the full list here. I want to use this blog post to review the work I’ve done, talk about the challenges I’ve come across and how I’ve tried to deal with them. I’m afraid I haven’t blogged in a long time and this is a bit longer than usual.]]></description><guid isPermaLink="false">9cb7faf6-a9cb-4bf5-9549-96ee7e80dd12</guid><pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Philipp Hansch</dc:creator></item><item><title>Mod player in Rust - part 4. Finally some music</title><link>https://www.codeslow.com/2019/02/in-this-post-we-will-finally-have-some.html</link><description><![CDATA[In this post we will finally have some music. I will spend some time discussing how the Amiga sound hardware worked. The original mod file format and how it is played back is intimately linked with the Amiga hardware.]]></description><guid isPermaLink="false">569a6623-bebb-48a6-8946-57b158a4a9b8</guid><pubDate>Sun, 17 Feb 2019 03:50:00 -0800</pubDate><dc:creator>Jani Peltonen</dc:creator></item><item><title>Visualizing your Rust code using graphviz</title><link>https://jonathansteyfkens.com/posts/visualizing-rust.html</link><description><![CDATA[In a previous post I mentioned that the Rust compiler allows you to output interesting intermediate languages/formats in a number of different ways. hir, mir and even flowgraphs! In this post I will be giving a brief overview of the flowgraph format and also instructions on how to generate images from your code.]]></description><guid isPermaLink="false">295b15d9-04eb-420c-bc3e-8b3c12a81882</guid><pubDate>Sun, 17 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Jonathan Steyfkens</dc:creator></item><item><title>Cross compiling Rust from Linux to macOS</title><link>https://wapl.es/rust/2019/02/17/rust-cross-compile-linux-to-macos.html</link><description><![CDATA[I’ve recently been working on a Rust project at work which requires compiling for Linux (GNU), Linux (musl - for Alpine Linux) and macOS. I use Linux Mint nearly all the time, so building for macOS targets has required asking very nicely to borrow a spare Macbook Air. This is naturally a bit crap, so I set out to find a Linux-only solution to cross compile for macOS using osxcross. A weekend of pain later, and I have the following post. Hopefully it spares you a weekend of your own pain.]]></description><guid isPermaLink="false">e412275c-f2ce-4748-bf3d-c53375ff5693</guid><pubDate>Sun, 17 Feb 2019 00:00:00 +0000</pubDate><dc:creator>James Waples</dc:creator></item><item><title>Lyon in 2018</title><link>https://nical.github.io/posts/lyon-2018.html</link><description><![CDATA[In 2018 my activity on the project has varied depending on the time and energy I have had left after work and other activities. As it turns out, working on getting WebRender shipped in Firefox is at the same time amazing and very demanding, and what's left of my brain after a good day of work isn't always up to some of the ambitions I have planned for lyon. Fortunately I am not the only one who contributed to the project, and while progress was slow on the most ambitious plans, I did spend some time on smaller features and polish.

I'll get to these big plans towards the end of this post. In the mean time let's look at some of the highlights of what changed in lyon in 2018.]]></description><guid isPermaLink="false">0a429d63-c63c-4161-8960-c83915c01b26</guid><pubDate>Sun, 17 Feb 2019 00:00:00 +0100</pubDate><dc:creator>Nical</dc:creator></item><item><title>syswall: a firewall for syscalls</title><link>https://www.polaris64.net/blog/programming/2019/syswall-a-firewall-for-syscalls</link><description><![CDATA[A while back I started thinking about software and how it does what it does. Perhaps even more importantly, I started thinking about how we can know what software does, without relying on the software's marketing pitch.]]></description><guid isPermaLink="false">821ecfae-acd8-4a50-907e-77c394807c86</guid><pubDate>Sat, 16 Feb 2019 22:07:25 +0000</pubDate><dc:creator>Simon Pugnet</dc:creator></item><item><title>Shipping Rust Binaries with GoReleaser</title><link>https://medium.com/@jondot/shipping-rust-binaries-with-goreleaser-d5aa42a46be0</link><description><![CDATA[Although GoReleaser supports building just Go projects, it does so much more in the packaging and distribution department that it is extremely hard to ignore.]]></description><guid isPermaLink="false">81e00756-52f6-48fe-839e-28c88b690aef</guid><pubDate>Sat, 16 Feb 2019 17:47:00 +0000</pubDate><dc:creator>Dotan Nahum</dc:creator></item><item><title>MonkeyType: type inference for transpiling Python to Rust</title><link>https://medium.com/@konchunas/monkeytype-type-inference-for-transpiling-python-to-rust-64fa5a9eb966</link><description><![CDATA[In my previous post about Python to Rust transpiler I’ve said, that one of the biggest problems is absence of types in python and inability to infer them for functions. But it turns out there is a solution to this problem. Guys from Instagram have developed an incredible tool for runtime type inference called MonkeyType. It monitors what types functions accept and return while running a program. This approach works quite nicely so I want to share with you how it’s done.]]></description><guid isPermaLink="false">da140d7b-47bf-4d63-a3e1-75ade64bed2f</guid><pubDate>Fri, 15 Feb 2019 22:25:31 +0000</pubDate><dc:creator>Julian Konchunas</dc:creator></item><item><title>My Tour of Rust – Day 4 – Ray Tracing Part 2</title><link>https://rushtonality.com/2019/02/15/my-tour-of-rust-day-4-ray-tracing-part-2/</link><description><![CDATA[Learning Rust through the porting of the code from Peter Shirley's Ray Tracing in a Weekend. Focused on Polymorphism, Ownership and Traits in Rust.]]></description><guid isPermaLink="false">54a69419-caf9-408f-bd41-ab6ee7897b92</guid><pubDate>Fri, 15 Feb 2019 20:13:45 +0000</pubDate><dc:creator>Stephen Rushton</dc:creator></item><item><title>Why should you use Rust in WebAssembly?</title><link>https://opensource.com/article/19/2/why-use-rust-webassembly</link><description><![CDATA[WebAssembly (Wasm) is a technology that has the chance to reshape how we build apps for the browser. Not only will it allow us to build whole new classes of web applications, but it will also allow us to make existing apps written in JavaScript even more performant.

In this article about the state of the Rust and Wasm ecosystem, I'll try to explain why Rust is the language that can unlock the true potential of WebAssembly.]]></description><guid isPermaLink="false">9496d523-3ad4-42ac-a6eb-183ed3d55713</guid><pubDate>Fri, 15 Feb 2019 03:01:00 -0500</pubDate><dc:creator>Ryan Levick</dc:creator></item><item><title>Replacing a hot path in your app&apos;s JavaScript with WebAssembly</title><link>https://developers.google.com/web/updates/2019/02/hotpath-with-wasm</link><description><![CDATA[In my previous articles I talked about how WebAssembly allows you to bring the library ecosystem of C/C++ to the web. One app that makes extensive use of C/C++ libraries is squoosh, our web app that allows you compress images with a variety of codecs that have been compiled from C++ to WebAssembly.

In my experience, most performance problems on the web are caused by forced layout and excessive paint but every now and then an app needs to do a computationally expensive task that takes a lot of time. WebAssembly can help here.]]></description><guid isPermaLink="false">09067d7b-54fc-4555-9e1f-a6622ea5e390</guid><pubDate>Fri, 15 Feb 2019 07:38:00 +0000</pubDate><dc:creator>Surma</dc:creator></item><item><title>Getting started with Rust FFI</title><link>https://rushsteve1.us/wp/getting-started-with-rust-ffi/</link><description><![CDATA[The memory models of Rust and C can often cause a lot of friction. This guide is born out of my own personal struggles writing transmission-sys a wrapper for the Transmission BitTorrent client. Though in this guide we will go over the much simpler example of writing a wrapper for libevent-sys.]]></description><guid isPermaLink="false">e9d10b77-3f54-4479-b685-26efa74f67ce</guid><pubDate>Fri, 15 Feb 2019 03:00:32 +0000</pubDate><dc:creator>Rushsteve1</dc:creator></item><item><title>A brief introduction to Rust</title><link>https://odetorust.com/a-brief-introduction-to-rust/</link><description><![CDATA[I heard of Rust back in 2015 at a meetup. I have since spent time with Rust on and off. In 2018, I had more time to explore Rust. Thinking of using blogging as a learning tool while going further down the rabbit hole of Rust, I setup this blog. In this post, I would like to briefly walk through some important features of the language.]]></description><guid isPermaLink="false">9700147a-735e-4903-b9fb-f91d6de54fe0</guid><pubDate>Thu, 14 Feb 2019 20:25:00 +0000</pubDate><dc:creator>Nyi Nyi Than</dc:creator></item><item><title>Fearless Security: Thread Safety</title><link>https://hacks.mozilla.org/2019/02/fearless-security-thread-safety/</link><description><![CDATA[Multithreading allows programs to do more faster, but adds synchronization bugs and attacks. From a security standpoint, why do we care about thread safety?]]></description><guid isPermaLink="false">5e9e06ae-e22f-4798-b921-d8cb96bf451e</guid><pubDate>Thu, 14 Feb 2019 15:48:10 +0000</pubDate><dc:creator>Diane Hosfelt</dc:creator></item><item><title>Moving from Ruby to Rust</title><link>https://deliveroo.engineering/2019/02/14/moving-from-ruby-to-rust.html</link><description><![CDATA[How we migrated our Tier 1 service from Ruby to Rust and didn’t break production.]]></description><guid isPermaLink="false">d1d825d3-b864-466c-9909-287ae17591a9</guid><pubDate>Thu, 14 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Andrii Dmytrenko</dc:creator></item><item><title>Gtk-rs: how to have mutable object in a closure?</title><link>http://sireliah.com/niusy/gtk_rust_mutable_object_in_closure/</link><description><![CDATA[I wanted, was to start the Gtk application with already generated image of the prime numbers spiral (contained in gtk::Image widget) and then be able to re-generate the image when user changed something. It could be "Generate" click action for instance to show image in different resolution or color. The problem with the button closure was that when I added the Gtk image to the box_vert container, the next time the button was pressed, the code was supposed to remove existing image and add new one, but it didn't.]]></description><guid isPermaLink="false">56014abd-0fd0-4b8c-91ba-734e4f16ddac</guid><pubDate>Tue, 12 Feb 2019 21:58:00 +0000</pubDate><dc:creator>Piotr Gołąb</dc:creator></item><item><title>No, the problem isn’t “bad coders”</title><link>https://medium.com/@sgrif/no-the-problem-isnt-bad-coders-ed4347810270</link><description><![CDATA[A recent blog article discussed the fact that 70% of all security bugs in Microsoft products are due to memory safety vulnerabilities. A lot of the comments I’ve seen on social media boil down to “The problem isn’t the use of a memory unsafe language, but that the programmers who wrote this code are bad.”

In this article, I’m going to look at a recent bug that was caught by the Rust compiler, which I think shows that not only is this assertion unreasonable but virtually impossible for reasons I haven’t seen discussed. While the example I’m going to give is about thread safety rather than memory safety, the arguments I’m going to present can be applied to both.]]></description><guid isPermaLink="false">1c46694b-ae67-4596-9f46-0e9fd419f585</guid><pubDate>Tue, 12 Feb 2019 16:13:55 +0000</pubDate><dc:creator>Sean Griffin</dc:creator></item><item><title>A Quick Look at Trait Objects in Rust</title><link>https://tratt.net/laurie/blog/entries/a_quick_look_at_trait_objects_in_rust.html</link><description><![CDATA[One of the things that baffled me for quite a long time are Rust’s “trait objects”: they felt like an odd part of the language and I was never quite sure whether I was using them or not, even when I wanted to be. Since I’ve recently had cause to look into them in more detail, I thought it might be helpful to write a few things down, in case anyone else finds my explanation useful. The first part of this blog post covers the basics and the second part takes a look at the performance implications of the way trait objects are implemented in Rust.]]></description><guid isPermaLink="false">16bded10-81dc-4ef1-bf04-83a8ab584308</guid><pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Laurence Tratt</dc:creator></item><item><title>All-Hands 2019 Recap</title><link>https://www.ralfj.de/blog/2019/02/12/all-hands-recap.html</link><description><![CDATA[Last week, I was in Berlin at the Rust All-Hands 2019. It was great! I will miss nerding out in discussions about type theory and having every question answered by just going to the person who’s the expert in that area, and asking them. In this post, I am summarizing the progress we made in my main areas of interest and the discussions I was involved in—this is obviously just a small slice of all the things that happened.]]></description><guid isPermaLink="false">03bb4da4-48ab-4e1a-a092-be737761fd6f</guid><pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Ralf Jung</dc:creator></item><item><title>Structure your data in Rust</title><link>https://blog.knoldus.com/structure-your-data-in-rust/</link><description><![CDATA[Structuring of data in the correct way is very important. In java and C++, we use Class & Object. In C, we use structures, unions, and enums. We know that Rust adopts some features of functional programming and OOPs. Class and object is the main weapon of OOPs but how does Rust provide that functionality?]]></description><guid isPermaLink="false">08743d28-0fe1-42f6-ac4a-50f3698891a0</guid><pubDate>Mon, 11 Feb 2019 08:44:09 +0000</pubDate><dc:creator>Amita Yadav</dc:creator></item><item><title>Are you still using `println` in Rust for debugging?</title><link>https://blog.knoldus.com/are-you-still-using-println-in-rust-for-debugging/</link><description><![CDATA[In this blog, I will explain about new debugging macro dbg, added in Rust 1.32.0. This is a macro for quick and dirty debugging with which you can inspect the value of a given expression.]]></description><guid isPermaLink="false">3c0e89db-b8b3-44bc-a952-4cf406146fae</guid><pubDate>Mon, 11 Feb 2019 04:20:21 +0000</pubDate><dc:creator>Ayush Mishra</dc:creator></item><item><title>Generators I: Toward a minimum viable product</title><link>https://boats.gitlab.io/blog/post/generators-i/</link><description><![CDATA[We’re still not finished with the design of async/await, but it’s already become clear that it’s time to get the next phases of the feature into the pipeline. There are two extensions to the minimal async/await feature we’ve currently got that seem like the clear high priority:
 Async methods: allowing async fn to be used in traits. Generators: allowing imperative control flow to create Iterators and Streams the same way async fn allows imperative control flow to create a Future.]]></description><guid isPermaLink="false">a22c0b8e-ed54-4502-8130-a03913b6ff67</guid><pubDate>Mon, 11 Feb 2019 00:00:00 +0000</pubDate><dc:creator>withoutboats</dc:creator></item><item><title>Writing a Rust Roguelike for the Desktop and the Web</title><link>https://aimlesslygoingforward.com/blog/2019/02/09/writing-a-rust-roguelike-for-the-desktop-and-the-web/</link><description><![CDATA[I want to participate in this year's 7 Day Roguelike Challenge. If you've looked around this blog, you know the language is going to be Rust. But for the 7DRL, I'd really love if people could play it in the browser. What follows is a little guide to get you to a small playable proof of concept that can build native Windows, macOS and Linux executables but also runs in the browser via WebAssembly.]]></description><guid isPermaLink="false">df83e971-50b8-474a-8ecf-dd9a2b213972</guid><pubDate>Sat,  9 Feb 2019 18:13:52 +0000</pubDate><dc:creator>Tomas Sedovic</dc:creator></item><item><title>MPSC Channel API for painless usage of threads with GTK in Rust</title><link>https://coaxion.net/blog/2019/02/mpsc-channel-api-for-painless-usage-of-threads-with-gtk-in-rust/</link><description><![CDATA[A very common question that comes up on IRC or elsewhere by people trying to use the gtk-rs GTK bindings in Rust is how to modify UI state, or more specifically GTK widgets, from another thread. I’ll take this opportunity to also explain why it’s not so trivial in Rust first and also explain another solution.]]></description><guid isPermaLink="false">2c0fbe82-0ef4-455a-94f9-886472559fdb</guid><pubDate>Sat,  9 Feb 2019 13:25:55 +0000</pubDate><dc:creator>Sebastian Dröge</dc:creator></item><item><title>Be part of ANSSI’s new « Guide to develop secure applications with Rust »</title><link>https://www.ssi.gouv.fr/en/actualite/be-part-of-anssis-new-guide-to-develop-secure-applications-with-rust/</link><description><![CDATA[Rust is an open source programming language which combines security, modernity and performance. As well, it is gradually being adopted in a large number of projects. To support developers, ANSSI offers a new "Guide to develop secure applications with Rust". This guide is intended to be a living document and it’s open to all contributions from the community. The object of this document is to provide hints and recommendations for secure applications development using the Rust programming language, that allow users to benefits of the good level of trust the Rust language already provides.]]></description><guid isPermaLink="false">a552df74-7e67-4b0a-9e12-a75afc9235b8</guid><pubDate>Sat,  9 Feb 2019 03:29:00 +0000</pubDate><dc:creator>ANSSI</dc:creator></item><item><title>Exploring Rust</title><link>https://jonathansteyfkens.com/posts/explore-rust.html</link><description><![CDATA[Rust provides a lot of language constructs to enable and empower the user to write memory safe and correct code. But what happens behind these constructs? In this post I will outline ways of exploring rust and it’s compiler.

Last weekend I went to fosdem 2019. This is where I had the chance to attend a talk given by Matthias Endler. In his talk he explained how rust has got a lot of syntactic sugar to help the programmers in writing safe and correct code, part of his talk was explaining cargo-inspect to analyse this syntax and see what’s happening behind the scenes. This inspired me to dig a bit deeper and try out other tools.]]></description><guid isPermaLink="false">82089039-8f19-4e01-8d91-d0ef468bbab8</guid><pubDate>Sat,  9 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Jonathan Steyfkens</dc:creator></item><item><title>First release of ieee802154 crate - Partial implementation of the IEEE 802.15.4 standard</title><link>https://users.rust-lang.org/t/first-release-of-ieee802154-0-1-partial-implementation-of-the-ieee-802-15-4-standard/25094</link><description><![CDATA[I’ve released the ieee802154 crate, a partial implementation of the IEEE 802.15.4 standard, earlier this week.  IEEE 802.15.4 is a standard for low-rate wireless personal area networks. It is used as the basis for higher-level protocols like 6LoWPAN, Zigbee, or Thread. The ieee802154 crate is only a partial implementation of this standard, but I hope it can be used as a basis for future work by extending it as required.]]></description><guid isPermaLink="false">5e8e4feb-2bb8-4337-bfba-a71003c797ed</guid><pubDate>Fri,  8 Feb 2019 14:24:56 +0000</pubDate><dc:creator>Hanno Braun</dc:creator></item><item><title>What is Happening in Piston 7</title><link>http://blog.piston.rs/2019/02/08/what-is-happening-7/</link><description><![CDATA[This blog post is a brief summary of what happened the past 8 months in the Piston project.]]></description><guid isPermaLink="false">7ace680c-a527-42f6-9eeb-dc4fd680aa53</guid><pubDate>Fri,  8 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Sven Nilsen</dc:creator></item><item><title>Introducing swc (speedy web compiler) 1.0</title><link>https://swc-project.github.io/blog/2019/02/08/Introducing-swc-1.0</link><description><![CDATA[swc(speedy web compiler) is a super-fast javascript to javascript compiler. It can transpile typescript / jsx / ecmascript 2019 to browser-compatible javascript. It's 16x - 20x faster than babel even on single-core synchronous benchmark. Note that actual performance gap is larger because swc works on worker thread while babel works on event loop thread.]]></description><guid isPermaLink="false">a3541593-fc72-40c3-a4b8-7fdad4cab8fe</guid><pubDate>Fri,  8 Feb 2019 00:00:00 +0000</pubDate><dc:creator>DongYoon Kang</dc:creator></item><item><title>The Builder Pattern in Rust</title><link>https://oribenshir.github.io/afternoon_rusting/blog/building-rust</link><description><![CDATA[For the very first coding blog, I think it is appropriate to start with building objects. This post is about the Builder Pattern in Rust, and how it taught me I couldn’t write everything the way I want. Yes, strong typing prevents you from common pitfalls, and C++ can go quite far in this direction (as many JS/Python enthusiastic will gladly testify). It is often easy to forget how it sometimes prevents you from writing a completely legal and safe code, due to rules being too “protective”. And as Rust takes the code safety to a whole new level, sometimes a trivial code can’t be written, and without the proper knowledge, it might seem entirely arbitrary. It was a subtle restriction in the builder pattern that took me by surprise first.]]></description><guid isPermaLink="false">52b68916-b65b-4a28-9bac-e8c8038c6194</guid><pubDate>Fri,  8 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Ori Ben-Shir</dc:creator></item><item><title>Rewriting stackcollapse-xdebug in Rust</title><link>https://daniellockyer.com/rewriting-stackcollapse-xdebug/</link><description><![CDATA[A week or so ago, I saw the inferno project mentioned on the Rust subreddit. It was a rewrite of the great FlameGraph library into Rust. All of the work was being livestreamed by Jon Gjengset. I ended up watching some of the livestreams and had the idea of porting the stackcollapse-xdebug.php file to Rust, potentially so it could be included in the project in the future.]]></description><guid isPermaLink="false">9494ac41-95c6-43e8-86ef-660443465886</guid><pubDate>Fri,  8 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Daniel Lockyer</dc:creator></item><item><title>Metered-rs: fast, ergonomic metrics for Rust</title><link>https://users.rust-lang.org/t/metered-rs-fast-ergonomic-metrics-for-rust/25061</link><description><![CDATA[I’m pleased to announce the release of metered-rs, a crate that helps live measurements of code, inspired by Coda Hale’s Java metrics, with the philosophy that measuring program performance at runtime is valuable, and independent from benchmarking.]]></description><guid isPermaLink="false">6b4003d7-f0ce-4105-8ed5-f4bea94f77b9</guid><pubDate>Thu,  7 Feb 2019 18:14:21 +0000</pubDate><dc:creator>Simon Chemouil</dc:creator></item><item><title>Auditing Rust Crypto: The First Hours</title><link>https://research.kudelskisecurity.com/2019/02/07/auditing-rust-crypto-the-first-hours/</link><description><![CDATA[Checklists are a simple yet effective component of security and safety procedures in various fields, from flight safety and surgery to network security, and of course cryptography. So here’s a couple of things you want to check when starting the audit of a crypto software written in Rust.]]></description><guid isPermaLink="false">b6ca1619-6bdb-4efc-a043-ea73ed0e8336</guid><pubDate>Thu,  7 Feb 2019 14:00:15 +0000</pubDate><dc:creator>https://research.kudelskisecurity.com/</dc:creator></item><item><title>Rust: A unique perspective</title><link>https://limpet.net/mbrubeck/2019/02/07/rust-a-unique-perspective.html</link><description><![CDATA[In which I try to explain the reasoning behind Rust’s memory-safety mechanisms.]]></description><guid isPermaLink="false">d7fe7d63-d2c8-4bfc-834b-a93155c10dcb</guid><pubDate>Thu,  7 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Matt Brubeck</dc:creator></item><item><title>Notion: the hassle-free JavaScript toolchain manager</title><link>https://github.com/notion-cli/notion</link><description><![CDATA[Reliable: Ensure everyone in your project uses an identical dev environment, from the Node version to your preferred package manager.

Universal: Enjoy the same command-line experience in every shell and every major operating system.

Fast: Notion is implemented in Rust and deployed as a static executable for maximum performance.]]></description><guid isPermaLink="false">559ed8de-7e83-4caa-aef1-f2b5fd7faa01</guid><pubDate>Wed,  6 Feb 2019 06:23:00 +0000</pubDate><dc:creator>LinkedIn Engineering</dc:creator></item><item><title>A Python Interpreter written in Rust</title><link>https://github.com/RustPython/RustPython</link><description><![CDATA[Goals: Full Python-3 environment entirely in Rust (not CPython bindings). A clean implementation without compatibility hacks]]></description><guid isPermaLink="false">2eb82c9e-d427-4beb-9a07-e2fc2f5bb9df</guid><pubDate>Wed,  6 Feb 2019 00:00:00 +0000</pubDate><dc:creator>RustPython</dc:creator></item><item><title>Rust on STM32: Blinking an LED</title><link>https://jonathanklimt.de/electrics/programming/rust-STM32F103-blink/</link><description><![CDATA[All tutorials I found felt somehow outdated and I don't have the board used in the embedded Rust book. So I wanted to document how I got some Rust code running on the BluePill.]]></description><guid isPermaLink="false">5e9f0f9a-99dc-4971-a8a2-9bd2a2cf4cce</guid><pubDate>Wed,  6 Feb 2019 01:00:00 +0100</pubDate><dc:creator>Jonathan Klimt</dc:creator></item><item><title>Hello, sandboxfs 0.1.0</title><link>http://julio.meroh.net/2019/02/hello-sandboxfs-0.1.0.html</link><description><![CDATA[I am pleased to announce that the first release of sandboxfs, 0.1.0, is finally here! You can download the sources and prebuilt binaries from the 0.1.0 release page and you can read the installation instructions for more details.

The journey to this first release has been a long one. sandboxfs was first conceived over two years ago, was first announced in August 2017, showed its first promising results in April 2018, and has been undergoing a rewrite from Go to Rust.]]></description><guid isPermaLink="false">f2388917-1b08-4e6d-9051-daa496814ab1</guid><pubDate>Tue,  5 Feb 2019 09:00:00 -0500</pubDate><dc:creator>Julio Merino</dc:creator></item><item><title>Comparing C and Rust network protocol exercises - Ayende @ Rahien</title><link>https://ayende.com/blog/185859-A/comparing-c-and-rust-network-protocol-exercises?Key=bd1ba87d-6e7e-4739-824d-0ca6fc232b05</link><description><![CDATA[Almost by accident, it turned out that I implemented a pretty simple, but non trivial task in both C and Rust and blogged about them. Now that I’m done with both of them, I thought it would be interesting to talk about the differences in the experiences. The Rust version clocks at exactly 400 lines of code and uses 12 external crates. The C version has 911 lines of C code and another 140 lines in headers and depends on libuv and openssl.]]></description><guid isPermaLink="false">756d2f52-51dd-4408-ae79-3b17c02849e3</guid><pubDate>Tue,  5 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Ayende Rahien</dc:creator></item><item><title>Mod player in Rust - part 3. Audio and threads</title><link>https://www.codeslow.com/2019/02/mod-player-in-rust-part-3-audio-and.html</link><description><![CDATA[I finished my last post with having a fully parsed mod file in memory and ready to be played. By the end of this post I want to get the code into a state where the main thread lets the user pick instruments from the mod file and play them back on the audio thread.]]></description><guid isPermaLink="false">fee5c201-613a-4b03-832a-369ceb788400</guid><pubDate>Mon,  4 Feb 2019 14:42:00 -0800</pubDate><dc:creator>Jani Peltonen</dc:creator></item></channel></rss>