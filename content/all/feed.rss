<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - All Posts</title><link>https://readrust.net/</link><description>All Posts posts on Read Rust</description><item><title>Fullstack React: Rust, React and WebAssembly</title><link>https://www.fullstackreact.com/articles/rust-react-and-web-assembly/</link><description><![CDATA[A tutorial on how to compile Rust to WebAssembly and integrate it into a React application]]></description><guid isPermaLink="false">c700cc05-51d7-4599-b545-37f4db96f347</guid><pubDate>Tue,  3 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Anders Pitman</dc:creator></item><item><title>Learning SIMD with Rust by finding planets</title><link>https://medium.com/@Razican/learning-simd-with-rust-by-finding-planets-b85ccfb724c3</link><description><![CDATA[Rust 1.27.0 has brought SIMD (Single Instruction Multiple Data), also known as vectorization, to stable Rust. If you read the announcement, you will see that SIMD should bring performance enhancements to our applications if we learn how to use it properly. But, for that let's first dive into how SIMD works.]]></description><guid isPermaLink="false">98469a08-b569-403f-a3ed-6049ff91c0b1</guid><pubDate>Mon,  2 Jul 2018 20:47:57 +0000</pubDate><dc:creator>Iban Eguia</dc:creator></item><item><title>Moving from the shell to Rust with commandspec</title><link>http://timryan.org/2018/07/02/moving-from-the-shell-to-rust-with-commandspec.html</link><description><![CDATA[Almost every project I’ve worked on has grown a shell script named “build.sh”, and not much later a “test.sh” and “run.sh”. At this point, you have to make a decision as a developer whether your goal is to accidentally reinvent make or if your codebase’s needs are better met by an executable to manage your workflow.]]></description><guid isPermaLink="false">504568b7-fb85-4ed5-b94d-1c96333d2c64</guid><pubDate>Mon,  2 Jul 2018 15:50:00 +0000</pubDate><dc:creator>Tim Ryan</dc:creator></item><item><title>Introducing PrrrStack</title><link>https://medium.com/@ccrsh/introducing-prrrstack-d617ff518ba6</link><description><![CDATA[This is the first part in a two-part introductory series to PRRR Stack (Postgres, Rust, Rocket, React) application.]]></description><guid isPermaLink="false">fc0e0a2b-6cec-420d-803c-2ac8770fc9e8</guid><pubDate>Mon,  2 Jul 2018 13:09:58 +0000</pubDate><dc:creator>Crash Springfield</dc:creator></item><item><title>Our Vision for wasm-bindgen</title><link>https://rustwasm.github.io/2018/07/02/vision-for-wasm-bindgen.html</link><description><![CDATA[The last blog post laid out the Rust and WebAssembly domain working group’s overall vision for Rust and WebAssembly. In this blog post, we will dive into the details of wasm-bindgen, the future we envision for it, and how you can help us build that future.]]></description><guid isPermaLink="false">7d6ed3b9-1295-4331-879f-514cbff7e5ba</guid><pubDate>Mon,  2 Jul 2018 00:00:00 +0000</pubDate><dc:creator>rustwasm</dc:creator></item><item><title>Logistic Regression in Rust</title><link>http://paulkernfeld.com/2018/07/01/logistic-regression-in-rust.html</link><description><![CDATA[This weekend, I implemented logistic regression in Rust. For me, the most interesting parts were learning how to implement a stopping condition and how to automatically set a step size.]]></description><guid isPermaLink="false">b63f8372-7dbc-4bf5-9ab3-e13a95a011be</guid><pubDate>Sun,  1 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Paul Kernfeld</dc:creator></item><item><title>Scripting Language Cleanup</title><link>https://www.anthropicstudios.com/2018/06/30/language-cleanup/</link><description><![CDATA[When we built the original Monsters and Sprites demo, we only had 9 days to get it working before the Playcrafting expo we had signed up for, so we had to cut a lot of corners. Since then I’ve been doing bug fixes and working on a lot of miscellaneous engine/language features that I either couldn’t get done in time for the demo, or didn’t realize were important until I started building it. We’ve made a few game updates since then (we now have sound!), but this post is specifically going to explore some language updates I’ve made.]]></description><guid isPermaLink="false">3b8f7264-75f2-4483-bb45-16770a899291</guid><pubDate>Sat, 30 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Mason Remaley</dc:creator></item><item><title>Programming Servo: an HTTP cache</title><link>https://medium.com/programming-servo/programming-servo-an-http-cache-edb52a7f267f</link><description><![CDATA[In our previous post, we saw how combining channels with an event-loop could be a useful technique to ‘drive’ the concurrent logic of your system, and it was hinted at that shared mutable state might be more complicated. A good example of such ‘shared mutable state’ in Servo is the HTTP cache.]]></description><guid isPermaLink="false">9497ed78-6b59-4dd0-b1f8-725ca3c628d2</guid><pubDate>Fri, 29 Jun 2018 04:33:13 +0000</pubDate><dc:creator>Gregory Terzian</dc:creator></item><item><title>NES Emulator, Part 2: I sort of know what I’m doing</title><link>https://medium.com/@ltriant/nes-emulator-part-2-i-sort-of-know-what-im-doing-f64d5e61caed</link><description><![CDATA[In my first post about my journey to the center of the NES, I was at the point where I was still working on the CPU; implementing new addressing modes and instructions as I made my way through the nestest ROM. Well, I finally finished the CPU, including a handful of the illegal opcodes. The last of the illegal opcodes just need some placeholders, because, as I understand it, very few games use them.]]></description><guid isPermaLink="false">13dc5703-c3a5-4c10-b3a5-aa53c382c940</guid><pubDate>Fri, 29 Jun 2018 02:24:51 +0000</pubDate><dc:creator>Luke Triantafyllidis</dc:creator></item><item><title>[1807.00067] Josephine: Using JavaScript to safely manage the lifetimes of Rust data</title><link>https://arxiv.org/abs/1807.00067</link><description><![CDATA[This paper is about the interface between languages which use a garbage collector and those which use fancy types for safe manual memory management. Garbage collection is the traditional memory management scheme for functional languages, whereas type systems are now used for memory safety in imperative languages. We use existing techniques for linear capabilities to provide safe access to copyable references, but the application to languages with a tracing garbage collector, and to data with explicit lifetimes is new. This work is related to mixed linear/non-linear programming, but the languages being mixed are Rust and JavaScript.]]></description><guid isPermaLink="false">04445b84-5c91-467e-840c-45df1765c4e6</guid><pubDate>Fri, 29 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Alan Jeffrey</dc:creator></item><item><title>Programming Servo: The script event-loop</title><link>https://medium.com/@polyglot_factotum/programming-servo-the-script-event-loop-be687b985b3e</link><description><![CDATA[One thing I have come to appreciate over time in the design of Servo, is the concurrency story. Basically, it’s pretty much all done using channels(and their multi-process counterpart).

What is so great about channels vs shared mutable state? One thing is, it makes it easier to reason about how various threads will synchronize their behavior as they go on about their business.

The way it’s done in Servo is by combining event-loops with multi-threading/processing. What does that mean?]]></description><guid isPermaLink="false">fa4c6fb5-3c9e-4831-86b1-3585c08398de</guid><pubDate>Thu, 28 Jun 2018 05:17:48 +0000</pubDate><dc:creator>Gregory Terzian</dc:creator></item><item><title>Nebulet: More answers</title><link>https://lsneff.me/more-answers.html</link><description><![CDATA[Over the last couple of weeks, Nebulet has progressed signifigantly. Because of that, I think it’s time to talk about why I made certain decisions when designing and writing Nebulet.]]></description><guid isPermaLink="false">3b9229a6-90a7-48f7-983f-c2eb1117115e</guid><pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Lachlan Sneff</dc:creator></item><item><title>A Self-ish Bug</title><link>https://llogiq.github.io/2018/06/28/self-bug.html</link><description><![CDATA[I recently found a bug in mutagen: The “exchange arguments” mutation was actually ineffective. I was in the process of refactoring the code to pull coverage reporting into the mutagen calls (to reduce the amount of code generated), so the report_coverage call was to go away anyway. Except this bug masked another, more insiduous one: When I refactored, I found that one of the test would no longer compile methods with self arguments, running into Error E0424 (self keyword used in static method). Consider me confused.]]></description><guid isPermaLink="false">696ba27d-cdab-400f-9e86-a138422c2154</guid><pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>New Photon Release of Eclipse IDE Ships With Full Rust Support | </title><link>https://www.eclipse.org/org/press-release/20180627_new-photon-release-of-eclipse-ide-ships-with-full-rust-support.php</link><description><![CDATA[The release delivers native Eclipse IDE experiences for Rust and C# through Language Server based plugins. The Language Server Protocol (LSP) ecosystem delivers editing support for popular and emerging programming languages. Combined with the move to a quarterly rolling release cadence, the LSP focus demonstrates a commitment to keeping pace with evolving developer and commercial needs.]]></description><guid isPermaLink="false">19aba600-95ff-4ba2-920f-0db67b3755e4</guid><pubDate>Wed, 27 Jun 2018 00:00:00 +0000</pubDate><dc:creator>The Eclipse Foundation</dc:creator></item><item><title>RSoC: Porting Redox to AArch64–0x01</title><link>https://medium.com/@wizofe/rsoc-porting-redox-to-aarch64-0x01-3dee87644c97</link><description><![CDATA[All excited. A first calendar entry to describe my attempt on arm64 support in Redox OS. Specifically, looking into the Raspberry Pi2/3b/3+(all of them having a Cortex-A53 ARMv8 64-bit microprocessor, although for all my experiments I am going to use the Raspberry Pi 3b.]]></description><guid isPermaLink="false">44759beb-04e0-4524-898b-5ba007a80e10</guid><pubDate>Tue, 26 Jun 2018 17:26:31 +0000</pubDate><dc:creator>ioannis valasakis</dc:creator></item><item><title>Why choose Rust?</title><link>https://blog.passfort.com/why-choose-rust/</link><description><![CDATA[Many of the candidates we interview for a position at PassFort are intrigued by the fact that we use Rust, a language which is only three years old (since its 1.0 release).

Despite its relatively young age, Rust has been voted the “most loved” language in the StackOverflow developer survey every one of those three years - an impressive feat!

However, it’s not enough for a language to be well liked: the programming ecosystem changes rapidly, and many of these developers are rightly afraid to jump blindly onto the latest bandwagon. We chose Rust not because it is popular, but because we believe it is the best tool for the job we have to do, and I hope to explain that reasoning now.]]></description><guid isPermaLink="false">e9ac81fa-8018-4bb1-91a2-cfd0b705f780</guid><pubDate>Tue, 26 Jun 2018 16:00:00 +0000</pubDate><dc:creator>PassFort</dc:creator></item><item><title>Zapper: A Very Fast Templating Engine</title><link>https://ceres1.space/posts/zapper/</link><description><![CDATA[Thirty times faster than Handlebars, half the features! I am introducing a new templating engine for Rust that is designed to be robust and very fast! Why Zapper? Runtime templating is amazing, since you can reload templates on the fly or even allow users to provide their own templates, yet runtime templating engines are rarely fast. Templates that are statically compiled into your application can be super fast, but are completely inflexible. Recompiling and restarting your application just to change a template is especially boring. Zapper combines the flexibility of runtime templating with great performance!]]></description><guid isPermaLink="false">989d2bb2-c78b-4844-92ab-45509164c182</guid><pubDate>Mon, 25 Jun 2018 19:28:22 -0700</pubDate><dc:creator>Josh Leverette</dc:creator></item><item><title>Better HTTP Upgrades with hyper</title><link>http://seanmonstar.com/post/175280388657/better-http-upgrades-with-hyper</link><description><![CDATA[Better HTTP Upgrades with hyper It’s been possible to handle HTTP Upgrades (like Websockets) in hyper if you made use of the low-level APIs in the server and client, but it wasn’t especially nice to...]]></description><guid isPermaLink="false">faf1a345-9eaf-4d00-a7f7-9fa3afaa51ac</guid><pubDate>Tue, 26 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Sean McArthur</dc:creator></item><item><title>Sustainability</title><link>https://yakshav.es/sustainability/</link><description><![CDATA[I’m at a fork again: my FOSS project responsibilities have grown so much that they encroach on other parts of my life. This includes time I should spend with company, clients and personal live. It leaves me with two options: shed many of my projects (as mxsash does) or find ways of making this more sustainable. Retreating would also mean that on the surviving projects, others would have to cover the resulting gap, often with less skills or experience.]]></description><guid isPermaLink="false">0e7e0d63-d08d-4b38-812b-d67b5b7f9d43</guid><pubDate>Tue, 26 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Florian Gilcher</dc:creator></item><item><title>Rust Thermometer – Part 2</title><link>https://www.robertvojta.com/rust-thermometer-part-2/</link><description><![CDATA[Thermometer adventure continuous with some progress over the last weekend. Little bit of refactoring, rewiring, X.org, matchbox, Piston, ... and some ugly (but working!) UI :)]]></description><guid isPermaLink="false">e063329a-32df-4f01-92b0-38d5999f9a6e</guid><pubDate>Mon, 25 Jun 2018 13:51:53 +0000</pubDate><dc:creator>Robert Vojta</dc:creator></item><item><title>Building an Event Sourcing Crate for Rust</title><link>https://medium.com/@KevinHoffman/building-an-event-sourcing-crate-for-rust-2c4294eea165</link><description><![CDATA[In one of my recent blog posts, I talked about Event Sourcing with Aggregates in Rust. In that post, I was just beginning to explore how the Rust language and its strongly typed native data structures would allow me to express event sourcing concepts and primitives. I have now created an initial version of an Event Sourcing crate that you can explore on crates.io]]></description><guid isPermaLink="false">ced93c25-32fb-4e74-a5e4-5fb7cd60e8ee</guid><pubDate>Mon, 25 Jun 2018 13:30:42 +0000</pubDate><dc:creator>Kevin Hoffman</dc:creator></item><item><title>What I Learned: Porting Dateutil Parser to Rust</title><link>https://speice.io/2018/06/dateutil-parser-to-rust.html</link><description><![CDATA[Hi. I’m Bradlee. I’ve mostly been a lurker in Rust for a while, making a couple small contributions here and there. So launching dtparse feels like nice step towards becoming a functioning member of society. But not too much, because then you know people start asking you to pay bills, and ain’t nobody got time for that.

But I built dtparse, and you can read about my thoughts on the process. Or don’t. I won’t tell you what to do with your life (but you should totally keep reading).]]></description><guid isPermaLink="false">9c9c6dda-6538-4088-8123-e1ad213082e5</guid><pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Bradlee Speice</dc:creator></item><item><title>Project Ice Puzzle</title><link>http://www.matthewmichelotti.com/games/project_ice_puzzle/</link><description><![CDATA[This game was coded in Rust and is playable in web browsers by means of WebAssembly, WebGL and Howler.js. The software I developed is partly open source in the form of Gate, which is the Rust library that powers this game and can power other similar games. Special thanks to the tools I used to create assets: Gimp, FL Studio and BFXR.]]></description><guid isPermaLink="false">645c96b0-5f66-4c4d-a8ee-d145298bc63d</guid><pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Matthew Michelotti</dc:creator></item><item><title>Our Vision for Rust and WebAssembly</title><link>https://rustwasm.github.io/2018/06/25/vision-for-rust-and-wasm.html</link><description><![CDATA[Rust and WebAssembly can combine in many delightful ways. To consolidate our efforts and have the largest, most-positive impact we can, the Rust and WebAssembly domain working group is focusing on one vision:

Surgically inserting Rust compiled to WebAssembly should be the best choice for speeding up the most performance-sensitive JavaScript code paths. Do not throw away your existing code base, because Rust plays well with others. Regardless of whether you are a Rust or Web developer, your natural workflow shouldn’t change because Rust compiled to wasm integrates seamlessly into your preferred tools.

This blog post will expand on these aspirations and describe where we stand in relation to them right now. In a series of follow up posts, we will talk about the next steps for each major component of the Rust and WebAssembly ecosystem.]]></description><guid isPermaLink="false">33738eab-7a95-4e28-b819-f22f8362100e</guid><pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate><dc:creator>rustwasm</dc:creator></item><item><title>A Rusty Go at Channels</title><link>https://gsquire.github.io/static/post/a-rusty-go-at-channels/</link><description><![CDATA[Channels Channels are a useful concurrency primitive that enable separate processes to safely communicate without the need for explicit synchronization. The term processes is used here to loosely describe independent threads of execution within a program. This can be an OS level thread or a runtime level thread. Channels can be seen as a pipe to connect these processes and allow them to share memory with one another. For example a program could spawn any number of processes along with a channel to transmit results that it gathers.]]></description><guid isPermaLink="false">0a781f91-aca4-47ac-81d4-f9f606f33d0f</guid><pubDate>Sun, 24 Jun 2018 10:44:31 -0700</pubDate><dc:creator>Garrett Squire</dc:creator></item><item><title>devtop: Command line parser</title><link>https://medium.com/journey-to-rust/devtop-command-line-parser-f08b72b02bea</link><description><![CDATA[As operator I found that existing tooling fails with large number of unusual devices. If you have server with >100 virtual machines, and each virtual machines have one or more additional disk and a few network interfaces, it’s hard to find which VM cause stress on the server. Normal atop simply couldn’t cope with hundreds of tap/tun interfaces, multitude of block devices, etc. When I found that I have no proper tooling (as an operator) I wrote a shabby tools to do my job: they are calling blktop and ifstop. Both were written dirty and fast, and they does not follow the usual Python conventions (but they work as standalone binaries). They do their job, and normally I would say that’s enough. But those utilities are simple and have no big complications under the hood, so they are perfect candidates for rewriting in Rust for the sake of writing in Rust (I’m learning it!). I decide to combine them into a single utility: devtop, which I want to develop properly, according to Rust conventions, and through all aspects of packaging.]]></description><guid isPermaLink="false">f6f626f4-47ff-427c-8d44-b63c457bed46</guid><pubDate>Sun, 24 Jun 2018 14:21:28 +0000</pubDate><dc:creator>George Shuklin</dc:creator></item><item><title>Oxy - A Security Focused Remote Access Tool</title><link>https://oxy-secure.app/</link><description><![CDATA[It's like SSH, but more secure, and with cool modern features. It is not an implementation of SSH, it is a new, modern protocol.]]></description><guid isPermaLink="false">81e1a990-ce97-4ab6-a943-720330b5db6e</guid><pubDate>Sun, 24 Jun 2018 23:58:43 +1000</pubDate><dc:creator>Jenna Magius</dc:creator></item><item><title>Compiler fuzzing, part 1</title><link>http://www.vegardno.net/2018/06/compiler-fuzzing.html</link><description><![CDATA[Much has been written about fuzzing compilers already, but there is not a lot that I could find about fuzzing compilers using more modern fuzzing techniques where coverage information is fed back into the fuzzer to find more bugs.

If you know me at all, you know I'll throw anything I can get my hands on at AFL. So I tried gcc. (And clang, and rustc -- but more about Rust in a later post.)]]></description><guid isPermaLink="false">34e39003-edb1-4232-ad2a-aae9d4868d81</guid><pubDate>Sun, 24 Jun 2018 15:02:00 +0200</pubDate><dc:creator>Vegard</dc:creator></item><item><title>Rust with Rocket + Elm running on Heroku</title><link>http://ethanfrei.com/posts/rust-with-rocket-elm-running-on-heroku.html</link><description><![CDATA[I had this goal of making a web app that was very fast, stable and easy to deploy. This is what I was hoping to accomplish: strongly typed server-side and client-side languages (Rust & Elm respectively), push-button deployments to the cloud with free hosting initially, and sub-second response times for API calls and page loads. With this setup, I think I'm well on my way to accomplishing each of these.]]></description><guid isPermaLink="false">f8a137b7-ce7d-4553-bcec-6170350dc1f2</guid><pubDate>Sun, 24 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Ethan Frei</dc:creator></item><item><title>Making Arc more atomic</title><link>https://vorner.github.io/2018/06/24/arc-more-atomic.html</link><description><![CDATA[This is a story of a tiny feature I was missing in Rust… so I created it (partly because I like the feature, because it felt wrong for Rust not to have it, but mostly for the practice and fun of beating a hard and interesting problem). You can read the story if you are interested about the behind the scenes, about the feature itself, how to use it or just for fun ☺.]]></description><guid isPermaLink="false">03d374fc-9500-42d8-8515-7f98447fd62a</guid><pubDate>Sun, 24 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Michal &apos;vorner&apos; Vaner</dc:creator></item><item><title>Rust 2018: an early preview</title><link>https://internals.rust-lang.org/t/rust-2018-an-early-preview/7776</link><description><![CDATA[The Rust teams having been working hard to implement features of the 2018 edition. Today we have reached an important milestone: we are announcing that we have an alpha-quality preview of the 2018 edition ready for testing and feedback.

The preview presents a great opportunity for those of you using the stable channel to switch to nightly and try out how it feels to code in the new edition, both to help us fix bugs and to provide feedback – positive and negative – on features. Unfortunately, today’s nightly doesn’t work due to infrastructure issues, so you’ll need to run rustup install nightly-2018-06-20 in order to get a nightly that’ll work. If you’re already on the nightly channel, it’s likely that there’s no need to update the compiler.]]></description><guid isPermaLink="false">698090f0-fa77-43b5-aaed-dcd2b71d3c39</guid><pubDate>Sat, 23 Jun 2018 08:19:19 +1000</pubDate><dc:creator>Rust Team Members</dc:creator></item><item><title>Musing About Communities Size And Activity</title><link>https://ervin.ipsquad.net/2018/06/22/musing-about-communities-size-and-activity/</link><description><![CDATA[I wanted to take a very quick peak at Rust. It's very different from our previous cases, no application or frameworks in the traditional sense but a language. It seems very popular toward developers using it, I'm personally interested in it hence why it is in that post.]]></description><guid isPermaLink="false">85a6b729-6bb3-4dc0-9a15-80ba9ff44f68</guid><pubDate>Fri, 22 Jun 2018 19:36:00 +0200</pubDate><dc:creator>Kevin Ottens</dc:creator></item><item><title>Rust review: The ecosystem</title><link>http://julio.meroh.net/2018/06/rust-review-ecosystem.html</link><description><![CDATA[In this part of the review, I would like to focus on Rust’s ecosystem: in other words, how Rust plays with other parts of a functioning system and how Rust’s standard library vs. external libraries interact with each other. There are a lot of pieces to cover in these areas and they have left me with mixed feelings. Let’s look at some.]]></description><guid isPermaLink="false">295dac4f-f095-4d04-b6ee-a6a2870cc7fb</guid><pubDate>Fri, 22 Jun 2018 09:00:00 -0400</pubDate><dc:creator>Julio Merino</dc:creator></item><item><title>Writing Python Extensions In Rust Using PyO3</title><link>https://www.benfrederickson.com/writing-python-extensions-in-rust-using-pyo3/</link><description><![CDATA[I've been writing some code in Rust recently, and I thought it would be cool if I could take some of this Rust code and provide it as a native extension that I can call from Python. It turns out there are some amazing tools like PyO3 that make it easy to write fully featured Python extensions in Rust, with considerably less effort than writing a CPython extension manually.

To test out PyO3 I wrote a small Python extension in Rust, and I thought I would share some of the tips and tricks I encountered in getting this going. This post aims to serve as a quick tutorial showing how to write extensions in Rust, talking about why you might want to use something more powerful than just exposing a C library called using CFFI, and how PyO3 lets you write Python aware extensions in Rust. ]]></description><guid isPermaLink="false">afc3d2f1-e848-4c25-af60-89cf7209b3ba</guid><pubDate>Thu, 21 Jun 2018 00:00:00 -0700</pubDate><dc:creator>Ben Frederickson</dc:creator></item><item><title>Generic associated types in iterators</title><link>https://boiethios.gitlab.io/blog/2018-06-21_GATs_iterators.html</link><description><![CDATA[In this article, I want to explain the term Generic Associated Types through a concrete example. I noticed that people (especially in video games development) need some tools to iterate in various manners mutably, efficiently and safely. I tried to write some convenient iterators over vectors and slices that solve those problems, but finally, I understood that some tools cannot be written with std::iter::Iterator. Doing so led me to the comprehension of generic associated types that I will abbreviate as GATs in this article. I will explain here what GATs are and why they are needed.]]></description><guid isPermaLink="false">6c71975e-3550-410a-99e7-2ee9635fb0e6</guid><pubDate>Thu, 21 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Boiethios</dc:creator></item><item><title>Announcing Rust 1.27</title><link>https://blog.rust-lang.org/2018/06/21/Rust-1.27.html</link><description><![CDATA[This release has two big language features that people have been waiting for: SIMD, and dyn Trait. Additionally there is support for searching the Rust books, and a new book about rustc.]]></description><guid isPermaLink="false">41f94ae9-ac3a-42fe-bc78-fbc6dab42d85</guid><pubDate>Thu, 21 Jun 2018 00:00:00 +0000</pubDate><dc:creator>The Rust Core Team</dc:creator></item><item><title>Streaming gRPC with Rust</title><link>https://medium.com/@KevinHoffman/streaming-grpc-with-rust-d978fece5ef6</link><description><![CDATA[Lately I’ve been working on a side project that involves aggregating the indexes of media libraries and allowing one library to “lend” a file to another. For example, I might use this system if I want my home tower to “lend” a file to my laptop before I get on a plane. I’ll be committing my work-in-progress on this project to github shortly (just want to get an MVP working first and do some refactoring), but I thought I would take a step back for a moment and share my thoughts on one aspect of this project: gRPC. In particular: gRPC streaming.]]></description><guid isPermaLink="false">87c1e68b-e1e6-44d5-be4b-212eb2bdc88f</guid><pubDate>Wed, 20 Jun 2018 17:43:39 +0000</pubDate><dc:creator>Kevin Hoffman</dc:creator></item><item><title>Rust Thermometer – Part 1</title><link>https://www.robertvojta.com/rust-thermometer-part-1/</link><description><![CDATA[I’ve decided to build a thermometer from scratch. I know, I can buy it, but it’s not fun. I found it as a perfect occasion to please my wife (she wants it) and to try new things. What new things? Mainly resin.io and resinOS.]]></description><guid isPermaLink="false">d93b968d-f8fb-4ba9-b7eb-1879ec63807d</guid><pubDate>Wed, 20 Jun 2018 09:23:29 +0000</pubDate><dc:creator>Robert Vojta</dc:creator></item><item><title>Proposal for a staged RFC process</title><link>http://smallcultfollowing.com/babysteps/blog/2018/06/20/proposal-for-a-staged-rfc-process/</link><description><![CDATA[I consider Rust’s RFC process one of our great accomplishments, but it’s no secret that it has a few flaws. At its best, the RFC offers an opportunity for collaborative design that is really exciting to be a part of. At its worst, it can devolve into bickering without any real motion towards consensus. If you’ve not done so already, I strongly recommend reading aturon’s excellent blog posts on this topic.

The RFC process has also evolved somewhat organically over time. What began as “just open a pull request on GitHub” has moved into a process with a number of formal and informal stages (described below). I think it’s a good time for us to take a step back and see if we can refine those stages into something that works better for everyone.]]></description><guid isPermaLink="false">220b4649-e853-4f07-9773-e4ae3d286a4f</guid><pubDate>Wed, 20 Jun 2018 00:00:00 -0400</pubDate><dc:creator>Niko Matsakis</dc:creator></item><item><title>Finda Websocket Architecture</title><link>https://keminglabs.com/blog/finda-websocket-architecture/</link><description><![CDATA[Finda lets you search and instantly switch between tabs in browsers like Firefox and Chrome and editors like Sublime Text and Visual Studio Code. It does this by communicating with these programs over local websocket connections. This article describes the design tradeoffs of this system, focusing on Rust implementation details that may be helpful to others building similar systems.]]></description><guid isPermaLink="false">b93a3070-a495-46de-a9e1-a1c650cafec3</guid><pubDate>Wed, 20 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Kevin J. Lynagh</dc:creator></item><item><title>Optimising path tracing: the last 10%</title><link>https://bitshifter.github.io/blog/2018/06/20/the-last-10-percent/</link><description><![CDATA[In my last post on optimising my Rust path tracer with SIMD I had got withing 10% of my performance target, that is Aras’s C++ SSE4.1 path tracer. From profiling I had determined that the main differences were MSVC using SSE versions of sinf and cosf and differences between Rayon and enkiTS thread pools. The first thing I tried was implement an SSE2 version of sin_cos based off of Julien Pommier’s code that I found via a bit of googling. This was enough to get my SSE4.1 implementation to match the performance of Aras’s SSE4.1 code. I had a slight advantage in that I just call sin_cos as a single function versus separate sin and cos functions, but meh, I’m calling my performance target reached.

The other part of this post is about Rust’s runtime and compile time CPU feature detection and some wrong turns I took along the way.]]></description><guid isPermaLink="false">495d9d83-2572-43cb-8f9d-c5c404ab83fe</guid><pubDate>Wed, 20 Jun 2018 00:00:00 +0000</pubDate><dc:creator>bitshifter</dc:creator></item><item><title>Building better compression together with DivANS</title><link>https://blogs.dropbox.com/tech/2018/06/building-better-compression-together-with-divans/</link><description><![CDATA[Compressing your files is a good way to save space on your hard drive. At Dropbox’s scale, it’s not just a good idea; it is essential. Even a 1% improvement in compression efficiency can make a huge difference. That’s why we conduct research into lossless compression algorithms that are highly tuned for certain classes of files and storage, like Lepton for jpeg images, and Pied-Piper-esque lossless video encoding. For other file types, Dropbox currently uses the zlib compression format, which saves almost 8% of disk storage.

We introduce DivANS, our latest open-source contribution to compression, in this blog post.]]></description><guid isPermaLink="false">ff081914-cb16-4004-bc20-53e494477b8c</guid><pubDate>Tue, 19 Jun 2018 16:00:24 +0000</pubDate><dc:creator>Daniel Reiter Horn and Jongmin Baek</dc:creator></item><item><title>Fast and Simple Rendering in Rust using Proc Macros</title><link>https://medium.com/@MertzAlertz/fast-and-simple-rendering-in-rust-using-proc-macros-f0d919eb6475</link><description><![CDATA[I’ve been working on a project called Thruster recently, and needed a way that a developer could reasonably use templates. Thruster is a middleware based web server written in Rust (get it, th-rust-er? I’m working on my tight 5 for amateur night at The Apollo,) and as such, I needed a way to load HTML templates and insert variables into them in a performant way. Rather than poking around the numerous existing libraries and choosing one made by someone I don’t know — stranger danger! — I decided to make it myself. This article is about that journey, the unbelievably thrilling adventures of writing my first proc_macro_derive in Rust.]]></description><guid isPermaLink="false">31acdf03-3f59-4102-81ba-edafd6f2cfad</guid><pubDate>Tue, 19 Jun 2018 13:22:54 +0000</pubDate><dc:creator>Pete Mertz</dc:creator></item><item><title>Extreme benchmark feedback using Gitlab CI</title><link>https://www.rubdos.be/linux/gitlab/automation/benchmarks/rust/2018/06/19/extreme-benchmark-feedback.html</link><description><![CDATA[I am quite notorious for exploiting Gitlab’s CI. Ever since I started playing with it at the start of 2016, I tended to make things worse.]]></description><guid isPermaLink="false">c1d20548-b510-4452-9d30-8088b65f626a</guid><pubDate>Tue, 19 Jun 2018 13:18:00 +0000</pubDate><dc:creator>Ruben De Smet</dc:creator></item><item><title>Rust review: The book</title><link>http://julio.meroh.net/2018/06/rust-review-book.html</link><description><![CDATA[“The Rust Programming Language” is one of the free books that the community has put together to teach the language. The book does a good job in general, but there are some things that could be better. Let’s cover these, but first, some background.]]></description><guid isPermaLink="false">0122445e-8a19-4a52-bcd6-4ee7e55feb7c</guid><pubDate>Tue, 19 Jun 2018 09:00:00 -0400</pubDate><dc:creator>Julio Merino</dc:creator></item><item><title>Using Rust Code in a C/C++ Project with CMake</title><link>https://blog.devolutions.net/2018/06/insider-series-using-rust-code-in-a-cc-project-with-cmake</link><description><![CDATA[I am currently working on Wayk Now written in C for the most part. We recently started writing new code for it in Rust which I’m super excited about.

 As we needed a way to integrate this code in our CMake build1, we wrote a set of modules for CMake ]]></description><guid isPermaLink="false">fbc12ece-4e2b-4ee2-b3fb-e55fb54b508e</guid><pubDate>Tue, 19 Jun 2018 12:23:36 +0000</pubDate><dc:creator>Sebastien Duquette</dc:creator></item><item><title>Increasing Rust&apos;s Reach 2018 Prticipants</title><link>http://reach.rust-lang.org/2018/participants</link><description><![CDATA[This year's class of Increasing Rust's Reach participants span 9 timezones and 11 countries. 64% are non-native English speakers, and the group, as a whole, represents fluency in 14+ languages. We're super excited to welcome them to the Rust community!]]></description><guid isPermaLink="false">5d48fc36-98e0-46ee-8c2d-d2d586770ab9</guid><pubDate>Tue, 19 Jun 2018 00:00:00 +0000</pubDate><dc:creator>The Rust Community Team</dc:creator></item><item><title>A Trick For Test Maintenance</title><link>https://matklad.github.io/2018/06/18/a-trick-for-test-maintenance.html</link><description><![CDATA[This is a post about an interesting testing technique which feels like it should be well known. However, I haven’t seen it mentioned anywhere. I don’t even have a good name for it, I’ve semi-discovered it in the wild. If you know how this thing is called, please leave a comment!]]></description><guid isPermaLink="false">4548e0ef-697b-414c-8bf5-9a63a707bafb</guid><pubDate>Mon, 18 Jun 2018 15:00:16 +0000</pubDate><dc:creator>Aleksey Kladov</dc:creator></item><item><title>Running Rust and FreeRTOS on the PADI IoT Stamp</title><link>https://medium.com/@ly.lee/running-rust-and-freertos-on-the-padi-iot-stamp-fb36c5ef4844</link><description><![CDATA[In this article we’ll explore a better way to build and test programs for microcontroller platforms. Specifically we’ll look at Rust, FreeRTOS and Visual Studio Code. And how I made them run on the PADI IoT Stamp.]]></description><guid isPermaLink="false">fb7909fb-5c7d-4360-a9fe-4620e04262d8</guid><pubDate>Mon, 18 Jun 2018 05:45:28 +0000</pubDate><dc:creator>Lup Yuen Lee</dc:creator></item><item><title>Writing an OS in Rust: Double Faults</title><link>https://os.phil-opp.com/double-fault-exceptions/</link><description><![CDATA[In this post we explore double faults in detail. We also set up an Interrupt Stack Table to catch double faults on a separate kernel stack. This way, we can completely prevent triple faults, even on kernel stack overflow.]]></description><guid isPermaLink="false">e11a6e53-3315-44c0-a23f-7f0217019c55</guid><pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Philipp Oppermann</dc:creator></item><item><title>Rust + Diesel + GitLab + CI</title><link>https://noyez.gitlab.io/post/2018-06-15-rust-plus-diesel-plus-gitlab/</link><description><![CDATA[It is very straightforward to get Rust projects to build within a CI environment. This post is going to take that build process one small step further, we’re going to build a Rust project that uses the Diesel ORM. This adds a step of complexity since to compile a Diesel project you need to have a postgresql database accessible if you’re using the infer_schema!() macro.]]></description><guid isPermaLink="false">67f2f6f8-75f9-458c-969f-4bcbe9c0223f</guid><pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate><dc:creator>noyez</dc:creator></item><item><title>Listening and trust, part 3</title><link>http://aturon.github.io/2018/06/18/listening-part-3/</link><description><![CDATA[In this this post in the listening and trust series, I’m going to talk through one of the most intense discussions the Rust community has had: the module system changes that were part of last year’s ergonomics initiative.]]></description><guid isPermaLink="false">c81413e6-7dc3-4a06-95dc-846a2cfa268a</guid><pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Aaron Turon</dc:creator></item><item><title>Let&apos;s Talk About Vector Graphics (In Rust)</title><link>https://nical.github.io/posts/rustfest-paris-01.html</link><description><![CDATA[I gave a talk about lyon at RustFest Paris. This post is the introduction of the talk, wherein I introduce vector graphics and try to get the audience somewhat excited about it. Things will get technical in the follow-up posts.]]></description><guid isPermaLink="false">edd88db5-3f05-4171-9159-de17a3a4db8a</guid><pubDate>Mon, 18 Jun 2018 00:00:00 +0200</pubDate><dc:creator>Nical</dc:creator></item><item><title>Writing an OS in Rust: CPU Exceptions</title><link>https://os.phil-opp.com/cpu-exceptions/</link><description><![CDATA[In this post, we start exploring CPU exceptions. Exceptions occur in various erroneous situations, for example when accessing an invalid memory address or when dividing by zero. To catch them, we have to set up an interrupt descriptor table that provides handler functions. At the end of this post, our kernel will be able to catch breakpoint exceptions and to resume normal execution afterwards.]]></description><guid isPermaLink="false">e75667af-3d07-40cb-a610-4c7a6786064b</guid><pubDate>Sun, 17 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Philipp Oppermann</dc:creator></item><item><title>Writing a Web API Client in Rust (Part 3)</title><link>https://theomn.com/rust-web-api-client-part-03/</link><description><![CDATA[The 3rd of a multi-part series where we build a small REST client for the Marvel Comics Web API using Rust. This time we focus on how to use the hyper and futures crates to make HTTP requests to a Web API, then use serde to parse JSON data from the response.]]></description><guid isPermaLink="false">4ebce195-067c-45fa-be45-7c589426953b</guid><pubDate>Sun, 17 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Owen Nelson</dc:creator></item><item><title>C2Rust Demonstration</title><link>https://c2rust.com/</link><description><![CDATA[The C2Rust project is being developed by Galois and Immunant. This tool is able to translate most C modules into semantically equivalent Rust code. These modules are intended to be compiled in isolation in order to produce compatible object files. We are developing several tools that help transform the initial Rust sources into idiomatic Rust. ]]></description><guid isPermaLink="false">f12b593d-9a94-4571-8fe8-08ef5059d68f</guid><pubDate>Sun, 17 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Galois and Immunant</dc:creator></item><item><title>Rust Is Not So Hairy</title><link>https://nevi.me/rust-is-not-so-hairy/</link><description><![CDATA[TL;DR I decided to learn Rust on my nth attempt. Writing small programs helped me get stuff done. I converted a Java gRPC service into Rust for comparison I'm super-impressed with Rust's low CPU and memory footprint.]]></description><guid isPermaLink="false">41722089-9cfe-413c-aa51-02c244fb4d67</guid><pubDate>Sat, 16 Jun 2018 14:05:48 +0000</pubDate><dc:creator>Neville</dc:creator></item><item><title>My Emacs Rust IDE</title><link>http://www.admintome.com/blog/my-emacs-rust-ide/</link><description><![CDATA[In this post, I will walk you through configuring an EMACS Rust IDE to get syntax highlighting and code completion for the Rust programming language.]]></description><guid isPermaLink="false">48c70c0e-5ce7-415b-8264-6e7a6dd02a8f</guid><pubDate>Sat, 16 Jun 2018 01:26:03 +0000</pubDate><dc:creator>Bill Ward</dc:creator></item><item><title>Dynamic Casting for Traits</title><link>http://idubrov.name/rust/2018/06/16/dynamic-casting-traits.html</link><description><![CDATA[In Rust, traits are a powerful tool to use polymorphism, both static and dynamic. I’m going to skip the basics about the traits and just link to another blog post with a good explanation about static and dynamic dispatch in Rust: Traits and Trait Objects in Rust.

Instead, I would like to do an experiment of making dynamic dispatch even more dynamic! Like in Java1.]]></description><guid isPermaLink="false">977aa3cd-7136-4d69-84ac-0c15c6396ae4</guid><pubDate>Sat, 16 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Ivan Dubrov</dc:creator></item><item><title>Rust review: The match keyword</title><link>http://julio.meroh.net/2018/06/rust-review-match-keyword.html</link><description><![CDATA[A commonly-acclaimed feature of Rust is its match keyword: a “conditional on steroids”. match lets you take the value of an expression and compare it against a bunch of values—or, more generally, patterns.

As you write and read Rust, you will notice that this keyword is used everywhere because it’s the way to access certain types, like Option values or error codes.]]></description><guid isPermaLink="false">b5fe7539-f996-4c57-9fc1-5fa06b6a68b2</guid><pubDate>Fri, 15 Jun 2018 09:00:00 -0400</pubDate><dc:creator>Julio Merino</dc:creator></item><item><title>MIR-based borrow check (NLL) status update</title><link>http://smallcultfollowing.com/babysteps/blog/2018/06/15/mir-based-borrow-check-nll-status-update/</link><description><![CDATA[I’ve been getting a lot of questions about the status of “Non-lexical lifetimes” (NLL) – or, as I prefer to call it these days, the MIR-based borrow checker – so I wanted to post a status update.

The single most important fact is that the MIR-based borrow check is feature complete and available on nightly. What this means is that the behavior of #![feature(nll)] is roughly what we intend to ship for “version 1”, except that (a) the performance needs work and (b) we are still improving the diagnostics.]]></description><guid isPermaLink="false">c55b518c-125b-4fb9-82c5-08c3367bb6c6</guid><pubDate>Fri, 15 Jun 2018 00:00:00 -0700</pubDate><dc:creator>Niko Matsakis</dc:creator></item><item><title>Running Rust on the GPU with Accel</title><link>https://bheisler.github.io/post/rust-on-the-gpu-with-accel/</link><description><![CDATA[For the past month or so, I’ve been working on a follow-up to my series on Writing a Raytracer in Rust. This time around, I’ll be talking about writing a GPU-accelerated Path Tracer. As always, I’m writing it in Rust - including the GPU kernel code. Compiling Rust for GPUs at this point is difficult and error-prone, so I thought it would be good to start with some documentation on that aspect of the problem before diving into path tracing.]]></description><guid isPermaLink="false">e62fbda5-e357-4870-a483-9dcf833b31ad</guid><pubDate>Thu, 14 Jun 2018 19:00:00 -0600</pubDate><dc:creator>Brook Heisler</dc:creator></item><item><title>Writing an OS in Rust: Integration Tests</title><link>https://os.phil-opp.com/integration-tests/</link><description><![CDATA[In this post we complete the testing picture by implementing a basic integration test framework, which allows us to run tests on the target system. The idea is to run tests inside QEMU and report the results back to the host through the serial port.]]></description><guid isPermaLink="false">d8b1216b-bc74-43c1-9ce3-958e0e2b4154</guid><pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Philipp Oppermann</dc:creator></item><item><title>Conspiracies, Dissemination, and REST APIs</title><link>https://medium.com/@rippinrobr_66849/3-conspiracies-dissemination-and-rest-apis-41858f8d9850</link><description><![CDATA[Welcome to the third post in a series where I share my experience learning Rust. I’m building out a conspiracy theories API to help me get more familiar with Rust and have a little fun. Since I am new to Rust, I welcome all feedback, especially from developers who have been using Rust for quite some time. Leave a comment below or send your feedback via Twitter. Now it’s time to draw the blackout curtains, put on your foil-lined hat on and start serving up conspiracies from a REST API.]]></description><guid isPermaLink="false">36eccf86-2b85-4ffc-b7e7-7af422cb10ac</guid><pubDate>Thu, 14 Jun 2018 12:28:03 +0000</pubDate><dc:creator>Rob Rowe</dc:creator></item><item><title>Nannou open source creative coding framework</title><link>http://nannou.cc/news/hello-nannou/</link><description><![CDATA[Nannou is an open source creative coding framework built in Rust for artists, hackers, designers and devs to express themselves with simple, fast, reliable, portable code.]]></description><guid isPermaLink="false">09393d03-bb17-4f1e-8d5a-5dc8338ff513</guid><pubDate>Thu, 14 Jun 2018 07:24:05 +0000</pubDate><dc:creator>Mitch, Josh, Keenan &amp; Tom</dc:creator></item><item><title>What do you think are the most interesting/exciting projects using Rust?</title><link>https://www.ncameron.org/blog/interesting_projects/</link><description><![CDATA[Last week I tweeted "What do you think are the most interesting/exciting projects using Rust? (No self-promotion :-) )". The response was awesome! Jonathan Turner suggested I write up the responses as a blog post, and here we are.]]></description><guid isPermaLink="false">f6f3b55c-c39c-4366-9de1-ebf3b230ee6c</guid><pubDate>Wed, 13 Jun 2018 16:26:29 +0000</pubDate><dc:creator>Nick Cameron</dc:creator></item><item><title>Rust review: Expressions, expressions, expressions</title><link>http://julio.meroh.net/2018/06/rust-review-expressions.html</link><description><![CDATA[Rust resembles a functional language in many ways although it does not claim to be one. In fact, I have been thinking of Rust as a “pragmatic Haskell” or as a “well-balanced mixture between C++ and Haskell”.

One of the ways the functional aspects show up is via expressions and how pretty much any construct in Rust can be treated as an expression. But before we begin, a little warning: the examples below are, by no means, idiomatic Rust—I just hope they are simple enough to illustrate what I want to show.]]></description><guid isPermaLink="false">8e5085a4-0057-4ed8-81dc-93242e35b6e9</guid><pubDate>Tue, 12 Jun 2018 09:00:00 -0400</pubDate><dc:creator>Julio Merino</dc:creator></item><item><title>From Go to Rust - JSON and YAML</title><link>http://technosophos.com/2018/06/12/from-go-to-rust-json-and-yaml.html</link><description><![CDATA[One of Go's big selling points for me was its novel approach to JSON encoding. Learning about Rust's encoding has made me even more excited. In this post, we'll start with Go's JSON encoder, and then see how Rust does encoding. And we'll even through in some YAML!]]></description><guid isPermaLink="false">79d23f1b-0e7b-4d75-a061-9e5b9930424b</guid><pubDate>Tue, 12 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Matt Butcher</dc:creator></item><item><title>Automatic Type Coercions with Procedural Macros in Rust</title><link>http://willcrichton.net/notes/automatic-type-coercions-macros-rust/</link><description><![CDATA[I briefly demonstrate how to use procedural macros to automatically perform type coercion in Rust, mimicking the behavior of dynamic languages.]]></description><guid isPermaLink="false">4749d178-b87d-4946-b8e2-0a6d17d7495e</guid><pubDate>Tue, 12 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Will Crichton</dc:creator></item><item><title>Traits and Trait Objects in Rust</title><link>https://joshleeb.com/posts/rust-traits-and-trait-objects/</link><description><![CDATA[I’ve been really confused lately about Rust’s trait objects. Specifically when it comes to questions about the difference between &Trait, Box<Trait>, impl Trait, and dyn Trait.]]></description><guid isPermaLink="false">2b4b4efe-3a50-4ceb-ac4c-267b708c2ce8</guid><pubDate>Tue, 12 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Josh Leeb-du Toit</dc:creator></item><item><title>actix – an actor framework for the Rust programming language</title><link>https://simplabs.com/blog/2018/06/11/actix.html</link><description><![CDATA[The “actor model” is the main primitive that powers the Erlang programming language and its descendant, Elixir. It describes a programming model that simplifies the development of concurrent and multi-threaded applications or even applications that run distributed on multiple machines.

The complexity of actors is relatively low, and that is because the complexity is usually hidden in the actor frameworks that are used to run these types of primitives in the end. One example of such an actor framework is actix, which we will have a closer look at now.]]></description><guid isPermaLink="false">a9263a5d-5853-4f5b-8556-28d18dda0f7d</guid><pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Tobias Bieniek</dc:creator></item><item><title>Tarpaulin Past Present Future</title><link>https://xd009642.github.io/2018/06/11/Tarpaulin-past-present-future.html</link><description><![CDATA[Tarpaulin (or cargo-tarpaulin) is a code coverage tool for Rust. Last year was pretty busy with the launch of the project and the rush of issues as people started to use it so this is just a chance to look at what’s new with version 0.6.0 and what’s planned for the rest of this year.]]></description><guid isPermaLink="false">27c8b7ed-32ab-4390-8be8-58678541dfb8</guid><pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate><dc:creator>xd009642</dc:creator></item><item><title>Actix::From(Rocket)</title><link>https://noyez.gitlab.io/post/2018-06-11-rocket-to-actix/</link><description><![CDATA[I was inspired by Nick’s post to migrate my code from Rocket to Actix. I have also been nagged by recent struggles with the nightly compiler and its compatibility with all the other crates that I use and other the platforms that I use; my code runs on 32⁄64 bit arm and 32⁄64 bit x86. When I started using Rocket around a year ago, the nightly compiler was just as stable as the stable compiler, but things have changed as rust is a growing eco system.

For me, once the differences below were addressed, porting the code was relatively straightforward. The vast majority of my code remained the same.]]></description><guid isPermaLink="false">70c7595e-f384-40d3-a8c9-9f00466fe5d5</guid><pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate><dc:creator>noyez</dc:creator></item><item><title>Design Guideline Problem Statement</title><link>https://vorner.github.io/2018/06/10/design-guideline-problem-statement.html</link><description><![CDATA[There were some heated discussions in Rust community as of late. During that discussions, I argued that some best practices for RFC authors would improve both on the results as well as the discussions and I promised to give it a try.]]></description><guid isPermaLink="false">afe4d926-caf9-4709-95f0-3bf0249b60e2</guid><pubDate>Sun, 10 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Michal &apos;vorner&apos; Vaner</dc:creator></item><item><title>Where do Rust threads come from?</title><link>http://squidarth.com/rc/rust/concurrency/2018/06/09/rust-threads-detach.html</link><description><![CDATA[Last week, I wrote a post in which I discussed some of the things that I learned about Rust concurrency. One of the things that I pointed out was that when you spawn a thread within another thread, they both have the main process as their parent.]]></description><guid isPermaLink="false">34b26ba8-daa3-431f-ba53-9c0d9d873459</guid><pubDate>Sat,  9 Jun 2018 09:00:38 -0400</pubDate><dc:creator>Sid Shanker</dc:creator></item><item><title>From ActiveRecord to Diesel</title><link>http://patshaughnessy.net/2018/6/9/from-activerecord-to-diesel</link><description><![CDATA[Recently I needed to run a simple SQL query on a Postgres database and produce a one-off report. I could have done this in 5 minutes using Ruby and ActiveRecord. Instead, I decided to use Rust and Diesel – a language and a tool I hadn’t used before. Instead of 5 minutes it took several hours, but I learned something new. I’ve written up the steps I took here today. Get your mind’s exercise for today and read on to learn how to execute a SQL statement using Rust.]]></description><guid isPermaLink="false">c883f036-9e31-44b2-995a-24b575c524b8</guid><pubDate>Sat,  9 Jun 2018 03:00:00 +0000</pubDate><dc:creator>Pat Shaughnessy</dc:creator></item><item><title>To do a Rust GUI</title><link>https://www.vandenoever.info/blog/2018/06/09/to-do-a-rust-gui.html</link><description><![CDATA[Rust Qt Binding Generator lets you combine Rust code with a Qt1 graphical application. A previous blog shows how to make a simple clock. It’s a good idea to read that post before reading this more advanced post, because in this post we are getting serious.

This blog post shows how to write a to-do application. The data model is a list of to-do items. The source code for this example is available in the folder examples/todos in the Rust Qt Binding Generator repository.]]></description><guid isPermaLink="false">9448ee63-32da-42f1-bd2e-1ef737d9b971</guid><pubDate>Sat,  9 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Jos van den Oever</dc:creator></item><item><title>First Impressions of the Rust Programming Language</title><link>http://jakob.space/blog/post/First+Impressions+of+the+Rust+Programming+Language</link><description><![CDATA[C is almost 50 years old, and C++ is almost 40 years old. While age is usually indicative of mature implementations with decades of optimization under their belts, it also means that the language's feature set is mostly devoid of modern advancements in programming language design. For that reason, you see a great deal of encouragement nowadays to move to newer languages - they're designed with contemporary platforms in mind, rather than working within the limitations of platforms like the PDP-11. Among said "new languages" are Zig, Myrddin, Go, Nim, D, Rust.. even languages like Java and Elixir that run on a virtual machine are occasionally suggested as alternatives to the AOT-compiled C and C++.

I have plans to look into the characteristics that distinguish each and every one of these new programming languages, learning them and documenting my first impressions in the form of blog posts. This post is the beginning of that adventure: my first impressions of Rust.]]></description><guid isPermaLink="false">4ab9c39f-72ed-4b84-a5e7-abe4c594c019</guid><pubDate>Fri,  8 Jun 2018 13:02:33 -0500</pubDate><dc:creator>Jakob</dc:creator></item><item><title>Rust review: Learning curve</title><link>http://julio.meroh.net/2018/06/rust-review-learning-curve.html</link><description><![CDATA[Writing Rust code is not restricted to programming gurus—but there is no denying that the learning curve is steeper than that of other languages. Or is it? In this post, I'll try to convince you that the curve does feel steep, but it isn't when taken into perspective.
Let's first start by stating that learning a language is not the same as learning its syntax. Learning a language involves learning the syntax, of course, but it also involves familiarizing oneself with its common idioms and grabbing a good sense of what the standard libraries provide.]]></description><guid isPermaLink="false">644f8b30-47a3-4da8-b4e9-1b72755d69b0</guid><pubDate>Fri,  8 Jun 2018 09:00:00 -0400</pubDate><dc:creator>Julio Merino</dc:creator></item><item><title>Rust Distilled: An Expressive Tower of Languages</title><link>https://arxiv.org/abs/1806.02693</link><description><![CDATA[Rust represents a major advancement in production programming languages because of its success in bridging the gap between high-level application programming and low-level systems programming. At the heart of its design lies a novel approach to ownership that remains highly programmable.

In this talk, we will describe our ongoing work on designing a formal semantics for Rust that captures how programmers can understand ownership and borrowing without trying to grasp the details of lifetime analysis.]]></description><guid isPermaLink="false">a07d66f5-dfd3-41d4-b2d8-16bf1b0f4886</guid><pubDate>Thu,  7 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Aaron Weiss, Daniel Patterson, Amal Ahmed</dc:creator></item><item><title>Integrating QML and Rust: Creating a QMetaObject at Compile Time</title><link>https://woboq.com/blog/qmetaobject-from-rust.html</link><description><![CDATA[In this blog post, I would like to present a research project I have been working on: Trying to use QML from Rust, and in general, using a C++ library from Rust. The project is a Rust crate which allows to create QMetaObject at compile time from pure Rust code. It is available here: https://github.com/woboq/qmetaobject-rs]]></description><guid isPermaLink="false">f98c539d-bf5c-4329-a4b2-bba3c4816350</guid><pubDate>Thu,  7 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Olivier Goffart</dc:creator></item><item><title>Modern Parser Generator</title><link>https://matklad.github.io/2018/06/06/modern-parser-generator.html</link><description><![CDATA[During the last couple of years, I’ve spent a lot of time writing parsers and parser generators, and I want to write down my thoughts about this topic. Specifically, I want to describe some properties of a parser generator that I would enjoy using. Note that this is not an “introduction to parsing” blog post, some prior knowledge is assumed.]]></description><guid isPermaLink="false">6f104d56-9b00-4748-a04f-0c77ec89a1d2</guid><pubDate>Wed,  6 Jun 2018 16:03:25 +0000</pubDate><dc:creator>Aleksey Kladov</dc:creator></item><item><title>RSoC: Porting tokio to redox - week 3</title><link>https://www.redox-os.org/news/rsoc-porting-tokio-3/</link><description><![CDATA[Last week I ended off stating that the redox netstack might soon switch to an edge-triggered model. Well, I ended up feeling bad about the idea of letting others do my work and decided to stop being lazy and just do it myself.]]></description><guid isPermaLink="false">54270fa0-69d3-4ec1-8aca-c77191e164e5</guid><pubDate>Wed,  6 Jun 2018 00:00:00 +0000</pubDate><dc:creator>jD91mZM2</dc:creator></item><item><title>A Rust-based Unikernel</title><link>https://hermitcore.org/2018/06/06/A-Rust-based-Unikernel/</link><description><![CDATA[Rust is an extremely interesting language for the development of system software. This was the motivation to evaluate Rust for HermitCore and to develop an experimental version of our libOS in Rust. Components like the IP stack and uhyve (our unikernel hypervisor) are still written in C. In addition, the user applications are still compiled by our cross-compiler, which is based on gcc and supports C, C++, Fortran, and Go. The core of the kernel, however, is now written in Rust and published at GitHub. Our experiences so far are really good and we are looking into possibly new Rust activities, e.g., the support for Rust’s userland.]]></description><guid isPermaLink="false">d70a58d9-d528-41e3-a91c-605c58465d45</guid><pubDate>Wed,  6 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Stefan Lankes</dc:creator></item><item><title>Sponsor work on Rust!</title><link>http://aturon.github.io/sponsor/</link><description><![CDATA[This page is a first attempt at facilitating sponsorship. This is not an officially endorsed list, but it is a list of Rustaceans that I have personally vetted and sponsored, and encourage you to support. Each of them has a long, public history of impactful work in the community.]]></description><guid isPermaLink="false">16518cb2-ca9f-4b67-b4d3-bc9042a23ea2</guid><pubDate>Wed,  6 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Aaron Turon</dc:creator></item><item><title>Rust review: Protect the data</title><link>http://julio.meroh.net/2018/06/rust-review-protect-the-data.html</link><description><![CDATA[The one thing that blew my mind about Rust is its approach to data sharing in concurrent situations.

I had always thought of mutexes as something that is easy to get wrong and was convinced that the use of a RAII pattern to prevent lock leaks never happen (like with Abseil’s MutexLock) was the panacea. (I’m a fan of RAII in C++ by the way, in case you haven’t noticed.)]]></description><guid isPermaLink="false">046762b0-c3da-4f38-8d4a-7bb515f73d4b</guid><pubDate>Tue,  5 Jun 2018 09:00:00 -0400</pubDate><dc:creator>Julio Merino</dc:creator></item><item><title>Why PhantomData</title><link>http://troubles.md/posts/why-phantomdata/</link><description><![CDATA[We’re not allowed to have a type parameter that goes unused. If we want to have a type that looks like the one above we have to add a marker to it like so: struct Tagged<T>(usize, PhantomData<T>);]]></description><guid isPermaLink="false">cebd59fa-c884-49cd-9de7-4da401e26642</guid><pubDate>Tue,  5 Jun 2018 13:41:30 +0200</pubDate><dc:creator>troubles.md</dc:creator></item><item><title>How to speed up the Rust compiler some more in 2018</title><link>https://blog.mozilla.org/nnethercote/2018/06/05/how-to-speed-up-the-rust-compiler-some-more-in-2018/</link><description><![CDATA[Since my last post, rustc-perf — the benchmark suite, harness and visualizer — has seen some improvements. First, some new benchmarks were added: cargo, ripgrep, sentry-cli, and webrender. Also, the parser benchmark has been removed because it was a toy program and thus not a good benchmark.]]></description><guid isPermaLink="false">9a7909ce-8831-4f06-b32e-55a4a3df9116</guid><pubDate>Tue,  5 Jun 2018 00:05:01 +0000</pubDate><dc:creator>Nicholas Nethercote</dc:creator></item><item><title>Announcing Rust 1.26.2</title><link>https://blog.rust-lang.org/2018/06/05/Rust-1.26.2.html</link><description><![CDATA[This patch release fixes a bug in the borrow checker verification of match expressions. This bug was introduced in 1.26.0 with the stabilization of match ergonomics. Specifically, it permitted code which took two mutable borrows of the bar path at the same time.]]></description><guid isPermaLink="false">901dde63-68f7-45d0-b161-cf585e47d266</guid><pubDate>Tue,  5 Jun 2018 00:00:00 +0000</pubDate><dc:creator>The Rust Core Team</dc:creator></item><item><title>The Future of Clippy (the Rust Linter)</title><link>https://manishearth.github.io/blog/2018/06/05/the-future-of-clippy-the-rust-linter/</link><description><![CDATA[We’ve recently been making lots of progress on future plans for clippy and I thought I’d post an update.]]></description><guid isPermaLink="false">2b743aaf-6ae4-4bda-8de9-6bef817e9a4d</guid><pubDate>Tue,  5 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Manish Goregaokar</dc:creator></item><item><title>Crates.rs — a new, faster crate index website</title><link>https://crates.rs/index</link><description><![CDATA[Crates.rs, an alternative opinionated front-end to crates.io:

It’s fast.

All readmes are displayed whenever possible, and if there’s no or poor readme, doc comments are shown too.

It combines information from multiple sources, e.g. byline is a compact amalgamation of Cargo.toml, crates.io, and GitHub contributors, so you get an idea who wrote the code even if authors forgot to keep Cargo.toml up to date.

Crate popularity is displayed as top-N position in its most relevant category, e.g. “#5 in Cryptography”, which is more meaningful than absolute download numbers.

Optional dependencies display which feature or platform they’re for.

Version history is summarized to help see at a glance whether a crate gets regular updates and how often it has breaking changes.

Recognizes sys crates even if they’re not called -sys and shows when build.rs is used.

Category pages fit more crates on screen despite looking less cluttered and having easier to read descriptions.

All categories and their representative crates are right there on the homepage.

Syntax highlighting everywhere, including code blocks.

Everything works without JS and gets indexed by search engines, so I’m hoping the site will help find crates.]]></description><guid isPermaLink="false">01dd6aee-aa4b-46b9-a4dc-5d2550a96356</guid><pubDate>Mon,  4 Jun 2018 23:27:00 +0000</pubDate><dc:creator>Kornel</dc:creator></item><item><title>Safe Concurrency with Rust</title><link>http://www.squidarth.com/rc/rust/2018/06/04/rust-concurrency.html</link><description><![CDATA[Last week, I started learning Rust, and published a post about the “ownership” system. One of the places where Rust’s ownership system really shines is in threading and concurrency. Kevin and I decided to dig into this more on Friday, and did some work on the dining philosophers problem.

In this post I’ll be covering what we learned, and how the Rust compiler saves you from some scary concurrency issues.]]></description><guid isPermaLink="false">314ba2b8-5ace-4348-b96a-b704c628e2b3</guid><pubDate>Mon,  4 Jun 2018 09:00:38 -0400</pubDate><dc:creator>Sid Shanker</dc:creator></item><item><title>Optimising path tracing with SIMD</title><link>https://bitshifter.github.io/blog/2018/06/04/simd-path-tracing/</link><description><![CDATA[Following on from path tracing in parallel with Rayon I had a lot of other optimisations I wanted to try. In particular I want to see if I could match the CPU performance of @aras_p’s C++ path tracer in Rust. He’d done a fair amount of optimising so it seemed like a good target to aim for. To get a better comparison I copied his scene and also added his light sampling approach which he talks about here. I also implemented a live render loop mimicking his.]]></description><guid isPermaLink="false">019cfc86-4560-40cc-8619-30d04e30699b</guid><pubDate>Mon,  4 Jun 2018 00:00:00 +0000</pubDate><dc:creator>bitshifter</dc:creator></item><item><title>Async Methods II: object safety</title><link>https://boats.gitlab.io/blog/post/async-methods-ii/</link><description><![CDATA[Last time, we introduced the idea of async methods, and talked about how they would be implemented: as a kind of anonymous associated type on the trait that declares the method, which corresponds to a different, anonymous future type for each implementation of that method. Starting this week we’re going to look at some of the implications of that. The first one we’re going to look at is object safety.]]></description><guid isPermaLink="false">d4896054-d302-4629-8679-7456e1a741ef</guid><pubDate>Mon,  4 Jun 2018 00:00:00 +0000</pubDate><dc:creator>boats</dc:creator></item><item><title>Newtype Index Pattern</title><link>https://matklad.github.io//2018/06/03/newtype-index-pattern.html</link><description><![CDATA[Similarly to the previous post, we will once again add types to the Rust code which works perfectly fine without them. This time, we’ll try to improve the pervasive pattern of using indexes to manage cyclic data structures.]]></description><guid isPermaLink="false">e672721a-5577-4897-b440-619731384ac1</guid><pubDate>Sun,  3 Jun 2018 21:21:45 +0000</pubDate><dc:creator>Aleksey Kladov</dc:creator></item><item><title>Listening and trust, part 2</title><link>http://aturon.github.io/2018/06/02/listening-part-2/</link><description><![CDATA[In the previous post in this series, I recounted an early lesson for the Rust Core Team about working in the open. In this post, I want to talk about the delicate interplay between listening and trust when doing design in the open.]]></description><guid isPermaLink="false">c8e154fc-96f0-4c63-99fb-ba62c7cc689f</guid><pubDate>Sat,  2 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Aaron Turon</dc:creator></item><item><title>The Secret Life of Cows</title><link>https://deterministic.space/secret-life-of-cows.html</link><description><![CDATA[A lot of people at RustFest Paris mentioned Cows – which may be surprising if you’ve never seen std::borrow::Cow!

Cow in this context stands for “Clone on Write” and is a type that allows you to reuse data if it is not modified. Somehow, these bovine super powers of Rust’s standard library appear to be a well-kept secret even though they are not new. This post will dig into this very useful pointer type by explaining why in systems programming languages you need such fine control, explain Cows in detail, and compare them to other ways of organizing your data.]]></description><guid isPermaLink="false">d8c6d9c0-38eb-4656-a28e-0125ca9e5cd1</guid><pubDate>Sat,  2 Jun 2018 00:00:00 +0200</pubDate><dc:creator>Pascal Hertleif</dc:creator></item><item><title>Rust review: The borrow checker</title><link>http://julio.meroh.net/2018/06/rust-review-borrow-checker.html</link><description><![CDATA[Aaaah, the borrow checker: the dreaded enemy lurking within the Rust compiler, ready to make its move to bring pain to your life by preventing your code from compiling. Or that’s what everyone seems to say, which is one of the reasons I put off learning Rust for so long. In reality… the borrow checker is a blessing, but it is true that getting past its gates is difficult at first.]]></description><guid isPermaLink="false">09d6be59-4bee-49e0-aa34-d43622422cb8</guid><pubDate>Fri,  1 Jun 2018 09:00:00 -0400</pubDate><dc:creator>Julio Merino</dc:creator></item><item><title>Infinite Negative Utility: The Rust Language and Special Cases</title><link>https://blog.infinitenegativeutility.com/2018/6/the-rust-language-and-special-cases</link><description><![CDATA[I first came across Rust back in 2010 or 2011, and it was a very different language than the one it is today, both syntactically and semantically. I remember at the time that newcomers would often complain loudly about the terse keywords—like the fact that the return keyword had been shortened to ret—and the omnipresent tildes scattered throughout the language like fallen leaves in autumn. My programming background was in functional languages—specifically in Scheme and Haskell—and I found this language fascinating, sitting in an interesting and unexplored place in the spectrum of programming languages and bringing something genuinely new to the table.]]></description><guid isPermaLink="false">19239f2e-41c0-44cb-8b3d-02199eaa57b1</guid><pubDate>Fri,  1 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Getty Ritter</dc:creator></item><item><title>Tricking the HashMap</title><link>https://idubrov.github.io/rust/2018/06/01/tricking-the-hashmap.html</link><description><![CDATA[Is it possible to find something in a hashmap if the key you are looking for is not exactly the same as the one you put into that hashmap? At first glance, this might not make any sense at all. The whole purpose of a hashmap is to store something under some key and then look it up using the same key. Right?]]></description><guid isPermaLink="false">ab635755-efd4-432a-8407-7b1c94649f8f</guid><pubDate>Fri,  1 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Ivan Dubrov</dc:creator></item></channel></rss>