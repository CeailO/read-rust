<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - All Posts</title><link>https://readrust.net/</link><description>All Posts posts on Read Rust</description><item><title>Organizational Debt</title><link>https://boats.gitlab.io/blog/post/rust-2019/</link><description><![CDATA[We all know that classic aphorism: Year comes to an end, Rust blog post press send. This is mine.

There are lots of cool technical improvements to Rust that I want the project to achieve this year, and a few in particular that I’m definitely going to be putting a lot of time into. But this blog post is going to talk about none of them. Instead, I want to talk about organizational debt, and how badly the Rust project needs to deal with it in 2019.]]></description><guid isPermaLink="false">f0adf24b-6589-4306-a580-6cef894ad3b7</guid><pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate><dc:creator>withoutboats</dc:creator></item><item><title>Implications of Rewriting a Browser Component in Rust</title><link>https://hacks.mozilla.org/2019/02/rewriting-a-browser-component-in-rust/</link><description><![CDATA[Since our first release in 2002, there have been 69 security bugs in Firefox’s style component. If we'd had a time machine and could have written this component in Rust from the start, 51% wouldn't have happened. That said, Rust is not foolproof. Developers still need to be aware of correctness bugs and data leakage attacks.]]></description><guid isPermaLink="false">1ffc5388-6476-4542-90c1-398c561a2c43</guid><pubDate>Thu, 28 Feb 2019 14:10:27 +0000</pubDate><dc:creator>Diane Hosfelt</dc:creator></item><item><title>This Week in Pop!_OS 1</title><link>https://pop-planet.info/2019/02/this-week-in-pop/</link><description><![CDATA[This will be the first in a series of weekly updates on progress made in the development of Pop!_OS. Thus, this will only contain content pertaining specifically to Pop!_OS, though at times there may be some overlap with the hardware side of System76.]]></description><guid isPermaLink="false">c8769017-9667-4bad-82c6-e43ec7391182</guid><pubDate>Thu, 28 Feb 2019 00:20:54 +0000</pubDate><dc:creator>Michael Murphy</dc:creator></item><item><title>Announcing Rust 1.33.0</title><link>https://blog.rust-lang.org/2019/02/28/Rust-1.33.0.html</link><description><![CDATA[The Rust team is happy to announce a new version of Rust, 1.33.0. The two largest features in this release are significant improvements to const fns, and the stabilization of a new concept: "pinning."]]></description><guid isPermaLink="false">e6376cd5-713f-4a8e-8792-2329772feee5</guid><pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate><dc:creator>The Rust Release Team</dc:creator></item><item><title>Low level text layout kickoff</title><link>https://raphlinus.github.io/rust/skribo/text/2019/02/27/text-layout-kickoff.html</link><description><![CDATA[This post is to announce a new Rust library for low-level text layout, called “skribo” (the Esperanto word for “writing”). This has been a major gap in the Rust ecosystem, and I hope the new crate can improve text handling across the board.]]></description><guid isPermaLink="false">70a94e2b-dbd2-4f66-ada8-5886b5c51fab</guid><pubDate>Wed, 27 Feb 2019 18:16:42 +0000</pubDate><dc:creator>Raph Levien</dc:creator></item><item><title>Rust build scripts vs. Meson</title><link>https://people.gnome.org/~federico/blog/rust-build-scripts.html</link><description><![CDATA[One of the pain points in trying to make the Meson build system work with Rust and Cargo is Cargo's use of build scripts, i.e. the build.rs that many Rust programs use for doing things before the main build. This post is about my exploration of what build.rs does.]]></description><guid isPermaLink="false">f93cc38e-4380-4174-8f53-b5c6674772da</guid><pubDate>Wed, 27 Feb 2019 12:14:12 -0600</pubDate><dc:creator>Federico Mena Quintero</dc:creator></item><item><title>Rust Case Study: Community makes Rust an easy choice for npm [pdf]</title><link>https://www.rust-lang.org/static/pdfs/Rust-npm-Whitepaper.pdf</link><description><![CDATA[Learn how npm uses Rust]]></description><guid isPermaLink="false">b149b575-39a9-4136-8749-29e04c5cf0b3</guid><pubDate>Wed, 27 Feb 2019 03:26:00 +0000</pubDate><dc:creator>The Rust Core Team</dc:creator></item><item><title>Working with Command Line Arguments in Rust</title><link>https://blog.knoldus.com/working-with-command-line-arguments-in-rust/</link><description><![CDATA[Command Line Arguments are used to control program from outside instead of hard-coding those values inside the code and supplied to program when it is invoked. In this blog, I’ll demystify you how to use Command Line Arguments in the Rust Programming Language.]]></description><guid isPermaLink="false">12b9edfa-c917-436a-b001-76305b65eb0d</guid><pubDate>Tue, 26 Feb 2019 07:05:40 +0000</pubDate><dc:creator>Pawan Bisht</dc:creator></item><item><title>Bid adieu to tarpaulin, HTML reports are here for Rust</title><link>https://blog.knoldus.com/bid-adieu-to-tarpaulin-html-reports-are-here-for-rust/</link><description><![CDATA[Kcov is a code coverage tool for Binaries, Shell scripts as well as Python scripts. It generates an HTML file for most of the languages. But we will focus mainly on Rust language.]]></description><guid isPermaLink="false">a6483426-5600-4cf0-a514-c532946abda3</guid><pubDate>Tue, 26 Feb 2019 06:41:19 +0000</pubDate><dc:creator>Mudit Chhabra</dc:creator></item><item><title>Firmware examples that make use of the jnet embedded TCP/IP crate</title><link>https://github.com/japaric/jnet/tree/master/firmware</link><description><![CDATA[[Experiment] JNeT: japaric's network thingies.]]></description><guid isPermaLink="false">34d09d33-17ae-4799-9026-f41fc6d95fe4</guid><pubDate>Tue, 26 Feb 2019 04:35:00 +0000</pubDate><dc:creator>Jorge Aparicio</dc:creator></item><item><title>Introducing battery crate</title><link>https://svartalf.info/posts/2019-02-25-introducing-battery-crate/</link><description><![CDATA[My new pet project for reading batteries information in Rust.]]></description><guid isPermaLink="false">e513ef63-5727-4db5-8830-08606838d1e3</guid><pubDate>Mon, 25 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Nikita Kuznetsov</dc:creator></item><item><title>Rust 2019: Rust Audio</title><link>https://www.reddit.com/r/rust/comments/aua2tb/rust_2019_rust_audio/?st=JSJEXJDY&amp;sh=497b171c</link><description><![CDATA[Howdy y'all. This is a super late 2019 goal post but I drank too much coffee this morning and wanted to get some thoughts out. I'd love to see 2019 be a great year for progressing the environment for developing audio applications in Rust. I'm not saying that there aren't already some good libraries out there, but in comparison with the defacto C++ offerings, we have a long way to go. Basically, I'd love to see an alternative to JUCE in Rust, and that is very ambitious because JUCE is an amazing library!]]></description><guid isPermaLink="false">dfa770cf-7919-4344-b9ef-6ad7b5e0a084</guid><pubDate>Mon, 25 Feb 2019 04:21:15 +1100</pubDate><dc:creator>u/engid</dc:creator></item><item><title>Fearless concurrency: how Clojure, Rust, Pony, Erlang and Dart let you achieve that</title><link>https://sites.google.com/a/athaydes.com/renato-athaydes/posts/fearlessconcurrencyhowclojurerustponyerlanganddartletyouachievethat</link><description><![CDATA[several models that make it easier to reason about concurrent programs have been envisioned over time. In this article, we'll have a quick look at a few of them, from new to not-so-new languages. I don't intend to give an extensive analysis of each solution, or make a formal comparison between them. My intention is to simply explain the basics of each solution and how they can be used in practice (with code samples that show off what the result of using the models might look like), so that other developers may have an easier time understanding them and deciding which solution, or language, might be better applicable to their particular problems.]]></description><guid isPermaLink="false">938a7c8a-5c3d-4adb-82e0-caf416396075</guid><pubDate>Sun, 24 Feb 2019 09:13:00 +0000</pubDate><dc:creator>Renato Athaydes</dc:creator></item><item><title>Zero knowledge proofs using Bulletproofs</title><link>https://medium.com/coinmonks/zero-knowledge-proofs-using-bulletproofs-4a8e2579fc82</link><description><![CDATA[I will show how to create various zero knowledge proofs using the Bulletproofs implementation from dalek-cryptography. The examples will be i) proving knowledge of factors of a given number without revealing the factors, ii) a range proof, i.e. prove that you know a value x such that a ≤ x ≤ b without revealing x, iii) prove that the value you have is non-zero without revealing it (without using above range proof), iv) Set membership, i.e given a set S, prove that you know an element contained in the set without revealing the element, v) Similarly, set non-membership without revealing the value of the absent element. The examples can be adapted with little effort such that they can be used in ZK-SNARK implementations like libsnark or bellman.]]></description><guid isPermaLink="false">fae48adb-0406-4124-b06d-6b9d7a667d85</guid><pubDate>Sat, 23 Feb 2019 20:38:04 +0000</pubDate><dc:creator>Lovesh Harchandani</dc:creator></item><item><title>Combine Results for Improved Rust Validation Logic</title><link>https://www.joshmcguigan.com/blog/multi-try-improved-validation-logic-rust/</link><description><![CDATA[The error handling features within Rust are some of my favorite things about the language. This system works great when you are in a function which returns a Result and you want to exit at the first error you come to. However, it can be challenging if your goal is to try a few failure-prone things and return each of the errors, rather than just the first error. This is the problem multi_try attempts to solve. ]]></description><guid isPermaLink="false">03e057c7-1da0-4468-b0f8-3aaedde6b241</guid><pubDate>Sat, 23 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Josh Mcguigan</dc:creator></item><item><title>Scientific computing: a Rust adventure [Part 0 - Vectors]</title><link>https://www.lpalmieri.com/posts/2019-02-23-scientific-computing-a-rust-adventure-part-0-vectors/</link><description><![CDATA[My daily work revolves around building Machine Learning applications, while a lot of my evenings have been spent experimenting with Rust, getting more and more fascinated and in love with the language.

It couldn’t be helped: I started to have a look at what the Rust ecosystem had to offer for Machine Learning, Big Data and scientific computing at large. I quickly found out that there is a lot to be done and a lot of potential (see here or here). It got me really fired up 🔥]]></description><guid isPermaLink="false">8d4c090f-e6e3-4975-abe7-385479579cfa</guid><pubDate>Sat, 23 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Luca Palmieri</dc:creator></item><item><title>Rust lang team working groups</title><link>http://smallcultfollowing.com/babysteps/blog/2019/02/22/rust-lang-team-working-groups/</link><description><![CDATA[Now that the Rust 2018 edition has shipped, the language design team has been thinking a lot about what to do in 2019 and over the next few years. I think we’ve got a lot of exciting stuff on the horizon, and I wanted to write about it.]]></description><guid isPermaLink="false">0d3ca45d-85aa-40ab-95f0-40ec5abaa75f</guid><pubDate>Fri, 22 Feb 2019 00:00:00 -0500</pubDate><dc:creator>Niko Matsakis</dc:creator></item><item><title>Changes in the core team</title><link>https://blog.rust-lang.org/2019/02/22/Core-team-changes.html</link><description><![CDATA[Just a quick update: You may have noticed that, in the last month or so, a number of Rust core team members have changed their jobs and/or their roles in the project.]]></description><guid isPermaLink="false">2471466d-74a1-4d19-82d7-6909e10178cd</guid><pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate><dc:creator>The Rust Core Team</dc:creator></item><item><title>git req | switch branches, not context</title><link>https://arusahni.github.io/git-req/</link><description><![CDATA[Check out git branches by their pull (or merge) request ID]]></description><guid isPermaLink="false">3a45d462-3f13-451b-8b15-03d07069c3f3</guid><pubDate>Thu, 21 Feb 2019 10:16:00 +0000</pubDate><dc:creator>Aru Sahni</dc:creator></item><item><title>New Gtk-rs release finally happened!</title><link>https://gtk-rs.org/blog/2019/02/21/new-release.html</link><description><![CDATA[It’s time for a new release! Main adds/changes this time are: We added the generation of the Atk crate. We now generate functions taking callback as parameters. We improved the channels handling in GLib. The whole new GString type! The minimum Rust version supported is now the 1.31. The minimum version of all libraries has been changed to GNOME 3.14. The maximum version of all libraries has been upgraded to GNOME 3.30. Added subclassing support in GLib. Even more bindings generated. Let’s see those in details.]]></description><guid isPermaLink="false">7a149bc9-7e87-40cb-b3ef-da277059f897</guid><pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Gtk-rs</dc:creator></item><item><title>Procedural Generation with Wave Function Collapse</title><link>https://gridbugs.org/wave-function-collapse/</link><description><![CDATA[Wave Function Collapse is a procedural generation algorithm which produces images by arranging a collection of tiles according to rules about which tiles may be adjacent to each other tile, and relatively how frequently each tile should appear. The algorithm maintains, for each pixel of the output image, a probability distribution of the tiles which may be placed there. It repeatedly chooses a pixel to “collapse” - choosing a tile to use for that pixel based on its distribution. WFC gets its name from quantum physics. The goal of this post is to build an intuition for how and why the WFC algorithm works.]]></description><guid isPermaLink="false">2c967b7c-6987-45ae-96b1-776ee6c51011</guid><pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Stephen Sherratt</dc:creator></item><item><title>Updates about my work on native-Rust GUI, text layout, splines, markdown parsing, and more</title><link>https://raphlinus.github.io/personal/2019/02/20/more-small-updates.html</link><description><![CDATA[This post is actually a collection of updates about pretty big things, but the writeup is small. Several will be expanded into larger blog posts - if there are any that you are especially eager to see, please tweet at me and I’ll give the topic priority.]]></description><guid isPermaLink="false">ea353a56-0b7b-4025-a410-0e479c39950a</guid><pubDate>Wed, 20 Feb 2019 17:02:42 +0000</pubDate><dc:creator>Raph Levien</dc:creator></item><item><title>DOS: the final frontier...</title><link>https://www.reddit.com/r/rust/comments/ask2v5/dos_the_final_frontier/</link><description><![CDATA[In our crusade to oxidize platform after platform, I've been working to bring Rust to yet another target: MS-DOS. I don't know if this has been done before, but I couldn't find any information about it on the web, so I had to rely on information about using GCC to compile MS-DOS programs (not all of which carried over), and it took quite a bit of fiddling with the target specification to get things just right. In the end, I've managed to produce COM executables that can call DOS interrupts and interface with hardware such as the PC speaker, and presumably the rest of the hardware, given the right code.]]></description><guid isPermaLink="false">7c13bc47-79a3-408a-bfc0-d67639f4f359</guid><pubDate>Wed, 20 Feb 2019 15:47:21 +1100</pubDate><dc:creator>u/serentty</dc:creator></item><item><title>Introducing embedded-sdmmc - a pure-Rust #[no_std] SD card and FAT16/FAT32 library</title><link>https://www.reddit.com/r/rust/comments/ascvls/introducing_embeddedsdmmc_a_purerust_no_std_sd/</link><description><![CDATA[161 votes and 6 comments so far on Reddit]]></description><guid isPermaLink="false">fe990782-d611-46a2-a6c1-4048707e61df</guid><pubDate>Wed, 20 Feb 2019 04:32:00 +0000</pubDate><dc:creator>Jonathan Pallant</dc:creator></item><item><title>The Embedded Working Group Newsletter - 15</title><link>https://rust-embedded.github.io/blog/newsletter-15/</link><description><![CDATA[This is the fifteenth newsletter of the Embedded WG where we highlight new progress, celebrate cool projects, thank the community, and advertise projects that need help!]]></description><guid isPermaLink="false">e7d75d4a-b84d-41fd-a164-016bb9e9d99c</guid><pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate><dc:creator>The Embedded Working Group</dc:creator></item><item><title>My experience with Rust</title><link>http://subhojit777.in/rust-language-experience/</link><description><![CDATA[I started learning Rust in 2018. I completed my work in an open source project and was thinking about learning a new programming language. My motive was to learn a language that allows you to control the lower level of a high-level programming language. I considered learning Golang, but, in most of the online articles I learned that Rust (being a system programming language) gives you more control than Go, however, the learning curve is far steeper than Go. I had no worries about deadlines or time, therefore I chose Rust.]]></description><guid isPermaLink="false">fb473ea5-9d84-4c2d-9926-282c55dcbf18</guid><pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Subhojit Paul</dc:creator></item><item><title>Cross-compiling Rust code to Minix</title><link>https://iandouglasscott.com/2019/02/18/cross-compiling-rust-code-to-minix/</link><description><![CDATA[I’ve decided to take a look at Minix, which is an interesting microkernel OS. Naturally after building Minix from git, the first thing I decided to try was porting Rust’s std to Minix so I could cross-compile Rust programs from Linux to run under Minix. Okay, I suppose I could have started with something else, but porting Rust software and modifying the platform-depending part of std is something I have experience with from working on Redox OS. And Rust really isn’t that hard to port.]]></description><guid isPermaLink="false">2c73855c-6079-427a-b075-4c07ed3cec23</guid><pubDate>Mon, 18 Feb 2019 13:00:00 -0800</pubDate><dc:creator>Ian Douglas Scott</dc:creator></item><item><title>You can live without Exceptions, if you are using Rust</title><link>https://blog.knoldus.com/you-can-live-without-exceptions-if-you-are-using-rust/</link><description><![CDATA[If you are coming from Java background, where you have used Exception Handling extensively and you have started working on new language like Rust, which doesn’t support Exception Handling then you will be forced to think that does such kind of world really exists?]]></description><guid isPermaLink="false">a40e4318-64e5-4929-800f-4308c242b49c</guid><pubDate>Mon, 18 Feb 2019 08:18:34 +0000</pubDate><dc:creator>Ayush Mishra</dc:creator></item><item><title>Generators II: The Question Mark Problem</title><link>https://boats.gitlab.io/blog/post/generators-ii/</link><description><![CDATA[This is my second post on the design of generators. In the first post, I outlined what an MVP of the feature would look like. In this post, I want to take a look at the first design issue for the feature: how it integrates with the ? operator.]]></description><guid isPermaLink="false">2c43b8ca-4c87-4138-adfc-2e32660061a2</guid><pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate><dc:creator>withoutboats</dc:creator></item><item><title>One Hundred Rust PRs later</title><link>https://phansch.net/2019/02/18/onehundred-rust-prs/</link><description><![CDATA[It’s hard for me to believe but it’s already been over a year since I seriously committed to learning Rust and I have now reached my initial goal of 100 open source contributions to the Rust ecosystem. You can see the full list here. I want to use this blog post to review the work I’ve done, talk about the challenges I’ve come across and how I’ve tried to deal with them. I’m afraid I haven’t blogged in a long time and this is a bit longer than usual.]]></description><guid isPermaLink="false">9cb7faf6-a9cb-4bf5-9549-96ee7e80dd12</guid><pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Philipp Hansch</dc:creator></item><item><title>Visualizing your Rust code using graphviz</title><link>https://jonathansteyfkens.com/posts/visualizing-rust.html</link><description><![CDATA[In a previous post I mentioned that the Rust compiler allows you to output interesting intermediate languages/formats in a number of different ways. hir, mir and even flowgraphs! In this post I will be giving a brief overview of the flowgraph format and also instructions on how to generate images from your code.]]></description><guid isPermaLink="false">295b15d9-04eb-420c-bc3e-8b3c12a81882</guid><pubDate>Sun, 17 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Jonathan Steyfkens</dc:creator></item><item><title>Cross compiling Rust from Linux to macOS</title><link>https://wapl.es/rust/2019/02/17/rust-cross-compile-linux-to-macos.html</link><description><![CDATA[I’ve recently been working on a Rust project at work which requires compiling for Linux (GNU), Linux (musl - for Alpine Linux) and macOS. I use Linux Mint nearly all the time, so building for macOS targets has required asking very nicely to borrow a spare Macbook Air. This is naturally a bit crap, so I set out to find a Linux-only solution to cross compile for macOS using osxcross. A weekend of pain later, and I have the following post. Hopefully it spares you a weekend of your own pain.]]></description><guid isPermaLink="false">e412275c-f2ce-4748-bf3d-c53375ff5693</guid><pubDate>Sun, 17 Feb 2019 00:00:00 +0000</pubDate><dc:creator>James Waples</dc:creator></item><item><title>Lyon in 2018</title><link>https://nical.github.io/posts/lyon-2018.html</link><description><![CDATA[In 2018 my activity on the project has varied depending on the time and energy I have had left after work and other activities. As it turns out, working on getting WebRender shipped in Firefox is at the same time amazing and very demanding, and what's left of my brain after a good day of work isn't always up to some of the ambitions I have planned for lyon. Fortunately I am not the only one who contributed to the project, and while progress was slow on the most ambitious plans, I did spend some time on smaller features and polish.

I'll get to these big plans towards the end of this post. In the mean time let's look at some of the highlights of what changed in lyon in 2018.]]></description><guid isPermaLink="false">0a429d63-c63c-4161-8960-c83915c01b26</guid><pubDate>Sun, 17 Feb 2019 00:00:00 +0100</pubDate><dc:creator>Nical</dc:creator></item><item><title>syswall: a firewall for syscalls</title><link>https://www.polaris64.net/blog/programming/2019/syswall-a-firewall-for-syscalls</link><description><![CDATA[A while back I started thinking about software and how it does what it does. Perhaps even more importantly, I started thinking about how we can know what software does, without relying on the software's marketing pitch.]]></description><guid isPermaLink="false">821ecfae-acd8-4a50-907e-77c394807c86</guid><pubDate>Sat, 16 Feb 2019 22:07:25 +0000</pubDate><dc:creator>Simon Pugnet</dc:creator></item><item><title>Shipping Rust Binaries with GoReleaser</title><link>https://medium.com/@jondot/shipping-rust-binaries-with-goreleaser-d5aa42a46be0</link><description><![CDATA[Although GoReleaser supports building just Go projects, it does so much more in the packaging and distribution department that it is extremely hard to ignore.]]></description><guid isPermaLink="false">81e00756-52f6-48fe-839e-28c88b690aef</guid><pubDate>Sat, 16 Feb 2019 17:47:00 +0000</pubDate><dc:creator>Dotan Nahum</dc:creator></item><item><title>MonkeyType: type inference for transpiling Python to Rust</title><link>https://medium.com/@konchunas/monkeytype-type-inference-for-transpiling-python-to-rust-64fa5a9eb966</link><description><![CDATA[In my previous post about Python to Rust transpiler I’ve said, that one of the biggest problems is absence of types in python and inability to infer them for functions. But it turns out there is a solution to this problem. Guys from Instagram have developed an incredible tool for runtime type inference called MonkeyType. It monitors what types functions accept and return while running a program. This approach works quite nicely so I want to share with you how it’s done.]]></description><guid isPermaLink="false">da140d7b-47bf-4d63-a3e1-75ade64bed2f</guid><pubDate>Fri, 15 Feb 2019 22:25:31 +0000</pubDate><dc:creator>Julian Konchunas</dc:creator></item><item><title>My Tour of Rust – Day 4 – Ray Tracing Part 2</title><link>https://rushtonality.com/2019/02/15/my-tour-of-rust-day-4-ray-tracing-part-2/</link><description><![CDATA[Learning Rust through the porting of the code from Peter Shirley's Ray Tracing in a Weekend. Focused on Polymorphism, Ownership and Traits in Rust.]]></description><guid isPermaLink="false">54a69419-caf9-408f-bd41-ab6ee7897b92</guid><pubDate>Fri, 15 Feb 2019 20:13:45 +0000</pubDate><dc:creator>Stephen Rushton</dc:creator></item><item><title>Why should you use Rust in WebAssembly?</title><link>https://opensource.com/article/19/2/why-use-rust-webassembly</link><description><![CDATA[WebAssembly (Wasm) is a technology that has the chance to reshape how we build apps for the browser. Not only will it allow us to build whole new classes of web applications, but it will also allow us to make existing apps written in JavaScript even more performant.

In this article about the state of the Rust and Wasm ecosystem, I'll try to explain why Rust is the language that can unlock the true potential of WebAssembly.]]></description><guid isPermaLink="false">9496d523-3ad4-42ac-a6eb-183ed3d55713</guid><pubDate>Fri, 15 Feb 2019 03:01:00 -0500</pubDate><dc:creator>Ryan Levick</dc:creator></item><item><title>Replacing a hot path in your app&apos;s JavaScript with WebAssembly</title><link>https://developers.google.com/web/updates/2019/02/hotpath-with-wasm</link><description><![CDATA[In my previous articles I talked about how WebAssembly allows you to bring the library ecosystem of C/C++ to the web. One app that makes extensive use of C/C++ libraries is squoosh, our web app that allows you compress images with a variety of codecs that have been compiled from C++ to WebAssembly.

In my experience, most performance problems on the web are caused by forced layout and excessive paint but every now and then an app needs to do a computationally expensive task that takes a lot of time. WebAssembly can help here.]]></description><guid isPermaLink="false">09067d7b-54fc-4555-9e1f-a6622ea5e390</guid><pubDate>Fri, 15 Feb 2019 07:38:00 +0000</pubDate><dc:creator>Surma</dc:creator></item><item><title>A brief introduction to Rust</title><link>https://odetorust.com/a-brief-introduction-to-rust/</link><description><![CDATA[I heard of Rust back in 2015 at a meetup. I have since spent time with Rust on and off. In 2018, I had more time to explore Rust. Thinking of using blogging as a learning tool while going further down the rabbit hole of Rust, I setup this blog. In this post, I would like to briefly walk through some important features of the language.]]></description><guid isPermaLink="false">9700147a-735e-4903-b9fb-f91d6de54fe0</guid><pubDate>Thu, 14 Feb 2019 20:25:00 +0000</pubDate><dc:creator>Nyi Nyi Than</dc:creator></item><item><title>Fearless Security: Thread Safety</title><link>https://hacks.mozilla.org/2019/02/fearless-security-thread-safety/</link><description><![CDATA[Multithreading allows programs to do more faster, but adds synchronization bugs and attacks. From a security standpoint, why do we care about thread safety?]]></description><guid isPermaLink="false">5e9e06ae-e22f-4798-b921-d8cb96bf451e</guid><pubDate>Thu, 14 Feb 2019 15:48:10 +0000</pubDate><dc:creator>Diane Hosfelt</dc:creator></item><item><title>Moving from Ruby to Rust</title><link>https://deliveroo.engineering/2019/02/14/moving-from-ruby-to-rust.html</link><description><![CDATA[How we migrated our Tier 1 service from Ruby to Rust and didn’t break production.]]></description><guid isPermaLink="false">d1d825d3-b864-466c-9909-287ae17591a9</guid><pubDate>Thu, 14 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Andrii Dmytrenko</dc:creator></item><item><title>Gtk-rs: how to have mutable object in a closure?</title><link>http://sireliah.com/niusy/gtk_rust_mutable_object_in_closure/</link><description><![CDATA[I wanted, was to start the Gtk application with already generated image of the prime numbers spiral (contained in gtk::Image widget) and then be able to re-generate the image when user changed something. It could be "Generate" click action for instance to show image in different resolution or color. The problem with the button closure was that when I added the Gtk image to the box_vert container, the next time the button was pressed, the code was supposed to remove existing image and add new one, but it didn't.]]></description><guid isPermaLink="false">56014abd-0fd0-4b8c-91ba-734e4f16ddac</guid><pubDate>Tue, 12 Feb 2019 21:58:00 +0000</pubDate><dc:creator>Piotr Gołąb</dc:creator></item><item><title>No, the problem isn’t “bad coders”</title><link>https://medium.com/@sgrif/no-the-problem-isnt-bad-coders-ed4347810270</link><description><![CDATA[A recent blog article discussed the fact that 70% of all security bugs in Microsoft products are due to memory safety vulnerabilities. A lot of the comments I’ve seen on social media boil down to “The problem isn’t the use of a memory unsafe language, but that the programmers who wrote this code are bad.”

In this article, I’m going to look at a recent bug that was caught by the Rust compiler, which I think shows that not only is this assertion unreasonable but virtually impossible for reasons I haven’t seen discussed. While the example I’m going to give is about thread safety rather than memory safety, the arguments I’m going to present can be applied to both.]]></description><guid isPermaLink="false">1c46694b-ae67-4596-9f46-0e9fd419f585</guid><pubDate>Tue, 12 Feb 2019 16:13:55 +0000</pubDate><dc:creator>Sean Griffin</dc:creator></item><item><title>A Quick Look at Trait Objects in Rust</title><link>https://tratt.net/laurie/blog/entries/a_quick_look_at_trait_objects_in_rust.html</link><description><![CDATA[One of the things that baffled me for quite a long time are Rust’s “trait objects”: they felt like an odd part of the language and I was never quite sure whether I was using them or not, even when I wanted to be. Since I’ve recently had cause to look into them in more detail, I thought it might be helpful to write a few things down, in case anyone else finds my explanation useful. The first part of this blog post covers the basics and the second part takes a look at the performance implications of the way trait objects are implemented in Rust.]]></description><guid isPermaLink="false">16bded10-81dc-4ef1-bf04-83a8ab584308</guid><pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Laurence Tratt</dc:creator></item><item><title>All-Hands 2019 Recap</title><link>https://www.ralfj.de/blog/2019/02/12/all-hands-recap.html</link><description><![CDATA[Last week, I was in Berlin at the Rust All-Hands 2019. It was great! I will miss nerding out in discussions about type theory and having every question answered by just going to the person who’s the expert in that area, and asking them. In this post, I am summarizing the progress we made in my main areas of interest and the discussions I was involved in—this is obviously just a small slice of all the things that happened.]]></description><guid isPermaLink="false">03bb4da4-48ab-4e1a-a092-be737761fd6f</guid><pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Ralf Jung</dc:creator></item><item><title>Structure your data in Rust</title><link>https://blog.knoldus.com/structure-your-data-in-rust/</link><description><![CDATA[Structuring of data in the correct way is very important. In java and C++, we use Class & Object. In C, we use structures, unions, and enums. We know that Rust adopts some features of functional programming and OOPs. Class and object is the main weapon of OOPs but how does Rust provide that functionality?]]></description><guid isPermaLink="false">08743d28-0fe1-42f6-ac4a-50f3698891a0</guid><pubDate>Mon, 11 Feb 2019 08:44:09 +0000</pubDate><dc:creator>Amita Yadav</dc:creator></item><item><title>Are you still using `println` in Rust for debugging?</title><link>https://blog.knoldus.com/are-you-still-using-println-in-rust-for-debugging/</link><description><![CDATA[In this blog, I will explain about new debugging macro dbg, added in Rust 1.32.0. This is a macro for quick and dirty debugging with which you can inspect the value of a given expression.]]></description><guid isPermaLink="false">3c0e89db-b8b3-44bc-a952-4cf406146fae</guid><pubDate>Mon, 11 Feb 2019 04:20:21 +0000</pubDate><dc:creator>Ayush Mishra</dc:creator></item><item><title>Generators I: Toward a minimum viable product</title><link>https://boats.gitlab.io/blog/post/generators-i/</link><description><![CDATA[We’re still not finished with the design of async/await, but it’s already become clear that it’s time to get the next phases of the feature into the pipeline. There are two extensions to the minimal async/await feature we’ve currently got that seem like the clear high priority:
 Async methods: allowing async fn to be used in traits. Generators: allowing imperative control flow to create Iterators and Streams the same way async fn allows imperative control flow to create a Future.]]></description><guid isPermaLink="false">a22c0b8e-ed54-4502-8130-a03913b6ff67</guid><pubDate>Mon, 11 Feb 2019 00:00:00 +0000</pubDate><dc:creator>withoutboats</dc:creator></item><item><title>Writing a Rust Roguelike for the Desktop and the Web</title><link>https://aimlesslygoingforward.com/blog/2019/02/09/writing-a-rust-roguelike-for-the-desktop-and-the-web/</link><description><![CDATA[I want to participate in this year's 7 Day Roguelike Challenge. If you've looked around this blog, you know the language is going to be Rust. But for the 7DRL, I'd really love if people could play it in the browser. What follows is a little guide to get you to a small playable proof of concept that can build native Windows, macOS and Linux executables but also runs in the browser via WebAssembly.]]></description><guid isPermaLink="false">df83e971-50b8-474a-8ecf-dd9a2b213972</guid><pubDate>Sat,  9 Feb 2019 18:13:52 +0000</pubDate><dc:creator>Tomas Sedovic</dc:creator></item><item><title>MPSC Channel API for painless usage of threads with GTK in Rust</title><link>https://coaxion.net/blog/2019/02/mpsc-channel-api-for-painless-usage-of-threads-with-gtk-in-rust/</link><description><![CDATA[A very common question that comes up on IRC or elsewhere by people trying to use the gtk-rs GTK bindings in Rust is how to modify UI state, or more specifically GTK widgets, from another thread. I’ll take this opportunity to also explain why it’s not so trivial in Rust first and also explain another solution.]]></description><guid isPermaLink="false">2c0fbe82-0ef4-455a-94f9-886472559fdb</guid><pubDate>Sat,  9 Feb 2019 13:25:55 +0000</pubDate><dc:creator>Sebastian Dröge</dc:creator></item><item><title>Be part of ANSSI’s new « Guide to develop secure applications with Rust »</title><link>https://www.ssi.gouv.fr/en/actualite/be-part-of-anssis-new-guide-to-develop-secure-applications-with-rust/</link><description><![CDATA[Rust is an open source programming language which combines security, modernity and performance. As well, it is gradually being adopted in a large number of projects. To support developers, ANSSI offers a new "Guide to develop secure applications with Rust". This guide is intended to be a living document and it’s open to all contributions from the community. The object of this document is to provide hints and recommendations for secure applications development using the Rust programming language, that allow users to benefits of the good level of trust the Rust language already provides.]]></description><guid isPermaLink="false">a552df74-7e67-4b0a-9e12-a75afc9235b8</guid><pubDate>Sat,  9 Feb 2019 03:29:00 +0000</pubDate><dc:creator>ANSSI</dc:creator></item><item><title>Exploring Rust</title><link>https://jonathansteyfkens.com/posts/explore-rust.html</link><description><![CDATA[Rust provides a lot of language constructs to enable and empower the user to write memory safe and correct code. But what happens behind these constructs? In this post I will outline ways of exploring rust and it’s compiler.

Last weekend I went to fosdem 2019. This is where I had the chance to attend a talk given by Matthias Endler. In his talk he explained how rust has got a lot of syntactic sugar to help the programmers in writing safe and correct code, part of his talk was explaining cargo-inspect to analyse this syntax and see what’s happening behind the scenes. This inspired me to dig a bit deeper and try out other tools.]]></description><guid isPermaLink="false">82089039-8f19-4e01-8d91-d0ef468bbab8</guid><pubDate>Sat,  9 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Jonathan Steyfkens</dc:creator></item><item><title>First release of ieee802154 crate - Partial implementation of the IEEE 802.15.4 standard</title><link>https://users.rust-lang.org/t/first-release-of-ieee802154-0-1-partial-implementation-of-the-ieee-802-15-4-standard/25094</link><description><![CDATA[I’ve released the ieee802154 crate, a partial implementation of the IEEE 802.15.4 standard, earlier this week.  IEEE 802.15.4 is a standard for low-rate wireless personal area networks. It is used as the basis for higher-level protocols like 6LoWPAN, Zigbee, or Thread. The ieee802154 crate is only a partial implementation of this standard, but I hope it can be used as a basis for future work by extending it as required.]]></description><guid isPermaLink="false">5e8e4feb-2bb8-4337-bfba-a71003c797ed</guid><pubDate>Fri,  8 Feb 2019 14:24:56 +0000</pubDate><dc:creator>Hanno Braun</dc:creator></item><item><title>What is Happening in Piston 7</title><link>http://blog.piston.rs/2019/02/08/what-is-happening-7/</link><description><![CDATA[This blog post is a brief summary of what happened the past 8 months in the Piston project.]]></description><guid isPermaLink="false">7ace680c-a527-42f6-9eeb-dc4fd680aa53</guid><pubDate>Fri,  8 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Sven Nilsen</dc:creator></item><item><title>Introducing swc (speedy web compiler) 1.0</title><link>https://swc-project.github.io/blog/2019/02/08/Introducing-swc-1.0</link><description><![CDATA[swc(speedy web compiler) is a super-fast javascript to javascript compiler. It can transpile typescript / jsx / ecmascript 2019 to browser-compatible javascript. It's 16x - 20x faster than babel even on single-core synchronous benchmark. Note that actual performance gap is larger because swc works on worker thread while babel works on event loop thread.]]></description><guid isPermaLink="false">a3541593-fc72-40c3-a4b8-7fdad4cab8fe</guid><pubDate>Fri,  8 Feb 2019 00:00:00 +0000</pubDate><dc:creator>DongYoon Kang</dc:creator></item><item><title>The Builder Pattern in Rust</title><link>https://oribenshir.github.io/afternoon_rusting/blog/building-rust</link><description><![CDATA[For the very first coding blog, I think it is appropriate to start with building objects. This post is about the Builder Pattern in Rust, and how it taught me I couldn’t write everything the way I want. Yes, strong typing prevents you from common pitfalls, and C++ can go quite far in this direction (as many JS/Python enthusiastic will gladly testify). It is often easy to forget how it sometimes prevents you from writing a completely legal and safe code, due to rules being too “protective”. And as Rust takes the code safety to a whole new level, sometimes a trivial code can’t be written, and without the proper knowledge, it might seem entirely arbitrary. It was a subtle restriction in the builder pattern that took me by surprise first.]]></description><guid isPermaLink="false">52b68916-b65b-4a28-9bac-e8c8038c6194</guid><pubDate>Fri,  8 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Ori Ben-Shir</dc:creator></item><item><title>Rewriting stackcollapse-xdebug in Rust</title><link>https://daniellockyer.com/rewriting-stackcollapse-xdebug/</link><description><![CDATA[A week or so ago, I saw the inferno project mentioned on the Rust subreddit. It was a rewrite of the great FlameGraph library into Rust. All of the work was being livestreamed by Jon Gjengset. I ended up watching some of the livestreams and had the idea of porting the stackcollapse-xdebug.php file to Rust, potentially so it could be included in the project in the future.]]></description><guid isPermaLink="false">9494ac41-95c6-43e8-86ef-660443465886</guid><pubDate>Fri,  8 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Daniel Lockyer</dc:creator></item><item><title>Metered-rs: fast, ergonomic metrics for Rust</title><link>https://users.rust-lang.org/t/metered-rs-fast-ergonomic-metrics-for-rust/25061</link><description><![CDATA[I’m pleased to announce the release of metered-rs, a crate that helps live measurements of code, inspired by Coda Hale’s Java metrics, with the philosophy that measuring program performance at runtime is valuable, and independent from benchmarking.]]></description><guid isPermaLink="false">6b4003d7-f0ce-4105-8ed5-f4bea94f77b9</guid><pubDate>Thu,  7 Feb 2019 18:14:21 +0000</pubDate><dc:creator>Simon Chemouil</dc:creator></item><item><title>Auditing Rust Crypto: The First Hours</title><link>https://research.kudelskisecurity.com/2019/02/07/auditing-rust-crypto-the-first-hours/</link><description><![CDATA[Checklists are a simple yet effective component of security and safety procedures in various fields, from flight safety and surgery to network security, and of course cryptography. So here’s a couple of things you want to check when starting the audit of a crypto software written in Rust.]]></description><guid isPermaLink="false">b6ca1619-6bdb-4efc-a043-ea73ed0e8336</guid><pubDate>Thu,  7 Feb 2019 14:00:15 +0000</pubDate><dc:creator>https://research.kudelskisecurity.com/</dc:creator></item><item><title>Rust: A unique perspective</title><link>https://limpet.net/mbrubeck/2019/02/07/rust-a-unique-perspective.html</link><description><![CDATA[In which I try to explain the reasoning behind Rust’s memory-safety mechanisms.]]></description><guid isPermaLink="false">d7fe7d63-d2c8-4bfc-834b-a93155c10dcb</guid><pubDate>Thu,  7 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Matt Brubeck</dc:creator></item><item><title>Notion: the hassle-free JavaScript toolchain manager</title><link>https://github.com/notion-cli/notion</link><description><![CDATA[Reliable: Ensure everyone in your project uses an identical dev environment, from the Node version to your preferred package manager.

Universal: Enjoy the same command-line experience in every shell and every major operating system.

Fast: Notion is implemented in Rust and deployed as a static executable for maximum performance.]]></description><guid isPermaLink="false">559ed8de-7e83-4caa-aef1-f2b5fd7faa01</guid><pubDate>Wed,  6 Feb 2019 06:23:00 +0000</pubDate><dc:creator>LinkedIn Engineering</dc:creator></item><item><title>A Python Interpreter written in Rust</title><link>https://github.com/RustPython/RustPython</link><description><![CDATA[Goals: Full Python-3 environment entirely in Rust (not CPython bindings). A clean implementation without compatibility hacks]]></description><guid isPermaLink="false">2eb82c9e-d427-4beb-9a07-e2fc2f5bb9df</guid><pubDate>Wed,  6 Feb 2019 00:00:00 +0000</pubDate><dc:creator>RustPython</dc:creator></item><item><title>Rust on STM32: Blinking an LED</title><link>https://jonathanklimt.de/electrics/programming/rust-STM32F103-blink/</link><description><![CDATA[All tutorials I found felt somehow outdated and I don't have the board used in the embedded Rust book. So I wanted to document how I got some Rust code running on the BluePill.]]></description><guid isPermaLink="false">5e9f0f9a-99dc-4971-a8a2-9bd2a2cf4cce</guid><pubDate>Wed,  6 Feb 2019 01:00:00 +0100</pubDate><dc:creator>Jonathan Klimt</dc:creator></item><item><title>Hello, sandboxfs 0.1.0</title><link>http://julio.meroh.net/2019/02/hello-sandboxfs-0.1.0.html</link><description><![CDATA[I am pleased to announce that the first release of sandboxfs, 0.1.0, is finally here! You can download the sources and prebuilt binaries from the 0.1.0 release page and you can read the installation instructions for more details.

The journey to this first release has been a long one. sandboxfs was first conceived over two years ago, was first announced in August 2017, showed its first promising results in April 2018, and has been undergoing a rewrite from Go to Rust.]]></description><guid isPermaLink="false">f2388917-1b08-4e6d-9051-daa496814ab1</guid><pubDate>Tue,  5 Feb 2019 09:00:00 -0500</pubDate><dc:creator>Julio Merino</dc:creator></item><item><title>Comparing C and Rust network protocol exercises - Ayende @ Rahien</title><link>https://ayende.com/blog/185859-A/comparing-c-and-rust-network-protocol-exercises?Key=bd1ba87d-6e7e-4739-824d-0ca6fc232b05</link><description><![CDATA[Almost by accident, it turned out that I implemented a pretty simple, but non trivial task in both C and Rust and blogged about them. Now that I’m done with both of them, I thought it would be interesting to talk about the differences in the experiences. The Rust version clocks at exactly 400 lines of code and uses 12 external crates. The C version has 911 lines of C code and another 140 lines in headers and depends on libuv and openssl.]]></description><guid isPermaLink="false">756d2f52-51dd-4408-ae79-3b17c02849e3</guid><pubDate>Tue,  5 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Ayende Rahien</dc:creator></item><item><title>A detailed guide to writing your first Neovim plugin in Rust</title><link>https://medium.com/@srishanbhattarai/a-detailed-guide-to-writing-your-first-neovim-plugin-in-rust-a81604c606b1</link><description><![CDATA[I recently wrote a plugin in Rust to control the Spotify desktop app for MacOS and find lyrics from within Neovim and found it to be a neat experience overall, and that’s coming from someone who isn’t a Rust expert. This post is a summary of all the research and discovery that happened during that process.]]></description><guid isPermaLink="false">0be32871-6687-4e3d-9cab-5bbb411c9cc0</guid><pubDate>Mon,  4 Feb 2019 09:58:50 +0000</pubDate><dc:creator>Srishan Bhattarai</dc:creator></item><item><title>Rust Governance: Scaling Empathy</title><link>https://manishearth.github.io/blog/2019/02/04/rust-governance-scaling-empathy/</link><description><![CDATA[There’s been a lot of talk about improving Rust’s governance model lately. As we decompress from last year’s hectic edition work, we’re slowly starting to look at all the bits of debt we accumulated, and organizational debt is high on that list.

I’ve been talking in private with people about a bunch of these things for quite a while now, and I felt it worthwhile to write down as much of my thoughts as I can before the Rust All Hands in Berlin this week.]]></description><guid isPermaLink="false">66563fe6-008a-475e-9337-42ee770d649c</guid><pubDate>Mon,  4 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Manish Goregaokar</dc:creator></item><item><title>Rust powered CLI apk decompiler</title><link>https://robertohuertas.com/2019/02/03/rust_cli_apk_decompiler/</link><description><![CDATA[Lately I’ve been needing to reverse engineer some apks and I’ve been manually using some third-party tools to do so. But, how could we speed up the process? A little bit of Rust can be very helpful!]]></description><guid isPermaLink="false">7bbec28c-a388-4372-92d9-4d2082454d67</guid><pubDate>Sun,  3 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Roberto Huertas</dc:creator></item><item><title>Solving Advent of Code in Under a Second</title><link>https://www.forrestthewoods.com/blog/solving-advent-of-code-in-under-a-second/</link><description><![CDATA[Algorithms and optimization to solve all Advent of Code 2018 puzzles in under one total second.]]></description><guid isPermaLink="false">b7475efb-632c-4875-ab6b-d283e220a434</guid><pubDate>Sun,  3 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Forrest Smith</dc:creator></item><item><title>Packaging a game for Windows, Mac, and Linux with Rust.</title><link>https://agmprojects.com/blog/packaging-a-game-for-windows-mac-and-linux-with-rust</link><description><![CDATA[Building a cross platform game for desktop operating systems in Rust is fairly doable without needing much platform specific code. Glutin is a Rust alternative to SDL for handling window creation & input. GFX handles most of the graphics API abstraction for you. You still write the shaders, but I was able to just use OpenGL and get it working on Windows 10, MacOS, and Ubuntu.]]></description><guid isPermaLink="false">8a353b9f-bb7e-40d7-a5ab-fd5372ad76f4</guid><pubDate>Sat,  2 Feb 2019 23:53:56 +0000</pubDate><dc:creator>Aaron McLeod</dc:creator></item><item><title>Rust: regret-less concurrency</title><link>https://medium.com/@polyglot_factotum/rust-regret-less-concurrency-2238b9e53333</link><description><![CDATA[Rust offers the promise of “fearless concurrency”, and delivers on it through memory safety. Yet this safety doesn’t guarantee code that is easy to maintain. If one is not “fearful” of complexity, concurrency can easily become a story of regrets. Can we get a “regret-less” kind of concurrency?]]></description><guid isPermaLink="false">4a6ed1c0-83d7-4392-9d2a-9b749a5433fe</guid><pubDate>Sat,  2 Feb 2019 12:15:32 +0000</pubDate><dc:creator>Polyglot Factotum</dc:creator></item><item><title>Cargo&apos;s next few years</title><link>https://www.ncameron.org/blog/cargos-next-few-years/</link><description><![CDATA[The Cargo team have been thinking about and discussing long-term plans for Cargo. In this post I'll talk about what we hope Cargo will look like around the time of the next edition (assuming there is another edition and that it happens in about three years, neither of which is confirmed). There will be another post soon on more concrete plans for this year, including some kind of roadmap.]]></description><guid isPermaLink="false">040a805b-f794-4df1-810f-5d3607a3f274</guid><pubDate>Sat,  2 Feb 2019 04:35:37 +0000</pubDate><dc:creator>Nick Cameron</dc:creator></item><item><title>Medic: A Rust CLI that checks the passwords of a KeePass database</title><link>https://sts10.github.io/2019/02/01/medic.html</link><description><![CDATA[After the recent breach, I was curious to check my passwords against the list, but I’m a bit paranoid, so, rather than paste my passwords into the Have I Been Pwned website, I wanted to download the big text file and check my passwords against it offline, nice and safely.

I use a password manager called KeePassXC, so all of my passwords are stored in an encrypted file – a KeePass database – and I use a program called KeePassXC, a free and open-source password manager, to manage them (I wrote a beginner’s user guide to KeePassXC a while back if you’re interested!). So ideally, to check my passwords against the big list, I’d have a tool that checks all the passwords in a given KeePass database against the entire HaveIBeenPwned list of passwords, preferably against the downloaded file (i.e. “offline”), rather than the API. In other words something similar to 1Password’s Watchtower feature, but preferably offline.

After poking around a bit I decided to write it myself in Rust, with this script and this crate as useful references. Medic is a Rust CLI that can perform a variety of “health” checks on a KeePass database.]]></description><guid isPermaLink="false">ba72d3fb-8f1e-4802-a55b-15dd8584046f</guid><pubDate>Fri,  1 Feb 2019 01:15:00 +0000</pubDate><dc:creator>Sam Schlinkert</dc:creator></item><item><title>The steps towards rustc, the great optimiser</title><link>https://kazlauskas.me/entries/the-road-to-bestest-optimiser.html</link><description><![CDATA[It has been more than 3 years now since the MIR ini­ti­at­ive has been ac­cep­ted. Cur­rently rustc has a num­ber of MIR op­tim­isa­tions: a simple in­lin­er, ba­sic con­stant and copy propaga­tion, a single in­struc­tion com­bin­a­tion rule, a few graph sim­pli­fic­a­tion and clean up passes… The pat­tern here is clear – most of the op­tim­isa­tions we cur­rently have are ba­sic and lim­ited in their po­tency. Given the pace at which we man­aged to bring up MIR in the first place, one would be right to ex­pect… some­thing more.

As some­body who has made an at­tempt and failed to im­ple­ment a num­ber of data­flow-­based op­tim­isa­tions (a­mong other thing­s), I con­sider my­self fairly qual­i­fied to haz­ard a guess as to what is the reason for the cur­rent state we are at. Here it goes.]]></description><guid isPermaLink="false">892a8c46-fee3-48d8-bc78-69a13a9a5c8d</guid><pubDate>Fri,  1 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Simonas Kazlauskas</dc:creator></item><item><title>Rust for Node developers</title><link>https://github.com/Mercateo/rust-for-node-developers</link><description><![CDATA[An introduction to the Rust programming language for Node developers.]]></description><guid isPermaLink="false">e1fdb8ec-e1f8-4718-ba5d-bb3bdf897506</guid><pubDate>Thu, 31 Jan 2019 23:59:00 +0000</pubDate><dc:creator>Donald Pipowitch</dc:creator></item><item><title>Killing unwrap()</title><link>https://dmerej.info/blog/post/killing-unwrap/</link><description><![CDATA[A collection of snippets to avoid unnecessary calls to unwrap() in Rust.]]></description><guid isPermaLink="false">7028c8de-9b0d-4f0f-a74e-0e07126cd80e</guid><pubDate>Wed, 30 Jan 2019 19:11:26 +0000</pubDate><dc:creator>Dimitri Merejkowsky</dc:creator></item><item><title>Announcing OOProxy, a reverse OpenID and OAuth2 proxy</title><link>https://medium.com/hal24k-techblog/announcing-ooproxy-b041bab2bc85</link><description><![CDATA[At HAL24K, we benefit a lot from open source software. That is why, to contribute back, we’ve started an internal program to open source some of the internal tools and libraries we’ve used to build our platform and machine learning solutions, starting with OOProxy. OOProxy is a reverse OpenID and OAuth2 proxy that we use to protect our HTTP-based machine learning APIs.]]></description><guid isPermaLink="false">d430867d-388e-4cfb-9e42-698d80876f1c</guid><pubDate>Wed, 30 Jan 2019 14:10:08 +0000</pubDate><dc:creator>Tim Stokman</dc:creator></item><item><title>Salsa: Incremental recompilation</title><link>http://smallcultfollowing.com/babysteps/blog/2019/01/29/salsa-incremental-recompilation/</link><description><![CDATA[So for the last couple of months or so, I’ve been hacking in my spare time on this library named salsa, along with a number of awesome other folks. Salsa basically extracts the incremental recompilation techniques that we built for rustc into a general-purpose framework that can be used by other programs. Salsa is developing quickly: with the publishing of v0.10.0, we saw a big step up in the overall ergonomics, and I think the current interface is starting to feel very nice.]]></description><guid isPermaLink="false">30602bae-8957-4b3a-92d2-eec9e6f2fddd</guid><pubDate>Tue, 29 Jan 2019 00:00:00 -0500</pubDate><dc:creator>Niko Matsakis</dc:creator></item><item><title>Lock-free Rust: Crossbeam in 2019</title><link>https://stjepang.github.io/2019/01/29/lock-free-rust-crossbeam-in-2019.html</link><description><![CDATA[This is a follow-up post to Lock-freedom without garbage collection from 2015, which introduced Crossbeam, a Rust library that implements efficient lock-free data structures without relying on a tracing garbage collector.]]></description><guid isPermaLink="false">7d5bbb25-d599-43d5-82cb-1a4dcdf47286</guid><pubDate>Tue, 29 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Stjepan Glavina</dc:creator></item><item><title>Creating 🌊 web-server .deb binary with Rust</title><link>https://gill.net.in/posts/creating-web-server-deb-binary-with-rust/</link><description><![CDATA[We are going to make a demo linux web-server with systemd, config file and installable .deb binary in Rust.]]></description><guid isPermaLink="false">2b4a2862-e8ba-427b-aa27-c206356f5700</guid><pubDate>Tue, 29 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Harry Gill</dc:creator></item><item><title>Writing Mails from Rust (1/3): Mail in general</title><link>https://blog.1aim.com/post/002-mail-1-intro/</link><description><![CDATA[This is the first part in a three part blog post about (e-)mails and how to create, encode and send them using the mail crate (a library).]]></description><guid isPermaLink="false">5b4334f5-08f9-450c-88cf-20fe91993cdc</guid><pubDate>Mon, 28 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Philipp Korber</dc:creator></item><item><title>Rust: The story of closures</title><link>https://medium.com/@earthengine/rust-the-story-of-closures-8f8e5af7ea1c</link><description><![CDATA[The Rust programming language introduced many leading concepts in the programming language design landscape. The most famous features are the borrow checker, the ownership management and the trait system.

However, the fantastic expressiveness of the closures is generally underestimated. Yes, from the day Javascript introduces closures to main stream programming languages, these days closures become one of the basic features for almost all modern languages. However, Rust’s ownership rules result in some brand-new observations to closures and its position in programming. Let’s start the journey now.]]></description><guid isPermaLink="false">6881b0f3-53e8-4fbf-bca2-9e108792bf29</guid><pubDate>Sun, 27 Jan 2019 03:12:11 +0000</pubDate><dc:creator>Earth Engine</dc:creator></item><item><title>Building an Embedded Futures Executor</title><link>https://josh.robsonchase.com/embedded-executor/</link><description><![CDATA[After discovering that the embedded-hal ecosystem wasn't quite what I wanted it to be, I set out to build the abstractions that I wanted to use, namely: async-first and core::future compatible. The first thing on the list? A way to run the Futures of course!]]></description><guid isPermaLink="false">3efffa85-74d0-41d1-8d14-c5933470cf0a</guid><pubDate>Sat, 26 Jan 2019 22:00:00 -0500</pubDate><dc:creator>Josh Robson Chase</dc:creator></item><item><title>Reflections on Learning Rust By Building Punchtop</title><link>https://hyperbo.la/w/reflections-on-learning-rust/</link><description><![CDATA[To learn Rust, I implemented an audio game. There were some things I liked and some things I didn't. Some things were easy and some were hard. And there were plenty of libraries that were a joy to use.]]></description><guid isPermaLink="false">e87f2464-ee95-4e9a-8d8c-4ccbba6b165c</guid><pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Ryan Lopopolo</dc:creator></item><item><title>Embedded Rust Experiments - Is my STM32 MCU running fast?</title><link>https://nercury.github.io/rust/embedded/experiments/2019/01/27/rust-embedded-02-measuring-the-clock.html</link><description><![CDATA[So, I have this STM32VLDISCOVERY dev board. It has the STM32F100RBT6B MCU, capable of running at 24MHz. On the board, there is a 8MHz crystal. Naturally, when you are new to microcontrollers (like me), you may have a few questions: When we upload a program on this development board, at what speed it is actually running? Is it using this external crystal? Why is this crystal 8MHz if the MCU is capable of 24MHz? If our program is not running at the maximum speed, how do we make it run at the maximum speed?]]></description><guid isPermaLink="false">c032fc9f-79b2-454f-914f-a32fda90092d</guid><pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Nerijus Arlauskas</dc:creator></item><item><title>My Rust Powered linux.conf.au e-Paper Badge</title><link>http://www.wezm.net/technical/2019/01/linux-conf-au-rust-epaper-badge/</link><description><![CDATA[I attended linux.conf.au (for the first time) in Christchurch, New Zealand. It’s a week long conference covering Linux, open source software and hardware, privacy, security and much more. The theme this year was IoT. In line with the theme I built a digital conference badge to take to the conference. It used a tri-colour e-Paper display and was powered by a Rust program I built running on Raspbian Linux. This post describes how it was built, how it works, and how it fared at the conference. The source code is on GitHub.]]></description><guid isPermaLink="false">b4901fae-b805-4020-b425-47d2fc82b14d</guid><pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Wesley Moore</dc:creator></item><item><title>Rust on iOS</title><link>https://medium.com/visly/rust-on-ios-39f799b3c1dd</link><description><![CDATA[If you’re an iOS developer you may be asking yourself how and why you would make use of Rust on iOS. This article will mostly cover the how. As to why, the most compelling reason for us at Visly is that it enables us to share code between Android and iOS in a performant and safe manner, in a language much easier to work with than C++.]]></description><guid isPermaLink="false">2d233ddd-ecb5-499d-88b8-a0f14797c1a7</guid><pubDate>Sat, 26 Jan 2019 21:30:07 +0000</pubDate><dc:creator>Emil Sjölander</dc:creator></item><item><title>Embedding WebAssembly in your Rust application</title><link>https://medium.com/wasmer/executing-webassembly-in-your-rust-application-d5cd32e8ce46</link><description><![CDATA[Wasmer is a WebAssembly runtime designed to run both standalone and embedded. The crate wasmer-runtime exposes an easy to use and safe api for compiling, creating imports, and calling WebAssembly from your own library. This tutorial goes over how to make a simple wasm application and run it using the wasmer-runtime!]]></description><guid isPermaLink="false">94fdb740-ae30-402f-9dc5-3f98b6a2753a</guid><pubDate>Thu, 24 Jan 2019 17:20:46 +0000</pubDate><dc:creator>Brandon Fish and Lachlan Sneff</dc:creator></item><item><title>Fearless Security: Memory Safety</title><link>https://hacks.mozilla.org/2019/01/fearless-security-memory-safety/</link><description><![CDATA[Memory safety violations can cause programs to crash unexpectedly and can be exploited to alter intended behavior--languages can manage this multiple ways.]]></description><guid isPermaLink="false">e89d9e3f-1400-40ca-9e1c-d90817daf41e</guid><pubDate>Wed, 23 Jan 2019 15:00:57 +0000</pubDate><dc:creator>Diane Hosfelt</dc:creator></item><item><title>Manage security vulnerabilities in embedded IoT devices with Rust</title><link>https://medium.com/@flundstrom2/manage-security-vulnerabilities-in-embedded-iot-devices-with-rust-14aeabada68b</link><description><![CDATA[The Rust programming language’s rich type system and ownership model guarantee memory-safety and thread-safety — and eliminate many classes of bugs and security vulnerabilities at compile-time.]]></description><guid isPermaLink="false">84b2eb06-712b-4d63-b899-c91e16e1b0ee</guid><pubDate>Wed, 23 Jan 2019 12:18:11 +0000</pubDate><dc:creator>Fredrik Lundström</dc:creator></item><item><title>Enjoy a slice of QUIC, and Rust!</title><link>https://blog.cloudflare.com/enjoy-a-slice-of-quic-and-rust/</link><description><![CDATA[During last year’s Birthday Week we announced early support for QUIC, the next generation encrypted-by-default network transport protocol designed to secure and accelerate web traffic on the Internet.

We are not quite ready to make this feature available to every Cloudflare customer yet, but while you wait we thought you might enjoy a slice of quiche, our own open-source implementation of the QUIC protocol written in Rust.]]></description><guid isPermaLink="false">2810bb3d-7b68-42f0-ba5f-5c7a5956caf7</guid><pubDate>Tue, 22 Jan 2019 16:26:07 +0000</pubDate><dc:creator>Alessandro Ghedini</dc:creator></item><item><title>Exporting Serde types to TypeScript</title><link>http://timryan.org/2019/01/22/exporting-serde-types-to-typescript.html</link><description><![CDATA[I built my first web application with Rust and WebAssembly back in 2017. At the time, support for compiling Rust with the wasm32-unknown-unknown target had just landed, letting you run Rust code in the browser with few modifications. The downside was that loading and interacting with WebAssembly might require you to explicitly allocate and track memory. You might even need to manually decode UTF-8 strings in JavaScript:]]></description><guid isPermaLink="false">76ad8f41-d0b9-4789-b45a-5cfa550aa7c3</guid><pubDate>Tue, 22 Jan 2019 16:00:00 +0000</pubDate><dc:creator>Tim Ryan</dc:creator></item><item><title>Rust OSS Governance and Sustainablility I</title><link>https://mgattozzi.com/oss-governance-and-sustainablility-i/</link><description><![CDATA[Recently I travelled all the way to Waterloo from Boston for Starcon. With a 9 hour drive I had a lot of time to think about things and so I spent a good majority of it thinking about OSS Governanace and Sustainability. What I came up with and thought of is the more concrete solutions to the problems I brought up in my Rust 2019 post. With the Rust All hands in Berlin only a few weeks away I wanted to get my thoughts in order by writing out some of the solutions to specific problems I came up with. Now, this doesn't mean they'll be accepted! We might even find better solutions! I just felt a need to articulate them as both a reference point and to make sure I've thought through them well. I'll be splitting them into a few posts so I can publish more faster, rather than write one long post that won't be published in time. With that in mind let's begin!]]></description><guid isPermaLink="false">799301a7-d57a-4e9c-8412-aafc4e643f0a</guid><pubDate>Tue, 22 Jan 2019 04:20:23 +0000</pubDate><dc:creator>Michael Gattozzi</dc:creator></item><item><title>Performance of Rust&apos;s match vs. lookup tables</title><link>https://kevinlynagh.com/notes/match-vs-lookup/</link><description><![CDATA[I’ve been getting into bioinformatics algorithms lately and ran across an interesting pull request that improved performance by changing a Rust match expression to a lookup. This felt quite surprising to me since, well, the match is so simple — why isn’t the compiler already generating optimal code for it?]]></description><guid isPermaLink="false">2d51794e-d4d6-44a1-a2ab-f04940842e84</guid><pubDate>Tue, 22 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Kevin Lynagh</dc:creator></item><item><title>Polonius and the case of the hereditary harrop predicate</title><link>http://smallcultfollowing.com/babysteps/blog/2019/01/21/hereditary-harrop-region-constraints/</link><description><![CDATA[In my previous post about Polonius and subregion obligations, I mentioned that there needs to be a follow-up to deal with higher-ranked subregions. This post digs a bit more into what the problem is in the first place and sketches out the general solution I have in mind, but doesn’t give any concrete algorithms for it.]]></description><guid isPermaLink="false">09b9f354-aeed-4d48-b859-9c63fcdddb2e</guid><pubDate>Mon, 21 Jan 2019 00:00:00 -0500</pubDate><dc:creator>Niko Matsakis</dc:creator></item><item><title>Learning the Rust Programming Language</title><link>https://www.aarongreenlee.com/blog/beginning-to-learn-rust-programming-language-rustlang/</link><description><![CDATA[Rust has been on my radar for some time and I aspire to become proficient with the Rust Programming Language in 2019. Initially, my interest in Rust was sparked by the memory ownership model. With WASM support going mainstream I thought I’d give Rust a deeper look and have enjoyed my experience so far. This post is a living post that will continue to be revised and appended as I learn more about Rust.]]></description><guid isPermaLink="false">4f4e3ed0-1852-4954-9cde-1d74c7e54b6f</guid><pubDate>Mon, 21 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Aaron Greenlee</dc:creator></item><item><title>Using Rust for creating Ubuntu Touch apps</title><link>https://timsueberkrueb.io/posts/2019/01/18/rust-ubuntu-touch-app-dev/</link><description><![CDATA[This post aims to give you a small introduction to using the Rust programming language for writing apps for Ubuntu touch.]]></description><guid isPermaLink="false">daf60963-a30c-4e74-82cb-123d2faac884</guid><pubDate>Sun, 20 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Tim Süberkrüb</dc:creator></item><item><title>Mod player in Rust - part 1</title><link>https://www.codeslow.com/2019/01/mod-player-in-rust-part-1.html</link><description><![CDATA[For my next Rust project I want to try something a bit more challenging than the Sudoku solver. I want to write a mod player in Rust.]]></description><guid isPermaLink="false">ddee0856-44f0-4b27-a925-8c7b39904a35</guid><pubDate>Sat, 19 Jan 2019 12:43:00 -0800</pubDate><dc:creator>Jani Peltonen</dc:creator></item><item><title>A Very Relatable Database: Part 1</title><link>https://natelincoln.com/a-very-relatable-database/part-1/</link><description><![CDATA[I like to find ways to fill up my free time over winter breaks. Since I’m not in school for a month, I usually take the time to do some self-study on a topic I find interesting. This past month, it was building a database. Unfortunately, I had only a casual understanding of how a database actually works under the hood, and no idea how to get started. Additionally, I decided to write the database in Rust, since I knew there would be complicated management of data, and I wanted to avoid headaches involving invalid data. Finally, rust’s static garbage collector meant I wouldn’t have to rely on a runtime to guarantee this.

That was a month ago. While I’m not too far along (mostly due to being busier than expected during the break), I still have things I think are worth sharing.]]></description><guid isPermaLink="false">a4e3cb9f-0d9d-4a47-98cd-2b51d39b7eb6</guid><pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Nate Lincoln</dc:creator></item></channel></rss>