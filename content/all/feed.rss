<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - All Posts</title><link>https://readrust.net/</link><description>All Posts posts on Read Rust</description><item><title>Organizational Debt</title><link>https://boats.gitlab.io/blog/post/rust-2019/</link><description><![CDATA[We all know that classic aphorism: Year comes to an end, Rust blog post press send. This is mine.

There are lots of cool technical improvements to Rust that I want the project to achieve this year, and a few in particular that I’m definitely going to be putting a lot of time into. But this blog post is going to talk about none of them. Instead, I want to talk about organizational debt, and how badly the Rust project needs to deal with it in 2019.]]></description><guid isPermaLink="false">f0adf24b-6589-4306-a580-6cef894ad3b7</guid><pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate><dc:creator>withoutboats</dc:creator></item><item><title>Gtk-rs: how to have mutable object in a closure?</title><link>http://sireliah.com/niusy/gtk_rust_mutable_object_in_closure/</link><description><![CDATA[I wanted, was to start the Gtk application with already generated image of the prime numbers spiral (contained in gtk::Image widget) and then be able to re-generate the image when user changed something. It could be "Generate" click action for instance to show image in different resolution or color. The problem with the button closure was that when I added the Gtk image to the box_vert container, the next time the button was pressed, the code was supposed to remove existing image and add new one, but it didn't.]]></description><guid isPermaLink="false">56014abd-0fd0-4b8c-91ba-734e4f16ddac</guid><pubDate>Tue, 12 Feb 2019 21:58:00 +0000</pubDate><dc:creator>Piotr Gołąb</dc:creator></item><item><title>No, the problem isn’t “bad coders”</title><link>https://medium.com/@sgrif/no-the-problem-isnt-bad-coders-ed4347810270</link><description><![CDATA[A recent blog article discussed the fact that 70% of all security bugs in Microsoft products are due to memory safety vulnerabilities. A lot of the comments I’ve seen on social media boil down to “The problem isn’t the use of a memory unsafe language, but that the programmers who wrote this code are bad.”

In this article, I’m going to look at a recent bug that was caught by the Rust compiler, which I think shows that not only is this assertion unreasonable but virtually impossible for reasons I haven’t seen discussed. While the example I’m going to give is about thread safety rather than memory safety, the arguments I’m going to present can be applied to both.]]></description><guid isPermaLink="false">1c46694b-ae67-4596-9f46-0e9fd419f585</guid><pubDate>Tue, 12 Feb 2019 16:13:55 +0000</pubDate><dc:creator>Sean Griffin</dc:creator></item><item><title>All-Hands 2019 Recap</title><link>https://www.ralfj.de/blog/2019/02/12/all-hands-recap.html</link><description><![CDATA[Last week, I was in Berlin at the Rust All-Hands 2019. It was great! I will miss nerding out in discussions about type theory and having every question answered by just going to the person who’s the expert in that area, and asking them. In this post, I am summarizing the progress we made in my main areas of interest and the discussions I was involved in—this is obviously just a small slice of all the things that happened.]]></description><guid isPermaLink="false">03bb4da4-48ab-4e1a-a092-be737761fd6f</guid><pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Ralf Jung</dc:creator></item><item><title>Are you still using `println` in Rust for debugging?</title><link>https://blog.knoldus.com/are-you-still-using-println-in-rust-for-debugging/</link><description><![CDATA[In this blog, I will explain about new debugging macro dbg, added in Rust 1.32.0. This is a macro for quick and dirty debugging with which you can inspect the value of a given expression.]]></description><guid isPermaLink="false">3c0e89db-b8b3-44bc-a952-4cf406146fae</guid><pubDate>Mon, 11 Feb 2019 04:20:21 +0000</pubDate><dc:creator>Ayush Mishra</dc:creator></item><item><title>Be part of ANSSI’s new « Guide to develop secure applications with Rust »</title><link>https://www.ssi.gouv.fr/en/actualite/be-part-of-anssis-new-guide-to-develop-secure-applications-with-rust/</link><description><![CDATA[Rust is an open source programming language which combines security, modernity and performance. As well, it is gradually being adopted in a large number of projects. To support developers, ANSSI offers a new "Guide to develop secure applications with Rust". This guide is intended to be a living document and it’s open to all contributions from the community. The object of this document is to provide hints and recommendations for secure applications development using the Rust programming language, that allow users to benefits of the good level of trust the Rust language already provides.]]></description><guid isPermaLink="false">a552df74-7e67-4b0a-9e12-a75afc9235b8</guid><pubDate>Sat,  9 Feb 2019 03:29:00 +0000</pubDate><dc:creator>ANSSI</dc:creator></item><item><title>First release of ieee802154 crate - Partial implementation of the IEEE 802.15.4 standard</title><link>https://users.rust-lang.org/t/first-release-of-ieee802154-0-1-partial-implementation-of-the-ieee-802-15-4-standard/25094</link><description><![CDATA[I’ve released the ieee802154 crate, a partial implementation of the IEEE 802.15.4 standard, earlier this week.  IEEE 802.15.4 is a standard for low-rate wireless personal area networks. It is used as the basis for higher-level protocols like 6LoWPAN, Zigbee, or Thread. The ieee802154 crate is only a partial implementation of this standard, but I hope it can be used as a basis for future work by extending it as required.]]></description><guid isPermaLink="false">5e8e4feb-2bb8-4337-bfba-a71003c797ed</guid><pubDate>Fri,  8 Feb 2019 14:24:56 +0000</pubDate><dc:creator>Hanno Braun</dc:creator></item><item><title>Metered-rs: fast, ergonomic metrics for Rust</title><link>https://users.rust-lang.org/t/metered-rs-fast-ergonomic-metrics-for-rust/25061</link><description><![CDATA[I’m pleased to announce the release of metered-rs, a crate that helps live measurements of code, inspired by Coda Hale’s Java metrics, with the philosophy that measuring program performance at runtime is valuable, and independent from benchmarking.]]></description><guid isPermaLink="false">6b4003d7-f0ce-4105-8ed5-f4bea94f77b9</guid><pubDate>Thu,  7 Feb 2019 18:14:21 +0000</pubDate><dc:creator>Simon Chemouil</dc:creator></item><item><title>Auditing Rust Crypto: The First Hours</title><link>https://research.kudelskisecurity.com/2019/02/07/auditing-rust-crypto-the-first-hours/</link><description><![CDATA[Checklists are a simple yet effective component of security and safety procedures in various fields, from flight safety and surgery to network security, and of course cryptography. So here’s a couple of things you want to check when starting the audit of a crypto software written in Rust.]]></description><guid isPermaLink="false">b6ca1619-6bdb-4efc-a043-ea73ed0e8336</guid><pubDate>Thu,  7 Feb 2019 14:00:15 +0000</pubDate><dc:creator>https://research.kudelskisecurity.com/</dc:creator></item><item><title>Notion: the hassle-free JavaScript toolchain manager</title><link>https://github.com/notion-cli/notion</link><description><![CDATA[Reliable: Ensure everyone in your project uses an identical dev environment, from the Node version to your preferred package manager.

Universal: Enjoy the same command-line experience in every shell and every major operating system.

Fast: Notion is implemented in Rust and deployed as a static executable for maximum performance.]]></description><guid isPermaLink="false">559ed8de-7e83-4caa-aef1-f2b5fd7faa01</guid><pubDate>Wed,  6 Feb 2019 06:23:00 +0000</pubDate><dc:creator>LinkedIn Engineering</dc:creator></item><item><title>A Python Interpreter written in Rust</title><link>https://github.com/RustPython/RustPython</link><description><![CDATA[Goals: Full Python-3 environment entirely in Rust (not CPython bindings). A clean implementation without compatibility hacks]]></description><guid isPermaLink="false">2eb82c9e-d427-4beb-9a07-e2fc2f5bb9df</guid><pubDate>Wed,  6 Feb 2019 00:00:00 +0000</pubDate><dc:creator>RustPython</dc:creator></item><item><title>Rust on STM32: Blinking an LED</title><link>https://jonathanklimt.de/electrics/programming/rust-STM32F103-blink/</link><description><![CDATA[All tutorials I found felt somehow outdated and I don't have the board used in the embedded Rust book. So I wanted to document how I got some Rust code running on the BluePill.]]></description><guid isPermaLink="false">5e9f0f9a-99dc-4971-a8a2-9bd2a2cf4cce</guid><pubDate>Wed,  6 Feb 2019 01:00:00 +0100</pubDate><dc:creator>Jonathan Klimt</dc:creator></item><item><title>Hello, sandboxfs 0.1.0</title><link>http://julio.meroh.net/2019/02/hello-sandboxfs-0.1.0.html</link><description><![CDATA[I am pleased to announce that the first release of sandboxfs, 0.1.0, is finally here! You can download the sources and prebuilt binaries from the 0.1.0 release page and you can read the installation instructions for more details.

The journey to this first release has been a long one. sandboxfs was first conceived over two years ago, was first announced in August 2017, showed its first promising results in April 2018, and has been undergoing a rewrite from Go to Rust.]]></description><guid isPermaLink="false">f2388917-1b08-4e6d-9051-daa496814ab1</guid><pubDate>Tue,  5 Feb 2019 09:00:00 -0500</pubDate><dc:creator>Julio Merino</dc:creator></item><item><title>A detailed guide to writing your first Neovim plugin in Rust</title><link>https://medium.com/@srishanbhattarai/a-detailed-guide-to-writing-your-first-neovim-plugin-in-rust-a81604c606b1</link><description><![CDATA[I recently wrote a plugin in Rust to control the Spotify desktop app for MacOS and find lyrics from within Neovim and found it to be a neat experience overall, and that’s coming from someone who isn’t a Rust expert. This post is a summary of all the research and discovery that happened during that process.]]></description><guid isPermaLink="false">0be32871-6687-4e3d-9cab-5bbb411c9cc0</guid><pubDate>Mon,  4 Feb 2019 09:58:50 +0000</pubDate><dc:creator>Srishan Bhattarai</dc:creator></item><item><title>Rust powered CLI apk decompiler</title><link>https://robertohuertas.com/2019/02/03/rust_cli_apk_decompiler/</link><description><![CDATA[Lately I’ve been needing to reverse engineer some apks and I’ve been manually using some third-party tools to do so. But, how could we speed up the process? A little bit of Rust can be very helpful!]]></description><guid isPermaLink="false">7bbec28c-a388-4372-92d9-4d2082454d67</guid><pubDate>Sun,  3 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Roberto Huertas</dc:creator></item><item><title>Solving Advent of Code in Under a Second</title><link>https://www.forrestthewoods.com/blog/solving-advent-of-code-in-under-a-second/</link><description><![CDATA[Algorithms and optimization to solve all Advent of Code 2018 puzzles in under one total second.]]></description><guid isPermaLink="false">b7475efb-632c-4875-ab6b-d283e220a434</guid><pubDate>Sun,  3 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Forrest Smith</dc:creator></item><item><title>Packaging a game for Windows, Mac, and Linux with Rust.</title><link>https://agmprojects.com/blog/packaging-a-game-for-windows-mac-and-linux-with-rust</link><description><![CDATA[Building a cross platform game for desktop operating systems in Rust is fairly doable without needing much platform specific code. Glutin is a Rust alternative to SDL for handling window creation & input. GFX handles most of the graphics API abstraction for you. You still write the shaders, but I was able to just use OpenGL and get it working on Windows 10, MacOS, and Ubuntu.]]></description><guid isPermaLink="false">8a353b9f-bb7e-40d7-a5ab-fd5372ad76f4</guid><pubDate>Sat,  2 Feb 2019 23:53:56 +0000</pubDate><dc:creator>Aaron McLeod</dc:creator></item><item><title>Rust: regret-less concurrency</title><link>https://medium.com/@polyglot_factotum/rust-regret-less-concurrency-2238b9e53333</link><description><![CDATA[Rust offers the promise of “fearless concurrency”, and delivers on it through memory safety. Yet this safety doesn’t guarantee code that is easy to maintain. If one is not “fearful” of complexity, concurrency can easily become a story of regrets. Can we get a “regret-less” kind of concurrency?]]></description><guid isPermaLink="false">4a6ed1c0-83d7-4392-9d2a-9b749a5433fe</guid><pubDate>Sat,  2 Feb 2019 12:15:32 +0000</pubDate><dc:creator>Polyglot Factotum</dc:creator></item><item><title>Cargo&apos;s next few years</title><link>https://www.ncameron.org/blog/cargos-next-few-years/</link><description><![CDATA[The Cargo team have been thinking about and discussing long-term plans for Cargo. In this post I'll talk about what we hope Cargo will look like around the time of the next edition (assuming there is another edition and that it happens in about three years, neither of which is confirmed). There will be another post soon on more concrete plans for this year, including some kind of roadmap.]]></description><guid isPermaLink="false">040a805b-f794-4df1-810f-5d3607a3f274</guid><pubDate>Sat,  2 Feb 2019 04:35:37 +0000</pubDate><dc:creator>Nick Cameron</dc:creator></item><item><title>The steps towards rustc, the great optimiser</title><link>https://kazlauskas.me/entries/the-road-to-bestest-optimiser.html</link><description><![CDATA[It has been more than 3 years now since the MIR ini­ti­at­ive has been ac­cep­ted. Cur­rently rustc has a num­ber of MIR op­tim­isa­tions: a simple in­lin­er, ba­sic con­stant and copy propaga­tion, a single in­struc­tion com­bin­a­tion rule, a few graph sim­pli­fic­a­tion and clean up passes… The pat­tern here is clear – most of the op­tim­isa­tions we cur­rently have are ba­sic and lim­ited in their po­tency. Given the pace at which we man­aged to bring up MIR in the first place, one would be right to ex­pect… some­thing more.

As some­body who has made an at­tempt and failed to im­ple­ment a num­ber of data­flow-­based op­tim­isa­tions (a­mong other thing­s), I con­sider my­self fairly qual­i­fied to haz­ard a guess as to what is the reason for the cur­rent state we are at. Here it goes.]]></description><guid isPermaLink="false">892a8c46-fee3-48d8-bc78-69a13a9a5c8d</guid><pubDate>Fri,  1 Feb 2019 00:00:00 +0000</pubDate><dc:creator>Simonas Kazlauskas</dc:creator></item><item><title>Rust for Node developers</title><link>https://github.com/Mercateo/rust-for-node-developers</link><description><![CDATA[An introduction to the Rust programming language for Node developers.]]></description><guid isPermaLink="false">e1fdb8ec-e1f8-4718-ba5d-bb3bdf897506</guid><pubDate>Thu, 31 Jan 2019 23:59:00 +0000</pubDate><dc:creator>Donald Pipowitch</dc:creator></item><item><title>Killing unwrap()</title><link>https://dmerej.info/blog/post/killing-unwrap/</link><description><![CDATA[A collection of snippets to avoid unnecessary calls to unwrap() in Rust.]]></description><guid isPermaLink="false">7028c8de-9b0d-4f0f-a74e-0e07126cd80e</guid><pubDate>Wed, 30 Jan 2019 19:11:26 +0000</pubDate><dc:creator>Dimitri Merejkowsky</dc:creator></item><item><title>Salsa: Incremental recompilation</title><link>http://smallcultfollowing.com/babysteps/blog/2019/01/29/salsa-incremental-recompilation/</link><description><![CDATA[So for the last couple of months or so, I’ve been hacking in my spare time on this library named salsa, along with a number of awesome other folks. Salsa basically extracts the incremental recompilation techniques that we built for rustc into a general-purpose framework that can be used by other programs. Salsa is developing quickly: with the publishing of v0.10.0, we saw a big step up in the overall ergonomics, and I think the current interface is starting to feel very nice.]]></description><guid isPermaLink="false">30602bae-8957-4b3a-92d2-eec9e6f2fddd</guid><pubDate>Tue, 29 Jan 2019 00:00:00 -0500</pubDate><dc:creator>Niko Matsakis</dc:creator></item><item><title>Creating 🌊 web-server .deb binary with Rust</title><link>https://gill.net.in/posts/creating-web-server-deb-binary-with-rust/</link><description><![CDATA[We are going to make a demo linux web-server with systemd, config file and installable .deb binary in Rust.]]></description><guid isPermaLink="false">2b4a2862-e8ba-427b-aa27-c206356f5700</guid><pubDate>Tue, 29 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Harry Gill</dc:creator></item><item><title>Writing Mails from Rust (1/3): Mail in general</title><link>https://blog.1aim.com/post/002-mail-1-intro/</link><description><![CDATA[This is the first part in a three part blog post about (e-)mails and how to create, encode and send them using the mail crate (a library).]]></description><guid isPermaLink="false">5b4334f5-08f9-450c-88cf-20fe91993cdc</guid><pubDate>Mon, 28 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Philipp Korber</dc:creator></item><item><title>Embedded Rust Experiments - Is my STM32 MCU running fast?</title><link>https://nercury.github.io/rust/embedded/experiments/2019/01/27/rust-embedded-02-measuring-the-clock.html</link><description><![CDATA[So, I have this STM32VLDISCOVERY dev board. It has the STM32F100RBT6B MCU, capable of running at 24MHz. On the board, there is a 8MHz crystal. Naturally, when you are new to microcontrollers (like me), you may have a few questions: When we upload a program on this development board, at what speed it is actually running? Is it using this external crystal? Why is this crystal 8MHz if the MCU is capable of 24MHz? If our program is not running at the maximum speed, how do we make it run at the maximum speed?]]></description><guid isPermaLink="false">c032fc9f-79b2-454f-914f-a32fda90092d</guid><pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Nerijus Arlauskas</dc:creator></item><item><title>My Rust Powered linux.conf.au e-Paper Badge</title><link>http://www.wezm.net/technical/2019/01/linux-conf-au-rust-epaper-badge/</link><description><![CDATA[I attended linux.conf.au (for the first time) in Christchurch, New Zealand. It’s a week long conference covering Linux, open source software and hardware, privacy, security and much more. The theme this year was IoT. In line with the theme I built a digital conference badge to take to the conference. It used a tri-colour e-Paper display and was powered by a Rust program I built running on Raspbian Linux. This post describes how it was built, how it works, and how it fared at the conference. The source code is on GitHub.]]></description><guid isPermaLink="false">b4901fae-b805-4020-b425-47d2fc82b14d</guid><pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Wesley Moore</dc:creator></item><item><title>Rust on iOS</title><link>https://medium.com/visly/rust-on-ios-39f799b3c1dd</link><description><![CDATA[If you’re an iOS developer you may be asking yourself how and why you would make use of Rust on iOS. This article will mostly cover the how. As to why, the most compelling reason for us at Visly is that it enables us to share code between Android and iOS in a performant and safe manner, in a language much easier to work with than C++.]]></description><guid isPermaLink="false">2d233ddd-ecb5-499d-88b8-a0f14797c1a7</guid><pubDate>Sat, 26 Jan 2019 21:30:07 +0000</pubDate><dc:creator>Emil Sjölander</dc:creator></item><item><title>Exporting Serde types to TypeScript</title><link>http://timryan.org/2019/01/22/exporting-serde-types-to-typescript.html</link><description><![CDATA[I built my first web application with Rust and WebAssembly back in 2017. At the time, support for compiling Rust with the wasm32-unknown-unknown target had just landed, letting you run Rust code in the browser with few modifications. The downside was that loading and interacting with WebAssembly might require you to explicitly allocate and track memory. You might even need to manually decode UTF-8 strings in JavaScript:]]></description><guid isPermaLink="false">76ad8f41-d0b9-4789-b45a-5cfa550aa7c3</guid><pubDate>Tue, 22 Jan 2019 16:00:00 +0000</pubDate><dc:creator>Tim Ryan</dc:creator></item><item><title>Rust OSS Governance and Sustainablility I</title><link>https://mgattozzi.com/oss-governance-and-sustainablility-i/</link><description><![CDATA[Recently I travelled all the way to Waterloo from Boston for Starcon. With a 9 hour drive I had a lot of time to think about things and so I spent a good majority of it thinking about OSS Governanace and Sustainability. What I came up with and thought of is the more concrete solutions to the problems I brought up in my Rust 2019 post. With the Rust All hands in Berlin only a few weeks away I wanted to get my thoughts in order by writing out some of the solutions to specific problems I came up with. Now, this doesn't mean they'll be accepted! We might even find better solutions! I just felt a need to articulate them as both a reference point and to make sure I've thought through them well. I'll be splitting them into a few posts so I can publish more faster, rather than write one long post that won't be published in time. With that in mind let's begin!]]></description><guid isPermaLink="false">799301a7-d57a-4e9c-8412-aafc4e643f0a</guid><pubDate>Tue, 22 Jan 2019 04:20:23 +0000</pubDate><dc:creator>Michael Gattozzi</dc:creator></item><item><title>Performance of Rust&apos;s match vs. lookup tables</title><link>https://kevinlynagh.com/notes/match-vs-lookup/</link><description><![CDATA[I’ve been getting into bioinformatics algorithms lately and ran across an interesting pull request that improved performance by changing a Rust match expression to a lookup. This felt quite surprising to me since, well, the match is so simple — why isn’t the compiler already generating optimal code for it?]]></description><guid isPermaLink="false">2d51794e-d4d6-44a1-a2ab-f04940842e84</guid><pubDate>Tue, 22 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Kevin Lynagh</dc:creator></item><item><title>Polonius and the case of the hereditary harrop predicate</title><link>http://smallcultfollowing.com/babysteps/blog/2019/01/21/hereditary-harrop-region-constraints/</link><description><![CDATA[In my previous post about Polonius and subregion obligations, I mentioned that there needs to be a follow-up to deal with higher-ranked subregions. This post digs a bit more into what the problem is in the first place and sketches out the general solution I have in mind, but doesn’t give any concrete algorithms for it.]]></description><guid isPermaLink="false">09b9f354-aeed-4d48-b859-9c63fcdddb2e</guid><pubDate>Mon, 21 Jan 2019 00:00:00 -0500</pubDate><dc:creator>Niko Matsakis</dc:creator></item><item><title>Learning the Rust Programming Language</title><link>https://www.aarongreenlee.com/blog/beginning-to-learn-rust-programming-language-rustlang/</link><description><![CDATA[Rust has been on my radar for some time and I aspire to become proficient with the Rust Programming Language in 2019. Initially, my interest in Rust was sparked by the memory ownership model. With WASM support going mainstream I thought I’d give Rust a deeper look and have enjoyed my experience so far. This post is a living post that will continue to be revised and appended as I learn more about Rust.]]></description><guid isPermaLink="false">4f4e3ed0-1852-4954-9cde-1d74c7e54b6f</guid><pubDate>Mon, 21 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Aaron Greenlee</dc:creator></item><item><title>Using Rust for creating Ubuntu Touch apps</title><link>https://timsueberkrueb.io/posts/2019/01/18/rust-ubuntu-touch-app-dev/</link><description><![CDATA[This post aims to give you a small introduction to using the Rust programming language for writing apps for Ubuntu touch.]]></description><guid isPermaLink="false">daf60963-a30c-4e74-82cb-123d2faac884</guid><pubDate>Sun, 20 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Tim Süberkrüb</dc:creator></item><item><title>Why aren&apos;t my Rust threads running?</title><link>https://esimmler.com/why-arent-my-rust-threads-running/</link><description><![CDATA[I got a bit tangled up while experimenting with threads and channels in Rust. The compiler prevented any undefined behavior or memory corruption, but it can only do so much. My problems came from a shaky understanding of the language’s fundamentals and the inherent complexity of parallel programming. Or, in my case, attempted parallel programming.]]></description><guid isPermaLink="false">f950f168-d74e-4b3a-b2f5-18546a7d282b</guid><pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Erik Simmler</dc:creator></item><item><title>#Rust2019</title><link>https://i.pristi.ga/2019/01/19/rust2019/</link><description><![CDATA[Rust has been my favorite programming language lately. These are my thoughts and opinions on the future of the project, in response to the #Rust2019 call for blog posts. I write about what I love about Rust and what I want to see from it.]]></description><guid isPermaLink="false">f468c7cf-9fa8-493c-9354-88d5e460016c</guid><pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Jasen Borisov</dc:creator></item><item><title>Security as Rust 2019 goal</title><link>https://medium.com/@shnatsel/security-as-rust-2019-goal-6a060116ba39</link><description><![CDATA[The goals and 2019 roadmap of Rust Secure Code Working Group]]></description><guid isPermaLink="false">2785bcea-bff1-46c3-913b-87888f79133c</guid><pubDate>Fri, 18 Jan 2019 18:20:42 +0000</pubDate><dc:creator>Sergey Davidoff et al.</dc:creator></item><item><title>Closures: Magic Functions</title><link>https://krishnasannasi.github.io/rust/syntactic/sugar/2019/01/17/Closures-Magic-Functions.html</link><description><![CDATA[Closures seem like magical functions. They can do magic like capture their environment, which normal functions can’t do. How does this work?]]></description><guid isPermaLink="false">85502039-9617-4e25-a34d-2e1f8cd2f452</guid><pubDate>Thu, 17 Jan 2019 19:00:00 +0000</pubDate><dc:creator>Krishna Sannasi</dc:creator></item><item><title>paw at Rust GUIs</title><link>https://medium.com/@m.siglreith/paw-at-rust-guis-d4d848e14b94</link><description><![CDATA[The recent release of Flutter 1.0 was quite exciting for me. I’m not much of anGUI person nor do I make a lot of mobile apps but after looking through some examples, I started to like their take on UI frameworks. In particular, the three aspects mentioned above seemed to be handled very well!

Back to Rust. I wondered how to adopt a similar API under the strict eyes 👀 of the borrow- and typechecker — which resulted in the experimental UI framework paw (in progress..)]]></description><guid isPermaLink="false">04445dcf-4cd1-47ee-b40e-58d17bdf0a9c</guid><pubDate>Thu, 17 Jan 2019 18:12:55 +0000</pubDate><dc:creator>msiglreith</dc:creator></item><item><title>When Rust is safer than Haskell</title><link>https://www.fpcomplete.com/blog/when-rust-is-safer-than-haskell</link><description><![CDATA[Haskell generally has better safety guarantees than Rust, there are some cases when Rust is safer than Haskell. This post explores when Rust is safe to use.]]></description><guid isPermaLink="false">65dcfcd4-e17a-4e0d-bd56-ccea6cfe062f</guid><pubDate>Thu, 17 Jan 2019 18:09:09 +0000</pubDate><dc:creator>Michael Snoyman</dc:creator></item><item><title>A bot for Starcraft in Rust, C or any other language</title><link>https://habr.com/en/post/436254/</link><description><![CDATA[StarCraft: Brood War. This game means so much to me! And to many of you, I guess. So much, that I wonder if I should even give a link to its page on Wikipedia or not.

Once Halt sent me PM and offered to learn Rust. Like any ordinary people, we decided to start with hello world writing a dynamic library for Windows that could be loaded into StarCraft's address space and manage units.]]></description><guid isPermaLink="false">aded8d9a-b1d5-47b6-aa28-fcee947cbfb1</guid><pubDate>Thu, 17 Jan 2019 10:15:00 +0000</pubDate><dc:creator>Roman Proskuryakov</dc:creator></item><item><title>Polonius and region errors</title><link>http://smallcultfollowing.com/babysteps/blog/2019/01/17/polonius-and-region-errors/</link><description><![CDATA[Now that NLL has been shipped, I’ve been doing some work revisiting the Polonius project. Polonius is the project that implements the “alias-based formulation” described in my older blogpost. Polonius has come a long way since that post; it’s now quite fast and also experimentally integrated into rustc, where it passes the full test suite.]]></description><guid isPermaLink="false">2afd97b3-7b60-4a21-b07a-7f353a23dc4d</guid><pubDate>Thu, 17 Jan 2019 00:00:00 -0500</pubDate><dc:creator>Niko Matsakis</dc:creator></item><item><title>Announcing Rust 1.32.0</title><link>https://blog.rust-lang.org/2019/01/17/Rust-1.32.0.html</link><description><![CDATA[Rust 1.32.0 has a few quality of life improvements, switches the default allocator, and makes additional functions const.]]></description><guid isPermaLink="false">97ace8ce-4c4f-442d-bab3-10a97bd119df</guid><pubDate>Thu, 17 Jan 2019 00:00:00 +0000</pubDate><dc:creator>The Rust Release Team</dc:creator></item><item><title>How to order Rust code</title><link>https://deterministic.space/how-to-order-rust-code.html</link><description><![CDATA[Note:This post is about how I arrange the code I write in Rust.If you wanted to “order” Rust codein the “hire someone to write code” sense,you should still keep on readingas this is excellent material for a job interview.(Not the opinion I present but having an opinion on the topic.)]]></description><guid isPermaLink="false">90b0ffa9-1711-4870-9e30-37375be50515</guid><pubDate>Thu, 17 Jan 2019 00:00:00 +0100</pubDate><dc:creator>Pascal Hertleif</dc:creator></item><item><title>Rust bindings for GStreamerGL: Memoirs</title><link>https://blogs.igalia.com/vjaquez/2019/01/16/rust-bindings-for-gstreamergl-memoirs/</link><description><![CDATA[Thanks to Mozilla and Igalia I have the opportunity to work on Servo, adding it HTML5 multimedia features. First, with the help of Fernando Jiménez, we finished what my colleague Philippe Normand and Sebastian Dröge (one of my programming heroes) started: a media player in Rust designed to be integrated in Servo. This media player lives in its own crate: servo/media along with the WebAudio engine. A crate, in Rust jargon, is like a library. This crate is (very ad-hocly) designed to be multimedia framework agnostic, but the only backend right now is for GStreamer. Later we integrated it into Servo adding an initial support for audio and video tags.]]></description><guid isPermaLink="false">3697f091-2478-437f-bdbb-3e464fe1ab8a</guid><pubDate>Wed, 16 Jan 2019 19:42:55 +0000</pubDate><dc:creator>vjaquez</dc:creator></item><item><title>OpenMoonstone v0.2 released</title><link>http://leastsignificant.blogspot.com/2019/01/openmoonstone-v02-released.html?m=1</link><description><![CDATA[OpenMoonstone is a open source reimplementation of Moonstone: A Hard Day's Knight following along the lines of projects like OpenTTD and OpenXcom. You can try it out https://github.com/joetsoi/OpenMoonstone]]></description><guid isPermaLink="false">6bd951b0-06dc-445a-9e68-ea9c56b18e37</guid><pubDate>Wed, 16 Jan 2019 19:34:00 +0000</pubDate><dc:creator>least significant</dc:creator></item><item><title>proc-macro-rules - macro_rules-like pattern matching inside a procedural macro</title><link>https://www.ncameron.org/blog/proc-macro-rules/</link><description><![CDATA[I'm announcing a new library for procedural macro authors: proc-macro-rules (and on crates.io). It allows you to do macro_rules-like pattern matching inside a procedural macro. The goal is to smooth the transition from declarative to procedural macros (this works pretty well when used with the quote crate).]]></description><guid isPermaLink="false">6e54473a-fefd-4447-8888-98137bd74692</guid><pubDate>Wed, 16 Jan 2019 19:27:54 +0000</pubDate><dc:creator>Nick Cameron</dc:creator></item><item><title>Rust in 2019: Security, Maturity, Stability</title><link>https://tonyarcieri.com/rust-in-2019-security-maturity-stability</link><description><![CDATA[2018 marked my second year as a full-time Rust developer, and I’m happy to say it’s the first year I shipped production Rust applications. Thus far these applications have been unproblematic, quietly and efficiently doing their job, and just as boring and predictable as I’d hope they’d be. I would like to hope my experience is repeatable, and that 2019 is the year that Rust can transcend the notion of being a bleeding-edge science experiment and instead settle down into being a “boring in a good way” practical language with a growing community developing and deploying production-quality software.]]></description><guid isPermaLink="false">f262d079-9126-4b48-ad7c-9c29105c16fe</guid><pubDate>Tue, 15 Jan 2019 23:37:32 -0800</pubDate><dc:creator>Tony Arcieri</dc:creator></item><item><title>Stretch — A flexbox implementation in Rust</title><link>https://medium.com/visly/stretch-a-flexbox-implementation-in-rust-60762b5a3331</link><description><![CDATA[Let’s talk about Layout. Layout is fundamental to any UI application. The layout engine is what takes a set of rules and figures out where to place elements on the screen. This sounds simple enough but as UIs become increasingly complex we rely more on the layout engine to be able to create these UIs as easily as possible. Not only should it be easy to build these UIs but the engine performing this work is also required to do so at minimum cost as it runs possibly on every frame (for example when performing layout animations).]]></description><guid isPermaLink="false">cdb3ed72-c1a4-4ff2-8350-cb5768fd96d4</guid><pubDate>Tue, 15 Jan 2019 20:04:57 +0000</pubDate><dc:creator>Emil Sjölander</dc:creator></item><item><title>Non-Web Embeddings for Rust Wasm 2019</title><link>https://medium.com/wasmer/non-web-embeddings-for-rust-wasm-2019-7b290e94f81d</link><description><![CDATA[The Rust Wasm team has made tremendous progress in building robust developer tooling for Rust targeting WebAssembly on the Web in 2018. However, Non-Web Embeddings are also supported by WebAssembly but have not received much attention yet for Rust Wasm tooling. Our wish for Rust Wasm 2019 is to improve the tooling for Non-Web Wasm Embeddings which we believe also has enormous potential.]]></description><guid isPermaLink="false">459fb1f7-d0c4-4a08-bbc9-201d7572dc49</guid><pubDate>Tue, 15 Jan 2019 13:57:51 +0000</pubDate><dc:creator>Brandon Fish</dc:creator></item><item><title>After Hours Game Development</title><link>https://alexene.github.io/2019/01/15/After-hours-game-development.html</link><description><![CDATA[In my spare time I am working on a dwarf colony management game that’s written in rust. I started this project about one year ago and since it has reached this milestone and I didn’t abandon it I think it’s a good time to look at the curent status.]]></description><guid isPermaLink="false">83f4f369-b8cd-43ba-a61f-87a1654e64a9</guid><pubDate>Tue, 15 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Alexandru Ene</dc:creator></item><item><title>WASM 2019</title><link>https://blog.yoshuawuyts.com/wasm-2019/</link><description><![CDATA[Two days ago I wrote about what I plan to work on this year. This is my post about what I'd like to see happen with WebAssembly and Rust in 2019.]]></description><guid isPermaLink="false">31f71876-3c22-47bf-bea9-4eaf184d6913</guid><pubDate>Tue, 15 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Yoshua Wuyts</dc:creator></item><item><title>Rust 2019: Laying the groundwork for an amazing future</title><link>https://zayenz.se/blog/post/rust-2019/</link><description><![CDATA[This year another call for community blog posts on the future directions for Rust is up. This post re-iterates some of the points I mentioned last year (including simply copying some parts of the text), while re-stating the issues in the context of Rust 2019. A summary is that I think that the two most important themes is community management and support for awesome libraries. The why, how, and what is discussed below.]]></description><guid isPermaLink="false">8b0fd582-3249-46f1-80a9-81e2ac18f0d1</guid><pubDate>Tue, 15 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Mikael Zayenz Lagerkvist</dc:creator></item><item><title>Writing an OS in Rust - Introduction to Paging</title><link>https://os.phil-opp.com/paging-introduction/</link><description><![CDATA[This post introduces paging, a very common memory management scheme that we will also use for our operating system. It explains why memory isolation is needed, how segmentation works, what virtual memory is, and how paging solves memory fragmentation issues. It also explores the layout of multilevel page tables on the x86_64 architecture.]]></description><guid isPermaLink="false">b88f26ba-23c6-4d9b-9559-7ccc6477c7af</guid><pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Philipp Oppermann</dc:creator></item><item><title>Scala Developer Journey into Rust - Part 2 : Type Inference</title><link>http://blog.madhukaraphatak.com/rust-scala-part-2/</link><description><![CDATA[Rust is one of the major programming languages that’s been getting popular in recent years. It has many advanced high level language features like Scala.This made me interested to learn Rust. So in this next series of blogs I will share my experience with Rust from a Scala developer point of view. I would like to explore how these two language approach things. I would like to explore the similarities and their differences.]]></description><guid isPermaLink="false">0b01d8d7-aa94-4382-8fbf-c2979f7018ad</guid><pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Madhukara Phatak</dc:creator></item><item><title>Goals and Directions for Rust in 2019</title><link>http://www.wezm.net/technical/2019/01/goals-directions-rust-2019/</link><description><![CDATA[2018 was a very busy year for the Rust project. A new edition was released, progress on stabilising Rust’s asynchronous I/O story was made, a new website was launched, and so much more! In 2019 I’d like to see the language and wider crates community become more sustainable, address some common gothca’s that newcomers experience, and promote more platforms/architectures to tier 1 status.]]></description><guid isPermaLink="false">814184fc-04bb-468b-8fa4-19a1027bf4d2</guid><pubDate>Sun, 13 Jan 2019 21:00:00 +0000</pubDate><dc:creator>Wesley Moore</dc:creator></item><item><title>Exploring Column-Oriented Data in Rust with frunk HLists</title><link>https://paulkernfeld.com/2019/01/13/frunk-column.html</link><description><![CDATA[Row-oriented storage and column-oriented storage are two major ways of laying out data in memory. In Rust, there is a simple way to think of this: row-oriented storage is like an array of structs, whereas column-oriented storage is like a struct of arrays. It’s easy to use row-oriented storage in Rust, so this post is going to explore column-oriented storage.]]></description><guid isPermaLink="false">b4d25622-7886-48c7-901c-e382c05122cb</guid><pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Paul Kernfeld</dc:creator></item><item><title>#Rust2019 Are We GUI Yet?</title><link>http://areweguiyet.com/newsfeed/2019-01-13_rust2019.html</link><description><![CDATA[I want to tackle one specific topic in contrast to other posts that are mostly from a different perspective, and I want to paint the "Big Picture" and overall direction. This post is about the narrow topic of GUI and I want to make a case to convince, at least a fraction of the community that is interested in this field, that it might be a good idea to invest in this direction.]]></description><guid isPermaLink="false">5dbd8253-66c0-4061-8bc7-fd741a1fedbc</guid><pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Dustin Bensing</dc:creator></item><item><title>Letting the compiler tell you what to do - an example using Rust</title><link>https://dmerej.info/blog/post/letting-the-compiler-tell-you-what-to-do/</link><description><![CDATA[If you’ve ever wrote code in a compiled language (C, C++, Java, …), you are probably used to compiler error messages, and you may think there are only here to prevent you from making mistakes. Well sometimes you can also use compiler error messages to design and implement new features. Let me show you with a simple command-line program written in Rust.]]></description><guid isPermaLink="false">e743cfa5-87bc-46d7-9dc6-693352d91e6a</guid><pubDate>Sat, 12 Jan 2019 12:26:27 +0000</pubDate><dc:creator>Dimitri Merejkowsky</dc:creator></item><item><title>Rust 2019-2021 -- Math and Simulation</title><link>https://gist.github.com/Zaerei/a030377aca10acf21bb0f48860f2f9ac</link><description><![CDATA[Some of my first real, non-toy projects in Rust, way back in 2015, were numeric. I was taking a graduate-level Reinforcement Learning and MDP class at the time, and shortly after transitioned to using it in my research in AI. Rust has a lot going for it in terms of package management, speed, and typing.

Unfortunately, it falls apart in several fundamental areas when it comes to mathematical and scientific uses. Some of these are ecosystem problems (i.e. the work just isn't there) and some of it are more core problems (e.g. type-level numerics, which will be solved Soon™, hopefully).]]></description><guid isPermaLink="false">5059354d-87d1-41e8-9f5d-79f6e62cea41</guid><pubDate>Sat, 12 Jan 2019 03:10:53 +0000</pubDate><dc:creator>Zoe Juozapaitis</dc:creator></item><item><title>Rust 2019: Solid Foundations for Unsafe Code</title><link>https://www.ralfj.de/blog/2019/01/12/rust-2019.html</link><description><![CDATA[I think in 2019, we should make a coordinated effort to improving the foundations for writing unsafe code. Of course my particular Rust bubble is mostly about unsafe code, as you will know if you have read some of my previous posts – but safety is a core value proposition of Rust, and the entire ecosystem rests on a foundation of crates that make heavy use of unsafe code, so I believe that caring about unsafe code is an important piece to Rust’s overall success.]]></description><guid isPermaLink="false">03ffa23c-960c-4ca4-9de6-2ab39088fab5</guid><pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Ralf Jung</dc:creator></item><item><title>Introducing Ammolite: A work-in-progress rendering engine with focus on VR/AR</title><link>https://metaview.link/articles/introducing-ammolite.html</link><description><![CDATA[Welcome to the inaugural article of the metaview project. metaview is an effort to create a universal platform for VR/AR applications similarly to how the web browser is a platform for web applications. For more information about metaview and its goals, see About. This article covers ammolite, a work-in-progress rendering engine with focus on VR/AR.]]></description><guid isPermaLink="false">f0ba6ba2-b32e-4d88-a8e4-a1e33f099387</guid><pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Jakub Hlusička </dc:creator></item><item><title>const types, traits and implementations in Rust</title><link>https://varkor.github.io/blog/2019/01/11/const-types-traits-and-implementations-in-Rust.html</link><description><![CDATA[Rust permits a limited form of compile-time function execution in the form of const and const fn. While, initially, const may seem like a reasonaby straightforward feature, it turns out to raise a wealth of interesting and complex design questions. In this post, we’re going to look at a particular design question that has been under discussion for some time and propose a design that is natural and expressive. This is motivated both from a syntactic perspective and a theoretic perspective.]]></description><guid isPermaLink="false">dfbac96b-1ab3-48a8-9c50-917188335ddd</guid><pubDate>Fri, 11 Jan 2019 19:02:40 +0000</pubDate><dc:creator>varkor</dc:creator></item><item><title>Technolution Rust 2019 Roadmap</title><link>https://www.technolution.eu/en/about-us/news/279-technolution-rust-2019-roadmap.html</link><description><![CDATA[We rely on Rust. So do our customers, sometimes without even knowing it. We build software that is installed on devices that go out into the world, sometimes never to be seen again in years or even decades. But 15 years from now, we may get a request to make a change to that software.

Historically we have been very successful doing just that, first in C and later in Java. Slowly but steadily, we are coming to rely on Rust to be able to create maintainable mission-critical software for our customers.

Therefore our proposal for the 2021 roadmap: Reliability.

This blog post reflects on our journey up to the 2018 edition and outlines our view on Rust's progression in the coming years.]]></description><guid isPermaLink="false">761f2490-5d60-424a-868c-84efd9b171c8</guid><pubDate>Fri, 11 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Technolution B.V.</dc:creator></item><item><title>Librsvg is almost rustified now</title><link>https://people.gnome.org/~federico/blog/librsvg-is-almost-rustified.html</link><description><![CDATA[Since a few days ago, librsvg's library implementation is almost 100% Rust code. Paolo Borelli's and Carlos Martín Nieto's latest commits made it possible. What does "almost 100% Rust code" mean here?]]></description><guid isPermaLink="false">54ecd8fa-cc4f-4c5f-acef-fc75e1e6ce7f</guid><pubDate>Thu, 10 Jan 2019 12:28:11 -0600</pubDate><dc:creator>Federico Mena Quintero</dc:creator></item><item><title>Proposed Rust community norm for unsafe code</title><link>http://sanxiyn.blogspot.com/2019/01/proposed-rust-community-norm-for-unsafe.html</link><description><![CDATA[Recently cessen asked  people to write their thoughts on Rust community norm for unsafe code. So here it is.]]></description><guid isPermaLink="false">60e20969-d592-4d79-91e8-633409505b03</guid><pubDate>Thu, 10 Jan 2019 19:03:00 +0900</pubDate><dc:creator>Seo Sanghyeon</dc:creator></item><item><title>Supernova: rustfmt</title><link>https://medium.com/@chayadanz/supernova-rustfmt-5c3d0c56831c</link><description><![CDATA[I previously wrote about Supernova, and my experience contributing to a project in a language I had never used before. Although my PR is still WIP status (I need to find time to get a solid grasp on Date/Time stuff in Rust, specifically using the chrono crate), I picked up some smaller issues in the interim to stay involved.

My most recent PR’s involved working off of a previous PR which introduced code linting with clippy, and taking it one step further by introducing rustfmt to help ensure consistent coding style in our CI pipeline.]]></description><guid isPermaLink="false">f941f6bf-eaf1-428a-a5d0-f8e35d504a3a</guid><pubDate>Thu, 10 Jan 2019 04:22:26 +0000</pubDate><dc:creator>Chaya Danzinger</dc:creator></item><item><title>Stability → Productivity → Maintainability</title><link>https://medium.com/@tom.kaitchuck/stability-productivity-maintainability-9179f4b3e23f</link><description><![CDATA[Rust in 2019 and beyond: In response to the call for blog posts on the direction Rust should take in 2019 and beyond I’ve come up with a few ideas.]]></description><guid isPermaLink="false">ca3c5e56-62c9-4f06-a652-9dd666e7c61e</guid><pubDate>Thu, 10 Jan 2019 01:27:31 +0000</pubDate><dc:creator>Tom Kaitchuck</dc:creator></item><item><title>Understanding Rust Lifetimes</title><link>https://medium.com/nearprotocol/understanding-rust-lifetimes-e813bcd405fa</link><description><![CDATA[No, seriously, this time for real.]]></description><guid isPermaLink="false">5c15ca59-eba1-43d8-9dd4-206f574826cf</guid><pubDate>Thu, 10 Jan 2019 01:26:26 +0000</pubDate><dc:creator>Maksym Zavershynskyi</dc:creator></item><item><title>The State Of GGEZ 2019</title><link>https://wiki.alopex.li/TheStateOfGGEZ2019</link><description><![CDATA[ggez is a lightweight portable game framework in Rust, inspired by LÖVE. I do most of the actual maintenance and planning behind it, and I’ve been sort of in and out of contact this year, so I thought I’d write up a little thing about the present and future of the project. I remembered that at the beginning of last year I wrote GgezOnWasm, but only remembered a little of what went into it, so I went back and read it. And then got hives from the stress of all the promises I’ve made. So, I feel justified in being a bit slow with working on ggez lately.]]></description><guid isPermaLink="false">3ea00e75-be59-40b9-bdc5-e7a783044422</guid><pubDate>Thu, 10 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Simon Heath</dc:creator></item><item><title>Rust 2019: security</title><link>https://snf.github.io/2019/01/10/rust-2019-security/</link><description><![CDATA[The problem is now that if we are measuring safety of Rust according to safe vs unsafe, the most obvious metric to optimize for is amount of unsafe lines in the code.

And this is why I think that security should be part of Rust’s stable ecosystem development. And 2019 should be the year for improving the processes around it.]]></description><guid isPermaLink="false">1430d9af-511b-4a0d-9802-083db4a4b858</guid><pubDate>Thu, 10 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Sebastian Fernandez</dc:creator></item><item><title>sharkdp/hexyl: A command-line hex viewer</title><link>https://github.com/sharkdp/hexyl</link><description><![CDATA[hexyl is a simple hex viewer for the terminal. It uses a colored output to distinguish different categories of bytes (NULL bytes, printable ASCII characters, ASCII whitespace characters, other ASCII characters and non-ASCII).]]></description><guid isPermaLink="false">4afbd4d0-42ae-460f-8805-22e094fb394b</guid><pubDate>Thu, 10 Jan 2019 00:00:00 +0000</pubDate><dc:creator>David Peter</dc:creator></item><item><title>Year of wlroots</title><link>http://way-cooler.org/blog/2019/01/09/year-of-wlroots.html</link><description><![CDATA[ wlroots is a hip new Wayland compositor framework that Way Cooler has been using for about a year now. I’m going to go ahead and declare 2019 the year of wlroots. Most of the work was done in 2018, but this year is when major compositors will begin to use it. Currently the only usable Wayland compositor that uses wlroots is sway, which is fast approaching a stable 1.0. However there is a long list of startup compositors (including Way Cooler) that are using wlroots. At least some of them are expected to come into their own as alternatives to traditional X11 based systems this year, and it’s all thanks to wlroots.]]></description><guid isPermaLink="false">3b8b78a8-dd56-425a-86f5-886e7341a8c4</guid><pubDate>Wed,  9 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Preston Carpenter</dc:creator></item><item><title>Rust Community Norms for Unsafe Code</title><link>https://blog.cessen.com/post/2019_01_09_rust_community_norms_for_unsafe_code</link><description><![CDATA[I recently released Ropey 1.0, a text rope library for Rust. Ropey uses unsafe code internally, and its use of unsafe unsurprisingly came up in the 1.0 release thread on Reddit.

The ensuing discussion (especially thanks to Shnatsel) helped me significantly reduce the amount of unsafe code in Ropey with minimal (though not non-existent) performance degradation. But the whole thing nevertheless got me thinking about unsafe code and community norms around it, and I figured writing some of those thoughts down might be useful.]]></description><guid isPermaLink="false">fa5229de-d279-44c7-9d62-0163e7dc1771</guid><pubDate>Wed,  9 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Nathan Vegdahl</dc:creator></item><item><title>Rust 2019 wish list</title><link>https://estada.ch/2019/1/9/rust-2019-wish-list/</link><description><![CDATA[As with any wish list, it started short and then grew a bit. There are three sections Community, Technical and Ethics and I hope it is not too lengthy.]]></description><guid isPermaLink="false">5f1f5616-399f-4b02-9a8b-cfc34fa4f44c</guid><pubDate>Wed,  9 Jan 2019 00:00:00 +0100</pubDate><dc:creator>Stefan Schindler</dc:creator></item><item><title>thank u, next</title><link>https://words.steveklabnik.com/thank-u-next</link><description><![CDATA[I started working at 15, when I took a job as a pizza cook. Over the next seven years, I moved up the ranks, to a driver, shift manager, and then as part of the “new store opening team.” The franchise was growing, and we needed to help new franchisees open their new stores. I’d travel to where the new store was a week before they would open, help train the new staff, and then work their opening weekend. It was really fulfilling work; if pizza paid as well as tech, I’d seriously consider doing it forever.]]></description><guid isPermaLink="false">ec95e248-cef0-42ed-8a49-8e03d8c7e30b</guid><pubDate>Tue,  8 Jan 2019 01:10:00 +0000</pubDate><dc:creator>Steve Klabnik</dc:creator></item><item><title>What I would like to see in Rust in 2019</title><link>http://salt-documentary.blog/rust-2019/</link><description><![CDATA[The Rust maintainers recently asked the community what they would like to see happening in Rust, in 2019. Many people have stated that Rust could use a fallow year. I generally agree, but there are a few changes to the language I consider important/useful enough to implement despite the proposed moratorium on features.]]></description><guid isPermaLink="false">1d74a896-3c60-4a3b-a94d-29881d3c602b</guid><pubDate>Tue,  8 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Alex (leitimmel)</dc:creator></item><item><title>Rust in 2019 and beyond</title><link>https://blog.x5ff.xyz/blog/what-makes-rust-awesome-2019/</link><description><![CDATA[During the RustFest 2018 in Rome, Aaron Turon said something that stuck with me, which was that Rust is actually about empowering developers. Personally I think this is a very profound thought, that the goal of a programming language is to help others to do and achieve things they never thought possible.

JavaScript empowers developers by being accessible - everyone can start and succeed quickly. It’s great. Rust on the other hand empowers developers by giving them the tools to go deep.

Let’s unpack that.]]></description><guid isPermaLink="false">36f876cd-8e90-4399-bec5-1e7b4883b95b</guid><pubDate>Tue,  8 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Claus</dc:creator></item><item><title>Parsing, Validating, and Assembling URLs in Rust</title><link>https://www.secretfader.com/blog/2019/01/parsing-validating-assembling-urls-rust/</link><description><![CDATA[These days, we hardly think about URLs. Popular content management tools default to so-called “pretty” slugs, and even here, on secretfader.com, I remove stop-words to ensure the tidiest, most SEO-friendly URLs possible.
It would be easy to forget the struggles that led to best practices of today’s web. However, to my generation of internet hackers, URLs riddled with ampersands and question marks were entirely normal. In those days, assuming URLs would be comprised of hyphenated alphanumeric characters was obviously unsafe; instead, we learned the official standard for parsing and constructing URLs.]]></description><guid isPermaLink="false">2a37239a-12d8-4647-bef0-90312992b2b7</guid><pubDate>Tue,  8 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Nicholas (Fader) Young</dc:creator></item><item><title>generic-array Design and Usage Notes</title><link>https://github.com/fizyk20/generic-array/blob/master/DESIGN.md</link><description><![CDATA[generic-array is a method of achieving fixed-length fixed-size stack-allocated generic arrays without needing const generics in stable Rust.]]></description><guid isPermaLink="false">1dd7a631-a2a9-42e8-ba0c-87b56bc6af38</guid><pubDate>Tue,  8 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Aaron Trent</dc:creator></item><item><title>How I learned to love Rust</title><link>https://medium.com/@geis/how-i-learned-to-love-rust-abfac6c1f6d1</link><description><![CDATA[A journey from hating Rust to loving it more than any other language.]]></description><guid isPermaLink="false">069e9371-d000-454f-b73d-0b082a92988b</guid><pubDate>Mon,  7 Jan 2019 21:07:51 +0000</pubDate><dc:creator>Grégoire Geis</dc:creator></item><item><title>Rust in 2019: Focus on sustainability</title><link>http://smallcultfollowing.com/babysteps/blog/2019/01/07/rust-in-2019-focus-on-sustainability/</link><description><![CDATA[To me, 2018 felt like a big turning point for Rust, and it wasn’t just the edition. Suddenly, it has become “normal” for me to meet people using Rust at their jobs. Rust conferences are growing and starting to have large number of sponsors. Heck, I even met some professional Rust developers amongst the parents at a kid’s birthday party recently. Something has shifted, and I like it.]]></description><guid isPermaLink="false">626da706-6d3e-4986-a6dd-b8002ee01290</guid><pubDate>Mon,  7 Jan 2019 00:00:00 -0500</pubDate><dc:creator>Niko Matsakis</dc:creator></item><item><title>Using TLS with Rust: Part II - Client authentication</title><link>https://ayende.com/blog/185730-A/using-tls-with-rust-part-ii-client-authentication</link><description><![CDATA[The task that I have for now is to add client authentication via X509 client certificate. That is both obvious and non obvious, unfortunately. I’ll admit that I’m enjoying exploring Rust features, so I don’t know how idiomatic this code is, but it is certainly dense.]]></description><guid isPermaLink="false">01a84c85-f79f-42fa-9632-e3ee5f0f5b6e</guid><pubDate>Mon,  7 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Ayende Rahien</dc:creator></item><item><title>WebGL + Rust: Basic Water Tutorial</title><link>http://www.chinedufn.com/3d-webgl-basic-water-tutorial/</link><description><![CDATA[In this tutorial we’ll discuss the ideas and concepts behind rendering water and then talk through some demo code.]]></description><guid isPermaLink="false">0cba574e-769b-491e-83de-cfa070b1b942</guid><pubDate>Sun,  6 Jan 2019 13:00:00 -0500</pubDate><dc:creator>Chinedu Francis Nwafili</dc:creator></item><item><title>Rust 2019: Towards Richer Language Extensions</title><link>https://internals.rust-lang.org/t/rust-2019-towards-richer-language-extensions/9151</link><description><![CDATA[As of Rust 1.30, the Rust language now has support for a very expressive feature called procedural macros 3. Procedural macros are great because they enable Rust to do more, without baking a lot of potentially domain-specific information into the language. For example, automatic serialization of data types 5 and expressive, type-safe abstractions for web servers 6 can both be implemented using procedural macros.

However, while expressive, procedural macros can’t do everything.]]></description><guid isPermaLink="false">5b89867c-1a66-4b88-ab28-5b04e6cda3f5</guid><pubDate>Sun,  6 Jan 2019 01:17:43 +0000</pubDate><dc:creator>Elliott Slaughter</dc:creator></item><item><title>Comparing Rust and JavaScript Ergonomics with a Simple Linked List</title><link>https://www.codesections.com/blog/javascript-vs-rust-linked-list/</link><description><![CDATA[My day-to-day work involves writing a fair bit of JavaScript but, lately, I've gotten really interested in Rust. The other day, I decided to take a slightly different approach: I decided to take a simple linked list program—the type can and do ask my students to implement in JavaScript in ~20 minutes—and re-implement it in Rust. Specifically, I decided to build a queue implemented with a singly linked list.]]></description><guid isPermaLink="false">a46b1128-605b-4cab-b36f-5766125ba2f3</guid><pubDate>Sun,  6 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Daniel Long Sockwell</dc:creator></item><item><title>Scannerless parsing of boolean grammars with derivatives in Rust</title><link>https://github.com/jameysharp/weighted-regexp-rs/blob/master/README.md</link><description><![CDATA[This is yet another library for writing parsers in Rust. What makes this one different is that I've combined some existing academic work in a way that I think is novel. The result is an unusually flexible parsing library while still offering competitive performance and memory usage.]]></description><guid isPermaLink="false">ad9d038f-52e6-4860-a264-61a795428b87</guid><pubDate>Sun,  6 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Jamey Sharp</dc:creator></item><item><title>Scientific Rust #rust2019</title><link>https://blog.luizirber.org/2019/01/05/rust-2019/</link><description><![CDATA[The Rust community requested feedback last year for where the language should go in 2018, and now they are running it again for 2019. Last year I was too new in Rust to organize a blog post, but after an year using it I feel more comfortable writing this!

In this post I will be focusing more in two areas: array computing (what most people consider 'scientific programming' to be) and "data structures".]]></description><guid isPermaLink="false">23462803-be17-4a96-b8f1-64af9c0e79d8</guid><pubDate>Sat,  5 Jan 2019 17:00:00 -0200</pubDate><dc:creator>Luiz Irber</dc:creator></item><item><title>The Last Thing Rust Needs</title><link>https://h2co3.github.io/rust2019/</link><description><![CDATA[In 2014, world-renowned C++ expert Scott Meyers was invited to DConf, Facebook's conference on the D programming language. D is a modern, multi-paradigm systems language with a good amount of inspiration from C++, so the choice was only fitting.]]></description><guid isPermaLink="false">94e44d97-0440-4673-9727-734c2be63a7d</guid><pubDate>Sat,  5 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Árpád Goretity</dc:creator></item><item><title>Rust 2019: Beat C++</title><link>https://www.reddit.com/r/rust/comments/acjcbp/rust_2019_beat_c/?st=JQIGPCJV&amp;sh=0e8b6ffc</link><description><![CDATA[I'm not a contributor outside a few issues here and there, but I have some thoughts about how Rust could be improved in 2019. There's been a lot of talk of the Fallow Year and limiting new features, and I think these are great ideas. With that in mind, a goal that follows along those lines is to "Beat C++." Rust doesn't have to beat C++ by performing better in benchmarks. Rather, Rust can beat C++ by making it easier to write optimized code, benchmark it, and profile it.]]></description><guid isPermaLink="false">51795148-94c2-4912-9e84-eb9502a80d4c</guid><pubDate>Sat,  5 Jan 2019 00:00:00 +0000</pubDate><dc:creator>u/Holy_City</dc:creator></item><item><title>Followups</title><link>https://raphlinus.github.io/curves/graphics/2019/01/04/followups.html</link><description><![CDATA[Here are some followups on previous blog postings. Including, Arclength, and 2D graphics.]]></description><guid isPermaLink="false">9cccb5d4-edfb-483f-ab75-0b099242fd69</guid><pubDate>Fri,  4 Jan 2019 16:54:42 +0000</pubDate><dc:creator>Raph Levien</dc:creator></item><item><title>Using Rust for Gamedev</title><link>https://medium.com/@michelotti.matthew/using-rust-for-gamedev-2f60b0e4cc5c</link><description><![CDATA[I’ve recently created a new website and finished an online game named Adventures of Pascal Penguin. One of the most unique things about this game is that it was written in Rust and runs in web browsers thanks to WebAssembly. WebAssembly has only been mainstream for about a year or so, so not many games have been created like this. I want to share a little about my journey with Rust: how I started with it and how I got to this point.]]></description><guid isPermaLink="false">4fda94a2-d93a-4d1d-8ffe-e171600b13ce</guid><pubDate>Fri,  4 Jan 2019 06:15:37 +0000</pubDate><dc:creator>Matthew Michelotti</dc:creator></item><item><title>Rust 2019 posts</title><link>https://yakshav.es/rust-2019/</link><description><![CDATA[When starting collecting ideas about this years Rust 2019 post, I had far to many to fit into one document. For that reasons, I’ll start writing multiple small pieces. I might come back to them at a later point this year. Most of my wishes are around the project structure, but I also have some technical ones. Most of them deal with the current growth and maturity of the project. All of these are living documents and even just drafts, so they might change at any time and might be released in draft form.]]></description><guid isPermaLink="false">e11a846b-3426-49af-b3b4-bc444adfe11b</guid><pubDate>Thu,  3 Jan 2019 23:57:00 +0000</pubDate><dc:creator>Florian Gilcher</dc:creator></item><item><title>Rust 2019</title><link>https://deterministic.space/rust-2019.html</link><description><![CDATA[Thinking about Rust’s evolution like a video game (heh), we have just reached level 2018. Our programming language is in a good state but there are a lot of progress bars for features where we need to get a few more experience points to unlock a new ability.]]></description><guid isPermaLink="false">275f95ad-70be-4870-bb50-0c5df78ed9be</guid><pubDate>Fri,  4 Jan 2019 00:00:00 +0100</pubDate><dc:creator>Pascal Hertleif</dc:creator></item><item><title>PyOxidizer: Make distributable Python applications using Rust</title><link>https://github.com/indygreg/pyoxidizer</link><description><![CDATA[PyOxidizer is a collection of Rust crates that facilitate building libraries and binaries containing Python interpreters. PyOxidizer is capable of producing a single file executable - with all dependencies statically linked and all resources (like .pyc files) embedded in the executable.]]></description><guid isPermaLink="false">ea33097d-8f78-4d8d-9f75-bc9305380398</guid><pubDate>Thu,  3 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Gregory Szorc</dc:creator></item><item><title>Rust 2019: Compiler, Community, and Const Generics</title><link>https://nicoburns.com/blog/rust-2019/</link><description><![CDATA[This article is a repsponse to the call for 2019 wishlist blog posts for the Rust programming language.]]></description><guid isPermaLink="false">02aaa21e-53a6-4e80-9ad2-73fdfcab3569</guid><pubDate>Thu,  3 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Nico Burns</dc:creator></item><item><title>Building a JS Interpreter in Rust – Part 2</title><link>https://jason-williams.co.uk/building-a-js-interpreter-in-rust-part-2/</link><description><![CDATA[When writing an interpreter or a compiler for any language, you usually need to start with a lexer and a parser. Boa here is no different, our first task will be to do the same but what do these do?]]></description><guid isPermaLink="false">916f96ed-c1cc-4955-ade6-626b3ebf08bd</guid><pubDate>Wed,  2 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Jason Williams</dc:creator></item><item><title>Using TLS with Rust: Part I</title><link>https://ayende.com/blog/185698-A/using-tls-with-rust-part-i</link><description><![CDATA[The next interesting step in my Rust network protocol exercise is to implement TLS. I haven’t looked at that yet, so it is going to be interesting.]]></description><guid isPermaLink="false">234e0c08-173d-431d-861b-3f4bbb214a6b</guid><pubDate>Wed,  2 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Ayende Rahien</dc:creator></item><item><title>Deriving Traits in Rust with Procedural Macros</title><link>https://naftuli.wtf/2019/01/02/rust-derive-macros/</link><description><![CDATA[Procedural macros in Rust are a really compelling feature that I didn’t understand until recently. There are a few gotchas, but they make it super easy to implement custom #[derive()] expansions for implementing traits with a single line of code. Let’s dive in.]]></description><guid isPermaLink="false">470de398-add8-4fdd-9b38-c79c781c58fa</guid><pubDate>Wed,  2 Jan 2019 00:00:00 +0000</pubDate><dc:creator>Naftuli Kay</dc:creator></item><item><title>I made MPD index SoundCloud, here&apos;s how I did it</title><link>https://polyfloyd.net/post/soundcloud-fuse-mpd/</link><description><![CDATA[The usual process of playing something on our music server is a bit cumbersome: I have to browse SoundCloud, download a track that seems interesting, upload it to the music server, let MPD index it, and then play it.

To make my life easier, I wanted to leverage Linux’s FUSE interface to expose the audio on SoundCloud as a bunch of files in a folder which MPD could then index and play from. I could have taken a couple of other approaches such as swapping MPD with Mopidy, an MPD-compatible music player with SoundCloud support, or a scraper that periodically downloads the latest audio from my feed. And while these alternatives were probably easier to implement, I went for the FUSE driver because I thought it was cool.]]></description><guid isPermaLink="false">4a2d72d8-3aa4-4c82-a95f-847f3e0c650d</guid><pubDate>Wed,  2 Jan 2019 00:00:00 +0000</pubDate><dc:creator>polyfloyd</dc:creator></item></channel></rss>