<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - All Posts</title><link>https://readrust.net/</link><description>All Posts posts on Read Rust</description><item><title>MIR-based borrowck is almost here</title><link>http://smallcultfollowing.com/babysteps/blog/2018/10/31/mir-based-borrowck-is-almost-here/</link><description><![CDATA[Now that the final Rust 2018 Release Candidate has shipped, I thought it would be a good idea to do another update on the state of the MIR-based borrow check (aka NLL). Let’s get the highlights out of the way. Most importantly, Rust 2018 crates will use NLL by default. Once the Rust 2018 release candidate becomes stable, we plan to switch Rust 2015 crates to use NLL as well, but we’re holding off until we have some more experience with people using it in the wild.]]></description><guid isPermaLink="false">3c73e50b-c4cd-43ea-9214-49f711bf3058</guid><pubDate>Wed, 31 Oct 2018 00:00:00 -0400</pubDate><dc:creator>Niko Matsakis</dc:creator></item><item><title>Serverless Rust</title><link>https://medium.com/@softprops/serverless-rust-318732a3596</link><description><![CDATA[This is going to be the first post ( and hopefully not last ) in a series of posts about writing (and thinking about) serverless applications in Rust. Stay tuned…]]></description><guid isPermaLink="false">4b5e36d0-0775-48da-a6f9-ab19ce9a5aae</guid><pubDate>Tue, 30 Oct 2018 02:08:22 +0000</pubDate><dc:creator>Doug Tangren</dc:creator></item><item><title>Pyro - A fast, small and documented Entity Component System</title><link>https://maikklein.github.io/pyro-ecs/</link><description><![CDATA[In contrast to many other ECS, iteration in Pyro is fully linear. Different combinations of components always live in the same storage. The advantage is that iteration is always fully linear and no cache is wasted. The storage behind the scene is a SoA storage.]]></description><guid isPermaLink="false">092a372d-fa4a-48e7-8382-c85069e9a425</guid><pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Maik Klein</dc:creator></item><item><title>Qt applications with Cargo</title><link>https://www.vandenoever.info/blog/2018/10/30/building_qt_apps_with_cargo.html</link><description><![CDATA[This blog shows how Qt applications can be built with Cargo. The goal is to make compiling them as simple as installing Qt and running cargo build.]]></description><guid isPermaLink="false">d8946b80-5782-44b2-80d9-9ac2e18eb5d0</guid><pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Jos van den Oever</dc:creator></item><item><title>Announcing Gotham 0.3</title><link>https://gotham.rs/blog/release/2018/10/29/gotham-0.3.html</link><description><![CDATA[First of all, hello there! This is the first announcement after the call for maintainers back in summer, and includes the efforts of several new faces: @whitfin, @nyarly, @colinbankier. Together, as well as input from the original authors @bradleybeddoes and @smangelsdorf, we are the new maintainers of the Gotham project. Today we’re excited to announce the release of Gotham 0.3, which follows the evolution of the broader Rust ecosystem.]]></description><guid isPermaLink="false">77d7a663-c11c-476c-a180-a84d0edf2975</guid><pubDate>Mon, 29 Oct 2018 15:31:00 +0000</pubDate><dc:creator>@whitfin, @nyarly, @colinbankier</dc:creator></item><item><title>From Rust to beyond: The PHP galaxy</title><link>https://mnt.io/2018/10/29/from-rust-to-beyond-the-php-galaxy/</link><description><![CDATA[This blog post is part of a series explaining how to send Rust beyond earth, into many different galaxies. The galaxy we will explore today is the PHP galaxy. This post will explain what PHP is, how to compile any Rust program to C and then to a PHP native extension.]]></description><guid isPermaLink="false">6bf46601-8824-4e8e-b625-f3b6f9d074da</guid><pubDate>Mon, 29 Oct 2018 10:17:12 +0000</pubDate><dc:creator>Ivan Enderlin</dc:creator></item><item><title>Finding and fixing memory leaks in a Hyper application or &apos;How I Learned to Stop Worrying and Love the Allocator&apos;</title><link>https://blog.1aim.com/2018/10/finding-and-fixing-memory-leaks-in-a-hyper-application-or-how-i-learned-to-stop-worrying-and-love-the-allocator/</link><description><![CDATA[I was doing some initial load testing of the next version our application, so that performance regressions can be tracked, when I noticed something. After only a few seconds of throwing wrk at it, our backend was using 1.3GB of memory, growing at around 50MB/s. Yikes.]]></description><guid isPermaLink="false">1f6655e8-89c4-4e30-91e6-776449b88293</guid><pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Ferdia McKeogh</dc:creator></item><item><title>Auth Web Microservice with rust using Actix-Web - Part 2</title><link>https://hgill.io/posts/auth-microservice-rust-actix-web-diesel-complete-tutorial-part-2/</link><description><![CDATA[Picking up from part one, we now have as server that takes an email address from a request and spits out a JSON response with an invitation object. In part one I said that we will send an email to the user, after some thought and feedback, we will be skipping this part now (look out for part 3). For now we will use the http response from the server to verify the email so to speak.]]></description><guid isPermaLink="false">268e1717-7988-4cb0-83e4-f4c902a969a8</guid><pubDate>Sun, 28 Oct 2018 13:02:37 +0100</pubDate><dc:creator>Harry Gill</dc:creator></item><item><title>The Embedded Working Group Newsletter - Embedded on Stable!</title><link>https://rust-embedded.github.io/blog/2018-10-28-newsletter-14/</link><description><![CDATA[This is a special "spotlight" edition of the newsletter, where we look at a few topics in a bit more detail: Embedded Rust Applications on Stable, Cortex-A team, shared-bus, and more.]]></description><guid isPermaLink="false">13502f64-39c2-4eae-9825-b68c2056bc66</guid><pubDate>Sun, 28 Oct 2018 00:00:00 +0000</pubDate><dc:creator>The Embedded Working Group</dc:creator></item><item><title>My release checklist for Rust programs</title><link>https://dev.to/sharkdp/my-release-checklist-for-rust-programs-1m33</link><description><![CDATA[After some practice with three of my Rust projects (fd, hyperfine and bat), my workflow has converged to something that works quite well and avoids many pitfalls that I have walked into in the past. My hope in writing this post is that this process can be useful for others as well. The following is my release checklist for fd, but I have very similar lists for other projects.]]></description><guid isPermaLink="false">e5f786a1-6dd9-427f-8202-03b5a38a7ace</guid><pubDate>Sun, 28 Oct 2018 00:00:00 +0000</pubDate><dc:creator>David Peter</dc:creator></item><item><title>2d graphics in Rust discussion - A look at GPU memory management</title><link>https://nical.github.io/posts/rust-2d-graphics-02.html</link><description><![CDATA[In this post I'll write about an piece of the low level details of an hypothetical rust 2d graphics crate built on top of gfx-hal. Gfx provides a vulkan-like interface implemented on top of vulkan, d3d12, metal or flavors of OpenGL. just like the previous post this is in the context of recent discussions about a 2d graphics crate in rust.]]></description><guid isPermaLink="false">7141c453-0f38-4d85-a3bd-f01abc08ad77</guid><pubDate>Sun, 28 Oct 2018 00:00:00 +0200</pubDate><dc:creator>Nical</dc:creator></item><item><title>Improving ndarray-csv: Goodbye failure, Hello Extension Traits</title><link>https://paulkernfeld.com/2018/10/27/improving-ndarray-csv.html</link><description><![CDATA[Two weeks ago, I wrote a blog post explaining some design decisions that I made for the ndarray-csv crate. Based on some excellent Reddit comments and GitHub issues from dtolnay, I have amended some of these decisions.]]></description><guid isPermaLink="false">427d9cb0-4562-45c7-b6f0-3defc4df172b</guid><pubDate>Sat, 27 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Paul Kernfeld</dc:creator></item><item><title>Problems Scaling A Large Multi-Crate Rust Project</title><link>https://robert.ocallahan.org/2018/10/problems-scaling-large-multi-crate-rust.html?m=1</link><description><![CDATA[We have 85K lines of Rust code implementing the backend of our Pernosco debugger. To impose some modularity constraints and to reduce build times, from the beginning we organized our code as a large set of crates in a single Cargo workspace in a single Gitlab repository. Currently we have 48 crates. This has mostly worked pretty well but as the number of our crates keeps increasing, we have hit some serious scalability problems.]]></description><guid isPermaLink="false">e64df9c0-3056-4720-837e-670543317c59</guid><pubDate>Thu, 25 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Robert O&apos;Callahan</dc:creator></item><item><title>10x Your JavaScript With WASM And Rust</title><link>https://blog.x5ff.xyz/blog/azure-functions-wasm-rust-ai/</link><description><![CDATA[This is part four in a series of Rust on Azure Functions. The other parts are about performance comparisons (part 1 and part 2), and explaining the PMX algorithm (part 3). If you want to learn more about Genetic Algorithms be sure to read part 3 first).]]></description><guid isPermaLink="false">8c9a2022-1124-47da-94c4-a85e808a257c</guid><pubDate>Thu, 25 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Claus</dc:creator></item><item><title>The Case For Macros</title><link>https://llogiq.github.io/2018/10/25/macros.html</link><description><![CDATA[I know a few Rustaceans who are wary of macros. One privately admitted to hating them with a passion. They are right; macros can make code harder to understand (both for humans and computers, for example many clippy lints have an explicit check to only lint outside of macros), so they should be used with some caution.]]></description><guid isPermaLink="false">451e814b-f0e1-4d88-bdda-9862ab107902</guid><pubDate>Thu, 25 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>Parsing logs 230x faster with Rust</title><link>https://andre.arko.net/2018/10/25/parsing-logs-230x-faster-with-rust/</link><description><![CDATA[Perhaps surprisingly, one of the most challenging things about operating RubyGems.org is the logs. A single day of request logs is usually around 500 gigabytes on disk. So every day, we generate about 500 files that are 85MB on disk, and contain about a million streaming JSON objects that take up 1GB when uncompressed. What we want out of those files is incredibly tiny—a few thousand integers, labelled with names and version numbers. Without any real idea of how to get those counts out of S3, I started by writing a proof of concept Ruby script that could parse one of the 500 log files and print out stats from it. Even on my super-fast laptop, my prototype script would take more than 16 hours to parse 24 hours worth of logs.]]></description><guid isPermaLink="false">80d71718-3acf-49d1-ad47-3e05c5da17a2</guid><pubDate>Thu, 25 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Andre Arko</dc:creator></item><item><title>Announcing Rust 1.30</title><link>https://blog.rust-lang.org/2018/10/25/Rust-1.30.0.html</link><description><![CDATA[The Rust team is happy to announce a new version of Rust, 1.30.0. Rust 1.30 is an exciting release with a number of features: Procedural Macros, Module system improvements, Raw Identifiers, and more.]]></description><guid isPermaLink="false">3db4746e-d5ac-46c7-af24-a25e2db1b7d2</guid><pubDate>Thu, 25 Oct 2018 00:00:00 +0000</pubDate><dc:creator>The Rust Core Team</dc:creator></item><item><title>Summer School With The Rust Compiler</title><link>http://patshaughnessy.net/2018/10/24/summer-school-with-the-rust-compiler</link><description><![CDATA[Learning Rust is hard for everyone, but it’s even worse for me because I’ve been working with Ruby during past ten years. Switching to Rust from Ruby is leaving an anything-goes hippie commune to a summer school for delinquent programmers run by a sadistic and unforgiving teacher. Why would anyone use a compiler like this? The answer is simple: to learn how to write better code.]]></description><guid isPermaLink="false">a758c495-92fa-476d-9758-a916dc50c2f9</guid><pubDate>Wed, 24 Oct 2018 03:00:00 +0000</pubDate><dc:creator>Pat Shaughnessy</dc:creator></item><item><title>Shifgrethor III: Rooting</title><link>https://boats.gitlab.io/blog/post/shifgrethor-iii/</link><description><![CDATA[After the digression in the previous post, it’s time to get back to what I promised in the first post: a look at how shifgrethor handles rooting. Shifgrethor’s solution is somewhat novel and takes advantage of some of Rust’s specific features, so I want to start by looking briefly at some of the other options.]]></description><guid isPermaLink="false">88e3b29b-1f9a-41a2-bb8a-9f73310c0352</guid><pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate><dc:creator>withoutboats</dc:creator></item><item><title>Multithreading Rust and Wasm</title><link>https://rustwasm.github.io/2018/10/24/multithreading-rust-and-wasm.html</link><description><![CDATA[When WebAssembly was first shipped it was an MVP which, while minimal, has spawned a huge number of exciting projects which work today across all major browsers. Rust has capitalized on the wasm MVP’s success as well with tools like wasm-bindgen and wasm-pack by making the MVP feel less minimal. WebAssembly is yet more ambitious, though! Since inception it’s always been intended to extend the WebAssembly specification with new features and functionality.]]></description><guid isPermaLink="false">1025ea91-d834-4f58-97cc-dabcee3b86df</guid><pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Alex Crichton</dc:creator></item><item><title>Plumbing the Deps of the Crate: Caching Rust Docker Builds</title><link>https://mgattozzi.com/caching-rust-docker-builds/</link><description><![CDATA[Learn how to cache your Docker builds with Rust better so you don't keep downloading and building your deps over and over and over again!]]></description><guid isPermaLink="false">96f12355-f732-45f5-9ca2-d2e68bc741ab</guid><pubDate>Tue, 23 Oct 2018 03:32:10 +0000</pubDate><dc:creator>Michael Gattozzi</dc:creator></item><item><title>korq: Kubernetes Dynamic Log Tailing Utility</title><link>https://vertexclique.github.io/korq/</link><description><![CDATA[K∅RQ is used for tailing pod logs concurrently and following groups at once. It was basically a need to follow logs during deployment and see how instances behave during and after deployment. This is the main motive behind K∅RQ.]]></description><guid isPermaLink="false">fac60173-70f5-4682-a698-716cf05306ce</guid><pubDate>Tue, 23 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Mahmut Bulut</dc:creator></item><item><title>Hardware Interrupts | Writing an OS in Rust</title><link>https://os.phil-opp.com/hardware-interrupts/</link><description><![CDATA[In this post we set up the programmable interrupt controller to correctly forward hardware interrupts to the CPU. To handle these interrupts we add new entries to our interrupt descriptor table, just like we did for our exception handlers. We will learn how to get periodic timer interrupts and how to get input from the keyboard.]]></description><guid isPermaLink="false">97757259-e11d-4a4f-88cb-2653ca3cb977</guid><pubDate>Tue, 23 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Philipp Oppermann</dc:creator></item><item><title>Rust can be difficult to learn and frustrating, but it’s also the most exciting thing in software development in a long time</title><link>https://www.influxdata.com/blog/rust-can-be-difficult-to-learn-and-frustrating-but-its-also-the-most-exciting-thing-in-software-development-in-a-long-time/</link><description><![CDATA[I recently decided to put serious effort into learning the Rust programming language. I saw it coming up frequently in interesting projects (e.g. ripgrep) and kept hearing good things about it. My hesitation to picking up Rust since its 1.0 release in 2015 came from two fronts. First, I’m completely invested in Go because of InfluxDB. Second, I heard that it was not the easiest thing to learn. While I don’t normally shy away from difficult tasks, I was hesitant because I believe that many developer tools that take off do so because they are easy to use or give developers significant productivity gains. More often than not, I want to invest my time in tools that I think have longevity that will get some critical mass in the market.]]></description><guid isPermaLink="false">fae7cb69-a7bf-4cb1-9d1d-f5e703312ef7</guid><pubDate>Mon, 22 Oct 2018 18:45:16 +0000</pubDate><dc:creator>Paul Dix</dc:creator></item><item><title>My Experience With Learning Rust</title><link>https://medium.com/@nathanielbarragan/my-experience-with-learning-rust-bbcb6b7c1063</link><description><![CDATA[Although I didn’t start writing this blog when I started writing in Rust, I remember clearly why I started writing in Rust. From what I had been doing in C#, none of it utilized multiple threads. Multi-threaded programming had always been a sore topic for me. Things like thread synchronization and message passing never really made sense to me. I learned Rust mainly due to its promises for ease of programming for multiple threads. Once hearing that things like parts of Firefox were written using it, and the Mozilla themselves were very strongly invested in Rust, I had more reason to start writing in it. I’d assume that if Mozilla were to invest so much in a programming language, it must have some sort of benefits over your usual C and C++ programming languages. Even further than that, I’ve heard of some game studios adopting Rust in their games and I was pretty much hooked at that point.]]></description><guid isPermaLink="false">60825132-c54b-4297-9f81-936601b76f64</guid><pubDate>Mon, 22 Oct 2018 02:29:02 +0000</pubDate><dc:creator>Nathaniel Barragan</dc:creator></item><item><title>Release of glsl-quasiquote-0.2 with support for GLSL pragmas</title><link>https://phaazon.net/blog/glsl-quasiquote-0.2</link><description><![CDATA[glsl-quasiquote-0.2 was released early this morning. This new version provides a more stable public API. Two major changes: The glsl_str! proc-macro would have only survived the 0.1 version. It’s now deprecated and will be removed soon. The glsl! proc-macro now supports GLSL pragmas (both #version and #extension).]]></description><guid isPermaLink="false">0367445a-ecf2-4c7a-9829-1b38d731036c</guid><pubDate>Mon, 22 Oct 2018 02:00:00 +0000</pubDate><dc:creator>Dimitri Sabadie</dc:creator></item><item><title>Rust&apos;s Orphan Rule Is Good, Actually</title><link>https://davidlegare.ghost.io/rusts-orphan-rule/</link><description><![CDATA[The orphan trait rule in Rust is interesting and works impressively well for what it intends to do. While I'm often frustrated by the limitations it imposes, it absolutely succeeds at removing ambiguity in whether or not a trait will be implemented for a type.]]></description><guid isPermaLink="false">c2e61957-0d95-43e3-af09-3173307bf95c</guid><pubDate>Sat, 20 Oct 2018 05:42:04 +0000</pubDate><dc:creator>David LeGare</dc:creator></item><item><title>Rust Mesh Optimizer</title><link>https://www.wihlidal.com/blog/pipeline/2018-10-20-rust-mesh-optimizer/</link><description><![CDATA[When triangle meshes are rendered by a GPU, there are pipeline stages that need to load and process vertex and index data. The efficiency of this process will depend on the layout of the data, and how the GPU is designed. There is an excellent library from Arseny Kapoulkine called meshoptimizer, which provides a variety of algorithms for optimizing geometry for the GPU.]]></description><guid isPermaLink="false">ec7874f9-e0a0-453b-b723-bdcb56e8ad09</guid><pubDate>Sat, 20 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Graham Wihlidal</dc:creator></item><item><title>Towards fearless SIMD</title><link>https://raphlinus.github.io/rust/simd/2018/10/19/fearless-simd.html</link><description><![CDATA[SIMD is a powerful performance technique, and is especially valuable in signal and image processing applications. I will be using it very extensively in my synthesizer, and also it’s increasingly used in xi-editor to optimize string comparisons and similar primitives.]]></description><guid isPermaLink="false">4f32d4ec-419f-4025-b508-3c486ffb059e</guid><pubDate>Fri, 19 Oct 2018 17:03:42 +0000</pubDate><dc:creator>Raph Levien</dc:creator></item><item><title>Rust RwLock and Mutex Performance Oddities</title><link>https://fy.blackhats.net.au/blog/html/2018/10/19/rust_rwlock_and_mutex_performance_oddities.html</link><description><![CDATA[Recently I have been working on Rust datastructures once again. In the process I wanted to test how my work performed compared to a standard library RwLock and Mutex. On my home laptop the RwLock was 5 times faster, the Mutex 2 times faster than my work.

So checking out my code on my workplace workstation and running my bench marks I noticed the Mutex was the same - 2 times faster. However, the RwLock was 4000 times slower.]]></description><guid isPermaLink="false">8157d765-72cb-40a0-b59f-6b4ae2ae173d</guid><pubDate>Fri, 19 Oct 2018 00:00:00 +0000</pubDate><dc:creator>firstyear</dc:creator></item><item><title>Is Rust functional?</title><link>https://www.fpcomplete.com/blog/2018/10/is-rust-functional</link><description><![CDATA[Rust is an imperative systems programming language. Why does it have so much attention from functional programming advocates? Is it hiding a functional nature?]]></description><guid isPermaLink="false">b39581e7-2147-4b4a-bfdf-b19141e80d89</guid><pubDate>Thu, 18 Oct 2018 03:02:08 +0000</pubDate><dc:creator>Michael Snoyman</dc:creator></item><item><title>Rust has higher kinded types already... sort of</title><link>https://joshlf.com/post/2018/10/18/rust-higher-kinded-types-already/</link><description><![CDATA[In Rust, a type which takes type parameters (Rc<T>, Vec<T>, HashMap<K, V>, etc) is only a valid type when all type parameters are specified. In other words, Rc, Vec, and HashMap<K> are not types. You can’t have a variable of type Rc. You can’t pass Rc as a parameter to other types. The ability to have such things be actual types is a feature called higher kinded types (HKT).]]></description><guid isPermaLink="false">4c54199d-d367-4525-8202-cba2c82afa3d</guid><pubDate>Thu, 18 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Joshua Liebow-Feeser</dc:creator></item><item><title>Serverless Rust with AWS Lambda and WebAssembly</title><link>https://blog.scottlogic.com/2018/10/18/serverless-rust.html</link><description><![CDATA[In this post, I look at how WebAssembly can be used to create serverless functions and demonstrate an AWS Lambda function written entirely in Rust.]]></description><guid isPermaLink="false">c1a9ce3b-fd19-4285-b465-ab7607792297</guid><pubDate>Thu, 18 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Colin Eberhardt</dc:creator></item><item><title>Serverless Rust with Cloudflare Workers</title><link>https://blog.cloudflare.com/cloudflare-workers-as-a-serverless-rust-platform/</link><description><![CDATA[It's exciting times for Rust developers. Cloudflare's Serverless Platform, Cloudflare Workers, allows you to compile your code to WASM, upload to 150+ data centers and invoke those functions just as easily as if they were JavaScript functions. Today I'm going to convert my lipsum generator to use Rust and explore the developer experience (hint: it's already pretty nice).]]></description><guid isPermaLink="false">0c92d9d7-26ba-4152-9820-08ef1011689d</guid><pubDate>Tue, 16 Oct 2018 12:00:00 +0000</pubDate><dc:creator>Steven Pack</dc:creator></item><item><title>Configuration envy</title><link>https://medium.com/@softprops/configuration-envy-a09584386705</link><description><![CDATA[For many of my use cases for running Rust applications, storing configuration in file format is less attractive as I’m typically running Rust inside docker containers and container orchestrators typically encourage the use of standard interfaces like the env for configuration. So I pondered 🤔, “What if I could treat my program’s env parameterization with the same level of typing I treat my functions and enclosing types with while getting everything one get’s from using serde for free?” That would be the bee’s knees 🐝 . Enter: envy.]]></description><guid isPermaLink="false">2e4df02b-88e0-4510-851a-d1dce6014568</guid><pubDate>Tue, 16 Oct 2018 04:17:18 +0000</pubDate><dc:creator>Doug Tangren</dc:creator></item><item><title>Routing and extraction in Tide: a first sketch</title><link>https://rust-lang-nursery.github.io/wg-net/2018/10/16/tide-routing.html</link><description><![CDATA[This post continues the series on Tide, sketching a possible design for routing and extraction that combines some of the best ideas from frameworks like Rocket, Actix, and Gotham.]]></description><guid isPermaLink="false">7141f981-74d7-4df6-9ce2-b857fff58557</guid><pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Aaron Turon</dc:creator></item><item><title>Shifgrethor I: Garbage collection as a Rust library</title><link>https://boats.gitlab.io/blog/post/shifgrethor-i/</link><description><![CDATA[I’m really excited to share with you an experiment that I’ve been working on for the past 5 or 6 weeks. It’s a Rust library called shifgrethor. shifgrethor implements a garbage collector in Rust with an API I believe to be properly memory safe.
I’ll be going through all of the technical details in future blog posts, so I want to kick this series off with a high level overview of the project’s purpose and design decisions.]]></description><guid isPermaLink="false">b138af7a-2e74-44c1-b362-03af475f050b</guid><pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate><dc:creator>withoutboats</dc:creator></item><item><title>Pi-hole: Announcing Our RESTful API</title><link>https://pi-hole.net/2018/10/15/announcing-our-restful-api-contributions-welcome/</link><description><![CDATA[The API is written in Rust, a language new to the Pi-hole project. Rust is a safe and fast language which matches well with our goals for the API. It is statically typed and prevents whole categories of errors while being productive and extendable.]]></description><guid isPermaLink="false">0c44f78b-c47a-4be2-9e30-4fa129304a9c</guid><pubDate>Mon, 15 Oct 2018 13:00:33 +0000</pubDate><dc:creator>Pi-hole</dc:creator></item><item><title>Const-fn compile-time SUBLEQ interpreter</title><link>https://www.reddit.com/r/rust/comments/9o6vzo/constfn_compiletime_subleq_interpreter/</link><description><![CDATA[With the minimal subset of const fn becoming stable soon (in the second next Rust version), I wanted to give const fns a try and test what is possible with them. We implemented a compile-time SUBLEQ interpreter which only uses const-fns, which you can find on the playground. Let's walk through the process of building this abomination :)]]></description><guid isPermaLink="false">e7b5dffe-46bb-42a8-a17c-2ede829080ff</guid><pubDate>Mon, 15 Oct 2018 09:10:49 +1100</pubDate><dc:creator>u/oberien</dc:creator></item><item><title>ruplacer: find and replace text in source files</title><link>https://dmerej.info/blog/post/ruplacer/</link><description><![CDATA[Today I’d like to talk about a command-line tool I’ve been working on. It’s called ruplacer and as the name suggest, it’s rually cool and written in Rust. Basically, it finds and replaces text in source files.]]></description><guid isPermaLink="false">2657be5e-f98f-48a7-9e0a-c4ad2c183cba</guid><pubDate>Sun, 14 Oct 2018 12:34:43 +0000</pubDate><dc:creator>Dimitri Merejkowsky</dc:creator></item><item><title>Amethyst is growing; news on ongoing projects</title><link>https://www.amethyst.rs/blog/dev-news-10-2018/</link><description><![CDATA[We want to share some of the progress being made on Amethyst! As we've had a lot of expansion, we've also revamped the way we manage the project and we have some very interesting new features being worked on.]]></description><guid isPermaLink="false">7abf3b08-b87f-4bd1-a4f4-4d79f4216413</guid><pubDate>Sun, 14 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Moxinilian (Théo Degioanni)</dc:creator></item><item><title>Rust and features discoverability</title><link>https://phaazon.net/blog/rust-features-documentation</link><description><![CDATA[Whatever the project you work on, you should must document your code. There are several situations – let’s call this the First Hypothesis]]></description><guid isPermaLink="false">476c5ab3-1148-4507-b294-8e4c06a188fd</guid><pubDate>Sat, 13 Oct 2018 23:37:00 +0000</pubDate><dc:creator>Dimitri Sabadie</dc:creator></item><item><title>Following up on the 2d graphics in Rust discussion</title><link>https://nical.github.io/posts/rust-2d-graphics-01.html</link><description><![CDATA[Ralph Levien recently published A crate I want: 2d graphics on his blog, which started some interesting discussions on reddit. At the same time there is a nascent discussion on the draw2d repository (which doesn't have any code at this point) about a potential 2d graphics crate.]]></description><guid isPermaLink="false">3d3a61ed-ff74-4407-b508-0c7405b8c653</guid><pubDate>Sun, 14 Oct 2018 00:00:00 +0200</pubDate><dc:creator>Nical</dc:creator></item><item><title>Reflections on Implementing the ndarray-csv Crate</title><link>https://paulkernfeld.com/2018/10/13/ndarray-csv-reflections.html</link><description><![CDATA[Recently, I wrote ndarray-csv, a Rust crate for converting between CSV files and 2D arrays. There are already crates for CSV and arrays, so how exciting could this possibly be? Actually, there was a lot more to it than I had thought: although it started out as a two-hour project, I ended up rewriting the entire thing three times!]]></description><guid isPermaLink="false">11700b19-9b9f-44c3-9708-2c4cd7f0d721</guid><pubDate>Sat, 13 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Paul Kernfeld</dc:creator></item><item><title>Building a command-line todo app in Rust</title><link>https://medium.com/@devashishdxt/building-a-command-line-todo-app-in-rust-a89bb7af91c3</link><description><![CDATA[In this tutorial, we are going to create a simple command-line todo app. By the end of this tutorial, you should have a basic understanding of Rust programming language, building command-line apps in Rust, and performing file-system operations in Rust.]]></description><guid isPermaLink="false">ceb7c2a6-d905-4b13-8f42-4aa42cd9b3e3</guid><pubDate>Fri, 12 Oct 2018 13:14:56 +0000</pubDate><dc:creator>Devashish Dixit</dc:creator></item><item><title>A crate I want: 2d graphics</title><link>https://raphlinus.github.io/rust/graphics/2018/10/11/2d-graphics.html</link><description><![CDATA[The Rust ecosystem has lot of excellent crates, and many more new ones being published. I believe one is missing, though, and I’d really like to see it happen: a cross-platform abstraction for 2D graphics. In this post I will set out what I want.]]></description><guid isPermaLink="false">63fef91b-3a2c-4b05-9fad-bc5a80bd1733</guid><pubDate>Thu, 11 Oct 2018 22:44:03 +0000</pubDate><dc:creator>Raph Levien</dc:creator></item><item><title>Rust Programming with Dynamsoft Barcode Reader</title><link>https://medium.com/@yushulx/rust-programming-with-dynamsoft-barcode-reader-3d1e83004bba</link><description><![CDATA[A few days ago, I accepted a new challenge of creating a simple command line barcode reader using Rust and Dynamsoft Barcode Reader SDK. Rust is a system programming language similar to C++. The learning process did not go through smoothly as I expected. It is not as easy as learning other high-level programming languages such as Java and Python. In this article, I share my experience of learning and using Rust.]]></description><guid isPermaLink="false">cb2bfe24-75a2-43d6-bebc-b8f8ac610c95</guid><pubDate>Thu, 11 Oct 2018 00:26:20 +0000</pubDate><dc:creator>Xiao Ling</dc:creator></item><item><title>Game Dev From Zero - Part 1: Hello</title><link>https://hashnode.com/post/game-dev-from-zero-part-1-hello-rust-lang-cjn3brwto001jv7s2e533bdfc</link><description><![CDATA[With this article, I want to introduce you to game development. I want to give you a little tour of where to start, how to explore possibilities and revive my journey a little bit at the same time. I will try to construct different games from the ground up while writing this article, so you can experience game-dev live.]]></description><guid isPermaLink="false">9a9651de-466e-411e-9449-c1d6878ffba0</guid><pubDate>Thu, 11 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Marco Alka</dc:creator></item><item><title>imag: Call for Participation (1)</title><link>https://imag-pim.org/blog/2018/10/10/call-for-participation-1/</link><description><![CDATA[This is the first call for participation for the imag project. I have no experience writing such calls for participation, so please bear with me!

Right now, the imag ecosystem has some tools available which are already usable and in rather good shape. There is a contact manager, a diary and a notes tool, a habit tracker and a time tracker are there as well, though those are not extensively tested by now.]]></description><guid isPermaLink="false">2b068be3-88b7-4d60-ad38-cfd40019cf5f</guid><pubDate>Wed, 10 Oct 2018 08:42:06 +0000</pubDate><dc:creator>imag</dc:creator></item><item><title>Fixing a Clippy crash</title><link>https://phansch.net/2018/10/10/fixing-a-clippy-crash/</link><description><![CDATA[3 weeks ago I set out to fix a crash in Clippy, this is what I learned along the way. I hope this blog post will be useful for other people diving into Clippy and maybe serve as motivation if things get difficult.]]></description><guid isPermaLink="false">08336620-497d-49b2-9e77-eeb36d26f512</guid><pubDate>Wed, 10 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Philipp Hansch</dc:creator></item><item><title>Rust has a static garbage collector</title><link>https://words.steveklabnik.com/borrow-checking-escape-analysis-and-the-generational-hypothesis</link><description><![CDATA[I’ve often seen people make statements like this one, from the Rust subreddit this morning, "Manual memory management requires more work than garbage collected. Its a trade off of course to be more performant or use lower resources. When and where should Rust be used or not used according to you?". While I don’t completely disagree with this sentiment, it’s also never quite sat right with me. Yes, Rust is a bit harder at the start, but once you get over a hump, I don’t generally find writing Rust to be significantly harder than using a GC’d language. I’ve been trying to figure out why that is.]]></description><guid isPermaLink="false">a3b6b34c-174b-4738-9c06-c9ab251718c4</guid><pubDate>Wed, 10 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Steve Klabnik</dc:creator></item><item><title>Rust SGX SDK v1.0.4 Released</title><link>https://medium.com/baiduxlab/rust-sgx-sdk-v1-0-4-released-9c7d9056a888</link><description><![CDATA[Rust SGX SDK, maintained by Baidu X-Lab, is a convenient framework to develop secure trusted computing applications for Intel SGX enclaves. Based on it, developers can easily build trusted SGX enclaves with memory safety guarantees. This adds an extra strong (and strongest ever) security layer over the SGX isolation, further keeping attackers away from the secrets in enclave even if they compromised the privileged software environment (operating system, hypervisor, etc.). Rust SGX SDK thus means a lot to privacy protection and trusted computing on public cloud platforms and blockchains.]]></description><guid isPermaLink="false">620115c2-e4f9-4c5c-953a-d891cc636b01</guid><pubDate>Tue,  9 Oct 2018 17:50:10 +0000</pubDate><dc:creator>Baidu X-Lab</dc:creator></item><item><title>Remacs continues to improve</title><link>http://db48x.net/rust-remacs-2018/</link><description><![CDATA[As you doubtless know, Emacs has an embedded Lisp environment that provides a large number of intersting Lisp functions that the user can call. Many of these are implemented in C for speed, and we've been rewriting them in Rust. So far we've ported 394 individual Lisp functions from C to Rust, of which 207 were ported in this last year. This is about a third of the total, as you can see by this graph. We've actually completely ported several whole C files now.]]></description><guid isPermaLink="false">49cace2a-ebaf-4aec-b41b-8fb7aa67acc8</guid><pubDate>Tue,  9 Oct 2018 12:35:00 +0000</pubDate><dc:creator>db48x</dc:creator></item><item><title>Noria: dynamic, partially-stateful data-flow for high-performance web applications</title><link>https://www.usenix.org/conference/osdi18/presentation/gjengset</link><description><![CDATA[We introduce partially-stateful data-flow, a new streaming data-flow model that supports eviction and reconstruction of data-flow state on demand. By avoiding state explosion and supporting live changes to the data-flow graph, this model makes data-flow viable for building long-lived, low-latency applications, such as web applications. Our implementation, Noria, simplifies the backend infrastructure for read-heavy web applications while improving their performance.

A Noria application supplies a relational schema and a set of parameterized queries, which Noria compiles into a data-flow program that pre-computes results for reads and incrementally applies writes. Noria makes it easy to write high-performance applications without manual performance tuning or complex-to-maintain caching layers. Partial statefulness helps Noria limit its in-memory state without prior data-flow systems’ restriction to windowed state, and helps Noria adapt its data-flow to schema and query changes while on-line. Unlike prior data-flow systems, Noria also shares state and computation across related queries, eliminating duplicate work.

On a real web application’s queries, our prototype scales to 5× higher load than a hand-optimized MySQL baseline. Noria also outperforms a typical MySQL/memcached stack and the materialized views of a commercial database. It scales to tens of millions of reads and millions of writes per second over multiple servers, outperforming a state-of-the-art streaming data-flow system.]]></description><guid isPermaLink="false">b2cb0409-6147-4d84-8261-734f17fda39c</guid><pubDate>Tue,  9 Oct 2018 11:14:00 +0000</pubDate><dc:creator>Jon Gjengset, Malte Schwarzkopf, Jonathan Behrens, and Lara Timbó Araújo</dc:creator></item><item><title>Rust and the Three Laws of Informatics</title><link>https://medium.com/@schemouil/rust-and-the-three-laws-of-informatics-4324062b322b</link><description><![CDATA[What are the most important properties of programs, and how much do existing languages help? How is Rust different?]]></description><guid isPermaLink="false">0f56caac-74c9-414c-89d5-fe1cb9a74424</guid><pubDate>Tue,  9 Oct 2018 07:42:09 +0000</pubDate><dc:creator>Simon Chemouil</dc:creator></item><item><title>Gfx-hal Tutorial part 2: Vertex buffers</title><link>https://falseidolfactory.com/2018/10/09/gfx-hal-part-2-vertex-buffers.html</link><description><![CDATA[For the last two parts of this tutorial, all we’ve had to look at on-screen is a single blueish triangle. In this part, we want to display a more complex shape, with more variation in color. To do this, we’ll have to stop hard-coding our triangle mesh in the vertex shader. (And start hard-coding it in the source code!)]]></description><guid isPermaLink="false">1ac9419e-3a15-4c2e-961d-20160f9ef6e9</guid><pubDate>Tue,  9 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Mistodon</dc:creator></item><item><title>New crate: pin-cell</title><link>https://boats.gitlab.io/blog/post/pin-cell/</link><description><![CDATA[Today I realized a new crate called pin-cell. This crate contains a type called PinCell, which is a kind of cell that is similar to RefCell, but only can allow pinned mutable references into its interior. Right now, the crate is nightly only and no-std compatible.
How is the API of PinCell different from RefCell? When you call borrow_mut on a RefCell, you get a type back that implements DerefMut, allowing you to mutate the interior value.]]></description><guid isPermaLink="false">9ed3a1ea-2c0d-4508-a2d7-69e9bb07557a</guid><pubDate>Tue,  9 Oct 2018 00:00:00 +0000</pubDate><dc:creator>withoutboats</dc:creator></item><item><title>Notes on Type Layouts and ABIs in Rust</title><link>https://gankro.github.io/blah/rust-layouts-and-abis/</link><description><![CDATA[Over the years I've found myself with a weird amount of knowledge about how types and ABIs in Rust work, and I wanted to write it all down in one place so that... it's written down in one place. Much of this information can or should be found in the Rust Language Reference and the Rustonomicon.]]></description><guid isPermaLink="false">492f5ab9-f95c-480b-8377-dc2f06e836b8</guid><pubDate>Tue,  9 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Alexis Beingessner</dc:creator></item><item><title>Porting C (minimp3) To Rust</title><link>https://wiki.alopex.li/PortingCToRust</link><description><![CDATA[So because it seemed like a good idea at the time, I decided to port the minimp3 library from C to Rust. I want a pure Rust MP3 decoder crate to exist under a permissive license, I wanted to learn a few things about the MP3 file format, and it seemed small enough to do in a single weekend. (In reality it was largely done in about a week.) I’m quite good at Rust, and I’m okay at C (but rusty; hah!), and I know nothing at all about MP3 decoding. So, it was a fun learning experience. It was very interesting seeing how C and Rust’s different feature set changed how the programs were written. minimp3 turned out to be a good choice for this, since it is standalone, pretty well-written C as far as I can tell, does nothing that needs to be unsafe, and small but not trivial. This article is an attempt to organize my thoughts, notes and observations as I went about the project, in the hopes that it will be useful or at least interesting to someone else.]]></description><guid isPermaLink="false">ab2b9642-16a3-4d28-9f8b-5f6938964600</guid><pubDate>Mon,  8 Oct 2018 19:53:10 +0000</pubDate><dc:creator>Simon Heath</dc:creator></item><item><title>Hunting for Bugs in Rust</title><link>https://blog.troutwine.us/2018/10/08/hunting-for-bugs-in-rust/</link><description><![CDATA[Way back in August I announced that I was starting in on "a project to QuickCheck Rust’s standard library data structures", here. And I did! The project is called bughunt-rust and I've been poking at it on weekends since, adjusting my approach based on papers I've been reading, experience gained writing test code and the kind of results I've been getting. This post goes through what I've been up to, where I see the project heading in the near term.]]></description><guid isPermaLink="false">a8939774-cb65-4cca-b7c4-47f8f0249f96</guid><pubDate>Mon,  8 Oct 2018 17:27:54 +0000</pubDate><dc:creator>Brian L. Troutwine</dc:creator></item><item><title>Auth Web Microservice with rust using Actix-Web</title><link>https://hgill.io/posts/auth-microservice-rust-actix-web-diesel-complete-tutorial-part-1/</link><description><![CDATA[We are going to create a web-server in rust that only deals with user registration and authentication. I will be explaining the steps in each file as we go. The complete project code is here repo. Please take all this with a pinch of salt as I’m a still a noob to Rust.]]></description><guid isPermaLink="false">d418a0ea-dbef-4bfa-bc74-827185aef57c</guid><pubDate>Mon,  8 Oct 2018 13:02:37 +0100</pubDate><dc:creator>Harry Gill</dc:creator></item><item><title>Oxidizing Python: Speeding up URL quoting by 10× using Rust</title><link>https://tech.blue-yonder.com/oxidizing-python-speeding-up-urlquoting-by-using-rust/</link><description><![CDATA[Recently a colleague of mine told me about a small bottleneck with url quoting since we are quoting a lot of storage keys at least once when loading or storing a dataset. To speed it up, we are going to write a C-Library in Rust and invoke it from Python.]]></description><guid isPermaLink="false">0d41cc9f-584c-4da3-8516-a567cc923279</guid><pubDate>Mon,  8 Oct 2018 10:48:12 +0000</pubDate><dc:creator>Markus Klein</dc:creator></item><item><title>A Case Study in Heaptrack</title><link>https://speice.io/2018/10/case-study-optimization.html</link><description><![CDATA[When I first started building the dtparse crate, my intention was to mirror as closely as possible the equivalent Python library. Python, as you may know, is garbage collected. Very rarely is memory usage considered in Python, and I likewise wasn’t paying too much attention when dtparse was first being built.

This lackadaisical approach to memory works well enough, and I’m not planning on making dtparse hyper-efficient. But every so often, I’ve wondered: “what exactly is going on in memory?”]]></description><guid isPermaLink="false">917520f5-6f74-4e91-87e1-40d2360c0e46</guid><pubDate>Mon,  8 Oct 2018 00:00:00 -0400</pubDate><dc:creator>Bradlee Speice</dc:creator></item><item><title>Declarative Rust static analysis</title><link>http://blog.lambdaverse.org/comacro/</link><description><![CDATA[Rust's Macros 2.0 are intuitive: demonstrate a pattern, and the compiler can insert the pattern into your program wherever you want it. Inspired by this syntax, I wondered: Could you “run a macro backwards”—use the same by-example language to describe patterns to search for?]]></description><guid isPermaLink="false">fd7f3d68-5d82-41ba-b841-d11a37e4b98d</guid><pubDate>Sun,  7 Oct 2018 19:23:17 +0000</pubDate><dc:creator>Kaz Wesley</dc:creator></item><item><title>Testing reqwest-based clients</title><link>https://write.as/balrogboogie/testing-reqwest-based-clients</link><description><![CDATA[In this article we will make a small Rust library that uses the reqwest http client library, and see what we can do to adequately test the business logic. We assume you have the Rust toolchain installed, and are at least passingly familiar with programming in Rust.]]></description><guid isPermaLink="false">e34760d5-658d-475a-91eb-c489a649ee86</guid><pubDate>Fri,  5 Oct 2018 20:57:27 +0000</pubDate><dc:creator>balrogboogie</dc:creator></item><item><title>GLSL quasiquoting in Rust!</title><link>https://phaazon.net/blog/glsl-quasiquoting</link><description><![CDATA[glsl-quasiquote-0.1 was released today! The crate provides you with two macros: glsl! and glsl_str!. Both are procedural macros that requires a nightly compiler and the proc_macro_non_items feature. They will both output a TranslationUnit, that represents a whole shader AST.]]></description><guid isPermaLink="false">4a3da20e-11fb-4868-9aa1-593f62439bd9</guid><pubDate>Fri,  5 Oct 2018 19:00:00 +0000</pubDate><dc:creator>Dimitri Sabadie</dc:creator></item><item><title>Future directions for cbindgen (rust-ffi)</title><link>http://dreamingofbits.com/post/future-directions-for-cbindgen-rust-ffi/</link><description><![CDATA[There’s been a persistent set of issues we’ve had with cbindgen that have not been solved. They all roughly result from the same problem; cbindgen is a standalone parser of rust code, not a rustc plugin. What this means is that cbindgen doesn’t understand your rust library like the compiler does. We’ve tried to minimize the differences here by making cbindgen smarter, but it’s not obvious that’s the best approach going forward.]]></description><guid isPermaLink="false">351bd1f1-82e3-4b80-882e-9b2aac228c5a</guid><pubDate>Fri,  5 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Ryan Hunt</dc:creator></item><item><title>Default values ..copy that</title><link>https://medium.com/@softprops/default-values-copy-that-ae43831781f3</link><description><![CDATA[When I talk to folks foreign to Rust, I often get asked the question: “Why doesn’t Rust have support for default arguments”. When I first started learning Rust I pondered the same question. Eventually I came to realize that it does, kind of. Rust just takes different approach based on it’s unique design choices, one which I now wish other languages supported.]]></description><guid isPermaLink="false">d7c70ce9-96bc-4518-8e3e-429503883006</guid><pubDate>Thu,  4 Oct 2018 17:06:48 +0000</pubDate><dc:creator>Doug Tangren</dc:creator></item><item><title>The Undergarden, a text adventure in Rust: 2 - Objects</title><link>https://www.cattlegrid.info/the-undergarden-text-adventure-rust-2-objects</link><description><![CDATA[In this second blog post I’m showing how I implemented objects - things the player can interact with - for a text adventure written in Rust. As usual, the full code is available on GitHub.]]></description><guid isPermaLink="false">22538446-2c14-4b71-bd82-46c2db0371a1</guid><pubDate>Thu,  4 Oct 2018 04:51:00 +0000</pubDate><dc:creator>Michele Beltrame</dc:creator></item><item><title>WebAssembly and Dynamic Memory</title><link>https://frehberg.wordpress.com/webassembly-and-dynamic-memory/</link><description><![CDATA[WebAssembly is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable target for compilation of high-level languages like C/C++/Rust, enabling deployment on the web for client and server applications.

These high-level languages like C/C++/Rust (+Javascript) deal with different allocations of memory, such as static memory, stack memory and dynamic memory.]]></description><guid isPermaLink="false">cba35bca-a821-4ba9-81d8-3cee56f5e199</guid><pubDate>Thu,  4 Oct 2018 03:19:18 +0000</pubDate><dc:creator>Frank Rehberger</dc:creator></item><item><title>No, pest is not faster than nom</title><link>https://unhandledexpression.com/general/2018/10/04/no-pest-is-not-faster-than-nom.html</link><description><![CDATA[But today (October 4th, 2018), the pest website featured a very misleading graph. Yes, a pest 2.0 parser that does not convert the input to Rust types is indeed faster than a nom 4.0 parser that does convert the input to Rust types. But what happens if I write a nom 4.0 parser that does not convert its input to Rust types?]]></description><guid isPermaLink="false">dceefb77-f60e-4864-80e4-1dfb50c52cce</guid><pubDate>Thu,  4 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Geoffroy Couprie</dc:creator></item><item><title>Who authors the most popular crates on crates.io?</title><link>https://words.steveklabnik.com/who-authors-the-most-popular-crates-on-crates-io</link><description><![CDATA[I had a question this morning: who authors the most popular crates on crates.io? First, we have to figure out what we mean by “most popular.” My first guess was “top 100 by recent downloads”, so I looked at crates.io. Once I got to 100, I found... | Steve Klabnik | “The most violent element in society is ignorance.” - Emma Goldman]]></description><guid isPermaLink="false">5c9a36df-c260-4d16-87b1-9b7e3107f7b8</guid><pubDate>Thu,  4 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Steve Klabnik</dc:creator></item><item><title>pest Parser 2.0 Released</title><link>https://pest.rs/</link><description><![CDATA[pest is a general purpose parser written in Rust with a focus on accessibility, correctness, and performance. It uses parsing expression grammars (or PEG) as input, which are similar in spirit to regular expressions, but which offer the enhanced expressivity needed to parse complex languages. ]]></description><guid isPermaLink="false">a708e2c2-f0bd-4691-88c0-d004bedd667a</guid><pubDate>Thu,  4 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Dragoș Tiselice</dc:creator></item><item><title>Announcing the Tokio Doc Push (we need you!)</title><link>https://tokio.rs/blog/2018-10-doc-blitz/</link><description><![CDATA[In the past, there has been reoccurring feedback that Tokio is hard to understand. I believe a lack of good documentation plays a significant part. It’s time to fix this problem.

And because Tokio is open source, it is on us (the community) to make this happen! 👏]]></description><guid isPermaLink="false">cbc812fb-b5ff-44cc-ae96-f4a5ae44e7dd</guid><pubDate>Thu,  4 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Carl Lerche</dc:creator></item><item><title>Introducing Ruukh Framework</title><link>https://sharadchand.com/2018/10/03/ruukh-framework.html</link><description><![CDATA[Rust has its goals set on to be a primary WASM language and it would be awesome to use it both in backend and frontend web. Ruukh is one of such efforts to realise that dream. Ruukh, a frontend web framework, is inspired by both VueJS and ReactJS.]]></description><guid isPermaLink="false">217f309f-bfff-4997-8ff7-faddf10b670f</guid><pubDate>Wed,  3 Oct 2018 12:38:00 +0000</pubDate><dc:creator>Sharad Chand</dc:creator></item><item><title>Lessons learned on writing web applications completely in Rust</title><link>https://medium.com/@saschagrunert/lessons-learned-on-writing-web-applications-completely-in-rust-2080d0990287</link><description><![CDATA[This blog post is an update to the preceeding article “A web application completely written in Rust” and summarizes the projects’ progress over the last months.]]></description><guid isPermaLink="false">7de9ba6b-a3ae-4db5-a911-15126a264b26</guid><pubDate>Wed,  3 Oct 2018 11:59:12 +0000</pubDate><dc:creator>Sascha Grunert</dc:creator></item><item><title>Going Four Times Faster using Multi-Threading</title><link>http://worthe-it.co.za/programming/2018/10/03/going-four-times-faster-with-multithreading.html</link><description><![CDATA[Rust makes writing parallel code safe. Rayon makes it easy.]]></description><guid isPermaLink="false">55b31f9c-fa63-4890-bcf3-5f9b899c197f</guid><pubDate>Wed,  3 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Justin Worthe</dc:creator></item><item><title>Red Hat&apos;s Stratis Storage Project Reaches Its 1.0 Stable Milestone</title><link>https://www.phoronix.com/scan.php?page=news_item&amp;px=Stratis-1.0-Released</link><description><![CDATA[Stratis 1.0 was quietly released last week with the 1.0 version marking its initial stable release and where also the on-disk meta-data format has been stabilized. Red Hat engineers believe Stratis is now ready for more widespread testing.]]></description><guid isPermaLink="false">4ae0bbf7-720b-48d3-8c5d-d5b3c8e061dd</guid><pubDate>Tue,  2 Oct 2018 04:48:34 -0400</pubDate><dc:creator>Michael Larabel</dc:creator></item><item><title>Porting My CUDA Path Tracer to ptx-builder/linker</title><link>https://bheisler.github.io/post/ptx-builder-and-linker/</link><description><![CDATA[A bunch of stuff has happened since I published my post on The State of GPGPU in Rust. Most importantly, Denys Zariaiev (@denzp) released his work on a custom linker for Rust CUDA kernels, and a build.rs helper crate to make it easier to use.
These two crates eliminate many of the problems I referred to in my previous post. The linker solves most of the “invalid PTX file” problems, while the ptx-builder crate does all of the magic that Accel was doing behind the scenes.]]></description><guid isPermaLink="false">abd3f1ce-8faf-4c92-a8d3-20c34e41af97</guid><pubDate>Mon,  1 Oct 2018 19:00:00 -0600</pubDate><dc:creator>Brook Heisler</dc:creator></item><item><title>What is Rusty ECMA Script Scanner (RESS)</title><link>https://wiredforge.com/blog/rusty_ecma/what-is-a-scanner/index.html</link><description><![CDATA[After releasing the Rusty ECMA Script Scanner (RESS) 0.5, my next big effort in the Rust+Javascript space is to increase the amount of documentation. This post is an effort to clarify what RESS does and how someone might use it.]]></description><guid isPermaLink="false">38c548bb-e3d4-428d-9a95-89ca0c8ce3c9</guid><pubDate>Tue,  2 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Robert Masen</dc:creator></item><item><title>An EFI App a bit rusty</title><link>https://medium.com/@gil0mendes/an-efi-app-a-bit-rusty-82c36b745f49</link><description><![CDATA[After two tweets that I made last week, playing around with UEFI and Rust, some people asked to publish a blog post explaining how to create a UEFI application fully written in Rust and demonstrate all the testing environment.]]></description><guid isPermaLink="false">9128e298-33fe-4f13-a9c7-7ff2361ee2da</guid><pubDate>Sun, 30 Sep 2018 21:56:12 +0000</pubDate><dc:creator>Gil Mendes</dc:creator></item><item><title>Understanding Compilers — For Humans (Version 2)</title><link>https://towardsdatascience.com/understanding-compilers-for-humans-version-2-157f0edb02dd</link><description><![CDATA[Understanding your compiler internally allows you to use it effectively. Walk through how programming languages and compilers work in this chronological synopsis. Lots of links, example code, and diagrams have been composed to aid in your understanding.

Understanding Compilers — For Humans (Version 2) is a successor to my second article on Medium, with over 21 thousand views. I am so glad I could make a positive impact on people’s education, and I am excited to bring a complete rewrite based on the input I received from the original article. I chose Rust as this work’s primary language.]]></description><guid isPermaLink="false">8e066aec-6f09-44df-b763-b4d44b772fb5</guid><pubDate>Sat, 29 Sep 2018 16:01:01 +0000</pubDate><dc:creator>Luke Wilson</dc:creator></item><item><title>The relative performance of C and Rust</title><link>http://dtrace.org/blogs/bmc/2018/09/28/the-relative-performance-of-c-and-rust/</link><description><![CDATA[I reimplemented a body of C software in Rust, and it performed better for the same task; what’s going on? And is there anything broader we can say about these results?

To explore this, I ran some statemap rendering tests on SmartOS on a single-socket Haswell server (Xeon E3-1270 v3) running at 3.50GHz. The C version was compiled with GCC 7.3.0 with -O2 level optimizations; the Rust version was compiled with 1.29.0 with --release. All of the tests were run bound to a processor set containing a single core; all were bound to one logical CPU within that core, with the other logical CPU forced to be idle. cpustat was used to gather CPU performance counter data, with one number denoting one run with pic0 programmed to that CPU performance counter. The input file (~30MB compressed) contains 3.5M state changes, and in the default config will generate a ~6MB SVG. ]]></description><guid isPermaLink="false">23617503-ac10-4027-bd53-a98ad82c7d1e</guid><pubDate>Sat, 29 Sep 2018 01:28:17 +0000</pubDate><dc:creator>Bryan Cantrill</dc:creator></item><item><title>lolbench: automagically and empirically discovering Rust performance regressions</title><link>https://blog.anp.lol/rust/2018/09/29/lolbench/</link><description><![CDATA[lolbench compiles ~350 benchmarks with every Rust nightly. It then runs them and highlights potential performance regressions in the standard library and the output of the compiler. Each toolchain’s run is summarized with a list of likely candidates, as seen in the image below, and we’re now getting started using these to safeguard the performance of Rust programs. Come help!]]></description><guid isPermaLink="false">307ed024-4949-4c53-80cf-c1e60a57e0a7</guid><pubDate>Sat, 29 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Adam Perry</dc:creator></item><item><title>Merlin: flexible, composable transcripts for zero-knowledge proofs</title><link>https://medium.com/@hdevalence/merlin-flexible-composable-transcripts-for-zero-knowledge-proofs-28d9fda22d9a</link><description><![CDATA[Merlin is a small Rust library that performs the Fiat-Shamir transformation in software, maintaining a STROBE-based transcript of the proof protocol and allowing the prover to commit messages to the transcript and compute challenges bound to all previous messages. It also provides a transcript-based RNG for use by the prover, generalizing “deterministic” and “synthetic” nonces to arbitrarily complex zero-knowledge protocols.]]></description><guid isPermaLink="false">2e26b090-21b9-42e2-9ac5-9664e79af88e</guid><pubDate>Fri, 28 Sep 2018 21:07:20 +0000</pubDate><dc:creator>Henry de Valence</dc:creator></item><item><title>Tower Web 0.3 — async/await and template support</title><link>https://medium.com/@carllerche/tower-web-0-3-async-await-and-template-support-e0bb8ed47941</link><description><![CDATA[Today, Tower Web 0.3 has been released and it comes with two major new features: Experimental support for async/await. Support for using templates to render responses.]]></description><guid isPermaLink="false">fa23119f-23c8-404c-9aaa-5a75da99d131</guid><pubDate>Fri, 28 Sep 2018 17:32:13 +0000</pubDate><dc:creator>Carl Lerche</dc:creator></item><item><title>Rust RPG: Introductory Tutorial of Rust, Unit Testing, and Continuous Integration with a Roguelike</title><link>https://medium.com/@cameron.manavian/rust-rpg-introductory-tutorial-of-rust-unit-testing-and-continuous-integration-with-a-roguelike-b7b86e90855c</link><description><![CDATA[We’re going to walk through a Rust application that I’ve built, which is essentially a basic Roguelike in most regards.]]></description><guid isPermaLink="false">ec683955-b4c5-426c-858d-f180fde10abb</guid><pubDate>Fri, 28 Sep 2018 13:46:04 +0000</pubDate><dc:creator>Cameron Manavian</dc:creator></item><item><title>Programming WebAssembly with Rust — The Book!</title><link>https://medium.com/@KevinHoffman/programming-webassembly-with-rust-the-book-7c4a890fcf97</link><description><![CDATA[I am proud to announce that I’m working on a book for the Pragmatic Programmers. The title hasn’t been set in stone yet, but the book will be about programming WebAssembly with Rust.]]></description><guid isPermaLink="false">38d1a807-a596-4423-a458-beab7d9df074</guid><pubDate>Fri, 28 Sep 2018 13:25:42 +0000</pubDate><dc:creator>Kevin Hoffman</dc:creator></item><item><title>How I’ve found vulnerability in a popular Rust crate (and you can too)</title><link>https://medium.com/@shnatsel/how-ive-found-vulnerability-in-a-popular-rust-crate-and-you-can-too-3db081a67fb</link><description><![CDATA[I have recently discovered a zero-day vulnerability in a fairly popular and well-designed Rust crate. In this article I’m going to discuss how I did it and why it wasn’t discovered earlier, and introduce a new tool, libdiffuzz, that I’ve created for the job. A recently discovered vulnerability in Rust standard library makes a cameo appearance.]]></description><guid isPermaLink="false">385cdc5a-e6e0-4562-b9f3-156b296d6a03</guid><pubDate>Fri, 28 Sep 2018 03:51:45 +0000</pubDate><dc:creator>Sergey &quot;Shnatsel&quot; Davidoff</dc:creator></item><item><title>Writing Rust NIFs for your Elixir code with the Rustler package</title><link>https://medium.com/@jacob.lerche/writing-rust-nifs-for-your-elixir-code-with-the-rustler-package-d884a7c0dbe3</link><description><![CDATA[There will be times where code will run slow and Erlang/Elixir optimizations will only go so far. BEAM has several ways to interface with foreign code, the fastest way being with a Native Implemented Function (NIF) whose API expects them to be written in C. But speaking frankly, the last time I worked with C involved a lengthy debugging session that boiled down to the lack of type safety, so I’d rather not have to repeat that experience. It’s for this reason that Rust is such a compelling language.]]></description><guid isPermaLink="false">11786513-db52-4fdb-ac03-e4a854b36f2b</guid><pubDate>Fri, 28 Sep 2018 01:54:27 +0000</pubDate><dc:creator>Jacob Lerche</dc:creator></item><item><title>The Undergarden, a text adventure in Rust: 1 - Sections</title><link>https://www.cattlegrid.info/the-undergarden-text-adventure-rust-1-sections</link><description><![CDATA[I’m attempting to write a (very simple, at least initally) text adventure in Rust, so I’m going to share progress on my blog starting today. This first post is about the sections, that to day is the rooms of a house for example.]]></description><guid isPermaLink="false">c0b70c5d-190f-4c9d-ac44-d65a64a61b1f</guid><pubDate>Thu, 27 Sep 2018 20:04:00 +0000</pubDate><dc:creator>Michele Beltrame</dc:creator></item><item><title>Bluetooth Low Energy with Rust</title><link>https://219design.com/bluetooth-low-energy-with-rust/</link><description><![CDATA[For a change of pace, I have been learning embedded development using Rust in my spare time, which has been an exciting challenge. A core component of my project is to have two devices communicating wirelessly, and (at the time I started working on this) there were no “no-std” Rust Bluetooth crates available. So I started to write my own. I had already chosen to work on the Nucleo, and to use the IDB05A1 shield, which contains a BlueNRG-MS module.]]></description><guid isPermaLink="false">af77ca8e-342a-450b-90e8-a6b1d485c8b8</guid><pubDate>Thu, 27 Sep 2018 19:52:09 +0000</pubDate><dc:creator>Daniel Gallagher</dc:creator></item><item><title>Announcing the web-sys crate!</title><link>https://rustwasm.github.io/2018/09/26/announcing-web-sys.html</link><description><![CDATA[We are pleased to announce the first release of the web-sys crate! It provides raw bindings to all the Web’s APIs: everything from DOM manipulation to WebGL to Web Audio to timers to fetch and more!]]></description><guid isPermaLink="false">27dd6f1a-6659-43d5-aa7b-2e0ee21c7173</guid><pubDate>Wed, 26 Sep 2018 00:00:00 +0000</pubDate><dc:creator>rustwasm</dc:creator></item><item><title>eBPF, ingrained in Rust</title><link>https://blog.redsift.com/labs/ebpf-ingrained-in-rust/</link><description><![CDATA[Today we are releasing RedBPF and ingraind, our eBPF toolkit that integrates with StatsD and S3, to gather feedback, and see where others in the Rust community might take this framework. If you are looking to up your company’s monitoring game, gather more data about your Raspberry Pi cluster at home, or just have a strong academic interest in Rust and low-level bit shepherding, you might want to read on.]]></description><guid isPermaLink="false">ba0468b9-b0dd-40d1-b253-9fa70cb05ddf</guid><pubDate>Tue, 25 Sep 2018 14:45:44 +0000</pubDate><dc:creator>Peter Parkanyi</dc:creator></item><item><title>‘orion’ - yet another attempt at pure-Rust cryptography</title><link>https://brycx.github.io/2018/09/25/orion-pure-rust-crypto-lib.html</link><description><![CDATA[orion is another attempt at cryptography implemented in pure Rust. Its main focus is usability. This is in part achieved by providing a thorough documentation of the library. High-level abstractions are also provided, which are an attempt at guiding the users towards safe usage of the lower-level functionality of the library.]]></description><guid isPermaLink="false">96405556-ac98-433a-a0f8-c3de068e47d3</guid><pubDate>Tue, 25 Sep 2018 00:00:00 +0000</pubDate><dc:creator>brycx</dc:creator></item><item><title>Announcing Rust 1.29.1</title><link>https://blog.rust-lang.org/2018/09/25/Rust-1.29.1.html</link><description><![CDATA[A security vulnerability was found in the standard library where if a large number was passed to str::repeat it could cause a buffer overflow after an integer overflow. If you do not call the str::repeat function you are not affected. This has been addressed by unconditionally panicking in str::repeat on integer overflow.]]></description><guid isPermaLink="false">adea520f-a6b7-43f5-b705-62aefc4c00e6</guid><pubDate>Tue, 25 Sep 2018 00:00:00 +0000</pubDate><dc:creator>The Rust Core Team</dc:creator></item><item><title>rust-on-mobile: Example of creating and running a basic &quot;Hello World&quot; application on iOS</title><link>https://github.com/mtak-/rust-on-mobile/blob/master/examples/ios/example01.md</link><description><![CDATA[This repo is a place where examples can be added of iOS/android projects written entirely/mostly in rust.]]></description><guid isPermaLink="false">0b2520e8-b69d-4edb-91b1-3558494fd0cd</guid><pubDate>Mon, 24 Sep 2018 06:09:32 +0000</pubDate><dc:creator>mtak-</dc:creator></item><item><title>Office Hours #1: Cyclic services</title><link>http://smallcultfollowing.com/babysteps/blog/2018/09/24/office-hours-1-cyclic-services/</link><description><![CDATA[This is a report on the second “office hours”, in which we discussed how to setup a series of services or actors that communicate with one another. This is a classic kind of problem in Rust: how to deal with cyclic data. Usually, the answer is that the cycle is not necessary (as in this case).]]></description><guid isPermaLink="false">0ec2fec4-ed74-4377-b1f5-1e6a5eec6025</guid><pubDate>Mon, 24 Sep 2018 00:00:00 -0400</pubDate><dc:creator>Niko Matsakis</dc:creator></item><item><title>Smithy progress update: How I decreased WebAssembly bundle size by 90%</title><link>https://medium.com/@robert.balicki_2494/smithy-progress-update-how-i-decreased-webassembly-bundle-size-by-90-e7fe194b2f58</link><description><![CDATA[Smithy, a web development framework written in Rust that compiles to WebAssembly. In the mean time, there has been substantial progress, and Smithy is on the verge of being ready for alpha use! In this post, I want to describe the improvements that have been made, and what’s on the Smithy roadmap!]]></description><guid isPermaLink="false">21440a24-a7da-4c72-8232-df22c7438b09</guid><pubDate>Mon, 24 Sep 2018 03:36:53 +0000</pubDate><dc:creator>Robert Balicki</dc:creator></item><item><title>Running Little Rust Snippets with Runner</title><link>https://stevedonovan.github.io/rustifications/2018/09/23/runner.html</link><description><![CDATA[runner is mostly a clever wrapper around normal Cargo operations. runner acts like an interpreter. There is no forced directory structure, just source. But it’s just using rustc under the hood in the most direct way possible.]]></description><guid isPermaLink="false">0a206ee6-7e54-4570-9f0c-8040fb9cd530</guid><pubDate>Sun, 23 Sep 2018 00:00:00 +0200</pubDate><dc:creator>Steve Donovan</dc:creator></item></channel></rss>