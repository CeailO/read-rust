<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - All Posts</title><link>https://readrust.net/</link><description>All Posts posts on Read Rust</description><item><title>Organizational Debt</title><link>https://boats.gitlab.io/blog/post/rust-2019/</link><description><![CDATA[We all know that classic aphorism: Year comes to an end, Rust blog post press send. This is mine.

There are lots of cool technical improvements to Rust that I want the project to achieve this year, and a few in particular that I’m definitely going to be putting a lot of time into. But this blog post is going to talk about none of them. Instead, I want to talk about organizational debt, and how badly the Rust project needs to deal with it in 2019.]]></description><guid isPermaLink="false">f0adf24b-6589-4306-a580-6cef894ad3b7</guid><pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate><dc:creator>withoutboats</dc:creator></item><item><title>battop: top for your laptop battery</title><link>https://github.com/svartalf/rust-battop</link><description><![CDATA[battop is an interactive viewer, similar to top, htop and other *top utilities, but about batteries installed in your notebook.]]></description><guid isPermaLink="false">834cc4e5-1dd6-446d-966e-8a869ff45f79</guid><pubDate>Thu, 30 May 2019 00:00:00 +0000</pubDate><dc:creator>svartalf</dc:creator></item><item><title>[blend_info] Rust and Blender</title><link>https://www.janwalter.org/jekyll/blender/rust/blendinfo/2019/05/28/blend_info.html</link><description><![CDATA[To explore a bit the Blender binary file format and provide tools to read and use them I started a new repository on Codeberg. Finally I want to read Blender files directly, and render them with my own renderer. But on my way to develop such a thing, there are many other possibilities, e.g. one could convert Blender files to a new file format, which does not only work for Blender and one single renderer, but would allow any Digital Content Creation (DCC) tool to save to, and any renderer to read from. Anyway, that's a complicated topic and let's start far simpler, by exploring Blender's file format. You get the source code of Blender for reverse engineering (create a debug version and single step through file related code with a debugger) and some Rust code (provided by me) to see what I have figured out so far...]]></description><guid isPermaLink="false">c8b3f39e-8427-42db-93fa-ea196b956607</guid><pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate><dc:creator>Jan Walter</dc:creator></item><item><title>Update on await syntax</title><link>https://boats.gitlab.io/blog/post/await-decision-ii/</link><description><![CDATA[In my previous post I said that the lang team would be making our final decision about the syntax of the await operator in the May 23 meeting. That was last Thursday, and we did reach a decision. In brief, we decided to go forward with the preliminary proposal I outlined earlier: a postfix dot syntax, future.await. For more background, in addition the previous post on my blog, you can read this write up about some of the trade offs from April.]]></description><guid isPermaLink="false">b3ca84bd-3574-43f7-aef3-988cbc6389a4</guid><pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate><dc:creator>boats</dc:creator></item><item><title>Eight million pixels and counting – A look at pathfinder</title><link>https://nical.github.io/posts/a-look-at-pathfinder.html</link><description><![CDATA[This post is about pathfinder, a GPU vector graphics renderer written in Rust by Patrick Walton as part of his work in the emerging technologies team at Mozilla. Pathfinder can be used to render glyph atlases and larger scenes such as SVG paths. The two use cases are handled a bit differently and in this post I will be focusing on the latter.]]></description><guid isPermaLink="false">cbb3c7f8-1ff0-4a30-b924-08c79542c259</guid><pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate><dc:creator>Nical</dc:creator></item><item><title>Creating a Static HTTP Server with Rust – Part 2</title><link>http://concisecoder.io/2019/05/27/creating-a-static-http-server-with-rust-part-2/</link><description><![CDATA[In this series, we are creating a basic static HTTP 1.0 server with Rust. If you haven’t seen Part 1 yet, go do that first. At the end of Part 2, our server will do the following: Read and serve files from a predefined directory on the host server, Generate appropriate HTTP responses to incoming requests, Log information about the response to standard output.]]></description><guid isPermaLink="false">4e723122-0527-43dc-b95b-ff4fd5cd5d28</guid><pubDate>Mon, 27 May 2019 13:25:29 +0000</pubDate><dc:creator>Levi Payne</dc:creator></item><item><title>Calling a Go Library from Rust: A Case Study with SQIP</title><link>https://blog.arranfrance.com/post/cgo-sqip-rust/</link><description><![CDATA[A brief run-down of how to wrap a Go library in a CGO FFI to enable its functions to be called by Rust.]]></description><guid isPermaLink="false">ec3d6230-6b29-4459-8a62-c40a8ef08430</guid><pubDate>Mon, 27 May 2019 00:00:00 +0000</pubDate><dc:creator>Arran France</dc:creator></item><item><title>Programming Servo: Zen and the art of removing blocks from your system</title><link>https://medium.com/@polyglot_factotum/programming-servo-zen-and-the-art-of-removing-blocks-from-your-system-51c1b7d404e3</link><description><![CDATA[It all started with a simple issue, a “quick fix”, or so I thought.]]></description><guid isPermaLink="false">0cc7297b-a14f-443d-a02a-073685c663a3</guid><pubDate>Sun, 26 May 2019 09:41:02 +0000</pubDate><dc:creator>Gregory Terzian</dc:creator></item><item><title>Creating a &apos;paged&apos; Vec in Rust</title><link>https://dev.to/kdrakon/creating-a-paged-vec-in-rust-193l</link><description><![CDATA[In this post I'll show you some code I wrote for paginating over a Vec collection in Rust. I needed this for a CLI tool I wrote which was meant to display all the vector entries retrieved from a remote server. In most cases, I expected to receive a lot of results, so to display them in a terminal efficiently, I couldn't reasonably render them all. I decided I would page the results.]]></description><guid isPermaLink="false">51cdd7b5-fed9-439c-b6f8-c50ee7f93ea2</guid><pubDate>Fri, 24 May 2019 06:36:49 +0000</pubDate><dc:creator>Sean Policarpio</dc:creator></item><item><title>Announcing j4rs</title><link>https://astonbitecode.github.io/blog/post/j4rs_0.6.0/</link><description><![CDATA[j4rs stands for “Java for Rust” and allows effortless calls to Java code, from Rust. Some time ago, on a need to call Java code from Rust, I started the j4rs project. The main idea was to implement a crate that would give the ability to its users to make calls to Java easily, so that they can benefit from the huge Java ecosystem.]]></description><guid isPermaLink="false">f94980b0-dfbb-421b-b861-16e158c7c0c2</guid><pubDate>Fri, 24 May 2019 00:10:10 +0000</pubDate><dc:creator>Aston</dc:creator></item><item><title>Announcing Mockiato - A strict, yet friendly mocking library for Rust 2018</title><link>https://blog.myelin.ch/2019/05/24/mockiato-announcement.html</link><description><![CDATA[We’re proud to announce mockiato! For the last few months, we tackled the issue of creating a usable mocking library. Our primary goals were: Ease of use: The mocks are written in idiomatic Rust and don’t rely on custom macro syntax. Maintainability: The entire code base strives to follow the rules of Clean Code and Clean Architecture as specified by Robert C. Martin.  Strict expectation enforcement: Mockiato catches unexpected behavior as soon as it happens instead of returning default values.]]></description><guid isPermaLink="false">635d3c1f-b71e-4883-b72e-52efe1ab01d0</guid><pubDate>Fri, 24 May 2019 00:00:00 +0000</pubDate><dc:creator>Jeremy, Ruben, Jan, Mathias</dc:creator></item><item><title>Hawk-Rust Series: Actuation of Raspberry Pi Camera</title><link>https://blog.knoldus.com/hawk-rust-series-actuation-of-raspberry-pi-camera/</link><description><![CDATA[In this project, we have used Raspberry Pi and its camera to authenticate whether the RFID card is punched by the card’s owner or not. HAWK is a Rust based Image Recognition project, which implements a two-factor authentication by using the RFID card for user identification and Image for user validation. In this blog, I’ll show you how to trigger RPi’s camera using Rust Programming Language. To know more about HAWK click here]]></description><guid isPermaLink="false">4d542211-c76e-41b8-b9fd-d008c06ed937</guid><pubDate>Thu, 23 May 2019 08:51:49 +0000</pubDate><dc:creator>Pawan Bisht</dc:creator></item><item><title>Blockchain-Flavored WASI</title><link>https://medium.com/oasislabs/blockchain-flavored-wasi-50e3612b8eba</link><description><![CDATA[General purpose computation on the blockchain using Web Assembly System Interface (WASI).]]></description><guid isPermaLink="false">fe48ce77-ad77-4983-a08d-1fb9cf951bb1</guid><pubDate>Thu, 23 May 2019 04:07:55 +0000</pubDate><dc:creator>Nick Hynes</dc:creator></item><item><title>Announcing Rust 1.35.0</title><link>https://blog.rust-lang.org/2019/05/23/Rust-1.35.0.html</link><description><![CDATA[The highlight of this release is the implementation of the FnOnce, FnMut, and Fn closure traits for Box<dyn FnOnce>, Box<dyn FnMut>, and Box<dyn Fn> respectively. Additionally, closures may now be coerced to unsafe function pointers. The dbg! macro introduced in Rust 1.32.0 can now also be called without arguments. Moreover, there were a number of standard library stabilizations. Read on for a few highlights, or see the detailed release notes for additional information.]]></description><guid isPermaLink="false">53c0e6e9-a95e-4509-b70a-74e945e74e92</guid><pubDate>Thu, 23 May 2019 00:00:00 +0000</pubDate><dc:creator>The Rust Release Team</dc:creator></item><item><title>Speeding up Ruby MRI with Rust</title><link>https://medium.com/@flixdescteaux/speeding-up-ruby-mri-with-rust-a7c914d2f9d0</link><description><![CDATA[Let me start by saying I really like Ruby. I tend to agree with the statement saying Ruby is optimized for developer happiness. However, nothing comes for free. Programming ecstasy is a double-edged sword and writing slow Ruby is as easy as it is pleasant.]]></description><guid isPermaLink="false">63fcd49a-f8d8-46f4-92dd-58cb8d77082c</guid><pubDate>Tue, 21 May 2019 13:58:31 +0000</pubDate><dc:creator>Félix Descôteaux</dc:creator></item><item><title>Rebuffing the Attack of the Clones</title><link>https://thenewwazoo.github.io/clone.html</link><description><![CDATA[I left a comment on HN about how I teach new users not to clone, and someone asked me if I’d written more, so here we go!

When new users are writing Rust code, it’s reasonably common to “fight with the borrow checker”. I personally find this to be quite a misnomer, as it is not a fight so much as a misunderstanding of the nature of Rust’s semantics. In an attempt to make the errors go away, users will understandably take the path of least resistance, according to the docs they’ve got. They dutifully read up, and eventually land on the clone method. This makes the errors go away! Great! Except if you were my newbie, in the code review I’d tell you clone is banned unless you can tell me why you need it.]]></description><guid isPermaLink="false">ecccd5a6-53e0-4e7a-9ece-f02450f3eb2f</guid><pubDate>Tue, 21 May 2019 00:00:00 +0000</pubDate><dc:creator>Brandon Matthews</dc:creator></item><item><title>Putting the stack back into Stacked Borrows</title><link>https://www.ralfj.de/blog/2019/05/21/stacked-borrows-2.1.html</link><description><![CDATA[Less than a month ago, I announced Stacked Borrows 2. In particular, I hoped that that version would bring us closer to proper support for two-phase borrows. Turns out I was a bit too optimistic! Last week, @Manishearth asked on Zulip why Miri rejected a certain program, and it turned out that the issue was related to two-phase borrows: in combination with interior mutability, behavior wasn’t always what we wanted it to be. So, I went back to the drawing board and tried to adjust Stacked Borrows.

In the end, I decided to give up on “proper” support for two-phase borrows for now, which I explained here. But I also made some tweaks to Stacked Borrows that affect all accesses (not just two-phase borrows), and that’s what this post is about. I am referring to this as “Stacked Borrows 2.1”.]]></description><guid isPermaLink="false">c12cd1dc-8523-4caf-add8-4ba0322a3cb6</guid><pubDate>Tue, 21 May 2019 00:00:00 +0000</pubDate><dc:creator>Ralf Jung</dc:creator></item><item><title>Here&apos;s My Type, So Initialize Me Maybe (mem::uninitialized is deprecated)</title><link>https://gankro.github.io/blah/initialize-me-maybe/</link><description><![CDATA[Rust's infamous mem::uninitialized method has been deprecated in today's nightly build. Its replacement, MaybeUninit, has been stabilized. If you are using the former, you should migrate to using the latter as soon as possible (probably when it hits stable in 6 weeks). This was done because it was determined that mem::uninitialized was fundamentally broken, and could not be made to work.]]></description><guid isPermaLink="false">bab17ec7-d45f-40fa-963b-10c3085fa7bf</guid><pubDate>Tue, 21 May 2019 00:00:00 +0000</pubDate><dc:creator>Alexis Beingessner</dc:creator></item><item><title>dtolnay/case-studies: Analysis of various tricky Rust code</title><link>https://github.com/dtolnay/case-studies</link><description><![CDATA[This repository showcases some examples of tricky Rust code that I have encountered during my years working with a variety of advanced macro libraries in Rust (my own and others').]]></description><guid isPermaLink="false">4dfd194e-9cc6-4b75-b2f4-8900d8fdebcd</guid><pubDate>Tue, 21 May 2019 00:00:00 +0000</pubDate><dc:creator>David Tolnay</dc:creator></item><item><title>mini-aio: the new async IO library for Rust</title><link>http://antoyo.ml/mini-aio-new-async-io-library</link><description><![CDATA[During my work at Adgear, I’ve been working for a while on an async IO library for Rust. This post will present this new library. This library takes a very different approach than most other async IO libraries in Rust: it is actually inspired by the Pony programming language. So, it does not use futures, it does not use async/await: it just provides simple trait]]></description><guid isPermaLink="false">db12537e-42d3-4bba-9c68-7adc1afec917</guid><pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate><dc:creator>Antoni Boucher</dc:creator></item><item><title>Polyglot Projects</title><link>https://myrrlyn.net/blog/misc/polyglot-projects</link><description><![CDATA[An exploration of how I wrote a C++ binding API for my Rust library.]]></description><guid isPermaLink="false">812b46b0-ec10-45f3-9fc6-4aaa2ae2534e</guid><pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate><dc:creator>Alexander Payne</dc:creator></item><item><title>The 2019 Rust Event Lineup</title><link>https://blog.rust-lang.org/2019/05/20/The-2019-Rust-Event-Lineup.html</link><description><![CDATA[We're excited for the 2019 conference season, which we're actually late in writing up. Some incredible events have already happened! Read on to learn more about all the events occurring around the world, past and future.]]></description><guid isPermaLink="false">5c93aa16-acee-46d1-8a08-462d9ce7c09f</guid><pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate><dc:creator>Rust Community Team</dc:creator></item><item><title>powerset-enum - anonymous enum and a PoC for how that feature can be used to improve Rust&apos;s error handling</title><link>https://www.reddit.com/r/rust/comments/bqn9e6/announcing_the_powersetenum_crate_a_poor_mans/</link><description><![CDATA[My crate offers a powerset enum - an enum that can be parametrized to any subset of it's variants. I also included a macro for doing this parametrization by providing the types of the variants - so for example Error![std::io::Error, serde_json::Error] would generate a subset of the enum that can only have IO and JSON parsing errors.]]></description><guid isPermaLink="false">feed408e-361c-4a9c-9432-5729aed1e789</guid><pubDate>Mon, 20 May 2019 08:50:00 +1000</pubDate><dc:creator>someboddy</dc:creator></item><item><title>Scala Developer Journey into Rust - Part 5: Domain Models</title><link>http://blog.madhukaraphatak.com/rust-scala-part-5/</link><description><![CDATA[Rust is one of the major programming languages that’s been getting popular in recent years. It has many advanced high level language features like Scala. This made me interested to learn Rust. So in this next series of blogs I will share my experience with Rust from a Scala developer point of view. I would like to explore how these two language approach things. I would like to explore the similarities and their differences.

This is fifth post in the series. In this post, I will be talking about domain models.]]></description><guid isPermaLink="false">d6fe8e42-6394-4db9-858e-e572740e0915</guid><pubDate>Sun, 19 May 2019 00:00:00 +0000</pubDate><dc:creator>Madhukara Phatak</dc:creator></item><item><title>Rust In Avast</title><link>https://vorner.github.io/2019/05/19/rust-in-avast.html</link><description><![CDATA[When I joined Avast about a year and a half ago, I did it because of two things:  I wanted to work on interesting problems and I wanted to share the Wisdom of Rust with few more people.

Originally, I was hired because of my experience with writing software for „bigger embedded“ (think a home router or Raspberry PI ‒ it runs Linux kernel, has a shell, but the file system is a bad joke, your libc has bunch of weird bugs features, you really need to think twice not to waste RAM needlessly and you have to cross-compile), low-level networking knowledge and C++.

But I don’t enjoy writing C++ (not speaking about the libc features). And I have other skills I like to practice too. So I would drop an occasional comment about how this or that would be better done in Rust. I’ve done internal courses and workshops about Rust for whoever was interested, in the hope more people would start asking to be allowed to do stuff in Rust and I could participate in such projects.]]></description><guid isPermaLink="false">eedb81ef-265f-4dc2-a1d9-559d2d68594d</guid><pubDate>Sun, 19 May 2019 00:00:00 +0000</pubDate><dc:creator>Michal &apos;vorner&apos; Vaner</dc:creator></item><item><title>Rust for OOP - Project Management</title><link>https://oribenshir.github.io/afternoon_rusting/blog/project-management</link><description><![CDATA[The basics of Rust project layout are simple, and common to many other languages. You have the artifacts of your project. The basics artifacts are executables(binaries) and libraries. You use binaries whenever you want to produce a runnable application. For reusable code, use libraries. Nothing remarkable in Rust. In my projects, I prefer to write almost everything inside libraries, as one can never know when he will reuse a piece of code. Usually, I want my executable to be a thin wrapper around my libraries. Rust has a uniform name for a single library or binary: crate. Meaning crate is either an executable or a library. Creating either a library or a binary crate is straightforward.]]></description><guid isPermaLink="false">e8a7784f-8334-4e7a-b912-a6c3cfbb5522</guid><pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate><dc:creator>Ori Ben-Shir</dc:creator></item><item><title>Momo · Get Back Some Compile Time From Monomorphization</title><link>https://llogiq.github.io/2019/05/18/momo.html</link><description><![CDATA[Monomorphization has one problem (apart from being a ridiculous word that I’ll probably spell wrong every time): It generates rather a lot of code, bloating binary size and potentially pessimizing execution cache usage. Often, generics aren’t really needed for speed, but for ergonomics: Library code might want to present an easy-to-use generic interface that will automate some conversions. However, this often means that almost each user gets their own version of the code, leading to the aforementioned bloat (case in point: Earlier clap versions were notorious for adding hundreds of kilobytes to the binary size – for a simple command line parser).]]></description><guid isPermaLink="false">568fdc54-427f-47be-8849-dd040bafe8dd</guid><pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>Image processing experiments (1)</title><link>https://toswak.net/blog/image-processing-experiments-1-rust/</link><description><![CDATA[I implemented an image processing experiment in Rust and was positively surprised.]]></description><guid isPermaLink="false">1c9745cb-ea4b-4d95-81b4-c51c4a217602</guid><pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate><dc:creator>Tobias Watzek</dc:creator></item><item><title>My Project to Write Embedded OS in Rust</title><link>https://medium.com/@garasubo/my-project-to-write-embedded-os-in-rust-eadf83f5ee37</link><description><![CDATA[My experience writing embedded OS in Rust. The target architecture is Arm Cortex-M series. My application is running on Nucleo-F4291ZI board and QEMU. Currently, I implemented those functionality: Round-robin scheduler to schedule processes running in Thread mode, SVC interfaces to call kernel function for user processes (e.g. print messages using USART, sleep to wait for interrupts), Move to sleep mode to wait for interrupt when there is no executable processes. There are only a few functionality yet, but the core structure is being completed, I think.]]></description><guid isPermaLink="false">a534602d-8f20-4c12-800d-adbab4f62ca0</guid><pubDate>Fri, 17 May 2019 23:01:00 +0000</pubDate><dc:creator>garasubo (ガラスボー)</dc:creator></item><item><title>Evaluating pipelined rustc compilation</title><link>https://internals.rust-lang.org/t/evaluating-pipelined-rustc-compilation/10199</link><description><![CDATA[Recently landed in nightly is the ability for Cargo to execute rustc in a “pipelined” fashion which has the promise of faster build times across the ecosystem. This support is turned off by default and the Cargo team is interested to gather more data and information about this feature, and that’s where you come in! If you’re interested in faster compiles, we’re interested in getting your feedback on this feature!]]></description><guid isPermaLink="false">64f26c72-e208-4900-90b5-cd1c61ec450b</guid><pubDate>Fri, 17 May 2019 16:09:30 +0000</pubDate><dc:creator>Alex Crichton</dc:creator></item><item><title>Using Rust to Scale Elixir for 11 Million Concurrent Discord Users</title><link>https://blog.discordapp.com/using-rust-to-scale-elixir-for-11-million-concurrent-users-c6f19fc029d3</link><description><![CDATA[Over the last year, the Backend Infrastructure team at Discord was hard at work improving the scalability and performance of our core real-time communications infrastructure. One big project we undertook was changing how we update the Member List.]]></description><guid isPermaLink="false">2d643e8c-a753-49c4-b18a-3323bb783259</guid><pubDate>Fri, 17 May 2019 15:42:16 +0000</pubDate><dc:creator>Matt Nowack</dc:creator></item><item><title>Running WebAssembly on the Kernel</title><link>https://medium.com/wasmer/running-webassembly-on-the-kernel-8e04761f1d8e</link><description><![CDATA[This is the story of our journey running Wasmer on the Linux kernel.]]></description><guid isPermaLink="false">ef3c5cdb-f130-4211-83a1-1550ea15d73f</guid><pubDate>Thu, 16 May 2019 22:37:36 +0000</pubDate><dc:creator>Heyang Zhou</dc:creator></item><item><title>Rust – Arrays? Make chains, not concat!</title><link>https://frehberg.com/2019/05/rust-arrays-make-chains-no-concat/</link><description><![CDATA[f your application needs to iterate over a bunch of items from different sources or arrays, someone with C/C++ background might copy all items into a single vector and iterate this vector. This strategy will cause high costs in terms of allocating heap memory for the consecutive vector buffer. Instead, keep the data where it is, and chain it together to form an iterator over a virtual array. The following Rust code demonstrates the chaining of multiple arrays, forming a single itertator, without any additional allocation of vector buffer in heap. ]]></description><guid isPermaLink="false">009c05c5-89b2-4519-9133-c46988d45a17</guid><pubDate>Thu, 16 May 2019 16:59:10 +0000</pubDate><dc:creator>Frank Rehberger</dc:creator></item><item><title>Cross compiling and statically linking against Rust libraries</title><link>https://medium.com/csis-techblog/cross-compiling-and-statically-linking-against-rust-libraries-2c02ee2c01af</link><description><![CDATA[A few years ago, mainly due to performance reasons, we started rewriting specific back-end services from Python to Rust, with great success. Now, for the sake of ease of development and testing, we are exploring the idea of moving parts of our C/C++ code base to Rust, too.

In order to do so, instead of re-writing everything in one swoop, we decided to try integrating Rust into our existing code base.

Following is a summary of our experiments, and a skeleton for writing a Rust library and calling it from a C/C++ application.]]></description><guid isPermaLink="false">3f754573-640a-4f2c-8c98-bcb1d2727bf9</guid><pubDate>Thu, 16 May 2019 10:29:25 +0000</pubDate><dc:creator>Tiago Seco</dc:creator></item><item><title>Papers on Rust</title><link>http://magnusmanske.de/wordpress/?p=617</link><description><![CDATA[With these crates in a basic but usable state, I went to write papers, Rust code to gather data from the above sources, and inject them into Wikidata. I wrote a Rust trait to represent a generic source, and then wrote adapter structs for each of the sources. Finally, I added some wrapper code to take a list of adapters, query them about a paper, and update Wikidata accordingly.]]></description><guid isPermaLink="false">93fbaebd-c627-46f3-89ea-1469e58ecd22</guid><pubDate>Thu, 16 May 2019 10:06:00 +0000</pubDate><dc:creator>Magnus Manske</dc:creator></item><item><title>Zero Cost Abstractions</title><link>https://boats.gitlab.io/blog/post/zero-cost-abstractions/</link><description><![CDATA[The idea of a zero cost abstraction is very important to certain programming languages, like Rust and C++, which intend to enable users to write programs with excellent performance profiles with relatively little effort. Since this idea is fundamental to the design of Rust and my work, I want to investigate, for a moment, what exactly a zero cost abstraction even is.]]></description><guid isPermaLink="false">0369c538-0c12-4b33-9211-fd410b2c38da</guid><pubDate>Thu, 16 May 2019 00:00:00 +0000</pubDate><dc:creator>boats</dc:creator></item><item><title>Terraform: generate 3-d models of geographic terrain</title><link>https://jaredforsyth.com/posts/intoducing-terraform/</link><description><![CDATA[I just spent the past two weeks building a GUI Rust app to help you generate a 3-d model of terrain from around the world, that can then be used for 3-d printing, rendering, or whatever you like.]]></description><guid isPermaLink="false">27b12f19-d9cb-4ac4-b150-14398ad2f7da</guid><pubDate>Thu, 16 May 2019 00:00:00 +0000</pubDate><dc:creator>Jared Forsyth</dc:creator></item><item><title>How to start a Rust Chat App</title><link>https://www.steadylearner.com/blog/read/How-to-start-Rust-Chat-App</link><description><![CDATA[In this post, we will learn how to build simple chat app in your local machine with Rust and simple JavaScript.]]></description><guid isPermaLink="false">e25cac18-f4ca-4872-babe-c4614327e076</guid><pubDate>Thu, 16 May 2019 00:00:00 +0000</pubDate><dc:creator>Steadylearner</dc:creator></item><item><title>Introducing Packem: a super fast experimental bundler written in Rust</title><link>https://medium.freecodecamp.org/introducing-packem-a-super-fast-experimental-bundler-written-in-rust-e981af875517</link><description><![CDATA[Packem is an experimental precompiled JavaScript module bundler primarily implemented in Rust. It can also handle a variety of other file types like YAML/TOML, fragment shader files and a lot more.]]></description><guid isPermaLink="false">3eb814d5-d467-4e34-ba31-e0a55da4da36</guid><pubDate>Wed, 15 May 2019 16:36:27 +0000</pubDate><dc:creator>Bukhari Muhammad</dc:creator></item><item><title>Rust - 4+ years later</title><link>https://fnordig.de/2019/05/15/rust-4-years-later/</link><description><![CDATA[A quick tour through my 4+ years with Rust.]]></description><guid isPermaLink="false">e710999e-81b7-433e-a2cd-d1968a619567</guid><pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate><dc:creator>Jan-Erik Rediger</dc:creator></item><item><title>4 years of Rust</title><link>https://blog.rust-lang.org/2019/05/15/4-Years-Of-Rust.html</link><description><![CDATA[On May 15th, 2015, Rust was released to the world! After 5 years of open development (and a couple of years of sketching before that), we finally hit the button on making the attempt to create a new systems programming language a serious effort!]]></description><guid isPermaLink="false">1bda7394-787a-42d1-9733-2b503a611ffb</guid><pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate><dc:creator>The Rust Core Team</dc:creator></item><item><title>Creating C/C++ APIs in Rust</title><link>https://karroffel.gitlab.io/post/2019-05-15-rust/</link><description><![CDATA[Rust is an amazing language with an even better ecosystem. Many design decisions of Rust make it a great fit to add new functionality to existing C/C++ systems or gradually replace parts of those systems!

When I tried to make a C++ API for a Rust library, I found that binding from C/C++ to Rust is better documented and has a smoother experience than binding from Rust to C/C++.]]></description><guid isPermaLink="false">6715c2d9-9049-40c2-bc29-cca235bde059</guid><pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate><dc:creator>Thomas Herzog</dc:creator></item><item><title>Rust for OOP - Series Introduction</title><link>https://oribenshir.github.io/afternoon_rusting/blog/rust-for-oop</link><description><![CDATA[While working on my simple chat program, I’ve identified some aspects of Rust, which mastering them will probably turn my code to be more idiomatic. These aspects will turn into a blog series. I’m far from mastering those aspects of Rust, but I’ll share what I’ve learned so far. And how I’ve used it in my chat project.]]></description><guid isPermaLink="false">88afb6a5-3414-407a-9ecc-4e0179e1295f</guid><pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate><dc:creator>Ori Ben-Shir</dc:creator></item><item><title>Rust – Handling Executables and their Debug-Symbols</title><link>https://frehberg.com/2019/05/rust-handling-executables-and-their-debug-symbols/</link><description><![CDATA[This post is about compiling Rust-code, the executables, the handling of the corresponding debug symbols and core-files. It highlights the importance of debug-symbols for debugging and how to split them of the binary before shipping to customer.]]></description><guid isPermaLink="false">0e504089-5eaf-4cb5-a22d-04bb587e54f9</guid><pubDate>Tue, 14 May 2019 22:24:55 +0000</pubDate><dc:creator>Frank Rehberger</dc:creator></item><item><title>State of Machine Learning in Rust</title><link>https://ehsanmkermani.com/2019/05/13/state-of-machine-learning-in-rust/</link><description><![CDATA[Every once in a while this topic comes up on a social media or Rust user channel. I’d like to describe briefly the way I see where things are going by a little bit of history as well as some information about existing flux of Machine Learning/Deep Learning frameworks and major recent trends.]]></description><guid isPermaLink="false">5d09aa3e-28c5-4535-9d07-cc3cafbb2ca2</guid><pubDate>Tue, 14 May 2019 00:48:37 +0000</pubDate><dc:creator>Ehsan M. Kermani</dc:creator></item><item><title>Rust+GNOME Hackfest #5</title><link>http://antoyo.ml/rust-gnome-hackfest-berlin</link><description><![CDATA[Last week, I went to the fifth Rust+GNOME hackfest which was in Berlin again. My goal for this hackfest was to fix this issue I opened nearly three years ago. The problem is that sometimes you want to create a widget or an object and set some properties at construction time. This might be needed when you want to set construct-only properties. For instance, you might want to create a webkit2gtk::WebView with a WebContext and a UserContentManager at the same time. That’s why a constructor was manually written for this use case.]]></description><guid isPermaLink="false">ad13d235-c5b0-454f-b35c-891006484207</guid><pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate><dc:creator>Antoni Boucher</dc:creator></item><item><title>Announcing Rust 1.34.2</title><link>https://blog.rust-lang.org/2019/05/14/Rust-1.34.2.html</link><description><![CDATA[The Error::type_id method was recently stabilized as part of Rust 1.34.0. This point release destabilizes it, preventing any code on the stable and beta channels to implement or use it, awaiting future plans that will be discussed in issue #60784.]]></description><guid isPermaLink="false">294ff4dd-a217-4d15-a378-a2ef10f6aae8</guid><pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate><dc:creator>The Rust Release Team</dc:creator></item><item><title>Build Rust environment for ESP32</title><link>http://quickhack.net/nom/blog/2019-05-14-build-rust-environment-for-esp32.html</link><description><![CDATA[What is it? Recently I heard that LLVM for xtensa is working, so I tried to build Rust for ESP32.]]></description><guid isPermaLink="false">e50d6f14-3323-48d5-b85b-e8302eddce92</guid><pubDate>Tue, 14 May 2019 00:00:00 +0900</pubDate><dc:creator>Yoshinari Nomura</dc:creator></item><item><title>What’s the best IDE for developing in Rust?</title><link>https://medium.com/cloud-native-the-gathering/whats-the-best-ide-for-developing-in-rust-5087d46006f5</link><description><![CDATA[A curation of opinions and facts on a variety of Rust IDEs.]]></description><guid isPermaLink="false">154c7165-f0e5-46e1-96e7-c8338485549f</guid><pubDate>Mon, 13 May 2019 06:43:35 +0000</pubDate><dc:creator>Tremaine Eto</dc:creator></item><item><title>Security advisory for the standard library</title><link>https://blog.rust-lang.org/2019/05/13/Security-advisory.html</link><description><![CDATA[The Rust team was recently notified of a security vulnerability affecting manual implementations of Error::type_id and their interaction with the Error::downcast family of functions in the standard library. If your code does not manually implement Error::type_id your code is not affected.]]></description><guid isPermaLink="false">593aaa73-c49a-4b38-99c7-ce2a1070723d</guid><pubDate>Mon, 13 May 2019 00:00:00 +0000</pubDate><dc:creator>The Rust Core Team</dc:creator></item><item><title>Zemeroth v0.5: ggez, WASM, itch.io, visuals, AI, campaign, tests</title><link>https://ozkriff.github.io/2019-05-13--devlog-zemeroth-v0-5/</link><description><![CDATA[Zemeroth is a turn-based hexagonal tactical game written in Rust. You can download precompiled v0.5 binaries for Windows, Linux, and macOS. Also, now you can play an online version (read more about it in the "WebAssembly version" section).]]></description><guid isPermaLink="false">8922aaed-cc0e-482a-8422-d7dceec6dac3</guid><pubDate>Mon, 13 May 2019 00:00:00 +0000</pubDate><dc:creator>Andrey Lesnikov</dc:creator></item><item><title>Manticore Operating System</title><link>https://github.com/manticoreos/manticore</link><description><![CDATA[Manticore is a research operating system, written in Rust, with the aim of exploring the parakernel OS architecture.

The OS is increasingly a bottleneck for server applications that want to take maximum advantage of the hardware. Many traditional kernel interfaces (such as in POSIX) were designed when I/O was significantly slower than the CPU. However, today I/O is getting faster, but single-threaded CPU performance has stagnated. For example, a 40 GbE NIC can receive a cache-line sized packet faster than the CPU can access its last-level cache (LLC), which makes it tricky for an OS to keep up with packets arriving from the network. Similarly, non-volatile memory (NVM) access speed is getting closer to DRAM speeds, which challenges OS abstractions for storage.

To address this OS bottleneck, server applications are increasingly adopting kernel-bypass techniques. For example, the Seastar framework is an OS implemented in userspace, which implements its own CPU and I/O scheduler, and bypasses the Linux kernel as much as it can. Parakernel is an OS architecture that eliminates many OS abstractions (similar to exokernels) and partitions hardware resources (similar to multikernels) to facilitate high-performance server application with increased application-level parallelism and predictable tail latency.]]></description><guid isPermaLink="false">0650fe18-12a0-40f4-916f-1a5c2464b9d5</guid><pubDate>Mon, 13 May 2019 00:00:00 +0000</pubDate><dc:creator>Pekka Enberg</dc:creator></item><item><title>Shell Completions in Pure Rust</title><link>https://www.joshmcguigan.com/blog/shell-completions-pure-rust/</link><description><![CDATA[Custom completion behavior is configured using a special bash built-in called complete. complete can be used to designate either a bash function or any other command as the completion script for a particular command. When the user requests completions for a command, complete will run specified code, passing in as args information about what the user has already typed, and expecting as output the completion suggestions. Typically these completion scripts are written in bash, but we’ll look at how it is possible to write them in Rust.]]></description><guid isPermaLink="false">fdf7f732-0af5-4031-9135-4b1db1ebfc28</guid><pubDate>Sun, 12 May 2019 00:00:00 +0000</pubDate><dc:creator>Josh Mcguigan</dc:creator></item><item><title>Optional parameters in Rust</title><link>http://blog.keiruaprod.fr/2019/05/11/optional-parameters-in-rust/</link><description><![CDATA[Many languages feature “optional” parameters to function arguments: if you provide a value, it will be used, but if you don’t, a default value will be used instead. How to do that in Rust? Well, in Rust you have to provide all the parameters a function requests. You can, however, use “Option”s to do two things: make their usage not mandatory, provide a default value.]]></description><guid isPermaLink="false">a0770f01-6980-48bd-bd23-cdee98b5c16a</guid><pubDate>Sat, 11 May 2019 19:16:47 +0000</pubDate><dc:creator>Clement Keirua</dc:creator></item><item><title>Creating a Static HTTP Server with Rust - Part 1</title><link>http://concisecoder.io/2019/05/11/creating-a-static-http-server-with-rust-part-1/</link><description><![CDATA[In this series, we will create a basic static HTTP 1.0 server with Rust. At the end of Part 1 of this tutorial, our server will do the following: Listen for and handle TCP connections on a specific port, Accept HTTP 1.0 GET requests, Parse and validate requests for further use, Log incoming requests. We will avoid using libraries that make this trivial (i.e. the http crate) and focus on the fundamentals of how a server works.]]></description><guid isPermaLink="false">25d9490f-05e3-4f5c-a407-19d78b0fb6d4</guid><pubDate>Sat, 11 May 2019 17:17:46 +0000</pubDate><dc:creator>Levi Payne</dc:creator></item><item><title>Generating a GNOME library using gir crate</title><link>https://gtk-rs.org/docs-src/tutorial/gir_tutorial</link><description><![CDATA[In this tutorial, we’ll see how to generate a GNOME library using the gir crate. A few things to note first: It only works on GObject-based libraries.  You need .gir files.

A little explanation about those requirements: the gir crate needs .gir files to generate the library API. You can generally find them alongside the library header files (as you can see here for example, look for “.gir”).

The .gir files “describes” the library API (objects, arguments, even ownership!). This is where the gir crate comes in: it reads those .gir files and generates the Rust crates from them. You can learn more about the GIR format here.]]></description><guid isPermaLink="false">a0a1c63f-18d2-440f-8568-0cdd5899afe3</guid><pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate><dc:creator>Gtk-rs</dc:creator></item><item><title>rust-hypervisor-firmware</title><link>https://github.com/intel/rust-hypervisor-firmware/blob/master/README.md</link><description><![CDATA[This repository contains a simple KVM firmware that is designed to be launched from anything that supports loading ELF binaries and running them with the Linux kernel loading standard. The ultimate goal is to be able to use this "firmware" to be able to load a bootloader from within a disk image.]]></description><guid isPermaLink="false">03308e2f-7a8e-4162-8c4e-4bffd1138c51</guid><pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate><dc:creator>Intel</dc:creator></item><item><title>Snips Open Sources Tract</title><link>https://medium.com/snips-ai/snips-open-sources-tract-cdc50f437ef2</link><description><![CDATA[After open sourcing Snips-NLU a year ago, Snips now shares Tract, a new piece of its embedded voice platform. Tract is Snips’ neural network inference engine.]]></description><guid isPermaLink="false">0cbe8a85-0ad7-49b7-b266-db068f4cef8d</guid><pubDate>Fri, 10 May 2019 13:59:02 +0000</pubDate><dc:creator>Mathieu Poumeyrol</dc:creator></item><item><title>μAMP: Asymmetric Multi-Processing on microcontrollers</title><link>https://blog.japaric.io/microamp/</link><description><![CDATA[microamp (styled as μAMP) is a framework (library plus cargo subcommand) for building bare-metal applications that target AMP systems. This blog post is a deep dive into this framework which serves as the core foundation of the multi-core version of Real Time For the Masses (RTFM), which I’ll cover in the next blog post.]]></description><guid isPermaLink="false">507fcf49-a4cd-445d-8df1-82eaaad35188</guid><pubDate>Fri, 10 May 2019 00:00:00 +0000</pubDate><dc:creator>Jorge Aparicio</dc:creator></item><item><title>Some Thoughts on Rust&apos;s Async/Await Debate</title><link>https://whitfin.io/some-thoughts-on-rusts-async-await-proposals/</link><description><![CDATA[This post will be an extension of the debates found in the Rust forums, specifically here and here. A lot is being said in those threads and there's a certain amount of duplicated posts that are drowning out potentially valuable information and perspectives. I've written several comments in those debates]]></description><guid isPermaLink="false">6c334d13-f697-4774-8820-3665687ec7a4</guid><pubDate>Thu,  9 May 2019 18:41:38 +0000</pubDate><dc:creator>Isaac Whitfield</dc:creator></item><item><title>2D Graphics on Modern GPU</title><link>https://raphlinus.github.io/rust/graphics/gpu/2019/05/08/modern-2d.html</link><description><![CDATA[Is the traditional 2D imaging model nearing the end of its usefulness, or does it have a shiny future in the “modern graphics” world? I spent a week on a research retreat in a cottage in the woods to answer this question, as it shapes the future of UI toolkits. Performant UI must use GPU effectively, and it’s increasingly common to write UI directly in terms of GPU rendering, without a 2D graphics API as in the intermediate layer. Is that the future, or perhaps a mistake?]]></description><guid isPermaLink="false">3ce37cbb-5bdc-4340-a83f-9f402616cd58</guid><pubDate>Wed,  8 May 2019 20:40:42 +0000</pubDate><dc:creator>Raph Levien</dc:creator></item><item><title>Recursive iterators in Rust</title><link>https://amos.me/blog/2019/recursive-iterators-rust/</link><description><![CDATA[I’ve been looking for this blog post everywhere, but it doesn’t exist, so I guess it’s my turn to write about Some Fun with Rust. Let’s say you have a recursive, acyclic data structure. Now let’s say you want to iterate over the values of the root node and all its children, recursively, so that you get the sequence [1, 2, 3, 4, 5, 6, 7].]]></description><guid isPermaLink="false">7d5b4554-d4eb-45b4-9d90-a562f36a4f88</guid><pubDate>Wed,  8 May 2019 00:00:00 +0000</pubDate><dc:creator>amos</dc:creator></item><item><title>Learn Rust: Parsing command line arguments with StructOpt</title><link>https://www.tenderisthebyte.com/blog/2019/05/08/parsing-cli-args-with-structopt/</link><description><![CDATA[A beginners guide to using StructOpt for parsing command line arguments.]]></description><guid isPermaLink="false">b5691501-490d-4eef-a8cc-2728e42774d2</guid><pubDate>Wed,  8 May 2019 00:00:00 +0000</pubDate><dc:creator>Ryan Moore</dc:creator></item><item><title>Implementing a Interpreted Language in Rust Part 1</title><link>http://nedellis.com/2019/05/08/esta_1/</link><description><![CDATA[We live in a great era for language design. Within the last 5-10 years, several innovative languages have come out and won over the hearts of many developers with a newfound focus on memory safety (Rust), runtime interoperability (JVM: Kotlin, V8: Typescript, BEAM: Elixir), first class concurrency (Go, Pony), dependent types (Idris), Language oriented Programming (Racket) and many more inspired features. In this spirit, I have decided to throw my hat into the ring as well and create my own language for fun.]]></description><guid isPermaLink="false">35a812e7-75c8-4ffe-98b0-0dee390a5a51</guid><pubDate>Wed,  8 May 2019 00:00:00 +0000</pubDate><dc:creator>Ned Ellis</dc:creator></item><item><title>Rust and glibc version</title><link>http://redbeardlab.com/2019/05/07/rust-and-glibc-version/</link><description><![CDATA[The rust compiler dynamically link the executable against the glibc in the system. Hence if you compile your software against a newer version of glibc (say 2.19) that the one available where you run the executable (say in the host is available 2.14) it may not work.

The cleanest one is to don’t dynamically link against glib, indeed is possible to compile a rust binary statically linking musl, to do so is sufficient to compile against the correct target, usually using cargo build --target x86_64-unknown-linux-musl.

Another possibility is to compile in an environment with an “old-enough” version of glibc, this is usually done using docker and indeed there is a whole project that aim to create a set “zero setup” docker images. ]]></description><guid isPermaLink="false">e6de297c-e3b3-40ab-af40-922f95e71444</guid><pubDate>Tue,  7 May 2019 16:33:59 +0000</pubDate><dc:creator>Simone Mosciatti</dc:creator></item><item><title>Rust Patterns: Enums Instead Of Booleans</title><link>http://blakesmith.me/2019/05/07/rust-patterns-enums-instead-of-booleans.html</link><description><![CDATA[As I’ve been writing Rust code more, I’ve noticed how few boolean types I’m using in my code. Instead, I’m using Rust’s powerful enums in 90% of cases where I would have reached for a boolean in another language.]]></description><guid isPermaLink="false">577c30e3-f6b8-4c6f-98a5-020962df3df3</guid><pubDate>Tue,  7 May 2019 00:00:00 +0000</pubDate><dc:creator>Blake Smith</dc:creator></item><item><title>Racing sed with Rust</title><link>https://www.lambdafunctions.com/articles/racing-sed-with-rust</link><description><![CDATA[As part of a project I’m working on, I sometimes find myself having to deal with quite large X12 files. What I’d really like is a small, self-contained tool that I can pass an X12 file to and rely on it to Do The Right Thing™ without any unnecessary incantations. Since I’m dealing with large source files it would also be nice if it was at least as fast as standard tools like sed. Sounds like a job for…]]></description><guid isPermaLink="false">7d2c4d88-ce3c-4794-8093-80d1dd15395c</guid><pubDate>Tue,  7 May 2019 00:00:00 +0000</pubDate><dc:creator>Mike Clarke</dc:creator></item><item><title>Unit testing Rust using Chrome</title><link>https://medium.com/visly/unit-testing-rust-using-chrome-b8b93572a91d</link><description><![CDATA[Stretch is a cross-platform Flexbox engine written in Rust. At Visly we are building a design tool for front-end engineers and we needed to ensure components looked the same across web, iOS, and Android without making use of WebViews. This meant replicating the web layout system on mobile.

In this post, I’ll cover the test setup we use in Stretch, how and why we need to generate unit dynamically. I’ll also cover an example of contributing another test to Stretch, and finally I’ll walk through how we also make use of this system for benchmarking.]]></description><guid isPermaLink="false">ffeaa8e5-849b-4924-9c9f-1ac6adc15a8e</guid><pubDate>Mon,  6 May 2019 16:25:41 +0000</pubDate><dc:creator>Emil Sjölander</dc:creator></item><item><title>Paw</title><link>https://blog.yoshuawuyts.com/paw/</link><description><![CDATA[Today we're announcing paw, a first step by the CLI Working Group to make command line applications more first class in Rust.

We introduce a procedural macro paw::main that allows passing arguments to fn main, and a new trait ParseArgs that must be implemented by the arguments to main. This allows passing not only the classic std::env::Args to main but also, for example, structopt instances.]]></description><guid isPermaLink="false">09931418-a93c-4b3f-ab7a-de486a0373fd</guid><pubDate>Mon,  6 May 2019 00:00:00 +0000</pubDate><dc:creator>Yoshua Wuyts</dc:creator></item><item><title>How and why await should be a method afterall</title><link>https://www.hardmo.de/article/2019-05-06-await-method-afterall.md</link><description><![CDATA[Explains in which way the planned `await` resembles a function call and provides reasoning how apparent contradictions in this model can be dispelled.]]></description><guid isPermaLink="false">10bffdde-a5d9-4066-971b-0c155ba8ce2d</guid><pubDate>Mon,  6 May 2019 00:00:00 +0000</pubDate><dc:creator>Andreas Molzer</dc:creator></item><item><title>A final proposal for await syntax</title><link>https://boats.gitlab.io/blog/post/await-decision/</link><description><![CDATA[This is an announcement regarding the resolution of the syntax for the await operator in Rust. This is one of the last major unresolved questions blocking the stabilization of the async/await feature, a feature which will enable many more people to write non-blocking network services in Rust. This post contains information about the timeline for the final decision, a proposal from the language team which is the most likely syntax to be adopted, and the justification for this decision.]]></description><guid isPermaLink="false">b7f70811-6fa2-4bab-b9e2-be4107ec221b</guid><pubDate>Mon,  6 May 2019 00:00:00 +0000</pubDate><dc:creator>withoutboats</dc:creator></item><item><title>phrase: A tool for learning significant phrase/term models, and efficiently labeling with them</title><link>https://github.com/soaxelbrooke/phrase</link><description><![CDATA[In general, using phrase falls into 3 steps: Counting n-grams, Exporting scored models, Significant term/phrase extraction/transform N-gram counting is done continuously, providing batches of documents as they come in. Model export reads all n-gram counts so far and calculates mutual information-based collocations - you can then deploy the models by shipping the binary and data/scores_* files to a server. Labeling (identifying all significant terms and phrases in text) or transforming (eager replace of longest found phrases in text) can be done either via the CLI or the web server. Providing labels for documents is not necessary for learning phrases, but does help, and allows for significant term labeling also.]]></description><guid isPermaLink="false">db1287e6-d66c-486a-812b-87ba2b37d423</guid><pubDate>Mon,  6 May 2019 00:00:00 +0000</pubDate><dc:creator>Stuart Axelbrooke</dc:creator></item><item><title>WebAssembly -Part II.A | Wasm with Rust</title><link>https://medium.com/tech-lah/webassembly-part-ii-a-wasm-with-rust-2356dbc6526e</link><description><![CDATA[This article is more of a how-to on getting up and running with a production-grade web project which incorporates Rust (or any other language for that matter) and WebAssembly into your web pages.]]></description><guid isPermaLink="false">e3fadb7b-df84-47a1-b6ca-47186b2b9418</guid><pubDate>Sun,  5 May 2019 13:27:01 +0000</pubDate><dc:creator>Francisco Vilches</dc:creator></item><item><title>Rust concurrency patterns: Communicate by sharing your sender(re-visited)</title><link>https://medium.com/@polyglot_factotum/rust-concurrency-patterns-communicate-by-sharing-your-sender-re-visited-9d42e6dfecfa</link><description><![CDATA[Since I last wrote about this topic, just only about a year ago select as used in the standard-library channel, has been deprecated. So it’s a good time to re-visit some of the concepts in that article, this time in the context of using crossbeam channels, and instead of using a made-up example, let’s dig into some real “production” code, as found in Servo. Let’s continue our exploration of Rust concurrency…]]></description><guid isPermaLink="false">5cea79c2-18d1-470d-b0a4-8647f0e2e5ca</guid><pubDate>Sun,  5 May 2019 06:18:08 +0000</pubDate><dc:creator>Gregory Terzian</dc:creator></item><item><title>Handmade Rust Part 4: Generating Vulkan bindings</title><link>http://stevenlr.com/posts/handmade-rust-4-vulkan-bindings/</link><description><![CDATA[Vulkan is a C API so we’ll need some kind of bindings to be able to use it in Rust. The API is defined in a XML file distributed by Khronos. This file describes the structs, enums, constants, and functions for each version of the API, and all published extensions. The functions can then be loaded from the Vulkan dynamic library and other functions from the API.

However using a raw C API isn’t easy in Rust because it requires using a lot of unsafe code. This is why we’ll also generate builders for all structs so we can for instance fill in pointer/size pairs using slices, but we’ll also generate methods that return Rust’s Results and take in Rust-friendly types like references instead of raw C types. Finally we’ll also generate loaders so we don’t have to manually load the function we need.<Paste>]]></description><guid isPermaLink="false">48eed32e-7fd2-4d16-9a34-97c9289cc72c</guid><pubDate>Sat,  4 May 2019 18:33:36 +0200</pubDate><dc:creator>Steven Le Rouzic</dc:creator></item><item><title>Rust caching on CircleCI using sccache</title><link>https://medium.com/@edouard.oger/rust-caching-on-circleci-using-sccache-c996344f0115</link><description><![CDATA[If you are working in a team that’s writing Rust code and your crates have a good amount of dependencies, you have probably noticed that the Rust compilation phase takes a non-trivial amount of time in comparison to actually running your tests: it is indeed one of the top recurring complains that gets reported to the language team.

In a CI environment, it gets worse as the testing container starts building pretty much from scratch and everything gets recompiled. One way to alleviate that problem is to cache Rust compiled intermediate objects]]></description><guid isPermaLink="false">350dfd1b-e2c5-4a2b-9b2d-015d933e7a78</guid><pubDate>Fri,  3 May 2019 21:42:28 +0000</pubDate><dc:creator>Edouard Oger</dc:creator></item><item><title>Building Simple APIs with Hyper and Usher</title><link>https://whitfin.io/building-simple-apis-with-hyper-and-usher/</link><description><![CDATA[When writing a web service, I often lean towards using tools that are as minimal as possible. One pretty obvious reason for this is the avoidance of dependencies you either don't want or don't need in your project. Whilst I'm not someone who goes out of their way to avoid dependencies, this is a pain point particularly in Rust because of the cost of building them repeatedly rather than shipping extra interpreted files around (especially if you use "pure" build environments).]]></description><guid isPermaLink="false">728cc414-7e29-41ce-86af-0181095c3ec6</guid><pubDate>Fri,  3 May 2019 16:56:26 +0000</pubDate><dc:creator>Isaac Whitfield</dc:creator></item><item><title>Learning Rust while solving Advent of Code puzzles (a post mortem)</title><link>https://andrzej.pragacz.pl/blog/2019/05/learning-rust-while-solving-advent-of-code/</link><description><![CDATA[I wanted to learn Rust for some time, but wasn't motivated enough. Finally, there was an opportunity: Every year in December, there is a coding challenge called Advent of Code. So I decided I will use edition 2018 as a motivator to learn new programming language.]]></description><guid isPermaLink="false">8914cc92-515c-4902-ae43-b247924a0191</guid><pubDate>Fri,  3 May 2019 00:00:00 +0000</pubDate><dc:creator>Andrzej Pragacz</dc:creator></item><item><title>Compile-time coprocessor codegen, with Rust macros</title><link>https://guiand.xyz/blog-posts/macro-assembly-codegen.html</link><description><![CDATA[Motivation: The Nintendo 3DS uses an ARM standard peripheral, the CoreLink DMA engine, for copying memory among DRAM and memory-mapped peripherals.

This DMA engine, unlike most other IO devices on the 3DS, actually has its own instruction set where the CPU merely uploads a stream of instructions for the peripheral to execute (other examples of this, on the 3DS, are the DSP audio processor and the PICA graphics chip).

I’d like to compile and run DMA instructions in Rust, in a hopefully ergonomic manner, without needing to use any dynamic memory allocation. This imposes a particular constraint that I need to know the number of instruction bytes at compile time so I can use an appropriately-sized array.]]></description><guid isPermaLink="false">433737c5-300e-4095-82c3-2ca05e51b029</guid><pubDate>Fri,  3 May 2019 00:00:00 +0000</pubDate><dc:creator>Gui Andrade</dc:creator></item><item><title>Rust parallelism for non-C/C++ developers</title><link>https://medium.com/nearprotocol/rust-parallelism-for-non-c-c-developers-ec23f48b7e56</link><description><![CDATA[Majority of the people coming to Rust have C/C++ background which allows them to easily transition into Rust parallelism since it is so similar. However, for many people coming from other languages, it is a challenge. In this post, we will walk through the standard Rust parallelism tools as well as the motivation behind them. This will require a hardware deep dive at the beginning, followed by an explanation of the low-level tools, like atomics, and ending with an explanation of high-level tools like Mutex. Finally, we will explain how Rust guarantees safety in multi-threaded applications.]]></description><guid isPermaLink="false">329ef1a1-d5e3-49df-87e6-b4f40038d4d8</guid><pubDate>Thu,  2 May 2019 21:32:53 +0000</pubDate><dc:creator>Maksym Zavershynskyi</dc:creator></item><item><title>Risp (Lisp (in (Rust)))</title><link>https://m.stopa.io/risp-lisp-in-rust-90a0dad5b116</link><description><![CDATA[Many years ago, Peter Norvig wrote a beautiful article about creating a lisp interpreter in Python. It’s the most fun tutorial I’ve seen, not just because it teaches you about my favorite language family (Lisp), but because it cuts through to the essence of interpreters, is fun to follow and quick to finish.

Recently, I had some time and wanted to learn Rust. It’s a beautiful systems language, and I’ve seen some great work come out from those who adopt it. I thought, what better way to learn Rust, than to create a lisp interpreter in it?

Hence, Risp — a lisp in rust — was born. In this essay you and I will follow along with Norvig’s Lispy, but instead of Python, we’ll do it in Rust 🙂.]]></description><guid isPermaLink="false">4ce6618d-d773-4260-85c6-639aaf6ec7fc</guid><pubDate>Thu,  2 May 2019 17:44:37 +0000</pubDate><dc:creator>Stepan Parunashvili</dc:creator></item><item><title>How XV uses Panics</title><link>https://medium.com/@chrisvest/how-xv-uses-panics-ba22bd6152a5</link><description><![CDATA[XV is a terminal hex viewer that I am working on. It is the first “real” Rust project that I am working on, coming from a Java background.

Java has exceptions. Both checked exceptions, identified by having the Exception class as a parent class, and unchecked exceptions, which have RuntimeException as a parent class.

Rust does not have exceptions. Rust has panics, which, depending on build-time configurations, are either catch-able when they unwind the stack, or only produce a backtrace, or just immediately aborts the process. This is controlled by the “panic” setting in the “profile” sections of your Cargo.toml file.]]></description><guid isPermaLink="false">0bc705c5-726c-4967-84cc-264f7a6338df</guid><pubDate>Thu,  2 May 2019 16:26:24 +0000</pubDate><dc:creator>Chris Vest</dc:creator></item><item><title>✩ The RustBridge Roadmap for 2019</title><link>https://marisa.cloud/phame/live/1/post/1/the_rustbridge_roadmap_for_2019/</link><description><![CDATA[This is less a specific roadmap and more of a rough braindump of where I think the project currently stands and where I would personally like it to head in 2019 and beyond. With that, let's get started: The main thing I would like to focus on this year is clearing community debt. I don't actually know what you would call this, but it's sort of like technical debt, just manifested within communities.]]></description><guid isPermaLink="false">de6a9110-16fb-47df-a80d-f63af3033589</guid><pubDate>Thu,  2 May 2019 10:19:00 +0000</pubDate><dc:creator>olivia</dc:creator></item><item><title>gptman: A CLI tool and library for managing GUID partition tables</title><link>https://crates.io/crates/gptman</link><description><![CDATA[A CLI tool for Linux that allows you to copy a partition from one disk to another and more. A library that allows managing GUID partition tables. Features include: Read/Write GPT from 512 and 4096 bytes sector size disks, Create a new GPT on a disk, Insert/delete a partition in the table, Align partitions automatically, Resize a partition, Copy/clone a partition from one disk and insert it to another, Change partition type, Fix partitions order, Change disk GUID, Change partition name, Change partition GUID, Toggle legacy BIOS bootable, Toggle no block IO protocol, Toggle required partition flag, Toggle attributes, Customize columns to print, Print raw data of disklabel, Swap partition indexes, Randomize disk's GUID and all partition's GUID, Copy/clone all partitions from one disk and insert it to another.]]></description><guid isPermaLink="false">4b134136-1041-4976-ba52-7e64e767ea89</guid><pubDate>Thu,  2 May 2019 01:33:00 +0000</pubDate><dc:creator>Cecile Tonglet</dc:creator></item><item><title>Explained: Futures in Rust for Web Development</title><link>https://dev.to/gruberb/explained-rust-futures-for-web-development-a10</link><description><![CDATA[If you are coming from NodeJS, Futures in Rust don't make much sense. In NodeJS, everything happens asynchronously. Therefore for you to be able to say "Hey, I really need to wait for the answer for this GET HTTP call", you are putting.then() on a Promise, so you can make sure you just execute the code inside the .then() when the HTTP call is finished.

In Rust, everything is blocking and synchronous by default, so you might ask yourself: "Why bothering with the complexity, that's exactly what I wanted in the first place!"]]></description><guid isPermaLink="false">9152c867-9b24-49d0-ac2c-d85775162eb4</guid><pubDate>Thu,  2 May 2019 00:00:00 +0000</pubDate><dc:creator>Bastian Gruber</dc:creator></item><item><title>A Guide to Rust Graphics Libraries in 2019</title><link>https://wiki.alopex.li/AGuideToRustGraphicsLibraries2019</link><description><![CDATA[People on the gamedev channel of the Unofficial Rust Discord were talking about graphics API’s and what goes where and what does what, people were contradicting and correcting each other, the rain of acronyms was falling hard and fast, and it was all getting a bit muddled. So I’m here to attempt to set the record straight. This is intended to provide context for people who want to get into writing graphics stuff (video games, animations, cool visualizations, etc) in Rust and don’t know where to start.]]></description><guid isPermaLink="false">55cb403b-5cda-4f80-8708-f55a3dc66e95</guid><pubDate>Thu,  2 May 2019 00:00:00 +0000</pubDate><dc:creator>Simon Heath</dc:creator></item><item><title>Cargo in 2019</title><link>https://www.ncameron.org/blog/cargo-in-2019/</link><description><![CDATA[I recently published a post detailing a vision for the next few years (hah! Not so recently now, this took a lot longer than expected). Here I'll get into more detail about 2019.]]></description><guid isPermaLink="false">ae1f3c27-6a45-4b49-ac3c-e081adfe52c9</guid><pubDate>Wed,  1 May 2019 22:37:35 +0000</pubDate><dc:creator>Nick Cameron</dc:creator></item><item><title>Extending Python with Rust</title><link>https://medium.com/@p_chhetri/extending-python-with-rust-84e9299d34c1</link><description><![CDATA[Python is a great programming language but sometimes it can be a bit of slowcoach when it comes to performing certain tasks. That’s why developers have been building C/C++ extensions and integrating them with Python to speed up the performance. However, writing these extensions is a bit difficult because these low-level languages are not type-safe, so doesn’t guarantee a defined behavior. This tends to introduce bugs with respect to memory management. Rust ensures memory safety and hence can easily prevent these kinds of bugs.]]></description><guid isPermaLink="false">f759c500-da13-4765-81f1-dd59918b09d1</guid><pubDate>Wed,  1 May 2019 17:37:44 +0000</pubDate><dc:creator>Pradeep Chhetri</dc:creator></item><item><title>World&apos;s First Private Cargo Registry</title><link>https://blog.cloudsmith.io/2019/05/01/worlds-first-private-cargo-registry/</link><description><![CDATA[If you're interested in the possibilities that hosting your own private or internal crates brings, then this is incredibly good news for you: Cloudsmith are proud to provide the World's first commercially available public and private Cargo registry hosting, with ultra-fast and secure delivery of your Rust packages, alongside all of the usual Enterprise-grade features that we provide.]]></description><guid isPermaLink="false">89a6ce72-79b9-477d-a5e5-bd1e6407c3f5</guid><pubDate>Wed,  1 May 2019 12:06:47 +0000</pubDate><dc:creator>Patrick Carey</dc:creator></item><item><title>Hawk: Image Recognition Application using Rust and AWS Services</title><link>https://blog.knoldus.com/hawk-image-recognition-project-using-rust-and-aws-services/</link><description><![CDATA[Rust is one of the newest kid on the block in the modern programming languages. We tried to take advantage of its great features by using it in an Image Recognition blueprint project. This project can be traded with any existing security system deployed at any organization. Hawk uses AWS services integrated with Rust.]]></description><guid isPermaLink="false">dd64813c-9380-4cd5-b689-ae31cd1c0405</guid><pubDate>Wed,  1 May 2019 11:14:44 +0000</pubDate><dc:creator>muditchhabra6125</dc:creator></item><item><title>Rust: How to build a Docker image with private Cargo dependencies</title><link>https://medium.com/@c_ameron/rust-how-to-build-a-docker-image-with-private-cargo-dependencies-ab91c25c4301</link><description><![CDATA[In this article, I’m going to show you how to fetch private Cargo dependencies and source them when building a Docker image. This solves a key issue with Docker of not copying over SSH keys when building an image.]]></description><guid isPermaLink="false">bd254733-37d6-4ef1-959d-67ca2ccfc2ca</guid><pubDate>Wed,  1 May 2019 04:08:50 +0000</pubDate><dc:creator>Cameron</dc:creator></item><item><title>Using Wasmer for Plugins Part 4</title><link>https://wiredforge.com/blog/wasmer-plugin-pt-4/index.html</link><description><![CDATA[In the last three posts of this series we covered all of the things we would need to use Wasmer as the base for a plugin system. In part one we went over the basics of passing simple data in and out of a web assembly module, in part two we dug deeper into how you might do the same with more complicated data. In the last part we eased the experience of plugin developers by encapsulating all of our work into a library that exports a procedural macro. In this post we are going to explore what it would take to extend an existing plugin system to allow for wasm plugins.]]></description><guid isPermaLink="false">16c5eef8-5844-4408-8ab5-42319757ecef</guid><pubDate>Wed,  1 May 2019 00:00:00 +0000</pubDate><dc:creator>Robert Masen</dc:creator></item><item><title>Rust for Frontend Developers: Modules</title><link>https://www.kennethlarsen.org/rust-for-frontend-developers-modules/</link><description><![CDATA[Not that long ago I decided to start learning Rust. While it has a lot of useful resources online and a very friendly community there's still things that are weird to me. That's because Rust is a very different mental model than the frontend mental model I'm used to.

That means that things that are obvious to a lot of people are not obvious to me. So I'll try to document some of these things from the perspective of a frontend developer. This time on using modules.]]></description><guid isPermaLink="false">7ee0306d-50cc-4b2a-8573-ff0c59c02b3f</guid><pubDate>Tue, 30 Apr 2019 09:57:24 +0000</pubDate><dc:creator>Kenneth Larsen</dc:creator></item><item><title>RustPlayground: Quickly test Rust code on macOS.</title><link>https://github.com/cmyr/RustPlayground</link><description><![CDATA[Rust Playground for MacOS is a standalone native mac application that allows quickly editing and testing rust snippets.]]></description><guid isPermaLink="false">10ce619a-7183-49cf-91c8-99e0f085a272</guid><pubDate>Tue, 30 Apr 2019 03:59:00 +0000</pubDate><dc:creator>colin rofls</dc:creator></item><item><title>Making Sandspiel</title><link>https://maxbittker.com/making-sandspiel</link><description><![CDATA[Sandspiel is a falling sand game I built in late 2018. I really enjoyed writing this game, and wanted to put into writing some of my goals, design decisions, and learnings from that process.]]></description><guid isPermaLink="false">63ae6a45-4e07-49c9-914d-b9be320cf7a9</guid><pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Max Bittker</dc:creator></item><item><title>Stacked Borrows 2</title><link>https://www.ralfj.de/blog/2019/04/30/stacked-borrows-2.html</link><description><![CDATA[Recently, I have significantly updated Stacked Borrows in order to fix some issues with the handling of shared references that were uncovered in the previous version. In this post, I will describe what the new version looks like and how it differs from Stacked Borrows 1. I assume some familiarity with the prior version and will not explain everything from scratch.]]></description><guid isPermaLink="false">f2a55dcd-b163-42ac-8660-311e1cc384d0</guid><pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Ralf Jung</dc:creator></item><item><title>My Key Learnings after 30,000 LOC in Rust</title><link>https://medium.com/@jondot/my-key-learnings-after-30-000-loc-in-rust-a553e6403c19</link><description><![CDATA[For me, Rust takes a stroll over the memory lane above and picks and drives home the best experiences from all those languages — which is a]]></description><guid isPermaLink="false">094e167c-f023-449e-9976-247d314fd269</guid><pubDate>Mon, 29 Apr 2019 17:57:26 +0000</pubDate><dc:creator>Dotan Nahum</dc:creator></item><item><title>Rolling your own Router with Smithy v0.0.3</title><link>https://medium.com/@robert.balicki_2494/rolling-your-own-router-with-smithy-v0-0-3-2de17cdbb49</link><description><![CDATA[Build a WebAssembly application with a hash router using Smithy.]]></description><guid isPermaLink="false">4cc7ac88-4ef9-40fd-b235-bee8151e059d</guid><pubDate>Mon, 29 Apr 2019 15:25:25 +0000</pubDate><dc:creator>Robert Balicki</dc:creator></item><item><title>A close touch with Rust community</title><link>https://medium.com/@Aimeedeer/a-close-touch-with-rust-community-4a8507b756d9</link><description><![CDATA[About RustCon Asia 2019：There was definitely a little bit of everything for everyone attended. It was heartwarming to see people enjoying their experience from talks and at the same time meeting new and old friends. The portion of the attendees was just beginning with Rust benefited from talks such as Olivia’s RustBridge for beginners, Nick’s thinking in Rust and Alex’s How to learn Rust efficiently.]]></description><guid isPermaLink="false">00aea687-4bba-48e5-8568-000ef44a419e</guid><pubDate>Mon, 29 Apr 2019 11:49:07 +0000</pubDate><dc:creator>Aimee Z</dc:creator></item><item><title>Kubernetes operators in Rust</title><link>https://clux.github.io/probes/post/2019-04-29-rust-on-kubernetes/</link><description><![CDATA[Writing light weight cloud services without Go.]]></description><guid isPermaLink="false">b4cd814f-2f84-4e4d-b3a1-bba98d6a24f2</guid><pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate><dc:creator>clux</dc:creator></item></channel></rss>