<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - All Posts</title><link>https://readrust.net/</link><description>All Posts posts on Read Rust</description><item><title>From Rust to beyond: The C galaxy</title><link>https://mnt.io/2018/09/11/from-rust-to-beyond-the-c-galaxy/</link><description><![CDATA[This blog post is part of a series explaining how to send Rust beyond earth, into many different galaxies. The galaxy we will explore today is the C galaxy. This post will explain what C is (shortly), how to compile any Rust program in C in theory, and how to do that practically with our Rust parser from the Rust side and the C side. We will also see how to test such a binding.]]></description><guid isPermaLink="false">35458bae-bc62-40d7-ac3d-2dcd8ab1f469</guid><pubDate>Tue, 11 Sep 2018 07:49:07 +0000</pubDate><dc:creator>Ivan Enderlin</dc:creator></item><item><title>Unit Type Params</title><link>https://leshow.github.io/post/unit_type_pattern/</link><description><![CDATA[I always enjoy reading blogs about patterns or tricks people have picked up writing Rust. I’ve seen this a few times but not read about it anywhere.

I’ve been doing class assignments from Operating Systems cs140e. I highly recommend this class if you know a bit of Rust and would like to try writing some lower level code. The class involves building bits of an OS for the raspberry pi.]]></description><guid isPermaLink="false">f712f29b-efed-4c75-a4a0-8523fa0b6d52</guid><pubDate>Mon, 10 Sep 2018 12:28:03 -0400</pubDate><dc:creator>Evan Cameron</dc:creator></item><item><title>GStreamer Rust bindings 0.12 and GStreamer Plugin 0.3 release</title><link>https://coaxion.net/blog/2018/09/gstreamer-rust-bindings-0-12-and-gstreamer-plugin-0-3-release/</link><description><![CDATA[After almost 6 months, a new release of the GStreamer Rust bindings and the GStreamer plugin writing infrastructure for Rust is out. As usual this was coinciding with the release of all the gtk-rs crates to make use of all the new features they contain.]]></description><guid isPermaLink="false">956dab4d-a04e-4278-bb20-906f4eac7a82</guid><pubDate>Mon, 10 Sep 2018 11:41:59 +0000</pubDate><dc:creator>Sebastian Dröge</dc:creator></item><item><title>Parallelizing PNG: Choosing Rust for mtpng</title><link>https://brionv.com/log/2018/09/09/parallelizing-png-part-5-choosing-rust-for-mtpng/</link><description><![CDATA[In my last post I wrapped up the patches to improve perceived performance of screenshots on the Linux GNOME desktop. With that done, why not implement my crazy plan for parallel PNG encoding to speed the actual save time?]]></description><guid isPermaLink="false">d8bbfe78-53bb-49df-9d7b-092d306492c0</guid><pubDate>Sun,  9 Sep 2018 23:32:41 +0000</pubDate><dc:creator>Brion Vibber</dc:creator></item><item><title>Sonnerie: A simple timeseries database</title><link>https://github.com/njaard/sonnerie</link><description><![CDATA[Sonnerie is a time-series database. Map a timestamp to a floating-point value. Store multiple of these series in a single database. Insert tens of millions of samples in minutes, on rotational media.]]></description><guid isPermaLink="false">9572581f-4d30-4abb-9aa8-8f7842b37117</guid><pubDate>Sat,  8 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Kalle Samuels</dc:creator></item><item><title>The Common Rust Traits</title><link>https://stevedonovan.github.io/rustifications/2018/09/08/common-rust-traits.html</link><description><![CDATA[In Rust, data types - primitives, structs, enums and any other ‘aggregate’ types like tuples and arrays - are dumb. They may have methods but that is just a convenience (they are just functions). Types have no relationship with each other.

Traits are the abstract mechanism for adding functionality to types and establishing relationships between them.]]></description><guid isPermaLink="false">83d6c5ed-e847-4807-8c6c-40e97f66b9d5</guid><pubDate>Sat,  8 Sep 2018 00:00:00 +0200</pubDate><dc:creator>Steve Donovan</dc:creator></item><item><title>Tower Web — Expanding the middleware stack</title><link>https://medium.com/@carllerche/tower-web-expanding-the-middleware-stack-f9bf55bfa109</link><description><![CDATA[tower-web version 0.2.2 has been released. It comes with a number of new features, which I will talk about in this post. Primarily, the middleware story is starting to come together. I will be expanding some on how middleware fits into Tower and web in general.]]></description><guid isPermaLink="false">e7fbc029-a108-4209-bbf4-9e152701d9a6</guid><pubDate>Fri,  7 Sep 2018 14:21:28 +0000</pubDate><dc:creator>Carl Lerche</dc:creator></item><item><title>Rust Faster SIMD edition</title><link>https://llogiq.github.io/2018/09/06/fast.html</link><description><![CDATA[It’s been a while since I’ve been playing the benchmarksgame with Rust. But I recently found an interesting crate called packed_simd which had a SIMD-ified version of some benchmarks, so as Rust stable now has stdsimd, we should be able to speed up our benchmarks quite a bit.]]></description><guid isPermaLink="false">bf9e8fe4-c788-47c9-9a8a-27ee3fa0b20f</guid><pubDate>Thu,  6 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>Adventures in Rust: Futures and Tokio</title><link>http://bryangilbert.com/post/code/rust/adventures-futures-tokio-rust/</link><description><![CDATA[One of my newer hobbies recently has been learning and toying around with Rust. Recently, as part of this learning process, I've started implementing an IP address lookup service as a small side project. During the course of implementing this project I ran into what turned out to be a bit of a hurdle to tackle, specifically performing reverse dns resolution asynchronously.

My hope is that through exploring this problem, I can aid others in understanding these concepts which can be initially difficult grasp. This is especially so as the behavior and function of Futures vary wildly between various languages and runtimes.]]></description><guid isPermaLink="false">7b94766b-f2c3-42f6-b215-7b63f07a4e95</guid><pubDate>Tue,  4 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Bryan Gilbert</dc:creator></item><item><title>Rust at Datalust</title><link>https://blog.getseq.net/rust-at-datalust/</link><description><![CDATA[At Datalust we build a log server called Seq. It's really a database, written in C#, with its own SQL-based query language, that's specifically designed for storing and querying structured log data. In the past, Seq has managed log event storage through ESENT, which is a storage technology baked into Windows. For our cross-platform Seq 5 release we’ve built a storage engine called Flare in the Rust programming language to replace our usage of ESENT.]]></description><guid isPermaLink="false">a92cab79-16fc-46b9-9bdb-0eb21518db8c</guid><pubDate>Mon,  3 Sep 2018 22:18:30 +0000</pubDate><dc:creator>Ashley Mannix</dc:creator></item><item><title>Announcing Spirit</title><link>https://vorner.github.io/2018/09/03/Announcing-Spirit.html</link><description><![CDATA[Spirit is a crate that cuts down on boilerplate when creating unix daemons, with support for live configuration reloading.]]></description><guid isPermaLink="false">919b55ea-6ff7-4893-8c6f-1bd17b6cbab2</guid><pubDate>Mon,  3 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Michal &apos;vorner&apos; Vaner</dc:creator></item><item><title>RPCS3 and Dolphin emulators on macOS using gfx-portability</title><link>https://gfx-rs.github.io/2018/09/03/rpcs3-dolphin.html</link><description><![CDATA[After improving functionality and performance of gfx-portability’s Metal backend through benchmarking Dota2, and verifying certain functionality through the Vulkan Conformance Test Suite (CTS), we decided to expand our testing to other projects. We quickly found two projects which matched our criteria: RPCS3 and Dolphin.]]></description><guid isPermaLink="false">6c60dc7f-81f5-4718-9bfa-4c68e7a7d1ab</guid><pubDate>Mon,  3 Sep 2018 00:00:00 +0000</pubDate><dc:creator>gfx-rs</dc:creator></item><item><title>Time difference between L1 cache fetch and memory fetch</title><link>https://nitish.ch/notes/time-difference-between-l1-cache-fetch-and-memory-fetch/</link><description><![CDATA[Aim: Measure how fast a fetch from L1 cache is when compared to a fetch from memory. Instead of writing pure assembly code, we will use Rust's inline assembly feature.]]></description><guid isPermaLink="false">3c7f3466-8495-4684-b0c2-e0b26ca9234c</guid><pubDate>Sun,  2 Sep 2018 22:15:24 +0000</pubDate><dc:creator>Nitish Chinta</dc:creator></item><item><title>Programming Servo: A generic “worker event-loop”</title><link>https://medium.com/programming-servo/programming-servo-a-generic-worker-event-loop-400a6f113a60</link><description><![CDATA[Let’s take a look at how in Rust you can have an algorithm generic over T, where T is further bound by a trait, which itself is generic over one of several parameters.]]></description><guid isPermaLink="false">850319b3-4515-4f9c-b833-67a391d5ab26</guid><pubDate>Sun,  2 Sep 2018 07:03:47 +0000</pubDate><dc:creator>Gregory Terzian</dc:creator></item><item><title>Rust pattern: Iterating an over a Rc&lt;Vec&lt;T&gt;&gt;</title><link>http://smallcultfollowing.com/babysteps/blog/2018/09/02/rust-pattern-iterating-an-over-a-rc-vec-t/</link><description><![CDATA[This post examines a particular, seemingly simple problem: given ownership of a Rc<Vec<u32>>, can we write a function that returns an impl Iterator<Item = u32>? It turns out that this is a bit harder than it might at first appear – and, as we’ll see, for good reason. I’ll dig into what’s going on, how you can fix it, and how we might extend the language in the future to try and get past this challenge.]]></description><guid isPermaLink="false">7610bbc1-58a1-413b-a4a3-dad7877ca1bd</guid><pubDate>Sun,  2 Sep 2018 00:00:00 -0400</pubDate><dc:creator>Niko Matsakis</dc:creator></item><item><title>Rust Factory Without Box (Trait Object)</title><link>https://singpolyma.net/2018/09/rust-factory-without-box-trait-object/</link><description><![CDATA[I’ve been playing around a lot with Rust recently and it’s quickly becoming my second-favourite programming language. One of the things I’ve been playing with is some Object Oriented design concepts as they might apply.]]></description><guid isPermaLink="false">c3d8acef-fe90-4a0c-9fc5-9061f0694581</guid><pubDate>Sat,  1 Sep 2018 17:52:00 +0000</pubDate><dc:creator>Stephen Paul Weber</dc:creator></item><item><title>Using RwLock and CondVars in Rust</title><link>https://tutorialedge.net/rust/using-rwlocks-and-condvars-rust/</link><description><![CDATA[Read many, write exclusive locks – RwLock Consider a situation where you have a resource that must be manipulated only a single thread at a time, but is safe to be queried by many—that is, you have many readers and only one writer.

While you could protect this resource with a mutex, the trouble is that the mutex makes no distinction between its lockers; every thread will be forced to wait, no matter what their intentions.]]></description><guid isPermaLink="false">44aebda5-9403-432d-b94e-d81449a1edbf</guid><pubDate>Sat,  1 Sep 2018 15:09:49 +0100</pubDate><dc:creator>Brian L. Troutwine</dc:creator></item><item><title>Primitives in Rust are Weird (and Cool)</title><link>https://speice.io/2018/09/primitives-in-rust-are-weird.html</link><description><![CDATA[I wrote a really small Rust program a while back because I was curious. I was 100% convinced itcouldn’t possibly run. And to my complete befuddlement, it compiled, ran, and produced a completely sensible output.]]></description><guid isPermaLink="false">deb45294-d269-481c-a767-f4fd7c00cf0f</guid><pubDate>Sat,  1 Sep 2018 00:00:00 -0400</pubDate><dc:creator>Bradlee Speice</dc:creator></item><item><title>GIR support in gnome-class</title><link>http://danigm.net/gnome-class-gir.html</link><description><![CDATA[Recently I've been working again in the rust port of libgepub, libgepub is C code, but in the rust-migration branch almost all the real functionality is done with rust and the GepubDoc class is a GObject wrapper around that code. For this reason I was thinking about to use gnome-class to implement GepubDoc. Gnome-class is a rust lib to write GObject code in rust that's compatible with the C binary API so then you can call this new GObject code written with gnome-class from C. So, libgepub is the excuse to start to implement GIR in gnome-class.]]></description><guid isPermaLink="false">d1f041f8-f77b-404b-a776-5615afef85f4</guid><pubDate>Sat,  1 Sep 2018 00:00:00 +0200</pubDate><dc:creator>danigm</dc:creator></item><item><title>O(1) sum_of_multiples() in Rust</title><link>https://nicholassterling.wordpress.com/2018/08/31/o1-sum_of_multiples-in-rust/</link><description><![CDATA[I had been working mostly in Scala for a while, then took a diversion into Swift and Objective C.  I wanted to learn another language after that, and had all but decided on Clojure.  But Rust kept nagging at me — there was something about it. So I watched some videos, then read the book, and then started the Rust track at Exercism.io.]]></description><guid isPermaLink="false">e989a06c-ac0a-4a49-9591-8867e574c37b</guid><pubDate>Fri, 31 Aug 2018 05:51:05 +0000</pubDate><dc:creator>Nicholas Sterling</dc:creator></item><item><title>Rust: Fail Fast and Loudly</title><link>https://blog.shivoa.net/2018/08/rust-fail-fast-and-loudly.html</link><description><![CDATA[To panic or to return a Result: why libraries in Rust must weigh their options rather than accepting a never-panic mandate.]]></description><guid isPermaLink="false">271f4485-7452-487c-a1ee-4043dac3c60e</guid><pubDate>Fri, 31 Aug 2018 02:58:00 +0100</pubDate><dc:creator>Shivoa Birch</dc:creator></item><item><title>Benchmarking a Rust web application</title><link>https://klausi.github.io/rustnish/2018/08/31/benchmarking-a-rust-web-application.html</link><description><![CDATA[I set out out my goal 9 for Rustnish: Write benchmark code that compares runtime performance of Rustnish against Varnish. Use cargo bench to execute the benchmarks.

The basic idea of a performance test here is to send many HTTP requests to the web service (the reverse proxy in this case) and measure how fast the responses arrive back. Comparing the results from Rustnish and Varnish should give us an idea if our performance expectations are holding up.]]></description><guid isPermaLink="false">715ee4bf-9164-4c58-aa4f-93f088859281</guid><pubDate>Fri, 31 Aug 2018 00:00:00 +0000</pubDate><dc:creator>klausi</dc:creator></item><item><title>Introduction to asynchronous programming in Rust</title><link>https://github.com/nrc/apr-intro</link><description><![CDATA[An alternate introdcution to the APR book. This book aims to be a comprehensive, up-to-date guide on the async story in Rust, appropriate for beginners and old hands alike. We assume you already know Rust fairly well, including having done some multi-threaded programming. If any Rust terms in this guide are unfamiliar, you should check out the Rust book.]]></description><guid isPermaLink="false">09fcee2d-1825-46a0-952f-7035c41b2b32</guid><pubDate>Thu, 30 Aug 2018 10:12:00 +0000</pubDate><dc:creator>Nick Cameron</dc:creator></item><item><title>Debugging an Rc&lt;T&gt; reference leak in Rust</title><link>https://people.gnome.org/~federico/blog/debugging-reference-leak-in-rust.html</link><description><![CDATA[The bug that caused two brown-paper-bag releases in librsvg — because it was leaking all the SVG nodes — has been interesting. Memory leaks in Rust? Isn't it supposed to prevent that? Well, yeah, but the leaks were caused by the C side of things, and by unsafe code in Rust, which does not prevent leaks.]]></description><guid isPermaLink="false">09bd9199-be43-439f-ad36-d22904a73fb1</guid><pubDate>Wed, 29 Aug 2018 16:47:13 -0500</pubDate><dc:creator>Federico Mena Quintero</dc:creator></item><item><title>Feasible functors in Rust</title><link>https://varkor.github.io/blog/2018/08/28/feasible-functors-in-rust.html</link><description><![CDATA[withoutboats, one of the Rust language design team, recently posted a thread on the infeasibility of monads as a useful abstraction technique in Rust, as a response to the persistence of some (usually from outside the Rust community) in claiming that “Rust is doing things incorrectly” by developing specific solutions to problems, rather than using a general category theoretic framework for everything. The points demonstrate real difficulties with attempting to use a general framework for these problems and to me serves perfectly as a “the ball’s in your court now” to anyone claiming Rust is ignoring theory and coming up with unnecessary solutions to solved problems: if you think Rust could use monadic abstractions, you have to be able to address these counterarguments.]]></description><guid isPermaLink="false">5d84ad61-702d-400b-ac40-6325904e031d</guid><pubDate>Tue, 28 Aug 2018 12:20:10 +0000</pubDate><dc:creator>varkor</dc:creator></item><item><title>Programming Servo: the makings of a task-queue</title><link>https://medium.com/programming-servo/programming-servo-the-makings-of-a-task-queue-b4138cd246ca</link><description><![CDATA[In Servo, task-sources are implemented via a channel, whose sender is cloned for each specific task-source, and where tasks are messages sent on the channel and containing a closure representing the actual task.]]></description><guid isPermaLink="false">ed925df2-a1c7-4125-a27c-7cbda8dbac71</guid><pubDate>Tue, 28 Aug 2018 10:11:58 +0000</pubDate><dc:creator>Gregory Terzian</dc:creator></item><item><title>From Rust to beyond: The ASM.js galaxy</title><link>https://mnt.io/2018/08/28/from-rust-to-beyond-the-asm-js-galaxy/</link><description><![CDATA[The second galaxy that our Rust parser will explore is the ASM.js galaxy. This post will explain what ASM.js is, how to compile the parser into ASM.js, and how to use the ASM.js module with Javascript in a browser. The goal is to use ASM.js as a fallback to WebAssembly when it is not available. I highly recommend to read the previous episode about WebAssembly since they have a lot in common.]]></description><guid isPermaLink="false">10c577b9-fdf3-4aa3-80dd-78c6e4abb8c7</guid><pubDate>Tue, 28 Aug 2018 07:39:03 +0000</pubDate><dc:creator>Ivan Enderlin</dc:creator></item><item><title>Serde Deserialize This or That into u64</title><link>https://noyez.gitlab.io/post/2018-08-28-serilize-this-or-that-into-u64/</link><description><![CDATA[Recently I ran into a bug in my code; hey, it happens. The bug was that I had a struct which could serialize into json, but could not deserialize from its own json. The struct holds a value for a mac address, which is 48-bit integer (that i store in a u64), but it is serialized using the network interface name. For example on my mac, i have a network interface named en1 with the mac address of 20:c9:d0:b0:a4:71.]]></description><guid isPermaLink="false">a2e99609-1298-4f79-b2f3-0cce908a701f</guid><pubDate>Tue, 28 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Noyez</dc:creator></item><item><title>Oxidizing sourmash: WebAssembly</title><link>https://blog.luizirber.org/2018/08/27/sourmash-wasm/</link><description><![CDATA[In "Oxidizing sourmash: Python and FFI" I described my road to learn Rust, but something that I omitted was that around the same time the WebAssembly support in Rust started to look better and better and was a huge influence in my decision to learn Rust. Reimplementing the sourmash C++ extension in Rust and use the same codebase in the browser sounded very attractive, and now that it was working I started looking into how to use the WebAssembly target in Rust.]]></description><guid isPermaLink="false">a7804e3a-d98b-4135-9d38-e75aeb294961</guid><pubDate>Mon, 27 Aug 2018 15:30:00 -0300</pubDate><dc:creator>Luiz Irber</dc:creator></item><item><title>Thoughts on Rust from a PHP developer!</title><link>https://www.smashing-bugs.tk/software-development/rust/2018/08/27/on-rust-from-a-php-developer.html</link><description><![CDATA[I first starting learning Rust about 6 months ago, I was looking for a new language to learn when I came across it. At first I thought Rust was only meant to be a low level, systems programming language, but the more I learned, the more I realised the potential it has for high level programming and web applications. Also, along the way I learned many ways in which Rust prevents many of the typical bugs often found in applications written in other programming languages.]]></description><guid isPermaLink="false">90241d58-f6a1-4df5-9c3f-15c94998c6df</guid><pubDate>Mon, 27 Aug 2018 14:41:11 +0000</pubDate><dc:creator>Diego Cabrejas</dc:creator></item><item><title>Experimental async / await support for Tokio</title><link>https://tokio.rs/blog/2018-08-async-await/</link><description><![CDATA[In case you haven’t heard, async / await is a big new feature that is being worked on for Rust. It aims to make asynchronous programming easy (well, at least a little bit easier than it is today). The work has been on going for a while and is already usable today on the Rust nightly channel.

I’m happy to announce that Tokio now has experimental async / await support! Let’s dig in a bit.]]></description><guid isPermaLink="false">7a251e22-3430-4226-85e0-a94e73b3e785</guid><pubDate>Mon, 27 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Carl Lerche</dc:creator></item><item><title>Programming Servo: The Debug Way</title><link>https://medium.com/coding-neutrino-blog/programming-servo-the-debug-way-5db01f09b7f4</link><description><![CDATA[Servo is a huge project. I have counted the lines of code for you. There are almost a hundred thousand lines of code in the Servo project. To develop such a big project, knowing how to debug in a right way is very important, since you would like to find the bottleneck in a fast and efficient way.

In this article, I will teach you some tips to use GDB developing and debugging your Rust code in the Servo project.]]></description><guid isPermaLink="false">fcadb47a-753e-44c9-830e-0e2cda34b365</guid><pubDate>Sun, 26 Aug 2018 14:55:42 +0000</pubDate><dc:creator>Liu An Chi</dc:creator></item><item><title>Programmatically generated artwork</title><link>https://isaacg1.github.io/posts/programmatically-generated-artwork/</link><description><![CDATA[I have made four rust programs for programmatically generating artwork in different styles. Here is a sample in each style, along with an explanation of the algorithms.]]></description><guid isPermaLink="false">1b68ce01-24d8-45a9-88df-be24c465141b</guid><pubDate>Sun, 26 Aug 2018 02:29:13 -0400</pubDate><dc:creator>Isaac Grosof</dc:creator></item><item><title>Travel The World Using Partially-Mapped (PMX) Crossover in Rust And JavaScript</title><link>https://blog.x5ff.xyz/blog/ai-rust-javascript-pmx/</link><description><![CDATA[Implementing a genetic algorithm in JavaScript and Rust.]]></description><guid isPermaLink="false">f7523f30-31c4-4699-9071-ec6f7ccd1049</guid><pubDate>Sun, 26 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Claus</dc:creator></item><item><title>Comparing code counters</title><link>https://github.com/Aaronepower/tokei/blob/master/COMPARISON.md</link><description><![CDATA[This document is a compilation of various benchmarks and comparisons between code counters, namely tokei, cloc, scc, and loc. This document seeks to compare performance, and accuracy of the code counters. polyglot is not currently included as it was unabled to be installed on the machine at the time of writing.]]></description><guid isPermaLink="false">f9bf5234-b8f7-4a0d-9908-e1cf35c6ba8b</guid><pubDate>Sat, 25 Aug 2018 21:00:24 +0000</pubDate><dc:creator>Aaron Power</dc:creator></item><item><title>Password Generation in Ruby and Rust</title><link>https://hur.st/blog/2018/08-25-password-generation-in-ruby-and-rust/</link><description><![CDATA[Writing the same password generator in two different languages to learn more Rust.]]></description><guid isPermaLink="false">8b60e040-4635-4a84-b8a6-3e0f2933f066</guid><pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Thomas Hurst</dc:creator></item><item><title>Easy proc_macro_derive&apos;s with synstructure</title><link>https://llogiq.github.io/2018/08/25/synstruct.html</link><description><![CDATA[Recently, I found myself in the market for some quickcheck. However, there were custom types, which had no Arbitrary implementation. Wondering if someone had already written a procedural macro to derive it, I found panicbit’s quickcheck_derive crate. However, to my dismay, it was severely limited in that it could only derive Arbitrary for structs.]]></description><guid isPermaLink="false">13973f76-d793-4df8-9529-bca5f5f84428</guid><pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>IntelliJ Rust features. Entry one: Macros</title><link>https://blog.jetbrains.com/clion/2018/08/intellij-rust-features-entry-one-macros/</link><description><![CDATA[In this series of short blog posts, we are going to take a closer look at the key Rust related features present in JetBrains IDEs through our corresponding plugin.]]></description><guid isPermaLink="false">e2e12b4d-817f-4c1b-997f-285d9eec6a74</guid><pubDate>Fri, 24 Aug 2018 16:11:11 +0000</pubDate><dc:creator>Kirill Malich</dc:creator></item><item><title>Calling C# natively from Rust</title><link>https://medium.com/@chyyran/calling-c-natively-from-rust-1f92c506289d</link><description><![CDATA[A couple of months ago, I created my first Rust program; a music manager called seiri. seiri is actually a rewrite of a previous, much buggier program that I used to organize my music that was written in C#. The tag library of choice was of course, taglib-sharp, a port of the C++ library TagLib to the .NET ecosystem. Since Rust unfortunately doesn’t have its own native port of TagLib, and any C bindings available didn’t expose the picture API, the most obvious thing to do was to use the C# library with Rust somehow, right?]]></description><guid isPermaLink="false">4a0db6c9-2c0d-4455-b353-474e4f59c87a</guid><pubDate>Fri, 24 Aug 2018 01:07:46 +0000</pubDate><dc:creator>Ronny Chan</dc:creator></item><item><title>Why an Interior Mutable abstraction is needed in the Rust core library</title><link>http://blog.kjeka.com/rust/programming/tmcl/2018/08/24/interior-mut/</link><description><![CDATA[Interior mutabiliby is a concept known to anyone who have programmed in Rust for a while. And even though Rust's stdlib have several wrapper-types allowing interior mutability there is no trait unifying these types. Motivated by writing libraries suitable for no_std development that are fully safe to use with threads, this blog post will attempt to fill in one gap in the Rust stdlib.]]></description><guid isPermaLink="false">b0c75f8a-24c3-449e-bc2d-97638d193d3e</guid><pubDate>Fri, 24 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Kjetil Kjeka</dc:creator></item><item><title>Oxidizing sourmash: Python and FFI</title><link>https://blog.luizirber.org/2018/08/23/sourmash-rust/</link><description><![CDATA[Last December I decided to give Rust a run: I spent some time porting the C++ bits of sourmash to Rust. The main advantage here is that it's a problem I know well, so I know what the code is supposed to do and can focus on figuring out syntax and the mental model for the language. I started digging into the symbolic codebase and understanding what they did, and tried to mirror or improve it for my use cases.]]></description><guid isPermaLink="false">4857abad-3757-40b8-a899-93442e4982e9</guid><pubDate>Thu, 23 Aug 2018 17:00:00 -0300</pubDate><dc:creator>Luiz Irber</dc:creator></item><item><title>Rust, meet q</title><link>https://blog.redsift.com/labs/rust-meet-q/</link><description><![CDATA[We leverage the elegance of kdb+ and the power of Rust to create data applications that can process data at the rate of tens of GB/second on consumer grade hardware.]]></description><guid isPermaLink="false">ba6b3643-c414-4efe-90a4-4ea6fd45ef3d</guid><pubDate>Thu, 23 Aug 2018 13:08:16 +0000</pubDate><dc:creator>Rahul</dc:creator></item><item><title>Introducing windows-acl: working with ACLs in Rust</title><link>https://blog.trailofbits.com/2018/08/23/introducing-windows-acl-working-with-acls-in-rust/</link><description><![CDATA[Access Control Lists (ACLs) are an integral part of the Microsoft Windows security model. In addition to controlling access to secured resources, they are also used in sandboxing, event auditing, and specifying mandatory integrity levels. They are also exceedingly painful to programmatically manipulate, especially in Rust. Today, help has arrived — we released windows-acl, a Rust crate that simplifies the manipulation of access control lists on Windows.]]></description><guid isPermaLink="false">99ecbdf0-983f-42d8-850a-5e0532770f17</guid><pubDate>Thu, 23 Aug 2018 11:50:39 +0000</pubDate><dc:creator>Trail of Bits</dc:creator></item><item><title>More on the RLS and a 1.0 release</title><link>https://www.ncameron.org/blog/more-on-the-rls-and-a-1-0-release/</link><description><![CDATA[In my last post, I announced a release candidate for the RLS 1.0. There has been a lot of feedback (and quite a lot of that was negative on the general idea), so I wanted to expand on what 1.0 means for the RLS, and why I think it is ready. I also want to share some of my vision for the future of the RLS, in particular changes that might warrant a major version release.]]></description><guid isPermaLink="false">49ccf817-c69f-4467-9391-9fccc619e928</guid><pubDate>Thu, 23 Aug 2018 09:10:11 +0000</pubDate><dc:creator>Nick Cameron</dc:creator></item><item><title>Gfx-hal Tutorial part 1: Resizing windows</title><link>https://falseidolfactory.com/2018/08/23/gfx-hal-part-1-resizing-windows.html</link><description><![CDATA[This tutorial builds on the code we wrote in the previous part. You can find the new code here with comments explaining everything that’s changed, and run it to see what the end result will look like. Last time we got a single triangle rendering on screen. This time we’re going to look at what we need to do to allow window resizing to work properly.]]></description><guid isPermaLink="false">72c8ca7f-1f7e-47f5-aebc-f06e63a1b367</guid><pubDate>Thu, 23 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Mistodon</dc:creator></item><item><title>To Make or Not to Make – Using cargo make for Rookeries v0.12.0</title><link>https://dorianpula.ca/2018/08/22/to-make-or-not-to-make-using-cargo-make-for-rookeries-v0-12-0/</link><description><![CDATA[I recently continued with my exploration of Rust through Rookeries (my attempt at a static site generator/backing API server). This time I worked on switching over from using invoke and GNU make to using a nice build system called cargo-make. Overall I am quite happy with the result.]]></description><guid isPermaLink="false">0c187e7b-4693-4f2c-b330-ce51a314c6eb</guid><pubDate>Wed, 22 Aug 2018 23:00:27 +0000</pubDate><dc:creator>Dorian Pula</dc:creator></item><item><title>Live Refreshing Cargo Docs</title><link>https://benjamincongdon.me/blog/2018/08/22/Live-Refreshing-Cargo-Docs/</link><description><![CDATA[rustdoc is a great tool, but as of now there isn’t an official way to have its generated docs refresh as you make edits. Running cargo doc with the --open argument will open the generated docs in browser window. If you make changes to your source code, you’ll need to re-run cargo doc to have the changes reflected in your browser. By chaining together a few other Rust tools, we can pretty easily get the functionality of live-reloading docs.]]></description><guid isPermaLink="false">1332a957-6689-4053-884b-ec31ca39f505</guid><pubDate>Wed, 22 Aug 2018 21:03:28 +0000</pubDate><dc:creator>Benjamin Congdon</dc:creator></item><item><title>From Rust to beyond: The WebAssembly galaxy</title><link>https://mnt.io/2018/08/22/from-rust-to-beyond-the-webassembly-galaxy/</link><description><![CDATA[The first galaxy that our Rust parser will explore is the WebAssembly (WASM) galaxy. This post will explain what WebAssembly is, how to compile the parser into WebAssembly, and how to use the WebAssembly binary with Javascript in a browser and with NodeJS.]]></description><guid isPermaLink="false">b1b8abb7-362a-4004-8b6c-913ca1c85773</guid><pubDate>Wed, 22 Aug 2018 07:46:27 +0000</pubDate><dc:creator>Ivan Enderlin</dc:creator></item><item><title>Two Kinds of Invariants: Safety and Validity</title><link>https://www.ralfj.de/blog/2018/08/22/two-kinds-of-invariants.html</link><description><![CDATA[When talking about the Rust type system in the context of unsafe code, the discussion often revolves around invariants: Properties that must always hold, because the language generally assumes that they do. In fact, an important part of the mission of the Unsafe Code Guidelines strike force is to deepen our understanding of what these invariants are.

However, in my view, there is also more than one invariant, matching the fact that there are (at least) two distinct parties relying on these invariants: The compiler, and (authors of) safely usable code. This came up often enough in recent discussions that I think it is worth writing it down properly once, so I can just link here in the future.]]></description><guid isPermaLink="false">7c167657-c185-479c-afc3-93b0187b8359</guid><pubDate>Wed, 22 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Ralf Jung</dc:creator></item><item><title>Another look at the pinning API</title><link>https://boats.gitlab.io/blog/post/rethinking-pin/</link><description><![CDATA[One thing has always nagged about the API we have right now though: the proliferation of different reference types that it implies. Today, the pin feature adds the PinMut and PinBox types, but in theory there ought to be a “pinned” version of every pointer in the standard library: PinRc and PinArc and so on. This is a very unfortunate consequence, but so far we have not found a good way to make pinning work compositionally - to have a single adapter that could be combined with any pointer.

Last night, a bit of inspiration struck me, and I realized that it is possible to make a compositional Pin type. This isn’t a fundamental change to the pinning model, just an API refactoring, but I’ve put a blocking concern on the proposal to stabilize Pin so that we can consider this possibility.]]></description><guid isPermaLink="false">edfe7063-b893-42db-aa08-61adcaddf56b</guid><pubDate>Wed, 22 Aug 2018 00:00:00 +0000</pubDate><dc:creator>boats</dc:creator></item><item><title>[blog series] From Rust to beyond: Prelude</title><link>https://mnt.io/2018/08/21/from-rust-to-beyond-prelude/</link><description><![CDATA[This series of posts is about those bindings, and explains how to send Rust beyond earth, into many different galaxies. Rust will land in: The WebAssembly galaxy, The ASM.js galaxy, The C galaxy, The PHP galaxy, and The NodeJS galaxy. The ship is currently flying into the Java galaxy, this series may continue if the ship does not crash or has enough resources to survive!]]></description><guid isPermaLink="false">e3b3767b-4228-4432-a525-15d8cbc99f77</guid><pubDate>Tue, 21 Aug 2018 08:46:20 +0000</pubDate><dc:creator>Ivan Enderlin</dc:creator></item><item><title>Reading files quickly in Rust</title><link>https://boyter.org/posts/reading-files-quickly-in-rust/</link><description><![CDATA[With the latest release of 1.27 of Rust (SIMD support) the code counters written in Rust were suddenly a lot faster in Linux. In fact it meant that the fastest one tokei was suddenly faster than my scc for almost all tests. In addition a new project polyglot written in a language I have never heard of ATS popped up which is also now faster than my Go program for any repository when running on a machine with less than 8 cores.]]></description><guid isPermaLink="false">d26e4a2d-a00d-4ab2-95e3-326ded5d1fe0</guid><pubDate>Mon, 20 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Ben Boyter</dc:creator></item><item><title>Journey into rust #2: Compute Shaders</title><link>https://jonathansteyfkens.com/rust/opengl/graphics/compute/shader/2018/08/19/compute-shaders.html</link><description><![CDATA[I realized after my first post of this series that it’s not just a journey into rust but also OpenGL. I’ve used other Graphics API’s before but never actually got my hands dirty into OpenGL. Someone on the rust user forums (they are awesome, go check it out!) suggested using compute shaders instead. At the time I had never used compute shaders for a project so I decided to take some time to refactor the program to use a compute shader. This post is a follow up on that remark and will explore the possibilities of using a rust together with OpenGL to run compute shaders.]]></description><guid isPermaLink="false">5e9a2cd7-e018-41d6-bfeb-a0face2c3f0e</guid><pubDate>Sun, 19 Aug 2018 20:30:00 +0000</pubDate><dc:creator>Jonathan Steyfkens</dc:creator></item><item><title>Safe Partial Initialization In Rust</title><link>https://scottjmaddox.github.io/Safe-partial-initialization-in-Rust/</link><description><![CDATA[Say we have a struct, Foo, with multiple fields that we would like to partially initialize without resorting to using unsafe. We could write a procedural macro called PartialInit, for example, which would be invoked using derive.]]></description><guid isPermaLink="false">29c7c773-0be7-4694-a11d-41717eac218c</guid><pubDate>Sun, 19 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Scott J Maddox</dc:creator></item><item><title>A Beginner’s Guide to Rust Macros ✨</title><link>https://medium.com/@phoomparin/a-beginners-guide-to-rust-macros-5c75594498f1</link><description><![CDATA[Demystifying one of Rust’s most powerful feature.]]></description><guid isPermaLink="false">9f3fb115-f832-421a-bf28-18148cc3bde0</guid><pubDate>Sat, 18 Aug 2018 18:35:50 +0000</pubDate><dc:creator>Phoomparin Mano</dc:creator></item><item><title>Anatomy Of a Great Rust Blog</title><link>http://www.wezm.net/technical/2018/08/anatomy-of-a-great-rust-blog/</link><description><![CDATA[I've posted 718 articles to Read Rust. This post shares some insights I've gleaned from them, to make your posts as readable and discoverable as possible.]]></description><guid isPermaLink="false">09da227e-6517-48db-ae3f-90f1d1086731</guid><pubDate>Sat, 18 Aug 2018 06:17:00 +0000</pubDate><dc:creator>Wesley Moore</dc:creator></item><item><title>How Rust’s standard library was vulnerable for years and nobody noticed</title><link>https://medium.com/@shnatsel/how-rusts-standard-library-was-vulnerable-for-years-and-nobody-noticed-aebf0503c3d6</link><description><![CDATA[Rust is a new systems programming language that prides itself on memory safety and speed. The gist of it is that if you write code in Rust, it goes as fast as C or C++, but you will not get mysterious intermittent crashes in production or horrific security vulnerabilities, unlike in the latter two.

That is, until you explicitly opt in to that kind of thing. Uh oh.]]></description><guid isPermaLink="false">7f4b6826-72f6-4842-882d-2a2e5378bdcd</guid><pubDate>Sat, 18 Aug 2018 02:47:33 +0000</pubDate><dc:creator>Sergey &quot;Shnatsel&quot; Davidoff</dc:creator></item><item><title>Programming Servo: Anatomy of a Fetch</title><link>https://medium.com/programming-servo/anatomy-of-a-fetch-8872a5c843cd</link><description><![CDATA[Today, let’s go through an entire fetch in Servo, starting with an example in JS.]]></description><guid isPermaLink="false">8b803f70-9098-40d0-97af-5cdff0cde756</guid><pubDate>Fri, 17 Aug 2018 22:29:36 +0000</pubDate><dc:creator>Gregory Terzian</dc:creator></item><item><title>Why Rust Closures are (Somewhat) Hard</title><link>http://stevedonovan.github.io/rustifications/2018/08/18/rust-closures-are-hard.html</link><description><![CDATA[Rust closures are harder for three main reasons: The first is that it is both statically and strongly typed, so we’ll need to explicitly annotate these function types. Second, Lua functions are dynamically allocated (‘boxed’.) Rust does not allocate silently because it prefers to be explicit and is a system language designed for maximally efficient code. Third, closures share references with their environment. In the case of Lua, the garbage collector ensures that these references will live long enough. With Rust, the borrow checker needs to be able to track the lifetimes of these references.]]></description><guid isPermaLink="false">e3bf830e-e1ed-462b-9a6a-edac9ba2d699</guid><pubDate>Sat, 18 Aug 2018 00:00:00 +0200</pubDate><dc:creator>Steve Donovan</dc:creator></item><item><title>So You Want to Build a Language VM in Rust - Part 00</title><link>https://medium.com/iridium-vm/so-you-want-to-build-a-language-vm-part-0-f9132f611a1b</link><description><![CDATA[Hi there! This is the prelude to a series of posts to detailing how to build a language VM. If you are familiar with terms like registers, program counter, and assembly, feel free to skip this post. If not, read on. Please note this is nowhere near comprehensive, but enough to understand what we’re building.]]></description><guid isPermaLink="false">f025d0a3-cc4c-45c7-9587-71057b3d9cbf</guid><pubDate>Fri, 17 Aug 2018 19:59:12 +0000</pubDate><dc:creator>Fletcher Haynes</dc:creator></item><item><title>rusty_gl: A simple wrapper over rs-gl to make code safer</title><link>https://www.reddit.com/r/rust/comments/982kqg/rusty_gl_a_simple_wrapper_over_rsgl_to_make_code/</link><description><![CDATA[I enjoy using OpenGL a lot, but when I switched from C++ to Rust I found it to be less fun to use. This is because the OpenGL (from gl-rs) code never really fit alongside the rest of my Rust code, due to unsafe blocks, PascalCase function names, hacky conversions to c_void pointers etc. So, to make my life easier in the future when using OpenGL in Rust, I made this crate.]]></description><guid isPermaLink="false">0d9f9b5e-33e1-492a-976e-fcbf0826cbab</guid><pubDate>Sat, 18 Aug 2018 00:10:17 +1000</pubDate><dc:creator>Hopson97</dc:creator></item><item><title>Toykio, a toy event loop</title><link>https://rust-lang-nursery.github.io/futures-rs/blog/2018/08/17/toykio.html</link><description><![CDATA[In this blog post I’d like to present toykio, a simple futures executor intended for learning about how executors with an event loop work. Toykio only provides a very minimal feature set: An event loop and TCP streams and listeners. However, it turns out that due to the fact that futures are composable, this is enough to build complex clients and servers.]]></description><guid isPermaLink="false">e53853b1-a7ca-4ffc-bf71-510ed37ea402</guid><pubDate>Fri, 17 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Alexander Polakov</dc:creator></item><item><title>Gfx-hal Tutorial part 0: Drawing a triangle</title><link>https://falseidolfactory.com/2018/08/16/gfx-hal-part-0-drawing-a-triangle.html</link><description><![CDATA[Eight part series on using gfx-hal for low level graphics programming.]]></description><guid isPermaLink="false">5eb3a4b0-7653-43b1-9958-a8b96bc32338</guid><pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Mistodon</dc:creator></item><item><title>Rust GraphQL webserver with Warp, Juniper and MongoDB</title><link>http://alex.amiran.it/post/2018-08-16-rust-graphql-webserver-with-warp-juniper-and-mongodb.html</link><description><![CDATA[Rust's web frameworks ecosystem is in constant change, but recently a new framework called warp came out implementing a new, original way to solve the old problem of transforming a request into a response, and I wanted to give it a try.

And, as I use GraphQL massively at work, I also wanted to check how well Juniper implements it. To add some spice, I used MongoDB as a storage engine instead of the ubiquitous and well-supported SQL databases.]]></description><guid isPermaLink="false">1921a96e-ad32-410f-b0a7-c72dc16d3cde</guid><pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate><dc:creator>/dev/random</dc:creator></item><item><title>Writing Integration Tests in Rust</title><link>https://dorianpula.ca/2018/08/15/writing-integration-tests-in-rust-releasing-rookeries-v0-11-0/</link><description><![CDATA[As part of my overall change over in Rookeries, from Python to Rust, I rewrote a suite of integration tests for the server API. To celebrate my successful transition, I released version 0.11.0 of Rookeries, whose tests use pure Rust now!]]></description><guid isPermaLink="false">26f81256-2d48-4d6e-b305-7ed0d88c216b</guid><pubDate>Wed, 15 Aug 2018 23:00:26 +0000</pubDate><dc:creator>Dorian Pula</dc:creator></item><item><title>Futures 0.3.0-alpha.3</title><link>https://rust-lang-nursery.github.io/futures-rs/blog/2018/08/15/futures-0.3.0-alpha.3.html</link><description><![CDATA[A compatibility layer between 0.3 an 0.1 was developed. It is now possible to convert an 0.3 future into an 0.1 future and vice versa. Similar conversions for streams and sinks are also supported. Additionally, it is now possible to run 0.3 futures and async functions on Tokio’s executor. We have a dedicated blog post coming up that explains this in more detail.]]></description><guid isPermaLink="false">2105e8ca-6037-4dfa-86f7-644bdbec71bd</guid><pubDate>Wed, 15 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Josef Brandl</dc:creator></item><item><title>C2rust - A bridge to C</title><link>https://galois.com/blog/2018/08/c2rust/</link><description><![CDATA[The c2rust project exists to help bridge the fact that there is a lot of valuable software written in C and that there have been great strides in making safer and more-reliable programming languages since C was designed. Rust offers many modern improvements for C while still preserving the low-level control that makes it attractive. Beyond that, Rust provides new abstraction capabilities like parametricity, type-traits, methods, a module system, thread-safety, and more.]]></description><guid isPermaLink="false">4f79a6a7-0d44-44ce-b82c-c4376e073660</guid><pubDate>Tue, 14 Aug 2018 18:16:29 +0000</pubDate><dc:creator>Eric Mertens</dc:creator></item><item><title>Tower Web 0.2 — Now 100% comment attribute free</title><link>https://medium.com/@carllerche/tower-web-0-2-now-100-comment-attribute-free-3ed0633e47e5</link><description><![CDATA[The short version is, Tower Web 0.2 was just released and regular Rust attributes are now used instead of magic comments. The doc comment is replaced with #[get("/")]. This is thanks to Rust macro wizard David Tolnay. I also thought that it would be best to immediately push out 0.2 and then we can all pretend 0.1 didn’t happen.]]></description><guid isPermaLink="false">e9ddc1eb-5ab9-4f23-8b9a-a41cea991044</guid><pubDate>Tue, 14 Aug 2018 16:22:13 +0000</pubDate><dc:creator>Carl Lerche</dc:creator></item><item><title>Incremental Parsing in Amp</title><link>https://medium.com/@jordan_98525/incremental-parsing-in-amp-ba5e8c3e85dc</link><description><![CDATA[With the latest release of Amp (text editor), syntax highlighting has been overhauled. This post dives into the performance-related redesign that has landed with v0.5.]]></description><guid isPermaLink="false">df22bc28-0b6f-4d1a-960a-9e29ca258b53</guid><pubDate>Tue, 14 Aug 2018 16:13:52 +0000</pubDate><dc:creator>Jordan MacDonald</dc:creator></item><item><title>UniverCity released into early access</title><link>https://thinkof.name/2018/08/14/early-access-release.html</link><description><![CDATA[UniverCity is a university management game being programmed in the Rust programming language. As stated above, the game is in early access and is not complete. There will be changes and additions down the line and finishing it may take some time. You may wish to wait until its further along before buying it.]]></description><guid isPermaLink="false">2e354a2e-10fe-410c-adbf-7b739def3ab6</guid><pubDate>Tue, 14 Aug 2018 10:00:00 +0000</pubDate><dc:creator>Thinkofname</dc:creator></item><item><title>Diagnosing A Weak Memory Ordering Bug</title><link>https://robert.ocallahan.org/2018/08/for-first-time-in-my-life-i-tracked.html</link><description><![CDATA[For the first time in my life I tracked a real bug's root cause to incorrect usage of weak memory orderings. Until now weak memory bugs were something I knew about but had subconciously felt were only relevant to wizards coding on big iron, partly because until recently I've spent most of my career using desktop x86 machines.]]></description><guid isPermaLink="false">4b9c619b-6d09-43a9-82bb-86887dbd3a53</guid><pubDate>Tue, 14 Aug 2018 15:18:00 +1200</pubDate><dc:creator>Robert O&apos;Callahan</dc:creator></item><item><title>GSoC 2018 - D3D11 backend for gfx-rs</title><link>https://gfx-rs.github.io/2018/08/14/gsoc.html</link><description><![CDATA[For this years GSoC I (@fkaa) worked on implementing the DirectX 11 backend for gfx, a graphics API which translates to Vulkan, DirectX 12 and Metal.]]></description><guid isPermaLink="false">c1519934-b4d6-49ed-bc58-1450331afa63</guid><pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Felix Kaaman</dc:creator></item><item><title>A Short Serde Deserialize example</title><link>https://noyez.gitlab.io/post/2018-08-14-short-serde-deserialize-exapmle/</link><description><![CDATA[In my previous post, I described taking a simple enum and creating a custom type in diesel. This post will take that same enum and implement deserialize. I often get tripped up by the mechanics of deserializing so this simple enum makes for a good example. Again, this is to benefit anyone looking for more examples of Serde’s Deserialize as well as for myself, so I can remember next time I need to do this.]]></description><guid isPermaLink="false">45c51d1f-97ea-41ad-a1fe-3aab3c51d9ee</guid><pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Noyez</dc:creator></item><item><title>Software Security is a Programming Languages Issue</title><link>http://www.pl-enthusiast.net/2018/08/13/security-programming-languages-issue/</link><description><![CDATA[This is the the last of three posts on the course I regularly teach, CS 330, Organization of Programming Languages. The first two posts covered programming language styles and mathematical concepts. This post covers the last 1/4 of the course, which focuses on software security, and related to that, the programming language Rust.]]></description><guid isPermaLink="false">be4fb7bc-7b10-41ce-af58-e877d70fd73d</guid><pubDate>Mon, 13 Aug 2018 18:00:43 +0000</pubDate><dc:creator>Michael Hicks</dc:creator></item><item><title>Ludum Dare 42 Postmortem</title><link>https://wiki.alopex.li/LD42Postmortem</link><description><![CDATA[One of my favorite game jams is Ludum Dare: It’s just you, a theme, and 48 hours to make a game. Pure and challenging, and I’ve participated in several of them from time to time with a variety of tools. Usually my go-to is Unity3D, though arguably my best game was in Python+Pygame. This time though, for Ludum Dare 42 on August 2018, I finally had both the energy and ability to write my game in Rust, using ggez. So I decided to write about it!]]></description><guid isPermaLink="false">8914a4f4-eff5-4563-a82f-0c55d013ef7f</guid><pubDate>Mon, 13 Aug 2018 14:53:05 +0000</pubDate><dc:creator>Simon Heath</dc:creator></item><item><title>Rust: _(underscore) Does Not Bind</title><link>https://medium.com/codechain/rust-underscore-does-not-bind-fec6a18115a8</link><description><![CDATA[Rust is a language that utilizes the RAII idiom, resulting in different code depending on when the object is destroyed.]]></description><guid isPermaLink="false">523b014f-5ec9-4569-b31f-44720fb3bbc4</guid><pubDate>Mon, 13 Aug 2018 07:13:58 +0000</pubDate><dc:creator>Seung Woo Kim</dc:creator></item><item><title>Never patterns, exhaustive matching, and uninhabited types (oh my!)</title><link>http://smallcultfollowing.com/babysteps/blog/2018/08/13/never-patterns-exhaustive-matching-and-uninhabited-types-oh-my/</link><description><![CDATA[One of the long-standing issues that we’ve been wrestling with in Rust is how to integrate the concept of an “uninhabited type” – that is, a type which has no values at all. Uninhabited types are useful to represent the “result” of some computation you know will never execute – for example, if you have to define an error type for some computation, but this particular computation can never fail, you might use an uninhabited type.]]></description><guid isPermaLink="false">8a47c51e-2de1-47c2-8c3d-3f2d84ae13cb</guid><pubDate>Mon, 13 Aug 2018 00:00:00 -0700</pubDate><dc:creator>Niko Matsakis</dc:creator></item><item><title>I learnt Rust: less than a memoir</title><link>http://blog.kekoariggin.com/coding/i-learnt-rust-less-than-a-memoir/</link><description><![CDATA[Over the past two months, I worked on a feature for Project Fluent. My feature was needed in the Rust implementation of Fluent and was published as a Rust crate, making my code available to the entire Rust community. Completing this project brought me a great sense of satisfaction, and having contributed a fundamental internationalization crate to the Rust ecosystem is possibly the biggest milestone in my career as a developer.]]></description><guid isPermaLink="false">91714b35-a84b-4ac0-a0ed-57e2bdedc9dc</guid><pubDate>Mon, 13 Aug 2018 04:23:32 +0000</pubDate><dc:creator>Kekoa Riggin</dc:creator></item><item><title>A FizzBuzzy Tour of Traits in Rust</title><link>https://www.joshmcguigan.com/blog/fizzbuzz-tour-of-traits-rust/</link><description><![CDATA[Traits are a core part of the Rust programming language, and understanding traits, particularly those which are part of the standard library, is necessary in order to write idiomatic Rust. In this post I’ll write several FizzBuzz implementations, each demonstrating the use of a different trait from the Rust standard library.]]></description><guid isPermaLink="false">a47db977-bb96-4ecf-9203-8c64b438062d</guid><pubDate>Mon, 13 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Josh Mcguigan</dc:creator></item><item><title>Syntax diagram generator</title><link>https://lukaslueg.github.io/macro_railroad_wasm_demo/</link><description><![CDATA[This is a demonstration of a pure-rust library to generate syntax diagrams for macro_rules!().Diagrams are generated fully automatically from rust-source as Scalable Vector Graphics, using customizable CSS for layout.]]></description><guid isPermaLink="false">47f615b2-5fe1-45a1-b760-9bff19237836</guid><pubDate>Sun, 12 Aug 2018 15:04:11 +0000</pubDate><dc:creator>lukaslueg</dc:creator></item><item><title>Ray Tracing: WebAssembly vs JavaScript</title><link>http://matt-harrison.com/raytracing-webassembly-vs-javascript/</link><description><![CDATA[For the past few months I've been toying about with WebAssembly. The examples I've built using WebAssembly were very simple and could easily have been written in JavaScript with perfectly adequate performance. This got me thinking it's about time I make something to really shows where WebAssembly shines. This led me down the path of thinking about very compute-demanding applications. An obvious example is 3d graphics rendering. Even a small scene like the ones I've been creating involve computing millions of vector dot product calculations per second. This kind of CPU-intensive application seemed right up the street of WebAssembly.]]></description><guid isPermaLink="false">3bdf428b-c38a-4964-a8f2-a4e0106bd5d1</guid><pubDate>Sun, 12 Aug 2018 14:09:42 +0000</pubDate><dc:creator>Matt Harrison</dc:creator></item><item><title>Refactoring with Rust macros</title><link>https://philbooth.me/blog/refactoring-with-rust-macros</link><description><![CDATA[Refactoring boilerplate code is always easy in dynamically-typed languages, but sometimes takes a bit more effort when constrained by strong typing. This is something I was puzzling over recently, when the penny dropped for me about how Rust's macros can be used to bridge the gap.]]></description><guid isPermaLink="false">ff118dd1-1fe8-4cde-a359-a00325002ebd</guid><pubDate>Sun, 12 Aug 2018 12:54:12 +0000</pubDate><dc:creator>Phil Booth</dc:creator></item><item><title>Object Models And Identities</title><link>https://vorner.github.io/2018/08/12/Object-models-and-identities.html</link><description><![CDATA[In many things, Rust is very much like C++. It’s memory management strategy is mostly the same, threading models are copied vanilla, both compile to native code and do about the same optimisations at that time, and traits and templates have a lot in common too. Both tend to be rather feature-rich languages with quite a lot to learn. While Rust is definitely better teacher (I’m looking at you, C++ error message!) and has many more „safety covers“ over the dangerous moving parts inside the engine, the design of the engine is more of an evolution from C++ than a completely new thing.

But I’ve noticed one rather subtle difference in the philosophy of the languages I’d like to describe here. To make it somewhat more complete, I’ll also throw what some other languages do in this area in.]]></description><guid isPermaLink="false">e19ac48b-7995-4b64-82d8-64d149067b54</guid><pubDate>Sun, 12 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Michal &apos;vorner&apos; Vaner</dc:creator></item><item><title>PrettySize for rust</title><link>https://neosmart.net/blog/2018/prettysize-for-rust/</link><description><![CDATA[We’ve just published a rust port of our PrettySize.NET library, now available via cargo and github. Like its .NET predecessor, PrettySize-rs aims to provide a comprehensive API for dealing with file sizes, covering both manipulation and human-readable formatting.]]></description><guid isPermaLink="false">02a5f7b7-0114-440d-9be0-d5aaf77bfa65</guid><pubDate>Sat, 11 Aug 2018 20:56:39 +0000</pubDate><dc:creator>Mahmoud Al-Qudsi</dc:creator></item><item><title>RSoC: Relibc - Wrap up</title><link>https://www.redox-os.org/news/rsoc-relibc-final/</link><description><![CDATA[Time for me to pack up and never ever contribute to Redox ever again… Just kidding. This isn’t goodbye, you can’t get rid of me that easily I’m afraid. I’ll definitely want to contribute more, can’t however say with certainty how much time I’ll get, for school is approaching, quickly]]></description><guid isPermaLink="false">ab387870-cbed-4f6d-b1e2-22d2c2686de4</guid><pubDate>Sat, 11 Aug 2018 00:00:00 +0000</pubDate><dc:creator>jD91mZM2</dc:creator></item><item><title>Journey into Gentoo eclass</title><link>https://gibix.github.io/gsoc/2018/08/11/journey-into-gentoo-eclass.html</link><description><![CDATA[I spent some days writing a portage eclass for Gentoo. I want to share my experience.]]></description><guid isPermaLink="false">fdc8eef0-1b02-41f7-8340-faf4660db183</guid><pubDate>Sat, 11 Aug 2018 00:00:00 +0000</pubDate><dc:creator>gibix</dc:creator></item><item><title>How to alleviate the pain of Rust compile times</title><link>https://vfoley.xyz/rust-compile-speed-tips/</link><description><![CDATA[A few days ago, I wrote about two Rust pain points when using Rust at work. One of these points were the long compile times. In this post, I want to share a few tips that can help alleviate that pain.]]></description><guid isPermaLink="false">6f49ae97-11d3-4e1f-ab95-0307bf406aa5</guid><pubDate>Sat, 11 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Vincent Foley</dc:creator></item><item><title>Portability benchmark of Dota2 on MacOS</title><link>https://gfx-rs.github.io/2018/08/10/dota2-macos-performance.html</link><description><![CDATA[gfx-rs is a Rust project aiming to make graphics programming more accessible and portable, focusing on exposing a universal Vulkan-like API. It’s a single Rust API with multiple backends that implement it: Direct3D 12/11, Metal, Vulkan, and even OpenGL. We are also building a Vulkan Portability implementation based on it, which allows non-Rust applications using Vulkan to run everywhere. This post is focused on the Metal backend only.]]></description><guid isPermaLink="false">526c879c-7409-4234-a92c-e04b21f37d0d</guid><pubDate>Fri, 10 Aug 2018 00:00:00 +0000</pubDate><dc:creator>gfx-rs</dc:creator></item><item><title>Tower Web — A new web framework for Rust</title><link>https://medium.com/@carllerche/tower-web-a-new-web-framework-for-rust-e2912856851b</link><description><![CDATA[I previously announced Tower and mentioned that a web framework was in the works. It took longer than I had hoped (as it sometimes does with software), but today, I am opening up Tower Web.

Tower Web is an asynchronous HTTP web framework that focuses on removing boilerplate. It is built on top of Tokio, Hyper, and of course Tower. It works today on stable Rust.]]></description><guid isPermaLink="false">ea6c2f82-fb04-49be-be31-307284eedba4</guid><pubDate>Thu,  9 Aug 2018 17:46:17 +0000</pubDate><dc:creator>Carl Lerche</dc:creator></item><item><title>Xori - Custom disassembly framework</title><link>https://sites.google.com/secured.org/malwareunicorn/xori</link><description><![CDATA[Xori is an automation-ready disassembly and static analysis library that consumes shellcode or PE binaries and provides triage analysis data.]]></description><guid isPermaLink="false">31c9d3c0-192b-45f2-922e-5b8d188683bc</guid><pubDate>Thu,  9 Aug 2018 08:23:00 +0000</pubDate><dc:creator>Amanda Rousseau and Rich Seymour</dc:creator></item><item><title>The State of GPGPU in Rust</title><link>https://bheisler.github.io/post/state-of-gpgpu-in-rust/</link><description><![CDATA[At work a few months ago, we started experimenting with GPU-acceleration. My boss asked if I was interested. I didn’t know anything about programming GPUs, so of course I said “Heck yes, I’m interested!“. I needed to learn about GPUs in a hurry, and that led to my GPU Path Tracer series. That was a lot of fun, but it showed me that CUDA support in Rust is pretty poor.]]></description><guid isPermaLink="false">704eb876-5cac-4636-8817-4946659876e1</guid><pubDate>Wed,  8 Aug 2018 20:00:00 -0600</pubDate><dc:creator>Brook Heisler</dc:creator></item><item><title>GSoC wrap-up - Splitting Servo&apos;s script crate</title><link>https://blog.servo.org/2018/08/09/gsoc-generic-servo/</link><description><![CDATA[I am Peter Hrvola (retep007) Twitter Github. During my Google Summer of Code (GSoC) project, I have been working on investigating the monolithic nature of Servo’s script crate and prototyping separation to smaller crates. My goal was to improve the use of resources during compilation. Current debug build consumes over 5GB of memory and takes 347s.]]></description><guid isPermaLink="false">e141f480-7f0d-4b15-82b6-44d0f807f09c</guid><pubDate>Thu,  9 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Peter Hrvola</dc:creator></item><item><title>Literate Programming in Rust</title><link>https://damien.codes/posts/literate-rust/</link><description><![CDATA[In which we explore how cargo and rustdoc make it possible to write documentation and unit tests at once, resulting in code that is explained and tested from the POV of a public API.]]></description><guid isPermaLink="false">9a82c540-b8ab-4635-a68b-82754b5fe8a1</guid><pubDate>Thu,  9 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Damien</dc:creator></item><item><title>RSoC: FAT32 Filesystem in Redox - 3</title><link>https://www.redox-os.org/news/rsoc-fat32-3/</link><description><![CDATA[The previous blog post discusses how raw disk reads were implemented in the loader stub. The next step was to implement a clean read API which can be used by different filesystem libraries in order to read their respective filesystems. Since the raw reads from the BIOS interrupt had a granularity in terms of sectors(each sector being 512 bytes), the reads had to be translated in order to provide byte level granularity. The clone_from_slice function ensures that a direct call to memcopy is not required. The refined read function is here.]]></description><guid isPermaLink="false">6f2abec2-1096-4a82-90db-b1962a2876f7</guid><pubDate>Thu,  9 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Deepak Sirone</dc:creator></item><item><title>Kickstart - a fast and simple project template bootstrapper</title><link>https://blog.artemix.org/article/show/kickstart</link><description><![CDATA[Ever had some code base that you regularly use to start a new project? Until now, you've probably lost some time refactoring everything to fill out the right project name, title etc. A few tools already exist but either you're lost in feature bloating hell or you're fighting to configure everything in most cases. The following tool is an early-developement, rust-based, template tool made to be more versatile that its closest python counter-part, cookiecutter.]]></description><guid isPermaLink="false">1d84906a-4085-4d87-8f43-786f1d531f44</guid><pubDate>Wed,  8 Aug 2018 23:02:19 +0000</pubDate><dc:creator>Artemis</dc:creator></item><item><title>Proposal: Rust Custom Test Frameworks</title><link>https://blog.jrenner.net/rust/testing/2018/08/06/custom-test-framework-prop.html</link><description><![CDATA[The Rust community recently approved a Custom Test Frameworks eRFC which lays out a series of goals and possible directions of exploration for implementing custom test frameworks. In this post, I present my own proposed fulfillment of the RFC with rationale.]]></description><guid isPermaLink="false">8c27c640-fb7d-42f9-a31f-09e9f5b35c2d</guid><pubDate>Wed,  8 Aug 2018 08:12:00 +0000</pubDate><dc:creator>John Renner</dc:creator></item><item><title>Launching the 2018 State of Rust Survey</title><link>https://blog.rust-lang.org/2018/08/08/survey.html</link><description><![CDATA[It’s that time again! Time for us to take a look at how the Rust project is doing, and what we should plan for the future. The Rust Community Team is pleased to announce our 2018 State of Rust Survey! Whether or not you use Rust today, we want to know your opinions. Your responses will help the project understand its strengths and weaknesses and establish development priorities for the future.

This year, volunteers have also translated the survey into 14 languages!]]></description><guid isPermaLink="false">f0133b81-60d3-416a-b58a-6d6c9c7afe6a</guid><pubDate>Wed,  8 Aug 2018 00:00:00 +0000</pubDate><dc:creator>The Rust Community Team</dc:creator></item><item><title>Ideas for Rust Meetups</title><link>https://llogiq.github.io/2018/08/08/meetup-ideas.html</link><description><![CDATA[Since I’m co-organizing the Rhein-Main Rust meetup (and am probably the main driving force behind it), I tought, it might be useful to share a few ideas we have that we have either already done, or plan doing – perhaps other meetup organizers can benefit from this. Note that our meetups usually run 2-4 hours, but some attendees may have to join late or leave early so the format has to take this into account.]]></description><guid isPermaLink="false">8cf7d62c-c8d9-4116-ae4c-7ac155d015cb</guid><pubDate>Wed,  8 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>Journey into rust #1: Conway’s Game</title><link>https://jonathansteyfkens.com/rust/opengl/graphics/2018/08/07/rust-conway-game-of-life.html</link><description><![CDATA[The language rust has been popping up on my twitter feed and my personal life more and more. It’s been promoted and presented as the ultra safe language, so naturally I decided to check it out. The upcoming series of posts “Journey into rust” will describe and document my experiences using rust, hopefully explaining certain concepts that rust does differently. This will all be written from a C++ programmers standpoint that was thought writing Object Oriented code. I encourage you the reader to think critically and correct where necessary.

On to the actual first post! After reading “the Rust Programming Language” I wanted to get my hands dirty and actually write some code. I like graphical applications and using low level graphics API’s so I decided to implement a cellular automation in rust. But just implementing cellular automation isn’t very exciting, is it? What if we could do this on the GPU…And off I went on my journey to create Conway’s game of life in rust.]]></description><guid isPermaLink="false">b7c9c3df-7ecd-41f3-8c89-5c1d35298b7b</guid><pubDate>Tue,  7 Aug 2018 22:30:01 +0000</pubDate><dc:creator>Jonathan Steyfkens</dc:creator></item><item><title>Rust concurrency patterns: No context, no cancel, no leaks</title><link>https://medium.com/@polyglot_factotum/rust-concurrency-patterns-no-context-no-cancel-no-leak-b6c1ec2dafa5</link><description><![CDATA[Let’s put ourselves to the challenge of having an ‘infinite’ generator, which will have to be told to stop generating by the consumer…]]></description><guid isPermaLink="false">bbb6ed5a-a451-4abf-bbff-2e0b33f6660a</guid><pubDate>Tue,  7 Aug 2018 10:54:56 +0000</pubDate><dc:creator>Gregory Terzian</dc:creator></item></channel></rss>