<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - All Posts</title><link>https://readrust.net/</link><description>All Posts posts on Read Rust</description><item><title>A Case Study in Heaptrack</title><link>https://speice.io/2018/10/case-study-optimization.html</link><description><![CDATA[When I first started building the dtparse crate, my intention was to mirror as closely as possible the equivalent Python library. Python, as you may know, is garbage collected. Very rarely is memory usage considered in Python, and I likewise wasn’t paying too much attention when dtparse was first being built.

This lackadaisical approach to memory works well enough, and I’m not planning on making dtparse hyper-efficient. But every so often, I’ve wondered: “what exactly is going on in memory?”]]></description><guid isPermaLink="false">917520f5-6f74-4e91-87e1-40d2360c0e46</guid><pubDate>Mon,  8 Oct 2018 00:00:00 -0400</pubDate><dc:creator>Bradlee Speice</dc:creator></item><item><title>Declarative Rust static analysis</title><link>http://blog.lambdaverse.org/comacro/</link><description><![CDATA[Rust's Macros 2.0 are intuitive: demonstrate a pattern, and the compiler can insert the pattern into your program wherever you want it. Inspired by this syntax, I wondered: Could you “run a macro backwards”—use the same by-example language to describe patterns to search for?]]></description><guid isPermaLink="false">fd7f3d68-5d82-41ba-b841-d11a37e4b98d</guid><pubDate>Sun,  7 Oct 2018 19:23:17 +0000</pubDate><dc:creator>Kaz Wesley</dc:creator></item><item><title>Testing reqwest-based clients</title><link>https://write.as/balrogboogie/testing-reqwest-based-clients</link><description><![CDATA[In this article we will make a small Rust library that uses the reqwest http client library, and see what we can do to adequately test the business logic. We assume you have the Rust toolchain installed, and are at least passingly familiar with programming in Rust.]]></description><guid isPermaLink="false">e34760d5-658d-475a-91eb-c489a649ee86</guid><pubDate>Fri,  5 Oct 2018 20:57:27 +0000</pubDate><dc:creator>balrogboogie</dc:creator></item><item><title>GLSL quasiquoting in Rust!</title><link>https://phaazon.net/blog/glsl-quasiquoting</link><description><![CDATA[glsl-quasiquote-0.1 was released today! The crate provides you with two macros: glsl! and glsl_str!. Both are procedural macros that requires a nightly compiler and the proc_macro_non_items feature. They will both output a TranslationUnit, that represents a whole shader AST.]]></description><guid isPermaLink="false">4a3da20e-11fb-4868-9aa1-593f62439bd9</guid><pubDate>Fri,  5 Oct 2018 19:00:00 +0000</pubDate><dc:creator>Dimitri Sabadie</dc:creator></item><item><title>Default values ..copy that</title><link>https://medium.com/@softprops/default-values-copy-that-ae43831781f3</link><description><![CDATA[When I talk to folks foreign to Rust, I often get asked the question: “Why doesn’t Rust have support for default arguments”. When I first started learning Rust I pondered the same question. Eventually I came to realize that it does, kind of. Rust just takes different approach based on it’s unique design choices, one which I now wish other languages supported.]]></description><guid isPermaLink="false">d7c70ce9-96bc-4518-8e3e-429503883006</guid><pubDate>Thu,  4 Oct 2018 17:06:48 +0000</pubDate><dc:creator>Doug Tangren</dc:creator></item><item><title>The Undergarden, a text adventure in Rust: 2 - Objects</title><link>https://www.cattlegrid.info/the-undergarden-text-adventure-rust-2-objects</link><description><![CDATA[In this second blog post I’m showing how I implemented objects - things the player can interact with - for a text adventure written in Rust. As usual, the full code is available on GitHub.]]></description><guid isPermaLink="false">22538446-2c14-4b71-bd82-46c2db0371a1</guid><pubDate>Thu,  4 Oct 2018 04:51:00 +0000</pubDate><dc:creator>Michele Beltrame</dc:creator></item><item><title>WebAssembly and Dynamic Memory</title><link>https://frehberg.wordpress.com/webassembly-and-dynamic-memory/</link><description><![CDATA[WebAssembly is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable target for compilation of high-level languages like C/C++/Rust, enabling deployment on the web for client and server applications.

These high-level languages like C/C++/Rust (+Javascript) deal with different allocations of memory, such as static memory, stack memory and dynamic memory.]]></description><guid isPermaLink="false">cba35bca-a821-4ba9-81d8-3cee56f5e199</guid><pubDate>Thu,  4 Oct 2018 03:19:18 +0000</pubDate><dc:creator>Frank Rehberger</dc:creator></item><item><title>No, pest is not faster than nom</title><link>https://unhandledexpression.com/general/2018/10/04/no-pest-is-not-faster-than-nom.html</link><description><![CDATA[But today (October 4th, 2018), the pest website featured a very misleading graph. Yes, a pest 2.0 parser that does not convert the input to Rust types is indeed faster than a nom 4.0 parser that does convert the input to Rust types. But what happens if I write a nom 4.0 parser that does not convert its input to Rust types?]]></description><guid isPermaLink="false">dceefb77-f60e-4864-80e4-1dfb50c52cce</guid><pubDate>Thu,  4 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Geoffroy Couprie</dc:creator></item><item><title>Who authors the most popular crates on crates.io?</title><link>https://words.steveklabnik.com/who-authors-the-most-popular-crates-on-crates-io</link><description><![CDATA[I had a question this morning: who authors the most popular crates on crates.io? First, we have to figure out what we mean by “most popular.” My first guess was “top 100 by recent downloads”, so I looked at crates.io. Once I got to 100, I found... | Steve Klabnik | “The most violent element in society is ignorance.” - Emma Goldman]]></description><guid isPermaLink="false">5c9a36df-c260-4d16-87b1-9b7e3107f7b8</guid><pubDate>Thu,  4 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Steve Klabnik</dc:creator></item><item><title>pest Parser 2.0 Released</title><link>https://pest.rs/</link><description><![CDATA[pest is a general purpose parser written in Rust with a focus on accessibility, correctness, and performance. It uses parsing expression grammars (or PEG) as input, which are similar in spirit to regular expressions, but which offer the enhanced expressivity needed to parse complex languages. ]]></description><guid isPermaLink="false">a708e2c2-f0bd-4691-88c0-d004bedd667a</guid><pubDate>Thu,  4 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Dragoș Tiselice</dc:creator></item><item><title>Announcing the Tokio Doc Push (we need you!)</title><link>https://tokio.rs/blog/2018-10-doc-blitz/</link><description><![CDATA[In the past, there has been reoccurring feedback that Tokio is hard to understand. I believe a lack of good documentation plays a significant part. It’s time to fix this problem.

And because Tokio is open source, it is on us (the community) to make this happen! 👏]]></description><guid isPermaLink="false">cbc812fb-b5ff-44cc-ae96-f4a5ae44e7dd</guid><pubDate>Thu,  4 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Carl Lerche</dc:creator></item><item><title>Introducing Ruukh Framework</title><link>https://sharadchand.com/2018/10/03/ruukh-framework.html</link><description><![CDATA[Rust has its goals set on to be a primary WASM language and it would be awesome to use it both in backend and frontend web. Ruukh is one of such efforts to realise that dream. Ruukh, a frontend web framework, is inspired by both VueJS and ReactJS.]]></description><guid isPermaLink="false">217f309f-bfff-4997-8ff7-faddf10b670f</guid><pubDate>Wed,  3 Oct 2018 12:38:00 +0000</pubDate><dc:creator>Sharad Chand</dc:creator></item><item><title>Lessons learned on writing web applications completely in Rust</title><link>https://medium.com/@saschagrunert/lessons-learned-on-writing-web-applications-completely-in-rust-2080d0990287</link><description><![CDATA[This blog post is an update to the preceeding article “A web application completely written in Rust” and summarizes the projects’ progress over the last months.]]></description><guid isPermaLink="false">7de9ba6b-a3ae-4db5-a911-15126a264b26</guid><pubDate>Wed,  3 Oct 2018 11:59:12 +0000</pubDate><dc:creator>Sascha Grunert</dc:creator></item><item><title>Going Four Times Faster using Multi-Threading</title><link>http://worthe-it.co.za/programming/2018/10/03/going-four-times-faster-with-multithreading.html</link><description><![CDATA[Rust makes writing parallel code safe. Rayon makes it easy.]]></description><guid isPermaLink="false">55b31f9c-fa63-4890-bcf3-5f9b899c197f</guid><pubDate>Wed,  3 Oct 2018 00:00:00 +0000</pubDate><dc:creator>Justin Worthe</dc:creator></item><item><title>Red Hat&apos;s Stratis Storage Project Reaches Its 1.0 Stable Milestone</title><link>https://www.phoronix.com/scan.php?page=news_item&amp;px=Stratis-1.0-Released</link><description><![CDATA[Stratis 1.0 was quietly released last week with the 1.0 version marking its initial stable release and where also the on-disk meta-data format has been stabilized. Red Hat engineers believe Stratis is now ready for more widespread testing.]]></description><guid isPermaLink="false">4ae0bbf7-720b-48d3-8c5d-d5b3c8e061dd</guid><pubDate>Tue,  2 Oct 2018 04:48:34 -0400</pubDate><dc:creator>Michael Larabel</dc:creator></item><item><title>Porting My CUDA Path Tracer to ptx-builder/linker</title><link>https://bheisler.github.io/post/ptx-builder-and-linker/</link><description><![CDATA[A bunch of stuff has happened since I published my post on The State of GPGPU in Rust. Most importantly, Denys Zariaiev (@denzp) released his work on a custom linker for Rust CUDA kernels, and a build.rs helper crate to make it easier to use.
These two crates eliminate many of the problems I referred to in my previous post. The linker solves most of the “invalid PTX file” problems, while the ptx-builder crate does all of the magic that Accel was doing behind the scenes.]]></description><guid isPermaLink="false">abd3f1ce-8faf-4c92-a8d3-20c34e41af97</guid><pubDate>Mon,  1 Oct 2018 19:00:00 -0600</pubDate><dc:creator>Brook Heisler</dc:creator></item><item><title>An EFI App a bit rusty</title><link>https://medium.com/@gil0mendes/an-efi-app-a-bit-rusty-82c36b745f49</link><description><![CDATA[After two tweets that I made last week, playing around with UEFI and Rust, some people asked to publish a blog post explaining how to create a UEFI application fully written in Rust and demonstrate all the testing environment.]]></description><guid isPermaLink="false">9128e298-33fe-4f13-a9c7-7ff2361ee2da</guid><pubDate>Sun, 30 Sep 2018 21:56:12 +0000</pubDate><dc:creator>Gil Mendes</dc:creator></item><item><title>Understanding Compilers — For Humans (Version 2)</title><link>https://towardsdatascience.com/understanding-compilers-for-humans-version-2-157f0edb02dd</link><description><![CDATA[Understanding your compiler internally allows you to use it effectively. Walk through how programming languages and compilers work in this chronological synopsis. Lots of links, example code, and diagrams have been composed to aid in your understanding.

Understanding Compilers — For Humans (Version 2) is a successor to my second article on Medium, with over 21 thousand views. I am so glad I could make a positive impact on people’s education, and I am excited to bring a complete rewrite based on the input I received from the original article. I chose Rust as this work’s primary language.]]></description><guid isPermaLink="false">8e066aec-6f09-44df-b763-b4d44b772fb5</guid><pubDate>Sat, 29 Sep 2018 16:01:01 +0000</pubDate><dc:creator>Luke Wilson</dc:creator></item><item><title>The relative performance of C and Rust</title><link>http://dtrace.org/blogs/bmc/2018/09/28/the-relative-performance-of-c-and-rust/</link><description><![CDATA[I reimplemented a body of C software in Rust, and it performed better for the same task; what’s going on? And is there anything broader we can say about these results?

To explore this, I ran some statemap rendering tests on SmartOS on a single-socket Haswell server (Xeon E3-1270 v3) running at 3.50GHz. The C version was compiled with GCC 7.3.0 with -O2 level optimizations; the Rust version was compiled with 1.29.0 with --release. All of the tests were run bound to a processor set containing a single core; all were bound to one logical CPU within that core, with the other logical CPU forced to be idle. cpustat was used to gather CPU performance counter data, with one number denoting one run with pic0 programmed to that CPU performance counter. The input file (~30MB compressed) contains 3.5M state changes, and in the default config will generate a ~6MB SVG. ]]></description><guid isPermaLink="false">23617503-ac10-4027-bd53-a98ad82c7d1e</guid><pubDate>Sat, 29 Sep 2018 01:28:17 +0000</pubDate><dc:creator>Bryan Cantrill</dc:creator></item><item><title>lolbench: automagically and empirically discovering Rust performance regressions</title><link>https://blog.anp.lol/rust/2018/09/29/lolbench/</link><description><![CDATA[lolbench compiles ~350 benchmarks with every Rust nightly. It then runs them and highlights potential performance regressions in the standard library and the output of the compiler. Each toolchain’s run is summarized with a list of likely candidates, as seen in the image below, and we’re now getting started using these to safeguard the performance of Rust programs. Come help!]]></description><guid isPermaLink="false">307ed024-4949-4c53-80cf-c1e60a57e0a7</guid><pubDate>Sat, 29 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Adam Perry</dc:creator></item><item><title>Merlin: flexible, composable transcripts for zero-knowledge proofs</title><link>https://medium.com/@hdevalence/merlin-flexible-composable-transcripts-for-zero-knowledge-proofs-28d9fda22d9a</link><description><![CDATA[Merlin is a small Rust library that performs the Fiat-Shamir transformation in software, maintaining a STROBE-based transcript of the proof protocol and allowing the prover to commit messages to the transcript and compute challenges bound to all previous messages. It also provides a transcript-based RNG for use by the prover, generalizing “deterministic” and “synthetic” nonces to arbitrarily complex zero-knowledge protocols.]]></description><guid isPermaLink="false">2e26b090-21b9-42e2-9ac5-9664e79af88e</guid><pubDate>Fri, 28 Sep 2018 21:07:20 +0000</pubDate><dc:creator>Henry de Valence</dc:creator></item><item><title>Tower Web 0.3 — async/await and template support</title><link>https://medium.com/@carllerche/tower-web-0-3-async-await-and-template-support-e0bb8ed47941</link><description><![CDATA[Today, Tower Web 0.3 has been released and it comes with two major new features: Experimental support for async/await. Support for using templates to render responses.]]></description><guid isPermaLink="false">fa23119f-23c8-404c-9aaa-5a75da99d131</guid><pubDate>Fri, 28 Sep 2018 17:32:13 +0000</pubDate><dc:creator>Carl Lerche</dc:creator></item><item><title>Rust RPG: Introductory Tutorial of Rust, Unit Testing, and Continuous Integration with a Roguelike</title><link>https://medium.com/@cameron.manavian/rust-rpg-introductory-tutorial-of-rust-unit-testing-and-continuous-integration-with-a-roguelike-b7b86e90855c</link><description><![CDATA[We’re going to walk through a Rust application that I’ve built, which is essentially a basic Roguelike in most regards.]]></description><guid isPermaLink="false">ec683955-b4c5-426c-858d-f180fde10abb</guid><pubDate>Fri, 28 Sep 2018 13:46:04 +0000</pubDate><dc:creator>Cameron Manavian</dc:creator></item><item><title>Programming WebAssembly with Rust — The Book!</title><link>https://medium.com/@KevinHoffman/programming-webassembly-with-rust-the-book-7c4a890fcf97</link><description><![CDATA[I am proud to announce that I’m working on a book for the Pragmatic Programmers. The title hasn’t been set in stone yet, but the book will be about programming WebAssembly with Rust.]]></description><guid isPermaLink="false">38d1a807-a596-4423-a458-beab7d9df074</guid><pubDate>Fri, 28 Sep 2018 13:25:42 +0000</pubDate><dc:creator>Kevin Hoffman</dc:creator></item><item><title>How I’ve found vulnerability in a popular Rust crate (and you can too)</title><link>https://medium.com/@shnatsel/how-ive-found-vulnerability-in-a-popular-rust-crate-and-you-can-too-3db081a67fb</link><description><![CDATA[I have recently discovered a zero-day vulnerability in a fairly popular and well-designed Rust crate. In this article I’m going to discuss how I did it and why it wasn’t discovered earlier, and introduce a new tool, libdiffuzz, that I’ve created for the job. A recently discovered vulnerability in Rust standard library makes a cameo appearance.]]></description><guid isPermaLink="false">385cdc5a-e6e0-4562-b9f3-156b296d6a03</guid><pubDate>Fri, 28 Sep 2018 03:51:45 +0000</pubDate><dc:creator>Sergey &quot;Shnatsel&quot; Davidoff</dc:creator></item><item><title>Writing Rust NIFs for your Elixir code with the Rustler package</title><link>https://medium.com/@jacob.lerche/writing-rust-nifs-for-your-elixir-code-with-the-rustler-package-d884a7c0dbe3</link><description><![CDATA[There will be times where code will run slow and Erlang/Elixir optimizations will only go so far. BEAM has several ways to interface with foreign code, the fastest way being with a Native Implemented Function (NIF) whose API expects them to be written in C. But speaking frankly, the last time I worked with C involved a lengthy debugging session that boiled down to the lack of type safety, so I’d rather not have to repeat that experience. It’s for this reason that Rust is such a compelling language.]]></description><guid isPermaLink="false">11786513-db52-4fdb-ac03-e4a854b36f2b</guid><pubDate>Fri, 28 Sep 2018 01:54:27 +0000</pubDate><dc:creator>Jacob Lerche</dc:creator></item><item><title>The Undergarden, a text adventure in Rust: 1 - Sections</title><link>https://www.cattlegrid.info/the-undergarden-text-adventure-rust-1-sections</link><description><![CDATA[I’m attempting to write a (very simple, at least initally) text adventure in Rust, so I’m going to share progress on my blog starting today. This first post is about the sections, that to day is the rooms of a house for example.]]></description><guid isPermaLink="false">c0b70c5d-190f-4c9d-ac44-d65a64a61b1f</guid><pubDate>Thu, 27 Sep 2018 20:04:00 +0000</pubDate><dc:creator>Michele Beltrame</dc:creator></item><item><title>Announcing the web-sys crate!</title><link>https://rustwasm.github.io/2018/09/26/announcing-web-sys.html</link><description><![CDATA[We are pleased to announce the first release of the web-sys crate! It provides raw bindings to all the Web’s APIs: everything from DOM manipulation to WebGL to Web Audio to timers to fetch and more!]]></description><guid isPermaLink="false">27dd6f1a-6659-43d5-aa7b-2e0ee21c7173</guid><pubDate>Wed, 26 Sep 2018 00:00:00 +0000</pubDate><dc:creator>rustwasm</dc:creator></item><item><title>eBPF, ingrained in Rust</title><link>https://blog.redsift.com/labs/ebpf-ingrained-in-rust/</link><description><![CDATA[Today we are releasing RedBPF and ingraind, our eBPF toolkit that integrates with StatsD and S3, to gather feedback, and see where others in the Rust community might take this framework. If you are looking to up your company’s monitoring game, gather more data about your Raspberry Pi cluster at home, or just have a strong academic interest in Rust and low-level bit shepherding, you might want to read on.]]></description><guid isPermaLink="false">ba0468b9-b0dd-40d1-b253-9fa70cb05ddf</guid><pubDate>Tue, 25 Sep 2018 14:45:44 +0000</pubDate><dc:creator>Peter Parkanyi</dc:creator></item><item><title>‘orion’ - yet another attempt at pure-Rust cryptography</title><link>https://brycx.github.io/2018/09/25/orion-pure-rust-crypto-lib.html</link><description><![CDATA[orion is another attempt at cryptography implemented in pure Rust. Its main focus is usability. This is in part achieved by providing a thorough documentation of the library. High-level abstractions are also provided, which are an attempt at guiding the users towards safe usage of the lower-level functionality of the library.]]></description><guid isPermaLink="false">96405556-ac98-433a-a0f8-c3de068e47d3</guid><pubDate>Tue, 25 Sep 2018 00:00:00 +0000</pubDate><dc:creator>brycx</dc:creator></item><item><title>Announcing Rust 1.29.1</title><link>https://blog.rust-lang.org/2018/09/25/Rust-1.29.1.html</link><description><![CDATA[A security vulnerability was found in the standard library where if a large number was passed to str::repeat it could cause a buffer overflow after an integer overflow. If you do not call the str::repeat function you are not affected. This has been addressed by unconditionally panicking in str::repeat on integer overflow.]]></description><guid isPermaLink="false">adea520f-a6b7-43f5-b705-62aefc4c00e6</guid><pubDate>Tue, 25 Sep 2018 00:00:00 +0000</pubDate><dc:creator>The Rust Core Team</dc:creator></item><item><title>rust-on-mobile: Example of creating and running a basic &quot;Hello World&quot; application on iOS</title><link>https://github.com/mtak-/rust-on-mobile/blob/master/examples/ios/example01.md</link><description><![CDATA[This repo is a place where examples can be added of iOS/android projects written entirely/mostly in rust.]]></description><guid isPermaLink="false">0b2520e8-b69d-4edb-91b1-3558494fd0cd</guid><pubDate>Mon, 24 Sep 2018 06:09:32 +0000</pubDate><dc:creator>mtak-</dc:creator></item><item><title>Office Hours #1: Cyclic services</title><link>http://smallcultfollowing.com/babysteps/blog/2018/09/24/office-hours-1-cyclic-services/</link><description><![CDATA[This is a report on the second “office hours”, in which we discussed how to setup a series of services or actors that communicate with one another. This is a classic kind of problem in Rust: how to deal with cyclic data. Usually, the answer is that the cycle is not necessary (as in this case).]]></description><guid isPermaLink="false">0ec2fec4-ed74-4377-b1f5-1e6a5eec6025</guid><pubDate>Mon, 24 Sep 2018 00:00:00 -0400</pubDate><dc:creator>Niko Matsakis</dc:creator></item><item><title>Smithy progress update: How I decreased WebAssembly bundle size by 90%</title><link>https://medium.com/@robert.balicki_2494/smithy-progress-update-how-i-decreased-webassembly-bundle-size-by-90-e7fe194b2f58</link><description><![CDATA[Smithy, a web development framework written in Rust that compiles to WebAssembly. In the mean time, there has been substantial progress, and Smithy is on the verge of being ready for alpha use! In this post, I want to describe the improvements that have been made, and what’s on the Smithy roadmap!]]></description><guid isPermaLink="false">21440a24-a7da-4c72-8232-df22c7438b09</guid><pubDate>Mon, 24 Sep 2018 03:36:53 +0000</pubDate><dc:creator>Robert Balicki</dc:creator></item><item><title>Running Little Rust Snippets with Runner</title><link>https://stevedonovan.github.io/rustifications/2018/09/23/runner.html</link><description><![CDATA[runner is mostly a clever wrapper around normal Cargo operations. runner acts like an interpreter. There is no forced directory structure, just source. But it’s just using rustc under the hood in the most direct way possible.]]></description><guid isPermaLink="false">0a206ee6-7e54-4570-9f0c-8040fb9cd530</guid><pubDate>Sun, 23 Sep 2018 00:00:00 +0200</pubDate><dc:creator>Steve Donovan</dc:creator></item><item><title>Hegemon: A modular system monitor written in Rust</title><link>https://github.com/p-e-w/hegemon</link><description><![CDATA[Hegemon is a work-in-progress modular system monitor written in safe Rust. Currently, it has the following features: Monitor CPU and memory usage, temperatures, and fan speeds; expand any data stream to reveal a more detailed graph and additional information, adjustable update interval.]]></description><guid isPermaLink="false">5a387bd6-85b7-439d-97d4-fdb76fec80c5</guid><pubDate>Sat, 22 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Philipp Emanuel Weidmann</dc:creator></item><item><title>Office Hours #0: Debugging with GDB</title><link>http://smallcultfollowing.com/babysteps/blog/2018/09/21/office-hours-0-debugging-with-gdb/</link><description><![CDATA[This blog post is just going to be a quick summary of the basic workflow of using Rust with gdb on the command line. I’m assuming you are using Linux here, since I think otherwise you would prefer a different debugger. There are probably also nifty graphical tools you can use and maybe even IDE integrations, I’m not sure.]]></description><guid isPermaLink="false">564060f8-e187-4947-80ca-867ed3762d1b</guid><pubDate>Fri, 21 Sep 2018 00:00:00 -0400</pubDate><dc:creator>Niko Matsakis</dc:creator></item><item><title>Security advisory for the standard library (str::repeat)</title><link>https://blog.rust-lang.org/2018/09/21/Security-advisory-for-std.html</link><description><![CDATA[The Rust team was recently notified of a security vulnerability affecting the standard library’s str::repeat function. When passed a large number this function has an integer overflow which can lead to an out of bounds write. If you are not using str::repeat, you are not affected.]]></description><guid isPermaLink="false">e36be553-3461-4742-8127-2a41c9f54d93</guid><pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate><dc:creator>The Rust Core Team</dc:creator></item><item><title>A Rust FFI adventure in unsafety</title><link>https://travisf.net/capstone-rs-unsafety-adventure</link><description><![CDATA[This blog post covers my adventure in fixing a bug in the Rust bindings for the Capstone C library, a disassembly library that supports several CPU architectures. The capstone-rs crate attempts to provide a Rusty, object-oriented interface. You do not necessarily need previous experience in C code or foreign function (FFI) bindings to understand this blog post. I will cover some of the steps I used to debug this problem. Hopefully, readers can learn from my mistakes.]]></description><guid isPermaLink="false">a2d3880c-1803-4f4d-8345-b46f2d056985</guid><pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Travis Finkenauer</dc:creator></item><item><title>Trying to tackle the orphans problem</title><link>https://phaazon.net/blog/orphans-problem</link><description><![CDATA[In this blog entry, I want to explore a specific problem of orphans and how I decided to solve it in a crate of mine. The problem is the following: Given a crate that has a given responsibility, how can someone add an implementation of a given trait without having to use a type wrapper or augment the crate’s scope?]]></description><guid isPermaLink="false">0e8e1d2a-729c-41b0-953f-e14de11b8c59</guid><pubDate>Thu, 20 Sep 2018 12:30:00 +0000</pubDate><dc:creator>Dimitri Sabadie</dc:creator></item><item><title>The evolution of performance in ppbert</title><link>https://vfoley.xyz/ppbert-perf-evolution/</link><description><![CDATA[Today I released ppbert 0.8.4. This release also marks the first time that one of my original test files can be pretty printed in less than a second. I’ll use this occasion to look back on ppbert and how I was able to improve its performance, little by little.]]></description><guid isPermaLink="false">90573eab-4e15-48a4-9c53-8f3466356845</guid><pubDate>Wed, 19 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Vincent Foley</dc:creator></item><item><title>How we integrate Rust with C#</title><link>https://blog.getseq.net/rust-at-datalust-how-we-integrate-rust-with-csharp/</link><description><![CDATA[Seq is a log server that's built using a few programming languages; we have a storage engine called Flare written in Rust, and a server application written in C#. Our language stack is something I've talked about previously.

Between Rust and C# we have a foreign function interface (FFI) that lets us call out to Rust code from within the .NET runtime. In this post I'd like to explore our approach to FFI between Seq and its storage engine using the API for reading log events as a reference.]]></description><guid isPermaLink="false">63b188d7-d82f-425d-9d07-a17d7fdc43f8</guid><pubDate>Tue, 18 Sep 2018 23:15:06 +0000</pubDate><dc:creator>Ashley Mannix</dc:creator></item><item><title>Falling in love with Rust</title><link>http://dtrace.org/blogs/bmc/2018/09/18/falling-in-love-with-rust/</link><description><![CDATA[We are living in a Golden Age of software, one that will produce artifacts that will endure for generations. Of course, it can be hard to hold such heady thoughts when we seem to be up to our armpits in vendored flotsam, flooded by sloppy abstractions hastily implemented. Among current languages, only Rust seems to share this aspiration for permanence, with a perspective that is decidedly larger than itself.]]></description><guid isPermaLink="false">7f5b5694-9cda-4692-8cbe-42458122faff</guid><pubDate>Tue, 18 Sep 2018 22:31:51 +0000</pubDate><dc:creator>Bryan Cantrill</dc:creator></item><item><title>Lockout, Part 2: And nary a function to be found</title><link>https://exphp.github.io/2018/09/18/lockout-part-2.html</link><description><![CDATA[This is part of a blog series on working towards an intuitive mental model for lifetimes in Rust. When I tried to sit myself down and really, really write down an in-depth example… I realized that there was no two ways about it. Before you can learn to appreciate why lifetimes exist, you must learn what life would be like without them. And in order to do that, well…]]></description><guid isPermaLink="false">b78327e0-5dc5-4187-be6b-9e06204b4631</guid><pubDate>Tue, 18 Sep 2018 19:00:00 +0000</pubDate><dc:creator>Michael Lamparski</dc:creator></item><item><title>Announcing Linkerd 2.0: from service mesh to service sidecar</title><link>https://blog.linkerd.io/2018/09/18/announcing-linkerd-2-0/</link><description><![CDATA[The 2.0 release of Linkerd brings two very significant changes. First, we’ve completely rewritten Linkerd to be orders of magnitude faster and smaller than Linkerd 1.x. Linkerd 2.0’s data plane is comprised of ultralight Rust proxies which consume around 10mb of RSS and have a p99 latency of <1ms. Linkerd’s minimalist control plane (written in Go) is similarly designed for speed and low resource footprint.]]></description><guid isPermaLink="false">cf201dba-76a2-49e1-a4d9-b28093189901</guid><pubDate>Tue, 18 Sep 2018 17:00:00 +0000</pubDate><dc:creator>William Morgan</dc:creator></item><item><title>Lockout, Part 1: Everything you know about lifetimes is wrong</title><link>https://exphp.github.io/2018/09/17/lockout-part-1.html</link><description><![CDATA[This is part of a blog series on a new way to look at lifetimes in Rust's type system. I hope to cover some advanced aspects of lifetimes that are seldom discussed in the open, and my goal is ultimately to help convey new intuitions about how to use them correctly.]]></description><guid isPermaLink="false">6c1f472d-337d-48c0-96d3-807afe8e58e3</guid><pubDate>Mon, 17 Sep 2018 01:00:00 +0000</pubDate><dc:creator>Michael Lamparski</dc:creator></item><item><title>Alacritty now supports scrollback</title><link>https://jwilm.io/blog/alacritty-lands-scrollback/</link><description><![CDATA[Alacritty, the OpenGL terminal emulator written in Rust, now supports scrollback! Performance has improved, and we've got benchmarks to share.]]></description><guid isPermaLink="false">4f00ccb1-9966-4c6d-83e9-0e8032ff68a4</guid><pubDate>Sun, 16 Sep 2018 17:00:00 -0700</pubDate><dc:creator>Joe Wilm</dc:creator></item><item><title>My Experience in Increasing Rust&apos;s Reach 2018</title><link>https://rahul-thakoor.github.io/my-experience-in-increasing-rusts-reach-2018/</link><description><![CDATA[I recently had the privilege of participating the Increasing Rust’s Reach(IRR) program. The program aims to grow Rust’s community of project collaborators and leaders. Increasing Rust’s Reach brings together Rust team members and individuals who are underrepresented in Rust’s community and the tech industry for a partnership of three (3) months, from mid-May to mid-August. Each partnership agrees to a commitment of 3–5 hours per week working on a Rust Project.]]></description><guid isPermaLink="false">04d63d37-82e6-4076-a90f-ef0a20945316</guid><pubDate>Sun, 16 Sep 2018 08:49:37 +0400</pubDate><dc:creator>Rahul Thakoor</dc:creator></item><item><title>A Sudoku Solver &amp; Generator 🔢</title><link>https://blog.ryanlevick.com/posts/sudoku-solver-generator/</link><description><![CDATA[For a small side project I’m working on, I’m using a Sudoku puzzle solver and puzzle generator that I’ve written in Rust. The experience was fun, so I thought I’d write up a little bit about the algorithm I’ve used and some interesting stats about how it performs.]]></description><guid isPermaLink="false">e3bb7297-9e70-4070-a2aa-8bb8f9a5eaf2</guid><pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Ryan Levick</dc:creator></item><item><title>Browsing your mail with Rust and Qt</title><link>https://www.vandenoever.info/blog/2018/09/16/browsing_your_mail_with_rust_and_qt.html</link><description><![CDATA[Let’s write a mail viewer with Rust and Qt. This is another blog about Rust Qt Binding Generator, the project that lets you add a Qt GUI to your Rust code, or if you will, add Rust to your Qt program.]]></description><guid isPermaLink="false">790afaff-5784-4b34-82eb-38a05a05a0ec</guid><pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Jos van den Oever</dc:creator></item><item><title>Ownership Explained with Python</title><link>https://paulkernfeld.com/2018/09/16/ownership-explained-with-python.html</link><description><![CDATA[It’s not immediately obvious that calling min(squares) modifies squares. If squares were a list or even a range, we would be able to call min and max on it with no problem. It would be nice if the language prevented us from trying to use something twice that can only be used once. Almost all modern languages, both statically and dynamically typed, will fail at runtime in these situations.]]></description><guid isPermaLink="false">0f587c1a-da0e-46d2-bee3-3a3cc6fc5352</guid><pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Paul Kernfeld</dc:creator></item><item><title>My recommended crates for computer graphics</title><link>https://jonathansteyfkens.com/rust/graphics/compute/2018/09/15/my-recommended-cg-crates.html</link><description><![CDATA[It’s been a while since my last post! Lately I’ve been quite demotivated to actually produce something worth while for doing a writeup about. Instead I offer you some thoughts on my recent findings using rust and some crates I found particularly useful for computer graphics.]]></description><guid isPermaLink="false">3cd66c51-9cd4-4548-9a94-214d3f241ae2</guid><pubDate>Sat, 15 Sep 2018 22:15:00 +0000</pubDate><dc:creator>Jonathan Steyfkens</dc:creator></item><item><title>Function composition in Rust using a custom smart pointer</title><link>https://bsoptei.github.io/</link><description><![CDATA[Still drunk with the power of function composition, I started to play around with the technique in Rust, a language I've been experimenting with. Rust is a low-level language with a strict compiler that saves you from doing dangerous things. Furthermore, Rust is a functional language. It has several concepts and features inspired by Haskell (read more) and Scala for example. The design of Rust makes it highly expressive and attractive.]]></description><guid isPermaLink="false">b5f32e7e-843c-40cf-8c6c-126bc74e6c4e</guid><pubDate>Sat, 15 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Balázs Söptei</dc:creator></item><item><title>You can&apos;t &quot;turn off the borrow checker&quot; in Rust</title><link>https://words.steveklabnik.com/you-can-t-turn-off-the-borrow-checker-in-rust</link><description><![CDATA[Every once in a while, someone will talk about unsafe in Rust, and how it “turns off the borrow checker.” I think this framing leads to misconceptions about unsafe and how it interacts with safe code. Here’s some code that causes a borrow checker... | Steve Klabnik | “The most violent element in society is ignorance.” - Emma Goldman]]></description><guid isPermaLink="false">a64aef93-521d-414e-ae6e-853f147b1180</guid><pubDate>Fri, 14 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Steve Klabnik</dc:creator></item><item><title>My RustConf 2018 Closing Keynote</title><link>https://kyren.github.io/2018/09/14/rustconf-talk.html</link><description><![CDATA[I said in my talk that I would post a potentially more interesting long-form version of the talk that includes things that I couldn’t fit into the 30-ish minute time slot. What I’ve included below is my original long-form version of this talk, but my original intention was not to post this as-is. Originally I wanted to clean this up a bit more and make this into something that wasn’t so much a giant wall of text, but after I started doing this I realized that I was just rewriting it entirely, and at that rate I would never get around to releasing it, which I promised I would do in a timely manner.]]></description><guid isPermaLink="false">68ff6ef3-ead4-43c9-8813-f355d9f3710c</guid><pubDate>Fri, 14 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Catherine West</dc:creator></item><item><title>TOTP generator with account handling for multiple tokens</title><link>https://skarlso.github.io/2018/09/13/gotp/</link><description><![CDATA[ a totp generator I wrote a while ago in C++ but now it’s in rust. It can generate a token and save it into an account file that is AES encrypted. The password is never saved, so it’s secure enough to use it. One of it’s properties it will have over the c++ implementation is it’s safe, it uses a proper IV and once I’m done, it will also support encryption via PGP.]]></description><guid isPermaLink="false">c75159c1-4e8c-4b09-9371-430cc5971b94</guid><pubDate>Thu, 13 Sep 2018 08:01:00 +0100</pubDate><dc:creator>Gergely Brautigam</dc:creator></item><item><title>Rust Associated Type</title><link>https://medium.com/codechain/rust-associated-type-2281dbf98229</link><description><![CDATA[Associated Types in Rust are similar to Generic Types; however, Associated Types limit the types of things a user can do, which consequently facilitates code management. Among the Generic Types of traits, types that depend on the type of trait implementation can be expressed by using the Associated Type syntax. By comparing the Associated and Generic Types, you can get a better understanding of Associated Types.]]></description><guid isPermaLink="false">001f1e0d-3927-4e39-800e-68324a02887a</guid><pubDate>Thu, 13 Sep 2018 06:50:57 +0000</pubDate><dc:creator>Seung Woo Kim</dc:creator></item><item><title>Postgres over TLS with postgres and r2d2_postgres</title><link>https://matthewkmayer.github.io/blag/public/post/postgres-tls/</link><description><![CDATA[In this post we’ll go over how to get the postgres crate and r2d2_postgres working with openssl for connection pooling with TLS.]]></description><guid isPermaLink="false">2fec1872-4519-4b08-8012-147db9dff5e0</guid><pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Matthew Mayer&apos;s</dc:creator></item><item><title>Announcing Rust 1.29</title><link>https://blog.rust-lang.org/2018/09/13/Rust-1.29.html</link><description><![CDATA[The Rust team is happy to announce a new version of Rust, 1.29.0. The two most significant things in this release aren’t even language features: they’re new abilities that Cargo has grown, and they’re both about lints: cargo fix can automatically fix your code that has warnings. cargo clippy is a bunch of lints to catch common mistakes and improve your Rust code.]]></description><guid isPermaLink="false">dc9c068f-0a7f-4a31-aec2-f30b51066b89</guid><pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate><dc:creator>The Rust Core Team</dc:creator></item><item><title>Measuring SmallVec Footprint with Smallvectune</title><link>https://llogiq.github.io/2018/09/13/smallvec.html</link><description><![CDATA[Rust is all about paying only for what you use, and gives us plenty tools to eliminate unneeded allocation. One of the tools that is used in a lot of crates (crates.io shows 98 dependent crates) is SmallVec. It is also used in the Rust compiler. I recently got around to speed up the operation of getting a SmallVec from a slice of copyable data. In short, they’re awesome.]]></description><guid isPermaLink="false">48eac964-8486-4cd6-83cb-3bca4ff5b616</guid><pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>Transparent encryption and decryption in rust with cryptostreams</title><link>https://neosmart.net/blog/2018/transparent-encryption-and-decryption-in-rust-with-cryptostreams/</link><description><![CDATA[The rust community has fortunately adopted the OpenSSL bindings as the approach of choice, and the rust-openssl crate makes it easy to both bundle and consume the openssl bindings from rust in a cross-platform manner. What it doesn’t do is make encryption and decryption any easier than OpenSSL itself does.

Enter the cryptostream crate. Released on github and on crates.io under the MIT public license, cryptostream finally provides an easy and transparent way to add encryption and decryption to pipelines involving objects implementing Read or Write, making encryption (or decryption) as easy as creating a new cryptostream object, passing in an existing Read/Write impl, and then reading/writing from/to the cryptostream instead.]]></description><guid isPermaLink="false">2e015136-8213-4fa3-afe0-78bf520d1da6</guid><pubDate>Wed, 12 Sep 2018 23:35:55 +0000</pubDate><dc:creator>Mahmoud Al-Qudsi</dc:creator></item><item><title>Parallelizing PNG, part 8: Rust macros for constant specialization</title><link>https://brionv.com/log/2018/09/12/parallelizing-png-part-8-rust-macros-for-constant-specialization/</link><description><![CDATA[In my last posts I covered profiling and some tips for optimizing inner loops in Rust code while working on a multithreaded PNG encoder. Rust’s macro system is another powerful tool for simplifying your code, and sometimes awesomeizing your performance…]]></description><guid isPermaLink="false">bec949a2-4c38-4646-ae0b-1d8638c506a6</guid><pubDate>Wed, 12 Sep 2018 15:26:54 +0000</pubDate><dc:creator>Brion Vibber</dc:creator></item><item><title>Rust: Pass-By-Value or Pass-By-Reference?</title><link>https://blog.ryanlevick.com/posts/rust-pass-value-or-reference/</link><description><![CDATA[The other day, a friend of mine who is learning Rust asked if Rust is a pass-by-value or a pass-by-reference language. For the unfamiliar, pass-by-value means that when passing an argument to a function it gets copied into the new function so that the value in the calling function and the value in the called function are two separate values. Changes to one will not in turn result in the same change to the other. Pass-by-reference, on the other hand, means that when passing an argument to a function, it doesn’t copy the value but rather the argument is merely a transparent reference to the original value. This means changes to the value in the called function change the value in the calling function since they are the same value.]]></description><guid isPermaLink="false">e112cc10-746d-4151-b0e4-76832be74e09</guid><pubDate>Wed, 12 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Ryan Levick</dc:creator></item><item><title>Rust and JavaScript Interop ↔️</title><link>https://blog.ryanlevick.com/posts/wasm-bindgen-interop/</link><description><![CDATA[In recent projects of mine, I’ve been using WebAssembly quite a bit. WebAssembly (Wasm) is “a new binary instruction format for a stack based virtual machine” that lets you use languages besides JavaScript to run code on a web page - usually either for performance reasons or to run code you’d like to share across different platforms. In my opinion, the most promising of these languages, due to its lack of a need for a runtime and great tooling is Rust.]]></description><guid isPermaLink="false">d72f5483-1247-46d8-8764-7ac5ec0fb2d3</guid><pubDate>Wed, 12 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Ryan Levick</dc:creator></item><item><title>How we organize a complex Rust codebase</title><link>https://blog.getseq.net/rust-at-datalust-how-we-organize-a-complex-rust-codebase/</link><description><![CDATA[At Datalust we’ve been busy building Flare: a storage engine for our log server, Seq, written in the Rust programming language. This post is a point-in-time look at how we've approached building this fairly complex piece of software in Rust in 2018. I’d like to share a few]]></description><guid isPermaLink="false">6313ebb2-076c-449b-8fb1-372c9b025168</guid><pubDate>Tue, 11 Sep 2018 22:26:05 +0000</pubDate><dc:creator>Ashley Mannix</dc:creator></item><item><title>Parallelizing PNG, part 7: Rust profiling on Linux</title><link>https://brionv.com/log/2018/09/11/parallelizing-png-part-7-rust-profiling-on-linux/</link><description><![CDATA[I already covered some inner-loop optimization tricks for low-level Rust code in mtpng, but how do you check how fast bits of your code are anyway?

The way to go is to use a sampling-based profiler native to your operating system. I’ve done most of my detailed profiling on Linux, using the “perf” tool.]]></description><guid isPermaLink="false">2cfb43bc-99fe-4fea-beb0-8e422c55376a</guid><pubDate>Tue, 11 Sep 2018 19:52:29 +0000</pubDate><dc:creator>Brion Vibber</dc:creator></item><item><title>From Rust to beyond: The C galaxy</title><link>https://mnt.io/2018/09/11/from-rust-to-beyond-the-c-galaxy/</link><description><![CDATA[This blog post is part of a series explaining how to send Rust beyond earth, into many different galaxies. The galaxy we will explore today is the C galaxy. This post will explain what C is (shortly), how to compile any Rust program in C in theory, and how to do that practically with our Rust parser from the Rust side and the C side. We will also see how to test such a binding.]]></description><guid isPermaLink="false">35458bae-bc62-40d7-ac3d-2dcd8ab1f469</guid><pubDate>Tue, 11 Sep 2018 07:49:07 +0000</pubDate><dc:creator>Ivan Enderlin</dc:creator></item><item><title>Rising Tide: building a modular web framework in the open</title><link>https://rust-lang-nursery.github.io/wg-net/2018/09/11/tide.html</link><description><![CDATA[The Network Services Working Group aims to improve the story for web development this year in several respects: by bolstering foundations like async/await, by improving the ecosystem of web-related crates, and by pulling these pieces together into a framework and book called Tide. The name “Tide” refers to “a rising tide lifts all boats”; the intent is to improve sharing, compatibility, and improvements across all web development and frameworks in Rust.]]></description><guid isPermaLink="false">1461a8b4-863b-40c1-bb2d-0ff077d738e1</guid><pubDate>Tue, 11 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Aaron Turon</dc:creator></item><item><title>Unit Type Params</title><link>https://leshow.github.io/post/unit_type_pattern/</link><description><![CDATA[I always enjoy reading blogs about patterns or tricks people have picked up writing Rust. I’ve seen this a few times but not read about it anywhere.

I’ve been doing class assignments from Operating Systems cs140e. I highly recommend this class if you know a bit of Rust and would like to try writing some lower level code. The class involves building bits of an OS for the raspberry pi.]]></description><guid isPermaLink="false">f712f29b-efed-4c75-a4a0-8523fa0b6d52</guid><pubDate>Mon, 10 Sep 2018 12:28:03 -0400</pubDate><dc:creator>Evan Cameron</dc:creator></item><item><title>GStreamer Rust bindings 0.12 and GStreamer Plugin 0.3 release</title><link>https://coaxion.net/blog/2018/09/gstreamer-rust-bindings-0-12-and-gstreamer-plugin-0-3-release/</link><description><![CDATA[After almost 6 months, a new release of the GStreamer Rust bindings and the GStreamer plugin writing infrastructure for Rust is out. As usual this was coinciding with the release of all the gtk-rs crates to make use of all the new features they contain.]]></description><guid isPermaLink="false">956dab4d-a04e-4278-bb20-906f4eac7a82</guid><pubDate>Mon, 10 Sep 2018 11:41:59 +0000</pubDate><dc:creator>Sebastian Dröge</dc:creator></item><item><title>Parallelizing PNG: Choosing Rust for mtpng</title><link>https://brionv.com/log/2018/09/09/parallelizing-png-part-5-choosing-rust-for-mtpng/</link><description><![CDATA[In my last post I wrapped up the patches to improve perceived performance of screenshots on the Linux GNOME desktop. With that done, why not implement my crazy plan for parallel PNG encoding to speed the actual save time?]]></description><guid isPermaLink="false">d8bbfe78-53bb-49df-9d7b-092d306492c0</guid><pubDate>Sun,  9 Sep 2018 23:32:41 +0000</pubDate><dc:creator>Brion Vibber</dc:creator></item><item><title>Sonnerie: A simple timeseries database</title><link>https://github.com/njaard/sonnerie</link><description><![CDATA[Sonnerie is a time-series database. Map a timestamp to a floating-point value. Store multiple of these series in a single database. Insert tens of millions of samples in minutes, on rotational media.]]></description><guid isPermaLink="false">9572581f-4d30-4abb-9aa8-8f7842b37117</guid><pubDate>Sat,  8 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Kalle Samuels</dc:creator></item><item><title>The Common Rust Traits</title><link>https://stevedonovan.github.io/rustifications/2018/09/08/common-rust-traits.html</link><description><![CDATA[In Rust, data types - primitives, structs, enums and any other ‘aggregate’ types like tuples and arrays - are dumb. They may have methods but that is just a convenience (they are just functions). Types have no relationship with each other.

Traits are the abstract mechanism for adding functionality to types and establishing relationships between them.]]></description><guid isPermaLink="false">83d6c5ed-e847-4807-8c6c-40e97f66b9d5</guid><pubDate>Sat,  8 Sep 2018 00:00:00 +0200</pubDate><dc:creator>Steve Donovan</dc:creator></item><item><title>Tower Web — Expanding the middleware stack</title><link>https://medium.com/@carllerche/tower-web-expanding-the-middleware-stack-f9bf55bfa109</link><description><![CDATA[tower-web version 0.2.2 has been released. It comes with a number of new features, which I will talk about in this post. Primarily, the middleware story is starting to come together. I will be expanding some on how middleware fits into Tower and web in general.]]></description><guid isPermaLink="false">e7fbc029-a108-4209-bbf4-9e152701d9a6</guid><pubDate>Fri,  7 Sep 2018 14:21:28 +0000</pubDate><dc:creator>Carl Lerche</dc:creator></item><item><title>Rust: My first impressions</title><link>https://erik.doernenburg.com/2018/09/rust-my-first-impressions/</link><description><![CDATA[At work I’m seeing more and more embedded software; over the past few years in, among others, coffee machines, forklifts, and cars. Embedded software needs to be fast and extremely efficient with hardware resources. In some cases it not even acceptable to have a tiny break for some garbage collection. So, typical tech stacks for backend development can’t be used, never mind anything that uses browser technologies. Unsurprisingly, almost all embedded software is written in C++, and, in fact, that is also what I used recently for a personal project with a micro-controller.

Looking through the remaining choices, I went past Golang, which uses garbage collection, and set my eyes on Rust. In this post I’ll describe my first impressions, some of the frustrating moments, but also the extremely impressive performance on a larger piece of code.]]></description><guid isPermaLink="false">6d814a89-7614-47d1-b3f4-b660279b379d</guid><pubDate>Fri,  7 Sep 2018 00:00:00 +0200</pubDate><dc:creator>Erik Dörnenburg</dc:creator></item><item><title>Rust Faster SIMD edition</title><link>https://llogiq.github.io/2018/09/06/fast.html</link><description><![CDATA[It’s been a while since I’ve been playing the benchmarksgame with Rust. But I recently found an interesting crate called packed_simd which had a SIMD-ified version of some benchmarks, so as Rust stable now has stdsimd, we should be able to speed up our benchmarks quite a bit.]]></description><guid isPermaLink="false">bf9e8fe4-c788-47c9-9a8a-27ee3fa0b20f</guid><pubDate>Thu,  6 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>Beware the rust cache on Travis</title><link>https://levans.fr/rust_travis_cache.html</link><description><![CDATA[Today, I was working on optimizing my travis builds to speed them up, especially in the direction of caching. Travis allows you to set cache: cargo in your .travis.yml to enable caching for rust projects and caching is cool: it avoids having to rebuild all dependencies all the time, speeding up the builds. Or does it?]]></description><guid isPermaLink="false">427e3260-79d6-4050-a6be-c1695f37db19</guid><pubDate>Wed,  5 Sep 2018 17:00:00 +0200</pubDate><dc:creator>Victor &quot;Levans&quot; Berger</dc:creator></item><item><title>Beware the rust cache on Travis</title><link>https://levans.fr/rust_travis_cache.html</link><description><![CDATA[Today, I was working on optimizing my travis builds to speed them up, especially in the direction of caching. Travis allows you to set cache: cargo in your .travis.yml to enable caching for rust projects and caching is cool: it avoids having to rebuild all dependencies all the time, speeding up the builds.]]></description><guid isPermaLink="false">90da273a-d430-4fd5-891c-1aa33bc00588</guid><pubDate>Wed,  5 Sep 2018 17:00:00 +0200</pubDate><dc:creator>Victor &quot;Levans&quot; Berger</dc:creator></item><item><title>Adventures in Rust: Futures and Tokio</title><link>http://bryangilbert.com/post/code/rust/adventures-futures-tokio-rust/</link><description><![CDATA[One of my newer hobbies recently has been learning and toying around with Rust. Recently, as part of this learning process, I've started implementing an IP address lookup service as a small side project. During the course of implementing this project I ran into what turned out to be a bit of a hurdle to tackle, specifically performing reverse dns resolution asynchronously.

My hope is that through exploring this problem, I can aid others in understanding these concepts which can be initially difficult grasp. This is especially so as the behavior and function of Futures vary wildly between various languages and runtimes.]]></description><guid isPermaLink="false">7b94766b-f2c3-42f6-b215-7b63f07a4e95</guid><pubDate>Tue,  4 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Bryan Gilbert</dc:creator></item><item><title>Rust at Datalust</title><link>https://blog.getseq.net/rust-at-datalust/</link><description><![CDATA[At Datalust we build a log server called Seq. It's really a database, written in C#, with its own SQL-based query language, that's specifically designed for storing and querying structured log data. In the past, Seq has managed log event storage through ESENT, which is a storage technology baked into Windows. For our cross-platform Seq 5 release we’ve built a storage engine called Flare in the Rust programming language to replace our usage of ESENT.]]></description><guid isPermaLink="false">a92cab79-16fc-46b9-9bdb-0eb21518db8c</guid><pubDate>Mon,  3 Sep 2018 22:18:30 +0000</pubDate><dc:creator>Ashley Mannix</dc:creator></item><item><title>Announcing Spirit</title><link>https://vorner.github.io/2018/09/03/Announcing-Spirit.html</link><description><![CDATA[Spirit is a crate that cuts down on boilerplate when creating unix daemons, with support for live configuration reloading.]]></description><guid isPermaLink="false">919b55ea-6ff7-4893-8c6f-1bd17b6cbab2</guid><pubDate>Mon,  3 Sep 2018 00:00:00 +0000</pubDate><dc:creator>Michal &apos;vorner&apos; Vaner</dc:creator></item><item><title>RPCS3 and Dolphin emulators on macOS using gfx-portability</title><link>https://gfx-rs.github.io/2018/09/03/rpcs3-dolphin.html</link><description><![CDATA[After improving functionality and performance of gfx-portability’s Metal backend through benchmarking Dota2, and verifying certain functionality through the Vulkan Conformance Test Suite (CTS), we decided to expand our testing to other projects. We quickly found two projects which matched our criteria: RPCS3 and Dolphin.]]></description><guid isPermaLink="false">6c60dc7f-81f5-4718-9bfa-4c68e7a7d1ab</guid><pubDate>Mon,  3 Sep 2018 00:00:00 +0000</pubDate><dc:creator>gfx-rs</dc:creator></item><item><title>Time difference between L1 cache fetch and memory fetch</title><link>https://nitish.ch/notes/time-difference-between-l1-cache-fetch-and-memory-fetch/</link><description><![CDATA[Aim: Measure how fast a fetch from L1 cache is when compared to a fetch from memory. Instead of writing pure assembly code, we will use Rust's inline assembly feature.]]></description><guid isPermaLink="false">3c7f3466-8495-4684-b0c2-e0b26ca9234c</guid><pubDate>Sun,  2 Sep 2018 22:15:24 +0000</pubDate><dc:creator>Nitish Chinta</dc:creator></item><item><title>Programming Servo: A generic “worker event-loop”</title><link>https://medium.com/programming-servo/programming-servo-a-generic-worker-event-loop-400a6f113a60</link><description><![CDATA[Let’s take a look at how in Rust you can have an algorithm generic over T, where T is further bound by a trait, which itself is generic over one of several parameters.]]></description><guid isPermaLink="false">850319b3-4515-4f9c-b833-67a391d5ab26</guid><pubDate>Sun,  2 Sep 2018 07:03:47 +0000</pubDate><dc:creator>Gregory Terzian</dc:creator></item><item><title>Rust pattern: Iterating an over a Rc&lt;Vec&lt;T&gt;&gt;</title><link>http://smallcultfollowing.com/babysteps/blog/2018/09/02/rust-pattern-iterating-an-over-a-rc-vec-t/</link><description><![CDATA[This post examines a particular, seemingly simple problem: given ownership of a Rc<Vec<u32>>, can we write a function that returns an impl Iterator<Item = u32>? It turns out that this is a bit harder than it might at first appear – and, as we’ll see, for good reason. I’ll dig into what’s going on, how you can fix it, and how we might extend the language in the future to try and get past this challenge.]]></description><guid isPermaLink="false">7610bbc1-58a1-413b-a4a3-dad7877ca1bd</guid><pubDate>Sun,  2 Sep 2018 00:00:00 -0400</pubDate><dc:creator>Niko Matsakis</dc:creator></item><item><title>Rust Factory Without Box (Trait Object)</title><link>https://singpolyma.net/2018/09/rust-factory-without-box-trait-object/</link><description><![CDATA[I’ve been playing around a lot with Rust recently and it’s quickly becoming my second-favourite programming language. One of the things I’ve been playing with is some Object Oriented design concepts as they might apply.]]></description><guid isPermaLink="false">c3d8acef-fe90-4a0c-9fc5-9061f0694581</guid><pubDate>Sat,  1 Sep 2018 17:52:00 +0000</pubDate><dc:creator>Stephen Paul Weber</dc:creator></item><item><title>Using RwLock and CondVars in Rust</title><link>https://tutorialedge.net/rust/using-rwlocks-and-condvars-rust/</link><description><![CDATA[Read many, write exclusive locks – RwLock Consider a situation where you have a resource that must be manipulated only a single thread at a time, but is safe to be queried by many—that is, you have many readers and only one writer.

While you could protect this resource with a mutex, the trouble is that the mutex makes no distinction between its lockers; every thread will be forced to wait, no matter what their intentions.]]></description><guid isPermaLink="false">44aebda5-9403-432d-b94e-d81449a1edbf</guid><pubDate>Sat,  1 Sep 2018 15:09:49 +0100</pubDate><dc:creator>Brian L. Troutwine</dc:creator></item><item><title>Primitives in Rust are Weird (and Cool)</title><link>https://speice.io/2018/09/primitives-in-rust-are-weird.html</link><description><![CDATA[I wrote a really small Rust program a while back because I was curious. I was 100% convinced itcouldn’t possibly run. And to my complete befuddlement, it compiled, ran, and produced a completely sensible output.]]></description><guid isPermaLink="false">deb45294-d269-481c-a767-f4fd7c00cf0f</guid><pubDate>Sat,  1 Sep 2018 00:00:00 -0400</pubDate><dc:creator>Bradlee Speice</dc:creator></item><item><title>GIR support in gnome-class</title><link>http://danigm.net/gnome-class-gir.html</link><description><![CDATA[Recently I've been working again in the rust port of libgepub, libgepub is C code, but in the rust-migration branch almost all the real functionality is done with rust and the GepubDoc class is a GObject wrapper around that code. For this reason I was thinking about to use gnome-class to implement GepubDoc. Gnome-class is a rust lib to write GObject code in rust that's compatible with the C binary API so then you can call this new GObject code written with gnome-class from C. So, libgepub is the excuse to start to implement GIR in gnome-class.]]></description><guid isPermaLink="false">d1f041f8-f77b-404b-a776-5615afef85f4</guid><pubDate>Sat,  1 Sep 2018 00:00:00 +0200</pubDate><dc:creator>danigm</dc:creator></item><item><title>O(1) sum_of_multiples() in Rust</title><link>https://nicholassterling.wordpress.com/2018/08/31/o1-sum_of_multiples-in-rust/</link><description><![CDATA[I had been working mostly in Scala for a while, then took a diversion into Swift and Objective C.  I wanted to learn another language after that, and had all but decided on Clojure.  But Rust kept nagging at me — there was something about it. So I watched some videos, then read the book, and then started the Rust track at Exercism.io.]]></description><guid isPermaLink="false">e989a06c-ac0a-4a49-9591-8867e574c37b</guid><pubDate>Fri, 31 Aug 2018 05:51:05 +0000</pubDate><dc:creator>Nicholas Sterling</dc:creator></item><item><title>Rust: Fail Fast and Loudly</title><link>https://blog.shivoa.net/2018/08/rust-fail-fast-and-loudly.html</link><description><![CDATA[To panic or to return a Result: why libraries in Rust must weigh their options rather than accepting a never-panic mandate.]]></description><guid isPermaLink="false">271f4485-7452-487c-a1ee-4043dac3c60e</guid><pubDate>Fri, 31 Aug 2018 02:58:00 +0100</pubDate><dc:creator>Shivoa Birch</dc:creator></item><item><title>Benchmarking a Rust web application</title><link>https://klausi.github.io/rustnish/2018/08/31/benchmarking-a-rust-web-application.html</link><description><![CDATA[I set out out my goal 9 for Rustnish: Write benchmark code that compares runtime performance of Rustnish against Varnish. Use cargo bench to execute the benchmarks.

The basic idea of a performance test here is to send many HTTP requests to the web service (the reverse proxy in this case) and measure how fast the responses arrive back. Comparing the results from Rustnish and Varnish should give us an idea if our performance expectations are holding up.]]></description><guid isPermaLink="false">715ee4bf-9164-4c58-aa4f-93f088859281</guid><pubDate>Fri, 31 Aug 2018 00:00:00 +0000</pubDate><dc:creator>klausi</dc:creator></item><item><title>Introduction to asynchronous programming in Rust</title><link>https://github.com/nrc/apr-intro</link><description><![CDATA[An alternate introdcution to the APR book. This book aims to be a comprehensive, up-to-date guide on the async story in Rust, appropriate for beginners and old hands alike. We assume you already know Rust fairly well, including having done some multi-threaded programming. If any Rust terms in this guide are unfamiliar, you should check out the Rust book.]]></description><guid isPermaLink="false">09fcee2d-1825-46a0-952f-7035c41b2b32</guid><pubDate>Thu, 30 Aug 2018 10:12:00 +0000</pubDate><dc:creator>Nick Cameron</dc:creator></item><item><title>Debugging an Rc&lt;T&gt; reference leak in Rust</title><link>https://people.gnome.org/~federico/blog/debugging-reference-leak-in-rust.html</link><description><![CDATA[The bug that caused two brown-paper-bag releases in librsvg — because it was leaking all the SVG nodes — has been interesting. Memory leaks in Rust? Isn't it supposed to prevent that? Well, yeah, but the leaks were caused by the C side of things, and by unsafe code in Rust, which does not prevent leaks.]]></description><guid isPermaLink="false">09bd9199-be43-439f-ad36-d22904a73fb1</guid><pubDate>Wed, 29 Aug 2018 16:47:13 -0500</pubDate><dc:creator>Federico Mena Quintero</dc:creator></item><item><title>Feasible functors in Rust</title><link>https://varkor.github.io/blog/2018/08/28/feasible-functors-in-rust.html</link><description><![CDATA[withoutboats, one of the Rust language design team, recently posted a thread on the infeasibility of monads as a useful abstraction technique in Rust, as a response to the persistence of some (usually from outside the Rust community) in claiming that “Rust is doing things incorrectly” by developing specific solutions to problems, rather than using a general category theoretic framework for everything. The points demonstrate real difficulties with attempting to use a general framework for these problems and to me serves perfectly as a “the ball’s in your court now” to anyone claiming Rust is ignoring theory and coming up with unnecessary solutions to solved problems: if you think Rust could use monadic abstractions, you have to be able to address these counterarguments.]]></description><guid isPermaLink="false">5d84ad61-702d-400b-ac40-6325904e031d</guid><pubDate>Tue, 28 Aug 2018 12:20:10 +0000</pubDate><dc:creator>varkor</dc:creator></item><item><title>Programming Servo: the makings of a task-queue</title><link>https://medium.com/programming-servo/programming-servo-the-makings-of-a-task-queue-b4138cd246ca</link><description><![CDATA[In Servo, task-sources are implemented via a channel, whose sender is cloned for each specific task-source, and where tasks are messages sent on the channel and containing a closure representing the actual task.]]></description><guid isPermaLink="false">ed925df2-a1c7-4125-a27c-7cbda8dbac71</guid><pubDate>Tue, 28 Aug 2018 10:11:58 +0000</pubDate><dc:creator>Gregory Terzian</dc:creator></item><item><title>From Rust to beyond: The ASM.js galaxy</title><link>https://mnt.io/2018/08/28/from-rust-to-beyond-the-asm-js-galaxy/</link><description><![CDATA[The second galaxy that our Rust parser will explore is the ASM.js galaxy. This post will explain what ASM.js is, how to compile the parser into ASM.js, and how to use the ASM.js module with Javascript in a browser. The goal is to use ASM.js as a fallback to WebAssembly when it is not available. I highly recommend to read the previous episode about WebAssembly since they have a lot in common.]]></description><guid isPermaLink="false">10c577b9-fdf3-4aa3-80dd-78c6e4abb8c7</guid><pubDate>Tue, 28 Aug 2018 07:39:03 +0000</pubDate><dc:creator>Ivan Enderlin</dc:creator></item><item><title>Serde Deserialize This or That into u64</title><link>https://noyez.gitlab.io/post/2018-08-28-serilize-this-or-that-into-u64/</link><description><![CDATA[Recently I ran into a bug in my code; hey, it happens. The bug was that I had a struct which could serialize into json, but could not deserialize from its own json. The struct holds a value for a mac address, which is 48-bit integer (that i store in a u64), but it is serialized using the network interface name. For example on my mac, i have a network interface named en1 with the mac address of 20:c9:d0:b0:a4:71.]]></description><guid isPermaLink="false">a2e99609-1298-4f79-b2f3-0cce908a701f</guid><pubDate>Tue, 28 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Noyez</dc:creator></item><item><title>Oxidizing sourmash: WebAssembly</title><link>https://blog.luizirber.org/2018/08/27/sourmash-wasm/</link><description><![CDATA[In "Oxidizing sourmash: Python and FFI" I described my road to learn Rust, but something that I omitted was that around the same time the WebAssembly support in Rust started to look better and better and was a huge influence in my decision to learn Rust. Reimplementing the sourmash C++ extension in Rust and use the same codebase in the browser sounded very attractive, and now that it was working I started looking into how to use the WebAssembly target in Rust.]]></description><guid isPermaLink="false">a7804e3a-d98b-4135-9d38-e75aeb294961</guid><pubDate>Mon, 27 Aug 2018 15:30:00 -0300</pubDate><dc:creator>Luiz Irber</dc:creator></item><item><title>Thoughts on Rust from a PHP developer!</title><link>https://www.smashing-bugs.tk/software-development/rust/2018/08/27/on-rust-from-a-php-developer.html</link><description><![CDATA[I first starting learning Rust about 6 months ago, I was looking for a new language to learn when I came across it. At first I thought Rust was only meant to be a low level, systems programming language, but the more I learned, the more I realised the potential it has for high level programming and web applications. Also, along the way I learned many ways in which Rust prevents many of the typical bugs often found in applications written in other programming languages.]]></description><guid isPermaLink="false">90241d58-f6a1-4df5-9c3f-15c94998c6df</guid><pubDate>Mon, 27 Aug 2018 14:41:11 +0000</pubDate><dc:creator>Diego Cabrejas</dc:creator></item></channel></rss>