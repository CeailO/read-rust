<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - All Posts</title><link>https://readrust.net/</link><description>All Posts posts on Read Rust</description><item><title>Organizational Debt</title><link>https://boats.gitlab.io/blog/post/rust-2019/</link><description><![CDATA[We all know that classic aphorism: Year comes to an end, Rust blog post press send. This is mine.

There are lots of cool technical improvements to Rust that I want the project to achieve this year, and a few in particular that I’m definitely going to be putting a lot of time into. But this blog post is going to talk about none of them. Instead, I want to talk about organizational debt, and how badly the Rust project needs to deal with it in 2019.]]></description><guid isPermaLink="false">f0adf24b-6589-4306-a580-6cef894ad3b7</guid><pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate><dc:creator>withoutboats</dc:creator></item><item><title>A Love Letter to Rust Macros</title><link>https://happens.lol/posts/a-love-letter-to-rust-macros/</link><description><![CDATA[It’s no secret to people who know me that I’m a huge fan of the Rust programming language. I could talk for hours about the brilliance of the ownership system, my irrational longing for natively compiled languages without garbage collection, or the welcoming community that finally moved me to take a more active part in open source projects. But for a start, I just want to highlight one of my favourite features: Macros.]]></description><guid isPermaLink="false">749e48bb-50e5-4e7e-8e17-9dd73e1776f2</guid><pubDate>Tue,  9 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Hilmar Wiegand</dc:creator></item><item><title>Rust Actix Web + Magic link authentication</title><link>https://blog.approveapi.com/tutorials/rust-actix-web-approveapi-magic-login-link/</link><description><![CDATA[In this tutorial, we'll create web app using the Rust actix-web framework and implement magic link authentication powered by ApproveAPI's Rust library.]]></description><guid isPermaLink="false">98a6bda4-dcb1-419a-bf9a-6be8f4b88b8b</guid><pubDate>Tue,  9 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Alex Grinman</dc:creator></item><item><title>Javascript evaluator part 2: Parser and Basic evaluator</title><link>https://medium.com/@retep007/javascript-evaluator-part-2-parser-and-basic-evaluator-d306ff1aec83</link><description><![CDATA[This is the second part of writing Javascript evaluator series. I’m going to talk about my project developing Javascript evaluator in Rust. This post is going to briefly introduce Parsing that’s build on top of the results from Lexer in the first post. Then I will cover elements of evaluation of abstract syntax tree (AST).]]></description><guid isPermaLink="false">63c81ff0-ee39-437f-a299-70173f639777</guid><pubDate>Mon,  8 Apr 2019 06:39:05 +0000</pubDate><dc:creator>Peter Hrvola</dc:creator></item><item><title>Alacritty Version 0.3.0</title><link>https://blog.christianduerr.com/alacritty_030_announcement</link><description><![CDATA[ Alacritty is a terminal emulator with a strong focus on simplicity and performance. With such a strong focus on performance, included features are carefully considered and you can always expect Alacritty to be blazingly fast. By making sane choices for defaults, Alacritty requires no additional setup. However, it does allow configuration of many aspects of the terminal. With this release, Alacritty has officially entered the beta stage – there are still a few missing features and bugs to be fixed, but it is already used by many as a daily driver.]]></description><guid isPermaLink="false">700e8697-e3f3-49ff-bf87-03cfb598ff0d</guid><pubDate>Sun,  7 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Christian Duerr</dc:creator></item><item><title>hunter: ranger-like file browser written in Rust</title><link>https://github.com/rabite0/hunter</link><description><![CDATA[hunter is a fast and lag-free file browser/manager for the terminal. It features a heavily asynchronous and multi-threaded design and all disk IO happens off the main thread in a non-blocking fashion, so that hunter will always stay responsive, even under heavy load on a slow spinning rust disk, even with all the previews enabled.]]></description><guid isPermaLink="false">c702047e-47c7-493a-b73e-55a4394eb6da</guid><pubDate>Sun,  7 Apr 2019 00:00:00 +0000</pubDate><dc:creator>rabite0</dc:creator></item><item><title>A Basic Web Application with Rust and Actix-web</title><link>https://zupzup.org/rust-webapp/</link><description><![CDATA[As a first little project in Rust I thought I'd do something familiar, so I created a small web application, which we'll check out in this post.]]></description><guid isPermaLink="false">dcd70897-0b31-4930-b57d-3fc567e64c98</guid><pubDate>Sun,  7 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Mario Zupan</dc:creator></item><item><title>Arenas vs. Indices</title><link>https://llogiq.github.io/2019/04/06/arena.html</link><description><![CDATA[When optimizing code, one thing I’m always looking for is memory layout and access patterns. One such pattern is an arena: Reserve some sufficiently large space to put your objects in, then allocate by incrementing a pointer. If your objects are of a uniform type, you can basically simplify this to a Vec of that type.]]></description><guid isPermaLink="false">5af2fc94-f73d-498a-99b8-15400fad948e</guid><pubDate>Sat,  6 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>Linkerd v2: How Lessons from Production Adoption Resulted in a Rewrite of the Service Mesh</title><link>https://www.infoq.com/articles/linkerd-v2-production-adoption</link><description><![CDATA[Linkerd 2.0 introduced a substantial rewrite of the widely adopted service mesh, using a split between Go and Rust. In this article, we discuss the lessons learned in the "cauldron of production adoption", and how those lessons became the basis of Linkerd 2.x’s philosophy, design, and implementation.]]></description><guid isPermaLink="false">cbaf5407-81db-4367-9b58-ff9cc668b1a3</guid><pubDate>Fri,  5 Apr 2019 00:00:00 +0000</pubDate><dc:creator>William Morgan</dc:creator></item><item><title>Our journey from nightly to stable Rust</title><link>https://blog.datalust.co/our-journey-from-rust-nightly-to-stable/</link><description><![CDATA[When we shipped Seq 5.0 back in November, our new storage engine was compiled against Rust's unstable nightly channel. As of Seq 5.1, we can instead use the supported stable channel. That feels like a bit of a milestone so I'd like to share a few details about our journey from nightly to stable, and celebrate the progress the community has made on the language, libraries, and tooling over the last twelve months that made that journey painless for us.]]></description><guid isPermaLink="false">7e90b841-ce0c-47f1-b6ab-420aa7d7bb35</guid><pubDate>Thu,  4 Apr 2019 23:44:23 +0000</pubDate><dc:creator>Ashley Mannix</dc:creator></item><item><title>Ocypod: Redis-backed job queue server with an easy to use HTTP interface</title><link>https://ocypod.readthedocs.io/</link><description><![CDATA[Ocypod is a language-agnostic, Redis-backed job queue server with an easy to use HTTP interface. Its focus is on handling and monitoring long running jobs.]]></description><guid isPermaLink="false">4fb7d3bc-05c5-4c23-abaa-70294fa23715</guid><pubDate>Wed,  3 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Dave Challis</dc:creator></item><item><title>Inko Programming Language</title><link>https://inko-lang.org/</link><description><![CDATA[Concurrent and safe object-oriented programming, without the headaches.]]></description><guid isPermaLink="false">a9c1b96b-5e31-432e-bbb8-c18a943d03b9</guid><pubDate>Wed,  3 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Yorick Peterse</dc:creator></item><item><title>Moving on from Rails and what&apos;s next</title><link>https://blog.seantheprogrammer.com/moving-on-from-rails-and-whats-next</link><description><![CDATA[It’s been more than 6 years since my first commit to Ruby on Rails. I had just gotten my first full time Ruby position, was excited to move away from PHP, and wanted to give back. Since then I made 1452 commits to the project. Today, I am finally ready to move on from Rails.]]></description><guid isPermaLink="false">94f04f9a-9a74-4e3c-9d96-02fec8e01229</guid><pubDate>Tue,  2 Apr 2019 11:43:23 -0700</pubDate><dc:creator>Sean Griffin</dc:creator></item><item><title>Crossing the Rust FFI frontier with Protocol Buffers</title><link>https://hacks.mozilla.org/2019/04/crossing-the-rust-ffi-frontier-with-protocol-buffers/</link><description><![CDATA[The Firefox Application Services engineering team made the decision to use Rust to build cross-platform components for Firefox Sync, powering Firefox Accounts across many devices. They are implementing core business logic using Rust and wrapping it in a thin platform-native layer, such as Kotlin for Android and Swift for iOS.]]></description><guid isPermaLink="false">3046fc78-93d2-4298-a8ae-134f2fbd29b9</guid><pubDate>Tue,  2 Apr 2019 14:42:47 +0000</pubDate><dc:creator>Edouard Oger</dc:creator></item><item><title>Javascript evaluator part 1: Lexing</title><link>https://medium.com/@retep007/javascript-lexing-for-high-performance-f9a800ec930d</link><description><![CDATA[In this post I will describe my latest findings from writing my own Javascript lexer in Rust-lang. I will start by briefly describing what lexing is. Then, I will continue explaining how to implement state machines in Rust-lang. Next, I talk about how to use state machines for Javascript lexing. Last but not least, I cover further performance optimizations of my lexer.]]></description><guid isPermaLink="false">0ee4dffd-3f5f-4c26-9a66-5a2c94db3ace</guid><pubDate>Tue,  2 Apr 2019 06:08:32 +0000</pubDate><dc:creator>Peter Hrvola</dc:creator></item><item><title>Explained: How does async work in Rust?</title><link>https://dev.to/gruberb/explained-how-does-async-work-in-rust-46f8</link><description><![CDATA[This article will outline an overview of the why and how async exists in Rust.]]></description><guid isPermaLink="false">881b9dbf-f50a-4a3d-9992-de8c093250bf</guid><pubDate>Tue,  2 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Bastian Gruber</dc:creator></item><item><title>WASI example using Rust and Lucet</title><link>https://hermanradtke.com/2019/04/01/wasi-example-using-rust-and-lucet.html</link><description><![CDATA[Lucet is Fastly’s native WebAssembly compiler and runtime. Using the Lucet runtime and Rust’s wasm32-unknown-wasi target, we can create a WASM program that runs on the server.]]></description><guid isPermaLink="false">6d648c86-cd0a-4f11-ac22-af2fe977f6d6</guid><pubDate>Mon,  1 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Herman J. Radtke III</dc:creator></item><item><title>How to Mock Time in Rust Tests and Cargo Gotchas We Met</title><link>https://blog.iany.me/2019/03/how-to-mock-time-in-rust-tests-and-cargo-gotchas-we-met</link><description><![CDATA[I'm working in a team developing a big Rust project recently. The project has some features depending on time. We, the developers, want to be able to mock the time in test. In this post, I'll talk about the problems we have met, mostly related to Cargo.]]></description><guid isPermaLink="false">54d19ed4-0cb7-4ab9-939e-5afcdf8b0ca5</guid><pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Ian Yang</dc:creator></item><item><title>Mocking in Rust with conditional compilation</title><link>https://klausi.github.io/rustnish/2019/03/31/mocking-in-rust-with-conditional-compilation.html</link><description><![CDATA[When writing automated unit tests for your application you will probably need to use mocks at some point. Classical object-oriented programming languages such as PHP solve this with reflection where mock object types are created during test runtime. The code under test expects a certain interface or class and the test code passes mock objects that implement the interface or are a subclass.]]></description><guid isPermaLink="false">5b355e5c-bc78-4134-91a2-c383b350d5f8</guid><pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate><dc:creator>klausi</dc:creator></item><item><title>Five Super Helpful Rust Things That Nobody Told You About</title><link>https://saghm.github.io/five-rust-things/</link><description><![CDATA[Pretty-print debug, unimplemented!, ”..” struct literal operator, Pattern match guards, and Padding format operator.]]></description><guid isPermaLink="false">86c50475-46ad-47b1-83b7-a3d63fecbb4f</guid><pubDate>Sat, 30 Mar 2019 09:19:00 +0000</pubDate><dc:creator>Saghm Rossi</dc:creator></item><item><title>RaptorQ (RFC6330) and performance optimization in Rust</title><link>https://www.cberner.com/2019/03/30/raptorq-rfc6330-rust-optimization/</link><description><![CDATA[I recently decided to learn more about Rust, and wrote a high performance RaptorQ (RFC6330) library. RaptorQ is a fountain code, and the core of the algorithm is a lot of matrix math over GF(256) – which translates into lots of XORs and reads from lookup tables. After getting the initial implementation working, I set about optimizing it. Below is a journal of the steps I took to profile and optimize the implementation.]]></description><guid isPermaLink="false">eb668d47-71e6-4379-a39c-3abeadd136b3</guid><pubDate>Sat, 30 Mar 2019 02:11:47 +0000</pubDate><dc:creator>Christopher Berner</dc:creator></item><item><title>Noise Explorer</title><link>https://noiseexplorer.com/</link><description><![CDATA[Noise Explorer is an online engine for reasoning about Noise Protocol Framework Handshake Patterns. Noise Explorer allows you to design and validate Noise Handshake Patterns, to generate cryptographic models for formal verification and to explore a compendium of formal verification results for the most popular and relevant Noise Handshake Patterns in use today.]]></description><guid isPermaLink="false">f1c4efc6-6cb3-4b03-a445-6ee32bd804b7</guid><pubDate>Fri, 29 Mar 2019 00:50:00 +0000</pubDate><dc:creator>georgio</dc:creator></item><item><title>Introducing Smithy — WebAssembly framework for Rust</title><link>https://medium.com/@robert.balicki_2494/introducing-smithy-webassembly-framework-for-rust-679d8fe9c16</link><description><![CDATA[I’m extremely excited to announce the 0.0.2 release of Smithy, a web development framework for Rust! While it is a very pre-alpha version, it should be functional enough for others to start playing around with. Please, get your feet wet and provide feedback.]]></description><guid isPermaLink="false">a1396ee1-4c3f-47c5-b99c-d7af8ea455a0</guid><pubDate>Thu, 28 Mar 2019 22:28:07 +0000</pubDate><dc:creator>Robert Balicki</dc:creator></item><item><title>The Wrangler CLI: Deploying Rust with WASM on Cloudflare Workers</title><link>https://blog.cloudflare.com/introducing-wrangler-cli/</link><description><![CDATA[Today, we're open sourcing and announcing wrangler, a CLI tool for building, previewing, and publishing Rust and WebAssembly Cloudflare Workers. If that sounds like some word salad to you, that's a reasonable reaction.]]></description><guid isPermaLink="false">5643e56a-6a6f-435e-8625-b58ebb5dca22</guid><pubDate>Thu, 28 Mar 2019 16:08:45 +0000</pubDate><dc:creator>Ashley Williams</dc:creator></item><item><title>Announcing Lucet: Fastly’s native WebAssembly compiler and runtime</title><link>https://www.fastly.com/blog/announcing-lucet-fastly-native-webassembly-compiler-runtime</link><description><![CDATA[Today, we are thrilled to announce the open sourcing of Lucet, Fastly’s native WebAssembly compiler and runtime. WebAssembly is a technology created to enable web browsers to safely execute programs at near-native speeds. It has been shipping in the four major browsers since early 2017.]]></description><guid isPermaLink="false">900ee12b-4a68-4987-a635-980b9105da76</guid><pubDate>Thu, 28 Mar 2019 16:00:00 +0000</pubDate><dc:creator>Pat Hickey</dc:creator></item><item><title>Idiomatic monads in Rust</title><link>https://varkor.github.io/blog/2019/03/28/idiomatic-monads-in-rust.html</link><description><![CDATA[A pragmatic new design for high-level abstractions In this post, I’m going to describe a new approach to express monads in Rust. It is the most minimal design I have seen proposed and is, in my eyes, the first plausible design for such abstractions — those commonly known as “higher-kinded types”. This approach depends on a very minimal extension to Rust’s type system. In particular, this approach avoids the need for either higher-kinded types (e.g. as in this design) or full abstraction over traits (e.g. “traits for traits”). Most of the design challenges are tackled directly using existing features.]]></description><guid isPermaLink="false">42678207-257f-4a9c-868a-ab556d18f9d1</guid><pubDate>Thu, 28 Mar 2019 00:00:28 +0000</pubDate><dc:creator>varkor</dc:creator></item><item><title>A Story of Rust</title><link>https://jobs.zalando.com/tech/blog/story-rust/</link><description><![CDATA[Introducing Rust in an Enterprise Environment...]]></description><guid isPermaLink="false">f0be7972-25a7-4ff9-af00-904780465c8f</guid><pubDate>Thu, 28 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Christian Douven</dc:creator></item><item><title>Reviewing Sled: Part I</title><link>https://ayende.com/blog/186753-A/reviewing-sled-part-i</link><description><![CDATA[The Sled project is an embedded database written in Rust. I run into it a few times recently and given my day job, I decided to take a peek and understand how it works. The project talks about being Log Structure Merge (and also exposing this to the client) with B+Tree read performance. The last time I read an LSM codebase was quite some time ago, so this is going to be quite interesting, I hope.]]></description><guid isPermaLink="false">9c952180-dba4-4a50-8104-4d185ce7ac4b</guid><pubDate>Thu, 28 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Ayende Rahien</dc:creator></item><item><title>Face Detection with Tensorflow Rust</title><link>https://cetra3.github.io/blog/face-detection-with-tensorflow-rust/</link><description><![CDATA[One of the promises of machine learning is to be able to use it for object recognition in photos. This includes being able to pick out features such as animals, buildings and even faces. This article will step you through using some existing models to accomplish face detection using rust and tensorflow.]]></description><guid isPermaLink="false">d10fabc1-ddeb-4ac3-ab03-824bff125807</guid><pubDate>Thu, 28 Mar 2019 00:00:00 +0000</pubDate><dc:creator>cetra3</dc:creator></item><item><title>BoringTun, a userspace WireGuard implementation in Rust</title><link>https://blog.cloudflare.com/boringtun-userspace-wireguard-rust/</link><description><![CDATA[Today we are happy to release the source code of a project we’ve been working on for the past few months. It is called BoringTun, and is a userspace implementation of the WireGuard® protocol written in Rust.]]></description><guid isPermaLink="false">de32ac99-9bcf-4744-ab65-3f22398433d7</guid><pubDate>Wed, 27 Mar 2019 13:43:27 +0000</pubDate><dc:creator>Vlad Krasnov</dc:creator></item><item><title>Iterated Function System fractal visualizer in Rust</title><link>https://github.com/jherman3/ifs_fractal/blob/master/README.md</link><description><![CDATA[This is a toy program to render Iterated Function System fractals with Rust and OpenGL. Glium is used for OpenGL and the GUI is provided by imgui-rs.]]></description><guid isPermaLink="false">8c2f780c-fde4-4064-b179-ddc7deaedc98</guid><pubDate>Wed, 27 Mar 2019 00:00:00 +1100</pubDate><dc:creator>jherman3</dc:creator></item><item><title>Using the IOMMU for Safe and Secure User Space Network Drivers</title><link>https://www.net.in.tum.de/members/emmericp/</link><description><![CDATA[Commonly used user space network drivers such as DPDK or Snabb currently have effectivelyfull access to the main memory via the unrestricted Direct Memory Access (DMA) capabilities of the PCI Express (PCIe) device they are controlling. This can be a security issue, as the driver can use the PCIe devices DMA access to read and / or write to main memory. In this thesis, support for using the IOMMU via the vfio-pci driver from the Linux kernel for the user space network driver ixy was implemented in C and Rust and the IOMMU and its impact on the drivers were investigated.]]></description><guid isPermaLink="false">6af41799-4171-46ca-ab1f-572b8669da6e</guid><pubDate>Tue, 26 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Stefan Huber</dc:creator></item><item><title>Gloo Update: Onion Layers, Timers, and Events</title><link>https://rustwasm.github.io/2019/03/26/gloo-onion-layers.html</link><description><![CDATA[About two weeks ago, we kicked off our effort to collectively build Gloo, a modular toolkit for building fast and reliable Web apps and libraries with Rust and Wasm. We knew we wanted to explicitly cultivate the Rust and Wasm library ecosystem by spinning out reusable, standalone libraries: things that would help you out whether you were writing a green-field Web app in pure-Rust, building your own framework, or surgically inserting some Rust-generated Wasm into an existing JavaScript project. What was still fuzzy, and which we didn’t know yet, was how we were going design and expose these reusable bits.]]></description><guid isPermaLink="false">9ea71842-a6ca-41c6-8384-89c6a05d17cb</guid><pubDate>Tue, 26 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Nick Fitzgerald</dc:creator></item><item><title>Miri available as rustup component</title><link>https://www.ralfj.de/blog/2019/03/26/miri-as-rustup-component.html</link><description><![CDATA[Running your unsafe code test suite in Miri has just gotten even easier: Miri is now available as a rustup component!]]></description><guid isPermaLink="false">ff71674c-714c-4d6d-adde-bca7a03d697e</guid><pubDate>Tue, 26 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Ralf Jung</dc:creator></item><item><title>Seed: A frontend framework for Rust, via WebAssembly</title><link>https://seed-rs.org/</link><description><![CDATA[I'm distinguishing Seed through clear examples and documentation, and using wasm-bindgen/web-sys internally. I started this project after being unable to get existing frameworks working due to lack of documented examples, and inconsistency between documentation and published versions. My intent is for anyone who's proficient in a frontend framework to get a standalone app working in the browser within a few minutes, using just the quickstart guide.

Seed's different approach to view syntax also distinguishes it: rather than use an HTML-like markup similar to JSX, it uses Rust builtin types, thinly-wrapped by macros that allow flexible composition. This decision will not appeal to everyone, but I think it integrates more naturally with the language.]]></description><guid isPermaLink="false">2da4fac1-5cb0-463b-9654-427f70d25255</guid><pubDate>Tue, 26 Mar 2019 00:00:00 +0000</pubDate><dc:creator>David O&apos;Connor</dc:creator></item><item><title>Understanding Futures In Rust - Part 1</title><link>https://www.viget.com/articles/understanding-futures-in-rust-part-1/</link><description><![CDATA[Futures make async programming in Rust easy and readable. Learn how to use futures by building them from scratch.]]></description><guid isPermaLink="false">03a41715-2772-48f5-8a75-bd0d4d1d04c7</guid><pubDate>Tue, 26 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Joe Jackson</dc:creator></item><item><title>Entity Component Systems in Rust</title><link>https://ljcode.org/blog/ecs/</link><description><![CDATA[I realised early on that the heart of the game (engine) was going to be the ECS, and while there are many good Rust written crates for an ECS implementation available, I wanted to write my own as an exercise. And so getting it right (for some definition of right) early on would save me a lot of headaches later on down the track. In this post I'll explain the what/where/how/why and some of the intricacies of using Rust for it.]]></description><guid isPermaLink="false">80cba812-a035-4486-8ec8-14c34c637cfe</guid><pubDate>Tue, 26 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Luke Jones</dc:creator></item><item><title>Rust Basics: the Add Trait</title><link>https://chilimatic.hashnode.dev/rust-basics-the-add-trait-cjtoke4yh002t8hs1c61p82mz</link><description><![CDATA[In my journey for better understanding of anything I tend to always return to the basics.
To often we base our assumptions on blind 'guess-timations' where we don't understand why something is actually happening but we observed that certain patterns ...]]></description><guid isPermaLink="false">5ee0634e-47e9-4354-982f-fdbfdd60a3b1</guid><pubDate>Mon, 25 Mar 2019 16:27:00 +0000</pubDate><dc:creator>j</dc:creator></item><item><title>MeiliES - Event sourcing in Rust</title><link>https://blog.meilisearch.com/meilies-release/</link><description><![CDATA[MeiliES is an Event Sourcing database that uses the RESP (REdis Serialization Protocol) to communicate. We use the Redis protocol to simplify clients implementation. The portability problematics are resolved by using a full Rust implementation (we are using Sled as internal storage).]]></description><guid isPermaLink="false">ed083e12-489d-4720-8e59-eea15c03c3f8</guid><pubDate>Mon, 25 Mar 2019 14:16:32 +0000</pubDate><dc:creator>Thomas Payet</dc:creator></item><item><title>Kickstarting a database working group</title><link>https://internals.rust-lang.org/t/kickstarting-a-database-wg/9696</link><description><![CDATA[I posted the idea of a database WG on twitter recently and it was met with a lot of excitement. Also there was a post on reddit recently that proposed the same idea, taken from examples of where using Rust with databases is currently a painful experience. I would as part of this also want to work out a base charter to start the WG as well as setting up when and how to have regular meetings to discuss roadmaps and current projects that are being worked on.]]></description><guid isPermaLink="false">29538906-a949-430f-a129-f9c8dca4eb54</guid><pubDate>Mon, 25 Mar 2019 09:53:26 +0000</pubDate><dc:creator>Katharina Fey</dc:creator></item><item><title>Cross Compiling Rust for FreeBSD With Docker</title><link>https://www.wezm.net/technical/2019/03/cross-compile-freebsd-rust-binary-with-docker/</link><description><![CDATA[For a little side project I’m working on I want to be able to produce pre-compiled binaries for a variety of platforms, including FreeBSD. With a bit of trial and error I have been able to successfully build working FreeBSD binaries from a Docker container, without using (slow) emulation/virtual machines. This post describes how it works and how to add it to your own Rust project.]]></description><guid isPermaLink="false">a82e8094-4499-4915-9b77-0d40cce84878</guid><pubDate>Mon, 25 Mar 2019 04:45:00 +0000</pubDate><dc:creator>Wesley Moore</dc:creator></item><item><title>Zola 0.6.0: start of multi-lingual sites</title><link>https://www.vincentprouillet.com/blog/releasing-zola-0-6-0/</link><description><![CDATA[Zola gets the beginning of multi-lingual support and perf improvements.]]></description><guid isPermaLink="false">410c0a3f-026f-4e8c-9910-40745122a369</guid><pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Vincent Prouillet</dc:creator></item><item><title>tarssh: An async Rust SSH tarpit</title><link>https://hur.st/projects/tarssh/</link><description><![CDATA[tarssh is an SSH tarpit — a server that trickles an endlessly repeating introductory banner to clients for as long as it remains connected, in order to expend the resources of attackers. It's based on the same concept as Chris Wellons' Endlessh, a similar service written in C.]]></description><guid isPermaLink="false">9a041284-284c-472d-97c0-0e0cd407bb44</guid><pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Thomas Hurst</dc:creator></item><item><title>Generalizing Seqlocks</title><link>https://mtak-blog.github.io/generalizing-seqlocks</link><description><![CDATA[swym is a very performant Software Transactional Memory (STM) library. It uses a variation on the per-object Transactional Locking II algorithm. The paper does an excellent job explaining the algorithm, but it is not required reading for this article. swym is a generalization of seqlocks - one the TL2 paper almost achieves, but does not for whatever reason.]]></description><guid isPermaLink="false">b78c276e-61fa-41c0-90db-b706fe5864e3</guid><pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate><dc:creator>mtak-</dc:creator></item><item><title>The Phantom Builder</title><link>https://wiredforge.com/blog/phantom-builder/index.html</link><description><![CDATA[Recently on twitter, someone asked fora a practical explainer for PhantomData and while I don't have that I did want to share one place I have found PhantomData to be useful. This blog post is an overview of how I ended up using PhantomData in my builder patterns that require a generic type argument.]]></description><guid isPermaLink="false">c24a6d4f-b367-4b18-ad85-52fe59b7e6b3</guid><pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Robert Masen</dc:creator></item><item><title>Sonic: Fast, lightweight &amp; schema-less search backend</title><link>https://github.com/valeriansaliou/sonic</link><description><![CDATA[Sonic is a fast, lightweight and schema-less search backend. It ingests search texts and identifier tuples that can then be queried against in a microsecond's time.]]></description><guid isPermaLink="false">0dbd06f7-147e-404c-81ce-360e61e087e5</guid><pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Valerian Saliou</dc:creator></item><item><title>Redox OS 0.5.0</title><link>https://www.redox-os.org/news/release-0.5.0/</link><description><![CDATA[It has been one year and four days since the last release of Redox OS! In this time, we have been hard at work improving the Redox ecosystem. Much of this work was related to relibc, a new C library written in Rust and maintained by the Redox OS project, and adding new packages to the cookbook. We are proud to report that we have now far exceeded the capabilities of newlib, which we were using as our system C library before. We have added many important libraries and programs, which you can see listed below.]]></description><guid isPermaLink="false">c3e2f0b2-713e-4ab5-9126-103233acb271</guid><pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Jeremy Soller</dc:creator></item><item><title>My First 3 Weeks of Professional Rust</title><link>https://www.wezm.net/technical/2019/03/first-3-weeks-of-professional-rust/</link><description><![CDATA[For the last 15 years as a professional programmer I have worked mostly with dynamic languages. First Perl, then Python, and for the last 10 years or so, Ruby. I’ve also been writing Rust on the side for personal projects for nearly four years. Recently I started a new job and for the first time I’m writing Rust professionally. Rust represents quite a shift in language features, development process and tooling. I thought it would be interesting to reflect on that experience so far.]]></description><guid isPermaLink="false">98e50b2b-889a-49d1-9973-f1d39c9cc389</guid><pubDate>Sat, 23 Mar 2019 22:45:00 +0000</pubDate><dc:creator>Wesley Moore</dc:creator></item><item><title>Handmade Rust Part 3: Containers</title><link>http://stevenlr.com/posts/handmade-rust-3-containers/</link><description><![CDATA[The most commonly used kinds of containers are arrays and maps. Pretty much any other container type can be built using those two, so that’s what we’ll build today! Of course, just like for Unq, we won’t be making simple replacements, instead we’ll be making the most minimal containers necessary for now and add features later as needed, but we’ll be make them allocator aware.]]></description><guid isPermaLink="false">6ed35d04-359f-4971-9cf6-19d824cdcf72</guid><pubDate>Sat, 23 Mar 2019 17:12:54 +0100</pubDate><dc:creator>Steven Le Rouzic</dc:creator></item><item><title>Rust + Gtk = Wow</title><link>https://dorianpula.ca/2019/03/22/rust-gtk-wow/</link><description><![CDATA[As I’ve been experimenting with writing Rust apps, I attempted to create a small little GUI application. At first I attempted to setup everything with Qt, but C++/Qt interoperability with Rust is painful. Very, very painful. I experimented with some more radical UI frameworks such as Azul and Conrad. These have a lot of promise going forward. However for the here and now, I recommend looking at gtk-rs, Rust binding for Gtk.]]></description><guid isPermaLink="false">da7566eb-9da3-4f88-9c13-743fd67037a3</guid><pubDate>Fri, 22 Mar 2019 21:54:08 +0000</pubDate><dc:creator>Dorian Pula</dc:creator></item><item><title>Are we Database Yet?</title><link>https://www.reddit.com/r/rust/comments/b463rg/are_we_database_yet/</link><description><![CDATA[I'm giving a talk next month at our Rust Meetup about using Rust in production. I've been reflecting on my last few months using Rust after learning the language about a year ago. One of my most frustrating experiences tends to always be around the futures ecosystem, as that's where I oft-fruitless labour for hours before giving up on what I'm doing.

I do data engineering and software development work professionally, and these 2 areas are where I often find a lot of pain with using the language.

A few weeks ago I wanted to write something that takes csv files and writes them to a database. I used Apache Arrow's Rust library (which I've started contributing to this year) to do that. The idea was simple, Arrow has a CSV reader that can infer schema, so I map the schema's data types to a database's types, and then I sequentially write records in batches to the database.

I found the exercise quite painful, so I'd like to talk about databases and Rust.]]></description><guid isPermaLink="false">ea9c3fbe-c681-4b42-a0ef-3699a1612972</guid><pubDate>Sat, 23 Mar 2019 02:02:56 +1100</pubDate><dc:creator>nevi-me</dc:creator></item><item><title>Hands-on IoT applications with OpenWhisk and Rust</title><link>https://medium.com/the-theam-journey/hands-on-iot-applications-with-openwhisk-and-rust-acb9ef5bc166</link><description><![CDATA[In this article, we’ll explore Apache OpenWhisk (which we’ll refer to simply as OpenWhisk), an open-source, distributed serverless platform that allows us to execute functions in response to events. OpenWhisk supports a lot of languages out of the box and can be extended to use other languages. In our case, we are going to use Rust as our main primary language.]]></description><guid isPermaLink="false">784ce8bf-55af-48fc-9893-23f28a38c999</guid><pubDate>Fri, 22 Mar 2019 13:41:31 +0000</pubDate><dc:creator>Roberto Díaz</dc:creator></item><item><title>Rust All Hands 2019: Array iterators, Rayon, and more</title><link>https://developers.redhat.com/blog/2019/03/22/rust-all-hands-2019-array-iterators-rayon-and-more/</link><description><![CDATA[A few weeks ago, I had the pleasure of attending the second annual Rust All Hands meeting, hosted by Mozilla at their Berlin office. The attendees were a mix of volunteers and corporate employees covering the full range of Rust development, including the compiler, language, libraries, docs, tools, operations, and community. Although I’m sure there will be an official summary of the meeting (like last year’s), in this article, I’ll cover a few things I was directly involved in. First, I’ll look at a feature many developers have wanted for a long time…]]></description><guid isPermaLink="false">6450a97d-c96a-47df-b999-a865defe34ae</guid><pubDate>Fri, 22 Mar 2019 07:05:51 +0000</pubDate><dc:creator>Josh Stone</dc:creator></item><item><title>Your first CLI tool with Rust</title><link>https://www.demainilpleut.fr/your-first-cli-tool-with-rust/</link><description><![CDATA[We will go through on how we can build command line tools with Rust, and maybe have fun along the way.]]></description><guid isPermaLink="false">f59796ce-77bb-4c3e-b11a-161df3bde835</guid><pubDate>Fri, 22 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Jérémie Veillet</dc:creator></item><item><title>Helix: Improve the Performance of Rails with Rust</title><link>https://headway.io/blog/helix-improve-the-performance-of-rails-with-rust/</link><description><![CDATA[With Rust, you can do low-level number-crunching and bit-by-bit processing, while enjoying memory safety and concurrency features. With Helix, you can use your Rust code inside of a Rails project.]]></description><guid isPermaLink="false">1f1562d2-b784-4bda-84d4-a0dc68178793</guid><pubDate>Fri, 22 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Raphael Spencer</dc:creator></item><item><title>Portability benchmark of Dolphin Emulator on MacOS</title><link>https://gfx-rs.github.io/2019/03/22/dolphin-macos-performance.html</link><description><![CDATA[gfx-rs is a Rust project aiming to make graphics programming more accessible and portable, focusing on exposing a universal Vulkan-like API. It’s a single Rust API with multiple backends that implement it: Direct3D 12/11, Metal, Vulkan, and even OpenGL. We are also building a Vulkan Portability implementation based on it, which allows non-Rust applications using Vulkan to run everywhere. This post is focused on the Metal backend only.

Previously, we benchmarked Dota2 and were able to run many other applications and engines successfully, including Dolphin Emulator. For Dolphin, we previously focused on visual correctness. After games appeared to render correctly, we shifted our focus to performance to ensure they also render quickly.]]></description><guid isPermaLink="false">0b65aa06-68c5-4d0b-9160-6edb0ca35f34</guid><pubDate>Fri, 22 Mar 2019 00:00:00 +0000</pubDate><dc:creator>gfx-rs</dc:creator></item><item><title>The Embedded Working Group Newsletter - 17</title><link>https://rust-embedded.github.io/blog/newsletter-17/</link><description><![CDATA[This week's highlights: The Embedded Rust Showcase, Oxidize speakers announced, docs on interrupts, and Life before Main!]]></description><guid isPermaLink="false">d226973e-f9e9-46e7-8395-d63272cd6f61</guid><pubDate>Fri, 22 Mar 2019 00:00:00 +0000</pubDate><dc:creator>The Embedded Working Group</dc:creator></item><item><title>Learning Rust With Entirely Too Many Linked Lists</title><link>https://rust-unofficial.github.io/too-many-lists/</link><description><![CDATA[I fairly frequently get asked how to implement a linked list in Rust. The answer honestly depends on what your requirements are, and it's obviously not super easy to answer the question on the spot. As such I've decided to write this book to comprehensively answer the question once and for all. In this series I will teach you basic and advanced Rust programming entirely by having you implement 6 linked lists.]]></description><guid isPermaLink="false">34dfeb70-4900-4ef3-b6d5-674d3caf376d</guid><pubDate>Fri, 22 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Alexis Beingessner</dc:creator></item><item><title>Refactoring Varisat: 4. Heuristics</title><link>https://jix.one/refactoring-varisat-4-heuristics/</link><description><![CDATA[This is the fourth post in my series about refactoring varisat. In the last post we saw how conflict driven clause learning works, in this post we’re going to make it fast. To get there we add several smaller features that were already present in varisat 0.1. While there are still some things missing that varisat 0.1 supports, these are features like proof generation or incremental solving that don’t affect the solving performance.]]></description><guid isPermaLink="false">7f497632-cdeb-48fc-b03b-8abe30f7ac6e</guid><pubDate>Thu, 21 Mar 2019 11:46:30 +0100</pubDate><dc:creator>Jannis Harder</dc:creator></item><item><title>barrel.rs: a powerful schema migration builder&apos;s 0.5.0 release</title><link>https://rust-db.github.io/barrel/blog/releasing-050/</link><description><![CDATA[barrel makes writing migrations for different databases as easy as possible. It provides you with a common API over SQL, with certain features only provided for database specific implementations. This way you can focus on your Rust code, and stop worrying about SQL.]]></description><guid isPermaLink="false">554b2733-697f-41c7-b91b-0261acc1aa24</guid><pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Squirrel People</dc:creator></item><item><title>Chaining Functions Without Returning Self</title><link>https://randompoison.github.io/posts/returning-self/</link><description><![CDATA[It’s a common pattern in the Rust ecosystem to have a function return self at the end in order to enable method chaining. This approach is often used in combination with the builder pattern, though it can also be applied to a wide variety of other situations. The example demonstrates the most straightforward of these cases (i.e. initializing and modifying an object in a single statement), but, as I’m going to demonstrate, this approach quickly breaks down when applied to a wider variety of use cases.]]></description><guid isPermaLink="false">88233a0c-3917-4ec2-b2c5-bcfd322a9662</guid><pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate><dc:creator>David LeGare</dc:creator></item><item><title>Rust: The Hard Parts - Part One: References and borrowing</title><link>https://naftuli.wtf/2019/03/20/rust-the-hard-parts/</link><description><![CDATA[Rust has a perception of being a very difficult language to learn. I had a similar experience, but just as I was told, there is a point where things start to get a lot easier. This post aims to describe the hard parts that I had to get through in order to start being productive with Rust in the belief that this may help others get over the hill to that sweet spot of infinite bliss and productivity. In this post, I’m going to cover references and borrowing.]]></description><guid isPermaLink="false">dad7fd3a-4891-4ddc-bf77-81668ffd5ea7</guid><pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Naftuli Kay</dc:creator></item><item><title>Why Hashbrown Does A Double-Lookup</title><link>https://gankro.github.io/blah/hashbrown-insert/</link><description><![CDATA[I recently finished a detailed review of hashbrown, which will likely become the new implementation for rust's std::collections::HashMap. One of the most surprising things I found was in the implementation of insert. It was doing something that was so offensive to people who care about collection performance that we had designed an entire API to help people avoid it: it did two lookups in the map. However, after some more discussion and review, I concluded that this implementation was reasonable. This post will try to cover why that is.]]></description><guid isPermaLink="false">38a15a60-b3e5-49c5-9036-3af3d6bc43ff</guid><pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Alexis Beingessner</dc:creator></item><item><title>Web Development with Rust: Deploy your first App</title><link>https://dev.to/gruberb/web-programming-in-rust-02x-deploy-your-first-app-1k05</link><description><![CDATA[If you learn something new, always have an updated version of your project in production. It keeps you motivated. We cover the most common options of how to do this in and with Rust.]]></description><guid isPermaLink="false">6d82f826-46bb-4cb3-ba49-3a18c736f5ab</guid><pubDate>Tue, 19 Mar 2019 20:13:00 +0000</pubDate><dc:creator>Bastian Gruber</dc:creator></item><item><title>Refactoring Varisat: 3. Conflict Driven Clause Learning</title><link>https://jix.one/refactoring-varisat-3-cdcl/</link><description><![CDATA[This is the third post in my series about refactoring varisat. In this post the new code base turns into a working SAT solver. While you can use the command line tool or the library to solve some small and easy SAT problems now, there is still a lot ahead to gain feature and performance parity with varisat 0.1.

In the last post we saw how unit propagation is implemented. When some variables are known, unit propagation allows us to derive the values of new variables or finds a clause that cannot be satisfied. Unit propagation alone isn’t enough though, as there is no guarantee to make progress. To continue the search for a satisfying solution after propagating all assignments, it is necessary to make a guess. A natural way to handle this would be recursion and backtracking. This would give us a variant of the DPLL algorithm from which conflict driven clause learning evolved.]]></description><guid isPermaLink="false">da916659-e0c2-4c4c-a793-b4f7273dcd1f</guid><pubDate>Mon, 18 Mar 2019 20:00:53 +0100</pubDate><dc:creator>Jannis Harder</dc:creator></item><item><title>Governance Working Group announcement</title><link>https://internals.rust-lang.org/t/governance-working-group-announcement/9637</link><description><![CDATA[I’m very excited to announce the formation of the Governance working group, an offspring of the Core team. The high-level goal of the group is making the workings of the Rust project more predictable and transparent. The working group will examine, document, and propose improvements to some of the policies and procedures that we use to run the project. To that end, the Governance WG will take multiple viewpoints and investigate our current modes of working under the perspective of community members and project members alike. Our aim is to make the project more transparent and also make it easier for interested community members to give effective feedback and stay close to the project.]]></description><guid isPermaLink="false">dc9cf1b6-7814-4a3a-9e3e-adcd17835a81</guid><pubDate>Mon, 18 Mar 2019 16:01:23 +0000</pubDate><dc:creator>Florian Gilcher</dc:creator></item><item><title>Implementing a NES Emulator in Rust</title><link>http://www.michaelburge.us/2019/03/18/nes-design.html</link><description><![CDATA[Recently, I made an emulator for the Nintendo Entertainment Console(NES) - a game console first released in 1983. In this article, I’ll talk about how I used Rust to develop the emulator. I’ll cover questions like: What features does the emulator support? What games can it play? How did I approach the problem of emulating the NES? Did Rust’s type system or borrow checker interfere? Were there performance issues?]]></description><guid isPermaLink="false">54f59df5-bf2f-46e5-a817-0a31878f7cda</guid><pubDate>Mon, 18 Mar 2019 13:34:00 +0000</pubDate><dc:creator>Michael Burge</dc:creator></item><item><title>Building and augmenting libraries by calling Rust from JavaScript</title><link>https://opensource.com/article/19/3/calling-rust-javascript</link><description><![CDATA[Explore how to use WebAssembly (Wasm) to embed Rust inside JavaScript.]]></description><guid isPermaLink="false">208250d2-7529-4548-b658-0b76353e05de</guid><pubDate>Mon, 18 Mar 2019 03:02:00 -0400</pubDate><dc:creator>Ryan Levick</dc:creator></item><item><title>Variance in Rust: An intuitive explanation</title><link>https://ehsanmkermani.com/2019/03/16/variance-in-rust-an-intuitive-explanation/</link><description><![CDATA[Recently I made a presentation about subtyping and variance in Rust for our local Vancouver Rust meetup, but I still think intuition was rather lost in the formalism, so here’s my shot at explaining it as intuitively as I can.]]></description><guid isPermaLink="false">ee2c7f86-323c-49fe-a707-afc505088445</guid><pubDate>Sun, 17 Mar 2019 03:24:05 +0000</pubDate><dc:creator>Ehsan M. Kermani</dc:creator></item><item><title>Introducing cargo-instruments: zero-hassle profiling on macOS</title><link>https://www.reddit.com/r/rust/comments/b20eca/introducing_cargoinstruments_zerohassle_profiling/</link><description><![CDATA[cargo-instruments (github) is a cargo plugin that makes it easy to profile rust binaries on macOS.  tl;dr: cargo-instruments is a shim between cargo and Xcode's very powerful dtrace-backed diagnostic suite, Instruments. Out of the box, this lets you track cpu / thread usage, allocations, context switches, and a bunch of other stuff.]]></description><guid isPermaLink="false">b1715412-8fc8-4882-9230-71e2b95c4b55</guid><pubDate>Sun, 17 Mar 2019 13:18:32 +1100</pubDate><dc:creator>cmyr</dc:creator></item><item><title>Procedural macro in Rust 101</title><link>https://dev.to/naufraghi/procedural-macro-in-rust-101-k3f</link><description><![CDATA[How to pick a function and make it a macro with added superpowers.]]></description><guid isPermaLink="false">d10fac5d-46ac-49b4-a8e0-517cb3cdfcba</guid><pubDate>Sun, 17 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Matteo Bertini</dc:creator></item><item><title>Implementing a Hidden Markov Model in Rust</title><link>https://paulkernfeld.com/2019/03/17/hmmm.html</link><description><![CDATA[Over the past few months, I’ve implemented hmmm, a Rust library for Hidden Markov Models (HMMs). HMMs are a well-established statistical machine learning technique for modeling sequences of data. They have been applied to problems like speech recognition and bioinformatics. They are called “hidden” because each discrete time step is associated with a hidden state. Below, I’ll briefly discuss some challenges that I ran into while implementing this library.]]></description><guid isPermaLink="false">187cf7df-3448-4699-86f6-28e90a1a025f</guid><pubDate>Sun, 17 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Paul Kernfeld</dc:creator></item><item><title>Programming GPIO Interrupts in Rust</title><link>https://flowdsp.io/blog/stm32f3-01-interrupts/</link><description><![CDATA[Using Embedded Rust to configure and service a hardware interrupt on the STM32F3 Discovery board.]]></description><guid isPermaLink="false">4ba1b199-045c-4ba4-80e2-6741bc648f06</guid><pubDate>Sun, 17 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Antoine van Gelder</dc:creator></item><item><title>Packaging up a Rust Binary for Linux</title><link>https://dorianpula.ca/2019/03/15/packaging-up-a-rust-binary-for-linux/</link><description><![CDATA[How does one package a Rust app? I would check out creating a snap package (https://t.co/UYibrbPN7c). It worked alright for me, even though the format encourages sandboxing of apps which takes a bit to wrap your mind a bit. Or create a deb using cargo-deb and use the alien utility to transform that to a rpm.]]></description><guid isPermaLink="false">9082061f-b4a4-4aed-81e6-71a0c7e49b1a</guid><pubDate>Fri, 15 Mar 2019 21:48:17 +0000</pubDate><dc:creator>Dorian Pula</dc:creator></item><item><title>A Rust API for librsvg</title><link>https://people.gnome.org/~federico/blog/a-rust-api-for-librsvg.html</link><description><![CDATA[After the librsvg team finished the rustification of librsvg's main library, I wanted to start porting the high-level test suite to Rust. This is mainly to be able to run tests in parallel, which cargo test does automatically in order to reduce test times. However, this meant that librsvg needed a Rust API that would exercise the same code paths as the C entry points. At the same time, I wanted the Rust API to make it impossible to misuse the library.]]></description><guid isPermaLink="false">04f2e112-c86d-4468-9b75-d74f84429d69</guid><pubDate>Fri, 15 Mar 2019 13:36:47 -0600</pubDate><dc:creator>Federico Mena Quintero</dc:creator></item><item><title>Pulldown_cmark 0.3 release announcement</title><link>https://fullyfaithful.eu/pulldown-cmark/</link><description><![CDATA[pulldown_cmark, a fast pull parser for the CommonMark markdown standard written in Rust, has just seen its 0.3 release. It marks a milestone for renewed CommonMark test compliance and performance. In this blog post, we'll have a quick look at the goals of the rewrite, how they were achieved and what's next for the crate.]]></description><guid isPermaLink="false">ad1ab029-a374-4fde-8f62-6100bf699da2</guid><pubDate>Fri, 15 Mar 2019 08:19:00 +0000</pubDate><dc:creator>Marcus Klaas de Vries</dc:creator></item><item><title>Persy: an attempt to write a transactional storage engine in Rust</title><link>http://persy.rs/posts/persy-0.4.html</link><description><![CDATA[Persy is a single file storage engine, all the data, referencing structures and logs are kept in a single file. Persy support read-committed transactions, using copy on write to guarantee high concurrency and isolation, the data consistency is guaranteed by a transaction log that recover the operations in case of crash. Persy provide segments to organize records of different kinds and allow the scan on a single segment. Persy provide index implementation that can be used to associate any simple value to another value or a record reference. In Persy a record is a simple Vec<u8>, the content of the record is ignored by Persy, is just stored and retrieved on request.]]></description><guid isPermaLink="false">c3575790-8873-4860-bc2a-15ba5f636a42</guid><pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate><dc:creator>tglman</dc:creator></item><item><title>Writing an OS in Rust - Paging Implementation</title><link>https://os.phil-opp.com/paging-implementation/</link><description><![CDATA[This post shows how to implement paging support in our kernel. It first explores different techniques to make the physical page table frames accessible to the kernel and discusses their respective advantages and drawbacks. It then implements an address translation function and a function to create a new mapping.]]></description><guid isPermaLink="false">8d10af6d-6142-4201-87d6-32148ac9079c</guid><pubDate>Thu, 14 Mar 2019 21:03:00 +0000</pubDate><dc:creator>Philipp Oppermann</dc:creator></item><item><title>Fast, Bump-Allocated Virtual DOMs with Rust and Wasm</title><link>https://hacks.mozilla.org/2019/03/fast-bump-allocated-virtual-doms-with-rust-and-wasm/</link><description><![CDATA[Dodrio is a virtual DOM library written in Rust and WebAssembly. It takes advantage of both Wasm’s linear memory and Rust’s low-level control by designing virtual DOM rendering around bump allocation. Preliminary benchmark results suggest it has best-in-class performance.]]></description><guid isPermaLink="false">23efff3a-8be9-443e-bc32-9de200d2e173</guid><pubDate>Thu, 14 Mar 2019 16:54:44 +0000</pubDate><dc:creator>Nick Fitzgerald</dc:creator></item><item><title>Arraigning a Statement, vol. 2</title><link>https://llogiq.github.io/2019/03/14/stmt2.html</link><description><![CDATA[Last time we defined a minimum viable implementation for mutagen statement removal: Remove only function call statements whose results are not returned from the surrounding block and whose AST do not contain any Assign expressions.]]></description><guid isPermaLink="false">5826453d-6731-41d9-a4f5-f5dbce6ef1df</guid><pubDate>Thu, 14 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>Implementing a static stack usage analysis tool</title><link>https://blog.japaric.io/stack-analysis/</link><description><![CDATA[This blog covers the implementation details of cargo-call-stack v0.1.2. So, why would you ever want to analyze the stack usage of your program at compile time? The obvious answer is when you want to know if your application can stack overflow at runtime without actually running your program. This is important for embedded applications where stack overflows can corrupt memory, and it’s actually a hard requirement for certifying the functional safety of embedded applications.]]></description><guid isPermaLink="false">349a5a06-2dd8-475d-9911-4d777ca6250f</guid><pubDate>Wed, 13 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Jorge Aparicio</dc:creator></item><item><title>ActivityWatch automatic time-tracking software switches to Rust</title><link>https://forum.activitywatch.net/t/development-update-march-2019/189</link><description><![CDATA[While Python is a great language to quickly build new features in, it’s not great for performance or deploying to multiple platforms (especially Android). So @johan-bjareholt took on the tremendous task of reimplementing aw-server in the highly performant and secure programming language Rust. Since Rust compiles to Android we have built a library for use on Android, letting us avoid reimplement all of ActivityWatch to Android devices specifically (and vastly decreases the time to port future features like sync to Android).]]></description><guid isPermaLink="false">ec8871ce-7c85-42a8-bd0c-e85c09a2f04d</guid><pubDate>Tue, 12 Mar 2019 12:06:19 +0000</pubDate><dc:creator>Erik Bjäreholt</dc:creator></item><item><title>A Coding Retreat and Getting Embedded Rust Running on a SensorTag</title><link>https://www.wezm.net/technical/2019/03/sensortag-embedded-rust-coding-retreat/</link><description><![CDATA[This past long weekend some friends on I went on a coding retreat inspired by John Carmack doing similar in 2018. During the weekend I worked on adding support for the Texas Instruments SensorTag to the embedded Rust ecosystem. This post is a summary of the weekend and what I was able to achieve code wise.]]></description><guid isPermaLink="false">0febede4-eee9-43df-bd74-dd2a44dcb4fb</guid><pubDate>Tue, 12 Mar 2019 08:45:00 +0000</pubDate><dc:creator>Wesley Moore</dc:creator></item><item><title>Scientific computing: a Rust adventure [Part 1 - Zero-cost abstractions]</title><link>https://www.lpalmieri.com/posts/2019-03-12-scientific-computing-a-rust-adventure-part-1-zero-cost-abstractions/</link><description><![CDATA[We left, at the end of the previous episode, with an intuitive understanding of Rust’s ownership system: we worked with vectors of integers, Vec<i32>, and we came up with a naive - but surprisingly fast! - scalar product implementation followed by a very simple sort function using the bubble sort algorithm.

In this episode we will implement a generic version of the same scalar product routine. This will require the introduction of several key concepts concerning Rust’s type system: generics, traits, operators, associated types, Copy.]]></description><guid isPermaLink="false">e448a9b1-396d-4b48-8cba-40419fc3cce6</guid><pubDate>Tue, 12 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Luca Palmieri</dc:creator></item><item><title>Remote Development and Debugging of Rust with CLion</title><link>https://medium.com/nearprotocol/remote-development-and-debugging-of-rust-with-clion-39c38ced7cc1</link><description><![CDATA[Most in our team use CLion for Rust development which is especially great for local debugging, alas it is not free. Since we are developing a blockchain it requires careful orchestration of the nodes running on separate machines, and occasionally we need to debug some corner case on a remotely running node. CLion and other JetBrains products have great support of the remote development and debugging. However, unfortunately, Rust is not a primary language of CLion which makes configuration tricky. In this post we walk through the configuration of CLion for remote Rust development and debugging.]]></description><guid isPermaLink="false">0c70dd5f-51e6-4f07-8707-6783ca471d0c</guid><pubDate>Mon, 11 Mar 2019 01:18:15 +0000</pubDate><dc:creator>Maksym Zavershynskyi</dc:creator></item><item><title>Arraigning a Statement, vol. 1</title><link>https://llogiq.github.io/2019/03/11/stmt.html</link><description><![CDATA[This time in our “Mutating Rust” series, we want to tackle the most complex mutation so far: Statement removal. Now why do I think this is complex? It’s just removing the statement (or, as we bake our mutations into the code, activating at runtime, putting it behind an if), right?]]></description><guid isPermaLink="false">e216ede8-5599-48f4-a458-770944ef44f2</guid><pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>Making a basic game UI with imgui and ggez</title><link>http://iolivia.me/posts/imgui-ggez/</link><description><![CDATA[In this post I'll walk you through how you can create game user interface with imgui and ggez. I spent a lot of time trying to make this work for my game (which you can read more about here) and suffered greatly because of the lack of documentation, so I'm writing this so you don't have to!]]></description><guid isPermaLink="false">3afe3b54-7b4e-46a5-90c5-b6a23b5d803f</guid><pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Olivia Ifrim</dc:creator></item><item><title>Building the virtualization stack of the future with rust-vmm</title><link>https://opensource.com/article/19/3/rust-virtual-machine</link><description><![CDATA[rust-vmm facilitates sharing core virtualization components between Rust Virtual Machine Monitors.]]></description><guid isPermaLink="false">d3f4b805-773f-499e-84c8-b79fcb40631f</guid><pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Andreea Florescu</dc:creator></item><item><title>Hardware Debugging a Raspberry Pi using JTAG</title><link>https://github.com/rust-embedded/rust-raspi3-OS-tutorials/tree/master/0B_hw_debug_JTAG</link><description><![CDATA[Functionally, this tutorial is the same as the previous one, where we reset or power down the RPi. Around that, we add infrastructure for JTAG debugging.]]></description><guid isPermaLink="false">ae65ad4b-c966-483f-a57a-965ab7ba7d28</guid><pubDate>Sun, 10 Mar 2019 13:59:01 +0000</pubDate><dc:creator>Andre Richter</dc:creator></item><item><title>Intro to web programming in Rust for NodeJS developers</title><link>https://medium.com/@gruberbastian/intro-to-web-programming-in-rust-for-nodejs-developers-1a9c048c4de1</link><description><![CDATA[Rust is different. You can pick up Python or Ruby over the weekend, create a first CRUD application and be happy with the results. With Rust… with Rust you will struggle to pass a String to a different method, change and return it. You then will order the Rust book, see its size, *sigh* and get started. After a few weeks fighting through the book after work, you give up and wait until someone else creates an easy-to-follow tutorial. Here is your “easy” tutorial.]]></description><guid isPermaLink="false">58a0a3ec-5b93-4e53-bcd0-d8df56d02848</guid><pubDate>Sun, 10 Mar 2019 10:53:02 +0000</pubDate><dc:creator>Bastian Gruber</dc:creator></item><item><title>Making a Case: Rust for Python developers</title><link>https://medium.com/@rajasekar3eg/making-a-case-rust-for-python-developers-1a114e2d89f4</link><description><![CDATA[Python developers encompass a huge variety of developers. I am going to target use cases for a particular set of python developers: Machine Learning developers. But for others too, it might prove to be useful.]]></description><guid isPermaLink="false">02cf2c55-f306-4c76-a340-15148b8b1886</guid><pubDate>Sun, 10 Mar 2019 08:58:53 +0000</pubDate><dc:creator>Raja Sekar</dc:creator></item><item><title>In nightly Rust, &apos;await!&apos; may never return (dropping futures)</title><link>http://www.randomhacks.net/2019/03/09/in-nightly-rust-await-may-never-return/</link><description><![CDATA[I've been using the proposed await! and Future features in nightly Rust, and overall, I really like the design. But I did run into one surprise: await! may never return, and this has consequences I didn't fully understand. Let's take a look.]]></description><guid isPermaLink="false">eed8a936-e3c7-45b5-bc50-3e1b95ffb767</guid><pubDate>Sat,  9 Mar 2019 15:11:20 -0500</pubDate><dc:creator>Eric Kidd</dc:creator></item><item><title>WASP, a Lisp dialect for performant, concise Web Assembly modules</title><link>https://medium.com/@nbaltunian/wasp-a-lisp-dialect-for-performant-concise-web-assembly-modules-29f5f7282b6a</link><description><![CDATA[WASP is ‘a LISP programming language for extremely performant and concise web assembly modules.’ That means that you can use WASP to generate WASM modules.]]></description><guid isPermaLink="false">356cc6f0-1e2a-4060-8b81-df1d1d6cd911</guid><pubDate>Sat,  9 Mar 2019 04:24:29 +0000</pubDate><dc:creator>Noah</dc:creator></item><item><title>Resize images from S3 with AWS Lambda and Rust</title><link>https://matsimitsu.com/blog/2019-03-09-resize-images-from-s3-with-aws-lambda-and-rust/</link><description><![CDATA[Using Rust and AWS Lambda to thumbnail images, cheaply, relablity, and quickly.]]></description><guid isPermaLink="false">3ad2e4d8-ffb5-4dcc-870e-e5c8dae3ca2a</guid><pubDate>Sat,  9 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Robert Beekman</dc:creator></item><item><title>Should Rust channels panic on send if nobody&apos;s listening?</title><link>http://www.randomhacks.net/2019/03/08/should-rust-channels-panic-on-send/</link><description><![CDATA[Lately, I've been working on several real-world systems using Rust's async and tokio. As you can see on the areweasyncyet.rs site, this requires using nightly Rust and the experimental tokio-async-await library. I hope to talk more about these experiences soon! But today, I want to talk about channel APIs in Rust. A question was raised by @matklad on GitHub, "I've migrated rust-analyzer to crossbeam-channel 0.3, and the thing I've noticed is that every .send is followed by .unwrap. Perhaps we should make this unwrapping behavior the default, and introduce a separate checked_send which returns a Result?".]]></description><guid isPermaLink="false">09e6b7ba-69f9-4256-9ce5-c75ea253c3ec</guid><pubDate>Fri,  8 Mar 2019 16:42:27 -0500</pubDate><dc:creator>Eric Kidd</dc:creator></item><item><title>How productive is Rust?</title><link>https://medium.com/@woutergeraedts/how-productive-is-rust-e2260db28f09</link><description><![CDATA[We often get the question how productive working with Rust is. “We know that it is awesome, but isn’t it hard to learn? Don’t you struggle with the borrow checker?”. Well, we put it to the test in Google’s Hash Code 2019 programming competition.]]></description><guid isPermaLink="false">23fcf66c-3fff-4894-836d-32a880171b46</guid><pubDate>Fri,  8 Mar 2019 12:59:39 +0000</pubDate><dc:creator>Wouter Geraedts</dc:creator></item><item><title>clap v3 Update: No More Strings</title><link>https://kbknapp.dev/clap-v3-update-no-more-strings/</link><description><![CDATA[This is the second post in a series detailing the issues, progress, and design decisions used in clap v3. This post details removing the "stringly typed" nature of clap.]]></description><guid isPermaLink="false">710b4e1e-9882-413b-bf2d-9fc746502ede</guid><pubDate>Fri,  8 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Kevin K.</dc:creator></item><item><title>Torchbear - a fast and complete interpreter for the new Speakeasy langauge</title><link>https://github.com/foundpatterns/torchbear</link><description><![CDATA[Torchbear is a new programming environment currently available for Windows, Android, MacOS, and Linux. With it, you get Rust's great library ecosystem, but you don't need to recompile with each change to how you use those libraries. Since you express your domain logic in a higher level scripting language and your system logic in Rust's language, you get the best of both worlds!]]></description><guid isPermaLink="false">977952df-eb7d-43eb-82e2-3e53b7e00a72</guid><pubDate>Wed,  6 Mar 2019 13:17:44 +1100</pubDate><dc:creator>Mitchell Tannenbaum</dc:creator></item><item><title>The rise of wgpu: Native WebGPU implementation based on gfx-hal</title><link>https://gfx-rs.github.io/2019/03/06/wgpu.html</link><description><![CDATA[WebGPU is a new graphics/compute API developed by the browser vendors (and Intel) within W3C: The goal is to design a new Web API that exposes these modern technologies in a performant, powerful and safe manner.

Don’t be confused by the “Web” part here - both us (gfx-rs team) and Google are trying to make it feasible to run on native platforms as well. Typically, the Web as a platform has different priorities from native: a lot of focus is placed on the security and portability (in a wider and stronger sense). Coincidentally, these are qualities we are currently missing in the gfx-rs ecosystem: security means safety (in the Rust sense), and portability means that people can use it and run everywhere, without worrying about thousands of potential configurations at run-time, or diverging behavior between platforms due to timing differences or loosely defined behavior.

With these goals in mind, we’d like to announce our new project: wgpu-rs.]]></description><guid isPermaLink="false">861a769a-5c77-4afb-bb9d-b0e05cd3855e</guid><pubDate>Wed,  6 Mar 2019 00:00:00 +0000</pubDate><dc:creator>gfx-rs</dc:creator></item><item><title>The Embedded Working Group Newsletter - 16</title><link>https://rust-embedded.github.io/blog/newsletter-16/</link><description><![CDATA[This is the sixteenth newsletter of the Embedded WG where we highlight new progress, celebrate cool projects, thank the community, and advertise projects that need help!]]></description><guid isPermaLink="false">c2a5636f-d083-4e22-94d7-5b26df1b173d</guid><pubDate>Wed,  6 Mar 2019 00:00:00 +0000</pubDate><dc:creator>The Embedded Working Group</dc:creator></item></channel></rss>