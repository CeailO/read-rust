<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - All Posts</title><link>https://readrust.net/</link><description>All Posts posts on Read Rust</description><item><title>Easily Analyzing Your S3 Buckets</title><link>http://whitfin.io/analyzing-your-buckets-with-s3-meta/</link><description><![CDATA[mazon S3 is a storage solution used by pretty much everyone these days. Due to this there are naturally a bunch of tools for doing almost everything you can think of with S3. This post is about a tool I wrote to retrieve metadata about S3 buckets. If you don't care for the post, feel free to skip straight to the repo.]]></description><guid isPermaLink="false">1bc929f4-2800-466c-bd70-fb73f7b70ef8</guid><pubDate>Sat,  4 Aug 2018 17:44:06 +0000</pubDate><dc:creator>Isaac Whitfield</dc:creator></item><item><title>Working on the Embedded Rust Book</title><link>https://jamesmunns.com/blog/working-on-the-book/</link><description><![CDATA[TL;DR: Up to now, I haven't had as much time or motivation as I would have like to contribute to the Embedded Rust Book. However, I am excited to see the initial version of the book launch with the 2018 edition of Rust (which will ship with stable support for embedded)!, so I will be committing to write one chapter per two weeks, until the end of the year.

Read below for my plan, and how you can help!]]></description><guid isPermaLink="false">e20d8f7a-53c3-45c8-b16e-ac25a20ff548</guid><pubDate>Sat,  4 Aug 2018 00:00:00 +0000</pubDate><dc:creator>James Munns</dc:creator></item><item><title>Rust and the Case of the Redundant Comparison</title><link>https://blog.dend.ro/rust-and-the-case-of-the-redundant-comparison/</link><description><![CDATA[A couple of days ago I landed my second pull request in the Rust Programming Language repository. This is the story of how that went. This post is inspired by other posts about improving the Rust compiler.]]></description><guid isPermaLink="false">58e93b1c-f7b4-440f-88fb-fa5ab900f1c6</guid><pubDate>Sat,  4 Aug 2018 00:00:00 +0000</pubDate><dc:creator>dend</dc:creator></item><item><title>Some Slight Improvements</title><link>https://llogiq.github.io/2018/08/04/improve.html</link><description><![CDATA[Today I want to talk about two Rust PRs I recently wrote. The PRs in question are #52942 and #52997. Both are relatively small changes to Rust’s internally used data structures that improve performance and readability. Both have some basic benchmarks (the first one already had them and I wrote them for the second one), although it’s rather hard to gauge whether they really impacted compile times (as perf.rust-lang.org puts all changes of the specific day together). But that’s not the point I want to make right now.]]></description><guid isPermaLink="false">02647906-fc14-42ea-87ec-19fc717cb3d7</guid><pubDate>Sat,  4 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>Gutenberg 0.4.0: custom taxonomies, image processing and more</title><link>https://www.vincentprouillet.com/blog/releasing-gutenberg-0-4-0/</link><description><![CDATA[Gutenberg 0.4.0 is out with custom taxonomies, image processing, improved shortcodes and more.]]></description><guid isPermaLink="false">c1718910-2677-4da4-a45f-a8bd055fe075</guid><pubDate>Sat,  4 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Vincent Prouillet</dc:creator></item><item><title>How to run Rust in OpenFaaS</title><link>https://booyaa.wtf/2018/run-rust-in-openfaas/</link><description><![CDATA[OpenFaaS is an open source implementation of Function as a Service (Serverless Functions, microservices) that you can self host. Rather than list all the various offerings in this space, I'll refer you to the Cloud Native Computing Foundation, in particular the interactive Landscape.

You can either deploy existing functions or create new ones. If you create new ones, there's a big list of officially supported languages. Alternative you could turn a CLI into function.

Once I'd given Python and Ruby a go as an introduction, I wanted to see how easy it would be to create a Rust template.]]></description><guid isPermaLink="false">924567bd-54c7-429d-84a6-db7b8b9221f1</guid><pubDate>Sat,  4 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Mark Sta Ana</dc:creator></item><item><title>Solving the Generalized Streaming Iterator Problem without GATs</title><link>http://lukaskalbertodt.github.io/2018/08/03/solving-the-generalized-streaming-iterator-problem-without-gats.html</link><description><![CDATA[Generic Associated Types (GATs for short) are a long awaited extension to Rust’s type system. They offer a way to work with higher kinded types – a necessity in a couple of situations. A common example is the streaming iterator: an iterator able to return items borrowing from self (the iterator itself). Unfortunately, GATs haven’t even landed in nightly yet. So while are waiting, we can try tackling the streaming iterator problem without GATs. In this post we explore three possible workarounds for situations where an associated type depends on the lifetime of a &self receiver.]]></description><guid isPermaLink="false">2cc12b2e-22fb-461a-be01-ffeab54caa9f</guid><pubDate>Fri,  3 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Lukas Kalbertodt</dc:creator></item><item><title>CLion IDE Rust plugin update: language support improvements, new quick-fixes, improved debugger and more</title><link>https://blog.jetbrains.com/clion/2018/08/intellij-rust-update-2018_2/</link><description><![CDATA[CLion 2018.2 was released just recently. Along with the release, the Rust plugin has had an update! In this blog post, we’d like to highlight some of the main improvements in the plugin.]]></description><guid isPermaLink="false">18d063ca-b781-400f-9e5f-1534b5b90630</guid><pubDate>Thu,  2 Aug 2018 11:01:28 +0000</pubDate><dc:creator>Anastasia Kazakova</dc:creator></item><item><title>Announcing Rust 1.28</title><link>https://blog.rust-lang.org/2018/08/02/Rust-1.28.html</link><description><![CDATA[The Rust team is happy to announce a new version of Rust. This release includes the global_allocator attribute to customise the allocator, improved error messages for format strings, and a number of number related stabilisations.]]></description><guid isPermaLink="false">44372b96-a1e4-44ee-af79-4496c4f629e6</guid><pubDate>Thu,  2 Aug 2018 00:00:00 +0000</pubDate><dc:creator>The Rust Core Team</dc:creator></item><item><title>Why I Ripped The Same CD 300 Times</title><link>https://john-millikin.com/%F0%9F%A4%94/why-i-ripped-the-same-cd-300-times</link><description><![CDATA[The piano arrangement album 帰るべき城 by Altneuland was published in 2005. I discovered it in 2008 (probably on YouTube), downloaded the best copy I could find, and filed it away in the TODO list. Recent advances in international parcel forwarding technology let me buy a used copy last year, but when it arrived none of my CD drives could read track #3. This sort of thing is common when buying used CDs, especially if they need to transit a USPS international shipping center. I shelved it and kept on the lookout for another copy, which I located last month. It arrived on Friday, I immediately tried to rip it, and hit the exact same error. This didn’t seem to be an issue of wear or damage…]]></description><guid isPermaLink="false">bf6d4501-afb3-40dc-aa8a-bef247e2e77b</guid><pubDate>Thu,  2 Aug 2018 00:00:00 +0000</pubDate><dc:creator>John Millikin</dc:creator></item><item><title>Accelerating Edwards Curve Arithmetic with Parallel Formulas</title><link>https://medium.com/@hdevalence/accelerating-edwards-curve-arithmetic-with-parallel-formulas-ac12cf5015be</link><description><![CDATA[The fastest formulas for elliptic curve operations were published by Hisil, Wong, Carter, and Dawson in their 2008 paper Twisted Edwards Curves Revisited. Their paper also describes a parallel version of their formulas, designed to execute four streams of instructions on four independent processors. Until now, these parallel formulas don’t seem to have been implemented in software. But a closer look reveals that slightly modifying the formulas allows the expensive instructions to be executed in uniform, making a vectorized SIMD implementation possible.

I implemented this strategy in Rust, targeting 256-bit wide AVX2 operations. The resulting implementation performs double-base scalar multiplication faster than other Ed25519 implementations I tested, and is even faster than FourQ without endomorphisms]]></description><guid isPermaLink="false">8a924e9f-d803-4e85-b2e8-92b5909c7695</guid><pubDate>Wed,  1 Aug 2018 17:41:42 +0000</pubDate><dc:creator>Henry de Valence</dc:creator></item><item><title>Sequoia, a new OpenPGP implementation</title><link>https://www.reddit.com/r/rust/comments/93mng5/ann_sequoia_a_new_openpgp_implementation/</link><description><![CDATA[This past fall, three former GnuPG developers began working on a new OpenPGP implementation in Rust called Sequoia. As it’s starting to shape up and become useful, I feel now is a good time to announce the project to the larger Rust community, and hopefully get some feedback before our first release.]]></description><guid isPermaLink="false">81096070-a563-47a0-8f09-2e5fb3c1b984</guid><pubDate>Wed,  1 Aug 2018 16:50:12 +1000</pubDate><dc:creator>/u/nwalfield</dc:creator></item><item><title>warp</title><link>http://seanmonstar.com/post/176530511587/warp</link><description><![CDATA[Over the past several months, I’ve been working a web framework in Rust. I wanted to make use of the new hyper 0.12 changes, so the framework is just as fast, is asynchronous, and benefits from all the improvements found powering Linkerd. More importantly, I wanted there to be a reason for making a new framework; it couldn’t just be yet another framework with the only difference being I’ve written it. Instead, the way this framework is used is quite different than many that exist. In doing so, it expresses a strong opinion, which might not match your previous experiences, but I believe it manages to do something really special.

I’m super excited to reveal warp, a joint project with @carllerche.]]></description><guid isPermaLink="false">55adde79-edfa-433f-8c4f-40f2baee7cd9</guid><pubDate>Wed,  1 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Sean McArthur</dc:creator></item><item><title>Announcing Vagga 0.8.1 – PaulColomiets</title><link>https://medium.com/@paulcolomiets/announcing-vagga-0-8-1-5e1fd44ee6fa</link><description><![CDATA[We are excited to announce the next version of vagga, the containerization tool that makes setting up development environments easy and fun. This release brings local overrides for vagga commands, support of ubuntu bionic, better CI support, space reuse between multiple projects, and more.]]></description><guid isPermaLink="false">14507477-073a-4055-a2de-b0e4c4fd2ad5</guid><pubDate>Tue, 31 Jul 2018 19:39:25 +0000</pubDate><dc:creator>PaulColomiets</dc:creator></item><item><title>#[derive(Debug)] on serde steroids</title><link>https://rreverser.com/derive-serdebug/</link><description><![CDATA[In this post I'd like to introduce a serdebug helper which is a drop-in replacement for #[derive(Debug)] with some of the advanced features that serde can provide.]]></description><guid isPermaLink="false">0a171d26-74e1-491c-befd-e02ac528c1ff</guid><pubDate>Tue, 31 Jul 2018 16:00:45 +0000</pubDate><dc:creator>Ingvar Stepanyan</dc:creator></item><item><title>BetaFPV F3 Drone Flight Controller - Board Support Crate</title><link>https://www.joshmcguigan.com/blog/betafpv-drone-flight-controller-board-support-crate/</link><description><![CDATA[In a previous blog post I described how to get a very simple Rust program compiling for and running on the BetaFPV F3 drone flight controller. Since that time I’ve been working to create a board support crate to provide a high level API for the board.]]></description><guid isPermaLink="false">5473f9e8-40a8-43fe-956e-e84678267c90</guid><pubDate>Tue, 31 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Josh Mcguigan</dc:creator></item><item><title>Writing a front-end WebAssembly framework in Rust: lessons learned</title><link>https://medium.com/@robert.balicki_2494/writing-a-front-end-webassembly-framework-in-rust-lessons-learned-7cc48ed27d96</link><description><![CDATA[Over the past few months, I’ve been writing Smithy, a very work-in-progress front-end WebAssembly framework written in Rust.

My goal for Smithy is to enable you to use idiomatic Rust to write front-end code. This has costs: for example worrying about lifetimes and using Rc<RefCell<State>> to share state. But this also has the potential to give you the safety guarantees that the Rust compiler provides when writing browser code!]]></description><guid isPermaLink="false">7f8cf89b-0cca-43c6-a660-3780bd2cdf72</guid><pubDate>Mon, 30 Jul 2018 12:46:05 +0000</pubDate><dc:creator>Robert Balicki</dc:creator></item><item><title>Streaming UTF-8 in Haskell and Rust</title><link>https://www.fpcomplete.com/blog/2018/07/streaming-utf8-haskell-rust</link><description><![CDATA[An investigation into getting Haskell-like error handling ergonomics into a Rust application dealing with streaming UTF-8 encoding and decoding.]]></description><guid isPermaLink="false">8f26eb1d-8d0c-4785-a7fb-85c8cf5c6f27</guid><pubDate>Mon, 30 Jul 2018 09:00:00 +0000</pubDate><dc:creator>Michael Snoyman</dc:creator></item><item><title>Rust: controlling side effects from the test</title><link>https://blog.cyplo.net/posts/2018/07/rust-injection.html</link><description><![CDATA[Imagine you want to write a timestamping repository of some sorts, that will associate the timestamp of when the storage operation was invoked with the stored value. How to write it in Rust ? And more importantly - how to test it ? I would like to share a solution I found and talk a bit about how it works.]]></description><guid isPermaLink="false">3b874195-0df6-40ca-8667-067d3440061b</guid><pubDate>Mon, 30 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Cyryl Płotnicki</dc:creator></item><item><title>Futures 0.3.0-alpha.2</title><link>https://rust-lang-nursery.github.io/futures-rs/blog/2018/07/30/futures-0.3.0-alpha.2.html</link><description><![CDATA[Several new changes while working towards 0.3.]]></description><guid isPermaLink="false">e29e550b-7c05-4625-9a81-513b316b5675</guid><pubDate>Mon, 30 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Josef Brandl</dc:creator></item><item><title>Using C libraries in Rust: make a sys crate</title><link>https://kornel.ski/rust-sys-crate</link><description><![CDATA[Using C libraries in a portable way involves a bit of work: finding the library on the system or building it if it's not available, checking if it is compatible, finding C headers and converting them to Rust modules, and giving Cargo correct linking instructions. Often every step of this is tricky, because operating systems, package managers and libraries have their unique quirks that need special handling.

Fortunately, all this work can be done once in a build script, and published as a <insert library name>-sys Rust crate. This way other Rust programmers will be able to use the C library without having to re-invent the build script themselves.]]></description><guid isPermaLink="false">e0622344-66a9-4b93-a59f-1b5250ba8c98</guid><pubDate>Mon, 30 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Kornel</dc:creator></item><item><title>Rust concurrency patterns: Natural Born Pipelines</title><link>https://medium.com/@polyglot_factotum/rust-concurrency-patterns-natural-born-pipelines-4d599e7612fc</link><description><![CDATA[There seems to be demand for a “Rust concurrent pipeline” guide à la https://blog.golang.org/pipelines, so let’s give it a try.]]></description><guid isPermaLink="false">f7eba5d3-ef85-47cb-88ec-345cf3c46ade</guid><pubDate>Sat, 28 Jul 2018 09:12:33 +0000</pubDate><dc:creator>Gregory Terzian</dc:creator></item><item><title>A Snapshot of Rust&apos;s Popularity in July 2018</title><link>http://www.jonathanturner.org/2018/07/snapshot-of-rust-popularity.html</link><description><![CDATA[Talking about a language’s popularity is traditionally a tricky topic. How do you measure popularity? How do you compare one language to another when they’re focused on different styles and different audiences? So, rather than having one or two charts, I’m going to look at a number of “slices” into Rust’s growth to see it front different angles.]]></description><guid isPermaLink="false">2dba28aa-a443-4887-9806-aba84cf787ef</guid><pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Jonathan Turner</dc:creator></item><item><title>Recommending books (with Rust)</title><link>https://maciejkula.github.io/2018/07/27/recommending-books-with-rust/</link><description><![CDATA[In this post, we’re going to build a sequence-based recommender system in Rust: a system that accepts a person’s reading history as input, and outputs recommendations on what to read next.]]></description><guid isPermaLink="false">31fd7758-63f6-4e38-8331-bd27fd6324ba</guid><pubDate>Fri, 27 Jul 2018 09:17:00 -0700</pubDate><dc:creator>Maciej Kula</dc:creator></item><item><title>Using a Mac to cross-compile Linux binaries</title><link>http://timryan.org/2018/07/27/cross-compiling-linux-binaries-from-macos.html</link><description><![CDATA[The cycle of development we’re most familiar with is: write code, compile your code, then run this code on the same machine you were writing it on. On most desktop OSes, you pick up a compiler by downloading one from your package manager. Xcode and Visual Studio are toolchains (actually IDEs) that leverage being platform-specific, each including tools tailored around the platform your code will run on and heavily showcasing the parent OS’s design language.]]></description><guid isPermaLink="false">86add592-8587-406b-8233-a06e675452f0</guid><pubDate>Fri, 27 Jul 2018 13:22:00 +0000</pubDate><dc:creator>Tim Ryan</dc:creator></item><item><title>Rust and OpenGL from scratch, a blog post series about building an OpenGL renderer with Rust</title><link>https://www.reddit.com/r/rust/comments/92abkg/rust_and_opengl_from_scratch_a_blog_post_series/</link><description><![CDATA[I titled this post “from scratch”, because I am going to assume little knowledge of Rust and basic knowledge of 3D graphics and OpenGL.

Therefore, this tutorial may teach you basic Rust and how to get Rust working with OpenGL, however for in-depth OpenGL learning you will need another tutorial or book.

“From Scratch” also means that we will try to build abstractions ourselves, so that we get better knowledge of Rust. In addition to that, we will able to follow existing OpenGL tutorials, because we will know exactly what OpenGL functions we are calling.]]></description><guid isPermaLink="false">1220a3b8-605c-4d1d-8c38-163bd5a8f02e</guid><pubDate>Fri, 27 Jul 2018 17:01:38 +1000</pubDate><dc:creator>Nerijus Arlauskas</dc:creator></item><item><title>Programming Servo: How to match</title><link>https://medium.com/programming-servo/programming-servo-how-to-match-b76c43f76fe6</link><description><![CDATA[Today, let’s share some lessons learned from contributing to Servo, which is a great way to learn Rust.]]></description><guid isPermaLink="false">f0e4ab48-bf11-47bf-9267-4da78f78bdcc</guid><pubDate>Fri, 27 Jul 2018 04:37:21 +0000</pubDate><dc:creator>Gregory Terzian</dc:creator></item><item><title>What is Rust 2018?</title><link>https://blog.rust-lang.org/2018/07/27/what-is-rust-2018.html</link><description><![CDATA[The release of Rust 1.31.0 on December 6th will be the first release of “Rust 2018.” This marks a culmination of the last three years of Rust’s development, and brings it together in one neat package. For example, there will be a 2018 edition of the book that incorporates features stabilized since the print edition was considered finalized.]]></description><guid isPermaLink="false">2c62015d-b849-4ab6-bbc9-e62255ca3473</guid><pubDate>Fri, 27 Jul 2018 00:00:00 +0000</pubDate><dc:creator>The Rust Core Team</dc:creator></item><item><title>Bringing Rust to Ledger hardware wallets</title><link>https://medium.com/@roosmaa/bringing-rust-to-ledger-hardware-wallet-ccf1356a7de1</link><description><![CDATA[Beginning of this year I wanted to experiment with some embedded development. I ended up looking into Ledger cryptocurrency hardware wallet application development. I wouldn’t actually consider this true embedded development as a lot of the heavy lifting has been done and abstracted away by Ledger, but it’s still writing software for a very constrained environment. Ledger applications only get 4KB of RAM to utilise and most of the embedded development practices still apply (no heap allocations for instance).]]></description><guid isPermaLink="false">41e44eb5-79db-4f16-83c2-a126c4d43286</guid><pubDate>Thu, 26 Jul 2018 12:01:48 +0000</pubDate><dc:creator>Mart Roosmaa</dc:creator></item><item><title>Is WebAssembly the return of Java Applets &amp; Flash?</title><link>https://words.steveklabnik.com/is-webassembly-the-return-of-java-applets-flash</link><description><![CDATA[For this post, I’m going to make three comparisons: to Flash, to Java Applets, and occasionally to PNaCL. Secondly, this post is going to focus on the web use-case for WebAssembly, even though the previous post was about non-web uses. We’ll make that comparison in the next post. Finally, this post is kind of like eating tapas, there’s a bunch of little sections.]]></description><guid isPermaLink="false">6204efce-b9b3-4225-ae6b-5fc74f441d5f</guid><pubDate>Thu, 26 Jul 2018 00:03:00 +0000</pubDate><dc:creator>Steve Klabnik</dc:creator></item><item><title>Announcing the js-sys crate!</title><link>https://rustwasm.github.io/2018/07/26/announcing-the-js-sys-crate.html</link><description><![CDATA[The js-sys crate contains raw #[wasm_bindgen] bindings to all the global APIs guaranteed to exist in every JavaScript environment by the ECMAScript standard. It does not contain bindings to any Web- or Node-specific APIs. With the js-sys crate, we can work with Objects, Arrays, Functions, Maps, Sets, etc… without writing the #[wasm_bindgen] imports by hand.]]></description><guid isPermaLink="false">95c003ee-6a87-45cb-abd3-491bd965d65c</guid><pubDate>Thu, 26 Jul 2018 00:00:00 +0000</pubDate><dc:creator>rustwasm</dc:creator></item><item><title>Version selection in Cargo</title><link>http://aturon.github.io/2018/07/25/cargo-version-selection/</link><description><![CDATA[When there are multiple ways to resolve dependencies, Cargo generally chooses the newest possible version. The goal of this post is to explain why Cargo works this way, and how that rationale relates to several recent discussions, including:]]></description><guid isPermaLink="false">d0dc161e-3fcc-4fc7-9032-f9847bf4f3b8</guid><pubDate>Wed, 25 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Aaron Turon</dc:creator></item><item><title>Where next for the Monotron</title><link>http://railwayelectronics.blogspot.com/2018/07/where-next-for-monotron.html?m=1</link><description><![CDATA[It's a couple of months on from my talk at RustFest on Monotron, so I thought it was worth a quick catch up on where we're going next. As a recap, Monotron currently generates an 800 x 600 VGA signal at 60 Hz (with a pixel clock of 40 MHz). It does this using three synchronised SPI peripherals, a timer generating the horizontal-sync pulse and a GPIO pin for the vertical-sync. With the CPU running at a clock speed of 80 MHz, the SPI peripherals are clocked at 20 MHz producing 400 horizontal pixels per line. This is half the nominal 800 pixels, but we needed to sacrifice resolution to double the amount of CPU time we have to 4 clocks per pixel (i.e. 32 clocks per 8-bit character column).]]></description><guid isPermaLink="false">669e3447-5dac-4fe9-a87a-0b315ae3062d</guid><pubDate>Tue, 24 Jul 2018 22:40:00 +0100</pubDate><dc:creator>theJPster</dc:creator></item><item><title>My experience with the Rust 2018 preview</title><link>https://boats.gitlab.io/blog/post/my-experience-with-rust-2018/</link><description><![CDATA[Recently, I wrote a little a side project to sign git commits without gpg. When I did this, I decided to use the Rust 2018 edition. I also transitioned an existing library from Rust 2015 to Rust 2018 to see how that tooling worked. I thought I’d write a blog post about my experience using the Rust 2018 preview and the state of things right now.]]></description><guid isPermaLink="false">a243dc7d-5708-4a3d-bae8-20ccc3de53d0</guid><pubDate>Tue, 24 Jul 2018 00:00:00 +0000</pubDate><dc:creator>boats</dc:creator></item><item><title>Pointers Are Complicated, or: What&apos;s in a Byte?</title><link>https://www.ralfj.de/blog/2018/07/24/pointers-and-bytes.html</link><description><![CDATA[This summer, I am again working on Rust full-time, and again I will work (amongst other things) on a “memory model” for Rust/MIR. However, before I can talk about the ideas I have for this year, I have to finally take the time and dispel the myth that “pointers are simple: they are just integers”. Both parts of this statement are false, at least in languages with unsafe features like Rust or C: Pointers are neither simple nor (just) integers.

I also want to define a piece of the memory model that has to be fixed before we can even talk about some of the more complex parts: Just what is the data that is stored in memory? It is organized in bytes, the minimal addressable unit and the smallest piece that can be accessed (at least on most platforms), but what are the possible values of a byte? Again, it turns out “it’s just an 8-bit integer” does not actually work as the answer.

I hope that by the end of this post, you will agree with me on both of these statements. :)]]></description><guid isPermaLink="false">b4133437-b69d-4491-a40f-a368a8847627</guid><pubDate>Tue, 24 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Ralf Jung</dc:creator></item><item><title>Building Readable Tests with Fluent Testing APIs</title><link>https://leotindall.com/tutorial/building-readable-tests-with-fluent-testing-apis/</link><description><![CDATA[One of the biggest challenges in software testing is defining the input for code under test in a way that is expressive and powerful enough to test complex situations but doesn’t distract from the intent of the test or clutter the test code to a degree that makes it difficult to read.

Many dynamic languages have testing APIs which take advantage of their looser and later type checking to provide easy mocking and stubbing, but strict, statically typed languages can make it difficult to build up suitable instances of the types needed in the test.]]></description><guid isPermaLink="false">96eb15b8-5f51-403c-a699-805553293c16</guid><pubDate>Mon, 23 Jul 2018 09:56:24 -0500</pubDate><dc:creator>Leo Tindall</dc:creator></item><item><title>On impl blocks, injection and surjection in Rust</title><link>https://phaazon.net/blog/on-rust-impl-block</link><description><![CDATA[Rust has this cool feature called impl block. An impl block is just a scope that introduces a way to augment a type with methods – do not confuse impl blocks with trait impls, used to implement a given trait.]]></description><guid isPermaLink="false">4a0e6748-9562-4507-bbfe-3cdf49b6292b</guid><pubDate>Sun, 22 Jul 2018 22:05:00 +0000</pubDate><dc:creator>Dimitri Sabadie</dc:creator></item><item><title>A static web app in Rust</title><link>https://bluejekyll.github.io/blog/rust/2018/07/22/static-web-app-rust.html</link><description><![CDATA[A three day tour of Yew and WASM with Rust]]></description><guid isPermaLink="false">b3d696eb-a5d0-4118-a7b0-328623d35555</guid><pubDate>Sun, 22 Jul 2018 07:00:00 +0000</pubDate><dc:creator>Benjamin Fry</dc:creator></item><item><title>Writing a GPU-Accelerated Path Tracer in Rust - Part 3</title><link>https://bheisler.github.io/post/writing-gpu-accelerated-path-tracer-part-3/</link><description><![CDATA[Hello! Welcome to my third and final post on my GPU-accelerated Path Tracer in Rust. In the last post, we implemented all of the logic necessary to build a true path tracer. Problem is, even on the GPU it’s terrifically slow. This post is (mostly) about fixing that.

But first, we need to fix a bug or two, because I goofed. *sad trombone*

Step -1: Fixing Bugs /u/anderslanglands on Reddit pointed out that, since I’m using Cosine-weighted Importance Sampling, I need to do some extra math to avoid biasing the results.]]></description><guid isPermaLink="false">0b53c7ea-570b-4595-b8eb-2f62d8e9cb96</guid><pubDate>Thu, 19 Jul 2018 18:30:00 -0600</pubDate><dc:creator>Brook Heisler</dc:creator></item><item><title>Announcing Rust 1.27.2</title><link>https://blog.rust-lang.org/2018/07/20/Rust-1.27.2.html</link><description><![CDATA[The Rust team is happy to announce a new version of Rust, 1.27.2.]]></description><guid isPermaLink="false">2d302e67-f458-4d07-b1f4-78cb9ed02914</guid><pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate><dc:creator>The Rust Core Team</dc:creator></item><item><title>Futures 0.3.0-alpha.1</title><link>https://rust-lang-nursery.github.io/futures-rs/blog/2018/07/19/futures-0.3.0-alpha.1.html</link><description><![CDATA[Welcome to the inaugural post of the new futures-rs blog!

After several months of work, we’re happy to announce an alpha release of the new edition of future-rs, version 0.3. The immediate goal of this work is to support async/await notation (with borrowing) in Rust itself, which has entailed significant changes to the futures crate.]]></description><guid isPermaLink="false">2a8864ba-0872-45d2-89f4-87e9f368374b</guid><pubDate>Thu, 19 Jul 2018 17:00:00 +0000</pubDate><dc:creator>Aaron Turon</dc:creator></item><item><title>Auditing popular Rust crates: how a one-line unsafe has nearly ruined everything</title><link>https://medium.com/@shnatsel/auditing-popular-rust-crates-how-a-one-line-unsafe-has-nearly-ruined-everything-fab2d837ebb1</link><description><![CDATA[Following the actix-web incident (which is fixed now, at least mostly) I decided to poke other popular Rust libraries and see what comes of it.

The good news is I’ve poked at 6 popular crates now, and I’ve got not a single actually exploitable vulnerability. I am impressed. When I poked popular C libraries a few years ago it quickly ended in tears. The bad news is I’ve found one instance that was not a security vulnerability by sheer luck, plus a whole slew of denial-of-service bugs. And I can’t fix all of them by myself. Read on to find out how I did it, and how you can help!]]></description><guid isPermaLink="false">80a9211d-dd65-4da8-b8d6-5d4223ee278d</guid><pubDate>Thu, 19 Jul 2018 01:38:11 +0000</pubDate><dc:creator>Sergey &quot;Shnatsel&quot; Davidoff</dc:creator></item><item><title>Thoughts on Compile-Time Function Evaluation and Type Systems</title><link>https://www.ralfj.de/blog/2018/07/19/const.html</link><description><![CDATA[For some time now (since the 1.26 release, to be precise), Rust has a very powerful machinery for CTFE, or compile-time function evaluation. Since then, there have been various discussions about which operations should be allowed during CTFE, which checks the compiler should do, how this all relates to promotion and which kinds of guarantees we should be able to expect around CTFE. This post is my take on those topics, and it should not be surprising that I am going to take a very type-system centric view. Expect something like a structured brain dump, so there are some unanswered questions towards the end as well.]]></description><guid isPermaLink="false">7e963a31-6451-4f7d-9817-1e8c33c4973d</guid><pubDate>Thu, 19 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Ralf Jung</dc:creator></item><item><title>#[test] in 2018</title><link>https://blog.jrenner.net/rust/testing/2018/07/19/test-in-2018.html</link><description><![CDATA[Lately, I’ve been working implementing the Custom Test Frameworks eRFC for Rust. While exploring the compiler codebase, I’ve learned about the internals of testing in Rust and figured it would be interesting to share.]]></description><guid isPermaLink="false">f4903839-c307-4209-b760-15176676663f</guid><pubDate>Thu, 19 Jul 2018 00:00:00 +0000</pubDate><dc:creator>John Renner</dc:creator></item><item><title>RustSec Advisory Database</title><link>https://rustsec.org/</link><description><![CDATA[Security advisory database for Rust crates published through https://crates.io.]]></description><guid isPermaLink="false">db3cdc15-004b-4a41-9649-6ade4a8407eb</guid><pubDate>Thu, 19 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Rust Project Developers</dc:creator></item><item><title>Wayland-rs 0.21: Pure Rust implementation</title><link>https://smithay.github.io/wayland-rs-v-0-21.html</link><description><![CDATA[wayland-rs is a set of crates providing generic APIs to manipulate the Wayland protocol, successor of X11 for linux windowing.

Here I am finally, after having hinted at the possibility and finally taken the time to write and merge quite an epic pull request, I can finally say it: wayland-rs is now a pure rust implementation of the protocol, rather than a crate of bindings to the wayland system C libraries.]]></description><guid isPermaLink="false">e5caa9df-4d3f-46be-a8ce-79369f0cad32</guid><pubDate>Wed, 18 Jul 2018 22:00:00 +0200</pubDate><dc:creator>Victor Berger</dc:creator></item><item><title>Let&apos;s code with the Roguelike tutorial - Part 7 - Enhancing the UI</title><link>https://www.yosenspace.com/posts/lets-code-roguelike-tutorial-part7-enhancing-ui.html</link><description><![CDATA[Up to now, all the rendering code has been in the game loop in the main function. The rendering code is simple and straightforward, so, while it should have been extracted into its own function, there wasn't a pressing need to do so. Now that I'm going to enhance the UI, the rendering needs to be extracted.]]></description><guid isPermaLink="false">92d89e3b-be0d-4f75-b335-79e26b2373e5</guid><pubDate>Wed, 18 Jul 2018 08:50:00 +0000</pubDate><dc:creator>Yosen</dc:creator></item><item><title>Let&apos;s code with the Roguelike tutorial - Part 6 - Combat engine</title><link>https://www.yosenspace.com/posts/lets-code-roguelike-tutorial-part6-combat-engine.html</link><description><![CDATA[ I now have a map, and a bunch of monsters on the map, able to attack and be attacked by the player. To provide for different kinds of monsters, I needed to add stats like combat strength and HP.]]></description><guid isPermaLink="false">6744150e-efec-40e9-a978-ed41e314d64a</guid><pubDate>Wed, 18 Jul 2018 07:28:00 +0000</pubDate><dc:creator>Yosen</dc:creator></item><item><title>cargo-generate: create a new Rust project from a template </title><link>https://github.com/ashleygwilliams/cargo-generate</link><description><![CDATA[cargo-generate is a developer tool to help you get up and running quickly with a new Rust project by leveraging a pre-existing git repository as a template.]]></description><guid isPermaLink="false">9ceafb2d-9937-48c9-9deb-ff9d1ebd19d3</guid><pubDate>Wed, 18 Jul 2018 06:59:00 +0000</pubDate><dc:creator>Ashley Williams</dc:creator></item><item><title>How to help test the 2018 edition</title><link>https://www.ncameron.org/blog/how-to-help-test-the-2018-edition/</link><description><![CDATA[An edition brings together the features that have landed into a clear package, with fully updated documentation and tooling. By the end of the year we are planning to release the 2018 edition, our first since the Rust 1.0 release. You can currently opt-in to a preview of the 2018 edition to try it out and help test it.

In fact, we really need help testing it out! Once you’ve turned it on and seen its wonderful new features, what then? Here we’ve got some specific things we’d like you to test.]]></description><guid isPermaLink="false">a81b111b-b3d6-4515-81bc-00d00bf62fb9</guid><pubDate>Wed, 18 Jul 2018 03:08:04 +0000</pubDate><dc:creator>Nick Cameron</dc:creator></item><item><title>Deploying Rust with Docker and Kubernetes</title><link>https://www.fpcomplete.com/blog/2018/07/deploying-rust-with-docker-and-kubernetes</link><description><![CDATA[Using a tiny Rust app to demonstrate deploying Rust with Docker and Kubernetes.]]></description><guid isPermaLink="false">f53d06d7-6b22-4cb8-95f1-66f8ae0bdb8f</guid><pubDate>Tue, 17 Jul 2018 21:36:08 +0000</pubDate><dc:creator>Chris Allen</dc:creator></item><item><title>Hello Content-o-Tron</title><link>http://blog.community.rs/content-team/2018/07/16/hello-content-o-tron.html</link><description><![CDATA[Content-o-Tron is a project to help amplify the lesser heard voices in the Rust community.

We are able to do this by providing editorial assistance and technical reviews of draft blog posts.

Once your blog post is ready to publish, we will ensure it is disseminated through various channels such as Read Rust, MozHacks, social networks and of course the Rust Community’s own blog on community.rs.]]></description><guid isPermaLink="false">fbdc0364-12e8-49f4-914f-b3c4f17d43f0</guid><pubDate>Mon, 16 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Mark Sta Ana</dc:creator></item><item><title>Flocking in Rust with Piston</title><link>https://blog.shine.rocks/posts/flocking-in-rust-with-piston/</link><description><![CDATA[Wikipedia states that flocking is a behavior exhibited when a group of birds, called a flock, are foraging or in flight. Flocking simulation are basically softwares which simulate this flocking behavior of birds. The original algorithm is developed by Craig Reynolds in 1986.]]></description><guid isPermaLink="false">a65d9a08-fc44-4976-b2ad-82b934b7961f</guid><pubDate>Sun, 15 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Htet Aung Shine</dc:creator></item><item><title>How we built a Visual Studio Code extension for IoT prototyping</title><link>https://cultivatehq.com/posts/how-we-built-a-visual-studio-code-extension-for-iot-prototyping/</link><description><![CDATA[We recently had the opportunity to make a Visual Studio Code extension that needed to communicate with an embedded device. This post explains the architecture we chose to achieve that and the decisions that led to it.]]></description><guid isPermaLink="false">a9a551b0-07a6-48a2-944f-b956438fecc0</guid><pubDate>Fri, 13 Jul 2018 22:39:00 +0000</pubDate><dc:creator>Dan Munckton</dc:creator></item><item><title>Electrosmog trapping with CC1101</title><link>https://dsvensson.github.io/posts/2018-07-13-Electrosmog-trapping-with-CC1101.html</link><description><![CDATA[A couple of months ago I moved to a house, and the need to monitor-all-the-things guided me towards the affordable IKEA Sparsnäs energy display. Sparsnäs is made up of two parts, one being the transmitter that is attached to your electricity meter, and the other; the display that stores usage, and presents a variety of graphs. The downside is that there is no way of getting the data out of the display so you have to accept how it’s presented, and that it may get lost, or build something on your own. Thankfully the protocol has been thoroughly reverse engineered and documented in a very elaborate manner.]]></description><guid isPermaLink="false">c5d017d6-de45-4099-9272-19fe01441fdc</guid><pubDate>Fri, 13 Jul 2018 20:06:53 +0000</pubDate><dc:creator>Daniel Svensson</dc:creator></item><item><title>Multi target Rust builds with auto deployment in Travis-CI</title><link>https://medium.com/@tyrf/multi-target-rust-builds-with-auto-deployment-in-travis-ci-ab5214fb73ba</link><description><![CDATA[This is just a small build script to automatically compile and create Rust binaries for your i86 32 and 64 bit machine and your Raspberry Pi(ARM) with Travis-CI. On the right side I added a little explanation of the following script.]]></description><guid isPermaLink="false">fbdcd657-aab5-4d28-aa3a-ab04294f49eb</guid><pubDate>Fri, 13 Jul 2018 18:44:17 +0000</pubDate><dc:creator>Hendrik Teuber</dc:creator></item><item><title>Linux Container Internals (Part II)</title><link>https://rabbitstack.github.io/operating%20systems/containers/linux-container-internals-part-ii/</link><description><![CDATA[Containers are moving the world. Each passing day more and more organizations are embracing containers as first-class citizens for distribution and deployment of software components. Containers represent the core of the cloud native paradigm.]]></description><guid isPermaLink="false">5f84b8db-7379-4c08-9cae-d2a901caaab1</guid><pubDate>Fri, 13 Jul 2018 18:10:04 +0200</pubDate><dc:creator>Nedim Šabić</dc:creator></item><item><title>Rust vs. Go</title><link>http://julio.meroh.net/2018/07/rust-vs-go.html</link><description><![CDATA[Welcome to the Rust Review’s bonus post, which I had promised from the very beginning. I’m here to cover the big elephant in the room: Rust vs. Go. Which one is better?

There is no good answer to this question because this comparison is unfounded. I think people tend to bundle the two languages together because they were released at about the same time and the release of Rust felt like a response to the release of Go. Moreover, both languages are supposed to focus on systems software. But they are vastly different, and even as they both target systems software, they target different kinds of such software.]]></description><guid isPermaLink="false">40055859-95cc-47a0-89e3-fd3c8a000fba</guid><pubDate>Fri, 13 Jul 2018 10:45:00 +0200</pubDate><dc:creator>Julio Merino</dc:creator></item><item><title>Writing a GPU-Accelerated Path Tracer in Rust - Part 2</title><link>https://bheisler.github.io/post/writing-gpu-accelerated-path-tracer-part-2/</link><description><![CDATA[Hello, and welcome to part two of my series on writing a GPU-accelerated path tracer in Rust. I’d meant to have this post up sooner, but nothing ruins my productivity quite like Games Done Quick. I’m back now, though, so it’s time to turn the GPU ray-tracer from the last post into a real path tracer.

Tracing Paths As mentioned last time, Path Tracing is an extension to Ray Tracing which attempts to simulate global illumination.]]></description><guid isPermaLink="false">289bc607-7039-4931-838e-0451ee67e488</guid><pubDate>Thu, 12 Jul 2018 19:00:00 -0600</pubDate><dc:creator>Brook Heisler</dc:creator></item><item><title>The Tale of a Bug in Arc: Synchronization and Data Races</title><link>https://www.ralfj.de/blog/2018/07/13/arc-synchronization.html</link><description><![CDATA[While I was busy doing Rust-unrelated research, RustBelt continues to move and recently found another bug (after a missing impl !Sync that we found previously): It turns out that Arc::get_mut did not perform sufficient synchronization, leading to a data race.]]></description><guid isPermaLink="false">b2fbac94-27b1-4c37-8c21-ead67edecf43</guid><pubDate>Fri, 13 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Ralf Jung</dc:creator></item><item><title>Physical Computing With Rust On Raspberry Pi</title><link>https://medium.com/@rahulthakoor/physical-computing-with-rust-on-raspberry-pi-a7b6f34261a6</link><description><![CDATA[A couple of months ago I released the rust_gpiozero¹ crate. It is a port of the GPIO Zero² library by the Raspberry Pi Foundation. The library provides a simple interface to control GPIO devices with a Raspberry Pi. Following this, recently ported the Raspberry Pi Foundation’s Physical Computing with Python³ guide for Rust.]]></description><guid isPermaLink="false">34fa3257-4ea8-4ade-8cad-353aa02239d3</guid><pubDate>Thu, 12 Jul 2018 14:52:13 +0000</pubDate><dc:creator>Rahul Thakoor</dc:creator></item><item><title>Ownership in Rust, Part 2</title><link>https://medium.com/@thomascountz/ownership-in-rust-part-2-c3e1da89956e</link><description><![CDATA[It’s still not problem.]]></description><guid isPermaLink="false">62456010-4ef4-4f1d-87f0-6e0c64929d82</guid><pubDate>Wed, 11 Jul 2018 16:55:03 +0000</pubDate><dc:creator>Thomas Countz</dc:creator></item><item><title>Let&apos;s code with the Roguelike tutorial - Part 5 - Setting up enemies</title><link>https://www.yosenspace.com/posts/lets-code-roguelike-tutorial-part5-setting-up-enemies.html</link><description><![CDATA[I now have the game up to the point where the player has a random dungeon to explore. It's time to make it more interesting by adding some threats - namely, some monsters.]]></description><guid isPermaLink="false">9ba882d4-cadd-4708-906b-2ec25fe72941</guid><pubDate>Wed, 11 Jul 2018 04:57:00 +0000</pubDate><dc:creator>Yosen</dc:creator></item><item><title>Let&apos;s code with the Roguelike tutorial - Part 4 - Field of view and exploration</title><link>https://www.yosenspace.com/posts/lets-code-roguelike-tutorial-part4-field-view-exploration.html</link><description><![CDATA[In the current implementation, the player can see the entire layout of the dungeon from the beginning. The next step is to change the game to start off with the dungeon hidden, so the player will actually have some rooms to explore.]]></description><guid isPermaLink="false">1e1fcc0e-6af2-4223-8689-4cab5a34222f</guid><pubDate>Wed, 11 Jul 2018 04:57:00 +0000</pubDate><dc:creator>Yosen</dc:creator></item><item><title>BetaFPV F3 Drone Flight Controller - Hello Rust</title><link>https://www.joshmcguigan.com/blog/betafpv-drone-flight-controller-hello-rust/</link><description><![CDATA[One of the most exciting areas of hobbyist embedded programming, in my opinion, is flight controllers for remote controlled aircraft. In the particular case of a multi-rotor drone, the flight controller is responsible for converting the UP command from the transmitter into specific outputs for each of the motors. Maintaining the stability of a drone involves carefully adjusting the output of each motor thousands of times per second based on feedback from on-board sensors.

There are several great C-based open source drone flight controller firmware projects, but as far as I can see there are none written in Rust. The good news is that most drone flight controllers are based on STM32 MCUs, which Rust has strong support for. Robust flight controller firmware is quite complex, and there are a number of challenges to be solved before even getting the rotors spinning. The first of those challenges is building a Rust project for a particular flight controller board, and flashing the board with the compiled code. A single blinking LED is our goal for today.]]></description><guid isPermaLink="false">133f5906-759e-4a83-b188-fc18eda31cc0</guid><pubDate>Wed, 11 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Josh Mcguigan</dc:creator></item><item><title>Ownership in Rust, Part 1</title><link>https://medium.com/@thomascountz/ownership-in-rust-part-1-112036b1126b</link><description><![CDATA[It’s not my problem.]]></description><guid isPermaLink="false">c0f25118-a040-4f57-bd18-1594ce4e72f6</guid><pubDate>Mon,  9 Jul 2018 20:58:44 +0000</pubDate><dc:creator>Thomas Countz</dc:creator></item><item><title>Rust + actix-web power Atlas Weekend music festival</title><link>https://www.reddit.com/r/rust/comments/8xdsx5/rust_actixweb_in_the_on_of_the_biggest_music/</link><description><![CDATA[We've just finished music festival Atlas Weekend which took place in Kyiv, Ukraine. This year there were for about 450,000 visitors during 6 days. I'm glad to announce that Rust and actix-web are used as a backend for main technical purposes of festival.]]></description><guid isPermaLink="false">a95c25cb-0553-42ee-a81a-4a9cedce53e8</guid><pubDate>Tue, 10 Jul 2018 03:16:52 +1000</pubDate><dc:creator>/u/maxfrai</dc:creator></item><item><title>The Cheddar shading language</title><link>https://phaazon.net/blog/cheddar-0.1</link><description><![CDATA[Cheddar is a GLSL superset language. What it means is that most of the GLSL constructs and syntax you’re used to is valid in Cheddar – not all of it; most of it. Cheddar adds a set of features that I think are lacking to GLSL. Among them: Some non-valid GLSL constructions made valid in Cheddar to ease the writing of certain shader stages; A more functional approach to programming shaders on the GPU; Structures, types and GLSL-specific constructs sharing; Imports and modules with live reloading and transitive dependencies.]]></description><guid isPermaLink="false">5579acfe-3441-4097-9476-863e348858f5</guid><pubDate>Mon,  9 Jul 2018 01:00:00 +0000</pubDate><dc:creator>Dimitri Sabadie</dc:creator></item><item><title>Rustberry 0.1.0 has been released, and I need more testers!</title><link>https://www.reddit.com/r/rust/comments/8x1ayd/calling_all_raspberry_pi_owners_rustberry_010_has/</link><description><![CDATA[After many laborious hours of reading and interpreting the various online references, I've published the first release of my latest project, a crate to safely abstract Raspberry Pi's platform-specific features in Rust. I've (very creatively) named it Rustberry, and it's finally stable and clean enough that I'm able to publish it and receive initial feedback.]]></description><guid isPermaLink="false">54c6e230-51fa-42c2-bcab-26b75e699bb3</guid><pubDate>Sun,  8 Jul 2018 23:06:00 +1000</pubDate><dc:creator>/u/ninja_tokumei</dc:creator></item><item><title>A web application completely in Rust</title><link>https://medium.com/@saschagrunert/a-web-application-completely-in-rust-6f6bdb6c4471</link><description><![CDATA[My latest software architectural experiment is to write a complete real-world web application in Rust with as less as boilerplate as possible. Within this post I want to share my findings with you to answer the question on how much web Rust actually is.]]></description><guid isPermaLink="false">a16772c9-e5d4-4e73-8bec-934d8ae183c5</guid><pubDate>Sat,  7 Jul 2018 19:58:43 +0000</pubDate><dc:creator>Sascha Grunert</dc:creator></item><item><title>Conduit 0.5.0 and the future of Conduit</title><link>https://blog.conduit.io/2018/07/06/conduit-0-5-and-the-future/</link><description><![CDATA[Today we’re very happy to announce Conduit 0.5.0, which introduces zero-config automatic TLS between mesh’d pods (including certificate creation and distribution). This means that most Kubernetes users can now encrypt internal HTTP communication between their service in just two simple commands.

We’re also happy to announce that 0.5.0 will be the last major release of Conduit. Conduit is graduating into the Linkerd project to become the basis of Linkerd 2.0. Read on for what this means!]]></description><guid isPermaLink="false">0c4246e6-b2cb-42fa-930f-b32ed84c8880</guid><pubDate>Fri,  6 Jul 2018 16:41:57 +0000</pubDate><dc:creator>Oliver Gould</dc:creator></item><item><title>Why I love Rust</title><link>https://alexkitchens.net/2018/07/06/why-i-love-rust.html</link><description><![CDATA[I spent much of my free time over the past year learning Rust, and while it’s been a difficult language to fully grasp (it’s still a work in progress), I find it incredibly rewarding to write in. I also have had many conversations with people who don’t know much about Rust and are curious about the problems it solves.

This is my take on why Rust is important, and why I have fallen in love with the language.]]></description><guid isPermaLink="false">d52613f9-60c7-4448-89ed-72cd3da79346</guid><pubDate>Fri,  6 Jul 2018 08:46:39 +0000</pubDate><dc:creator>Alex Kitchens</dc:creator></item><item><title>Rust: Raw string literals</title><link>https://medium.com/@rahulthakoor/rust-raw-string-literals-9579c4feb231</link><description><![CDATA[While working with Rust, you will often come across r#"something like this"#, especially when working with JSON and TOML files. It defines a raw string literal. When would you use a raw string literal and what makes a valid raw string literal?]]></description><guid isPermaLink="false">ca7cc808-b6f7-4650-a219-b2c92be95460</guid><pubDate>Thu,  5 Jul 2018 13:26:49 +0000</pubDate><dc:creator>Rahul Thakoor</dc:creator></item><item><title>Tiny Planets</title><link>http://www.mattkeeter.com/projects/planets/</link><description><![CDATA[In the past few years, I've heard a lot about Rust. As someone that hacks on computer graphics and low-level infrastructure libraries, it seems relevant to my interests. I decided to make a small demo – of a procedural planet generator – and see how it went.]]></description><guid isPermaLink="false">306a1044-e3e5-4a20-b4df-6577fa6eadf5</guid><pubDate>Thu,  5 Jul 2018 02:45:00 +0000</pubDate><dc:creator>Matt Keeter</dc:creator></item><item><title>Surface Rust: The Missing IDE</title><link>https://medium.com/@wolfshirts/surface-rust-6470d0075721</link><description><![CDATA[This week I decided to do a little hacking on Rust. I thought I’d write down my first impressions of the language.]]></description><guid isPermaLink="false">54242603-6ea7-4c99-8826-bbda3f8f63db</guid><pubDate>Wed,  4 Jul 2018 21:45:48 +0000</pubDate><dc:creator>@wolfshirts</dc:creator></item><item><title>Embedded development with Yocto and Rust</title><link>https://pagefault.blog/2018/07/04/embedded-development-with-yocto-and-rust/</link><description><![CDATA[Customized Linux distribution and a safe systems programming language sounds like a very interesting combination for embedded development. That is what makes Yocto and Rust such a good match. So, I wanted to see how Rust projects could be cross-compiled with Yocto-generated toolchain and root filesystem. The steps are described in this post.]]></description><guid isPermaLink="false">bef012dd-518b-4a24-9acd-d0d68b3bead3</guid><pubDate>Wed,  4 Jul 2018 17:06:32 +0000</pubDate><dc:creator>Sami Pietikäinen</dc:creator></item><item><title>Let&apos;s code with the Roguelike tutorial - Part 3 - Making a dungeon</title><link>https://www.yosenspace.com/posts/lets-code-roguelike-tutorial-part3-making-dungeon.html</link><description><![CDATA[It's time to start making some rooms and connecting them together. These will require making modifications to the map, so I guess it's time to finally refactor the map code into its own legitimate class.]]></description><guid isPermaLink="false">35ed06d7-694b-4d04-ade3-5a8816619b78</guid><pubDate>Wed,  4 Jul 2018 09:42:00 +0000</pubDate><dc:creator>Yosen</dc:creator></item><item><title>Let&apos;s code with the Roguelike tutorial - Part 2 - Entities and the map</title><link>https://www.yosenspace.com/posts/lets-code-roguelike-tutorial-part2-entities-map.html</link><description><![CDATA[As I mentioned in the last post, until I got a better handle on the off screen console code, I temporarily made all the Rust bindings call out to the default root console. Now that there's a bit of discussion on how the off screen consoles work, it's time to refactor the code to enable their use. ]]></description><guid isPermaLink="false">5489d43b-5cbb-4f2b-964e-1aacba277cd6</guid><pubDate>Wed,  4 Jul 2018 07:53:00 +0000</pubDate><dc:creator>Yosen</dc:creator></item><item><title>Why Rust?</title><link>https://medium.com/paritytech/why-rust-846fd3320d3f</link><description><![CDATA[Programming is hard. Not because our hardware is complex, but simply because we’re all humans. Our attention span is limited, our memory is volatile — in other words, we tend to make mistakes.]]></description><guid isPermaLink="false">1b9d4f29-d237-4f3d-bc55-23b9ab2c5d77</guid><pubDate>Wed,  4 Jul 2018 07:43:11 +0000</pubDate><dc:creator>Dmitriy Kashitsyn</dc:creator></item><item><title>Procedural level generation with Rust</title><link>https://www.jamestease.co.uk/blether/procedural-level-generation-rust</link><description><![CDATA[Procedural generation is a technique which allows content to be created programmatically, rather than everything in a game being specifically placed by a designer. Procedural generation doesn't mean completely randomised, rather randomised elements are used as long as they make sense.

This tutorial will show how to create a tilemap-based level with rooms connected by straight corridors, using Rust. We'll also cover how to use seeds to reproduce specific layouts and serialise the output into JSON. The rooms will be placed at random within the level, and corridors are drawn horizontally and vertically to connect the centres of the rooms.]]></description><guid isPermaLink="false">51e59a36-6a0e-4599-b52f-5874cc1e9ec5</guid><pubDate>Wed,  4 Jul 2018 00:00:00 +0000</pubDate><dc:creator>James Tease</dc:creator></item><item><title>RSoC: FAT32 Filesystem in Redox - 2</title><link>https://www.redox-os.org/news/rsoc-fat32-2/</link><description><![CDATA[This is the second blog post about implementing a FAT32 filesystem in Redox.]]></description><guid isPermaLink="false">87ea8aa4-a134-4f8a-8ff2-fc33f4832020</guid><pubDate>Tue,  3 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Deepak Sirone</dc:creator></item><item><title>Fullstack React: Rust, React and WebAssembly</title><link>https://www.fullstackreact.com/articles/rust-react-and-web-assembly/</link><description><![CDATA[A tutorial on how to compile Rust to WebAssembly and integrate it into a React application]]></description><guid isPermaLink="false">c700cc05-51d7-4599-b545-37f4db96f347</guid><pubDate>Tue,  3 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Anders Pitman</dc:creator></item><item><title>Learning SIMD with Rust by finding planets</title><link>https://medium.com/@Razican/learning-simd-with-rust-by-finding-planets-b85ccfb724c3</link><description><![CDATA[Rust 1.27.0 has brought SIMD (Single Instruction Multiple Data), also known as vectorization, to stable Rust. If you read the announcement, you will see that SIMD should bring performance enhancements to our applications if we learn how to use it properly. But, for that let's first dive into how SIMD works.]]></description><guid isPermaLink="false">98469a08-b569-403f-a3ed-6049ff91c0b1</guid><pubDate>Mon,  2 Jul 2018 20:47:57 +0000</pubDate><dc:creator>Iban Eguia</dc:creator></item><item><title>Moving from the shell to Rust with commandspec</title><link>http://timryan.org/2018/07/02/moving-from-the-shell-to-rust-with-commandspec.html</link><description><![CDATA[Almost every project I’ve worked on has grown a shell script named “build.sh”, and not much later a “test.sh” and “run.sh”. At this point, you have to make a decision as a developer whether your goal is to accidentally reinvent make or if your codebase’s needs are better met by an executable to manage your workflow.]]></description><guid isPermaLink="false">504568b7-fb85-4ed5-b94d-1c96333d2c64</guid><pubDate>Mon,  2 Jul 2018 15:50:00 +0000</pubDate><dc:creator>Tim Ryan</dc:creator></item><item><title>Introducing PrrrStack</title><link>https://medium.com/@ccrsh/introducing-prrrstack-d617ff518ba6</link><description><![CDATA[This is the first part in a two-part introductory series to PRRR Stack (Postgres, Rust, Rocket, React) application.]]></description><guid isPermaLink="false">fc0e0a2b-6cec-420d-803c-2ac8770fc9e8</guid><pubDate>Mon,  2 Jul 2018 13:09:58 +0000</pubDate><dc:creator>Crash Springfield</dc:creator></item><item><title>Our Vision for wasm-bindgen</title><link>https://rustwasm.github.io/2018/07/02/vision-for-wasm-bindgen.html</link><description><![CDATA[The last blog post laid out the Rust and WebAssembly domain working group’s overall vision for Rust and WebAssembly. In this blog post, we will dive into the details of wasm-bindgen, the future we envision for it, and how you can help us build that future.]]></description><guid isPermaLink="false">7d6ed3b9-1295-4331-879f-514cbff7e5ba</guid><pubDate>Mon,  2 Jul 2018 00:00:00 +0000</pubDate><dc:creator>rustwasm</dc:creator></item><item><title>fastcat - A Faster &apos;cat&apos; Implementation Using Splice</title><link>https://matthias-endler.de/2018/fastcat/</link><description><![CDATA[Lots of people asked me to write another piece about the internals of well-known Unix commands. Well, actually, nobody asked me, but it makes for a good intro. I'm sure you’ve read the previous parts about yes and ls — they are awesome.

Anyway, today we talk about cat, which is used to concatenate files - or, more commonly, abused to print a file's contents to the screen.]]></description><guid isPermaLink="false">4c6bb401-ff09-4bce-a6d2-d598777a0ce2</guid><pubDate>Sun,  1 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Matthias Endler</dc:creator></item><item><title>Idioms of Dynamic Languages</title><link>http://willcrichton.net/notes/idioms-of-dynamic-languages/</link><description><![CDATA[Programmers think dynamic languages like Python are easier to use than static ones, but why? I look at uniquely dynamic programming idioms and their static alternatives, identifying a few broad trends that impact language usability.]]></description><guid isPermaLink="false">f12f8561-c983-40b4-a7b4-9da8b350b33d</guid><pubDate>Sun,  1 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Will Crichton</dc:creator></item><item><title>Logistic Regression in Rust</title><link>http://paulkernfeld.com/2018/07/01/logistic-regression-in-rust.html</link><description><![CDATA[This weekend, I implemented logistic regression in Rust. For me, the most interesting parts were learning how to implement a stopping condition and how to automatically set a step size.]]></description><guid isPermaLink="false">b63f8372-7dbc-4bf5-9ab3-e13a95a011be</guid><pubDate>Sun,  1 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Paul Kernfeld</dc:creator></item><item><title>Genetic Algorithms in Rust for Autonomous Agents: An Introduction</title><link>https://medium.com/coinmonks/genetic-algorithms-in-rust-for-autonomous-agents-an-introduction-ac182de32aee</link><description><![CDATA[This article discusses a possible genetic algorithm implementation in Rust applied to the travelling salesman problem.]]></description><guid isPermaLink="false">16b43079-6e0d-4c7e-9ea3-00cf0405bf49</guid><pubDate>Sat, 30 Jun 2018 14:09:48 +0000</pubDate><dc:creator>Mithi</dc:creator></item><item><title>Scripting Language Cleanup</title><link>https://www.anthropicstudios.com/2018/06/30/language-cleanup/</link><description><![CDATA[When we built the original Monsters and Sprites demo, we only had 9 days to get it working before the Playcrafting expo we had signed up for, so we had to cut a lot of corners. Since then I’ve been doing bug fixes and working on a lot of miscellaneous engine/language features that I either couldn’t get done in time for the demo, or didn’t realize were important until I started building it. We’ve made a few game updates since then (we now have sound!), but this post is specifically going to explore some language updates I’ve made.]]></description><guid isPermaLink="false">3b8f7264-75f2-4483-bb45-16770a899291</guid><pubDate>Sat, 30 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Mason Remaley</dc:creator></item><item><title>llvm-tools: a new rustup component for binary inspection and profiling</title><link>https://internals.rust-lang.org/t/llvm-tools-a-new-rustup-component-for-binary-inspection-objdump-nm-size-and-profiling-profdata/7830</link><description><![CDATA[Recent nightly releases provide an opt-in llvm-tools rustup component which you can install using the command: rustup component add llvm-tools. This component contains the following LLVM tools: llvm-nm, llvm-objcopy, llvm-objdump, llvm-profdata, and llvm-size. Most of these tools are LLVM alternatives to GNU binutils. The main advantage of these LLVM tools is that they support all the architectures that the Rust compiler supports.]]></description><guid isPermaLink="false">3b171674-7223-48e4-95da-5f268ec6fa1f</guid><pubDate>Fri, 29 Jun 2018 11:22:00 +0000</pubDate><dc:creator>Jorge Aparicio</dc:creator></item><item><title>Programming Servo: an HTTP cache</title><link>https://medium.com/programming-servo/programming-servo-an-http-cache-edb52a7f267f</link><description><![CDATA[In our previous post, we saw how combining channels with an event-loop could be a useful technique to ‘drive’ the concurrent logic of your system, and it was hinted at that shared mutable state might be more complicated. A good example of such ‘shared mutable state’ in Servo is the HTTP cache.]]></description><guid isPermaLink="false">9497ed78-6b59-4dd0-b1f8-725ca3c628d2</guid><pubDate>Fri, 29 Jun 2018 04:33:13 +0000</pubDate><dc:creator>Gregory Terzian</dc:creator></item><item><title>NES Emulator, Part 2: I sort of know what I’m doing</title><link>https://medium.com/@ltriant/nes-emulator-part-2-i-sort-of-know-what-im-doing-f64d5e61caed</link><description><![CDATA[In my first post about my journey to the center of the NES, I was at the point where I was still working on the CPU; implementing new addressing modes and instructions as I made my way through the nestest ROM. Well, I finally finished the CPU, including a handful of the illegal opcodes. The last of the illegal opcodes just need some placeholders, because, as I understand it, very few games use them.]]></description><guid isPermaLink="false">13dc5703-c3a5-4c10-b3a5-aa53c382c940</guid><pubDate>Fri, 29 Jun 2018 02:24:51 +0000</pubDate><dc:creator>Luke Triantafyllidis</dc:creator></item><item><title>[1807.00067] Josephine: Using JavaScript to safely manage the lifetimes of Rust data</title><link>https://arxiv.org/abs/1807.00067</link><description><![CDATA[This paper is about the interface between languages which use a garbage collector and those which use fancy types for safe manual memory management. Garbage collection is the traditional memory management scheme for functional languages, whereas type systems are now used for memory safety in imperative languages. We use existing techniques for linear capabilities to provide safe access to copyable references, but the application to languages with a tracing garbage collector, and to data with explicit lifetimes is new. This work is related to mixed linear/non-linear programming, but the languages being mixed are Rust and JavaScript.]]></description><guid isPermaLink="false">04445b84-5c91-467e-840c-45df1765c4e6</guid><pubDate>Fri, 29 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Alan Jeffrey</dc:creator></item><item><title>Programming Servo: The script event-loop</title><link>https://medium.com/@polyglot_factotum/programming-servo-the-script-event-loop-be687b985b3e</link><description><![CDATA[One thing I have come to appreciate over time in the design of Servo, is the concurrency story. Basically, it’s pretty much all done using channels(and their multi-process counterpart).

What is so great about channels vs shared mutable state? One thing is, it makes it easier to reason about how various threads will synchronize their behavior as they go on about their business.

The way it’s done in Servo is by combining event-loops with multi-threading/processing. What does that mean?]]></description><guid isPermaLink="false">fa4c6fb5-3c9e-4831-86b1-3585c08398de</guid><pubDate>Thu, 28 Jun 2018 05:17:48 +0000</pubDate><dc:creator>Gregory Terzian</dc:creator></item><item><title>Signal Hook: Unix signal hanadling in Rust</title><link>https://vorner.github.io/2018/06/28/signal-hook.html</link><description><![CDATA[As promised in the previous article (thanks for all the valuable feedback ‒ I didn’t have the time to act on it yet, but I will), this talks about Unix signal handling.

Long story short, I wasn’t happy about the signal handling story in Rust and this is my attempt at improving it.]]></description><guid isPermaLink="false">a721af0b-e469-40ba-8ddc-f5f2a305483f</guid><pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Michal &apos;vorner&apos; Vaner</dc:creator></item><item><title>Nebulet: More answers</title><link>https://lsneff.me/more-answers.html</link><description><![CDATA[Over the last couple of weeks, Nebulet has progressed signifigantly. Because of that, I think it’s time to talk about why I made certain decisions when designing and writing Nebulet.]]></description><guid isPermaLink="false">3b9229a6-90a7-48f7-983f-c2eb1117115e</guid><pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Lachlan Sneff</dc:creator></item><item><title>A Self-ish Bug</title><link>https://llogiq.github.io/2018/06/28/self-bug.html</link><description><![CDATA[I recently found a bug in mutagen: The “exchange arguments” mutation was actually ineffective. I was in the process of refactoring the code to pull coverage reporting into the mutagen calls (to reduce the amount of code generated), so the report_coverage call was to go away anyway. Except this bug masked another, more insiduous one: When I refactored, I found that one of the test would no longer compile methods with self arguments, running into Error E0424 (self keyword used in static method). Consider me confused.]]></description><guid isPermaLink="false">696ba27d-cdab-400f-9e86-a138422c2154</guid><pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>actix – a basic TCP client</title><link>https://simplabs.com/blog/2018/06/27/actix-tcp-client.html</link><description><![CDATA[In our last post about actix we introduced you to the Rust programming language and the actix actor framework. This week we will build a basic TCP client with actix.]]></description><guid isPermaLink="false">863992ef-fc2b-4235-a8bd-206d55fd416f</guid><pubDate>Wed, 27 Jun 2018 00:00:00 +0000</pubDate><dc:creator>Tobias Bieniek</dc:creator></item></channel></rss>