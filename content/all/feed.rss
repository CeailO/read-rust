<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - All Posts</title><link>https://readrust.net/</link><description>All Posts posts on Read Rust</description><item><title>Journey into rust #2: Compute Shaders</title><link>https://jonathansteyfkens.com/rust/opengl/graphics/compute/shader/2018/08/19/compute-shaders.html</link><description><![CDATA[I realized after my first post of this series that it’s not just a journey into rust but also OpenGL. I’ve used other Graphics API’s before but never actually got my hands dirty into OpenGL. Someone on the rust user forums (they are awesome, go check it out!) suggested using compute shaders instead. At the time I had never used compute shaders for a project so I decided to take some time to refactor the program to use a compute shader. This post is a follow up on that remark and will explore the possibilities of using a rust together with OpenGL to run compute shaders.]]></description><guid isPermaLink="false">5e9a2cd7-e018-41d6-bfeb-a0face2c3f0e</guid><pubDate>Sun, 19 Aug 2018 20:30:00 +0000</pubDate><dc:creator>Jonathan Steyfkens</dc:creator></item><item><title>Safe Partial Initialization In Rust</title><link>https://scottjmaddox.github.io/Safe-partial-initialization-in-Rust/</link><description><![CDATA[Say we have a struct, Foo, with multiple fields that we would like to partially initialize without resorting to using unsafe. We could write a procedural macro called PartialInit, for example, which would be invoked using derive.]]></description><guid isPermaLink="false">29c7c773-0be7-4694-a11d-41717eac218c</guid><pubDate>Sun, 19 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Scott J Maddox</dc:creator></item><item><title>A Beginner’s Guide to Rust Macros ✨</title><link>https://medium.com/@phoomparin/a-beginners-guide-to-rust-macros-5c75594498f1</link><description><![CDATA[Demystifying one of Rust’s most powerful feature.]]></description><guid isPermaLink="false">9f3fb115-f832-421a-bf28-18148cc3bde0</guid><pubDate>Sat, 18 Aug 2018 18:35:50 +0000</pubDate><dc:creator>Phoomparin Mano</dc:creator></item><item><title>Anatomy Of a Great Rust Blog</title><link>http://www.wezm.net/technical/2018/08/anatomy-of-a-great-rust-blog/</link><description><![CDATA[I've posted 718 articles to Read Rust. This post shares some insights I've gleaned from them, to make your posts as readable and discoverable as possible.]]></description><guid isPermaLink="false">09da227e-6517-48db-ae3f-90f1d1086731</guid><pubDate>Sat, 18 Aug 2018 06:17:00 +0000</pubDate><dc:creator>Wesley Moore</dc:creator></item><item><title>How Rust’s standard library was vulnerable for years and nobody noticed</title><link>https://medium.com/@shnatsel/how-rusts-standard-library-was-vulnerable-for-years-and-nobody-noticed-aebf0503c3d6</link><description><![CDATA[Rust is a new systems programming language that prides itself on memory safety and speed. The gist of it is that if you write code in Rust, it goes as fast as C or C++, but you will not get mysterious intermittent crashes in production or horrific security vulnerabilities, unlike in the latter two.

That is, until you explicitly opt in to that kind of thing. Uh oh.]]></description><guid isPermaLink="false">7f4b6826-72f6-4842-882d-2a2e5378bdcd</guid><pubDate>Sat, 18 Aug 2018 02:47:33 +0000</pubDate><dc:creator>Sergey &quot;Shnatsel&quot; Davidoff</dc:creator></item><item><title>Programming Servo: Anatomy of a Fetch</title><link>https://medium.com/programming-servo/anatomy-of-a-fetch-8872a5c843cd</link><description><![CDATA[Today, let’s go through an entire fetch in Servo, starting with an example in JS.]]></description><guid isPermaLink="false">8b803f70-9098-40d0-97af-5cdff0cde756</guid><pubDate>Fri, 17 Aug 2018 22:29:36 +0000</pubDate><dc:creator>Gregory Terzian</dc:creator></item><item><title>So You Want to Build a Language VM in Rust - Part 00</title><link>https://medium.com/iridium-vm/so-you-want-to-build-a-language-vm-part-0-f9132f611a1b</link><description><![CDATA[Hi there! This is the prelude to a series of posts to detailing how to build a language VM. If you are familiar with terms like registers, program counter, and assembly, feel free to skip this post. If not, read on. Please note this is nowhere near comprehensive, but enough to understand what we’re building.]]></description><guid isPermaLink="false">f025d0a3-cc4c-45c7-9587-71057b3d9cbf</guid><pubDate>Fri, 17 Aug 2018 19:59:12 +0000</pubDate><dc:creator>Fletcher Haynes</dc:creator></item><item><title>rusty_gl: A simple wrapper over rs-gl to make code safer</title><link>https://www.reddit.com/r/rust/comments/982kqg/rusty_gl_a_simple_wrapper_over_rsgl_to_make_code/</link><description><![CDATA[I enjoy using OpenGL a lot, but when I switched from C++ to Rust I found it to be less fun to use. This is because the OpenGL (from gl-rs) code never really fit alongside the rest of my Rust code, due to unsafe blocks, PascalCase function names, hacky conversions to c_void pointers etc. So, to make my life easier in the future when using OpenGL in Rust, I made this crate.]]></description><guid isPermaLink="false">0d9f9b5e-33e1-492a-976e-fcbf0826cbab</guid><pubDate>Sat, 18 Aug 2018 00:10:17 +1000</pubDate><dc:creator>Hopson97</dc:creator></item><item><title>Toykio, a toy event loop</title><link>https://rust-lang-nursery.github.io/futures-rs/blog/2018/08/17/toykio.html</link><description><![CDATA[In this blog post I’d like to present toykio, a simple futures executor intended for learning about how executors with an event loop work. Toykio only provides a very minimal feature set: An event loop and TCP streams and listeners. However, it turns out that due to the fact that futures are composable, this is enough to build complex clients and servers.]]></description><guid isPermaLink="false">e53853b1-a7ca-4ffc-bf71-510ed37ea402</guid><pubDate>Fri, 17 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Alexander Polakov</dc:creator></item><item><title>Gfx-hal Tutorial part 0: Drawing a triangle</title><link>https://falseidolfactory.com/2018/08/16/gfx-hal-part-0-drawing-a-triangle.html</link><description><![CDATA[Eight part series on using gfx-hal for low level graphics programming.]]></description><guid isPermaLink="false">5eb3a4b0-7653-43b1-9958-a8b96bc32338</guid><pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Mistodon</dc:creator></item><item><title>Rust GraphQL webserver with Warp, Juniper and MongoDB</title><link>http://alex.amiran.it/post/2018-08-16-rust-graphql-webserver-with-warp-juniper-and-mongodb.html</link><description><![CDATA[Rust's web frameworks ecosystem is in constant change, but recently a new framework called warp came out implementing a new, original way to solve the old problem of transforming a request into a response, and I wanted to give it a try.

And, as I use GraphQL massively at work, I also wanted to check how well Juniper implements it. To add some spice, I used MongoDB as a storage engine instead of the ubiquitous and well-supported SQL databases.]]></description><guid isPermaLink="false">1921a96e-ad32-410f-b0a7-c72dc16d3cde</guid><pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate><dc:creator>/dev/random</dc:creator></item><item><title>Writing Integration Tests in Rust</title><link>https://dorianpula.ca/2018/08/15/writing-integration-tests-in-rust-releasing-rookeries-v0-11-0/</link><description><![CDATA[As part of my overall change over in Rookeries, from Python to Rust, I rewrote a suite of integration tests for the server API. To celebrate my successful transition, I released version 0.11.0 of Rookeries, whose tests use pure Rust now!]]></description><guid isPermaLink="false">26f81256-2d48-4d6e-b305-7ed0d88c216b</guid><pubDate>Wed, 15 Aug 2018 23:00:26 +0000</pubDate><dc:creator>Dorian Pula</dc:creator></item><item><title>Futures 0.3.0-alpha.3</title><link>https://rust-lang-nursery.github.io/futures-rs/blog/2018/08/15/futures-0.3.0-alpha.3.html</link><description><![CDATA[A compatibility layer between 0.3 an 0.1 was developed. It is now possible to convert an 0.3 future into an 0.1 future and vice versa. Similar conversions for streams and sinks are also supported. Additionally, it is now possible to run 0.3 futures and async functions on Tokio’s executor. We have a dedicated blog post coming up that explains this in more detail.]]></description><guid isPermaLink="false">2105e8ca-6037-4dfa-86f7-644bdbec71bd</guid><pubDate>Wed, 15 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Josef Brandl</dc:creator></item><item><title>Tower Web 0.2 — Now 100% comment attribute free</title><link>https://medium.com/@carllerche/tower-web-0-2-now-100-comment-attribute-free-3ed0633e47e5</link><description><![CDATA[The short version is, Tower Web 0.2 was just released and regular Rust attributes are now used instead of magic comments. The doc comment is replaced with #[get("/")]. This is thanks to Rust macro wizard David Tolnay. I also thought that it would be best to immediately push out 0.2 and then we can all pretend 0.1 didn’t happen.]]></description><guid isPermaLink="false">e9ddc1eb-5ab9-4f23-8b9a-a41cea991044</guid><pubDate>Tue, 14 Aug 2018 16:22:13 +0000</pubDate><dc:creator>Carl Lerche</dc:creator></item><item><title>Incremental Parsing in Amp</title><link>https://medium.com/@jordan_98525/incremental-parsing-in-amp-ba5e8c3e85dc</link><description><![CDATA[With the latest release of Amp (text editor), syntax highlighting has been overhauled. This post dives into the performance-related redesign that has landed with v0.5.]]></description><guid isPermaLink="false">df22bc28-0b6f-4d1a-960a-9e29ca258b53</guid><pubDate>Tue, 14 Aug 2018 16:13:52 +0000</pubDate><dc:creator>Jordan MacDonald</dc:creator></item><item><title>UniverCity released into early access</title><link>https://thinkof.name/2018/08/14/early-access-release.html</link><description><![CDATA[UniverCity is a university management game being programmed in the Rust programming language. As stated above, the game is in early access and is not complete. There will be changes and additions down the line and finishing it may take some time. You may wish to wait until its further along before buying it.]]></description><guid isPermaLink="false">2e354a2e-10fe-410c-adbf-7b739def3ab6</guid><pubDate>Tue, 14 Aug 2018 10:00:00 +0000</pubDate><dc:creator>Thinkofname</dc:creator></item><item><title>Diagnosing A Weak Memory Ordering Bug</title><link>https://robert.ocallahan.org/2018/08/for-first-time-in-my-life-i-tracked.html</link><description><![CDATA[For the first time in my life I tracked a real bug's root cause to incorrect usage of weak memory orderings. Until now weak memory bugs were something I knew about but had subconciously felt were only relevant to wizards coding on big iron, partly because until recently I've spent most of my career using desktop x86 machines.]]></description><guid isPermaLink="false">4b9c619b-6d09-43a9-82bb-86887dbd3a53</guid><pubDate>Tue, 14 Aug 2018 15:18:00 +1200</pubDate><dc:creator>Robert O&apos;Callahan</dc:creator></item><item><title>GSoC 2018 - D3D11 backend for gfx-rs</title><link>https://gfx-rs.github.io/2018/08/14/gsoc.html</link><description><![CDATA[For this years GSoC I (@fkaa) worked on implementing the DirectX 11 backend for gfx, a graphics API which translates to Vulkan, DirectX 12 and Metal.]]></description><guid isPermaLink="false">c1519934-b4d6-49ed-bc58-1450331afa63</guid><pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Felix Kaaman</dc:creator></item><item><title>A Short Serde Deserialize example</title><link>https://noyez.gitlab.io/post/2018-08-14-short-serde-deserialize-exapmle/</link><description><![CDATA[In my previous post, I described taking a simple enum and creating a custom type in diesel. This post will take that same enum and implement deserialize. I often get tripped up by the mechanics of deserializing so this simple enum makes for a good example. Again, this is to benefit anyone looking for more examples of Serde’s Deserialize as well as for myself, so I can remember next time I need to do this.]]></description><guid isPermaLink="false">45c51d1f-97ea-41ad-a1fe-3aab3c51d9ee</guid><pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Noyez</dc:creator></item><item><title>Software Security is a Programming Languages Issue</title><link>http://www.pl-enthusiast.net/2018/08/13/security-programming-languages-issue/</link><description><![CDATA[This is the the last of three posts on the course I regularly teach, CS 330, Organization of Programming Languages. The first two posts covered programming language styles and mathematical concepts. This post covers the last 1/4 of the course, which focuses on software security, and related to that, the programming language Rust.]]></description><guid isPermaLink="false">be4fb7bc-7b10-41ce-af58-e877d70fd73d</guid><pubDate>Mon, 13 Aug 2018 18:00:43 +0000</pubDate><dc:creator>Michael Hicks</dc:creator></item><item><title>Ludum Dare 42 Postmortem</title><link>https://wiki.alopex.li/LD42Postmortem</link><description><![CDATA[One of my favorite game jams is Ludum Dare: It’s just you, a theme, and 48 hours to make a game. Pure and challenging, and I’ve participated in several of them from time to time with a variety of tools. Usually my go-to is Unity3D, though arguably my best game was in Python+Pygame. This time though, for Ludum Dare 42 on August 2018, I finally had both the energy and ability to write my game in Rust, using ggez. So I decided to write about it!]]></description><guid isPermaLink="false">8914a4f4-eff5-4563-a82f-0c55d013ef7f</guid><pubDate>Mon, 13 Aug 2018 14:53:05 +0000</pubDate><dc:creator>Simon Heath</dc:creator></item><item><title>Rust: _(underscore) Does Not Bind</title><link>https://medium.com/codechain/rust-underscore-does-not-bind-fec6a18115a8</link><description><![CDATA[Rust is a language that utilizes the RAII idiom, resulting in different code depending on when the object is destroyed.]]></description><guid isPermaLink="false">523b014f-5ec9-4569-b31f-44720fb3bbc4</guid><pubDate>Mon, 13 Aug 2018 07:13:58 +0000</pubDate><dc:creator>Seung Woo Kim</dc:creator></item><item><title>Never patterns, exhaustive matching, and uninhabited types (oh my!)</title><link>http://smallcultfollowing.com/babysteps/blog/2018/08/13/never-patterns-exhaustive-matching-and-uninhabited-types-oh-my/</link><description><![CDATA[One of the long-standing issues that we’ve been wrestling with in Rust is how to integrate the concept of an “uninhabited type” – that is, a type which has no values at all. Uninhabited types are useful to represent the “result” of some computation you know will never execute – for example, if you have to define an error type for some computation, but this particular computation can never fail, you might use an uninhabited type.]]></description><guid isPermaLink="false">8a47c51e-2de1-47c2-8c3d-3f2d84ae13cb</guid><pubDate>Mon, 13 Aug 2018 00:00:00 -0700</pubDate><dc:creator>Niko Matsakis</dc:creator></item><item><title>I learnt Rust: less than a memoir</title><link>http://blog.kekoariggin.com/coding/i-learnt-rust-less-than-a-memoir/</link><description><![CDATA[Over the past two months, I worked on a feature for Project Fluent. My feature was needed in the Rust implementation of Fluent and was published as a Rust crate, making my code available to the entire Rust community. Completing this project brought me a great sense of satisfaction, and having contributed a fundamental internationalization crate to the Rust ecosystem is possibly the biggest milestone in my career as a developer.]]></description><guid isPermaLink="false">91714b35-a84b-4ac0-a0ed-57e2bdedc9dc</guid><pubDate>Mon, 13 Aug 2018 04:23:32 +0000</pubDate><dc:creator>Kekoa Riggin</dc:creator></item><item><title>A FizzBuzzy Tour of Traits in Rust</title><link>https://www.joshmcguigan.com/blog/fizzbuzz-tour-of-traits-rust/</link><description><![CDATA[Traits are a core part of the Rust programming language, and understanding traits, particularly those which are part of the standard library, is necessary in order to write idiomatic Rust. In this post I’ll write several FizzBuzz implementations, each demonstrating the use of a different trait from the Rust standard library.]]></description><guid isPermaLink="false">a47db977-bb96-4ecf-9203-8c64b438062d</guid><pubDate>Mon, 13 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Josh Mcguigan</dc:creator></item><item><title>Syntax diagram generator</title><link>https://lukaslueg.github.io/macro_railroad_wasm_demo/</link><description><![CDATA[This is a demonstration of a pure-rust library to generate syntax diagrams for macro_rules!().Diagrams are generated fully automatically from rust-source as Scalable Vector Graphics, using customizable CSS for layout.]]></description><guid isPermaLink="false">47f615b2-5fe1-45a1-b760-9bff19237836</guid><pubDate>Sun, 12 Aug 2018 15:04:11 +0000</pubDate><dc:creator>lukaslueg</dc:creator></item><item><title>Ray Tracing: WebAssembly vs JavaScript</title><link>http://matt-harrison.com/raytracing-webassembly-vs-javascript/</link><description><![CDATA[For the past few months I've been toying about with WebAssembly. The examples I've built using WebAssembly were very simple and could easily have been written in JavaScript with perfectly adequate performance. This got me thinking it's about time I make something to really shows where WebAssembly shines. This led me down the path of thinking about very compute-demanding applications. An obvious example is 3d graphics rendering. Even a small scene like the ones I've been creating involve computing millions of vector dot product calculations per second. This kind of CPU-intensive application seemed right up the street of WebAssembly.]]></description><guid isPermaLink="false">3bdf428b-c38a-4964-a8f2-a4e0106bd5d1</guid><pubDate>Sun, 12 Aug 2018 14:09:42 +0000</pubDate><dc:creator>Matt Harrison</dc:creator></item><item><title>Refactoring with Rust macros</title><link>https://philbooth.me/blog/refactoring-with-rust-macros</link><description><![CDATA[Refactoring boilerplate code is always easy in dynamically-typed languages, but sometimes takes a bit more effort when constrained by strong typing. This is something I was puzzling over recently, when the penny dropped for me about how Rust's macros can be used to bridge the gap.]]></description><guid isPermaLink="false">ff118dd1-1fe8-4cde-a359-a00325002ebd</guid><pubDate>Sun, 12 Aug 2018 12:54:12 +0000</pubDate><dc:creator>Phil Booth</dc:creator></item><item><title>Object Models And Identities</title><link>https://vorner.github.io/2018/08/12/Object-models-and-identities.html</link><description><![CDATA[In many things, Rust is very much like C++. It’s memory management strategy is mostly the same, threading models are copied vanilla, both compile to native code and do about the same optimisations at that time, and traits and templates have a lot in common too. Both tend to be rather feature-rich languages with quite a lot to learn. While Rust is definitely better teacher (I’m looking at you, C++ error message!) and has many more „safety covers“ over the dangerous moving parts inside the engine, the design of the engine is more of an evolution from C++ than a completely new thing.

But I’ve noticed one rather subtle difference in the philosophy of the languages I’d like to describe here. To make it somewhat more complete, I’ll also throw what some other languages do in this area in.]]></description><guid isPermaLink="false">e19ac48b-7995-4b64-82d8-64d149067b54</guid><pubDate>Sun, 12 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Michal &apos;vorner&apos; Vaner</dc:creator></item><item><title>PrettySize for rust</title><link>https://neosmart.net/blog/2018/prettysize-for-rust/</link><description><![CDATA[We’ve just published a rust port of our PrettySize.NET library, now available via cargo and github. Like its .NET predecessor, PrettySize-rs aims to provide a comprehensive API for dealing with file sizes, covering both manipulation and human-readable formatting.]]></description><guid isPermaLink="false">02a5f7b7-0114-440d-9be0-d5aaf77bfa65</guid><pubDate>Sat, 11 Aug 2018 20:56:39 +0000</pubDate><dc:creator>Mahmoud Al-Qudsi</dc:creator></item><item><title>RSoC: Relibc - Wrap up</title><link>https://www.redox-os.org/news/rsoc-relibc-final/</link><description><![CDATA[Time for me to pack up and never ever contribute to Redox ever again… Just kidding. This isn’t goodbye, you can’t get rid of me that easily I’m afraid. I’ll definitely want to contribute more, can’t however say with certainty how much time I’ll get, for school is approaching, quickly]]></description><guid isPermaLink="false">ab387870-cbed-4f6d-b1e2-22d2c2686de4</guid><pubDate>Sat, 11 Aug 2018 00:00:00 +0000</pubDate><dc:creator>jD91mZM2</dc:creator></item><item><title>Journey into Gentoo eclass</title><link>https://gibix.github.io/gsoc/2018/08/11/journey-into-gentoo-eclass.html</link><description><![CDATA[I spent some days writing a portage eclass for Gentoo. I want to share my experience.]]></description><guid isPermaLink="false">fdc8eef0-1b02-41f7-8340-faf4660db183</guid><pubDate>Sat, 11 Aug 2018 00:00:00 +0000</pubDate><dc:creator>gibix</dc:creator></item><item><title>How to alleviate the pain of Rust compile times</title><link>https://vfoley.xyz/rust-compile-speed-tips/</link><description><![CDATA[A few days ago, I wrote about two Rust pain points when using Rust at work. One of these points were the long compile times. In this post, I want to share a few tips that can help alleviate that pain.]]></description><guid isPermaLink="false">6f49ae97-11d3-4e1f-ab95-0307bf406aa5</guid><pubDate>Sat, 11 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Vincent Foley</dc:creator></item><item><title>Portability benchmark of Dota2 on MacOS</title><link>https://gfx-rs.github.io/2018/08/10/dota2-macos-performance.html</link><description><![CDATA[gfx-rs is a Rust project aiming to make graphics programming more accessible and portable, focusing on exposing a universal Vulkan-like API. It’s a single Rust API with multiple backends that implement it: Direct3D 12/11, Metal, Vulkan, and even OpenGL. We are also building a Vulkan Portability implementation based on it, which allows non-Rust applications using Vulkan to run everywhere. This post is focused on the Metal backend only.]]></description><guid isPermaLink="false">526c879c-7409-4234-a92c-e04b21f37d0d</guid><pubDate>Fri, 10 Aug 2018 00:00:00 +0000</pubDate><dc:creator>gfx-rs</dc:creator></item><item><title>Tower Web — A new web framework for Rust</title><link>https://medium.com/@carllerche/tower-web-a-new-web-framework-for-rust-e2912856851b</link><description><![CDATA[I previously announced Tower and mentioned that a web framework was in the works. It took longer than I had hoped (as it sometimes does with software), but today, I am opening up Tower Web.

Tower Web is an asynchronous HTTP web framework that focuses on removing boilerplate. It is built on top of Tokio, Hyper, and of course Tower. It works today on stable Rust.]]></description><guid isPermaLink="false">ea6c2f82-fb04-49be-be31-307284eedba4</guid><pubDate>Thu,  9 Aug 2018 17:46:17 +0000</pubDate><dc:creator>Carl Lerche</dc:creator></item><item><title>Xori - Custom disassembly framework</title><link>https://sites.google.com/secured.org/malwareunicorn/xori</link><description><![CDATA[Xori is an automation-ready disassembly and static analysis library that consumes shellcode or PE binaries and provides triage analysis data.]]></description><guid isPermaLink="false">31c9d3c0-192b-45f2-922e-5b8d188683bc</guid><pubDate>Thu,  9 Aug 2018 08:23:00 +0000</pubDate><dc:creator>Amanda Rousseau and Rich Seymour</dc:creator></item><item><title>The State of GPGPU in Rust</title><link>https://bheisler.github.io/post/state-of-gpgpu-in-rust/</link><description><![CDATA[At work a few months ago, we started experimenting with GPU-acceleration. My boss asked if I was interested. I didn’t know anything about programming GPUs, so of course I said “Heck yes, I’m interested!“. I needed to learn about GPUs in a hurry, and that led to my GPU Path Tracer series. That was a lot of fun, but it showed me that CUDA support in Rust is pretty poor.]]></description><guid isPermaLink="false">704eb876-5cac-4636-8817-4946659876e1</guid><pubDate>Wed,  8 Aug 2018 20:00:00 -0600</pubDate><dc:creator>Brook Heisler</dc:creator></item><item><title>GSoC wrap-up - Splitting Servo&apos;s script crate</title><link>https://blog.servo.org/2018/08/09/gsoc-generic-servo/</link><description><![CDATA[I am Peter Hrvola (retep007) Twitter Github. During my Google Summer of Code (GSoC) project, I have been working on investigating the monolithic nature of Servo’s script crate and prototyping separation to smaller crates. My goal was to improve the use of resources during compilation. Current debug build consumes over 5GB of memory and takes 347s.]]></description><guid isPermaLink="false">e141f480-7f0d-4b15-82b6-44d0f807f09c</guid><pubDate>Thu,  9 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Peter Hrvola</dc:creator></item><item><title>Literate Programming in Rust</title><link>https://damien.codes/posts/literate-rust/</link><description><![CDATA[In which we explore how cargo and rustdoc make it possible to write documentation and unit tests at once, resulting in code that is explained and tested from the POV of a public API.]]></description><guid isPermaLink="false">9a82c540-b8ab-4635-a68b-82754b5fe8a1</guid><pubDate>Thu,  9 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Damien</dc:creator></item><item><title>RSoC: FAT32 Filesystem in Redox - 3</title><link>https://www.redox-os.org/news/rsoc-fat32-3/</link><description><![CDATA[The previous blog post discusses how raw disk reads were implemented in the loader stub. The next step was to implement a clean read API which can be used by different filesystem libraries in order to read their respective filesystems. Since the raw reads from the BIOS interrupt had a granularity in terms of sectors(each sector being 512 bytes), the reads had to be translated in order to provide byte level granularity. The clone_from_slice function ensures that a direct call to memcopy is not required. The refined read function is here.]]></description><guid isPermaLink="false">6f2abec2-1096-4a82-90db-b1962a2876f7</guid><pubDate>Thu,  9 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Deepak Sirone</dc:creator></item><item><title>Kickstart - a fast and simple project template bootstrapper</title><link>https://blog.artemix.org/article/show/kickstart</link><description><![CDATA[Ever had some code base that you regularly use to start a new project? Until now, you've probably lost some time refactoring everything to fill out the right project name, title etc. A few tools already exist but either you're lost in feature bloating hell or you're fighting to configure everything in most cases. The following tool is an early-developement, rust-based, template tool made to be more versatile that its closest python counter-part, cookiecutter.]]></description><guid isPermaLink="false">1d84906a-4085-4d87-8f43-786f1d531f44</guid><pubDate>Wed,  8 Aug 2018 23:02:19 +0000</pubDate><dc:creator>Artemis</dc:creator></item><item><title>Proposal: Rust Custom Test Frameworks</title><link>https://blog.jrenner.net/rust/testing/2018/08/06/custom-test-framework-prop.html</link><description><![CDATA[The Rust community recently approved a Custom Test Frameworks eRFC which lays out a series of goals and possible directions of exploration for implementing custom test frameworks. In this post, I present my own proposed fulfillment of the RFC with rationale.]]></description><guid isPermaLink="false">8c27c640-fb7d-42f9-a31f-09e9f5b35c2d</guid><pubDate>Wed,  8 Aug 2018 08:12:00 +0000</pubDate><dc:creator>John Renner</dc:creator></item><item><title>Launching the 2018 State of Rust Survey</title><link>https://blog.rust-lang.org/2018/08/08/survey.html</link><description><![CDATA[It’s that time again! Time for us to take a look at how the Rust project is doing, and what we should plan for the future. The Rust Community Team is pleased to announce our 2018 State of Rust Survey! Whether or not you use Rust today, we want to know your opinions. Your responses will help the project understand its strengths and weaknesses and establish development priorities for the future.

This year, volunteers have also translated the survey into 14 languages!]]></description><guid isPermaLink="false">f0133b81-60d3-416a-b58a-6d6c9c7afe6a</guid><pubDate>Wed,  8 Aug 2018 00:00:00 +0000</pubDate><dc:creator>The Rust Community Team</dc:creator></item><item><title>Ideas for Rust Meetups</title><link>https://llogiq.github.io/2018/08/08/meetup-ideas.html</link><description><![CDATA[Since I’m co-organizing the Rhein-Main Rust meetup (and am probably the main driving force behind it), I tought, it might be useful to share a few ideas we have that we have either already done, or plan doing – perhaps other meetup organizers can benefit from this. Note that our meetups usually run 2-4 hours, but some attendees may have to join late or leave early so the format has to take this into account.]]></description><guid isPermaLink="false">8cf7d62c-c8d9-4116-ae4c-7ac155d015cb</guid><pubDate>Wed,  8 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>Journey into rust #1: Conway’s Game</title><link>https://jonathansteyfkens.com/rust/opengl/graphics/2018/08/07/rust-conway-game-of-life.html</link><description><![CDATA[The language rust has been popping up on my twitter feed and my personal life more and more. It’s been promoted and presented as the ultra safe language, so naturally I decided to check it out. The upcoming series of posts “Journey into rust” will describe and document my experiences using rust, hopefully explaining certain concepts that rust does differently. This will all be written from a C++ programmers standpoint that was thought writing Object Oriented code. I encourage you the reader to think critically and correct where necessary.

On to the actual first post! After reading “the Rust Programming Language” I wanted to get my hands dirty and actually write some code. I like graphical applications and using low level graphics API’s so I decided to implement a cellular automation in rust. But just implementing cellular automation isn’t very exciting, is it? What if we could do this on the GPU…And off I went on my journey to create Conway’s game of life in rust.]]></description><guid isPermaLink="false">b7c9c3df-7ecd-41f3-8c89-5c1d35298b7b</guid><pubDate>Tue,  7 Aug 2018 22:30:01 +0000</pubDate><dc:creator>Jonathan Steyfkens</dc:creator></item><item><title>Rust concurrency patterns: No context, no cancel, no leaks</title><link>https://medium.com/@polyglot_factotum/rust-concurrency-patterns-no-context-no-cancel-no-leak-b6c1ec2dafa5</link><description><![CDATA[Let’s put ourselves to the challenge of having an ‘infinite’ generator, which will have to be told to stop generating by the consumer…]]></description><guid isPermaLink="false">bbb6ed5a-a451-4abf-bbff-2e0b33f6660a</guid><pubDate>Tue,  7 Aug 2018 10:54:56 +0000</pubDate><dc:creator>Gregory Terzian</dc:creator></item><item><title>Stacked Borrows: An Aliasing Model For Rust</title><link>https://www.ralfj.de/blog/2018/08/07/stacked-borrows.html</link><description><![CDATA[In this post, I am proposing “Stacked Borrows”: A set of rules defining which kinds of aliasing are allowed in Rust. This is intended to answer the question which pointer may be used when to perform which kinds of memory accesses.]]></description><guid isPermaLink="false">b5f6a958-c0bd-4ea9-a1ae-d8e4f5549719</guid><pubDate>Tue,  7 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Ralf Jung</dc:creator></item><item><title>Clippy&apos;s &quot;cast_lossless&quot; Lint Warning</title><link>https://benjamincongdon.me/blog/2018/08/06/Clippys-cast_lossless-Lint-Warning/</link><description><![CDATA[Recently, I was trying out clippy  — a linting and static analysis tool for Rust, when I ran into a lint warning that wasn’t immediately clear to me: warning: casting u8 to u16 may become silently lossy if types change.]]></description><guid isPermaLink="false">64be78c2-0f4e-413f-ac54-1e6b21215413</guid><pubDate>Mon,  6 Aug 2018 20:28:01 +0000</pubDate><dc:creator>Benjamin Congdon</dc:creator></item><item><title>Rust needs BFGS. What is BFGS?</title><link>https://paulkernfeld.com/2018/08/06/rust-needs-bfgs.html</link><description><![CDATA[There is no general “best” way to minimize a function; different kinds of functions require different strategies. However, Python’s scipy and R’s optim both prominently feature an algorithm called BFGS. I’ll explain what BFGS stands for, the problem that it solves, and how it solves it.]]></description><guid isPermaLink="false">1af176be-1d98-419b-85d5-dfbf78cb74df</guid><pubDate>Mon,  6 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Paul Kernfeld</dc:creator></item><item><title>Rust Modules In Less Than 5 Minutes</title><link>https://medium.com/@erik.tate/rust-modules-in-less-than-5-minutes-9bff7f617798</link><description><![CDATA[When I started learning Rust, the module system did not at first seem to be a shining beacon of intuitive design. The Rust documentation is phenomenal, but there are definitely some areas that I found difficult to follow; this being one such topic. So I thought I might take a stab at writing up a guide that I think would have helped me through the awkward growing pains a bit quicker.]]></description><guid isPermaLink="false">7d6c2d9c-16c8-42be-93d5-d61cc9dac117</guid><pubDate>Sun,  5 Aug 2018 23:49:43 +0000</pubDate><dc:creator>Erik Tate</dc:creator></item><item><title>RSoC: Porting Redox to ARM (AArch64) — 0x02</title><link>https://medium.com/@wizofe/rsoc-porting-redox-to-arm-aarch64-0x02-c566ee22f377</link><description><![CDATA[At the time of writing the previous blog the plan was to target the Raspberry Pi 3 (Cortex A53) as a development platform because of its availability, popularity and community. Sadly, it seems that Broadcom went through a lot of shortcuts while implementing this specific design, which means features like GIC are half-there or completely missing, like in this case.

After a discussion with @microcolonel, he proposed and kindly sent me a HiKey960 reference SoC from the awesome Linaro 96Boards initiative. The quality of this board is definitely a lot better than the Raspberry Pi and the documentation is detailed and open. Great stuff.]]></description><guid isPermaLink="false">382f988d-9fe3-4525-9b21-0c6cb4373303</guid><pubDate>Sun,  5 Aug 2018 22:39:42 +0000</pubDate><dc:creator>ioannis valasakis</dc:creator></item><item><title>A small custom Bool Type in Diesel</title><link>https://noyez.gitlab.io/post/2018-08-05-a-small-custom-bool-type-in-diesel/</link><description><![CDATA[I’ve been working with diesel and serde. I use diesel for my postgres datastore, and serde for serializing/deserializing data to the web. Recently I came across a situation where I needed to define my type in diesel as well as implement deserialize in serde. The example below is a fairly simple so it makes for a good example to share so others can learn (and so I can remember how all this works next time I need it).]]></description><guid isPermaLink="false">2182c554-41eb-4ee7-a1de-11eb90a8223d</guid><pubDate>Sun,  5 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Noyez</dc:creator></item><item><title>Amethyst 0.8 has been released!</title><link>https://www.amethyst.rs/blog/release-0-8/</link><description><![CDATA[With a brand new tutorial and a ton of new features, including prefabs, controller support, MP3 audio, localisation and an even better ergonomics!]]></description><guid isPermaLink="false">b5717efe-ad7b-4b02-8554-aba801aff909</guid><pubDate>Sun,  5 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Moxinilian (Théo Degioanni)</dc:creator></item><item><title>Easily Analyzing Your S3 Buckets</title><link>http://whitfin.io/analyzing-your-buckets-with-s3-meta/</link><description><![CDATA[mazon S3 is a storage solution used by pretty much everyone these days. Due to this there are naturally a bunch of tools for doing almost everything you can think of with S3. This post is about a tool I wrote to retrieve metadata about S3 buckets. If you don't care for the post, feel free to skip straight to the repo.]]></description><guid isPermaLink="false">1bc929f4-2800-466c-bd70-fb73f7b70ef8</guid><pubDate>Sat,  4 Aug 2018 17:44:06 +0000</pubDate><dc:creator>Isaac Whitfield</dc:creator></item><item><title>Logging from Rust in librsvg</title><link>https://people.gnome.org/~federico/blog/logging-in-librsvg.html</link><description><![CDATA[Over in this issue we are discussing how to add debug logging for librsvg.  A popular way to add logging to Rust code is to use the log crate. However, the log create is just a facade, and by default the messages do not get emitted anywhere. The calling code has to set up a logger. Crates like env_logger let one set up a logger, during program initialization, that gets configured through an environment variable. This is a problem for librsvg: we are not the program's initialization! Librsvg is a library; it doesn't have a main() function. And since most of the calling code is not Rust, we can't assume that they can call code that can initialize the logging framework.]]></description><guid isPermaLink="false">d711d36a-fa00-4b26-a367-26b70589af2e</guid><pubDate>Fri,  3 Aug 2018 19:29:43 -0500</pubDate><dc:creator>Federico Mena Quintero</dc:creator></item><item><title>Working on the Embedded Rust Book</title><link>https://jamesmunns.com/blog/working-on-the-book/</link><description><![CDATA[TL;DR: Up to now, I haven't had as much time or motivation as I would have like to contribute to the Embedded Rust Book. However, I am excited to see the initial version of the book launch with the 2018 edition of Rust (which will ship with stable support for embedded)!, so I will be committing to write one chapter per two weeks, until the end of the year.

Read below for my plan, and how you can help!]]></description><guid isPermaLink="false">e20d8f7a-53c3-45c8-b16e-ac25a20ff548</guid><pubDate>Sat,  4 Aug 2018 00:00:00 +0000</pubDate><dc:creator>James Munns</dc:creator></item><item><title>Rust and the Case of the Redundant Comparison</title><link>https://blog.dend.ro/rust-and-the-case-of-the-redundant-comparison/</link><description><![CDATA[A couple of days ago I landed my second pull request in the Rust Programming Language repository. This is the story of how that went. This post is inspired by other posts about improving the Rust compiler.]]></description><guid isPermaLink="false">58e93b1c-f7b4-440f-88fb-fa5ab900f1c6</guid><pubDate>Sat,  4 Aug 2018 00:00:00 +0000</pubDate><dc:creator>dend</dc:creator></item><item><title>Some Slight Improvements</title><link>https://llogiq.github.io/2018/08/04/improve.html</link><description><![CDATA[Today I want to talk about two Rust PRs I recently wrote. The PRs in question are #52942 and #52997. Both are relatively small changes to Rust’s internally used data structures that improve performance and readability. Both have some basic benchmarks (the first one already had them and I wrote them for the second one), although it’s rather hard to gauge whether they really impacted compile times (as perf.rust-lang.org puts all changes of the specific day together). But that’s not the point I want to make right now.]]></description><guid isPermaLink="false">02647906-fc14-42ea-87ec-19fc717cb3d7</guid><pubDate>Sat,  4 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>Gutenberg 0.4.0: custom taxonomies, image processing and more</title><link>https://www.vincentprouillet.com/blog/releasing-gutenberg-0-4-0/</link><description><![CDATA[Gutenberg 0.4.0 is out with custom taxonomies, image processing, improved shortcodes and more.]]></description><guid isPermaLink="false">c1718910-2677-4da4-a45f-a8bd055fe075</guid><pubDate>Sat,  4 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Vincent Prouillet</dc:creator></item><item><title>How to run Rust in OpenFaaS</title><link>https://booyaa.wtf/2018/run-rust-in-openfaas/</link><description><![CDATA[OpenFaaS is an open source implementation of Function as a Service (Serverless Functions, microservices) that you can self host. Rather than list all the various offerings in this space, I'll refer you to the Cloud Native Computing Foundation, in particular the interactive Landscape.

You can either deploy existing functions or create new ones. If you create new ones, there's a big list of officially supported languages. Alternative you could turn a CLI into function.

Once I'd given Python and Ruby a go as an introduction, I wanted to see how easy it would be to create a Rust template.]]></description><guid isPermaLink="false">924567bd-54c7-429d-84a6-db7b8b9221f1</guid><pubDate>Sat,  4 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Mark Sta Ana</dc:creator></item><item><title>intl_pluralrules: A Rust Crate for Handling Plural Forms with CLDR Plural Rules</title><link>https://blog.mozilla.org/l10n/2018/08/03/intl_pluralrules-a-rust-crate-for-handling-plural-forms-with-cldr-plural-rules/</link><description><![CDATA[intl_pluralrules is a Rust crate, built to handle pluralization. Pluralization is the foundation for all localization and many internationalization APIs. With the addition of intl_pluralrules, any locale-aware date-, time- or unit-formatting (“1 second” vs “2 seconds”) and many other pluralization-dependent APIs can be added to Rust.]]></description><guid isPermaLink="false">577e9c57-0455-41c6-9711-be71bf55e550</guid><pubDate>Fri,  3 Aug 2018 23:30:19 +0000</pubDate><dc:creator>Kekoa Riggin</dc:creator></item><item><title>Solving the Generalized Streaming Iterator Problem without GATs</title><link>http://lukaskalbertodt.github.io/2018/08/03/solving-the-generalized-streaming-iterator-problem-without-gats.html</link><description><![CDATA[Generic Associated Types (GATs for short) are a long awaited extension to Rust’s type system. They offer a way to work with higher kinded types – a necessity in a couple of situations. A common example is the streaming iterator: an iterator able to return items borrowing from self (the iterator itself). Unfortunately, GATs haven’t even landed in nightly yet. So while are waiting, we can try tackling the streaming iterator problem without GATs. In this post we explore three possible workarounds for situations where an associated type depends on the lifetime of a &self receiver.]]></description><guid isPermaLink="false">2cc12b2e-22fb-461a-be01-ffeab54caa9f</guid><pubDate>Fri,  3 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Lukas Kalbertodt</dc:creator></item><item><title>CLion IDE Rust plugin update: language support improvements, new quick-fixes, improved debugger and more</title><link>https://blog.jetbrains.com/clion/2018/08/intellij-rust-update-2018_2/</link><description><![CDATA[CLion 2018.2 was released just recently. Along with the release, the Rust plugin has had an update! In this blog post, we’d like to highlight some of the main improvements in the plugin.]]></description><guid isPermaLink="false">18d063ca-b781-400f-9e5f-1534b5b90630</guid><pubDate>Thu,  2 Aug 2018 11:01:28 +0000</pubDate><dc:creator>Anastasia Kazakova</dc:creator></item><item><title>Announcing Rust 1.28</title><link>https://blog.rust-lang.org/2018/08/02/Rust-1.28.html</link><description><![CDATA[The Rust team is happy to announce a new version of Rust. This release includes the global_allocator attribute to customise the allocator, improved error messages for format strings, and a number of number related stabilisations.]]></description><guid isPermaLink="false">44372b96-a1e4-44ee-af79-4496c4f629e6</guid><pubDate>Thu,  2 Aug 2018 00:00:00 +0000</pubDate><dc:creator>The Rust Core Team</dc:creator></item><item><title>Why I Ripped The Same CD 300 Times</title><link>https://john-millikin.com/%F0%9F%A4%94/why-i-ripped-the-same-cd-300-times</link><description><![CDATA[The piano arrangement album 帰るべき城 by Altneuland was published in 2005. I discovered it in 2008 (probably on YouTube), downloaded the best copy I could find, and filed it away in the TODO list. Recent advances in international parcel forwarding technology let me buy a used copy last year, but when it arrived none of my CD drives could read track #3. This sort of thing is common when buying used CDs, especially if they need to transit a USPS international shipping center. I shelved it and kept on the lookout for another copy, which I located last month. It arrived on Friday, I immediately tried to rip it, and hit the exact same error. This didn’t seem to be an issue of wear or damage…]]></description><guid isPermaLink="false">bf6d4501-afb3-40dc-aa8a-bef247e2e77b</guid><pubDate>Thu,  2 Aug 2018 00:00:00 +0000</pubDate><dc:creator>John Millikin</dc:creator></item><item><title>Accelerating Edwards Curve Arithmetic with Parallel Formulas</title><link>https://medium.com/@hdevalence/accelerating-edwards-curve-arithmetic-with-parallel-formulas-ac12cf5015be</link><description><![CDATA[The fastest formulas for elliptic curve operations were published by Hisil, Wong, Carter, and Dawson in their 2008 paper Twisted Edwards Curves Revisited. Their paper also describes a parallel version of their formulas, designed to execute four streams of instructions on four independent processors. Until now, these parallel formulas don’t seem to have been implemented in software. But a closer look reveals that slightly modifying the formulas allows the expensive instructions to be executed in uniform, making a vectorized SIMD implementation possible.

I implemented this strategy in Rust, targeting 256-bit wide AVX2 operations. The resulting implementation performs double-base scalar multiplication faster than other Ed25519 implementations I tested, and is even faster than FourQ without endomorphisms]]></description><guid isPermaLink="false">8a924e9f-d803-4e85-b2e8-92b5909c7695</guid><pubDate>Wed,  1 Aug 2018 17:41:42 +0000</pubDate><dc:creator>Henry de Valence</dc:creator></item><item><title>Sequoia, a new OpenPGP implementation</title><link>https://www.reddit.com/r/rust/comments/93mng5/ann_sequoia_a_new_openpgp_implementation/</link><description><![CDATA[This past fall, three former GnuPG developers began working on a new OpenPGP implementation in Rust called Sequoia. As it’s starting to shape up and become useful, I feel now is a good time to announce the project to the larger Rust community, and hopefully get some feedback before our first release.]]></description><guid isPermaLink="false">81096070-a563-47a0-8f09-2e5fb3c1b984</guid><pubDate>Wed,  1 Aug 2018 16:50:12 +1000</pubDate><dc:creator>/u/nwalfield</dc:creator></item><item><title>warp</title><link>http://seanmonstar.com/post/176530511587/warp</link><description><![CDATA[Over the past several months, I’ve been working a web framework in Rust. I wanted to make use of the new hyper 0.12 changes, so the framework is just as fast, is asynchronous, and benefits from all the improvements found powering Linkerd. More importantly, I wanted there to be a reason for making a new framework; it couldn’t just be yet another framework with the only difference being I’ve written it. Instead, the way this framework is used is quite different than many that exist. In doing so, it expresses a strong opinion, which might not match your previous experiences, but I believe it manages to do something really special.

I’m super excited to reveal warp, a joint project with @carllerche.]]></description><guid isPermaLink="false">55adde79-edfa-433f-8c4f-40f2baee7cd9</guid><pubDate>Wed,  1 Aug 2018 00:00:00 +0000</pubDate><dc:creator>Sean McArthur</dc:creator></item><item><title>Announcing Vagga 0.8.1 – PaulColomiets</title><link>https://medium.com/@paulcolomiets/announcing-vagga-0-8-1-5e1fd44ee6fa</link><description><![CDATA[We are excited to announce the next version of vagga, the containerization tool that makes setting up development environments easy and fun. This release brings local overrides for vagga commands, support of ubuntu bionic, better CI support, space reuse between multiple projects, and more.]]></description><guid isPermaLink="false">14507477-073a-4055-a2de-b0e4c4fd2ad5</guid><pubDate>Tue, 31 Jul 2018 19:39:25 +0000</pubDate><dc:creator>PaulColomiets</dc:creator></item><item><title>#[derive(Debug)] on serde steroids</title><link>https://rreverser.com/derive-serdebug/</link><description><![CDATA[In this post I'd like to introduce a serdebug helper which is a drop-in replacement for #[derive(Debug)] with some of the advanced features that serde can provide.]]></description><guid isPermaLink="false">0a171d26-74e1-491c-befd-e02ac528c1ff</guid><pubDate>Tue, 31 Jul 2018 16:00:45 +0000</pubDate><dc:creator>Ingvar Stepanyan</dc:creator></item><item><title>BetaFPV F3 Drone Flight Controller - Board Support Crate</title><link>https://www.joshmcguigan.com/blog/betafpv-drone-flight-controller-board-support-crate/</link><description><![CDATA[In a previous blog post I described how to get a very simple Rust program compiling for and running on the BetaFPV F3 drone flight controller. Since that time I’ve been working to create a board support crate to provide a high level API for the board.]]></description><guid isPermaLink="false">5473f9e8-40a8-43fe-956e-e84678267c90</guid><pubDate>Tue, 31 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Josh Mcguigan</dc:creator></item><item><title>Writing a front-end WebAssembly framework in Rust: lessons learned</title><link>https://medium.com/@robert.balicki_2494/writing-a-front-end-webassembly-framework-in-rust-lessons-learned-7cc48ed27d96</link><description><![CDATA[Over the past few months, I’ve been writing Smithy, a very work-in-progress front-end WebAssembly framework written in Rust.

My goal for Smithy is to enable you to use idiomatic Rust to write front-end code. This has costs: for example worrying about lifetimes and using Rc<RefCell<State>> to share state. But this also has the potential to give you the safety guarantees that the Rust compiler provides when writing browser code!]]></description><guid isPermaLink="false">7f8cf89b-0cca-43c6-a660-3780bd2cdf72</guid><pubDate>Mon, 30 Jul 2018 12:46:05 +0000</pubDate><dc:creator>Robert Balicki</dc:creator></item><item><title>Streaming UTF-8 in Haskell and Rust</title><link>https://www.fpcomplete.com/blog/2018/07/streaming-utf8-haskell-rust</link><description><![CDATA[An investigation into getting Haskell-like error handling ergonomics into a Rust application dealing with streaming UTF-8 encoding and decoding.]]></description><guid isPermaLink="false">8f26eb1d-8d0c-4785-a7fb-85c8cf5c6f27</guid><pubDate>Mon, 30 Jul 2018 09:00:00 +0000</pubDate><dc:creator>Michael Snoyman</dc:creator></item><item><title>That weekend I wasted on newtyped indices</title><link>https://exphp.github.io/2018/07/30/that-weekend-i-wasted-on-newtyped-indices.html</link><description><![CDATA[Today, ajyne posted a thread on users.rust-lang.org asking: What have been the drawbacks of static typing for you? Kornel was quick to reply with a variety of points, but this one in particular stands out to me, "With powerful type systems there’s no end to how far you can go to guarantee things about your program, but you might create a complex monster". As I see it, there is no truer answer. The type system can be a seductive beast, often promising correctness and performance at the low-low, one-time cost of your soul. I personally can name a number of examples from my own code base where I tried to abstract over something too big and failed. I call these my wasted weekends.]]></description><guid isPermaLink="false">4f9e9645-78dc-4c18-a504-653e96a0c960</guid><pubDate>Mon, 30 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Michael Lamparski</dc:creator></item><item><title>Rust: controlling side effects from the test</title><link>https://blog.cyplo.net/posts/2018/07/rust-injection.html</link><description><![CDATA[Imagine you want to write a timestamping repository of some sorts, that will associate the timestamp of when the storage operation was invoked with the stored value. How to write it in Rust ? And more importantly - how to test it ? I would like to share a solution I found and talk a bit about how it works.]]></description><guid isPermaLink="false">3b874195-0df6-40ca-8667-067d3440061b</guid><pubDate>Mon, 30 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Cyryl Płotnicki</dc:creator></item><item><title>Futures 0.3.0-alpha.2</title><link>https://rust-lang-nursery.github.io/futures-rs/blog/2018/07/30/futures-0.3.0-alpha.2.html</link><description><![CDATA[Several new changes while working towards 0.3.]]></description><guid isPermaLink="false">e29e550b-7c05-4625-9a81-513b316b5675</guid><pubDate>Mon, 30 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Josef Brandl</dc:creator></item><item><title>Using C libraries in Rust: make a sys crate</title><link>https://kornel.ski/rust-sys-crate</link><description><![CDATA[Using C libraries in a portable way involves a bit of work: finding the library on the system or building it if it's not available, checking if it is compatible, finding C headers and converting them to Rust modules, and giving Cargo correct linking instructions. Often every step of this is tricky, because operating systems, package managers and libraries have their unique quirks that need special handling.

Fortunately, all this work can be done once in a build script, and published as a <insert library name>-sys Rust crate. This way other Rust programmers will be able to use the C library without having to re-invent the build script themselves.]]></description><guid isPermaLink="false">e0622344-66a9-4b93-a59f-1b5250ba8c98</guid><pubDate>Mon, 30 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Kornel</dc:creator></item><item><title>Empty Rust File to Game in Nine Days</title><link>https://blog.shivoa.net/2018/07/empty-rust-file-to-game-in-nine-days.html</link><description><![CDATA[A Vulkan game from scratch in nine days. Using minimal libraries and pure Rust.]]></description><guid isPermaLink="false">acd4faef-4a0e-411b-9995-1a3554598c04</guid><pubDate>Sat, 28 Jul 2018 22:26:00 +0100</pubDate><dc:creator>Shivoa Birch</dc:creator></item><item><title>nphysics: 2D and 3D real-time physics engine</title><link>http://nphysics.org/</link><description><![CDATA[I’m excited to announce the brand new website/user-guide for the nphysics2d and nphysics3d crates: pure-rust 2D and 3D real-time physics engines with rigid bodies and joints! Online wasm-based demos are also provided (see for example the Multibody joints 34 demo).]]></description><guid isPermaLink="false">a3f0bd42-0a42-4156-9fd6-74aebe5f0465</guid><pubDate>Sun, 29 Jul 2018 03:46:07 +1000</pubDate><dc:creator>Sébastien Crozet</dc:creator></item><item><title>Rust concurrency patterns: Natural Born Pipelines</title><link>https://medium.com/@polyglot_factotum/rust-concurrency-patterns-natural-born-pipelines-4d599e7612fc</link><description><![CDATA[There seems to be demand for a “Rust concurrent pipeline” guide à la https://blog.golang.org/pipelines, so let’s give it a try.]]></description><guid isPermaLink="false">f7eba5d3-ef85-47cb-88ec-345cf3c46ade</guid><pubDate>Sat, 28 Jul 2018 09:12:33 +0000</pubDate><dc:creator>Gregory Terzian</dc:creator></item><item><title>A Snapshot of Rust&apos;s Popularity in July 2018</title><link>http://www.jonathanturner.org/2018/07/snapshot-of-rust-popularity.html</link><description><![CDATA[Talking about a language’s popularity is traditionally a tricky topic. How do you measure popularity? How do you compare one language to another when they’re focused on different styles and different audiences? So, rather than having one or two charts, I’m going to look at a number of “slices” into Rust’s growth to see it front different angles.]]></description><guid isPermaLink="false">2dba28aa-a443-4887-9806-aba84cf787ef</guid><pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Jonathan Turner</dc:creator></item><item><title>Recommending books (with Rust)</title><link>https://maciejkula.github.io/2018/07/27/recommending-books-with-rust/</link><description><![CDATA[In this post, we’re going to build a sequence-based recommender system in Rust: a system that accepts a person’s reading history as input, and outputs recommendations on what to read next.]]></description><guid isPermaLink="false">31fd7758-63f6-4e38-8331-bd27fd6324ba</guid><pubDate>Fri, 27 Jul 2018 09:17:00 -0700</pubDate><dc:creator>Maciej Kula</dc:creator></item><item><title>Using a Mac to cross-compile Linux binaries</title><link>http://timryan.org/2018/07/27/cross-compiling-linux-binaries-from-macos.html</link><description><![CDATA[The cycle of development we’re most familiar with is: write code, compile your code, then run this code on the same machine you were writing it on. On most desktop OSes, you pick up a compiler by downloading one from your package manager. Xcode and Visual Studio are toolchains (actually IDEs) that leverage being platform-specific, each including tools tailored around the platform your code will run on and heavily showcasing the parent OS’s design language.]]></description><guid isPermaLink="false">86add592-8587-406b-8233-a06e675452f0</guid><pubDate>Fri, 27 Jul 2018 13:22:00 +0000</pubDate><dc:creator>Tim Ryan</dc:creator></item><item><title>Rust and OpenGL from scratch, a blog post series about building an OpenGL renderer with Rust</title><link>https://www.reddit.com/r/rust/comments/92abkg/rust_and_opengl_from_scratch_a_blog_post_series/</link><description><![CDATA[I titled this post “from scratch”, because I am going to assume little knowledge of Rust and basic knowledge of 3D graphics and OpenGL.

Therefore, this tutorial may teach you basic Rust and how to get Rust working with OpenGL, however for in-depth OpenGL learning you will need another tutorial or book.

“From Scratch” also means that we will try to build abstractions ourselves, so that we get better knowledge of Rust. In addition to that, we will able to follow existing OpenGL tutorials, because we will know exactly what OpenGL functions we are calling.]]></description><guid isPermaLink="false">1220a3b8-605c-4d1d-8c38-163bd5a8f02e</guid><pubDate>Fri, 27 Jul 2018 17:01:38 +1000</pubDate><dc:creator>Nerijus Arlauskas</dc:creator></item><item><title>Programming Servo: How to match</title><link>https://medium.com/programming-servo/programming-servo-how-to-match-b76c43f76fe6</link><description><![CDATA[Today, let’s share some lessons learned from contributing to Servo, which is a great way to learn Rust.]]></description><guid isPermaLink="false">f0e4ab48-bf11-47bf-9267-4da78f78bdcc</guid><pubDate>Fri, 27 Jul 2018 04:37:21 +0000</pubDate><dc:creator>Gregory Terzian</dc:creator></item><item><title>What is Rust 2018?</title><link>https://blog.rust-lang.org/2018/07/27/what-is-rust-2018.html</link><description><![CDATA[The release of Rust 1.31.0 on December 6th will be the first release of “Rust 2018.” This marks a culmination of the last three years of Rust’s development, and brings it together in one neat package. For example, there will be a 2018 edition of the book that incorporates features stabilized since the print edition was considered finalized.]]></description><guid isPermaLink="false">2c62015d-b849-4ab6-bbc9-e62255ca3473</guid><pubDate>Fri, 27 Jul 2018 00:00:00 +0000</pubDate><dc:creator>The Rust Core Team</dc:creator></item><item><title>Introducing the Routinator 3000</title><link>https://medium.com/nlnetlabs/introducing-the-routinator-3000-2a234d455b2b</link><description><![CDATA[NLnet Labs is embarking on a new adventure. In the coming months we will be developing an RPKI toolset aimed at making BGP routing more secure. It will consist of three parts: a Certificate Authority package, a Publication Server and Relying Party software. We’ve chosen to do the development in a modern systems programming language, Rust.]]></description><guid isPermaLink="false">424adcbb-d3de-467b-8ca2-af877e849e85</guid><pubDate>Thu, 26 Jul 2018 14:43:27 +0000</pubDate><dc:creator>Alex Band</dc:creator></item><item><title>Bringing Rust to Ledger hardware wallets</title><link>https://medium.com/@roosmaa/bringing-rust-to-ledger-hardware-wallet-ccf1356a7de1</link><description><![CDATA[Beginning of this year I wanted to experiment with some embedded development. I ended up looking into Ledger cryptocurrency hardware wallet application development. I wouldn’t actually consider this true embedded development as a lot of the heavy lifting has been done and abstracted away by Ledger, but it’s still writing software for a very constrained environment. Ledger applications only get 4KB of RAM to utilise and most of the embedded development practices still apply (no heap allocations for instance).]]></description><guid isPermaLink="false">41e44eb5-79db-4f16-83c2-a126c4d43286</guid><pubDate>Thu, 26 Jul 2018 12:01:48 +0000</pubDate><dc:creator>Mart Roosmaa</dc:creator></item><item><title>Is WebAssembly the return of Java Applets &amp; Flash?</title><link>https://words.steveklabnik.com/is-webassembly-the-return-of-java-applets-flash</link><description><![CDATA[For this post, I’m going to make three comparisons: to Flash, to Java Applets, and occasionally to PNaCL. Secondly, this post is going to focus on the web use-case for WebAssembly, even though the previous post was about non-web uses. We’ll make that comparison in the next post. Finally, this post is kind of like eating tapas, there’s a bunch of little sections.]]></description><guid isPermaLink="false">6204efce-b9b3-4225-ae6b-5fc74f441d5f</guid><pubDate>Thu, 26 Jul 2018 00:03:00 +0000</pubDate><dc:creator>Steve Klabnik</dc:creator></item><item><title>Announcing the js-sys crate!</title><link>https://rustwasm.github.io/2018/07/26/announcing-the-js-sys-crate.html</link><description><![CDATA[The js-sys crate contains raw #[wasm_bindgen] bindings to all the global APIs guaranteed to exist in every JavaScript environment by the ECMAScript standard. It does not contain bindings to any Web- or Node-specific APIs. With the js-sys crate, we can work with Objects, Arrays, Functions, Maps, Sets, etc… without writing the #[wasm_bindgen] imports by hand.]]></description><guid isPermaLink="false">95c003ee-6a87-45cb-abd3-491bd965d65c</guid><pubDate>Thu, 26 Jul 2018 00:00:00 +0000</pubDate><dc:creator>rustwasm</dc:creator></item><item><title>In Memes We Rust</title><link>https://medium.com/@glitteringkatie/in-memes-we-rust-5c920b1e9af7</link><description><![CDATA[Learning Rust to make a Mocking SpongeBob text generator]]></description><guid isPermaLink="false">2cac0c52-a34d-4124-ab89-d117f7b69118</guid><pubDate>Wed, 25 Jul 2018 20:11:46 +0000</pubDate><dc:creator>Katie Hughes ✨</dc:creator></item><item><title>Pax: A fast dev time JavaScript bundler</title><link>https://pax.js.org/</link><description><![CDATA[Don’t waste time waiting for your bundler to do its thing. Use Pax while you’re developing, and iterate to your heart’s content. Use your super-cool, magical, slow-as-molasses bundler for releases, when you don’t care how long it takes to run.]]></description><guid isPermaLink="false">7161b1be-54de-4776-857e-3ef78df24125</guid><pubDate>Wed, 25 Jul 2018 12:59:16 +0000</pubDate><dc:creator>Nathan</dc:creator></item><item><title>Version selection in Cargo</title><link>http://aturon.github.io/2018/07/25/cargo-version-selection/</link><description><![CDATA[When there are multiple ways to resolve dependencies, Cargo generally chooses the newest possible version. The goal of this post is to explain why Cargo works this way, and how that rationale relates to several recent discussions, including:]]></description><guid isPermaLink="false">d0dc161e-3fcc-4fc7-9032-f9847bf4f3b8</guid><pubDate>Wed, 25 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Aaron Turon</dc:creator></item><item><title>Where next for the Monotron</title><link>http://railwayelectronics.blogspot.com/2018/07/where-next-for-monotron.html?m=1</link><description><![CDATA[It's a couple of months on from my talk at RustFest on Monotron, so I thought it was worth a quick catch up on where we're going next. As a recap, Monotron currently generates an 800 x 600 VGA signal at 60 Hz (with a pixel clock of 40 MHz). It does this using three synchronised SPI peripherals, a timer generating the horizontal-sync pulse and a GPIO pin for the vertical-sync. With the CPU running at a clock speed of 80 MHz, the SPI peripherals are clocked at 20 MHz producing 400 horizontal pixels per line. This is half the nominal 800 pixels, but we needed to sacrifice resolution to double the amount of CPU time we have to 4 clocks per pixel (i.e. 32 clocks per 8-bit character column).]]></description><guid isPermaLink="false">669e3447-5dac-4fe9-a87a-0b315ae3062d</guid><pubDate>Tue, 24 Jul 2018 22:40:00 +0100</pubDate><dc:creator>theJPster</dc:creator></item><item><title>My experience with the Rust 2018 preview</title><link>https://boats.gitlab.io/blog/post/my-experience-with-rust-2018/</link><description><![CDATA[Recently, I wrote a little a side project to sign git commits without gpg. When I did this, I decided to use the Rust 2018 edition. I also transitioned an existing library from Rust 2015 to Rust 2018 to see how that tooling worked. I thought I’d write a blog post about my experience using the Rust 2018 preview and the state of things right now.]]></description><guid isPermaLink="false">a243dc7d-5708-4a3d-bae8-20ccc3de53d0</guid><pubDate>Tue, 24 Jul 2018 00:00:00 +0000</pubDate><dc:creator>boats</dc:creator></item><item><title>Pointers Are Complicated, or: What&apos;s in a Byte?</title><link>https://www.ralfj.de/blog/2018/07/24/pointers-and-bytes.html</link><description><![CDATA[This summer, I am again working on Rust full-time, and again I will work (amongst other things) on a “memory model” for Rust/MIR. However, before I can talk about the ideas I have for this year, I have to finally take the time and dispel the myth that “pointers are simple: they are just integers”. Both parts of this statement are false, at least in languages with unsafe features like Rust or C: Pointers are neither simple nor (just) integers.

I also want to define a piece of the memory model that has to be fixed before we can even talk about some of the more complex parts: Just what is the data that is stored in memory? It is organized in bytes, the minimal addressable unit and the smallest piece that can be accessed (at least on most platforms), but what are the possible values of a byte? Again, it turns out “it’s just an 8-bit integer” does not actually work as the answer.

I hope that by the end of this post, you will agree with me on both of these statements. :)]]></description><guid isPermaLink="false">b4133437-b69d-4491-a40f-a368a8847627</guid><pubDate>Tue, 24 Jul 2018 00:00:00 +0000</pubDate><dc:creator>Ralf Jung</dc:creator></item><item><title>Building Readable Tests with Fluent Testing APIs</title><link>https://leotindall.com/tutorial/building-readable-tests-with-fluent-testing-apis/</link><description><![CDATA[One of the biggest challenges in software testing is defining the input for code under test in a way that is expressive and powerful enough to test complex situations but doesn’t distract from the intent of the test or clutter the test code to a degree that makes it difficult to read.

Many dynamic languages have testing APIs which take advantage of their looser and later type checking to provide easy mocking and stubbing, but strict, statically typed languages can make it difficult to build up suitable instances of the types needed in the test.]]></description><guid isPermaLink="false">96eb15b8-5f51-403c-a699-805553293c16</guid><pubDate>Mon, 23 Jul 2018 09:56:24 -0500</pubDate><dc:creator>Leo Tindall</dc:creator></item><item><title>On impl blocks, injection and surjection in Rust</title><link>https://phaazon.net/blog/on-rust-impl-block</link><description><![CDATA[Rust has this cool feature called impl block. An impl block is just a scope that introduces a way to augment a type with methods – do not confuse impl blocks with trait impls, used to implement a given trait.]]></description><guid isPermaLink="false">4a0e6748-9562-4507-bbfe-3cdf49b6292b</guid><pubDate>Sun, 22 Jul 2018 22:05:00 +0000</pubDate><dc:creator>Dimitri Sabadie</dc:creator></item><item><title>A static web app in Rust</title><link>https://bluejekyll.github.io/blog/rust/2018/07/22/static-web-app-rust.html</link><description><![CDATA[A three day tour of Yew and WASM with Rust]]></description><guid isPermaLink="false">b3d696eb-a5d0-4118-a7b0-328623d35555</guid><pubDate>Sun, 22 Jul 2018 07:00:00 +0000</pubDate><dc:creator>Benjamin Fry</dc:creator></item><item><title>Rust concurrency patterns: communicate by sharing your Sender</title><link>https://medium.com/@polyglot_factotum/rust-concurrency-patterns-communicate-by-sharing-your-sender-11a496ce7791</link><description><![CDATA[Doing concurrency in ‘share by communicating’ style has been popularized by the Go community. It’s a valuable approach to concurrency in Rust too, however, one has to be aware of the different semantics of Rust vs Go channels when doing so.]]></description><guid isPermaLink="false">6c12615c-c39d-4123-993e-a8581915e2f0</guid><pubDate>Sat, 21 Jul 2018 16:10:44 +0000</pubDate><dc:creator>Gregory Terzian</dc:creator></item></channel></rss>