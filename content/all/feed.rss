<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - All Posts</title><link>https://readrust.net/</link><description>All Posts posts on Read Rust</description><item><title>Achieving memory safety without compromise</title><link>https://www.embedded.com/electronics-blogs/say-what-/4460422/Achieving-memory-safety-without-compromise</link><description>A new generation of safe programming languages is leaving garbage collectors and runtimes behind, delivering memory safety and control.</description><guid isPermaLink="false">f1b7c59f-fff8-4000-ac97-2be742b86760</guid><pubDate>Tue, 13 Mar 2018 16:32:00 +0000</pubDate><dc:creator>Adam Foltzer</dc:creator></item><item><title>Building a DNS server in Rust</title><link>https://github.com/EmilHernvall/dnsguide</link><description>With the combined goal of gaining a deep understanding of DNS, of doing something interesting with Rust, and of scratching some of my own itches, I originally set out to implement my own DNS server. This document is not a truthful chronicle of that journey, but rather an idealized version of it, without all the detours I ended up taking. We&apos;ll gradually implement a full DNS server, starting from first principles.</description><guid isPermaLink="false">44e96573-f8b3-4577-8a76-1cbc8a65ec8b</guid><pubDate>Fri, 16 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Emil Hernvall</dc:creator></item><item><title>How Rust Implements Tagged Unions</title><link>http://patshaughnessy.net/2018/3/15/how-rust-implements-tagged-unions</link><description>The Rust compiler implements tagged unions, which prevent you from crashing your program by initializing a union with one variant and accessing it with another. Rust uses enum to improve on both C enums and C unions at the same time.</description><guid isPermaLink="false">f5ba053a-1bbb-465d-a430-55bd0a1d357a</guid><pubDate>Thu, 15 Mar 2018 03:00:00 +0000</pubDate><dc:creator>Pat Shaughnessy</dc:creator></item><item><title>Deciding if two types are equal</title><link>https://llogiq.github.io/2018/03/15/types.html</link><description>mutagen until recently suffered a bug that rendered both the return input and the interchange arguments mutation inapplicable.

To explain, the former mutation compares each input type with the return type and allows code to return inputs of the same type, if any, while the latter compares input arguments’ types and exchanges two equally-typed inputs.</description><guid isPermaLink="false">81e14040-a499-4802-9d1b-c58deeb2be79</guid><pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>Tock 1.0 Kernel Released</title><link>https://www.tockos.org/blog/2018/talking-tock-35/</link><description>We silently tag our first rolling release of the Tock kernel in February. If you’re building applications with Tock or porting to a new board, and want to be immune from updating your code everyday, you can work from that tag. We’ll also upload binary kernel images for the supported board sometime soon.</description><guid isPermaLink="false">a4faa45e-f24e-4ce9-822c-5c4623919e17</guid><pubDate>Tue,  6 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Amit Levy</dc:creator></item><item><title>A Comparison Between Rust and Erlang</title><link>https://www.infoq.com/articles/rust-erlang-comparison</link><description>This article will focus on a comparison between Erlang and Rust, detailing their similarities and differences. It may be interesting to both Erlang developers looking into Rust and Rust developers looking into Erlang. A final section will detail more about each of the language capabilities and shortcomings and argue for the possibility of leveraging both languages&apos; strengths in the same project.</description><guid isPermaLink="false">eabc9692-30cf-4511-89f4-9068b46aadd8</guid><pubDate>Tue, 13 Mar 2018 00:00:00 +0000</pubDate><dc:creator> Krishna Kumar Thokala</dc:creator></item><item><title>How to use external crates with macros in Rust</title><link>https://medium.com/@kimond/how-to-use-external-crates-with-our-macros-in-rust-6dfe025351e0</link><description>A simple approach to use external crates with our macros in Rust.</description><guid isPermaLink="false">24afdde0-ef13-4e26-b39e-b2f9d52ab901</guid><pubDate>Wed, 14 Mar 2018 12:45:30 +0000</pubDate><dc:creator>Kim Desrosiers</dc:creator></item><item><title>Parc3l: Combining Three.js, Rust, and WebAssembly!</title><link>https://medium.com/@cwervo/parc3l-combining-three-js-rust-and-webassembly-c1e643ef7681</link><description>WebAssembly has been interesting me lately, specifically the prospect of doing arithmetically-intensive operations with it, not unlike the fantastic physics engine Emscripten port Ammo.js. Compiling something like that is out of the scope of this little post (but should be getting easier!), and I’ve left some links at the bottom so you can clear more about WebAssembly if you’re interested.</description><guid isPermaLink="false">39f186f6-b177-43e6-9b4c-7ffe689926e7</guid><pubDate>Mon, 12 Mar 2018 14:34:23 +0000</pubDate><dc:creator>Andres Cuervo</dc:creator></item><item><title>Making WebAssembly better for Rust &amp; for all languages</title><link>https://hacks.mozilla.org/2018/03/making-webassembly-better-for-rust-for-all-languages/</link><description>To be a useful as a web language, Rust needs to work well with the JavaScript ecosystem. We have some work to do to get there, and fortunately that work ...</description><guid isPermaLink="false">bf12d6fd-0aea-4d74-b3a7-02a538d210d3</guid><pubDate>Wed, 14 Mar 2018 15:02:52 +0000</pubDate><dc:creator>Lin Clark</dc:creator></item><item><title>Weekly Driver: Using the MCP3425 ADC from Rust</title><link>https://blog.dbrgn.ch/2018/3/13/rust-mcp3425-driver/</link><description>Announing the MCP3425 Rust driver.</description><guid isPermaLink="false">249e8bc3-a836-4b71-89b6-8d7c4d1b0977</guid><pubDate>Tue, 13 Mar 2018 00:00:00 +0100</pubDate><dc:creator>Danilo Bargen</dc:creator></item><item><title>mutagen: Pattern Boldness</title><link>http://llogiq.github.io/2018/03/13/patterns.html</link><description>At the moment, mutagen only considers top-level idents in function arguments (e.g.foo(x: X, y: Y)), but function arguments are actually patterns, so we could have foo((x, y): (X, Y)) or bar(Bar { bla, bazz } : Bar). For now, this means we have no type information for either of those examples.</description><guid isPermaLink="false">962abf61-6061-4e8d-90b1-1d3ba90d5e1d</guid><pubDate>Tue, 13 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>Weekly driver 4: ENC28J60, Ethernet for your microcontroller</title><link>http://blog.japaric.io/wd-4-enc28j60/</link><description>This week I’m releasing a driver for the ENC28J60, an Ethernet controller with SPI interface. This IC lets you connect your microcontroller, if it has a SPI interface, to a Local Area Network or, with more work, to the internet. Apart from the IC you need a RJ45 connector and a few other components so I’m using this module which has the ENC28J60 and all the required components on a single board.</description><guid isPermaLink="false">a48d8156-7f0f-4731-a17b-e36678b86f5f</guid><pubDate>Tue, 13 Mar 2018 04:32:18 +0100</pubDate><dc:creator>Jorge Aparicio</dc:creator></item><item><title>Roguelike Tutorial in Rust + tcod</title><link>https://tomassedovic.github.io/roguelike-tutorial/</link><description>Hello! This tutorial will show you how to write a roguelike in the Rust programming language and the libtcod library.</description><guid isPermaLink="false">85524257-1035-4e25-b20b-57737d314b55</guid><pubDate>Tue, 13 Mar 2018 18:54:54 +0200</pubDate><dc:creator>Tomas Sedovic</dc:creator></item><item><title>Rust&apos;s 2018 Roadmap</title><link>https://blog.rust-lang.org/2018/03/12/roadmap.html</link><description>Each year the Rust community comes together to set out a roadmap. This year, in addition to the survey, we put out a call for blog posts in December, which resulted in 100 blog posts written over the span of a few weeks. The end result is the recently-merged 2018 roadmap RFC.</description><guid isPermaLink="false">4ed8ee1b-6f71-4ac5-b7e5-142509562231</guid><pubDate>Mon, 12 Mar 2018 00:00:00 +0000</pubDate><dc:creator>The Rust Core Team</dc:creator></item><item><title>Crashing a Rust Hyper server with a Denial of Service attack</title><link>https://klausi.github.io/rustnish/2018/03/11/crashing-a-rust-hyper-server-with-a-denial-of-service-attack.html</link><description>I’m writing a reverse proxy in Rust using Hyper and I want to measure performance a bit to know if I’m doing something terribly wrong. By doing that I discovered a Denial of Service vulnerability in Hyper when IO errors are not properly handled. Note that a workaround has been released in the meantime in Hyper 0.11.20, more background info can be found in this Hyper issue.</description><guid isPermaLink="false">4d94c5ba-199d-44c2-9148-7a6bbff699d0</guid><pubDate>Sun, 11 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Klaus Purer</dc:creator></item><item><title>Should You Learn Rust?</title><link>https://vorner.github.io/2018/03/11/Should-you-learn-rust.html</link><description>Oftentimes, I see a variant of this question posted or asked somewhere. In general, most of the times I think the answer is „Yes“, but maybe for reasons other than you’d think at first.</description><guid isPermaLink="false">90d39fbf-c75d-4943-9069-4b65d11b1be9</guid><pubDate>Sun, 11 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Michal &apos;vorner&apos; Vaner</dc:creator></item><item><title>Writing a Simple IPFS Crawler</title><link>https://gkbrk.com/2018/03/writing-a-simple-ipfs-crawler/</link><description>IPFS is a peer-to-peer protocol that allows you to access and publish content in a decentralized fashion. It uses hashes to refer to files. Short of someone posting hashes on a website, discoverability of content is pretty low. In this article, we&amp;rsquo;re going to write a very simple crawler for IPFS.
It&amp;rsquo;s challenging to have a traditional search engine in IPFS because content rarely links to each other. But there is another way than just blindly following links like a traditional crawler.</description><guid isPermaLink="false">e03aa0e5-bb05-48f0-a4a4-0796d14d1115</guid><pubDate>Mon, 12 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Gökberk Yaltıraklı</dc:creator></item><item><title>Rust Tutorial</title><link>https://slashtutorial.com/rust/</link><description>The aim of this tutorial is to take you to a place where you can read and write enough Rust to fully appreciate the excellent learning resources available online, in particular The Book. It’s an opportunity to try before you buy, and get enough feeling for the power of the language to want to go deeper.</description><guid isPermaLink="false">9ecf3a00-a806-4914-a3e2-fd360f7199ed</guid><pubDate>Mon, 12 Mar 2018 16:23:55 +0000</pubDate><dc:creator>Slash Tutorial</dc:creator></item><item><title>The Union of Parallel Universes</title><link>https://quietmisdreavus.net/code/2018/03/09/the-union-of-parallel-universes/</link><description>Rustdoc has a pretty powerful feature that feels pretty unknown. It doesn’t help that it’s currently restricted by a nightly feature gate, but it’s still cool enough that I want to talk about it.</description><guid isPermaLink="false">bd4b8e12-dd4d-4bf8-b553-f5f912ec4e87</guid><pubDate>Fri,  9 Mar 2018 14:30:00 -0600</pubDate><dc:creator>QuietMisdreavus</dc:creator></item><item><title>Exploring Function Overloading</title><link>http://casualhacks.net/blog/2018-03-10/exploring-function-overloading/</link><description>Overloading is the ability to create multiple functions of the same name with different implementations.

Rust has no traditional overloading, you cannot define two methods with the same name. The compiler will complain that you have a duplicate definition regardless of the different argument types.</description><guid isPermaLink="false">db7ea4c5-14ae-4a9d-9bf4-a314c20225f7</guid><pubDate>Sat, 10 Mar 2018 00:00:00 +0900</pubDate><dc:creator>Casper</dc:creator></item><item><title>Writing an OS in Pure Rust</title><link>https://os.phil-opp.com/news/2018-03-09-pure-rust/</link><description>Over the past six months we&apos;ve been working on a second edition of this blog. Our goals for this new version are numerous and we are still not done yet, but today we reached a major milestone: It is now possible to build the OS natively on Windows, macOS, and Linux without any non-Rust dependendencies.</description><guid isPermaLink="false">f6bf64c8-3a31-4614-ba91-f5c16a0986b5</guid><pubDate>Fri,  9 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Philipp Oppermann</dc:creator></item><item><title>A Tiny `ls` Clone Written in Rust</title><link>https://matthias-endler.de/2018/ls/</link><description>In my series of useless Unix tools rewritten in Rust, today I&apos;m going to be covering one of my all-time favorites: ls.</description><guid isPermaLink="false">44f7fa8d-b23d-47e7-b3dd-f227e8317d49</guid><pubDate>Thu,  1 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Matthias Endler</dc:creator></item><item><title>Redefining Failure</title><link>https://epage.github.io/blog/2018/03/redefining-failure/</link><description>I recently got the chance to redo the error handling in two different crates I help maintain. For liquid, I decided to write the error types by hand rather than use something like error-chain. In the case of assert_cli, I decided to finally give failure a try.</description><guid isPermaLink="false">0d2f8636-6f6c-42f3-8159-beac5a856009</guid><pubDate>Fri,  9 Mar 2018 03:08:23 +0000</pubDate><dc:creator>Ed Page</dc:creator></item><item><title>Announcing the Tokio runtime</title><link>https://tokio.rs/blog/2018-03-tokio-runtime/</link><description>I’m happy to announce a new release of Tokio. This release includes the first iteration of the Tokio Runtime.</description><guid isPermaLink="false">fd8646cf-2689-4bd8-b065-4708388250d2</guid><pubDate>Thu,  8 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Carl Lerche</dc:creator></item><item><title>Get started with the Rust programming language</title><link>https://www.ibm.com/developerworks/opensource/library/os-developers-know-rust/index.html?ca=drs</link><description>A recent Stack Overflow survey found that almost 80% of respondents loved using or wanted to develop with the Rust language. That&apos;s an incredible number! So, what&apos;s so good about Rust? This article explores the high points of this C-like language and illustrates why it should be next on your list of languages to learn.</description><guid isPermaLink="false">64fe2d3c-c0cb-41a2-8faf-08d19e59c439</guid><pubDate>Thu,  8 Mar 2018 00:00:00 +0000</pubDate><dc:creator>M. Tim Jones</dc:creator></item><item><title>Building and Deploying Rust with VSTS</title><link>https://blog.x5ff.xyz/blog/rust-ci-cd-vsts/</link><description>Since I started at Microsoft about 6 months ago, I had to catch up on their (our) tech: Azure, .NET, Visual Studio. Yet as an avid GitHub user I overlooked one thing completely: Visual Studio Team Services! Turns out it’s quite the hidden gem and after a colleague showed me some of its power, I had to look into it more deeply. Turns out it’s an easy and free resource for any project. Can it help your project? Yes! How? Find out below 😊</description><guid isPermaLink="false">c35de4ff-df45-4774-998f-f56ddb57b5d2</guid><pubDate>Fri,  2 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Claus</dc:creator></item><item><title>Writing servers with Tokio</title><link>https://blog.passcod.name/2018/mar/07/writing-servers-with-tokio</link><description>I’ve been writing a small toy project with Tokio in my spare time’s spare time. I’ll write more about it at a later date. What I’ve found writing it, though, is that there is a specific pattern to writing servers, both UDP and TCP (and presumably others) in Tokio, and it’s not super obvious at first glance. So here it is.</description><guid isPermaLink="false">dd5790e1-ff4e-4f61-9a8b-05ea774a2e89</guid><pubDate>Wed,  7 Mar 2018 09:35:30 +0000</pubDate><dc:creator>Félix Saparelli</dc:creator></item><item><title>Coping with Mutable State in Multiple Threads with Rust</title><link>https://medium.com/@KevinHoffman/coping-with-mutable-state-in-multiple-threads-with-rust-9059c83b6c01</link><description>One of the value propositions most frequently lauded by Rust developers is its freedom from data races. The compiler will literally not allow you to build code that could ever produce a situation where two threads can mutate the same data.</description><guid isPermaLink="false">8da41ef1-4c51-4269-bec3-fc377a0f387f</guid><pubDate>Mon,  5 Mar 2018 17:42:58 +0000</pubDate><dc:creator>Kevin Hoffman</dc:creator></item><item><title>Getting A Handle On Things</title><link>https://eno.space/blog/2018/03/Getting-a-handle-on-things</link><description>Today we will take a very simple intrusive linked list written in Rust and make it safe. Kind of, anyway.

Before we start making something safe we need an unsafe thing to make safe. Let’s not pretend that what we are doing here is the least bit useful, let us instead do it just for the fun of it. (What we are doing actually is useful, the explanation of which this margin is too narrow to contain.)</description><guid isPermaLink="false">79704e4b-5e9f-4366-84a8-53d5a3431e2f</guid><pubDate>Sat,  3 Mar 2018 00:00:00 +0100</pubDate><dc:creator>@u0060</dc:creator></item><item><title>Getting started with Rust: Reference and Lifetime</title><link>https://www.mathieu-nivoliez.com/posts/2018-03-05-getting-started-with-rust-reference-and-lifetime.html</link><description>Hello everyone! You were waiting for it, and now you are going to get it! Ladies and gentlemen, today we are going to talk about reference and lifetime!</description><guid isPermaLink="false">bd7d2caa-818d-4950-9eca-72588b038bed</guid><pubDate>Mon,  5 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Mathieu Nivoliez</dc:creator></item><item><title>Getting Rusty with Vim</title><link>https://ddrscott.github.io/blog/2018/getting-rusty-with-vim/</link><description> After dabbing in Go and Crystal, I figured I&apos;d give Rust a try. Of course I used Vim along the way. Here are some notes I compiled after my first session.</description><guid isPermaLink="false">5b0beffe-60dc-4ce3-b137-738fb51fd570</guid><pubDate>Sun,  4 Mar 2018 06:30:00 -0600</pubDate><dc:creator>Scott Pierce</dc:creator></item><item><title>Compiling Cargo crates natively with Meson</title><link>https://nibblestew.blogspot.com.au/2018/03/compiling-cargo-crates-natively-with.html</link><description>Recently we have been having discussions about how Rust and Meson should work together, especially for mixed language projects. One thing which multiple people have told me (over a time span of several years, actually) is that Rust is Special in that everyone uses crates for everything. Thus there is no point in having any sort of Rust support, the only true way is to blindly call Cargo and have it do everything exactly the way it wants to.

This seems like a reasonable recommendation so I did what every reasonable person would do and accepted this as is.

But then curiosity takes hold of you and you start to wonder. Is that really the case?</description><guid isPermaLink="false">0c9a85c5-9017-4922-b07a-050f36b8db84</guid><pubDate>Sun,  4 Mar 2018 05:35:00 -0800</pubDate><dc:creator>Jussi</dc:creator></item><item><title>Writing a Microservice in Rust</title><link>http://www.goldsborough.me/rust/web/tutorial/2018/01/20/17-01-11-writing_a_microservice_in_rust/</link><description>Let me begin this article on Writing a Microservice in Rust by talking about C++. I’ve been a reasonably active member of the C++ community for quite a while now, attending and contributing talks to conferences, following the development and evangelism of the language’s more modern features and of course writing lots of it. C++ is a language that gives its users very fine-grained control over all aspects of the program they are writing, at the cost of a steep learning curve and a large body of knowledge required to write effective C++. However, C++ is also a very old language, conceived by Bjarne Stroustrup in 1985, and thus caries a lot of technical debt even into modern standards.</description><guid isPermaLink="false">776dd5f1-c6d0-48da-8e0a-6fcae00fb923</guid><pubDate>Sat, 20 Jan 2018 00:00:00 +0000</pubDate><dc:creator>Peter Goldsborough</dc:creator></item><item><title>Encheapening Cernan Internal Metrics</title><link>http://blog.troutwine.us/2017/08/31/encheapening-cernan-internal-metrics/</link><description>In the new 0.7.x series of cernan we stumbled on a neat, cheap approach for making internal metrics available inside a rust codebase, an approach that has legs in other projects, I&apos;d say. This is going to be a quick note describing what cernan is, what we were doing before and how our current approach works.</description><guid isPermaLink="false">85925a6b-30c1-4c0f-8caf-b6ccd9e3e19c</guid><pubDate>Sun,  4 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Brian L. Troutwine</dc:creator></item><item><title>Why Rust Has Macros</title><link>https://kasma1990.gitlab.io/2018/03/04/why-rust-has-macros/</link><description>When I recently told a coworker that Rust has macros, his first reaction was that this was bad. Previously I would have had the same reaction, but a part of what learning Rust has taught me is that macros don’t need to be bad. This post exists to help explain why that is, by diving into what problems macros solve, with a brief look at their downsides as well. In other words, this post is not a technical deep dive on how macros work, but focuses on the use cases for macros, and doesn’t require much knowledge about Rust to follow.</description><guid isPermaLink="false">c59a9688-62e5-4919-8687-e5ff82c3c5a3</guid><pubDate>Sun,  4 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Kasper Andersen</dc:creator></item><item><title>Serializing awkward data with serde</title><link>http://zork.net/~st/jottings/Serializing_awkward_data_with_serde.html</link><description>Recently I’ve been writing Rust code to work with a third-party data source in TOML format. In other languages I’d just load the data with some standard TOML library and have my program rummage through it, but I’ve been hearing lovely things about the Rust serialization library serde, so I figured I’d try it out.</description><guid isPermaLink="false">95bd2ff7-1a99-4092-931a-b17d782282d3</guid><pubDate>Sun,  4 Mar 2018 07:43:09 +0000</pubDate><dc:creator>Screwtape</dc:creator></item><item><title>Making a Brainf*ck to C Compiler in Rust</title><link>https://medium.com/@CanHasCommunism/making-a-brainf-ck-to-c-compiler-in-rust-10f0c01a282d</link><description>Let’s make a tokenizer and code generator to understand the basics behind tiny compilers.</description><guid isPermaLink="false">39d1ac9b-501b-46c3-b2e6-68f2d4aabe1d</guid><pubDate>Sat,  3 Mar 2018 18:13:20 +0000</pubDate><dc:creator>Aesl</dc:creator></item><item><title>UniverCity - February Change log</title><link>https://thinkof.name/2018/02/28/february-change-log.html</link><description>UniverCity is a university management game being programmed in the Rust programming language. This month was spent mostly on the business side of things, including going through the steam partner process.</description><guid isPermaLink="false">ae89c8c8-fd8f-4432-9b21-1a2651142869</guid><pubDate>Wed, 28 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Matthew Collins</dc:creator></item><item><title>Opportunistic Mutations</title><link>https://llogiq.github.io/2018/03/03/opportune.html</link><description>As you may know, my current mutagen project deals with mutation testing in Rust. However, as I remarked, Rust’s famed flexibility leaves us little room to do mutations while keeping the type checker happy. For example, other mutation testing frameworks can mutate x + y to x - y.

This is an interesting mutation, because it’s so easy to do in languages like Java, which have full type information available at the bytecode level and so hard to do in Rust, because the std::ops traits make everything so hecking flexible.</description><guid isPermaLink="false">2f386775-d0a5-474b-a9de-c14af7453c40</guid><pubDate>Sat,  3 Mar 2018 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>Stopping a Rust worker</title><link>https://matklad.github.io/2018/03/02/stopping-a-rust-worker.html</link><description>This is a small post about a specific pattern for cancellation in the Rust programming language. The pattern is simple and elegant, but it’s rather difficult to come up with it by yourself.</description><guid isPermaLink="false">407d3ba2-d0af-4121-b13a-468b1f0f66cd</guid><pubDate>Fri,  2 Mar 2018 20:11:50 +0000</pubDate><dc:creator>Aleksey Kladov</dc:creator></item><item><title>Rust for Java Devs – Structs</title><link>https://lankydanblog.com/2018/03/01/rust-for-java-devs-structs/</link><description>Next up in Rust for Java Devs we have structs. They are used to hold data within a logical unit that can be passed to other functions or execute their own methods on the values that they store. Now this sounds very familiar… Java objects do the same thing. For example if you took a POJO (Plain Old Java Object) you also pass it to other methods or execute the object’s own methods. In this nature they are alike, but they do have their differences. In this post we will look into creating structs, retrieving their values, defining their own methods and how to execute them.</description><guid isPermaLink="false">4c17c0f4-8148-4408-a54f-733e20c89189</guid><pubDate>Thu,  1 Mar 2018 20:03:54 +0000</pubDate><dc:creator>Dan Newton</dc:creator></item><item><title>Rust on the STMicro Nucleo</title><link>https://medium.com/@pdanielgallagher/rust-on-the-stmicro-nucleo-7a66b97be549</link><description>For the embedded portion of my project, I had two decisions to make: which processors and chips to use, and which language to write the firmware in. Since this personal project is about learning new skills, I decided to use Rust instead of C. I opted to use STMicro’s Nucleo boards, since their ecosystem has shields that do all of the things I would like (WiFi, BLE, and environmental sensing), and there was also a great Rust tutorial for a similar board. However, since I’ve never really done any embedded development, I decided to start with the old standby: copying code off the internet!</description><guid isPermaLink="false">3907940b-eb06-4f2a-a3ff-6df4ae5ac9ca</guid><pubDate>Thu,  1 Mar 2018 05:50:42 +0000</pubDate><dc:creator>Daniel Gallagher</dc:creator></item><item><title>Docker Multi-Stage Build</title><link>https://blog.jawg.io/docker-multi-stage-build/</link><description>On June 13, 2017 took place the Paris Container Day. They unveiled a new docker feature: multi-stage build. That&apos;s the subject of this article.</description><guid isPermaLink="false">ab076ead-649f-47ff-8fa2-a7c243ba3dca</guid><pubDate>Thu,  1 Mar 2018 14:00:00 +0000</pubDate><dc:creator>Jones Magloire</dc:creator></item><item><title>Object Shadowing for Serialization of Complex Types</title><link>https://commiebstrd.github.io/rustlang/serde/json/2018/03/01/object-shadowing.html</link><description>Presently, I’m busy writing a capture the flag (CTF) scoreboard, it requires rather complex structures and relationships with other internal objects. Being a security event, I’d also like to maintain explicit control of user data. While serialization in Rust has come a significant way, leveraging auto-generation presents some issues.</description><guid isPermaLink="false">257617e2-c1fe-44c7-9cb9-7c07495b96ec</guid><pubDate>Thu,  1 Mar 2018 05:00:00 +0000</pubDate><dc:creator>Spenser Reinhardt</dc:creator></item><item><title>Add examples to your Rust libraries</title><link>http://xion.io/post/code/rust-examples.html</link><description>When you’re writing a library for other programs to depend on, it is paramount to think how the developers are going to use it in their code.

The best way to ensure they have a pleasant experience is to put yourself in their shoes. Forget the internal details of your package, and consider only its outward interface. Then, come up with a realistic use case and just implement it.

In other words, you should create complete, end-to-end, and (somewhat) usable example applications.</description><guid isPermaLink="false">ca98f7f9-8927-48e9-8028-15e81f20f8a6</guid><pubDate>Wed, 28 Feb 2018 08:37:00 +0100</pubDate><dc:creator>Karol Kuczmarski</dc:creator></item><item><title>Fast Search Through Metric Spaces with Rust and BK Trees</title><link>https://www.innoq.com/en/blog/looks-the-same-to-me/</link><description>In the previous post, pHash helped us to summarize our photo album. Now it’s time to employ BK-trees and efficiently search through the metric space of perceptual hashes. Let’s roll up the sleeves; more Rust awaits!</description><guid isPermaLink="false">d377bc0d-a127-456d-81fa-926fe634de0f</guid><pubDate>Thu,  1 Mar 2018 00:00:00 +0100</pubDate><dc:creator>Jan Stępień</dc:creator></item><item><title>Three Algorithm Optimizations Outside [Place], [Other place]</title><link>https://medium.com/@urschrei/three-algorithm-optimizations-outside-place-other-place-294de5a68f27</link><description>Recently, I came across an ad for a job that had a precondition for application: it required you to first solve a ✨programming challenge✨:</description><guid isPermaLink="false">0ebef41d-c7b1-424a-a120-ebf1098bbe38</guid><pubDate>Wed, 28 Feb 2018 17:12:42 +0000</pubDate><dc:creator>Steph</dc:creator></item><item><title>My Rust Dockerfile</title><link>https://blog.sedrik.se/posts/my-docker-setup-for-rust/</link><description>Lets deploy small docker images for Rust</description><guid isPermaLink="false">d001ce02-fbfb-4a08-8389-0f713b09bf72</guid><pubDate>Mon, 26 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Fredrik Park</dc:creator></item><item><title>Futures 0.2 is nearing release</title><link>http://aturon.github.io/2018/02/27/futures-0-2-RC/</link><description>On behalf of the futures-rs team, I’m very happy to announce that the master branch is now at 0.2: we have a release candidate! Barring any surprises, we expect to publish to crates.io in the next week or two.

You can peruse the 0.2 API via the hosted crate docs, or dive right in to the master branch. Note that Tokio is not currently compatible with Futures 0.2; see below for more detail.</description><guid isPermaLink="false">067e3ce9-6e69-499c-93f8-a9c4e0f99ce9</guid><pubDate>Tue, 27 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Aaron Turon</dc:creator></item><item><title>Let&apos;s write an embedded-hal-driver</title><link>http://zuendmasse.de/blog/2018/02/23/lets-write-an-embedded-hal-driver/</link><description>Mid January japaric started &quot;The weekly driver initiative&quot; with the goal to kick-start releases of platform agnostic embedded-hal based driver crates. In this post we&apos;ll build an embedded-hal-driver for the AT24C32-EEPROM chip.</description><guid isPermaLink="false">75898724-f900-46ae-877b-36d87b440ac1</guid><pubDate>Sun, 25 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Sebastian Wötzel</dc:creator></item><item><title>Writing a doubly linked list in Rust is easy</title><link>https://www.reddit.com/r/rust/comments/7zsy72/writing_a_doubly_linked_list_in_rust_is_easy/</link><description>This is a response to the recently submitted blog post titled Why Writing a Linked List in (safe) Rust is So Damned Hard. The post on Reddit was even more dramatic: Why Writing a Linked List in Rust is Basically Impossible.

I see exaggarated claims like these very often - and strongly disagree. Writing a doubly linked list in Rust is not hard - in fact, it&apos;s fairly easy! The best strategy, in my opinion, is creating a vector for allocating nodes and using indices instead of pointers. This strategy is often overlooked, getting a &apos;honorauble mention&apos; at best.</description><guid isPermaLink="false">cec6c9fd-a92b-4f5a-8d9b-9b84c263c48f</guid><pubDate>Sat, 24 Feb 2018 00:35:43 +0000</pubDate><dc:creator>/u/stjepang</dc:creator></item><item><title>Discovery: Discover the world of microcontrollers through Rust! - 2018 edition</title><link>https://www.reddit.com/r/rust/comments/80doqg/discovery_discover_the_world_of_microcontrollers/</link><description>This is an mdbook I wrote more than a year ago for a workshop and it&apos;s an introductory course to embedded systems that uses Rust as the teaching language. I just updated the starter code to use the latest versions of everything so it&apos;s now easier to jump from the book to use the latest developments in the Cortex-M ecosystem; there&apos;s no new content, though -- the exercises remain unchanged in terms of goals; just the code has changed.</description><guid isPermaLink="false">0cb6b35f-0d4f-4e71-bcae-66d4cd115d41</guid><pubDate>Mon, 26 Feb 2018 15:12:44 +0000</pubDate><dc:creator>Jorge Aparicio</dc:creator></item><item><title>Reasoning with Types in Rust</title><link>https://aaronweiss.us/posts/2018-02-26-reasoning-with-types-in-rust.html</link><description>Rust is a modern programming language which is marketed primarily on the basis of its very nice type system, and I’d like to tell you about how you can use this type system to reason about your programs in interesting ways. Most of the time when its type system is discussed, the focus is on its guarantee of data race freedom and ability to enable so-called fearless concurrency (and rightfully so—this is a place where Rust truly shines!). Today, I have a different focus in mind, characterized perhaps most succinctly as follows:</description><guid isPermaLink="false">5e572868-98d0-4944-b897-14cca13a39a4</guid><pubDate>Mon, 26 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Aaron Weiss</dc:creator></item><item><title>Speed Without Wizardry</title><link>http://fitzgeraldnick.com/2018/02/26/speed-without-wizardry.html</link><description>Vyacheslav Egorov, who goes by mraleph on the Web, wrote a response to my article “Oxidizing Source Maps with Rust and WebAssembly” titled “Maybe you don’t need Rust and WASM to speed up your JS”.

The “Oxidizing” article recounts my experience integrating Rust (compiled to WebAssembly) into the source-map JavaScript library. Although the JavaScript implementation was originally authored in idiomatic JavaScript style, as we profiled and implemented speed improvements, the code became hard to read and maintain. With Rust and its zero-cost abstractions, we found that there was no trade-off between performance and clean code.</description><guid isPermaLink="false">26bc7432-d561-4e1f-8cf2-2c30b8ac63ab</guid><pubDate>Mon, 26 Feb 2018 00:00:00 -0800</pubDate><dc:creator>Nick Fitzgerald</dc:creator></item><item><title>Transcript: Should you Rust in embedded yet?</title><link>https://kazlauskas.me/entries/rust-embedded-ready.html</link><description>This is a transcript of a talk I gave at the Vilnius Rust meetup.

It would not be an exaggeration to say that embedded is omnipresent. You can find embedded firmware everywhere from fridges, microwaves and personal computers to safety-critical applications in automotive, medical fields, etc.

Most of this software is still written in C or C++, and neither of these, given their non-ideal track record in relation to security critical software, are the most confidence inspiring choice for safety-critical systems.

In my experience, bugs occurring in embedded firmware tend to be fairly similar to those commonly found in the user-space software.</description><guid isPermaLink="false">504ed65c-1efe-4cbd-b655-b17e89110936</guid><pubDate>Sat, 24 Feb 2018 20:09:27 +0000</pubDate><dc:creator>Simonas Kazlauskas</dc:creator></item><item><title>An introduction to writing platform agnostic drivers in Rust using the MCP3008</title><link>http://pramode.in/2018/02/24/an-introduction-to-writing-embedded-hal-based-drivers-in-rust/</link><description>Here is how a device like an accelerometer works: you send the device commands over a serial interface (SPI, I2C), say something like: “get me the X-axis reading”; the device responds by sending back some data.

The way the SPI/I2C/GPIO (and other) interfaces are programmed is very much dependent on the specific microcontroller family. But the actions you need to perform to interface with a device like a temperature sensor / accelerometer etc depend only on the device and are independent of the controller being used. What if you can write a generic accelerometer driver and use it on any microcontroller platform - right from low-end ARM Cortex-M, AVR, MSP430 etc to complex Embedded Linux platforms like the Raspberry Pi? What if you can distribute these drivers on crates.io so that you only have to include one line in your Cargo.toml to use it in your code?</description><guid isPermaLink="false">34ee0b77-cabd-47a8-bb6c-00e8a34046c7</guid><pubDate>Sat, 24 Feb 2018 00:00:00 -0500</pubDate><dc:creator>Pramode C.E</dc:creator></item><item><title>Pushing Rust To 2019</title><link>https://medium.com/@dumindu/pushing-rust-to-2019-9616d82172d3</link><description>Some of these suggestions are not entirely new and have been added as posts/ comments on /r/rust, Github threads. But I believe better listing down all in a one place, because now we are in the correct time even I am bit late.</description><guid isPermaLink="false">0493daa3-4abb-46eb-82de-e75daea4bbac</guid><pubDate>Fri, 23 Feb 2018 15:44:16 +0000</pubDate><dc:creator>Dumindu Madunuwan</dc:creator></item><item><title>How doctests get made</title><link>https://quietmisdreavus.net/code/2018/02/23/how-the-doctests-get-made/</link><description>One of rustdoc’s greatest features is the ability to take code samples within your documentation and run them like tests. This ensures that all your samples stay up to date with your library’s API changes. However, there are some steps that need to happen to massage these “doctests” into something that can be compiled and run like a regular program.</description><guid isPermaLink="false">516e4eaf-1ce1-49be-a457-a471e9f97329</guid><pubDate>Fri, 23 Feb 2018 16:00:00 -0600</pubDate><dc:creator>QuietMisdreavus</dc:creator></item><item><title>Failure 1.0.0 on March 15</title><link>https://boats.gitlab.io/blog/post/2018-02-22-failure-1.0/</link><description>I’m planning to release a 1.0.0 version of failure on March 15. Once this happens, I don’t plan to release any further breaking changes to the failure crate (though maybe someday in the distant future).
Breaking changes in 1.0 failure is in a somewhat unique position as being a significant part of the public API of other libraries that depend on it. Whether they use the Error struct or derive Fail for a custom error type, this becomes a part of the API they expose to other users.</description><guid isPermaLink="false">b079d66f-d08e-4593-80cc-e0060133d12e</guid><pubDate>Thu, 22 Feb 2018 00:00:00 +0000</pubDate><dc:creator>boats</dc:creator></item><item><title>Recently, for a Rusty Web</title><link>http://seanmonstar.com/post/171170905822/recently-for-a-rusty-web</link><description>It’s been a few months since I shifted my focus full time to Rust, and in that time, we’ve gotten a lot of work done! I wanted to update you here what all that is, since it’s spread around on multiple repositories.</description><guid isPermaLink="false">22d134e6-ddc6-4571-965c-4b6e72a544eb</guid><pubDate>Thu, 22 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Sean McArthur</dc:creator></item><item><title>Rust Typestates</title><link>https://yoric.github.io/post/rust-typestate/</link><description>A long time ago, the Rust language was a language with typestate. Officially, typestates were dropped long before Rust 1.0. In this entry, I’ll get you in on the worst kept secret of the Rust community: Rust still has typestates.</description><guid isPermaLink="false">450ba7fc-c3ea-4af5-bda4-06842f062de8</guid><pubDate>Thu, 22 Feb 2018 15:15:55 +0100</pubDate><dc:creator>David Teller</dc:creator></item><item><title>Oxidizing Fedora: Try Rust and its applications today</title><link>https://fedoramagazine.org/oxidizing-fedora-try-rust-applications-today/</link><description>In recent years, it has become increasingly important to develop software that minimizes security vulnerabilities. Memory management bugs are a common cause of these vulnerabilities. To that end, the Mozilla community has spent the last several years building the Rust language and ecosystem which focuses primarily on eliminating those bugs. And Rust is available in Fedora today, along with a few applications in Fedora 27 and higher, as seen below.</description><guid isPermaLink="false">c5a101b5-e749-4e99-9e08-54de2cf0a2c1</guid><pubDate>Wed, 21 Feb 2018 08:00:23 +0000</pubDate><dc:creator>Igor Gnatenko and Neal Gompa</dc:creator></item><item><title>How to write GStreamer Elements in Rust Part 2: A raw audio sine wave source</title><link>https://coaxion.net/blog/2018/02/how-to-write-gstreamer-elements-in-rust-part-2-a-raw-audio-sine-wave-source/</link><description>A bit later than anticipated, this is now part two of the blog post series about writing GStreamer elements in Rust. Part one can be found here, and I’ll assume that everything written there is known already. In this part, a raw audio sine wave source element is going to be written. It will be similar to the one Mathieu was writing in his blog post about writing such a GStreamer element in Python. Various details will be different though, but more about that later.</description><guid isPermaLink="false">0d46d60e-49c7-44ce-8f0c-48b94501b1ca</guid><pubDate>Wed, 21 Feb 2018 15:05:22 +0000</pubDate><dc:creator>Sebastian Dröge</dc:creator></item><item><title>Why Writing a Linked List in Rust is Basically Impossible [in safe Rust]</title><link>https://rcoh.me/posts/rust-linked-list-basically-impossible/</link><description>Before I start this post, let me preface it by saying that I’m not an experienced Rustacean by any means. Errata and corrections are appreciated. This post is aimed at helping other fledgling rust-learners avoid my mistake. First, by helping Rust learners pick good introductory projects that will fit naturally in idiomatic rust. Second, by helping Rust learners start building Rust-friendly design intuition. I’d heard about Rust and it’s inscrutable borrow checker for years, but after reading a few blog posts about compiler error improvements, I figured it might be user-friendly enough to give it a try.</description><guid isPermaLink="false">45772a5b-1f22-4db9-9eee-f888c0c82660</guid><pubDate>Tue, 20 Feb 2018 08:55:56 -0800</pubDate><dc:creator>Russell Cohen</dc:creator></item><item><title>Rust for Cross-Language System Libraries</title><link>https://libpasta.github.io/blog/bindings/</link><description>We have been building libpasta as a simple, usable solution to password hashing and migration. The goal for libpasta is to be a cross-platform, cross-language system library. libpasta is written in Rust, exports a C-style API, and builds to a static/shared library. Most languages support calling external libraries through foreign function interfaces (FFIs), and the end result can be seen in the documentation where each language has access to the libpasta functionality.</description><guid isPermaLink="false">3dc17991-d359-4205-917a-80b37a564b37</guid><pubDate>Wed, 21 Feb 2018 00:00:00 +0000</pubDate><dc:creator>libpasta</dc:creator></item><item><title>Snips Uses Rust to Build an Embedded Voice Assistant</title><link>https://blog.mozilla.org/blog/2018/02/21/snips-uses-rust-build-embedded-voice-assistant/</link><description>The team at Paris-based Snips has created a voice assistant that can be embedded in a single device or used in a home network to control lights, thermostat, music, and more. You can build a home hub on a Raspberry Pi and ask it for a weather report, to play your favorite song, or to brew up a double espresso. Manufacturers like Keecker are adding Snips’ technology to products like multimedia home robots. And Snips works closely with leaders across the value chain, like NVIDIA, EBV, and Analog Devices, in order to voice-enable an increasingly wider range of device types, from speakers to home automation systems to cars.</description><guid isPermaLink="false">8e33c7c4-2788-418b-8e47-ca8990ae0d38</guid><pubDate>Wed, 21 Feb 2018 12:34:56 -0800</pubDate><dc:creator>Judy DeMocker</dc:creator></item><item><title>I decided to make an 1980&apos;s Home Computer in Rust - Part 1</title><link>http://railwayelectronics.blogspot.com.au/2018/02/i-decided-to-make-1980s-home-computer.html?m=1</link><description>My first attempt at Rust programming was the stellaris-launchpad crate. This has a few demos that either blink the LED or roll it through an RGB rainbow using the PWM timers. Recently I&apos;ve started a new version of the lm4f120 crate called tm4c123x-hal. The name change reflects TI&apos;s new name for basically the exact same part, while the -hal indicates that it&apos;s based upon the output of svd2rust and @japaric&apos;s new Embedded Hal crate. At the same time, I was watching videos on Youtube about a new wave of 1980&apos;s style &apos;retro&apos; computing boards - text output, BASIC interpreter, etc. An idea started to form that I could put all three of these things together.</description><guid isPermaLink="false">b2eb24c3-d7ee-438c-b041-0446dd551abe</guid><pubDate>Tue, 20 Feb 2018 22:16:00 +0000</pubDate><dc:creator>theJPster</dc:creator></item><item><title>Programming an ARM microcontroller in Rust at four different levels of abstraction</title><link>http://pramode.in/2018/02/20/programming-a-microcontroller-in-rust-at-four-levels-of-abstraction/</link><description>Covering: Why Rust on Microcontrollers, Level 1: Direct register access in an unsafe block, Level 2: No unsafe blocks, use the API provided by svd2rust, A problem, Level 3: The embedded HAL to the rescue, Level 4: Use a board support crate.</description><guid isPermaLink="false">f2bf66c3-52bf-4a3c-b508-96bbd3385e8d</guid><pubDate>Tue, 20 Feb 2018 00:00:00 -0500</pubDate><dc:creator>Pramode C.E</dc:creator></item><item><title>Using macro to generate generic docs?</title><link>https://blog.guillaume-gomez.fr/articles/2018-02-19+Using+macro+to+generate+generic+docs%3F</link><description>We were recently able to finally make the docs for integer primitive types much more accurate (thanks to @antoyo!). Now, the code examples match the type for which they&apos;re written. No more i32 examples for i128 (I think you got the idea at this point)! Now, I think a few people might be interested by the method we used to achieve such a result so let&apos;s talk about it.</description><guid isPermaLink="false">c078b1d0-a902-42c5-84d0-5d262146e64c</guid><pubDate>Mon, 19 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Guillaume Gomez</dc:creator></item><item><title>Porting Rust to WebAssembly</title><link>https://udoprog.github.io/rust/2018-02-19/porting-rust-to-wasm.html</link><description>I recently spent some effort trying to make reproto run in a browser. Here I want to outline the problems I encountered and how I worked around them. I will also provide a number of suggestions for how things might be improved for future porters.</description><guid isPermaLink="false">9b97498f-3ffb-4c89-8973-c2beb5e0140e</guid><pubDate>Mon, 19 Feb 2018 00:00:00 +0000</pubDate><dc:creator>John-John Tedro</dc:creator></item><item><title>Weekly driver 1 &amp; 2: L3GD20, LSM303DLHC and Madgwick - Embedded in Rust</title><link>http://blog.japaric.io/wd-1-2-l3gd20-lsm303dlhc-madgwick/</link><description>Oh, time flies. It’s already week 8 and we have zero weekly driver posts out there – don’t worry though because there’s plenty of drivers and embedded-hal implementations in the works. To play catch up in this post I’ll cover two embedded-hal drivers: the l3gd20 and the lsm303dlhc. The L3GD20 is an IC that contains a gyroscope and exposes I2C and SPI interfaces; the LSM303DLHC is an IC that contains an accelerometer and a magnetometer, and exposes an I2C interface. You can find these two ICs on the STM32F3DISCOVERY board.</description><guid isPermaLink="false">25d98aac-94a1-4cda-bbdb-7b22b76ed032</guid><pubDate>Mon, 19 Feb 2018 15:57:59 +0100</pubDate><dc:creator>Jorge Aparicio</dc:creator></item><item><title>Ferrous Oxide For Jaguars And Incremented Crocodiles</title><link>https://eno.space/blog/2018/02/Ferrous-oxide-for-jaguars-and-incremented-crocodiles</link><description>Caveat lector: the primary purpose of the article is to introduce a reader proficient in one of the popular object-oriented languages how not to program in Rust. While each feature of the language will be briefly introduced where it is used, no great efforts will be made to explain the feature in detail. Links to the Rust book should provide that.</description><guid isPermaLink="false">5ecd2c77-20dd-4fd5-84a7-6c8e2364ebde</guid><pubDate>Thu, 15 Feb 2018 00:00:00 +0100</pubDate><dc:creator>@u0060</dc:creator></item><item><title>Rust for Java Devs – Creating functions</title><link>https://lankydanblog.com/2018/02/18/rust-for-java-devs-creating-functions/</link><description>In this post of Rust for Java Devs we will look at creating functions in Rust. Functions in Rust do not differ that much from Java methods but there are a few little differences. There is also the topic of Rust’s lifetimes compared to Java’s garbage collection that one could argue separates the two from each other a bit more, but for this post I will focus on the structure of writing a function in Rust. Due to the similarities between the two, I believe most Java developers will have no problem in figuring out what arguments a Rust function takes, what it outputs and where the output is returned from.</description><guid isPermaLink="false">e5f704af-b1ed-4757-b96d-80402ba3e601</guid><pubDate>Sun, 18 Feb 2018 18:28:19 +0000</pubDate><dc:creator>Dan Newton</dc:creator></item><item><title>Rust things I miss in C</title><link>https://people.gnome.org/~federico/blog/rust-things-i-miss-in-c.html</link><description>Librsvg feels like it is reaching a tipping point, where suddenly it seems like it would be easier to just port some major parts from C to Rust than to just add accessors for them. Also, more and more of the meat of the library is in Rust now. I&apos;m switching back and forth a lot between C and Rust these days, and C feels very, very primitive these days.</description><guid isPermaLink="false">6d0e61c5-087e-48dc-abd8-ded4f3e43a8a</guid><pubDate>Sun, 18 Feb 2018 21:26:04 -0600</pubDate><dc:creator>Federico Mena Quintero</dc:creator></item><item><title>Spectra gets Rust scripting!</title><link>http://phaazon.net/blog/spectra_plugins</link><description>spectra is a crate I’ve been maintaining for a few months / years now. It’s a crate that I mainly use for demoscene productions (I released two with it, Céleri Rémoulade and Outline Invitation) but I also use it to play around and experiment new rendering, animation and video game techniques.</description><guid isPermaLink="false">44ef6094-b3df-4a2c-9cd9-429feecff6bc</guid><pubDate>Mon, 19 Feb 2018 02:57:00 +0000</pubDate><dc:creator>Dimitri Sabadie</dc:creator></item><item><title>Sorting in Rust: Selection, Insertion, and Counting Sort</title><link>https://medium.com/@spyr1014/sorting-in-rust-selection-insertion-and-counting-sort-2c4d3575e364</link><description>Sorting is an invaluable skill and often covered early in a computer science curriculum. Have you ever tried to look up a friends phone number in an unsorted list!? You’d have to look at every single entry. Sorting creates all sorts of ways to access data quicker.</description><guid isPermaLink="false">f77cc701-eca9-4b85-a450-dd10c1766966</guid><pubDate>Sun, 18 Feb 2018 23:57:10 +0000</pubDate><dc:creator>Andrew Jakubowicz</dc:creator></item><item><title>Borrow cycles in Rust: arenas v.s. drop-checking</title><link>https://exyr.org/2018/rust-arenas-vs-dropck/</link><description>Ownership and borrowing are the fundamentals of data structures in Rust. However, both taking owneship of a value (moving it) or taking a reference to it can only happen after the value was created. This ordering seems to prevent having any cycle in a data structure, even though that’s sometimes useful or necessary. For example in a web page’s content tree, from any DOM node, one can easily access (if any) its first and last child, previous and next sibling, (so children of a node form a doubly-linked list) and parent. Some other applications might need to manipulate arbitrary graphs in their full generality.</description><guid isPermaLink="false">ff94e8a6-c203-4cbe-af46-8f99e2896dd8</guid><pubDate>Sat, 17 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Simon Sapin</dc:creator></item><item><title>Setting up Windows 10 for programming (in Rust)</title><link>https://exyr.org/2018/windows/</link><description>Lately I’ve been working with Windows-specific APIs, so I needed to get a Windows dev environment. I’ve mostly used Linux for many years now, so for me programming on Windows feels very foreign. Getting to a point where I started being productive took a number of steps, so here they are, if only for me to find them next time.</description><guid isPermaLink="false">4abf1536-2c82-411a-be74-e85d2155af5a</guid><pubDate>Wed, 31 Jan 2018 00:00:00 +0000</pubDate><dc:creator>Simon Sapin</dc:creator></item><item><title>Zero cost stack overflow protection for ARM Cortex-M devices</title><link>http://blog.japaric.io/stack-overflow-protection/</link><description>One of the core features of Rust is memory safety. Whenever possible the compiler enforces memory safety at compile. One example of this is the borrow checker which prevents data races, iterator invalidation, pointer invalidation and other issues at compile time. Other memory problems like buffer overflows can’t be prevented at compile time. In those cases the compiler inserts runtime checks, bounds checks in this case, to enforce memory safety at runtime. What about stack overflows? For quite a long time Rust didn’t have stack overflow checking but that wasn’t much of a problem on tier 1 platforms since these platforms have an OS and a MMU (Memory Management Unit) that prevents stack overflows from wreaking havoc.</description><guid isPermaLink="false">45c32609-24ef-4288-b361-57ca8b5a34cd</guid><pubDate>Sat, 17 Feb 2018 18:16:39 +0100</pubDate><dc:creator>Jorge Aparicio</dc:creator></item><item><title>Mutation Testing Rust in Earnest</title><link>http://llogiq.github.io/2018/02/14/mutagen.html</link><description>It’s been a while since I last suggested Mutation Testing in Rust, almost two years ago. Since then I got sidetracked a lot, and later lost interest. Just one more cool project I couldn’t afford to take on. But as things go, my interest in mutation testing was rekindled, and I decided to give it a shot and do more than blogging about it.</description><guid isPermaLink="false">a2946d73-a2c7-4d2a-899c-080258552b07</guid><pubDate>Wed, 14 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>Improved User Interface 0.2.0 Released!</title><link>https://www.patreon.com/posts/17016887</link><description>iui, the Improved User Interface crate, has just gotten its 0.2 release. Improved User Interface is a set of safe, idiomatic Rust bindings to platform native GUI libraries (Win32API, Cocoa, and GTK+) via libui and ui-sys. Highlights of this release include: Correct, semantic use of mutability, GTK+ theme application per window, and menu bars and file open/create modal support.</description><guid isPermaLink="false">c780f270-e190-4987-aff1-ff20ebe108bf</guid><pubDate>Fri, 16 Feb 2018 04:16:00 +0000</pubDate><dc:creator>Leo Tindall</dc:creator></item><item><title>Bincode 1.0.0, fast binary serialization with Serde</title><link>http://tyoverby.com/posts/bincode_release.html</link><description>Bincode is a serializer implementation for Serde. If you stick a #[derive(Deserialize, Serialize)] on your struct, Bincode can efficiently serialize and deserialize those structs to and from bytes. Bincode is unique in that it’s a format that was built specifically for the Rust serialization ecosystem. Tight coupling with Serde allows Bincode to be very fast and serialize to very small payloads.</description><guid isPermaLink="false">6a1644f0-2b9e-4c82-9ccd-ef69815f560f</guid><pubDate>Thu, 15 Feb 2018 18:49:27 +0000</pubDate><dc:creator>Ty Overby</dc:creator></item><item><title>&quot;The Expressive C++17 Coding Challenge (in Rust)&quot; Revisited</title><link>http://words.steveklabnik.com/the-expressive-c-17-coding-challenge-in-rust-revisited</link><description>In October of last year, I wrote a post, “The Expressive C++17 Coding Challenge (in Rust)”. For various reasons, it got brought up again in the D world, and seb has written a new post. It’s good, you should check it out! However, it links to my gist, not my blog post. As I said back then: I held myself to the same constraints as the original contest; no external packages is a bit painful in Rust, but it’s not too bad. Mostly it would let me eliminate boilerplate while also improving correctness, and making the code a bit shorter. So, that got me thinking: What would this look like if I could use external packages? I took about an hour, and knocked it out. I have two versions to show you today, one where I pay no attention to allocations, and one where it’s zero-allocation.</description><guid isPermaLink="false">938457b4-8905-4954-9007-88c80a2c24d6</guid><pubDate>Wed, 14 Feb 2018 10:12:15 -0800</pubDate><dc:creator>Steve Klabnik</dc:creator></item><item><title>Fanta: An opinionated framework for web development in rust</title><link>https://github.com/trezm/Fanta</link><description>Fanta is a web framework that aims for developers to be productive and consistent across projects and teams. Its goals are to be: Opinionated, Fast, and Intuitive. Based heavily off of the work here: https://github.com/tokio-rs/tokio-minihttp</description><guid isPermaLink="false">0af4c90e-74b2-438d-aaed-798c9f6e900a</guid><pubDate>Wed, 14 Feb 2018 18:44:00 +1100</pubDate><dc:creator>Peter Mertz</dc:creator></item><item><title>comm is a peer-to-peer instant messaging protocol designed to be resilient to censorship</title><link>https://github.com/zacstewart/comm-gtk</link><description>comm is a peer-to-peer instant messaging protocol designed to be resilient to censorship. comm-gtk is a GUI client built on the comm library. To try it out, start the app. In the configuration window, enter a secret phrase, a bootstrap node (IP:port pair), and a local port to listen on (e.g. 6669). For a bootstrap node, try 165.227.114.200:6667 (or any other node&apos;s IP address if you know one). Click connect to join the network.</description><guid isPermaLink="false">1694fd36-21ca-4e3f-8654-9291c3ba4de7</guid><pubDate>Tue, 13 Feb 2018 23:02:31 -0600</pubDate><dc:creator>Zac Stewart</dc:creator></item><item><title>Gameland intro, reimplemented in Rust for WebAssembly</title><link>http://perlun.eu.org/en/programming/gameland/</link><description>My nice brother Johannes Ridderstedt sent me some old files a few weeks ago (in late 2017), stuff that he had preserved from an age-old computer of ours. One of these was the file named gameland.zip (not published yet, but I might put it up here some day.) I managed to get this running, and liked what I saw (you&apos;ll find the YouTube link to it further down on this page.) Around this time I was reading a bit about WebAssembly which I think will redefine and help reshape the web as we see it today. I was also looking at the Hello, Rust web page, and the &quot;FizzleFade effect using a Feistel network&quot; page in particular.</description><guid isPermaLink="false">86b2dfcd-a01d-47e1-acb8-2ddbca20db62</guid><pubDate>Tue, 13 Feb 2018 07:44:00 +1100</pubDate><dc:creator>Per Lundberg</dc:creator></item><item><title>Event Sourcing with Aggregates in Rust</title><link>https://medium.com/@KevinHoffman/event-sourcing-with-aggregates-in-rust-4022af41cf67</link><description>Everyone loves event sourcing, right up until the moment they have to implement it. At that moment all the wonderful whiteboard drawings…</description><guid isPermaLink="false">bbc46982-1321-4e4e-8d9f-344963341c21</guid><pubDate>Mon, 12 Feb 2018 15:11:08 +0000</pubDate><dc:creator>Kevin Hoffman</dc:creator></item><item><title>First release of TQL: the easy-to-use ORM for Rust</title><link>http://tql-rs.ml/first-release/</link><description>After a couple of weeks of work, I&apos;m now happy to release the first version of tql, the easy-to-use ORM for Rust. While the focus was to make tql work on the stable version of the compiler, I also added some new features. The most notable new feature is the support for SQLite: now tql supports SQLite as well as PostgreSQL. The support for SQLite is almost as complete as the one for PostgreSQL: the only missing function is not implemented because the backend (SQLite) does not support it.</description><guid isPermaLink="false">35c70f95-6097-47df-a470-bb92e99b27e5</guid><pubDate>Sat, 10 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Antoni</dc:creator></item><item><title>Deploying A Rust Server to Google App Engine with Travis CI &amp; Docker</title><link>https://medium.com/@gallantmrgn/deploying-rust-server-to-google-app-engine-with-travis-ci-docker-b80acfce2ce5</link><description>I woke up this morning with one goal: to convert my website (morgangallant.com) into a Rust web server. I have been a long time fan of…</description><guid isPermaLink="false">2b698c99-99e0-4fad-8716-b58dbd9c255c</guid><pubDate>Sun, 11 Feb 2018 00:07:43 +0000</pubDate><dc:creator>Morgan A. Gallant</dc:creator></item><item><title>tealdeer - A very fast implementation of tldr in Rust.</title><link>https://github.com/dbrgn/tealdeer</link><description>A fast command line client for tldr: A collection of simplified and community-driven man pages.</description><guid isPermaLink="false">751253b7-494d-4930-9586-40c18cab9280</guid><pubDate>Mon, 12 Feb 2018 07:46:00 +1100</pubDate><dc:creator>Danilo Bargen</dc:creator></item><item><title>Practical Rust: Installation &amp; Hello World</title><link>https://medium.com/@gallantmrgn/practical-rust-installation-hello-world-d1e52aac1f9</link><description>Recently, a new language called Rust has come into the spotlight, aiming to be a ‘blazingly fast’ language meant for systems programming…</description><guid isPermaLink="false">49ad5651-12e0-4374-9586-d9a86291c165</guid><pubDate>Fri,  2 Feb 2018 18:08:04 +0000</pubDate><dc:creator>Morgan A. Gallant</dc:creator></item><item><title>Corona: If you want to get async out out of your way</title><link>https://vorner.github.io/corona-04.html</link><description>For some time now I develop a Rust library for asynchronous programming with coroutines, called Corona (note there’s a version 0.4.0-pre.1, but Crates prefer the „stable“ 0.3.1). I believe it is starting to be useful, so I wrote this description to show what it is good for and how it fits into the big picture of Rust. There’ll be some more changes, though, at least because Tokio just released a new version (and Futures plan to do so soon), so Corona will have to adapt.</description><guid isPermaLink="false">019b1da3-b979-478b-89ed-7824c75df122</guid><pubDate>Sun, 11 Feb 2018 19:51:00 +1100</pubDate><dc:creator>Michal &apos;vorner&apos; Vaner</dc:creator></item><item><title>RLSL (Rust -&gt; SPIR-V compiler) Progress report</title><link>https://maikklein.github.io/rlsl-progress-report/</link><description>This is a follow up post. RLSL is a Rust to SPIR-V compiler. SPIR-V is the shading language for Vulkan, similar to other shading languages like GLSL, HLSL but more low level. OpenGL, DX9/11/12, Vulkan, Metal are all graphic APIs that are able to use the GPU to draw pixels on the screen. Those APIs have certain stages that can be controlled by the developer by using the correct shading language.</description><guid isPermaLink="false">b8e85b25-1d33-4b69-a3ba-b2cbac2bf62e</guid><pubDate>Fri,  9 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Maik Klein</dc:creator></item><item><title>Reflecting on ppbert</title><link>https://vfoley.xyz/ppbert/</link><description>I had an itch: I was pretty-printing the BERT-encoded terms that we use in a production system at work and it was very slow. The Erlang shell took more than two minutes to dump the largest file. (It took about 0.1 second to read and parse the file; the rest was spent in io:format.) I decided to scratch that itch: I wrote ppbert, a command-line utility that reads BERT-encoded values and pretty-prints them. I’ve worked sporadically on ppbert for almost a year now, I use it daily at work, I’m happy with it, and I want to write about some of the things I learned during that journey.</description><guid isPermaLink="false">28ce1b60-8837-4443-87fb-669bf176db9b</guid><pubDate>Fri,  9 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Vincent Foley</dc:creator></item><item><title>Maximally minimal specialization: always applicable impls</title><link>http://smallcultfollowing.com/babysteps/blog/2018/02/09/maximally-minimal-specialization-always-applicable-impls/</link><description>So aturon wrote this beautiful post about what a good week it has been. In there, they wrote: &quot;Breakthrough #2: @nikomatsakis had a eureka moment and figured out a path to make specialization sound, while still supporting its most important use cases (blog post forthcoming!). Again, this suddenly puts specialization on the map for Rust Epoch 2018&quot;. Sheesh I wish they hadn’t written that! Now the pressure is on. Well, here goes nothing =).</description><guid isPermaLink="false">c7a9c9d2-8858-4f47-afa3-19ec1f2f6b86</guid><pubDate>Fri,  9 Feb 2018 00:00:00 -0500</pubDate><dc:creator>Niko Matsakis</dc:creator></item><item><title>Closing out an incredible week in Rust</title><link>http://aturon.github.io/2018/02/09/amazing-week/</link><description>This week has been so amazing that I just had to write about it. Here’s a quick list of some of what went down in one week:</description><guid isPermaLink="false">325af8a8-af88-4a07-9c8f-16d2865f01f3</guid><pubDate>Fri,  9 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Aaron Turon</dc:creator></item><item><title>A Wee Allocator for WebAssembly</title><link>http://fitzgeraldnick.com/2018/02/09/wee-alloc.html</link><description>Introducing wee_alloc. wee_alloc is a work-in-progress memory allocator designed for WebAssembly. It has a tiny code size footprint, compiling down to only a kilobyte of .wasm code.</description><guid isPermaLink="false">6b542e90-1f02-4368-90e4-a1931ccf1935</guid><pubDate>Fri,  9 Feb 2018 00:00:00 -0800</pubDate><dc:creator>Nick Fitzgerald</dc:creator></item><item><title>Memory safe DMA transfers - Embedded in Rust</title><link>http://blog.japaric.io/safe-dma/</link><description>A blog about Rust and embedded stuff</description><guid isPermaLink="false">b7290658-fff8-4ee5-b8e5-eceefdc6beb6</guid><pubDate>Fri,  9 Feb 2018 11:47:30 +0100</pubDate><dc:creator>Jorge Aparicio</dc:creator></item><item><title>Async/Await V: Getting back to the futures</title><link>https://boats.gitlab.io/blog/post/2018-02-08-async-v-getting-back-to-the-futures/</link><description>Two posts ago I proposed a particular interface for shipping self-referential generators this year. Immediately after that, eddyb showed me a better interface, which I described in the next post. Now, to tie everything together, its time to talk about how we can integrate this into the futures ecosystem. Starting point: this Generator API To begin, I want to document the generator API I’ll be using in this post, which is roughly what followed from my previous post:</description><guid isPermaLink="false">4924a3b4-b71f-4a15-ae2d-0a77bcb30e98</guid><pubDate>Thu,  8 Feb 2018 00:00:00 +0000</pubDate><dc:creator>boats</dc:creator></item><item><title>Combine 3 - Partial parsing in Rust</title><link>https://marwes.github.io/2018/02/08/combine-3.html</link><description>Combine is a parser combinator library for the Rust programming language. I first announced version 3 of Combine back in August and back then I definitely expected to have a stable version by now. However other projects (cough gluon cough) got in the way and Combine fell to the wayside. It didn’t help that I didn’t have a killer feature for 3.0 either, user-defined error types make it possible to define parsers usable in #[no_std] crates which is great when you need it but it is still a fairly niche use-case.</description><guid isPermaLink="false">29eb1ede-d551-4b8d-aeec-c673aafb7e8f</guid><pubDate>Thu,  8 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Markus Westerlind</dc:creator></item><item><title>I rewrote a Nintendo emulator with Rust / WebAssembly (Japanese)</title><link>http://blog.bokuweb.me/entry/2018/02/08/101522</link><description>概要 以前、JSで書いた(ファミコンのエミュレータを書いた - undefined)ファミコンのエミュレータをRustで書き直してみた。 また、技術的な内容はQiitaの方にも書いているので興味のある方は参照してみてください。(まだ Hello, World!までしか書けてませんが。) qiita.com もともとファミコンのエミュレータって新しい言語を習得するのにちょうどいい題材だったりするのでは、って話しからスタートしてて、よくわからないのでJSで書いてみて、ようやくRustで一通りは実装できた感じ。まだバグや未実装（音声周りやマッパー）も多いんですが、ひとまずはお腹いっぱいな感じ。 成果…</description><guid isPermaLink="false">e6347974-c84a-438a-924a-52ef37f6c99a</guid><pubDate>Thu,  8 Feb 2018 10:15:22 +0900</pubDate><dc:creator>bokuweb</dc:creator></item><item><title>6 months into Rust: what was good in 2017 and what will be better in 2018?</title><link>https://gendignoux.com/blog/2018/02/05/rust-best-features-of-2017-and-beyond.html</link><description>Last summer, I finally decided to start learning Rust. I published my first blog post about Rust in September, I then attended my first Rust conference to learn more about the language, and started three Rust projects on GitHub. I now have more experience about the Rust ecosystem, and I want to share some feedback. The call for community blog posts by the Rust team comes right in time!</description><guid isPermaLink="false">94324d77-490d-4897-bfd7-5a5b7c4c0cfb</guid><pubDate>Mon,  5 Feb 2018 22:24:30 +0100</pubDate><dc:creator>Guillaume Endignoux</dc:creator></item><item><title>Tokio Reform is Shipped and the Road to 0.2</title><link>https://tokio.rs/blog/2018-02-tokio-reform-shipped/</link><description>I&apos;m happy to announce that today, the changes proposed in the reform RFC have been released to crates.io as tokio 0.1. The primary changes are: Add a default global event loop, eliminating the need for setting up and managing your own event loop in the vast majority of cases, and decouple all task execution functionality from Tokio.</description><guid isPermaLink="false">b0a2bc9c-effa-4859-b804-cbe839060855</guid><pubDate>Wed,  7 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Carl Lerche</dc:creator></item><item><title>Async/Await IV: An Even Better Proposal</title><link>https://boats.gitlab.io/blog/post/2018-02-07-async-iv-an-even-better-proposal/</link><description>I did not plan to write this blog post. I thought that the fourth post in my series would explain how we could go from the generator API in my previous post to a futures API in which you don’t have to heap allocate every async call. But eddyb surprised me, and now I have to revisit the API in the previous post, because we can implement everything we need from immovability with a safe interface afterall.</description><guid isPermaLink="false">ac0c5546-f21b-4b47-b4a4-950464472aad</guid><pubDate>Wed,  7 Feb 2018 00:00:00 +0000</pubDate><dc:creator>boats</dc:creator></item><item><title>Guitar Effects in Rust</title><link>http://rickyhan.com/jekyll/update/2018/02/06/rust-guitar-pedal-effects-dsp.html</link><description>In an effort to experiment with dsp, I wrote a guitar/bass effects processor this past weekend. The end result works very well (to my pleasant surprise). It doesn’t have 90% of the functionalities of any of rakarrack, guitar rig, garage band but overall it was a fun weekend hack.</description><guid isPermaLink="false">60238a1c-95ee-46d8-bf5c-e70fed87a103</guid><pubDate>Tue,  6 Feb 2018 04:00:00 +0000</pubDate><dc:creator>Ricky Han</dc:creator></item><item><title>A vision for portability in Rust</title><link>http://aturon.github.io/2018/02/06/portability-vision/</link><description>TL;DR: This post proposes to deprecate the std facade, instead having a unified std that uses target- and capability-based cfgs to control API availability. Leave comments on internals!</description><guid isPermaLink="false">6e3c698d-7f42-43d4-9c08-2ee084945e5c</guid><pubDate>Tue,  6 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Aaron Turon</dc:creator></item><item><title>Criterion.rs v0.2 - a statistics-driven benchmarking library for Rust</title><link>https://bheisler.github.io/post/criterion-rs-0-2/</link><description>Criterion.rs is a statistics-driven benchmarking library for Rust. It provides precise measurements of changes in the performance of benchmarked code, and gives strong statistical confidence that apparent performance changes are real and not simply noise. Clear output, a simple API and reasonable defaults make it easy to use even for developers without a background in statistics. Unlike the benchmarking harness provided by Rust, Criterion.rs can be used with stable versions of the compiler.</description><guid isPermaLink="false">5e5df82f-aba3-4832-bbe6-e995b2e544ef</guid><pubDate>Mon,  5 Feb 2018 07:00:00 -0600</pubDate><dc:creator>Brook Heisler</dc:creator></item><item><title>Rust Lifetimes for the Uninitialised</title><link>http://asquera.de/blog/2018-01-29/rust-lifetimes-for-the-uninitialised/</link><description>Lifetimes are a interesting subject: a lot of people seem to gain a day-to-day familiarity with them, without fully understanding what they are. Maybe, they are truly Rust&apos;s Monads. Let&apos;s talk about what they are, where you encounter them and then how to get competent with them.</description><guid isPermaLink="false">c0b3d7ad-673f-4eb9-aa54-45447d1eafb0</guid><pubDate>Mon, 29 Jan 2018 15:30:00 +0100</pubDate><dc:creator>Florian Gilcher</dc:creator></item><item><title>Writing eBPF tracing tools in Rust</title><link>https://jvns.ca/blog/2018/02/05/rust-bcc/</link><description>Writing eBPF tracing tools in Rust</description><guid isPermaLink="false">92664a59-08e0-4185-aab2-cd0a29f303f8</guid><pubDate>Mon,  5 Feb 2018 10:23:44 +0000</pubDate><dc:creator>Julia Evans</dc:creator></item><item><title>Introduction to Procedural Macros</title><link>https://tinkering.xyz/posts/introduction-to-proc-macros/</link><description>As a newcomer to Rust, I heard the phrase “procedural macro” thrown around a lot without really understanding what it meant. I figured that I would learn about them if I ever needed them. Well, I’m working on the guts of relm, and a large chunk of it is procedural macros. I’ve learned enough about procedural macros to be dangerous, so I thought I would pass on some knowledge.</description><guid isPermaLink="false">f4e99fe5-2dab-418d-9256-813a75036164</guid><pubDate>Sat,  3 Feb 2018 19:36:37 -0500</pubDate><dc:creator>Zach Mitchell</dc:creator></item><item><title>Async/Await III: Moving Forward with Something Shippable</title><link>https://boats.gitlab.io/blog/post/2018-01-30-async-iii-moving-forward/</link><description>In the first post, we looked at the relationship between generators and a more general notion of self-references. In the second post, we narrowed down exactly what problem we need to solve to make generators work, and talked about some solutions that we’ve considered but don’t feel like we could ship in the near future.
In the original post, I promised that I would have a near term solution by the end of this series.</description><guid isPermaLink="false">25060712-7d38-4492-991d-a52a9111891c</guid><pubDate>Sun,  4 Feb 2018 00:00:00 +0000</pubDate><dc:creator>boats</dc:creator></item><item><title>DataFusion: Big Data Platform for Rust</title><link>https://www.datafusion.rs/</link><description>DataFusion is an open-source Big Data platform implemented in the Rust programming language with a similar programming style to Apache Spark.</description><guid isPermaLink="false">434c400b-b4ac-49c9-87fa-db2a8b5f1ba7</guid><pubDate>Sun,  4 Feb 2018 16:51:47 +0000</pubDate><dc:creator>Andy Grove</dc:creator></item><item><title>retrobasic - A BASIC interpreter written in Rust</title><link>https://github.com/seasalim/retrobasic</link><description>retrobasic is a BASIC interpreter written in Rust. It is based on the original BASIC &apos;64 implementation, and modified as needed to make it more compatible with some of the classic BASIC games.</description><guid isPermaLink="false">303b0429-9b0c-46f8-a555-fbab8c2bdf90</guid><pubDate>Sun,  4 Feb 2018 17:21:55 +0000</pubDate><dc:creator>seasalim</dc:creator></item><item><title>Beginner Bites: A taste of Rust, a safe, concurrent and practical language!</title><link>https://hackernoon.com/a-taste-of-rust-6d8fc60e050</link><description>Experience a sampler of Rust. You’ll get set up, then solve the first Project Euler problem in Rust. This is a language you can’t miss.</description><guid isPermaLink="false">b4def99b-cdec-46c6-9816-a6c85c999ae9</guid><pubDate>Sun,  4 Feb 2018 11:01:00 +0000</pubDate><dc:creator>Andrew Jakubowicz</dc:creator></item><item><title>Adventures in Rust: A Basic 2D Game</title><link>https://a5huynh.github.io/2018/02/02/adventures-in-rust.html</link><description>In an effort to do more fun side projects, I’ve been learning Rust, a wonderful systems programming language developed by the Mozilla Foundation. It’s been a while since I’ve touched a compiled language as my day-to-day often deals with Python and Javascript variants. I was inspired after seeing a lot of interesting articles about Rust usage and decided to dive into learning Rust by creating a very basic 2D game, inspired by the classic Defender arcade game.</description><guid isPermaLink="false">c73d7d0b-4f7a-4448-acee-d98dbb499461</guid><pubDate>Fri,  2 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Andrew Huynh</dc:creator></item><item><title>Writing a command-line program in Rust - Federico&apos;s Blog</title><link>https://people.gnome.org/~federico/blog/writing-a-command-line-program-in-rust.html</link><description>As a library writer, it feels a bit strange, but refreshing, to write a program that actually has a main() function. My experience with Rust so far has been threefold:</description><guid isPermaLink="false">4aeb0aa5-6a72-41c9-87bc-a2e24b5e33d3</guid><pubDate>Sat,  3 Feb 2018 11:41:20 -0600</pubDate><dc:creator>Federico Mena Quintero</dc:creator></item><item><title>Hairy Stuff</title><link>https://www.janwalter.org/jekyll/rendering/pbrt/2018/02/01/hairy-stuff.html</link><description>Last month I was working on a lot of new test scenes for my Rust implementation of the PBRT renderer. But a big chunk of my time went into implementing the curve shape needed for the geometry of hair, and a material, which implements a hair scattering model.</description><guid isPermaLink="false">b8c9dfda-526c-453c-a93b-5c96a207643e</guid><pubDate>Thu,  1 Feb 2018 13:30:00 +0100</pubDate><dc:creator>Jan Walter</dc:creator></item><item><title>PoC: compiling to eBPF from Rust</title><link>https://unhandledexpression.com/2018/02/02/poc-compiling-to-ebpf-from-rust/</link><description>I have been playing with eBPF (extended Berkeley Packet Filters), a neat feature present in recent Linux versions (it evolved from the much older BPF filters). It is a virtual machine running in th…</description><guid isPermaLink="false">444386e2-51fc-488e-ac19-0aa71a4d89a3</guid><pubDate>Fri,  2 Feb 2018 20:33:08 +0000</pubDate><dc:creator>Geoffroy Couprie</dc:creator></item><item><title>Make your own make</title><link>https://matklad.github.io/2018/01/03/make-your-own-make.html</link><description>An obvious idea is to use Rust for task automation. Originally, I have proposed creating a special Cargo subcommand to execute build tasks, implemented as Rust programs, in this thread. However, since then I realized that there are built-in tools in Cargo which allow one to get a pretty ergonomic solution. Namely, the combination of workspaces, aliases and ability to define binaries seems to do the trick.</description><guid isPermaLink="false">93d7f09d-e1eb-4d6a-a792-5765326730be</guid><pubDate>Wed,  3 Jan 2018 10:52:50 +0000</pubDate><dc:creator>Aleksey Kladov</dc:creator></item><item><title>Memory Safety in Rust: A Case Study with C</title><link>http://willcrichton.net/notes/rust-memory-safety/</link><description>To demonstrate the value of Rust&apos;s memory safety rules, I contrast the implementation of a simple vector library in C and Rust, highlighting where and how Rust&apos;s static analysis can prevent tricky memory errors.</description><guid isPermaLink="false">d2fc34d4-c1ec-4c3d-8e39-b420b8f20fe8</guid><pubDate>Fri,  2 Feb 2018 00:00:00 +0000</pubDate><dc:creator>Will Crichton</dc:creator></item><item><title>Benchmark of different Async approaches in Rust</title><link>https://vorner.github.io/async-bench.html</link><description>The story about Rust’s async is still a bit in flux. There’s a bunch of libraries with their pros and cons and different approaches. Even I’m a bit to blame for that, as I’m writing one of my own, called Corona.</description><guid isPermaLink="false">1ccb8993-1118-4eb4-a1fb-0c6146948662</guid><pubDate>Sat,  3 Feb 2018 11:16:55 +0000</pubDate><dc:creator>Michal &apos;vorner&apos; Vaner</dc:creator></item><item><title>Introduction to lyon: 2D vector graphics rendering on the GPU in Rust</title><link>https://nical.github.io/posts/lyon-intro.html</link><description>Lyon is a side-project that I have been working on for quite a while. The goal is to play with rendering 2D vector graphics on the GPU, and it&apos;s been a lot of fun so far. I haven&apos;t talked a lot about it online (except for a couple of reddit threads a year or two ago) so I figured it would be a good topic to get this blog started.</description><guid isPermaLink="false">0cced83f-3736-4917-87a0-408fb4d9f6bb</guid><pubDate>Mon, 22 Jan 2018 00:00:00 +0100</pubDate><dc:creator>Nical</dc:creator></item><item><title>Rust and WebAssembly with Turtle - /var/blog</title><link>https://varblog.org/blog/2018/01/08/rust-and-webassembly-with-turtle/</link><description>In this post, I&apos;ll walk through a few of the highlights of getting Turtle, a Rust library for creating animated drawings, to run in the browser with WebAssembly.</description><guid isPermaLink="false">5c8f0581-5b1d-485b-852c-83c0deef73d5</guid><pubDate>Mon,  8 Jan 2018 09:54:00 -0600</pubDate><dc:creator>Marshall Pierce</dc:creator></item><item><title>mdcat - Cat for markdown: Show markdown documents in TTYs</title><link>https://github.com/lunaryorn/mdcat</link><description>Cat for markdown: Show markdown documents in TTYs</description><guid isPermaLink="false">2168f429-844d-4629-97da-c149e9026cfd</guid><pubDate>Sat,  3 Feb 2018 18:23:00 +1100</pubDate><dc:creator>Sebastian Wiesner</dc:creator></item><item><title>Faster Progress Report 2</title><link>https://adamniederer.com/blog/faster-pr-2.html</link><description>faster began as a yak shave, created to aid base💯 in its quest to become the fastest meme on Github. Writing an explicit AVX2-accelerated version of base💯&apos;s encoder and decoder, then realizing I&apos;d have to do the same thing again to see the speedups on my Ivy Bridge desktop, pushed me to make this library. Months later, it has blossomed into its own project, and has eclipsed base💯 in both popularity and promise.</description><guid isPermaLink="false">e1a29851-ab4c-4739-a41f-56e9c783f5e4</guid><pubDate>Sun, 28 Jan 2018 22:14:41 +0000</pubDate><dc:creator>Adam Niederer</dc:creator></item><item><title>Experimenting with the New I/O Framework (in Rust) for embedded systems</title><link>http://pramode.in/2018/01/31/ti-launchpad-with-rust-new-io/</link><description>Notes on Code, by Pramode C.E</description><guid isPermaLink="false">d4191312-2442-4eb8-b313-67ba224829b6</guid><pubDate>Wed, 31 Jan 2018 00:00:00 -0500</pubDate><dc:creator>Pramode C.E</dc:creator></item><item><title>Thoughts on Rust</title><link>https://barel.la/blog/2018/01/thoughts-on-rust/</link><description>I’ve been working on some rust projects recently and I really really love this language. I’d love it if one day I could get paid just to write rust! Until then, I’ll make do with …</description><guid isPermaLink="false">fb492342-c776-4f9a-8792-d82efebf109f</guid><pubDate>Thu,  1 Feb 2018 04:39:06 +0000</pubDate><dc:creator>Dan Barella</dc:creator></item><item><title>Rust should be an excellent open source citizen #rust2018</title><link>http://kamalmarhubi.com/blog/2018/01/31/rust2018/</link><description>Here’s my late #rust2018 post. I contribute code to a lot of projects in a lot of different languages. I think it’s really important not to think about Rust in isolation, but in the context of the greater open source world. Here area few specific ways I think about this:</description><guid isPermaLink="false">99cd44d4-1722-4d1e-a002-693fac055af1</guid><pubDate>Wed, 31 Jan 2018 00:00:00 -0500</pubDate><dc:creator>Kamal Marhubi</dc:creator></item><item><title>Rust 2018: Libraries in the 2018 Epoch</title><link>https://blog.zayenz.se/post/rust-2018/</link><description>The call for community blog posts has inspired lots of great responses. Most of the things that I feel are important have already been said. This post is a collection of thoughts on what I feel is important for Rust to flourish in the future. It is perhaps a bit late in the process, but it may add some new perspectives.</description><guid isPermaLink="false">cdf001ee-aea6-47e3-be58-527a3b7fdc08</guid><pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate><dc:creator>Zayenz</dc:creator></item><item><title>Rust is for Big Data (#rust2018)</title><link>https://andygrove.io/rust-is-for-big-data/</link><description>This blog post isn’t so much about what I want from the Rust language in 2018, but more about where I see an opportunity for Rust to gain more widespread use in 2018.</description><guid isPermaLink="false">c752755c-985e-44d4-a15f-1dac8fffa86c</guid><pubDate>Mon, 29 Jan 2018 06:07:21 +1100</pubDate><dc:creator>Andy Grove</dc:creator></item><item><title>Rust2018 - A year of talks</title><link>https://booyaa.wtf/2018/rust2018-a-year-of-talks/</link><description>Before I address my hopes for Rust in 2018, I thought I&apos;d look back at a year of meet ups that we&apos;ve organised for London&apos;s Rust user group.</description><guid isPermaLink="false">b02d9dda-9c01-481b-8111-0241bf8e99d4</guid><pubDate>Sun, 28 Jan 2018 19:49:54 +0000</pubDate><dc:creator>@booyaa</dc:creator></item><item><title>On Safety, and How Rust Can Help</title><link>https://myrrlyn.net/blog/misc/rust-2018</link><description>I’ll first talk about my opinions about safety as an abstract concept and my experiences with practicing safety in various environments; I’ll then talk about my experiences programming at work in C and Ruby; then I’ll draw upon these to talk about what Rust can currently offer my work and what I believe it still needs in order for it to strengthen its utility and efficacy in our contexts.</description><guid isPermaLink="false">e200a902-0b10-41fa-99ce-241d38311eea</guid><pubDate>Sun, 28 Jan 2018 07:25:16 +0000</pubDate><dc:creator>Alexander Payne</dc:creator></item><item><title>#Rust2018: no need to panic. • r/rust</title><link>https://www.reddit.com/r/rust/comments/7tcyh1/rust2018_no_need_to_panic/</link><description>Since you asked for blog posts, and I already read many of them that didn&apos;t share my concerns, here is my take. # What I did in 2017 (and also a...</description><guid isPermaLink="false">9de23e26-5e53-4569-afb2-0576494c75f5</guid><pubDate>Sat, 27 Jan 2018 14:24:20 +0000</pubDate><dc:creator>SelfDistinction</dc:creator></item><item><title>Thoughts about #Rust2018</title><link>https://lliwynd.blogspot.com.au/2018/01/thoughts-about-rust2018.html</link><description>I like the concepts behind rust. I haven&apos;t had as much chance to use it as I&apos;d like - it isn&apos;t one of the approved languages at work, and ...</description><guid isPermaLink="false">9a9ed680-6525-4c70-ae8a-c4c8f6941cf1</guid><pubDate>Sat, 27 Jan 2018 14:35:00 +1100</pubDate><dc:creator>William Uther</dc:creator></item><item><title>Rust 2018: Improving Safety and Ergonomics for Low-Level Programming - Bobbin Blog</title><link>http://www.bobbin.io/blog/post/rust_2018_low_level/</link><description>There’s been a lot written about what can be done to make Rust’s tooling, libraries and infrastructure better for embedded programming, but I’d like to cover a slightly different topic: what can be done to make Rust the language itself safer and easier to use for low-level programming?</description><guid isPermaLink="false">d2189bca-0b13-451d-b70c-70ec43f7a207</guid><pubDate>Fri, 26 Jan 2018 14:00:00 -0400</pubDate><dc:creator>Jonathan Soo</dc:creator></item><item><title>Crate Management for #rust2018</title><link>https://epage.github.io/blog/2018/01/crate-management/</link><description>When I started with Rust, I was planning on blogging about my experience. As I learned though, I found most of the documentation I needed was in blog posts that, though helpful, would give different suggestions without a hint as to why they solved the problems differently. This is frustrating for someone new because you just want to get your task done and not have to first research a whole other area. I realized that the more valuable route for me would be in improving documentation and tooling to serve as living documentation.</description><guid isPermaLink="false">a9de17fb-57cf-442a-988c-8ab1ec79b3db</guid><pubDate>Fri, 26 Jan 2018 04:20:00 +0000</pubDate><dc:creator>Ed Page</dc:creator></item><item><title>Rust 2018: Core, Embedded+SIMD, Intermesiate documenation, Async • r/rust</title><link>https://www.reddit.com/r/rust/comments/7syxw4/rust_2018_core_embeddedsimd_intermesiate/</link><description>Hi there! I&apos;m Nico, and I&apos;ve been lurking around these parts for about a year now. I thought I&apos;d give my 2 cents on Rust&apos;s 2018 plans. Note: this...</description><guid isPermaLink="false">ae85973e-7540-4027-b53a-ee41a249d124</guid><pubDate>Thu, 25 Jan 2018 20:12:01 +0000</pubDate><dc:creator>Nico</dc:creator></item><item><title>My #Rust2018 wishlist • r/rust</title><link>https://www.reddit.com/r/rust/comments/7sx6s9/my_rust2018_wishlist/</link><description>This addition to std could significantly change how people use rust. &quot;Secretly&quot; it requires some advanced features though. impl&lt;T, const C:...</description><guid isPermaLink="false">35094e1a-b385-47a6-a93f-67f8842992d6</guid><pubDate>Thu, 25 Jan 2018 16:22:17 +0000</pubDate><dc:creator>Epicat Supercell</dc:creator></item><item><title>The Job Advertising Story of Rust – Vignesh Sankaran – Medium</title><link>https://medium.com/@vign_esh/the-job-advertising-story-of-rust-5c6394e8ecab</link><description>Note: This is the first blog post that I’ve ever written. Feedback is much appreciated :).</description><guid isPermaLink="false">1151cad4-ce36-4944-96d3-e6062f1daf97</guid><pubDate>Mon, 22 Jan 2018 10:44:36 +0000</pubDate><dc:creator>Vignesh Sankaran</dc:creator></item><item><title>Embedded Rust in 2018 - Embedded in Rust</title><link>http://blog.japaric.io/embedded-rust-in-2018/</link><description>A blog about Rust and embedded stuff</description><guid isPermaLink="false">a59a299c-28d1-4c41-9563-47faea69a0b7</guid><pubDate>Sun, 21 Jan 2018 22:10:38 +0100</pubDate><dc:creator>Jorge Aparicio</dc:creator></item><item><title>Rust and its stance in data science – Eduardo Pinho – Medium</title><link>https://medium.com/@e_net4/rust-and-its-stance-in-data-science-76d2c5ad2363</link><description>This isn’t something that I would do very often, but a call was made, and I would like to take that chance to fill in some ideas with…</description><guid isPermaLink="false">e2276407-cab7-48f6-8a4e-b981fbed0417</guid><pubDate>Sat, 20 Jan 2018 16:55:44 +0000</pubDate><dc:creator>Eduardo Pinho</dc:creator></item><item><title>Making Rust more awesome in 2018 - My wishlist· creativcoder&apos;s blog</title><link>https://creativcoder.github.io/post/rust-2018/</link><description>Rustaceans may already be familiar with Read Rust 2018. Its really awesome to see all blog posts by other people. I’m yet to finish reading all of them :P
Adding to the chain of wishlist and suggestions for Rust’s roadmap for 2018, here’s my Wishlist:</description><guid isPermaLink="false">268f9a5c-3a44-4ca8-b500-68fd045a2d47</guid><pubDate>Sat, 20 Jan 2018 18:22:00 +0000</pubDate><dc:creator>Rahul Sharma</dc:creator></item><item><title>Rust 2018</title><link>http://techne.btbytes.com/2018/01/20/rust2018.html</link><description>What has gotten really, really good in rust-land as I remember this year:</description><guid isPermaLink="false">0c26d758-55c5-4591-9c4f-5f0d2a6cc347</guid><pubDate>Sat, 20 Jan 2018 19:57:35 -0500</pubDate><dc:creator>Pradeep Gowda</dc:creator></item><item><title>Rust 2018 - Growing in elegance and responsibility</title><link>https://gist.github.com/diwic/6aa9da5d088c09e2fc93858928878b48</link><description>First; I have the utmost respect for the fact that I&apos;m mostly sitting here wishing, while other people do the actual work. But since you asked...</description><guid isPermaLink="false">ce30f9ab-eef4-47c0-84e9-ffb704317314</guid><pubDate>Thu, 11 Jan 2018 07:41:14 +0000</pubDate><dc:creator>Diwic</dc:creator></item><item><title>Rust in 2018, another point of view</title><link>https://kelseasy.github.io/001-Rust2018.html</link><description>I wanted to write a post laying down my thoughts about Rust for a long time, and it seems like the perfect time to do so. Most of the things I&apos;ve said have been touched upon recently, and probably more aptly, but here it is nonetheless!</description><guid isPermaLink="false">3f3b1ba5-ee90-4ece-b303-2c083010602e</guid><pubDate>Fri, 19 Jan 2018 22:57:00 +0000</pubDate><dc:creator>Kelsey Zapata</dc:creator></item><item><title>Rust2018 And The Great Cli Awakening</title><link>http://vitiral.github.io/2018/01/17/rust2018-and-the-great-cli-awakening.html</link><description>This is a response to the #Rust2018 call for blog posts with a little bit of my experience and how I see the 2018 year mo...</description><guid isPermaLink="false">329c3ef3-1602-477e-9a38-e5becaf2aab1</guid><pubDate>Wed, 17 Jan 2018 00:00:00 +0000</pubDate><dc:creator>Garrett Berg</dc:creator></item><item><title>How can I help Stabilize Things?</title><link>https://willmurphyscode.net/2018/01/18/how-can-i-help-stabilize-things/</link><description>A friend and I are working on adding Rust support to Metaparticle. We did a simple search for “decorators in Rust” and found this repo, which seemed promising. My friend added it, but s…</description><guid isPermaLink="false">a1e767fe-7557-4092-8f54-2071617c89b3</guid><pubDate>Thu, 18 Jan 2018 12:23:55 +0000</pubDate><dc:creator>willmurphyscode</dc:creator></item><item><title>Technical Debt</title><link>https://gist.github.com/mark-i-m/5bccf4dd7d97751eba542fea84b41a9d</link><description>I have to 100% agree with @nrc&apos;s post. I feel like Rust has a lot of great things in the pipeline, but it worries me that there are so many open tracking issues and open issues in general (over 3100 at time of writing).

A lot has been written already about this, so instead I will focus on a few areas of technical debt that I see as particularly high-impact.</description><guid isPermaLink="false">41624f5a-61da-4a5b-a347-5918dccfe3a9</guid><pubDate>Thu, 18 Jan 2018 00:58:22 +0000</pubDate><dc:creator>mark-i-m</dc:creator></item><item><title>matraszek.net - Rust 2018</title><link>http://matraszek.net/posts/rust-2018.html</link><description>I am pretty amazed that the Rust team always tries to get information about Rust usage from its users. Having a great vision is important, but it may not be enough to succeed. It is crucial to convince people to use Rust, and to know how to do that, we must take the perspective of the people who DO NOT use Rust.</description><guid isPermaLink="false">56bc0e93-0a95-40ce-b60e-7f50c6e41560</guid><pubDate>Tue, 16 Jan 2018 23:31:00 +0100</pubDate><dc:creator>Jakub Matraszek</dc:creator></item><item><title>Retooling the Rust Libs Team team for 2018 · Aaron Turon</title><link>http://aturon.github.io/blog/2018/01/16/libs-mission/</link><description>The Libs Team met today to discuss a weighty topic: what is its mission as a team, and are we set up to achieve it?

As team lead, I took the liberty of proposing a mission statement:

To improve the quality of the crate ecosystem, as a product.</description><guid isPermaLink="false">db216954-cdc9-4253-a155-6e9c7a25cd39</guid><pubDate>Tue, 16 Jan 2018 00:00:00 -0800</pubDate><dc:creator>Aaron Turon</dc:creator></item><item><title>Rust 2018 - Just 2 &quot;little things&quot; • r/rust</title><link>https://www.reddit.com/r/rust/comments/7qv1gu/rust_2018_just_2_little_things/</link><description>Well. Just two &quot;minor&quot; points: 1. Game Development Libraries 2. Rust idomatic GUI Frameworks</description><guid isPermaLink="false">b82f509d-28c8-4859-afe4-a9d4e47538d0</guid><pubDate>Tue, 16 Jan 2018 19:58:55 +0000</pubDate><dc:creator>CodingChris</dc:creator></item><item><title>Fortanix Blog | Secure by design:  Rust and Runtime Encryption</title><link>https://www.fortanix.com/blog/2018/01/secure-by-design-rust-and-runtime-encryption/</link><description>At Fortanix, we are big proponents of deterministic security.  Designing in security from the get-go by using secure programming principles is a big part of that.</description><guid isPermaLink="false">9b240369-ee8e-4d0d-8914-92bbb0145411</guid><pubDate>Tue, 16 Jan 2018 00:00:00 +0000</pubDate><dc:creator>Jethro Beekman</dc:creator></item><item><title>Using static typing to protect against code injection attacks</title><link>https://medium.com/sensorfu/using-static-typing-to-protect-against-code-injection-attacks-353002ca6f2b</link><description>Code injection attack is a method of taking advantage of a flaw where an application can be tricked to relay malicious code from a system…</description><guid isPermaLink="false">35c2903a-687a-448d-b594-c46ee423989d</guid><pubDate>Tue, 16 Jan 2018 12:33:25 +0000</pubDate><dc:creator>Ossi Herrala</dc:creator></item><item><title>Rust 2018 - Sergey Potapov</title><link>http://greyblake.com/blog/2018/01/16/rust-2018/</link><description>With this post, I would like to give my feedback to the rust community in the
scope of A Call for Community Blogposts. This article is structured in …</description><guid isPermaLink="false">11b9b0c3-6cde-450a-91b8-41e4bfc0a514</guid><pubDate>Tue, 16 Jan 2018 00:08:00 +0100</pubDate><dc:creator>Sergey Potapov</dc:creator></item><item><title>#Rust2018 - Exploring New Contribution and Feedback Models</title><link>http://yehudakatz.com/2018/01/15/rust-2018/</link><description>Since I&apos;m coming pretty late to the #Rust2018 party, most of the things I wanted to say have already been said! Ashley&apos;s kick-off post was kind of a meta-#Rust2018 for me, calling for us to experiment with new ways to get community feedback in Rust. I personally really enjoyed</description><guid isPermaLink="false">5fdd7918-2122-4ff3-875c-0facf2bcd1f1</guid><pubDate>Mon, 15 Jan 2018 20:40:51 +0000</pubDate><dc:creator>Yehuda Katz</dc:creator></item><item><title>Rust in 2018: Let’s fix where the bullet holes aren’t</title><link>https://medium.com/@cevans3326/rust-in-2018-lets-fix-where-the-bullet-holes-aren-t-7e94cea0bd53</link><description>Although I’m a rust beginner, I’ve thoroughly enjoyed reading all the Rust 2018 blogposts lately. And as a systems engineer who leans…</description><guid isPermaLink="false">40d80139-ee61-4eb1-9a66-eb3fba32430f</guid><pubDate>Tue, 16 Jan 2018 05:49:36 +0000</pubDate><dc:creator>Chris Evans</dc:creator></item><item><title>A Year with Rust Game Dev</title><link>http://druerridge.com/?p=536</link><description>Never Slow Down.</description><guid isPermaLink="false">3936cf7f-ef74-4203-9302-bcce349e9ca5</guid><pubDate>Sun, 14 Jan 2018 00:00:00 +0000</pubDate><dc:creator>Dru Erridge</dc:creator></item><item><title>Rust MMXVIII, but, like, from a casual perspective – Yoshua Wuyts – Medium</title><link>https://medium.com/@yoshuawuyts/rust-mmxviii-but-like-from-my-perspective-6363f485ab2b</link><description>*ring ring*</description><guid isPermaLink="false">c7becfa2-4e61-490a-838c-7b207956e21f</guid><pubDate>Sun, 14 Jan 2018 14:46:43 +0000</pubDate><dc:creator>Yoshua Wuyts</dc:creator></item><item><title>My Rust hopes for 2018 • r/rust</title><link>https://www.reddit.com/r/rust/comments/7qd725/my_rust_hopes_for_2018/</link><description>There are plenty of exciting language features which should land in 2018, I&apos;d love to see further reductions in compile times, and there are a lot...</description><guid isPermaLink="false">e7a79828-6bc7-4b09-ac5a-4be76f4a18d4</guid><pubDate>Sun, 14 Jan 2018 17:32:16 +0000</pubDate><dc:creator>theotherphil</dc:creator></item><item><title>Rust in 2018 – Dirkjan Ochtman</title><link>https://dirkjan.ochtman.nl/writing/2018/01/14/rust-in-2018.html</link><description>In a call for blog posts, the Rust community team asked community members to write up their vision for what the Rust community should focus on this year. I&apos;ve wanted to contribute my thoughts and have been thinking about what to write ever since. I&apos;ve been able to benefit from the many people who already posted their thoughts to sharpen my own thinking. I came up with 5 categories:</description><guid isPermaLink="false">87cb487b-6922-4675-b3d9-9a6767bb5a1c</guid><pubDate>Sun, 14 Jan 2018 00:00:00 +0100</pubDate><dc:creator>Dirkjan Ochtman</dc:creator></item><item><title>Rust2018 – Doug Tangren – Medium</title><link>https://medium.com/@softprops/rust2018-75393b4a086f</link><description>Rust, in no small way, has captured quite a bit of my imagination in the last 4 and a half years. The language and community has a lot of…</description><guid isPermaLink="false">4bf00d31-d65c-43fc-b95a-5caa3df0ac4b</guid><pubDate>Sun, 14 Jan 2018 22:07:16 +0000</pubDate><dc:creator>Doug Tangren</dc:creator></item><item><title>Embedded Rust in 2018</title><link>http://railwayelectronics.blogspot.com.au/2018/01/i-recently-picked-up-embedded-project.html</link><description>I recently picked up an embedded project that I hadn&apos;t touched for a few months, so I could add some new features. I was disappointed to not...</description><guid isPermaLink="false">f3f500d5-d108-4f83-808e-e15ad520cce7</guid><pubDate>Sun, 14 Jan 2018 00:00:00 +0000</pubDate><dc:creator>theJPster</dc:creator></item><item><title>#Rust2018: A Neon Wish List</title><link>http://calculist.org/blog/2018/01/13/rust-2018-a-neon-wish-list/</link><description>While I’ve been thoroughly enjoying the Rust community’s spirited #Rust2018 blog-fest, I wasn’t really thinking of participating myself until Julia Evans pointed out the leadership wants to hear from everyone—even if I might not have anything especially new to add. So here’s my little wish list for Rust in 2018. Since I’m not in Rust’s leadership, I don’t have to worry about synthesizing some grand narrative for the whole of Rust. So I’ll just focus on a few things that would be personally useful to me. In particular, I’ll stick to topics that would be helpful for my Neon project, a set of bindings for writing native Node extension modules in Rust.</description><guid isPermaLink="false">4d4b233f-fba3-4e3e-9e80-fe79603a38b0</guid><pubDate>Sat, 13 Jan 2018 17:45:00 -0800</pubDate><dc:creator>David Herman</dc:creator></item><item><title>Most desired from Rust in 2018</title><link>https://blog.mist.global/articles/Most_desired_from_Rust_in_2018.html</link><description>Recently there was a call for community blog posts themed about ideas and expectation for Rust in the coming year. I definitely can&apos;t count myself as part of community yet as my experience with Rust so far has been purely about experimenting and research but it feels like a great opportunity to share my thoughts so far.</description><guid isPermaLink="false">6b8e7f04-ece2-4dd1-9256-4ce6881d3c11</guid><pubDate>Sun, 14 Jan 2018 12:17:42 +0000</pubDate><dc:creator>Mihails Strasuns</dc:creator></item><item><title>2018: The year we learn Rust 1.0</title><link>http://yakshav.es/rust-2018/</link><description>This is my reply to Rusts call for community blog posts.

I’m known for being quite happy with Rust as is. Indeed, my first post on focusing on stable Rust was more than 2 years ago ;).

Also, note that I’ve been interested (and practically involved) in the growing and adoption of programming languages since around 2004, which was when I started doing users support for Ruby in Germany.</description><guid isPermaLink="false">2a2b7699-5a1a-4379-8a33-3faf4badd512</guid><pubDate>Fri, 12 Jan 2018 11:33:54 +0000</pubDate><dc:creator>Florian Gilcher</dc:creator></item><item><title>Rust - My wish list for 2018  · Murali&apos;s Blog </title><link>http://www.mmrath.com/post/rust-my-wish-list-for-2018/</link><description>I am excited about Rust after spending a little time with it last year. Here are my thoughts on how it can improve in 2018.</description><guid isPermaLink="false">59a502dd-84c7-4ad1-9a78-7d042495a25b</guid><pubDate>Sat,  6 Jan 2018 00:00:00 +0000</pubDate><dc:creator>Murali Mohan Rath</dc:creator></item><item><title>Rust 2018 - machine learning perspective • r/rust</title><link>https://www.reddit.com/r/rust/comments/7p6rpw/rust_2018_machine_learning_perspective/</link><description>Since we have this January blogging stream, I would like to talk about using Rust for machine learning. First, I would like to point out, that I...</description><guid isPermaLink="false">79f7ee1c-a798-4241-bc2a-902f8a16c548</guid><pubDate>Tue,  9 Jan 2018 12:26:35 +0000</pubDate><dc:creator>osamc</dc:creator></item><item><title>Happy New Year 2018</title><link>https://www.janwalter.org/jekyll/review/2017/2018/01/01/happy-new-year-2018.html</link><description>For me it&apos;s also a chance to do a review of the year 2017. Most of it I spend on a Rust implementation of PBRT (beside working for The Mill and making sure we can deliver our moving images, rendered most of the time with Arnold).</description><guid isPermaLink="false">072421d7-7def-43b7-b3f8-441d735cba8c</guid><pubDate>Mon,  1 Jan 2018 00:00:00 +0000</pubDate><dc:creator>Jan Walter</dc:creator></item><item><title>Rust 2018</title><link>https://vorner.github.io/rust-2018.html</link><description>There’s a call for the community to write what they’d like to see in Rust in the following year. So, here it goes. And yes, this is a bit personal, what I would like to see in Rust ‒ I fully respect that others have different needs and that not my every wish need to be granted, because someone else will have a better idea for sure.</description><guid isPermaLink="false">92c745cd-26fa-41e0-8b1b-a9827873af6e</guid><pubDate>Mon,  8 Jan 2018 21:40:00 +0000</pubDate><dc:creator>Michal &apos;vorner&apos; Vaner</dc:creator></item><item><title>Rust 2018: maybe don’t be too stable</title><link>https://unhandledexpression.com/2018/01/10/rust-2018-maybe-dont-be-too-stable/</link><description>I initially did not want to write a post with what I want and foresee for Rust in 2018, because I’m already very happy with it! I have spent more than 4 years tinkering with the language, exp…</description><guid isPermaLink="false">afadc638-f50b-42a3-a058-a475109ce9a7</guid><pubDate>Wed, 10 Jan 2018 18:25:14 +0000</pubDate><dc:creator>Geoffroy Couprie</dc:creator></item><item><title>Snips big wish for #Rust2018: libraries or portability, pick two</title><link>https://medium.com/snips-ai/snips-big-wish-for-rust2018-libraries-or-portability-pick-two-814d104586d9</link><description>Snips engineering team works on shipping vocal assistants to mobile platforms (iOS and android) and a growing diversity of single board…</description><guid isPermaLink="false">4a40cb13-61ed-461e-9117-57e3a530ab61</guid><pubDate>Tue,  9 Jan 2018 17:38:31 +0000</pubDate><dc:creator>Mathieu Poumeyrol</dc:creator></item><item><title>Rust incremental-difficulty tutorial series – Theodore Keloglou – Medium</title><link>https://medium.com/@sirodoht/rust-incremental-difficulty-tutorial-series-8c09ecdd38e7</link><description>A response to Rust’s Call for Community Blogposts #Rust2018</description><guid isPermaLink="false">9bd09566-0ba0-47a2-9400-a01a0e218e51</guid><pubDate>Wed,  3 Jan 2018 23:16:35 +0000</pubDate><dc:creator>Theodore Keloglou</dc:creator></item><item><title>Rust and crate of wishes for 2018 – Nabeel Ali Memon – Medium</title><link>https://medium.com/@nimtiazm/rust-and-crate-of-wishes-for-2018-1258f6977d42</link><description>I appreciate the great community effort being fostered by Mozilla’s Rust team and the cool Rust community outside that have been helpful in…</description><guid isPermaLink="false">6aea5335-d3b5-4c36-be35-8461d9206149</guid><pubDate>Sat, 13 Jan 2018 09:14:15 +0000</pubDate><dc:creator>Nabeel Ali Memon</dc:creator></item><item><title>Rust in 2018 – Black Djikstra – Medium</title><link>https://medium.com/@blackdjikstra/rust-in-2018-d6c0be87cba8</link><description>As a beginner in rust, it has been the gateway to so many interesting concepts.</description><guid isPermaLink="false">28b10d91-030e-4828-b02e-4d173b8cfab9</guid><pubDate>Fri, 12 Jan 2018 23:05:58 +0000</pubDate><dc:creator>Black Djikstra</dc:creator></item><item><title>What Rust Needs in 2018 to Succeed — Llogiq on stuff</title><link>https://llogiq.github.io/2018/01/09/rust.html</link><description>In the spirit of the current Rust blog post extravaganza, here are my 2¢ on the most important work to make Rust win big</description><guid isPermaLink="false">914dd414-184a-4d72-adfe-cea12e7a9fe4</guid><pubDate>Tue,  9 Jan 2018 00:00:00 +0000</pubDate><dc:creator>llogiq</dc:creator></item><item><title>Looking in on Rust in 2018</title><link>https://kasma1990.gitlab.io/2018/01/07/looking-in-on-rust-in-2018/</link><description>With the call for #Rust2018 blog posts on how this year’s roadmap should look, I figured I’d chime in with a few items. Now, I’m not using Rust in any shape or form in my day-to-day life (though I’d like to!), but I follow along with the community because so many exciting things happen, and I find Rust itself to be a breath of fresh air. In other words, my view is shaped mostly by my role as observer (rather than active participant), and the primary need I want to address is to make it easier to convince coworkers and higher-ups to give Rust a shot.</description><guid isPermaLink="false">0304d95e-71f7-47c8-b415-5d6d2ffb5e85</guid><pubDate>Sun,  7 Jan 2018 00:00:00 +0000</pubDate><dc:creator>Kasper Andersen</dc:creator></item><item><title>My desired features for a Rust debugger</title><link>https://carlomilanesi.wordpress.com/2018/01/04/my-desired-features-for-a-rust-debugger/</link><description>Backward stepping Most debuggers provide the following commands: Step into the next function (reaching its beginning-point) Hop over the next function call Jump to the end of the current function R…</description><guid isPermaLink="false">f281d4cb-864b-4afa-98be-67a773a5bbf5</guid><pubDate>Thu,  4 Jan 2018 02:36:54 +0000</pubDate><dc:creator>Carlo Milanesi</dc:creator></item><item><title>Rust in 2018: feature polish and notes on abstraction</title><link>https://byte.observer/posts/2018/01/12/rust-2018</link><description>Despite the overwhelming success of the impl period, many of the features tackled are massive undertakings which could not possibly have been polished in suc...</description><guid isPermaLink="false">547cd24b-800d-406a-8608-62197c4a23f2</guid><pubDate>Fri, 12 Jan 2018 04:11:49 +0000</pubDate><dc:creator>Noah Weninger</dc:creator></item><item><title>2017 in Rust</title><link>https://beyermatthias.de/blog/2018/01/05/2017-in-rust/</link><description>Inspired by the Call for Community Blogposts I want to summarize my experiences and thoughts on Rust in 2017 and what I am excited about for 2018.
Reflecting 2017 2017 was an amazing year for Rust. We got 8 releases of rust itself! We got basic procedural macros allowing custom derive (also known as “macros 1.1”) in the first release last year (1.15.0). This made serde 1.0 possible, if I’m not mistaken?</description><guid isPermaLink="false">92a3a3bb-1858-49c7-9a91-7750060fdedf</guid><pubDate>Fri,  5 Jan 2018 19:00:00 +0000</pubDate><dc:creator>Matthias Beyer</dc:creator></item><item><title>What I’d Like To See In Rust</title><link>https://austinstig.github.io/rs2018/post</link><description>blog post on thoughts for rust 2018</description><guid isPermaLink="false">fa1c0f13-5a61-40d8-8ac5-0c702578abd8</guid><pubDate>Thu,  4 Jan 2018 15:59:54 +0000</pubDate><dc:creator>austinstig</dc:creator></item><item><title>Rusting as a student - </title><link>http://samuelresendez.me/scribbles/sophomore_rust.html</link><description>At the request of the Rust team, the community was tasked with writing blog posts talking about the future and history of rust as it would pertain to improving the language in 2018. I thought I&apos;d take the opportunity to finally begin writing, since it seems like blogging is all the rage nowadays.</description><guid isPermaLink="false">75ae624e-fe9b-4705-9bc2-99066deeb214</guid><pubDate>Sat, 13 Jan 2018 04:04:26 +0000</pubDate><dc:creator>samuelresendez</dc:creator></item><item><title>Fast Rust in 2018</title><link>https://adamniederer.com/blog/rust-2018.html</link><description>Rust is already a fast language, but there are still many opportunities to make it the fast language. While many people will rightfully focus on usability, tooling, and community goals for 2018, I will focus on some exciting changes which will make Rust the star of HPC.</description><guid isPermaLink="false">e769013d-619e-4180-8ca7-3960e1440ea1</guid><pubDate>Fri, 12 Jan 2018 07:07:37 +0000</pubDate><dc:creator>Adam Niederer</dc:creator></item><item><title>Rust in 2018: it&apos;s way easier to use! - Julia Evans</title><link>https://jvns.ca/blog/2018/01/13/rust-in-2018--way-easier-to-use/</link><description>Rust in 2018: it&apos;s way easier to use!</description><guid isPermaLink="false">cb089afe-f076-4527-bb9a-342be41414e1</guid><pubDate>Sun, 14 Jan 2018 06:05:00 +0000</pubDate><dc:creator>Julia Evans</dc:creator></item><item><title>rust2018.md</title><link>https://gist.github.com/est31/c063704716b6880fd74ce2ba11b11298</link><description>First a few words about me. I was and still am a student, and most of my coding is for learning and because it is fun. Also, coding is a great excuse for procrastinating something more important :). Having contributed to open source codebases has helped me determine that I want to do this in a day job once I&apos;m done with my studies.</description><guid isPermaLink="false">8a17aa75-d002-4e09-bfdf-d5d38241950c</guid><pubDate>Mon,  8 Jan 2018 02:42:14 +0000</pubDate><dc:creator>est31</dc:creator></item><item><title>Goals and Directions for Rust in 2018 - WezM.net by Wesley Moore</title><link>http://www.wezm.net/technical/2018/01/goals-directions-rust-2018/</link><description>Reflecting on Rust in 2017 and what might be worth focussing on in 2018.</description><guid isPermaLink="false">1cc61fb9-22bb-476d-b133-c1c38d2e9f64</guid><pubDate>Sun,  7 Jan 2018 13:07:00 +1100</pubDate><dc:creator>Wesley Moore</dc:creator></item><item><title>#Rust2018 goals for 2018 • r/rust</title><link>https://www.reddit.com/r/rust/comments/7oyj9j/rust2018_goals_for_2018/</link><description>My 2 cents: Totally agree with people who say we need an &quot;impl year&quot;, but also I would love to see wasm become a first class platform. I think...</description><guid isPermaLink="false">438424a8-c55f-49c7-9860-683e805bc36e</guid><pubDate>Mon,  8 Jan 2018 13:35:48 +0000</pubDate><dc:creator>richhyd</dc:creator></item><item><title>Rust2018: back to the roots • r/rust</title><link>https://www.reddit.com/r/rust/comments/7p6n90/rust2018_back_to_the_roots/</link><description>I can think of many goals for Rust in 2018, but for me at least 2017 went through pretty quickly, so I asked myself the question: If I could...</description><guid isPermaLink="false">91e2a724-3253-43ec-8b62-bd6285d7895c</guid><pubDate>Tue,  9 Jan 2018 11:59:53 +0000</pubDate><dc:creator>0b_0101_001_1010</dc:creator></item><item><title>A traveller&apos;s journey into Rust 2017, 2018</title><link>https://blog.x5ff.xyz/blog/a-journey-into-rust-2018/</link><description>A Year Of Rust</description><guid isPermaLink="false">9415f407-45c8-430e-b4e2-a6947848acaf</guid><pubDate>Mon,  8 Jan 2018 00:00:00 +0000</pubDate><dc:creator>Claus</dc:creator></item><item><title>Rust2018 Wishpost: Better Debug derive • r/rust</title><link>https://www.reddit.com/r/rust/comments/7p4imw/rust2018_wishpost_better_debug_derive/</link><description>It was asked that everyone talk about what they want to see happen with Rust in 2018, and I&apos;m sure a lot of folks will be saying a lot of things....</description><guid isPermaLink="false">c6752215-9ccb-4c67-b512-bd2cfdcaae86</guid><pubDate>Tue,  9 Jan 2018 04:05:10 +0000</pubDate><dc:creator>Lokathor</dc:creator></item><item><title>Rust in 2018 - In Pursuit of Laziness</title><link>https://manishearth.github.io/blog/2018/01/10/rust-in-2018/</link><description>A week ago we put out a call for blog posts for what folks think Rust should do in 2018. This is mine. Overall focus I think 2017 was a great year …</description><guid isPermaLink="false">f114d011-5554-4169-8cca-d01512308bab</guid><pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate><dc:creator>Manish Goregaokar</dc:creator></item><item><title>#Rust2018 FtW (For the Web) • r/rust</title><link>https://www.reddit.com/r/rust/comments/7q53d6/rust2018_ftw_for_the_web/</link><description>*below post is going to update quite often accordingly* This idea is actually something i got from someone else - &quot;now that Rust is getting...</description><guid isPermaLink="false">9f51e626-4330-4ddd-984a-34e3b582b171</guid><pubDate>Sat, 13 Jan 2018 15:36:28 +0000</pubDate><dc:creator>tuxmanexe</dc:creator></item><item><title>A libz blitz retrospective</title><link>https://gist.github.com/KodrAus/953e8182e81d8d9147cd32822748665f#a-libz-blitz-retrospective</link><description>This post is my personal retrospective of the libz blitz and my part in it. It&apos;s also a loose response to the #Rust2018 call for blog posts and a chance to show off my amazingly poor drawing skills. For the part most relevant to #Rust2018, see the last section.</description><guid isPermaLink="false">ae0144fa-a8c5-416f-8c2c-02ae2ad11c79</guid><pubDate>Sat, 13 Jan 2018 23:50:22 +0000</pubDate><dc:creator>Ashley Mannix</dc:creator></item><item><title>Rust in 2018: Streamline Collaboration and Empower Intermediate Users</title><link>https://matthias-endler.de/2018/rust-2018/</link><description>I wrote about the ...</description><guid isPermaLink="false">b1a7569d-c5e6-41d9-99ea-18c4b7e9105e</guid><pubDate>Tue,  9 Jan 2018 00:00:00 +0000</pubDate><dc:creator>Matthias Endler</dc:creator></item><item><title>Pollen Robotics call for #Rust2018: toward stability on embedded systems</title><link>https://medium.com/pollenrobotics/rust-for-robotics-and-embedded-systems-in-2018-96e9be8464</link><description>Robotics developers face two main problems:</description><guid isPermaLink="false">c506e8b8-69f1-4f39-803a-6e3a34c06145</guid><pubDate>Fri, 12 Jan 2018 13:32:49 +0000</pubDate><dc:creator>Pierre Rouanet</dc:creator></item><item><title>Next for Rust</title><link>http://gilescope.ninja/rust/2018/01/11/Next-for_Rust.html</link><description>Next for Rust in 2018</description><guid isPermaLink="false">067c467f-3922-40d0-a0e6-f35eafeaffc7</guid><pubDate>Thu, 11 Jan 2018 16:33:12 +0000</pubDate><dc:creator>gilescope</dc:creator></item><item><title>Branchless #Rust2018</title><link>https://bluejekyll.github.io/blog/rust/2018/01/10/branchless-rust.html</link><description>About an oportunity for Rust, as part of the #Rust2018 request</description><guid isPermaLink="false">681f1733-be53-4798-9198-6a1562783fd5</guid><pubDate>Wed, 10 Jan 2018 07:00:00 +0000</pubDate><dc:creator>Benjamin Fry</dc:creator></item><item><title>#Rust2018</title><link>https://hsivonen.fi/rust2018/</link><description>I don’t have a wish list of Rust features that don’t already exist. Rather, I mainly wish that in 2018, Rust committed to certain things that already work in nightly Rust and have worked for a couple of years now.</description><guid isPermaLink="false">bea672e3-d5bb-4008-9439-76fe914f46a7</guid><pubDate>Thu, 11 Jan 2018 00:00:00 +0000</pubDate><dc:creator>Henri Sivonen</dc:creator></item><item><title>#rust2018 - cross compiling? • r/rust</title><link>https://www.reddit.com/r/rust/comments/7phh1l/rust2018_cross_compiling/</link><description>I don’t have a blog or anything, I just wanted to mention an aspect of rust that could use some love this year - cross compiling. Right now...</description><guid isPermaLink="false">80e6cc62-73cd-4b55-bcbf-5770348ed843</guid><pubDate>Wed, 10 Jan 2018 18:16:51 +0000</pubDate><dc:creator>lurebat</dc:creator></item><item><title>Rust In 2018</title><link>https://gsquire.github.io/static/post/rust-in-2018/</link><description>Rust in 2018 This short post is a reflection on Rust in 2017 and some ideas I would love to see in 2018 written in the spirit of this blog post. I will keep things brief and try not to repeat what others have already shared. There have been many wonderful ideas that makes me even more enthusiastic about Rust so I hope that I can add to the excitement with a few of my own.</description><guid isPermaLink="false">df1ee60b-5fb1-49a4-a0e8-1f05961ed250</guid><pubDate>Wed, 10 Jan 2018 19:05:55 -0800</pubDate><dc:creator>Garrett Squire</dc:creator></item><item><title>Refutable Let and Rust in 2018</title><link>https://dev.to/cad97/refutable-let-and-rust-in-2018-4l3k</link><description>Examining RFC 1303 Add a `let...else` expression</description><guid isPermaLink="false">8104012c-3de8-4824-b11f-9bbaafff2408</guid><pubDate>Thu, 11 Jan 2018 00:00:00 +0000</pubDate><dc:creator>Christopher Durham</dc:creator></item><item><title>Rust 2018</title><link>https://deterministic.space/rust-2018.html</link><description>Instead of fire flowers,this year the Rust Team made a public call for blogposts, asking the community to write posts thatreflect on Rust in 2017 and what they wish for Rust in 2018. What follows are some of the things I personally see as important,and that I’d love to prioritize on in the following months.</description><guid isPermaLink="false">19c0f10d-e9a9-4f53-9f6f-08a106809a30</guid><pubDate>Wed, 10 Jan 2018 00:00:00 +0100</pubDate><dc:creator>Pascal Hertleif</dc:creator></item><item><title>#Rust2018 — Aimlessly Going Forward</title><link>https://aimlesslygoingforward.com/blog/2018/01/10/rust-2018/</link><description>I use Rust to write simple computer games as a hobby. I&apos;m not a professional or even an experienced game developer. The reason I picked up Rust is because I wanted something that...</description><guid isPermaLink="false">818cfee5-06f3-4d25-b4b9-cafb65a57697</guid><pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate><dc:creator>Tomas Sedovic</dc:creator></item><item><title>Rust in 2018: a people perspective · Aaron Turon</title><link>http://aturon.github.io/blog/2018/01/09/rust-2018/</link><description>The call for #Rust2018 blog posts has generated a fantastic set of responses so far, and there’s already an emerging consensus around much of the technical focus for the year. Since I largely agree with what others have said on that front, I want to focus my post on the people side of things: what kind of impact do we want to make on people, both contributors and customers, in 2018?</description><guid isPermaLink="false">60351f3f-c088-42df-819e-a3ad0c44772a</guid><pubDate>Tue,  9 Jan 2018 00:00:00 -0800</pubDate><dc:creator>Aaron Turon</dc:creator></item><item><title>Talking about how we talk about Rust in 2018</title><link>http://www.jonathanturner.org/2018/01/how-we-talk-about-rust-in-2018.html</link><description>In this post, I want to talk about how we talk about Rust in 2018. I think there are some ways we can change what we’re saying and how we’re saying it. These changes will help Rust be more approachable for beginners and an even nicer place in general.</description><guid isPermaLink="false">b17769a4-33cf-476a-ab72-88760bf8e8ec</guid><pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate><dc:creator>Jonathan Turner</dc:creator></item><item><title>My Goals for Rust in 2018</title><link>https://boats.gitlab.io/blog/post/2018-01-08-goals-for-rust/</link><description>The Rust project has requested blog posts about the project’s goals for 2018. I found myself in pretty much complete agreement with Nick Cameron’s post, so I thought instead I would write about my own personal goals for Rust in 2018. I am fortunate enough to work on Rust full-time; modulated by the work that needs to get done to accomplish larger team goals, these are some things that I’m individually very motivated to make progress on in 2018.</description><guid isPermaLink="false">bd4a7ce1-c702-4965-b9c4-01e0ffca352b</guid><pubDate>Tue,  9 Jan 2018 00:00:00 +0000</pubDate><dc:creator>withoutboats</dc:creator></item><item><title>Looking back at Rust in 2018 • Steve Klabnik</title><link>http://words.steveklabnik.com/looking-back-at-rust-in-2018</link><description>A careful reader will note the date of this post; it’s fundamentally in response to this call for blog posts, with a rhetorical device of looking backwards as if my personal plans for Rust came true. If you’re reading this in 2019 or beyond, this... | Steve Klabnik | &amp;ldquo;The most violent element in society is ignorance.&amp;rdquo; - Emma Goldman</description><guid isPermaLink="false">8595c82d-ae75-4e7c-8e19-e7458849d61b</guid><pubDate>Tue,  9 Jan 2018 00:00:00 +0000</pubDate><dc:creator>Steve Klabnik</dc:creator></item><item><title>#Rust2018</title><link>http://smallcultfollowing.com/babysteps/blog/2018/01/09/rust2018/</link><description>As part of #Rust2018, I thought I would try to writeup my own (current) perspective. I’ll try to keep things brief. First and foremost, I think that this yea...</description><guid isPermaLink="false">fa46df66-4a9e-4500-8d64-270c723b1071</guid><pubDate>Tue,  9 Jan 2018 00:00:00 +0100</pubDate><dc:creator>Niko Matsakis</dc:creator></item><item><title>#Rust2018 : Don’t be the new Haskell – Hacker Noon</title><link>https://hackernoon.com/rust-2018-dont-be-the-new-haskell-a383dbd74481</link><description>TLDR: Big companies adoption determine the success of the language, not the quality of the language. Let’s target big companies / projects…</description><guid isPermaLink="false">8c52a558-78c4-4c5a-b06b-7d254af78db3</guid><pubDate>Tue,  9 Jan 2018 03:02:35 +0000</pubDate><dc:creator>Tibo Delor</dc:creator></item><item><title>Why Rust? A Two Year Retrospective</title><link>http://way-cooler.org/blog/2018/01/09/way-cooler-turns-two.html</link><description>Why Rust? That was a question I asked exactly two years ago when I started Way Cooler (by the way, happy 2nd birthday Way Cooler!).</description><guid isPermaLink="false">de1fbb2e-47e5-4477-8b2c-533a82b479aa</guid><pubDate>Tue,  9 Jan 2018 00:00:00 +0000</pubDate><dc:creator>Preston Carpenter</dc:creator></item><item><title>Adding Superheroes to the Rust Brazilian Community – Mozilla Brasil</title><link>https://mozillabr.org/2018/01/adding-superheroes-to-the-rust-brazilian-community/</link><description>In December, Mozilla Brazil in partnership with the Rust Lang BR community launched a project that brings together Rust programmers and community leaders from regions all over Brazil to advance ...</description><guid isPermaLink="false">342a3884-6f24-4d2e-8a60-11d9ec06f5ee</guid><pubDate>Mon,  8 Jan 2018 18:16:39 -0200</pubDate><dc:creator>Geraldo Barros</dc:creator></item><item><title>Rust 2018: Use Relentless Positivity</title><link>http://always-learning.timmcnamara.co.nz/2018/01/08/rust-2018/</link><description>Rust is a fantastic programming language, but I believe that adoption is held back largely due to a reputation for being difficult to learn. Let&apos;s fix that....</description><guid isPermaLink="false">36658802-1c32-4af9-b41f-f2ce2adca813</guid><pubDate>Mon,  8 Jan 2018 09:29:29 +0000</pubDate><dc:creator>Tim McNamara</dc:creator></item><item><title>New faces for our lovely bots in #Rust2018 [Totoroot]</title><link>https://lukaskalbertodt.github.io/2018/01/07/new-faces-for-bots-rust2018.html</link><description>A blog about programming and stuff. I&apos;m in love with Rust, so most of my programming related posts are about that language.
</description><guid isPermaLink="false">87167446-604f-4bda-b1b1-2f13ea712655</guid><pubDate>Sun,  7 Jan 2018 00:00:00 +0000</pubDate><dc:creator>Lukas Kalbertodt</dc:creator></item><item><title>Rust in 2018</title><link>http://blog.kylehuey.com/post/169445545152/rust-in-2018</link><description>The Rust project is soliciting wishlists for 2018. Rather than list big things that everybody wants like NLL or a more stable tokio, I’m going to list some things that I think are small and could be...</description><guid isPermaLink="false">6b64ad00-dbd7-4974-8e82-503c2faa9798</guid><pubDate>Sun,  7 Jan 2018 00:00:00 +0000</pubDate><dc:creator>Kyle Huey</dc:creator></item><item><title>the new wave of rust | quiet misdreavus miniblog</title><link>https://quietmisdreavus.net/code/2018/01/07/the-new-wave-of-rust/</link><description>I’m generally terrible at big-picture planning, so instead I’d like to talk about what I want to accomplish in the Rust world in 2018. Whether this slots into anyone else’s planning is another matter, but I’ll leave that as an exercise for the reader.</description><guid isPermaLink="false">3b88c9f8-870f-4b97-a9e3-34cf5fc5f118</guid><pubDate>Sun,  7 Jan 2018 00:00:00 +0000</pubDate><dc:creator>QuietMisdreavus</dc:creator></item><item><title>Rust and the web in 2018 – Rasmus.krats.se</title><link>https://rasmus.krats.se/2018/rustweb.en</link><description>My wish for Rust in 2018 is a nice and convenient web service framework that runs on stable rust and gets maintenance and regular updates for many years to come. My intent for 2018 is to continue to maintain and improve ructe (and rsass), and try to integrate it with the best such framework i can find.</description><guid isPermaLink="false">52d67205-01cc-4100-aee3-646795db6b95</guid><pubDate>Sun,  7 Jan 2018 22:50:00 +0000</pubDate><dc:creator>Rasmus Kaj</dc:creator></item><item><title>Rust 2018</title><link>https://www.ncameron.org/blog/rust-2018/</link><description>I want 2018 to be boring. I don&apos;t want it to be slow, I want lots of work to happen, but I want it to be &apos;boring&apos; work. We got lots of big new things in 2017 and it felt...</description><guid isPermaLink="false">9d6a825b-75f7-4e63-8ada-4fa21202f843</guid><pubDate>Sun,  7 Jan 2018 22:39:37 +0000</pubDate><dc:creator>Nick Cameron</dc:creator></item><item><title>Rust 2018 - Suspect Semantics</title><link>http://www.suspectsemantics.com/blog/2018/01/07/rust-2018/</link><description>In this post I share a few small thoughts on what Rust should do in 2018, and more broadly about the current direction of the language. Tooling A …</description><guid isPermaLink="false">80b271ae-2668-4577-9512-f7562e651253</guid><pubDate>Sun,  7 Jan 2018 13:34:15 -0800</pubDate><dc:creator>Andrew Brinker</dc:creator></item><item><title>Rust 2018 · Matthew Mayer&apos;s tech blog</title><link>https://matthewkmayer.github.io/blag/public/post/rust-2018/</link><description>Per the call for blog posts, I’ve got thoughts and ideas on where Rust can go in the upcoming year. My wants haven’t changed much over the last year or so: give me non-embarassing compilation speed! 😁

Before getting started, I’m very appreciative of the hard work put into the overall Rust community and ecosystem, including the behind-the-scenes work. It’s difficult to understate just how much time and energy people volunteer in pursuit of a better, Rust-ier world.</description><guid isPermaLink="false">6e9f2101-5cff-4356-95ea-43146f207fc5</guid><pubDate>Sun,  7 Jan 2018 00:00:00 +0000</pubDate><dc:creator>Matthew Mayer</dc:creator></item><item><title>#Rust2018 blog post</title><link>https://gist.github.com/cessen/394829673855e56157f63b4447f91e67</link><description>#Rust2018 blog post</description><guid isPermaLink="false">dbe7f7e3-229a-4d77-8d9f-7d857c051b54</guid><pubDate>Sun,  7 Jan 2018 06:23:37 +0000</pubDate><dc:creator>Nathan Vegdahl</dc:creator></item><item><title>Improving how we improve Rust in 2018</title><link>http://www.jonathanturner.org/2018/01/rust2018-and-data.html</link><description>The past few years, I’ve been lucky to be part of the Rust community survey process. In 2016, this data helped show the need to improve usability. We had good foundations, but they were too hard to get at. In 2017, we saw a renewed need to reach out to companies, to improve documentation, and a continued importance of pushing to making Rust more usable.</description><guid isPermaLink="false">4880546f-66a5-461b-a3b0-c0e31379b23d</guid><pubDate>Sun,  7 Jan 2018 00:00:00 +0000</pubDate><dc:creator>Jonathan Turner</dc:creator></item><item><title>Rust, Looking Forward in 2018</title><link>http://blog.troutwine.us/2018/01/06/rust-looking-forward-in-2018/</link><description>This past year I was pretty well a full-time Rust developer working on a handful of key projects: postmates/cernan postmates/hopper postmates/quantiles Each of these saw a non-trivial amount of work poured into them by myself and others. I wrote some – but not enough – about the work that</description><guid isPermaLink="false">2fae2fb9-686e-4b6e-a4e9-7cc28275bf44</guid><pubDate>Sat,  6 Jan 2018 02:09:25 +0000</pubDate><dc:creator>Brian L. Troutwine</dc:creator></item><item><title>More Rust in 2018</title><link>http://integer32.com/2018/01/05/more-rust-in-2018.html</link><description>Recently, the Rust teams put out a call for community thoughts on what Rust’s 2018 goals shouldbe, andwe’d like to weigh in from our perspective as a Rust-fo...</description><guid isPermaLink="false">88162fa2-6b84-4c3e-82e8-9e4443cb11c0</guid><pubDate>Fri,  5 Jan 2018 00:00:00 +0000</pubDate><dc:creator>Carol Nichols</dc:creator></item><item><title>Rustに何が欲しいだろう | κeenのHappy Hacκing Blog</title><link>https://keens.github.io/blog/2018/01/05/rustninanigahoshiidarou/</link><description>κeenです。New Year’s Rust: A Call for Community Blogpostsの一環のつもりです。 恐らく英語の記事が望まれてるんだろうなと思いつつも試しに日本から声を上げてみます。 私はRustは1.0前後の頃から触っていて、ドキュメントの翻訳をしたりここ1年くらいはIdein Inc.での業務でも使っています。

1年ほど使ってみて何が足りないか考えてみます。</description><guid isPermaLink="false">3f34d83f-f520-4bfa-a6a8-f08e3a0bea9d</guid><pubDate>Fri,  5 Jan 2018 00:00:00 +0000</pubDate><dc:creator>κeen</dc:creator></item><item><title>My journey with Rust in 2017 — The good, the bad, the weird</title><link>https://codeburst.io/my-journey-with-rust-in-2017-the-good-the-bad-the-weird-f07aa918f4f8</link><description>Note: This post is not only about Rust, but rather my experiences, problems and solutions throughout 2017.</description><guid isPermaLink="false">56870365-7dc4-4449-9f18-19caa0414b6b</guid><pubDate>Thu,  4 Jan 2018 00:31:28 +0000</pubDate><dc:creator>Felix Schütt</dc:creator></item><item><title>New Year&apos;s Rust: A Call for Community Blogposts - The Rust Programming Language Blog</title><link>https://blog.rust-lang.org/2018/01/03/new-years-rust-a-call-for-community-blogposts.html</link><description>Starting today and running until the end of January we’d like to ask the community to write blogposts reflecting on Rust in 2017 and proposing goals and directions for Rust in 2018.</description><guid isPermaLink="false">6d59f1d8-c073-47db-b3f5-0001878fd372</guid><pubDate>Wed,  3 Jan 2018 00:00:00 +0000</pubDate><dc:creator>Rust Blog</dc:creator></item></channel></rss>