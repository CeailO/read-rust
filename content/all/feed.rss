<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Read Rust - All Posts</title><link>https://readrust.net/</link><description>All Posts posts on Read Rust</description><item><title>Organizational Debt</title><link>https://boats.gitlab.io/blog/post/rust-2019/</link><description><![CDATA[We all know that classic aphorism: Year comes to an end, Rust blog post press send. This is mine.

There are lots of cool technical improvements to Rust that I want the project to achieve this year, and a few in particular that I’m definitely going to be putting a lot of time into. But this blog post is going to talk about none of them. Instead, I want to talk about organizational debt, and how badly the Rust project needs to deal with it in 2019.]]></description><guid isPermaLink="false">f0adf24b-6589-4306-a580-6cef894ad3b7</guid><pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate><dc:creator>withoutboats</dc:creator></item><item><title>gptman: A CLI tool and library for managing GUID partition tables</title><link>https://crates.io/crates/gptman</link><description><![CDATA[A CLI tool for Linux that allows you to copy a partition from one disk to another and more. A library that allows managing GUID partition tables. Features include: Read/Write GPT from 512 and 4096 bytes sector size disks, Create a new GPT on a disk, Insert/delete a partition in the table, Align partitions automatically, Resize a partition, Copy/clone a partition from one disk and insert it to another, Change partition type, Fix partitions order, Change disk GUID, Change partition name, Change partition GUID, Toggle legacy BIOS bootable, Toggle no block IO protocol, Toggle required partition flag, Toggle attributes, Customize columns to print, Print raw data of disklabel, Swap partition indexes, Randomize disk's GUID and all partition's GUID, Copy/clone all partitions from one disk and insert it to another.]]></description><guid isPermaLink="false">4b134136-1041-4976-ba52-7e64e767ea89</guid><pubDate>Thu,  2 May 2019 01:33:00 +0000</pubDate><dc:creator>Cecile Tonglet</dc:creator></item><item><title>A Guide to Rust Graphics Libraries in 2019</title><link>https://wiki.alopex.li/AGuideToRustGraphicsLibraries2019</link><description><![CDATA[People on the gamedev channel of the Unofficial Rust Discord were talking about graphics API’s and what goes where and what does what, people were contradicting and correcting each other, the rain of acronyms was falling hard and fast, and it was all getting a bit muddled. So I’m here to attempt to set the record straight. This is intended to provide context for people who want to get into writing graphics stuff (video games, animations, cool visualizations, etc) in Rust and don’t know where to start.]]></description><guid isPermaLink="false">55cb403b-5cda-4f80-8708-f55a3dc66e95</guid><pubDate>Thu,  2 May 2019 00:00:00 +0000</pubDate><dc:creator>Simon Heath</dc:creator></item><item><title>Hawk: Image Recognition Application using Rust and AWS Services</title><link>https://blog.knoldus.com/hawk-image-recognition-project-using-rust-and-aws-services/</link><description><![CDATA[Rust is one of the newest kid on the block in the modern programming languages. We tried to take advantage of its great features by using it in an Image Recognition blueprint project. This project can be traded with any existing security system deployed at any organization. Hawk uses AWS services integrated with Rust.]]></description><guid isPermaLink="false">dd64813c-9380-4cd5-b689-ae31cd1c0405</guid><pubDate>Wed,  1 May 2019 11:14:44 +0000</pubDate><dc:creator>muditchhabra6125</dc:creator></item><item><title>Using Wasmer for Plugins Part 4</title><link>https://wiredforge.com/blog/wasmer-plugin-pt-4/index.html</link><description><![CDATA[In the last three posts of this series we covered all of the things we would need to use Wasmer as the base for a plugin system. In part one we went over the basics of passing simple data in and out of a web assembly module, in part two we dug deeper into how you might do the same with more complicated data. In the last part we eased the experience of plugin developers by encapsulating all of our work into a library that exports a procedural macro. In this post we are going to explore what it would take to extend an existing plugin system to allow for wasm plugins.]]></description><guid isPermaLink="false">16c5eef8-5844-4408-8ab5-42319757ecef</guid><pubDate>Wed,  1 May 2019 00:00:00 +0000</pubDate><dc:creator>Robert Masen</dc:creator></item><item><title>Rust for Frontend Developers: Modules</title><link>https://www.kennethlarsen.org/rust-for-frontend-developers-modules/</link><description><![CDATA[Not that long ago I decided to start learning Rust. While it has a lot of useful resources online and a very friendly community there's still things that are weird to me. That's because Rust is a very different mental model than the frontend mental model I'm used to.

That means that things that are obvious to a lot of people are not obvious to me. So I'll try to document some of these things from the perspective of a frontend developer. This time on using modules.]]></description><guid isPermaLink="false">7ee0306d-50cc-4b2a-8573-ff0c59c02b3f</guid><pubDate>Tue, 30 Apr 2019 09:57:24 +0000</pubDate><dc:creator>Kenneth Larsen</dc:creator></item><item><title>RustPlayground: Quickly test Rust code on macOS.</title><link>https://github.com/cmyr/RustPlayground</link><description><![CDATA[Rust Playground for MacOS is a standalone native mac application that allows quickly editing and testing rust snippets.]]></description><guid isPermaLink="false">10ce619a-7183-49cf-91c8-99e0f085a272</guid><pubDate>Tue, 30 Apr 2019 03:59:00 +0000</pubDate><dc:creator>colin rofls</dc:creator></item><item><title>Stacked Borrows 2</title><link>https://www.ralfj.de/blog/2019/04/30/stacked-borrows-2.html</link><description><![CDATA[Recently, I have significantly updated Stacked Borrows in order to fix some issues with the handling of shared references that were uncovered in the previous version. In this post, I will describe what the new version looks like and how it differs from Stacked Borrows 1. I assume some familiarity with the prior version and will not explain everything from scratch.]]></description><guid isPermaLink="false">f2a55dcd-b163-42ac-8660-311e1cc384d0</guid><pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Ralf Jung</dc:creator></item><item><title>My Key Learnings after 30,000 LOC in Rust</title><link>https://medium.com/@jondot/my-key-learnings-after-30-000-loc-in-rust-a553e6403c19</link><description><![CDATA[For me, Rust takes a stroll over the memory lane above and picks and drives home the best experiences from all those languages — which is a]]></description><guid isPermaLink="false">094e167c-f023-449e-9976-247d314fd269</guid><pubDate>Mon, 29 Apr 2019 17:57:26 +0000</pubDate><dc:creator>Dotan Nahum</dc:creator></item><item><title>Rolling your own Router with Smithy v0.0.3</title><link>https://medium.com/@robert.balicki_2494/rolling-your-own-router-with-smithy-v0-0-3-2de17cdbb49</link><description><![CDATA[Build a WebAssembly application with a hash router using Smithy.]]></description><guid isPermaLink="false">4cc7ac88-4ef9-40fd-b235-bee8151e059d</guid><pubDate>Mon, 29 Apr 2019 15:25:25 +0000</pubDate><dc:creator>Robert Balicki</dc:creator></item><item><title>A close touch with Rust community</title><link>https://medium.com/@Aimeedeer/a-close-touch-with-rust-community-4a8507b756d9</link><description><![CDATA[About RustCon Asia 2019：There was definitely a little bit of everything for everyone attended. It was heartwarming to see people enjoying their experience from talks and at the same time meeting new and old friends. The portion of the attendees was just beginning with Rust benefited from talks such as Olivia’s RustBridge for beginners, Nick’s thinking in Rust and Alex’s How to learn Rust efficiently.]]></description><guid isPermaLink="false">00aea687-4bba-48e5-8568-000ef44a419e</guid><pubDate>Mon, 29 Apr 2019 11:49:07 +0000</pubDate><dc:creator>Aimee Z</dc:creator></item><item><title>Kubernetes operators in Rust</title><link>https://clux.github.io/probes/post/2019-04-29-rust-on-kubernetes/</link><description><![CDATA[Writing light weight cloud services without Go.]]></description><guid isPermaLink="false">b4cd814f-2f84-4e4d-b3a1-bba98d6a24f2</guid><pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate><dc:creator>clux</dc:creator></item><item><title>DataFusion 0.13.0 Benchmarks</title><link>https://andygrove.io/2019/04/datafusion-0.13.0-benchmarks/</link><description><![CDATA[Over the past couple weeks I’ve been working on a couple different efforts around parallel query execution with DataFusion: 1. Benchmarking parallel query execution by manually creating one execution context per parquet partition and running on a thread, just to get an idea of expected performance, and comparing results to Apache Spark (running in local mode). 2. Creating a PoC of actual parallel query execution in the Arrow/DataFusion repository. This post is mostly about the first effort.]]></description><guid isPermaLink="false">e25d035f-9121-4cd6-b0ac-f98db53fb3e5</guid><pubDate>Sun, 28 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Andy Grove</dc:creator></item><item><title>Writing an OS in Rust: Testing</title><link>https://os.phil-opp.com/testing/</link><description><![CDATA[This post explores unit and integration testing in no_std executables. We will use Rust's support for custom test frameworks to execute test functions inside our kernel. To report the results out of QEMU, we will use different features of QEMU and the bootimage tool.]]></description><guid isPermaLink="false">2766c75e-b1e0-4ae9-9cc2-8c3a8476bb57</guid><pubDate>Sat, 27 Apr 2019 23:03:00 +0000</pubDate><dc:creator>Philipp Oppermann</dc:creator></item><item><title>Creating cross-platform Rust terminal apps</title><link>http://www.jonathanturner.org/2019/04/porting-the-pikachu.html</link><description><![CDATA[I’ve been wanting to play around with the cool spinning Pikachu demo everyone was talking about. Sadly, it used termion to do its magic, which meant that unfortunately it wouldn’t work for me. Termion has been a boon for Rust, with lots of folks using it to create terminal applications. Unfortunately, as a Windows user, I know there’s a good chance that if the crate depends on termion that’s the end of the line for me, as termion apps just don’t work in Windows. Surely, I thought, there must be a better way, but I never managed to find one. Enter crossterm.]]></description><guid isPermaLink="false">28c59573-37da-46b6-92c0-f6fbb4a5e613</guid><pubDate>Sat, 27 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Jonathan Turner</dc:creator></item><item><title>Pre luminance-1.0.0 and random thoughts</title><link>https://phaazon.net/blog/pre-luminance-n-random-thoughts</link><description><![CDATA[Hello people. It’s been weeks I have started to work on luminance-1.0.0. For a brief recap, luminance is a graphics crate that I originally created in Haskell, when I ripped it off from a demoscene engine called quaazar in order to make and maintain tiner packages. The Rust port was my first Rust project and it became quickly the default language I would develop graphics applications in.]]></description><guid isPermaLink="false">8ff4000f-f8c6-41b9-a91b-c0bd9d23ca69</guid><pubDate>Fri, 26 Apr 2019 22:30:00 +0000</pubDate><dc:creator>Dimitri Sabadie</dc:creator></item><item><title>Refactoring Varisat 5: Incremental Solving and Proofs</title><link>https://jix.one/refactoring-varisat-5-incremental-solving-and-proofs/</link><description><![CDATA[This is the fifth and final post in my series about refactoring varisat. In the last post varisat gained the heuristics needed to solve some non-trivial instances. In this post we’ll add incremental solving and proof generation. This brings varisat to feature parity with the old version.]]></description><guid isPermaLink="false">0d66bab5-b38a-4f8a-8c6f-2c7c2cd41fab</guid><pubDate>Fri, 26 Apr 2019 16:12:54 +0200</pubDate><dc:creator>Jannis Harder</dc:creator></item><item><title>Hello world in morse code</title><link>https://idursun.com/posts/hello_world_in_morse_code/</link><description><![CDATA[I do love working with Rust. I deliberately create excuses to work on mini projects that ultimately involves coding in Rust. Recently, I have bought a blue pill which is a little board that costs about 1$. Although, I have zero experience in embedded programming I always wanted to give it a try with Rust which, in my case, boils down to blinking a LED on the board. I know there are excellent materials about embedded programming with Rust out there, but things do change very rapidly.]]></description><guid isPermaLink="false">e2e96d6e-78ce-43fe-a9b7-95fce36b169c</guid><pubDate>Thu, 25 Apr 2019 19:29:42 +0100</pubDate><dc:creator>Ibrahim Dursun</dc:creator></item><item><title>Modules in Rust Programming Language</title><link>https://dev.to/saiumesh/modules-in-rust-programming-language-495m</link><description><![CDATA[Modules are one of the better ways to organize your code and reuse it wherever it is necessary. Rust module system is completely different from what I've used in Languages like JavaScript, GoLang and Python. When I started to learn this pattern, I didn't really like it but, after using them for sometime, now I really like the way it works.]]></description><guid isPermaLink="false">95e18b0c-0a6c-42dd-80c8-cb5dbbe906e3</guid><pubDate>Thu, 25 Apr 2019 04:24:00 +0000</pubDate><dc:creator>sai umesh</dc:creator></item><item><title>Implementing tile encoding in rav1e</title><link>https://blog.rom1v.com/2019/04/implementing-tile-encoding-in-rav1e/</link><description><![CDATA[During the last few months at Videolabs, I added support for tile encoding in rav1e (a Rust AV1 Encoder). AV1 is an open and royalty-free video coding format, concurrent with HEVC (H.265). Rav1e is an encoder written in Rust, developped by Mozilla/Xiph. As such, it takes an input video and encodes it to produce a valid AV1 bitstream. Tile encoding consists in splitting video frames into tiles that can be encoded and decoded independently in parallel (to use several CPUs), at the cost of a small loss in compression efficiency. This speeds up encoding and increases decoding frame rate.]]></description><guid isPermaLink="false">47f0e720-8b24-41d0-8f3a-97683b5f03b3</guid><pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Romain Vimont</dc:creator></item><item><title>Leveraging Travis-CI for Continuous Deployment to Publish Compiled Binaries to GitHub</title><link>https://dev.to/hawkinjs/leveraging-travis-ci-for-continuous-deployment-to-publish-compiled-binaries-to-github-2k06</link><description><![CDATA[Recently I wrote a binary called "Watchdog" in Rust on my Mac that I wanted to take with me to Linux systems I frequent, but I couldn't bring a Rust compiler to these systems for unrelated reasons. This meant I had to cross-compile my application and ship just the binary.]]></description><guid isPermaLink="false">ef4b2e3e-406a-4553-9c49-3676c83eae96</guid><pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Josh Hawkins</dc:creator></item><item><title>Announcing Rust 1.34.1</title><link>https://blog.rust-lang.org/2019/04/25/Rust-1.34.1.html</link><description><![CDATA[This patch release fixes two false positives and a panic when checking macros in Clippy. Clippy is a tool which provides a collection of lints to catch common mistakes and improve your Rust code.]]></description><guid isPermaLink="false">ce78473f-6f58-428d-ba3e-cbbbfc778345</guid><pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate><dc:creator>The Rust Release Team</dc:creator></item><item><title>The XV Hex Viewer</title><link>https://chrisvest.github.io/xv/</link><description><![CDATA[XV is a terminal hex viewer with a text user interface, written in 100% safe Rust. Licensed under the Apache-2.0 software license. Get it from crates.io by running cargo install xv in your terminal.]]></description><guid isPermaLink="false">a3598959-4fde-42aa-9fcf-4310741caa5e</guid><pubDate>Wed, 24 Apr 2019 10:34:15 +0200</pubDate><dc:creator>Chris Vest</dc:creator></item><item><title>How Rust Solved Dependency Hell</title><link>https://stephencoakley.com/2019/04/24/how-rust-solved-dependency-hell</link><description><![CDATA[Every once in a while I'll be involved in a conversation about dependency management and versions, often at work, in which the subject of “dependency hell” will come up. If you're not familiar with the term, then I encourage you to look it up. A brief summary might be: "The frustration that comes from dealing with application dependency versions and dependency conflicts". With that in mind, let's get a little technical about dependency resolution.]]></description><guid isPermaLink="false">91b5c36e-a3f8-4cbd-ad0e-cd796ee6ea24</guid><pubDate>Wed, 24 Apr 2019 05:00:00 +0000</pubDate><dc:creator>Stephen Coakley</dc:creator></item><item><title>Monitoring AWS Batch Jobs with Rust</title><link>https://medium.com/rusted/monitoring-aws-batch-jobs-with-rust-8f1ef6115871</link><description><![CDATA[At Pixability my team and I recently created a pretty neat AWS Batch driven system. AWS Batch can can handle almost any task seamlessly and it’s pretty easy to manage with the console. This is great already, but I was curious to see what it would look like to monitor Batch with Rust. Watchrs was inspired by this question and currently provides basic functionality to do so. In this post we will be briefly going over how the main components of watchrs were built and how to use them all together.]]></description><guid isPermaLink="false">5af81963-5163-49f3-bd47-27b91d6dbd34</guid><pubDate>Wed, 24 Apr 2019 01:05:46 +0000</pubDate><dc:creator>Michael Habib</dc:creator></item><item><title>Simple Chat using Sonr-extras</title><link>https://hagsteel.com/posts/simple-chat/</link><description><![CDATA[Using sonr-extras to build a very basic chat using the provided connection handling objects.]]></description><guid isPermaLink="false">c9e2beae-20d5-4c7a-b8de-01f52b18aec1</guid><pubDate>Wed, 24 Apr 2019 00:00:00 +0200</pubDate><dc:creator>Jonas</dc:creator></item><item><title>Reviewing Sled: Part III</title><link>https://ayende.com/blog/187073-C/reviewing-sled-part-iii</link><description><![CDATA[Unusually for me, I had a bit of a pause in reviewing Sled. As a reminder, Sled is an embedded database engine written in Rust. I last stopped looking at the buffer management, but I still don’t really have a good grasp of what is going on. The next file is the iterator. It looks like it translates between segments and messages in these segments.]]></description><guid isPermaLink="false">767bc80b-e61f-4e0f-8cbb-82655b7aa767</guid><pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Ayende Rahien</dc:creator></item><item><title>Design Space Map</title><link>https://llogiq.github.io/2019/04/23/map.html</link><description><![CDATA[The Rust community currently appears to reconfigure its design process. There is some discussion around RFCs. A topic that comes up is shared summaries. I think this is a great idea and want to share my 2¢ here.]]></description><guid isPermaLink="false">a436e872-4c6f-4b9a-a311-eb7658d23cb2</guid><pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>Using DMA to transfer data with Embedded Rust</title><link>https://flowdsp.io/blog/stm32f3-02-dac-dma/</link><description><![CDATA[In this article you will learn how to use the Direct Memory Access (DMA) controller to transfer data from memory to the built-in Digital to Analog Converter (DAC) on the STM32F3DISCOVERY board.]]></description><guid isPermaLink="false">fc88b6c6-cf80-4546-b03a-94bcdebf6232</guid><pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Antoine van Gelder</dc:creator></item><item><title>Rust&apos;s 2019 roadmap</title><link>https://blog.rust-lang.org/2019/04/23/roadmap.html</link><description><![CDATA[Each year the Rust community comes together to set out a roadmap. This year, in addition to the survey, we put out a call for blog posts in December, which resulted in 73 blog posts written over the span of a few weeks. The end result is the recently-merged 2019 roadmap RFC. To get all of the details, please give it a read, but this post lays out some of the highlights.]]></description><guid isPermaLink="false">c66e7e63-ea76-4d35-a15b-0bf56a905b07</guid><pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate><dc:creator>The Rust Core Team</dc:creator></item><item><title>What I learned from my failed attempt of writing baremetal android in Rust</title><link>https://onatm.dev/2019/04/22/what-i-learned-from-my-failed-attempt-of-writing-baremetal-android-in-rust/</link><description><![CDATA[Every year I define a super ambitious goal for my learning process to keep myself motivated on the way. This year I defined my goal as writing a bootable kernel image for my old HTC One X android smartphone. I knew it was going to be hard but I never thought I’d fail in the end. It was clearly the Dunning–Kruger effect that made me think that I can achieve what I want to do with my limited knowledge/experience on the subject.]]></description><guid isPermaLink="false">3e1e598a-b186-40d1-b03c-bae1444a6ee7</guid><pubDate>Mon, 22 Apr 2019 12:35:34 +0000</pubDate><dc:creator>Onat Mercan</dc:creator></item><item><title>AiC: Collaborative summary documents</title><link>http://smallcultfollowing.com/babysteps/blog/2019/04/22/aic-collaborative-summary-documents/</link><description><![CDATA[One of the challenges I see with how we often do design is that this “solution space” is actually quite implicit. We are exploring it through comments, but each comment is only tracing out one path through the terrain. I wanted to see if we could try to represent the solution space explicitly. This post is a kind of “experience report” on one such experiment, what I am calling a collaborative summary document (in contrast to the more standard summary comment that we often do).]]></description><guid isPermaLink="false">e335233d-84ab-4f50-9cc0-5e401a6b5363</guid><pubDate>Mon, 22 Apr 2019 00:00:00 -0400</pubDate><dc:creator>Niko Matsakis</dc:creator></item><item><title>6 useful Rust macros that you might not have seen before</title><link>https://medium.com/@benmcdonald_11671/6-useful-rust-macros-that-you-might-not-have-seen-before-59d1386f7bc5</link><description><![CDATA[Below are 6 Rust macros that are worth taking a look at to improve your project. Rust macros are a great feature that can reduce code boilerplate and be a time saver for programmers. They also offer flexibility for developers to use metaprogramming to add new features to the language and package them in a way that is easy to integrate into code. They are one of the more powerful features of the language and this led me to search github and cargo to see what was out there. Below are some interest macros that are not as well known.]]></description><guid isPermaLink="false">b2657146-974b-41b9-ba31-8aae62c25f7d</guid><pubDate>Mon, 22 Apr 2019 02:00:39 +0000</pubDate><dc:creator>Ben McDonald</dc:creator></item><item><title>splines-1.0.0 and first release candidate</title><link>https://phaazon.net/blog/splines-1.0.0-rc.1</link><description><![CDATA[today, I’m going to talk about the splines crate. And more specifically, the splines-1.0.0-rc.1 release candidate I uploaded today on crates.io. Maybe you’re wondering what a spline is, in the first place. A spline is a mathematic curve that is defined by several polynomials. You can picture them mentally by several small and simple curves combined to each others, giving the curve an interesting shape and properties. Now why we want splines is easy to understand: imagine a curve, something smooth and a bit complex (maybe even with loops). Now, imagine you want to make an object move along that curve. How do you represent that curve and how to you “make something advance along it?”]]></description><guid isPermaLink="false">50725324-0ca7-4137-8e95-9d5e023881f8</guid><pubDate>Mon, 22 Apr 2019 01:10:00 +0000</pubDate><dc:creator>Dimitri Sabadie</dc:creator></item><item><title>Using Wasmer for Plugins Part 3</title><link>https://wiredforge.com/blog/wasmer-plugin-pt-3/index.html</link><description><![CDATA[In the last two posts of this series we covered all of the things we would need to use Wasmer as the base for a plugin system. In part one we went over the basics of passing simple data in and out of a web assembly module, in part two we dug deeper into how you might do the same with more complicated data. In this part we are going to explore how we might ease the experience for people developing plugins for our application.]]></description><guid isPermaLink="false">bd3e3e37-90f2-4941-ba7c-00fdae65bdac</guid><pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Robert Masen</dc:creator></item><item><title>Elements of Rust: style and philosophy</title><link>https://github.com/ferrous-systems/elements-of-rust</link><description><![CDATA[A collection of software engineering techniques for effectively expressing intent with Rust.]]></description><guid isPermaLink="false">bda9c409-db67-4283-aadc-ffb54c3ad00d</guid><pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Ferrous Systems </dc:creator></item><item><title>Generic returns in Rust</title><link>https://blog.jcoglan.com/2019/04/22/generic-returns-in-rust/</link><description><![CDATA[After casting around for a new platform to learn recently, I’ve decided to dive into Rust. Being mostly familiar with untyped languages like Ruby and JavaScript, it’s interesting to learn a statically typed language and see how it changes how one writes programs. There’s a common misconception amongst dynamic typing fans that static typing means you write the same programs, they’re just more verbose and come with more restrictions. And while there is certainly a cost to only being allowed to write type-safe programs, a good type system actually lets you write programs you cannot write in dynamic languages. In Rust, generic return values are a good example of this.]]></description><guid isPermaLink="false">036c9563-3d69-4cf8-a59a-718976fded92</guid><pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate><dc:creator>James Coglan</dc:creator></item><item><title>Plume: Federated blogging application</title><link>https://github.com/Plume-org/Plume</link><description><![CDATA[Plume is a federated blogging engine, based on ActivityPub. It uses the Rocket framework, and Diesel to interact with the database.]]></description><guid isPermaLink="false">3d938fcd-0108-499a-9929-841d1999db4b</guid><pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Plume Developers</dc:creator></item><item><title>LeftWM - A tiling window manager for Adventurers</title><link>http://leftwm.org/</link><description><![CDATA[A tiling window manager written in Rust for stability and performance. The core of left is designed to do one thing and one thing well. Be a window manager. Because you probably want more than just a black screen LeftWM is built around the concept of theming. With themes you can choose between different bar / compositor / background / colors, whatever makes you happy. LeftWM has been built from the very beginning to support multiple screens and has been built around ultrawide monitors. You will see this with the default key bindings]]></description><guid isPermaLink="false">49f9c596-e61c-402d-a2de-21c8350ccac6</guid><pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate><dc:creator>lex148</dc:creator></item><item><title>Things I Enjoy in Rust: Error Handling</title><link>https://blog.jonstodle.com/things-i-enjoy-in-rust-error-handling/</link><description><![CDATA[I’ve already talked about how I like how enums are used in Rust. They make it easy to express multiple states and the state’s related data. One place this is excellently utilized is error handling.]]></description><guid isPermaLink="false">8fbc326e-e356-480c-8708-c6b4d8d66719</guid><pubDate>Sun, 21 Apr 2019 12:00:00 +0200</pubDate><dc:creator>Jon Grythe Stødle</dc:creator></item><item><title>Rust, dudect and constant-time crypto in debug mode</title><link>https://brycx.github.io/2019/04/21/rust-dudect-constant-time-crypto.html</link><description><![CDATA[The following are observations from when I started testing my own pure-Rust crypto library, including its dependencies, for constant-time execution. Starting with a short introduction to dudect and how it can be used to test code for timing-based side-channel vulnerabilities. Then discussing the process of discovering a short-circuit that resulted in variable-time execution, in dalek-cryptography’s subtle library and how this seems to relate to Rust codegen option opt-level.]]></description><guid isPermaLink="false">4450a6c3-3baa-4485-853b-910969aa0119</guid><pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate><dc:creator>brycx</dc:creator></item><item><title>emacs-module-rs provides high-level Rust binding and tools to write Emacs&apos;s dynamic modules.</title><link>https://ubolonton.github.io/emacs-module-rs/0.8.0/</link><description><![CDATA[This provides a high-level binding to emacs-module, Emacs's support for dynamic modules.]]></description><guid isPermaLink="false">675a435e-aadf-4ded-b3d1-50d6a8afaced</guid><pubDate>Sat, 20 Apr 2019 11:11:45 +0000</pubDate><dc:creator>Tuấn-Anh Nguyễn</dc:creator></item><item><title>Using Wasmer for Plugins Part 2</title><link>https://wiredforge.com/blog/wasmer-plugin-pt-2</link><description><![CDATA[In this post we are going to cover how we could pass more complicated data from the wasm module back to the runner.]]></description><guid isPermaLink="false">899be7d9-392f-4467-aa75-85b2d3e913f7</guid><pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Robert Masen</dc:creator></item><item><title>12 Killer Rust Libraries You Should Try</title><link>https://medium.com/@jondot/12-killer-rust-libraries-you-should-know-c60bab07624f</link><description><![CDATA[I’ve just crossed a 20K LOC in one of my bigger Rust projects, and thought about pausing for a moment and sharing some great Rust libraries that I’ve used.]]></description><guid isPermaLink="false">b8b79bb1-c176-43e8-bad9-943285e361c6</guid><pubDate>Fri, 19 Apr 2019 15:21:32 +0000</pubDate><dc:creator>Dotan Nahum</dc:creator></item><item><title>Lessons moving from iOS delegates to Rust async</title><link>https://thomask.sdf.org/blog/2019/04/19/lessons-moving-from-ios-delegates-to-rust-async.html</link><description><![CDATA[The majority of my async programming experience is on iOS and let me tell you, life is good. You can easily dispatch work to background threads. You can bring work back to the main thread. You can mark your classes as delegates and when you need to handle some event the OS will use a magic pre-existing thread pool to invoke your method and you can do whatever you like. It works perfectly almost all the time, except for when it doesn’t because of race conditions or it crashes due to concurrency. Life is good.

Rust is less tolerant about the crashing part. While I agree that crashing is bad in principle, avoiding it has significant ramifications for how you can write async code at all. Recently I’ve been finding out what the differences are. Obviously this means I’m more of a noob than an expert, but I’m currently in a good position to point out what the confusing parts are and what the Rust solutions seem to be. (But I’m a noob so take it with a grain of salt.)]]></description><guid isPermaLink="false">0cc3f8b6-7cd9-423f-96f2-569b660e2bf3</guid><pubDate>Fri, 19 Apr 2019 19:30:00 +1000</pubDate><dc:creator>Thomas Karpiniec</dc:creator></item><item><title>AiC: Adventures in consensus</title><link>http://smallcultfollowing.com/babysteps/blog/2019/04/19/aic-adventures-in-consensus/</link><description><![CDATA[In the talk I gave at Rust LATAM, I said that the Rust project has always emphasized finding the best solution, rather than winning the argument. I think this is one of our deepest values. It’s also one of the hardest for us to uphold.

Let’s face it – when you’re having a conversation, it’s easy to get attached to specific proposals. It’s easy to have those proposals change from “Option A” vs “Option B” to “my option” and “their option”. Once this happens, it can be very hard to let them “win” – even if you know that both options are quite reasonable.

This is a problem I’ve been thinking a lot about lately. So I wanted to start an irregular series of blog posts entitled “Adventures in consensus”, or AiC for short. These posts are my way of exploring the topic, and hopefully getting some feedback from all of you while I’m at it.

This first post dives into what a phrase like “finding the best solution” even means (is there a best?) as well as the mechanics of how one might go about deciding if you really have the “best” solution. Along the way, we’ll see a few places where I think our current process could do better.]]></description><guid isPermaLink="false">00b32f85-009b-464f-8e31-c9930a0b67f3</guid><pubDate>Fri, 19 Apr 2019 00:00:00 -0400</pubDate><dc:creator>Niko Matsakis</dc:creator></item><item><title>Using Wasmer for Plugins Part 1</title><link>https://wiredforge.com/blog/wasmer-plugin-pt-1</link><description><![CDATA[A few months ago, the Wasmer team announced a Web Assembly (aka wasm) interpreter that could be embedded into rust programs. This is particularly exciting for anyone looking to add plugins to their project and since Rust provides a way to directly compile programs to wasm, it seems like a perfect option. In this series of blog posts we are going to investigate what building a plugin system using wasmer and rust would take.]]></description><guid isPermaLink="false">d11c58e5-419a-4c3e-923d-b2bac810d445</guid><pubDate>Fri, 19 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Robert Masen</dc:creator></item><item><title>Things I Enjoy in Rust: Enums</title><link>https://blog.jonstodle.com/things-i-enjoy-in-rust-enums/</link><description><![CDATA[I’ve been diving into Rust for the last couple of months, after my colleague started talking about it. I’ve been wanting to learn a lower level language, but C++ or something of the like have always seemed too daunting for me to even start.

I’d heard of Rust before, and great things too, but hadn’t set apart time to look into it. I finally took the dive. And boy, am I glad I did.

A lot of people talk about the borrowing system of Rust, or how fast it, or the strict type system. All of which are great things, but it’s not what I’m going to write about here. I’m excited about enums.]]></description><guid isPermaLink="false">675975c8-b21a-4d87-8ac3-7e8c74fd8897</guid><pubDate>Thu, 18 Apr 2019 18:00:00 +0200</pubDate><dc:creator>Jon Grythe Stødle</dc:creator></item><item><title>Building an ASCII image renderer</title><link>https://medium.com/carwow-product-engineering/getting-a-bit-rusty-1285c49e520e</link><description><![CDATA[Although I’m a beginner in Rust, I would like to share the process behind a toy application that I developed recently. It’s a very simple command line tool that prints an image file using ASCII symbols directly to your terminal. ]]></description><guid isPermaLink="false">9a01af1b-fcfa-464e-817f-9a6ea54cf9b7</guid><pubDate>Thu, 18 Apr 2019 12:54:32 +0000</pubDate><dc:creator>Stepan Khodzhaian</dc:creator></item><item><title>Non-lexical lifetimes in Rust</title><link>https://blog.knoldus.com/non-lexical-lifetimes-in-rust/</link><description><![CDATA[This blog is for new Rustacean, who's just started exploring Rust. Demonstrating a scenario that is possible because of the Non-lexical lifetimes feature. This feature was introduced in Rust 2018 edition. Earlier than, in Rust 2015, it was not possible.]]></description><guid isPermaLink="false">88bf7467-0164-4b01-a0fc-1b33ffe55f45</guid><pubDate>Thu, 18 Apr 2019 06:39:28 +0000</pubDate><dc:creator>Ayush Mishra</dc:creator></item><item><title>Futures 0.1 Compatibility Layer</title><link>https://rust-lang-nursery.github.io/futures-rs/blog/2019/04/18/compatibility-layer.html</link><description><![CDATA[Rust’s futures ecosystem is currently split in two: On the one hand we have the vibrant ecosystem built around futures@0.1 with its many libraries working on stable Rust and on the other hand there’s the unstable std::future ecosystem with support for the ergonomic and powerful async/await language feature. To bridge the gap between these two worlds we have introduced a compatibility layer as part of the futures@0.3 extension to std::future. This blog post aims to give an overview over how to use it.]]></description><guid isPermaLink="false">adc39c05-2876-4ef4-b071-b4133c96c8ca</guid><pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Josef Brandl</dc:creator></item><item><title>Learning Parser Combinators With Rust</title><link>https://bodil.lol/parser-combinators/</link><description><![CDATA[This article teaches the fundamentals of parser combinators to people who are already Rust programmers. It assumes no other knowledge, and will explain everything that isn't directly related to Rust, as well as a few of the more unexpected aspects of using Rust for this purpose. It will not teach you Rust if you don't already know it, and, if so, it probably also won't teach you parser combinators very well.]]></description><guid isPermaLink="false">a085423c-ec98-4fff-ba66-7c23926175d9</guid><pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Bodil Stokke</dc:creator></item><item><title>Hangman Game Development Tutorial</title><link>https://github.com/rusticus-io/hangman</link><description><![CDATA[This tutorial was part of a whorkshop which took place at the Rust Community Stuttgart on April, 17th 2019. We will develop a Hangman text based console game within this tutorial.]]></description><guid isPermaLink="false">2c21dd65-6a7c-4ce6-97c6-f7a383c331bf</guid><pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Romeo Disca</dc:creator></item><item><title>Proper Notation for Scalar Multiplication in Rust: Dispatching on the Right-Hand Side of Operators and Rusts&apos;s Orphan Rule</title><link>https://www.jstuber.net/2019/04/17/scalar-multiplication-in-rust/</link><description><![CDATA[The scalar multiplication in a vector space is written kv in math, where k is a scalar value (e.g. a number) and v is a vector. It would be nice to write k * v in programming languages, to stay close to the familiar notation. Object-oriented languages typically only support calling methods on the first argument. But the scalar normally doesn't know about vectors, so it can't easily do that.]]></description><guid isPermaLink="false">524e6489-33da-4635-977c-9d86e839d185</guid><pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Jürgen Stuber</dc:creator></item><item><title>Rust Associated Type</title><link>https://medium.com/codechain/rust-associated-type-b0193c22eacd</link><description><![CDATA[Associated Types in Rust are similar to Generic Types; however, Associated Types limit the types of things a user can do, which consequently facilitates code management. Among the Generic Types of traits, types that depend on the type of trait implementation can be expressed by using the Associated Type syntax. By comparing the Associated and Generic Types, you can get a better understanding of Associated Types.]]></description><guid isPermaLink="false">77c8e0ed-ccb6-4f29-8ab7-1e8c3cd5d39d</guid><pubDate>Tue, 16 Apr 2019 10:08:09 +0000</pubDate><dc:creator>Park Juhyung</dc:creator></item><item><title>Runtime</title><link>https://blog.yoshuawuyts.com/runtime/</link><description><![CDATA[The vision of the Async Ecosystem WG is to refine the async Rust experience until it matches the quality and ease of working with today's std. There are a lot of components in that vision, including async/await syntax and borrow checker integration. Today, though, we'd like to introduce another component: Runtime, a crate that makes working with async code feel closer to working with std, and a stepping stone toward ecosystem standardization.]]></description><guid isPermaLink="false">53c58e52-158a-40e1-b59d-3a9ad1a92edb</guid><pubDate>Tue, 16 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Yoshua Wuyts</dc:creator></item><item><title>Rust: beyond the typechecker</title><link>https://blog.merigoux.ovh/en/2019/04/16/verifying-rust.html</link><description><![CDATA[This post will be different from the previous ones, since I’m going to present some of the early results of my work as a PhD student at the Prosecco team in ...]]></description><guid isPermaLink="false">8770e0f9-eca2-4f58-b2f4-7761dbcf81bb</guid><pubDate>Tue, 16 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Denis Merigoux</dc:creator></item><item><title>More than coders</title><link>http://smallcultfollowing.com/babysteps/blog/2019/04/15/more-than-coders/</link><description><![CDATA[Lately, the compiler team has been changing up the way that we work. Our goal is to make it easier for people to track what we are doing and – hopefully – get involved. This is an ongoing effort, but one thing that has become clear immediately is this: the compiler team needs more than coders.]]></description><guid isPermaLink="false">b35d346f-7773-44c5-8db5-4cbe95fb3749</guid><pubDate>Mon, 15 Apr 2019 00:00:00 -0400</pubDate><dc:creator>Niko Matsakis</dc:creator></item><item><title>for await loops (Part I)</title><link>https://boats.gitlab.io/blog/post/for-await-i/</link><description><![CDATA[The biggest unresolved question regarding the async/await syntax is the final syntax for the await operator. There’s been an enormous amount of discussion on this question so far; a summary of the present status of that discussion and the positions within the language team is coming soon. Right now I want to separately focus on one question which impacts that decision but hasn’t been considered very much yet: for loops which process streams.]]></description><guid isPermaLink="false">8c6f2335-8fba-4cb5-9da1-2baba7f59159</guid><pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate><dc:creator>withoutboats</dc:creator></item><item><title>Web Development with Rust — 03/x: Create a REST API</title><link>https://dev.to/gruberb/web-development-with-rust-03-x-create-a-rest-api-3i82</link><description><![CDATA[The most common pattern for creating APIs is REST. We will discover how we can build an API in Rust which conforms with the REST pattern.]]></description><guid isPermaLink="false">f2b4f953-be42-4454-b073-1804aa4a8bb6</guid><pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Bastian Gruber</dc:creator></item><item><title>Chess vocabulary in Rust</title><link>https://backscattering.de/chess/vocabulary/</link><description><![CDATA[Recently I've been using Rust to build a server for the new 7-piece Syzygy endgame tablebases. Using Rust was quite enjoyable and I plan to use it for many future projects. This series is intended to order and share my thoughts, and as a primer to discuss some open questions I have.]]></description><guid isPermaLink="false">37ea8a58-93a1-4e5c-b125-d98a250e601c</guid><pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Niklas Fiekas</dc:creator></item><item><title>Neat new feature in Rust: iter::from_fn</title><link>https://weblog.latte.ca/blake/tech/rust/makingiterators.html</link><description><![CDATA[Recently Rust has introduced a couple of new features, and the one that caught my eye in particular was std::iter::from_fn, which let’s you make an iterator from a function, which is most of what that macro was trying to do, so I thought I would try to convert the various places I was using the macro to use the new function instead…]]></description><guid isPermaLink="false">c16ea768-9518-4a40-b51d-9c5e978994a2</guid><pubDate>Sat, 13 Apr 2019 20:49:00 +0000</pubDate><dc:creator>Blake Winton</dc:creator></item><item><title>Keeping Rust projects&apos; README.md code examples up-to-date</title><link>https://blog.guillaume-gomez.fr/articles/2019-04-13+Keeping+Rust+projects%27+README.md+code+examples+up-to-date</link><description><![CDATA[Because keeping documentation up-to-date is very important (and should be a must have!), we need to check if the examples are still valid after every new updates. Luckily, rustdoc already makes such things very easy. But now, let's say you have examples outside of your Rust code. How can they be tested?]]></description><guid isPermaLink="false">45b386b4-5b90-42a7-b17b-00aeb72cde34</guid><pubDate>Sat, 13 Apr 2019 01:00:00 +0000</pubDate><dc:creator>Guillaume Gomez</dc:creator></item><item><title>Using Rust Generics to Enforce DB Record State</title><link>https://fy.blackhats.net.au/blog/html/2019/04/13/using_rust_generics_to_enforce_db_record_state.html</link><description><![CDATA[I’m currently working on a (private in 2019, public in july 2019) project which is a NoSQL database writting in Rust. To help us manage the correctness and lifecycle of database entries, I have been using advice from the Rust Embedded Group’s Book. As I have mentioned in the past, state machines are a great way to design code, so let’s plot out the state machine we have for Entries]]></description><guid isPermaLink="false">ad1e9e94-37b0-4328-93d5-216cb58cd905</guid><pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate><dc:creator>firstyear</dc:creator></item><item><title>cargo-call-stack, part 2: getting call graph information from rustc</title><link>https://blog.japaric.io/stack-analysis-2/</link><description><![CDATA[In a previous post I described the current implementation of cargo-call-stack, a static stack usage analysis tool. In the second part of that post I described the problems the tool runs into when dealing with indirect function calls (both function pointer calls and dynamic dispatch) and proposed improving the output of the tool by having rustc inject type information in the LLVM IR it produces.

While discussing that idea with rustc developers they noted that the compiler could emit information that’s more relevant to call graph analysis than just the signatures of functions and trait methods. In this post I’ll describe the call graph metadata I’m currently implementing in rustc and how it will help tools like cargo-call-stack. By the way, I have a feature branch of cargo-call-stack that uses this upcoming rustc feature if you want to try it out but you’ll need to build a custom rustc.]]></description><guid isPermaLink="false">e57004c9-8a39-47af-bd60-b97fbcd07e7a</guid><pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Jorge Aparicio</dc:creator></item><item><title>Building a pub/sub server with Sonr (part 2)</title><link>https://hagsteel.com/posts/building-a-pub-sub-with-sonr-part-2/</link><description><![CDATA[This is the second part in a two part series on writing a pub/sub server in Rust using Sonr. We will jump straight in building the publisher. This is the biggest piece of code so far in this project.]]></description><guid isPermaLink="false">b7836b84-068e-4db1-9c0c-2dea0652626d</guid><pubDate>Thu, 11 Apr 2019 01:00:00 +0100</pubDate><dc:creator>Jonas</dc:creator></item><item><title>Announcing Rust 1.34.0</title><link>https://blog.rust-lang.org/2019/04/11/Rust-1.34.0.html</link><description><![CDATA[The largest feature in this release is the introduction of alternative cargo registries. The release also includes support for ? in documentation tests, some improvements for #[attribute(..)]s, as well as the stabilization of TryFrom. Read on for a few highlights, or see the detailed release notes for additional information.]]></description><guid isPermaLink="false">c652e06d-95e4-4da0-8ce8-a94c007587d7</guid><pubDate>Thu, 11 Apr 2019 00:00:00 +0000</pubDate><dc:creator>The Rust Release Team</dc:creator></item><item><title>Face Detection with Actix Web</title><link>https://cetra3.github.io/blog/face-detection-with-actix-web/</link><description><![CDATA[Last article I wrote about how to use tensorflow with rust. This time we're going to take what we've built on, and serve it as an HTTP API call. As Actix Web is nearing its inevitable 1.0 release, I thought it would be a great time to build something with it.]]></description><guid isPermaLink="false">ea434653-4ba2-47c0-bc91-ba9c521dc419</guid><pubDate>Thu, 11 Apr 2019 00:00:00 +0000</pubDate><dc:creator>cetra3</dc:creator></item><item><title>Mysteriously Low Hanging Fruit: A Big Improvement To LLD For Rust Debug Builds</title><link>https://robert.ocallahan.org/2019/04/mysteriously-low-hanging-fruit-big.html</link><description><![CDATA[LLD is generally much faster than the GNU ld.bfd and ld.gold linkers, so you would think it has been pretty well optimised. You might then be surprised to discover that a 36-line patch dramatically speeds up linking of Rust debug builds, while also shrinking the generated binaries dramatically, both in simple examples and large real-world projects.]]></description><guid isPermaLink="false">afbe8437-4dca-40c1-b6ab-034fbd57c9cd</guid><pubDate>Thu, 11 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Robert O&apos;Callahan</dc:creator></item><item><title>Building a pub/sub server with Sonr (part 1)</title><link>https://hagsteel.com/posts/building-a-pub-sub-with-sonr-part-1/</link><description><![CDATA[This is the first part in a two part series where we explore Sonr by writing a pubsub server in Rust using Sonr.]]></description><guid isPermaLink="false">8042dc34-344d-452f-818c-bebe0f6cf573</guid><pubDate>Wed, 10 Apr 2019 00:00:00 +0100</pubDate><dc:creator>Jonas</dc:creator></item><item><title>Rust for Python Developers: Ownership and Borrowing</title><link>https://medium.com/@rajasekar3eg/rust-for-python-developers-ownership-and-borrowing-cd85fc10cae4</link><description><![CDATA[Following the previous post, here I am going to introduce the key concepts of Rust — Ownership and Borrowing.]]></description><guid isPermaLink="false">11088ce0-5efd-4232-8541-dcb76a8ed72e</guid><pubDate>Tue,  9 Apr 2019 21:14:25 +0000</pubDate><dc:creator>Raja Sekar</dc:creator></item><item><title>Using rav1e - from your own code</title><link>https://dev.to/luzero/using-rav1e-from-your-own-code-2ie0</link><description><![CDATA[AV1 is a modern video codec brought to you by an alliance of many different bigger and smaller players in the multimedia field. rav1e: The safest and fastest AV1 encoder, built by many volunteers and Mozilla/Xiph developers. crav1e: A companion crate, written by yours truly, that provides a C-API, so the encoder can be used by C libraries and programs. This article will just give a quick overview of the API available right now and it is mainly to help people start using it and hopefully report issues and problem.]]></description><guid isPermaLink="false">914d12c5-ea4a-49f4-8466-1f15a9c3340a</guid><pubDate>Tue,  9 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Luca Barbato</dc:creator></item><item><title>A Love Letter to Rust Macros</title><link>https://happens.lol/posts/a-love-letter-to-rust-macros/</link><description><![CDATA[It’s no secret to people who know me that I’m a huge fan of the Rust programming language. I could talk for hours about the brilliance of the ownership system, my irrational longing for natively compiled languages without garbage collection, or the welcoming community that finally moved me to take a more active part in open source projects. But for a start, I just want to highlight one of my favourite features: Macros.]]></description><guid isPermaLink="false">749e48bb-50e5-4e7e-8e17-9dd73e1776f2</guid><pubDate>Tue,  9 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Hilmar Wiegand</dc:creator></item><item><title>Rust Actix Web + Magic link authentication</title><link>https://blog.approveapi.com/tutorials/rust-actix-web-approveapi-magic-login-link/</link><description><![CDATA[In this tutorial, we'll create web app using the Rust actix-web framework and implement magic link authentication powered by ApproveAPI's Rust library.]]></description><guid isPermaLink="false">98a6bda4-dcb1-419a-bf9a-6be8f4b88b8b</guid><pubDate>Tue,  9 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Alex Grinman</dc:creator></item><item><title>Protocols in Tokio (i3 IPC)</title><link>https://leshow.github.io/post/impl_proto_tokio/</link><description><![CDATA[There’s a dearth of blog posts online that cover the details of implementing a custom protocol in tokio, at least that I’ve found. I’m going to cover some of the steps I went through in implementing an async version i3wm’s IPC.]]></description><guid isPermaLink="false">ebf00798-d92a-4f61-8b2b-8ffceb2c09a9</guid><pubDate>Mon,  8 Apr 2019 18:53:18 -0400</pubDate><dc:creator>Evan Cameron</dc:creator></item><item><title>Terminal Redox: Some Developer Tools Written in Rust</title><link>https://sts10.github.io//2019/04/08/terminal-redox-alacritty.html</link><description><![CDATA[In my very slow and not very steady quest to learn the Rust programming language, I’ve come across a few projects written in the language that I use everyday. I thought I’d write a quick post about them, with some configuration tricks that I’ve made to make them suit my needs.

Why prefer tools built with Rust? Rust is a very fast language that also works to ensure safety from a group of bugs and pitfalls. It’s also the four-time-running most loved programming language, according to a yearly Stack Overflow survey. Also, since Rust is only a few years old, any program written in Rust is by definition new. Of course newer doesn’t always mean better, but as a non-professional developer I can afford to be on the edge a bit.]]></description><guid isPermaLink="false">2d3bd098-bf1d-451b-bef0-b2e84678b4e3</guid><pubDate>Mon,  8 Apr 2019 22:11:00 +0000</pubDate><dc:creator>Sam Schlinkert</dc:creator></item><item><title>Javascript evaluator part 2: Parser and Basic evaluator</title><link>https://medium.com/@retep007/javascript-evaluator-part-2-parser-and-basic-evaluator-d306ff1aec83</link><description><![CDATA[This is the second part of writing Javascript evaluator series. I’m going to talk about my project developing Javascript evaluator in Rust. This post is going to briefly introduce Parsing that’s build on top of the results from Lexer in the first post. Then I will cover elements of evaluation of abstract syntax tree (AST).]]></description><guid isPermaLink="false">63c81ff0-ee39-437f-a299-70173f639777</guid><pubDate>Mon,  8 Apr 2019 06:39:05 +0000</pubDate><dc:creator>Peter Hrvola</dc:creator></item><item><title>Alacritty Version 0.3.0</title><link>https://blog.christianduerr.com/alacritty_030_announcement</link><description><![CDATA[ Alacritty is a terminal emulator with a strong focus on simplicity and performance. With such a strong focus on performance, included features are carefully considered and you can always expect Alacritty to be blazingly fast. By making sane choices for defaults, Alacritty requires no additional setup. However, it does allow configuration of many aspects of the terminal. With this release, Alacritty has officially entered the beta stage – there are still a few missing features and bugs to be fixed, but it is already used by many as a daily driver.]]></description><guid isPermaLink="false">700e8697-e3f3-49ff-bf87-03cfb598ff0d</guid><pubDate>Sun,  7 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Christian Duerr</dc:creator></item><item><title>hunter: ranger-like file browser written in Rust</title><link>https://github.com/rabite0/hunter</link><description><![CDATA[hunter is a fast and lag-free file browser/manager for the terminal. It features a heavily asynchronous and multi-threaded design and all disk IO happens off the main thread in a non-blocking fashion, so that hunter will always stay responsive, even under heavy load on a slow spinning rust disk, even with all the previews enabled.]]></description><guid isPermaLink="false">c702047e-47c7-493a-b73e-55a4394eb6da</guid><pubDate>Sun,  7 Apr 2019 00:00:00 +0000</pubDate><dc:creator>rabite0</dc:creator></item><item><title>A Basic Web Application with Rust and Actix-web</title><link>https://zupzup.org/rust-webapp/</link><description><![CDATA[As a first little project in Rust I thought I'd do something familiar, so I created a small web application, which we'll check out in this post.]]></description><guid isPermaLink="false">dcd70897-0b31-4930-b57d-3fc567e64c98</guid><pubDate>Sun,  7 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Mario Zupan</dc:creator></item><item><title>Tricks In Arc Swap</title><link>https://vorner.github.io/2019/04/06/tricks-in-arc-swap.html</link><description><![CDATA[This is a continuation of the Making Arc more atomic post. In short, ArcSwap is a place where you can atomically store and load an Arc, similar to RwLock<Arc<T>> but without the locking. It’s a good tool if you have some data that is very frequently read but infrequently modified, like configuration or an in-memory database that answers millions of queries per second, but is replaced only every 5 minutes. The canonical example for this is routing tables ‒ you want to read them with every passing packet, but you change them only when routing changes.]]></description><guid isPermaLink="false">30a32647-13d1-4d87-89c0-804ef7d456e6</guid><pubDate>Sat,  6 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Michal &apos;vorner&apos; Vaner</dc:creator></item><item><title>Arenas vs. Indices</title><link>https://llogiq.github.io/2019/04/06/arena.html</link><description><![CDATA[When optimizing code, one thing I’m always looking for is memory layout and access patterns. One such pattern is an arena: Reserve some sufficiently large space to put your objects in, then allocate by incrementing a pointer. If your objects are of a uniform type, you can basically simplify this to a Vec of that type.]]></description><guid isPermaLink="false">5af2fc94-f73d-498a-99b8-15400fad948e</guid><pubDate>Sat,  6 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Llogiq</dc:creator></item><item><title>Linkerd v2: How Lessons from Production Adoption Resulted in a Rewrite of the Service Mesh</title><link>https://www.infoq.com/articles/linkerd-v2-production-adoption</link><description><![CDATA[Linkerd 2.0 introduced a substantial rewrite of the widely adopted service mesh, using a split between Go and Rust. In this article, we discuss the lessons learned in the "cauldron of production adoption", and how those lessons became the basis of Linkerd 2.x’s philosophy, design, and implementation.]]></description><guid isPermaLink="false">cbaf5407-81db-4367-9b58-ff9cc668b1a3</guid><pubDate>Fri,  5 Apr 2019 00:00:00 +0000</pubDate><dc:creator>William Morgan</dc:creator></item><item><title>Our journey from nightly to stable Rust</title><link>https://blog.datalust.co/our-journey-from-rust-nightly-to-stable/</link><description><![CDATA[When we shipped Seq 5.0 back in November, our new storage engine was compiled against Rust's unstable nightly channel. As of Seq 5.1, we can instead use the supported stable channel. That feels like a bit of a milestone so I'd like to share a few details about our journey from nightly to stable, and celebrate the progress the community has made on the language, libraries, and tooling over the last twelve months that made that journey painless for us.]]></description><guid isPermaLink="false">7e90b841-ce0c-47f1-b6ab-420aa7d7bb35</guid><pubDate>Thu,  4 Apr 2019 23:44:23 +0000</pubDate><dc:creator>Ashley Mannix</dc:creator></item><item><title>Complex data types and the Rust FFI</title><link>http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/</link><description><![CDATA[There are a few good resources on the internet about using the Rust FFI to expose functions written in Rust to other languages. However, I found little information about passing data types between languages. To help remedy this situation, I describe in this post a simple Rust library that I wrote to explore how to pass complex data types from Rust to C.]]></description><guid isPermaLink="false">d171d946-7117-4e2a-bfae-0a4089cdfa9d</guid><pubDate>Thu,  4 Apr 2019 17:51:55 +0000</pubDate><dc:creator>Kyle M. Douglass</dc:creator></item><item><title>Ocypod: Redis-backed job queue server with an easy to use HTTP interface</title><link>https://ocypod.readthedocs.io/</link><description><![CDATA[Ocypod is a language-agnostic, Redis-backed job queue server with an easy to use HTTP interface. Its focus is on handling and monitoring long running jobs.]]></description><guid isPermaLink="false">4fb7d3bc-05c5-4c23-abaa-70294fa23715</guid><pubDate>Wed,  3 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Dave Challis</dc:creator></item><item><title>Inko Programming Language</title><link>https://inko-lang.org/</link><description><![CDATA[Concurrent and safe object-oriented programming, without the headaches.]]></description><guid isPermaLink="false">a9c1b96b-5e31-432e-bbb8-c18a943d03b9</guid><pubDate>Wed,  3 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Yorick Peterse</dc:creator></item><item><title>Moving on from Rails and what&apos;s next</title><link>https://blog.seantheprogrammer.com/moving-on-from-rails-and-whats-next</link><description><![CDATA[It’s been more than 6 years since my first commit to Ruby on Rails. I had just gotten my first full time Ruby position, was excited to move away from PHP, and wanted to give back. Since then I made 1452 commits to the project. Today, I am finally ready to move on from Rails.]]></description><guid isPermaLink="false">94f04f9a-9a74-4e3c-9d96-02fec8e01229</guid><pubDate>Tue,  2 Apr 2019 11:43:23 -0700</pubDate><dc:creator>Sean Griffin</dc:creator></item><item><title>Sonic: a minimalist  alternative to Elasticsearch written in Rust</title><link>https://notamonadtutorial.com/sonic-a-minimalist-alternative-to-elasticsearch-written-in-rust-7f3612ecb47b</link><description><![CDATA[I always end up using Elasticsearch to index documents, to generate autocompletes and for geolocation. Sonic doesn’t solve all three problems but it is a good tool to solve the first two. I have not yet used it in production, but it seems like a good lightweight alternative to Elasticsearch.

Since we love databases and we are trying to focus on Rust projects, Amin Arria and I decided to interview Sonic’s creator, Valerian Saliou, who generously agreed.]]></description><guid isPermaLink="false">f995f40c-77a1-4091-8c38-7ec9c848e3f7</guid><pubDate>Tue,  2 Apr 2019 16:15:58 +0000</pubDate><dc:creator>unbalancedparentheses</dc:creator></item><item><title>Crossing the Rust FFI frontier with Protocol Buffers</title><link>https://hacks.mozilla.org/2019/04/crossing-the-rust-ffi-frontier-with-protocol-buffers/</link><description><![CDATA[The Firefox Application Services engineering team made the decision to use Rust to build cross-platform components for Firefox Sync, powering Firefox Accounts across many devices. They are implementing core business logic using Rust and wrapping it in a thin platform-native layer, such as Kotlin for Android and Swift for iOS.]]></description><guid isPermaLink="false">3046fc78-93d2-4298-a8ae-134f2fbd29b9</guid><pubDate>Tue,  2 Apr 2019 14:42:47 +0000</pubDate><dc:creator>Edouard Oger</dc:creator></item><item><title>Javascript evaluator part 1: Lexing</title><link>https://medium.com/@retep007/javascript-lexing-for-high-performance-f9a800ec930d</link><description><![CDATA[In this post I will describe my latest findings from writing my own Javascript lexer in Rust-lang. I will start by briefly describing what lexing is. Then, I will continue explaining how to implement state machines in Rust-lang. Next, I talk about how to use state machines for Javascript lexing. Last but not least, I cover further performance optimizations of my lexer.]]></description><guid isPermaLink="false">0ee4dffd-3f5f-4c26-9a66-5a2c94db3ace</guid><pubDate>Tue,  2 Apr 2019 06:08:32 +0000</pubDate><dc:creator>Peter Hrvola</dc:creator></item><item><title>Explained: How does async work in Rust?</title><link>https://dev.to/gruberb/explained-how-does-async-work-in-rust-46f8</link><description><![CDATA[This article will outline an overview of the why and how async exists in Rust.]]></description><guid isPermaLink="false">881b9dbf-f50a-4a3d-9992-de8c093250bf</guid><pubDate>Tue,  2 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Bastian Gruber</dc:creator></item><item><title>An interview with the creator of Gleam: an ML like language for the Erlang VM with a compiler written in Rust</title><link>https://notamonadtutorial.com/an-interview-with-the-creator-of-gleam-an-ml-like-language-for-the-erlang-vm-with-a-compiler-e94775f60dc7</link><description><![CDATA[An interesting thing about Gleam is that its compiler is written in Rust. I think that Rust is a sort of ML + C language. I like C since the developer is at the driver seat driving with manual transmission. I can’t explain very well but I have always seen C as a simple and powerful language but I have always disliked C++. Knowing that I like ML and C you might understand why I find Rust an interesting language. To sum up we (me and Juan Bono) decided to do this interview with Louis Pilfold not only because of what it is, but also because it is implemented in Rust.]]></description><guid isPermaLink="false">da05eb25-52b2-48f6-9008-944a9a95ccaa</guid><pubDate>Mon,  1 Apr 2019 16:30:35 +0000</pubDate><dc:creator>unbalancedparentheses</dc:creator></item><item><title>Reviewing Sled: Part II</title><link>https://ayende.com/blog/186785-A/reviewing-sled-part-ii?Key=d48f04ae-25dc-428e-992a-ff38587a7c72</link><description><![CDATA[Sled is an embedded database engine written in Rust. It takes a very different approach for how to store data, which I’m really excited to see. And with that, let’s be about it. In stopped in my last post when getting to the flusher, which simply sleep and call flush on the iobufs.]]></description><guid isPermaLink="false">aeb77fc8-4dba-424f-b119-aa77300b683d</guid><pubDate>Mon,  1 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Ayende Rahien</dc:creator></item><item><title>WASI example using Rust and Lucet</title><link>https://hermanradtke.com/2019/04/01/wasi-example-using-rust-and-lucet.html</link><description><![CDATA[Lucet is Fastly’s native WebAssembly compiler and runtime. Using the Lucet runtime and Rust’s wasm32-unknown-wasi target, we can create a WASM program that runs on the server.]]></description><guid isPermaLink="false">6d648c86-cd0a-4f11-ac22-af2fe977f6d6</guid><pubDate>Mon,  1 Apr 2019 00:00:00 +0000</pubDate><dc:creator>Herman J. Radtke III</dc:creator></item><item><title>How to Write Better Compilation Error Message In Rust</title><link>https://blog.knoldus.com/how-to-write-better-compilation-error-message-in-rust/</link><description><![CDATA[While exploring Rust's standard libraries, I came across a beautiful feature of Rust - compile_error.]]></description><guid isPermaLink="false">9197a635-8114-4c33-ae94-226af2147624</guid><pubDate>Sun, 31 Mar 2019 14:08:04 +0000</pubDate><dc:creator>Ayush Mishra</dc:creator></item><item><title>Writing UEFI application in Rust from scratch</title><link>https://medium.com/garasubo/writing-uefi-application-in-rust-from-scratch-882bf35a4d63</link><description><![CDATA[Recently, x86_64-unknown-uefi target was added into Rust mainline (https://github.com/rust-lang/rust/pull/56769). So, I tried to write UEFI application with this update. There exists an awesome crate, uefi-rs, which provides Rust interface for UEFI application. However, this is my first time to write UEFI application, so to understand what happens in it, I didn’t use any existing crate.]]></description><guid isPermaLink="false">99bfc2e1-cc1f-4047-941f-627f7e222d75</guid><pubDate>Sun, 31 Mar 2019 08:31:22 +0000</pubDate><dc:creator>garasubo (ガラスボー)</dc:creator></item><item><title>How to Mock Time in Rust Tests and Cargo Gotchas We Met</title><link>https://blog.iany.me/2019/03/how-to-mock-time-in-rust-tests-and-cargo-gotchas-we-met</link><description><![CDATA[I'm working in a team developing a big Rust project recently. The project has some features depending on time. We, the developers, want to be able to mock the time in test. In this post, I'll talk about the problems we have met, mostly related to Cargo.]]></description><guid isPermaLink="false">54d19ed4-0cb7-4ab9-939e-5afcdf8b0ca5</guid><pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate><dc:creator>Ian Yang</dc:creator></item><item><title>Mocking in Rust with conditional compilation</title><link>https://klausi.github.io/rustnish/2019/03/31/mocking-in-rust-with-conditional-compilation.html</link><description><![CDATA[When writing automated unit tests for your application you will probably need to use mocks at some point. Classical object-oriented programming languages such as PHP solve this with reflection where mock object types are created during test runtime. The code under test expects a certain interface or class and the test code passes mock objects that implement the interface or are a subclass.]]></description><guid isPermaLink="false">5b355e5c-bc78-4134-91a2-c383b350d5f8</guid><pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate><dc:creator>klausi</dc:creator></item><item><title>Five Super Helpful Rust Things That Nobody Told You About</title><link>https://saghm.github.io/five-rust-things/</link><description><![CDATA[Pretty-print debug, unimplemented!, ”..” struct literal operator, Pattern match guards, and Padding format operator.]]></description><guid isPermaLink="false">86c50475-46ad-47b1-83b7-a3d63fecbb4f</guid><pubDate>Sat, 30 Mar 2019 09:19:00 +0000</pubDate><dc:creator>Saghm Rossi</dc:creator></item></channel></rss>